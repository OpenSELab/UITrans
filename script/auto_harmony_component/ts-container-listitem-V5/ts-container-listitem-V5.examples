/*\n实现思路：\n本示例展示了如何在鸿蒙ArkUI中使用List组件和ListItem组件来创建一个具有不同样式的列表项。通过使用ForEach循环来动态生成列表项，并设置不同的样式和属性，以实现多样化的列表展示效果。\n\n总体功能与效果描述：\n该示例创建了一个包含多个列表项的列表，每个列表项具有不同的样式（CARD或NONE）。列表项可以多选，并且整个列表具有特定的背景颜色。\n*/\n\n// ListItemExample3.ets\n@Entry\n@Component\nstruct ListItemExample3 {\n  build() {\n    Column() {\n      // 创建一个列表，设置项之间的间距和初始索引\n      List({ space: "4vp", initialIndex: 0 }) {\n        // 创建一个列表项组，设置样式为CARD\n        ListItemGroup({ style: ListItemGroupStyle.CARD }) {\n          // 使用ForEach循环生成多个列表项，每个列表项具有不同的样式\n          ForEach([ListItemStyle.CARD, ListItemStyle.CARD, ListItemStyle.NONE], (itemStyle: number, index?: number) => {\n            // 创建一个列表项，设置样式\n            ListItem({ style: itemStyle }) {\n              // 创建一个文本组件，显示当前列表项的索引\n              Text("" + index)\n                .width("100%") // 设置文本宽度为100%\n                .textAlign(TextAlign.Center) // 设置文本居中对齐\n            }\n          })\n        }\n        // 使用ForEach循环生成多个列表项，每个列表项具有不同的样式\n        ForEach([ListItemStyle.CARD, ListItemStyle.CARD, ListItemStyle.NONE], (itemStyle: number, index?: number) => {\n          // 创建一个列表项，设置样式\n          ListItem({ style: itemStyle }) {\n            // 创建一个文本组件，显示当前列表项的索引\n            Text("" + index)\n              .width("100%") // 设置文本宽度为100%\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n          }\n        })\n      }\n      .width('100%') // 设置列表宽度为100%\n      .multiSelectable(true) // 设置列表项可以多选\n      .backgroundColor(0xDCDCDC) // 设置列表背景颜色\n    }\n    .width('100%') // 设置列宽度为100%\n    .padding({ top: 5 }) // 设置顶部内边距\n  }\n}


/*\n实现思路：\n本示例展示了如何使用鸿蒙ArkUI框架创建一个简单的列表组件。通过定义一个数字数组，并使用ForEach组件遍历数组生成列表项，每个列表项包含一个文本组件显示数组元素。列表组件设置了间距、初始索引和滚动条状态。\n\n总体功能与效果描述：\n该示例呈现一个垂直排列的列表，列表项之间有20像素的间距，每个列表项显示一个数字，背景为白色，文本居中对齐。列表宽度为屏幕宽度的90%，高度自适应，背景为灰色，顶部有5像素的内边距。\n*/\n\n// ListItemExample.ets\n@Entry\n@Component\nstruct ListItemExample {\n  // 定义一个数字数组，用于生成列表项\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n  build() {\n    Column() {\n      // 创建一个列表组件，设置项之间的间距为20像素，初始显示索引为0\n      List({ space: 20, initialIndex: 0 }) {\n        // 使用ForEach组件遍历数组，生成列表项\n        ForEach(this.arr, (item: number) => {\n          ListItem() {\n            // 创建一个文本组件，显示数组元素\n            Text('' + item)\n              .width('100%') // 设置文本组件宽度为100%\n              .height(100) // 设置文本组件高度为100像素\n              .fontSize(16) // 设置文本字体大小为16像素\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n              .borderRadius(10) // 设置文本组件的边框圆角为10像素\n              .backgroundColor(0xFFFFFF) // 设置文本组件的背景颜色为白色\n          }\n        }, (item: string) => item) // 定义ForEach的键生成函数\n      }\n      .width('90%') // 设置列表宽度为屏幕宽度的90%\n      .scrollBar(BarState.Off) // 关闭滚动条显示\n    }\n    .width('100%') // 设置列组件宽度为100%\n    .height('100%') // 设置列组件高度为100%\n    .backgroundColor(0xDCDCDC) // 设置列组件的背景颜色为灰色\n    .padding({ top: 5 }) // 设置列组件顶部内边距为5像素\n  }\n}


/*\n实现思路：\n本示例展示了如何在鸿蒙ArkUI中使用List组件和SwipeAction功能，实现一个带有滑动删除和设置按钮的列表项。通过@State装饰器管理列表数据和状态字符串，使用@Builder装饰器定义可重用的UI组件，以及通过swipeAction接口实现滑动操作。\n\n总体功能与效果描述：\n- 显示一个包含多个列表项的列表，每个列表项可以滑动以显示删除和设置按钮。\n- 滑动到特定区域时，更新状态字符串以反映当前操作状态。\n- 点击删除按钮时，从列表中移除对应的列表项，并带有动画效果。\n*/\n\n// ListItemExample2.ets\n@Entry\n@Component\nstruct ListItemExample2 {\n  @State arr: number[] = [0, 1, 2, 3, 4]; // 初始化列表数据\n  @State enterEndDeleteAreaString: string = "not enterEndDeleteArea"; // 初始化进入删除区域的状态字符串\n  @State exitEndDeleteAreaString: string = "not exitEndDeleteArea"; // 初始化离开删除区域的状态字符串\n\n  // 定义一个可重用的UI组件，包含两个按钮：删除和设置\n  @Builder itemEnd() {\n    Row() {\n      Button("Delete").margin("4vp") // 删除按钮\n      Button("Set").margin("4vp") // 设置按钮\n    }.padding("4vp").justifyContent(FlexAlign.SpaceEvenly) // 设置布局和对齐方式\n  }\n\n  build() {\n    Column() {\n      List({ space: 10 }) { // 创建一个列表，设置项间距\n        ForEach(this.arr, (item: number) => { // 遍历列表数据\n          ListItem() {\n            Text("item" + item) // 显示列表项文本\n              .width('100%')\n              .height(100)\n              .fontSize(16)\n              .textAlign(TextAlign.Center)\n              .borderRadius(10)\n              .backgroundColor(0xFFFFFF)\n          }\n          .transition({ type: TransitionType.Delete, opacity: 0 }) // 设置删除动画\n          .swipeAction({\n            end: {\n              builder: () => { this.itemEnd() }, // 滑动时显示的UI组件\n              onAction: () => {\n                animateTo({ duration: 1000 }, () => { // 执行删除动画\n                  let index = this.arr.indexOf(item); // 获取当前项的索引\n                  this.arr.splice(index, 1); // 从列表中移除当前项\n                })\n              },\n              actionAreaDistance: 56, // 设置滑动区域距离\n              onEnterActionArea: () => { // 进入滑动区域时的回调\n                this.enterEndDeleteAreaString = "enterEndDeleteArea"; // 更新状态字符串\n                this.exitEndDeleteAreaString = "not exitEndDeleteArea";\n              },\n              onExitActionArea: () => { // 离开滑动区域时的回调\n                this.enterEndDeleteAreaString = "not enterEndDeleteArea";\n                this.exitEndDeleteAreaString = "exitEndDeleteArea"; // 更新状态字符串\n              }\n            }\n          })\n        }, (item: string) => item)\n      }\n      Text(this.enterEndDeleteAreaString).fontSize(20) // 显示进入删除区域的状态字符串\n      Text(this.exitEndDeleteAreaString).fontSize(20) // 显示离开删除区域的状态字符串\n    }\n    .padding(10)\n    .backgroundColor(0xDCDCDC)\n    .width('100%')\n    .height('100%')\n  }\n}