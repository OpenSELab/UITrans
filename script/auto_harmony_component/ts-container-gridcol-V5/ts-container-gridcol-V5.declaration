{
    "description": "栅格子组件，必须作为栅格容器组件(GridRow)的子组件使用。可以包含单个子组件。",
    "details": null,
    "interfaces": [
        {
            "description": "GridCol(option?: GridColOptions)",
            "params": {
                "option": {
                    "type": "GridColOptions",
                    "required": false,
                    "description": "栅格布局子组件参数。",
                    "default": null
                }
            }
        }
    ],
    "attributes": {
        "span": {
            "description": "设置占用列数。span为0，意味着该元素不参与布局计算，即不会被渲染。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "GridColColumnOption"
                    ],
                    "required": true,
                    "description": "占用列数。",
                    "default": 1
                }
            }
        },
        "gridColOffset": {
            "description": "设置相对于前一个栅格子组件偏移的列数。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "GridColColumnOption"
                    ],
                    "required": true,
                    "description": "相对于前一个栅格子组件偏移的列数。",
                    "default": 0
                }
            }
        },
        "order": {
            "description": "设置元素的序号，根据栅格子组件的序号，从小到大对栅格子组件做排序。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "GridColColumnOption"
                    ],
                    "required": true,
                    "description": "元素的序号。",
                    "default": 0
                }
            }
        }
    },
    "events": {},
    "rules": null,
    "examples": [
        "/*\\n实现思路：\\n本示例展示了如何使用GridRow组件来创建一个栅格布局，通过设置不同的属性来调整栅格的列数、间距和对齐方式。\\n总体功能与效果描述：\\n通过GridRow和GridCol组件的组合，实现了一个响应式的栅格布局，能够根据屏幕宽度自动调整列的显示。\\n*/\\n\\n// GridRowExample.ets\\n@Entry\\n@Component\\nstruct GridRowExample {\\n  build() {\\n    Column({ space: 5 }) {\\n      // 创建一个GridRow容器，设置列数为3，列间距为10，内容水平和垂直居中对齐\\n      GridRow({ columns: 3, gutter: 10, alignContent: FlexAlign.Center, alignItems: VerticalAlign.Center }) {\\n        // 第一个栅格列，设置背景色为蓝色，宽度为100，高度为50\\n        GridCol() {\\n          Text('Column 1')\\n            .fontSize(16)\\n            .fontColor(Color.White)\\n        }\\n        .backgroundColor(Color.Blue)\\n        .width(100)\\n        .height(50)\\n\\n        // 第二个栅格列，设置背景色为绿色，宽度为100，高度为50\\n        GridCol() {\\n          Text('Column 2')\\n            .fontSize(16)\\n            .fontColor(Color.White)\\n        }\\n        .backgroundColor(Color.Green)\\n        .width(100)\\n        .height(50)\\n\\n        // 第三个栅格列，设置背景色为红色，宽度为100，高度为50\\n        GridCol() {\\n          Text('Column 3')\\n            .fontSize(16)\\n            .fontColor(Color.White)\\n        }\\n        .backgroundColor(Color.Red)\\n        .width(100)\\n        .height(50)\\n      }\\n      .width('100%')\\n      .height(100)\\n      .backgroundColor(Color.Gray)\\n\\n      // 创建另一个GridRow容器，设置列数为2，列间距为5，内容水平和垂直居中对齐\\n      GridRow({ columns: 2, gutter: 5, alignContent: FlexAlign.Center, alignItems: VerticalAlign.Center }) {\\n        // 第一个栅格列，设置背景色为黄色，宽度为100，高度为50\\n        GridCol() {\\n          Text('Column 1')\\n            .fontSize(16)\\n            .fontColor(Color.Black)\\n        }\\n        .backgroundColor(Color.Yellow)\\n        .width(100)\\n        .height(50)\\n\\n        // 第二个栅格列，设置背景色为紫色，宽度为100，高度为50\\n        GridCol() {\\n          Text('Column 2')\\n            .fontSize(16)\\n            .fontColor(Color.White)\\n        }\\n        .backgroundColor(Color.Purple)\\n        .width(100)\\n        .height(50)\\n      }\\n      .width('100%')\\n      .height(100)\\n      .backgroundColor(Color.Gray)\\n    }\\n    .width('100%')\\n    .height('100%')\\n    .padding(10)\\n  }\\n}"
    ],
    "is_common_attrs": true
}