/*\n实现思路：\n本示例通过使用鸿蒙ArkUI框架中的List组件和相关事件回调，实现了一个纵向滚动的列表。列表中的每一项是一个简单的文本显示，同时监听了列表的滚动事件，并在控制台输出相关索引信息。\n\n总体功能与效果描述：\n1. 创建一个包含数字的数组，并将其显示为纵向列表。\n2. 列表项之间有20像素的间距，初始显示第一个列表项。\n3. 列表的滚动条被隐藏，滚动摩擦系数为0.6。\n4. 列表项之间有分隔线，分隔线的颜色和宽度可配置。\n5. 当列表滚动时，会触发滚动索引回调，输出当前显示的第一个和最后一个列表项的索引。\n6. 当列表可见内容发生变化时，输出可见内容的起始和结束信息。\n7. 当列表实际滚动时，输出滚动偏移量和滚动状态。\n*/\n\n// ListExample.ets\n@Entry\n@Component\nstruct ListExample {\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] // 定义一个包含数字的数组\n\n  build() {\n    Column() {\n      List({ space: 20, initialIndex: 0 }) { // 创建一个列表，设置项间距为20，初始显示第一个项\n        ForEach(this.arr, (item: number) => { // 遍历数组，生成列表项\n          ListItem() {\n            Text('' + item) // 显示数组中的数字\n              .width('100%').height(100).fontSize(16) // 设置文本的宽度、高度和字体大小\n              .textAlign(TextAlign.Center).borderRadius(10).backgroundColor(0xFFFFFF) // 设置文本居中对齐、圆角和背景颜色\n          }\n        }, (item: string) => item) // 定义列表项的唯一键\n      }\n      .listDirection(Axis.Vertical) // 设置列表为纵向滚动\n      .scrollBar(BarState.Off) // 隐藏滚动条\n      .friction(0.6) // 设置滚动摩擦系数\n      .divider({ strokeWidth: 2, color: 0xFFFFFF, startMargin: 20, endMargin: 20 }) // 设置列表项之间的分隔线\n      .edgeEffect(EdgeEffect.Spring) // 设置边缘效果为弹性效果\n      .onScrollIndex((firstIndex: number, lastIndex: number, centerIndex: number) => { // 监听滚动索引变化\n        console.info('first' + firstIndex) // 输出第一个可见项的索引\n        console.info('last' + lastIndex) // 输出最后一个可见项的索引\n        console.info('center' + centerIndex) // 输出中间可见项的索引\n      })\n      .onScrollVisibleContentChange((start: VisibleListContentInfo, end: VisibleListContentInfo) => { // 监听可见内容变化\n        console.log(' start index: ' + start.index + // 输出起始可见内容的索引\n                    ' start item group area: ' + start.itemGroupArea + // 输出起始可见内容的项目组区域\n                    ' start index in group: ' + start.itemIndexInGroup) // 输出起始可见内容在组中的索引\n        console.log(' end index: ' + end.index + // 输出结束可见内容的索引\n                    ' end item group area: ' + end.itemGroupArea + // 输出结束可见内容的项目组区域\n                    ' end index in group: ' + end.itemIndexInGroup) // 输出结束可见内容在组中的索引\n      })\n      .onDidScroll((scrollOffset: number, scrollState: ScrollState) => { // 监听实际滚动事件\n        console.info(`onScroll scrollState = ScrollState` + scrollState + `, scrollOffset = ` + scrollOffset) // 输出滚动状态和滚动偏移量\n      })\n      .width('90%') // 设置列表宽度为父容器的90%\n    }\n    .width('100%') // 设置列的宽度为父容器的100%\n    .height('100%') // 设置列的高度为父容器的100%\n    .backgroundColor(0xDCDCDC) // 设置背景颜色\n    .padding({ top: 5 }) // 设置顶部内边距\n  }\n}


/*\n实现思路：\n本示例展示了如何在鸿蒙ArkUI中使用List组件和ListItem组件来创建一个可滚动的列表，并动态改变列表项的对齐方式。通过点击按钮，可以循环切换列表项的对齐方式（Start、Center、End）。\n\n总体功能与效果描述：\n1. 创建一个包含20个项目的列表，每个项目显示一个数字。\n2. 列表项具有固定的宽度和高度，并带有边框和背景色。\n3. 列表具有固定的宽度和高度，并带有边框和滚动条。\n4. 通过点击按钮，可以切换列表项的对齐方式。\n*/\n\n// ListLanesExample.ets\n@Entry\n@Component\nstruct ListLanesExample {\n  @State arr: string[] = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"]\n  @State alignListItem: ListItemAlign = ListItemAlign.Start\n\n  build() {\n    Column() {\n      List({ space: 20, initialIndex: 0 }) {\n        ForEach(this.arr, (item: string) => {\n          ListItem() {\n            Text('' + item)\n              .width('100%') // 设置文本宽度为100%\n              .height(100) // 设置文本高度为100\n              .fontSize(16) // 设置字体大小为16\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n              .borderRadius(10) // 设置边框圆角\n              .backgroundColor(0xFFFFFF) // 设置背景颜色为白色\n          }\n          .border({ width: 2, color: Color.Green }) // 设置列表项的边框\n        }, (item: string) => item)\n      }\n      .height(300) // 设置列表高度为300\n      .width("90%") // 设置列表宽度为90%\n      .friction(0.6) // 设置列表的摩擦系数\n      .border({ width: 3, color: Color.Red }) // 设置列表的边框\n      .lanes({ minLength: 40, maxLength: 40 }) // 设置列表的行数\n      .alignListItem(this.alignListItem) // 设置列表项的对齐方式\n      .scrollBar(BarState.Off) // 关闭滚动条\n\n      Button("点击更改alignListItem:" + this.alignListItem).onClick(() => {\n        if (this.alignListItem == ListItemAlign.Start) {\n          this.alignListItem = ListItemAlign.Center // 切换到中心对齐\n        } else if (this.alignListItem == ListItemAlign.Center) {\n          this.alignListItem = ListItemAlign.End // 切换到尾部对齐\n        } else {\n          this.alignListItem = ListItemAlign.Start // 切换到头部对齐\n        }\n      })\n    }\n    .width('100%') // 设置列的宽度为100%\n    .height('100%') // 设置列的高度为100%\n    .backgroundColor(0xDCDCDC) // 设置背景颜色为灰色\n    .padding({ top: 5 }) // 设置顶部内边距\n  }\n}


/*\n实现思路：\n本示例展示了如何在鸿蒙ArkUI中创建一个可编辑的列表组件。列表中的每个项包含一个文本和一个删除按钮。通过点击“edit list”按钮，用户可以切换编辑模式，从而显示或隐藏删除按钮。点击删除按钮可以移除对应的列表项。\n\n总体功能与效果描述：\n1. 显示一个包含数字的列表。\n2. 提供一个按钮来切换编辑模式。\n3. 在编辑模式下，每个列表项旁边显示一个删除按钮。\n4. 点击删除按钮可以移除对应的列表项。\n*/\n\n// ListExample.ets\n@Entry\n@Component\nstruct ListExample {\n  @State arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] // 初始化列表数据\n  @State editFlag: boolean = false // 控制编辑模式的标志\n\n  build() {\n    Stack({ alignContent: Alignment.TopStart }) {\n      Column() {\n        List({ space: 20, initialIndex: 0 }) {\n          ForEach(this.arr, (item: number, index?: number) => {\n            ListItem() {\n              Flex({ direction: FlexDirection.Row, alignItems: ItemAlign.Center }) {\n                Text('' + item) // 显示列表项的文本\n                  .width('100%')\n                  .height(80)\n                  .fontSize(20)\n                  .textAlign(TextAlign.Center)\n                  .borderRadius(10)\n                  .backgroundColor(0xFFFFFF)\n                  .flexShrink(1)\n                if (this.editFlag) {\n                  Button() {\n                    Text("delete").fontSize(16) // 显示删除按钮的文本\n                  }.width('30%').height(40)\n                  .onClick(() => {\n                    if (index != undefined) {\n                      console.info(this.arr[index] + 'Delete') // 打印删除信息\n                      this.arr.splice(index, 1) // 移除对应的列表项\n                      console.info(JSON.stringify(this.arr)) // 打印更新后的列表数据\n                      this.editFlag = false // 退出编辑模式\n                    }\n                  }).stateEffect(true) // 启用按钮的状态效果\n                }\n              }\n            }\n          }, (item: string) => item) // 使用item作为唯一键\n        }.width('90%')\n        .scrollBar(BarState.Off) // 禁用滚动条\n        .friction(0.6) // 设置列表的摩擦系数\n      }.width('100%')\n\n      Button('edit list') // 显示编辑列表按钮\n        .onClick(() => {\n          this.editFlag = !this.editFlag // 切换编辑模式\n        }).margin({ top: 5, left: 20 })\n    }.width('100%').height('100%').backgroundColor(0xDCDCDC).padding({ top: 5 })\n  }\n}


/*\n实现思路：\n本示例展示了如何在鸿蒙ArkUI中创建一个水平滚动的列表组件。通过使用List组件和ForEach循环，动态生成列表项，并设置列表的滚动效果和样式。\n\n总体功能与效果描述：\n该组件在页面加载时生成一个包含20个数字的水平滚动列表。列表项具有圆角边框和居中对齐的文本，列表本身具有弹性边缘效果和居中对齐的滚动吸附效果。\n*/\n\n// ListExample.ets\n@Entry\n@Component\nstruct ListExample {\n  // 定义一个数组用于存储列表数据\n  private arr: number[] = [];\n  // 定义一个Scroller对象用于控制列表的滚动\n  private scrollerForList: Scroller = new Scroller();\n\n  // 组件即将显示时，初始化数组数据\n  aboutToAppear() {\n    for (let i = 0; i < 20; i++) {\n      this.arr.push(i); // 向数组中添加数字\n    }\n  }\n\n  build() {\n    Column() {\n      Row() {\n        List({ space: 20, initialIndex: 3, scroller: this.scrollerForList }) {\n          // 使用ForEach循环生成列表项\n          ForEach(this.arr, (item: number) => {\n            ListItem() {\n              Text('' + item) // 显示列表项的文本\n                .width('100%').height(100).fontSize(16)\n                .textAlign(TextAlign.Center) // 文本居中对齐\n            }\n            .borderRadius(10).backgroundColor(0xFFFFFF) // 设置列表项的圆角边框和背景色\n            .width('60%')\n            .height('80%')\n          }, (item: number) => JSON.stringify(item)) // 使用JSON.stringify作为键值生成器\n        }\n        .chainAnimation(true) // 启用列表项的链式动画\n        .edgeEffect(EdgeEffect.Spring) // 设置列表的弹性边缘效果\n        .listDirection(Axis.Horizontal) // 设置列表为水平方向\n        .height('100%')\n        .width('100%')\n        .scrollSnapAlign(ScrollSnapAlign.CENTER) // 设置滚动吸附效果为居中对齐\n        .borderRadius(10) // 设置列表的圆角边框\n        .backgroundColor(0xDCDCDC) // 设置列表的背景色\n      }\n      .width('100%')\n      .height('100%')\n      .backgroundColor(0xDCDCDC) // 设置容器的背景色\n      .padding({ top: 10 }) // 设置容器的顶部内边距\n    }\n  }\n}


/*\n实现思路：\n本示例展示了如何在鸿蒙ArkUI中使用List组件，并通过设置childrenMainSize属性来确保在子组件高度不一致时，调用scrollTo接口也能准确跳转到指定位置。示例中还包含了动态调整子组件尺寸和滚动到指定位置的功能。\n\n总体功能与效果描述：\n1. 创建一个包含不同高度的子组件的List。\n2. 通过按钮动态调整子组件的默认尺寸。\n3. 通过按钮调用scrollTo接口，实现滚动到指定位置。\n*/\n\n// ListExample.ets\n@Entry\n@Component\nstruct ListExample {\n  // 定义一个数组用于存储列表项的索引\n  private arr: number[] = []\n  // 创建一个ListScroller实例，用于滚动操作\n  private scroller: ListScroller = new ListScroller()\n  // 定义列表项之间的间距\n  @State listSpace: number = 10\n  // 定义子组件的主尺寸，初始值为100\n  @State listChildrenSize: ChildrenMainSize = new ChildrenMainSize(100)\n\n  // 组件初始化时执行的操作\n  aboutToAppear() {\n    // 填充数组，包含0到9的数字\n    for (let i = 0; i < 10; i++) {\n      this.arr.push(i)\n    }\n    // 设置前5个子组件的高度为300\n    this.listChildrenSize.splice(0, 5, [300, 300, 300, 300, 300])\n  }\n\n  build() {\n    Column() {\n      // 创建一个List组件，设置间距、初始索引和滚动控制器\n      List({ space: this.listSpace, initialIndex: 4, scroller: this.scroller }) {\n        // 使用ForEach循环生成列表项\n        ForEach(this.arr, (item: number) => {\n          ListItem() {\n            // 创建文本组件，显示列表项的索引\n            Text('item-' + item)\n              .height(item < 5 ? 300 : this.listChildrenSize.childDefaultSize) // 设置高度，前5项为300，其余为默认尺寸\n              .width('90%') // 设置宽度\n              .fontSize(16) // 设置字体大小\n              .textAlign(TextAlign.Center) // 设置文本对齐方式\n              .borderRadius(10) // 设置边框圆角\n              .backgroundColor(0xFFFFFF) // 设置背景颜色\n          }\n        }, (item: string) => item) // 指定键值生成函数\n      }\n      .backgroundColor(Color.Gray) // 设置列表背景颜色\n      .layoutWeight(1) // 设置布局权重\n      .scrollBar(BarState.On) // 显示滚动条\n      .childrenMainSize(this.listChildrenSize) // 设置子组件的主尺寸\n      .alignListItem(ListItemAlign.Center) // 设置列表项对齐方式\n\n      // 创建一行按钮，用于调整子组件尺寸和滚动到指定位置\n      Row() {\n        Button() { Text('item size + 50') }\n          .onClick(() => {\n            this.listChildrenSize.childDefaultSize += 50 // 增加子组件默认尺寸\n          })\n          .height('50%') // 设置按钮高度\n          .width('30%') // 设置按钮宽度\n        Button() { Text('item size - 50') }\n          .onClick(() => {\n            if (this.listChildrenSize.childDefaultSize === 0) {\n              return // 如果默认尺寸为0，则不执行减小操作\n            }\n            this.listChildrenSize.childDefaultSize -= 50 // 减小子组件默认尺寸\n          })\n          .height('50%') // 设置按钮高度\n          .width('30%') // 设置按钮宽度\n        Button() { Text('scrollTo (0, 310)') }\n          .onClick(() => {\n            this.scroller.scrollTo({ xOffset: 0, yOffset: 310 }) // 滚动到指定位置\n          })\n          .height('50%') // 设置按钮高度\n          .width('30%') // 设置按钮宽度\n      }\n      .height('20%') // 设置行的高度\n    }\n  }\n}