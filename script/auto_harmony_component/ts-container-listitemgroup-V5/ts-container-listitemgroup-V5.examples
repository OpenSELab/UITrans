/*\n实现思路：\n本示例展示了如何使用List、ListItemGroup和ListItem组件来创建一个具有不同样式和布局的列表。通过定义一个包含不同样式组合的数组，动态生成列表项组和列表项，并为其添加文本内容。\n\n总体功能与效果描述：\n该示例创建了一个包含多个列表项组的列表，每个列表项组包含不同样式的列表项。列表项组和列表项的样式通过数组动态配置，实现了灵活的布局和样式控制。\n*/\n\n// ListItemGroupExample2.ets\n@Entry\n@Component\nstruct ListItemGroupExample2 {\n  // 定义一个数组，包含多个对象，每个对象表示一个列表项组的样式和其内部列表项的样式\n  private arr: ArrObject[] = [\n    {\n      style: ListItemGroupStyle.CARD, // 列表项组的样式为CARD\n      itemStyles: [ListItemStyle.CARD, ListItemStyle.CARD, ListItemStyle.CARD] // 列表项的样式均为CARD\n    },\n    {\n      style: ListItemGroupStyle.CARD, // 列表项组的样式为CARD\n      itemStyles: [ListItemStyle.CARD, ListItemStyle.CARD, ListItemStyle.NONE] // 列表项的样式分别为CARD、CARD、NONE\n    },\n    {\n      style: ListItemGroupStyle.CARD, // 列表项组的样式为CARD\n      itemStyles: [ListItemStyle.CARD, ListItemStyle.NONE, ListItemStyle.CARD] // 列表项的样式分别为CARD、NONE、CARD\n    },\n    {\n      style: ListItemGroupStyle.NONE, // 列表项组的样式为NONE\n      itemStyles: [ListItemStyle.CARD, ListItemStyle.CARD, ListItemStyle.NONE] // 列表项的样式分别为CARD、CARD、NONE\n    }\n  ]\n\n  build() {\n    Column() {\n      List({ space: "4vp", initialIndex: 0 }) { // 创建一个列表，设置项之间的间距和初始索引\n        ForEach(this.arr, (item: ArrObject, index?: number) => { // 遍历数组，生成列表项组\n          ListItemGroup({ style: item.style }) { // 创建列表项组，设置样式\n            ForEach(item.itemStyles, (itemStyle: number, itemIndex?: number) => { // 遍历列表项组的样式数组，生成列表项\n              ListItem({ style: itemStyle }) { // 创建列表项，设置样式\n                if (index != undefined && itemIndex != undefined) {\n                  Text("第" + (index + 1) + "个Group中第" + (itemIndex + 1) + "个item") // 显示文本内容\n                    .width("100%")\n                    .textAlign(TextAlign.Center) // 文本居中对齐\n                }\n              }\n            }, (item: string) => item) // 使用item作为键\n          }\n        })\n      }\n      .width('100%') // 设置列表宽度为100%\n      .multiSelectable(true) // 启用多选功能\n      .backgroundColor(0xDCDCDC) // 设置背景颜色\n    }\n    .width('100%') // 设置列宽度为100%\n    .padding({ top: 5 }) // 设置顶部内边距\n  }\n}\n\n// 定义一个接口，描述数组中对象的结构\ninterface ArrObject {\n  style: number; // 列表项组的样式\n  itemStyles: number[]; // 列表项的样式数组\n}


/*\n实现思路：\n本示例展示了如何使用鸿蒙ArkUI框架创建一个包含多个列表项组（ListItemGroup）的列表（List）。每个列表项组包含一个标题（header）和底部信息（footer），以及多个列表项（ListItem）。通过使用@Builder装饰器，可以方便地定义列表项组的头部和底部内容。\n\n总体功能与效果描述：\n该组件展示了一个时间表，其中每个时间表项包含一个标题（如星期一）和对应的项目列表（如语文、数学、英语）。每个列表项组都有一个自定义的头部和底部，头部显示标题，底部显示该天的课程总数。列表项组之间有分隔线，整个列表具有粘性头部和底部，且不显示滚动条。\n*/\n\n// ListItemGroupExample.ets\n@Entry\n@Component\nstruct ListItemGroupExample {\n  private timeTable: TimeTable[] = [\n    {\n      title: '星期一',\n      projects: ['语文', '数学', '英语']\n    },\n    {\n      title: '星期二',\n      projects: ['物理', '化学', '生物']\n    },\n    {\n      title: '星期三',\n      projects: ['历史', '地理', '政治']\n    },\n    {\n      title: '星期四',\n      projects: ['美术', '音乐', '体育']\n    }\n  ]\n\n  @Builder\n  itemHead(text: string) {\n    // 创建列表项组的头部，显示标题，设置字体大小、背景颜色、宽度和内边距\n    Text(text)\n      .fontSize(20)\n      .backgroundColor(0xAABBCC)\n      .width("100%")\n      .padding(10)\n  }\n\n  @Builder\n  itemFoot(num: number) {\n    // 创建列表项组的底部，显示课程总数，设置字体大小、背景颜色、宽度和内边距\n    Text('共' + num + "节课")\n      .fontSize(16)\n      .backgroundColor(0xAABBCC)\n      .width("100%")\n      .padding(5)\n  }\n\n  build() {\n    Column() {\n      List({ space: 20 }) {\n        ForEach(this.timeTable, (item: TimeTable) => {\n          // 创建列表项组，设置头部和底部，并在其中添加项目列表\n          ListItemGroup({ header: this.itemHead(item.title), footer: this.itemFoot(item.projects.length) }) {\n            ForEach(item.projects, (project: string) => {\n              ListItem() {\n                // 创建列表项，显示项目名称，设置宽度、高度、字体大小、文本对齐方式和背景颜色\n                Text(project)\n                  .width("100%")\n                  .height(100)\n                  .fontSize(20)\n                  .textAlign(TextAlign.Center)\n                  .backgroundColor(0xFFFFFF)\n              }\n            }, (item: string) => item)\n          }\n          .divider({ strokeWidth: 1, color: Color.Blue }) // 设置列表项组之间的分隔线\n        })\n      }\n      .width('90%')\n      .sticky(StickyStyle.Header | StickyStyle.Footer) // 设置列表的头部和底部为粘性\n      .scrollBar(BarState.Off) // 不显示滚动条\n    }.width('100%').height('100%').backgroundColor(0xDCDCDC).padding({ top: 5 })\n  }\n}\n\ninterface TimeTable {\n  title: string;\n  projects: string[];\n}