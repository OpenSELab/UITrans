{
    "description": "网格容器中单项内容容器，仅支持作为Grid组件的子组件使用。",
    "details": null,
    "interfaces": [
        {
            "description": "GridItem(value?: GridItemOptions)",
            "params": {
                "value": {
                    "type": "GridItemOptions",
                    "required": false,
                    "description": "可选参数，用于设置GridItem的选项。",
                    "default": null
                }
            }
        }
    ],
    "attributes": {
        "rowStart": {
            "description": "设置当前元素起始行号。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "当前元素起始行号。",
                    "default": null
                }
            }
        },
        "rowEnd": {
            "description": "设置当前元素终点行号。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "当前元素终点行号。",
                    "default": null
                }
            }
        },
        "columnStart": {
            "description": "设置当前元素起始列号。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "当前元素起始列号。",
                    "default": null
                }
            }
        },
        "columnEnd": {
            "description": "设置当前元素终点列号。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "当前元素终点列号。",
                    "default": null
                }
            }
        },
        "selectable": {
            "description": "设置当前GridItem元素是否可以被鼠标框选。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "当前GridItem元素是否可以被鼠标框选。",
                    "default": true
                }
            }
        },
        "selected": {
            "description": "设置当前GridItem选中状态。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "当前GridItem选中状态。",
                    "default": false
                }
            }
        }
    },
    "events": {
        "onSelect": {
            "description": "GridItem元素被鼠标框选的状态改变时触发回调。",
            "params": {
                "isSelected": {
                    "type": "boolean",
                    "required": true,
                    "description": "进入鼠标框选范围即被选中返回true，移出鼠标框选范围即未被选中返回false。",
                    "default": null
                }
            },
            "returns": null
        }
    },
    "rules": null,
    "examples": [
        "/*\\n实现思路：\\n本示例展示了如何使用Grid和GridItem组件来创建一个网格布局，并在网格中动态显示文本内容。通过设置不同的行列起始和结束位置，可以控制GridItem在网格中的具体位置。\\n\\n总体功能与效果描述：\\n该示例创建了一个5x5的网格布局，其中包含静态和动态的GridItem。静态GridItem显示固定的文本内容，而动态GridItem则根据数组中的数据动态生成。每个GridItem中的文本内容居中显示，并具有不同的背景颜色。\\n*/\\n\\n// GridItemExample.ets\\n@Entry\\n@Component\\nstruct GridItemExample {\\n  @State numbers: string[] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\"]\\n\\n  build() {\\n    Column() {\\n      Grid() {\\n        // 静态GridItem，显示文本'4'，位于第1行第1列\\n        GridItem() {\\n          Text('4')\\n            .fontSize(16)\\n            .backgroundColor(0xFAEEE0)\\n            .width('100%')\\n            .height('100%')\\n            .textAlign(TextAlign.Center)\\n        }.rowStart(1).rowEnd(2).columnStart(1).columnEnd(2)\\n\\n        // 动态GridItem，根据numbers数组动态生成\\n        ForEach(this.numbers, (item: string) => {\\n          GridItem() {\\n            Text(item)\\n              .fontSize(16)\\n              .backgroundColor(0xF9CF93)\\n              .width('100%')\\n              .height('100%')\\n              .textAlign(TextAlign.Center)\\n          }\\n        }, (item: string) => item)\\n\\n        // 静态GridItem，显示文本'5'，占据第1列到第4列\\n        GridItem() {\\n          Text('5')\\n            .fontSize(16)\\n            .backgroundColor(0xDBD0C0)\\n            .width('100%')\\n            .height('100%')\\n            .textAlign(TextAlign.Center)\\n        }.columnStart(1).columnEnd(4)\\n      }\\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr') // 设置5列，每列宽度相等\\n      .rowsTemplate('1fr 1fr 1fr 1fr 1fr') // 设置5行，每行高度相等\\n      .width('90%').height(300) // 设置网格的宽度和高度\\n      .width('100%').margin({ top: 5 }) // 设置外层Column的宽度和上边距\\n    }\\n  }\\n}",
        "/*\\n实现思路：\\n本示例展示了如何使用Grid组件和GridItem组件来创建一个网格布局，并通过不同的GridItemStyle来设置不同的网格项样式。\\n总体功能与效果描述：\\n示例中包含两个Grid组件，每个Grid组件内部嵌套了两个ForEach循环来生成网格项。每个网格项包含一个Text组件，用于显示数字。通过设置不同的GridItemStyle，可以观察到网格项的不同样式效果。\\n*/\\n\\n// GridItemExample.ets\\n@Entry\\n@Component\\nstruct GridItemExample {\\n  @State numbers: String[] = ['0', '1', '2']\\n\\n  build() {\\n    Column({ space: 5 }) {\\n      // 第一个Grid组件，使用GridItemStyle.NONE\\n      Grid() {\\n        ForEach(this.numbers, (day: string) => {\\n          ForEach(this.numbers, (day: string) => {\\n            GridItem({style:GridItemStyle.NONE}) {\\n              Text(day)\\n                .fontSize(16)\\n                .width('100%')\\n                .height('100%')\\n                .textAlign(TextAlign.Center)\\n                .focusable(true)\\n              // 设置文本内容、字体大小、宽度、高度、对齐方式和可聚焦性\\n            }\\n            .backgroundColor(0xF9CF93)\\n            // 设置网格项的背景颜色\\n          }, (day: string) => day)\\n        }, (day: string) => day)\\n      }\\n      .columnsTemplate('1fr 1fr 1fr')\\n      // 设置列模板，每列宽度相等\\n      .rowsTemplate('1fr 1fr')\\n      // 设置行模板，每行高度相等\\n      .columnsGap(4)\\n      // 设置列间距\\n      .rowsGap(4)\\n      // 设置行间距\\n      .width('60%')\\n      // 设置Grid组件的宽度\\n      .backgroundColor(0xFAEEE0)\\n      // 设置Grid组件的背景颜色\\n      .height(150)\\n      // 设置Grid组件的高度\\n      .padding('4vp')\\n      // 设置Grid组件的内边距\\n\\n      // 第二个Grid组件，使用GridItemStyle.PLAIN\\n      Grid() {\\n        ForEach(this.numbers, (day: string) => {\\n          ForEach(this.numbers, (day: string) => {\\n            GridItem({style:GridItemStyle.PLAIN}) {\\n              Text(day)\\n                .fontSize(16)\\n                .width('100%')\\n                .height('100%')\\n                .textAlign(TextAlign.Center)\\n                .focusable(true)\\n              // 设置文本内容、字体大小、宽度、高度、对齐方式和可聚焦性\\n            }\\n            .backgroundColor(0xF9CF93)\\n            // 设置网格项的背景颜色\\n          }, (day: string) => day)\\n        }, (day: string) => day)\\n      }\\n      .columnsTemplate('1fr 1fr 1fr')\\n      // 设置列模板，每列宽度相等\\n      .rowsTemplate('1fr 1fr')\\n      // 设置行模板，每行高度相等\\n      .columnsGap(4)\\n      // 设置列间距\\n      .rowsGap(4)\\n      // 设置行间距\\n      .width('60%')\\n      // 设置Grid组件的宽度\\n      .backgroundColor(0xFAEEE0)\\n      // 设置Grid组件的背景颜色\\n      .height(150)\\n      // 设置Grid组件的高度\\n      .padding('4vp')\\n      // 设置Grid组件的内边距\\n    }.width('100%').margin({ top: 5 })\\n    // 设置Column组件的宽度和上边距\\n  }\\n}"
    ],
    "is_common_attrs": true
}