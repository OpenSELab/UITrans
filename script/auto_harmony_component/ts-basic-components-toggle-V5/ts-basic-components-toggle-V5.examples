/*\n实现思路：\n本示例通过自定义Toggle样式实现了一个按钮切换圆形颜色的功能。用户可以通过点击不同的按钮来改变圆形的背景颜色。\n总体功能与效果描述：\n用户点击“蓝”按钮时，圆形背景变为蓝色；点击“黄”按钮时，圆形背景变为黄色。\n*/\n\n// MySwitchStyle.ets\nclass MySwitchStyle implements ContentModifier<ToggleConfiguration> {\n  // 定义选中时的颜色\n  selectedColor: Color = Color.White;\n  // 定义灯的标识\n  lamp: string = 'string';\n\n  // 构造函数，初始化选中颜色和灯的标识\n  constructor(selectedColor: Color, lamp: string) {\n    this.selectedColor = selectedColor;\n    this.lamp = lamp;\n  }\n\n  // 应用内容修饰器\n  applyContent(): WrappedBuilder<[ToggleConfiguration]> {\n    return wrapBuilder(buildSwitch);\n  }\n}\n\n// 构建开关的Builder函数\n@Builder function buildSwitch(config: ToggleConfiguration) {\n  Column({ space: 50 }) {\n    // 创建一个圆形，根据Toggle状态设置填充颜色\n    Circle({ width: 150, height: 150 })\n      .fill(config.isOn ? (config.contentModifier as MySwitchStyle).selectedColor : Color.Blue)\n    Row() {\n      // 创建一个按钮，点击时触发Toggle状态改变为false\n      Button('蓝' + JSON.stringify((config.contentModifier as MySwitchStyle).lamp))\n        .onClick(() => {\n          config.triggerChange(false);\n        })\n      // 创建一个按钮，点击时触发Toggle状态改变为true\n      Button('黄' + JSON.stringify((config.contentModifier as MySwitchStyle).lamp))\n        .onClick(() => {\n          config.triggerChange(true);\n        })\n    }\n  }\n}\n\n// Index.ets\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column({ space: 50 }) {\n      // 创建一个Toggle组件，设置为Switch类型，启用状态，并应用自定义样式\n      Toggle({ type: ToggleType.Switch })\n        .enabled(true)\n        .contentModifier(new MySwitchStyle(Color.Yellow, '灯'))\n        .onChange((isOn: boolean) => {\n          // 监听Toggle状态变化，输出日志\n          console.info('Switch Log:' + isOn);\n        })\n    }.height('100%').width('100%')\n  }\n}


/*\n实现思路：\n本示例展示了如何使用Toggle组件来创建一个自定义样式的Switch开关。通过设置不同的属性，如滑块半径、滑轨圆角、滑块颜色和背景颜色，来实现自定义的Switch样式。同时，通过onChange事件监听开关状态的变化。\n\n总体功能与效果描述：\n示例中包含两个Toggle组件，每个组件都是一个Switch开关。每个开关都可以通过点击来切换状态，并且具有自定义的样式，包括滑块的半径、滑轨的圆角、滑块颜色和关闭状态的背景颜色。\n*/\n\n// ToggleExample.ets\n@Entry\n@Component\nstruct ToggleExample {\n  build() {\n    Column({ space: 10 }) {\n      Text('type: Switch').fontSize(12).fontColor(0xcccccc).width('90%')\n      // 创建一个Flex布局，用于均匀分布Toggle组件\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) {\n        // 创建第一个Toggle组件，类型为Switch，初始状态为关闭\n        Toggle({ type: ToggleType.Switch, isOn: false })\n          .selectedColor('#007DFF') // 设置开关打开状态的背景颜色\n          .switchStyle({\n            pointRadius: 15, // 设置滑块的半径\n            trackBorderRadius: 10, // 设置滑轨的圆角\n            pointColor: '#D2B48C', // 设置滑块的颜色\n            unselectedColor: Color.Pink // 设置开关关闭状态的背景颜色\n          })\n          .onChange((isOn: boolean) => {\n            console.info('Component status:' + isOn) // 监听开关状态的变化并输出到控制台\n          })\n\n        // 创建第二个Toggle组件，类型为Switch，初始状态为打开\n        Toggle({ type: ToggleType.Switch, isOn: true })\n          .selectedColor('#007DFF') // 设置开关打开状态的背景颜色\n          .switchStyle({\n            pointRadius: 15, // 设置滑块的半径\n            trackBorderRadius: 10, // 设置滑轨的圆角\n            pointColor: '#D2B48C', // 设置滑块的颜色\n            unselectedColor: Color.Pink // 设置开关关闭状态的背景颜色\n          })\n          .onChange((isOn: boolean) => {\n            console.info('Component status:' + isOn) // 监听开关状态的变化并输出到控制台\n          })\n      }\n    }.width('100%').padding(24)\n  }\n}


/*\n实现思路：\n本示例展示了如何使用Toggle组件的不同类型（Switch、Checkbox、Button），并展示了如何设置其状态、颜色和大小，以及如何处理状态变化事件。\n总体功能与效果描述：\n该示例通过Toggle组件展示了三种不同类型的切换控件，并允许用户通过点击来切换它们的状态。每个Toggle组件的状态变化都会通过控制台输出其状态。\n*/\n\n// ToggleExample.ets\n@Entry\n@Component\nstruct ToggleExample {\n  build() {\n    Column({ space: 10 }) {\n      // 显示文本，说明下面的Toggle组件类型为Switch\n      Text('type: Switch').fontSize(12).fontColor(0xcccccc).width('90%')\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) {\n        // 创建一个类型为Switch的Toggle组件，初始状态为关闭\n        Toggle({ type: ToggleType.Switch, isOn: false })\n          .selectedColor('#007DFF') // 设置选中状态的颜色\n          .switchPointColor('#FFFFFF') // 设置Switch滑块的颜色\n          .onChange((isOn: boolean) => {\n            console.info('Component status:' + isOn) // 输出Toggle组件的状态变化\n          })\n\n        // 创建一个类型为Switch的Toggle组件，初始状态为开启\n        Toggle({ type: ToggleType.Switch, isOn: true })\n          .selectedColor('#007DFF') // 设置选中状态的颜色\n          .switchPointColor('#FFFFFF') // 设置Switch滑块的颜色\n          .onChange((isOn: boolean) => {\n            console.info('Component status:' + isOn) // 输出Toggle组件的状态变化\n          })\n      }\n\n      // 显示文本，说明下面的Toggle组件类型为Checkbox\n      Text('type: Checkbox').fontSize(12).fontColor(0xcccccc).width('90%')\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) {\n        // 创建一个类型为Checkbox的Toggle组件，初始状态为关闭\n        Toggle({ type: ToggleType.Checkbox, isOn: false })\n          .size({ width: 20, height: 20 }) // 设置Checkbox的大小\n          .selectedColor('#007DFF') // 设置选中状态的颜色\n          .onChange((isOn: boolean) => {\n            console.info('Component status:' + isOn) // 输出Toggle组件的状态变化\n          })\n\n        // 创建一个类型为Checkbox的Toggle组件，初始状态为开启\n        Toggle({ type: ToggleType.Checkbox, isOn: true })\n          .size({ width: 20, height: 20 }) // 设置Checkbox的大小\n          .selectedColor('#007DFF') // 设置选中状态的颜色\n          .onChange((isOn: boolean) => {\n            console.info('Component status:' + isOn) // 输出Toggle组件的状态变化\n          })\n      }\n\n      // 显示文本，说明下面的Toggle组件类型为Button\n      Text('type: Button').fontSize(12).fontColor(0xcccccc).width('90%')\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) {\n        // 创建一个类型为Button的Toggle组件，初始状态为关闭\n        Toggle({ type: ToggleType.Button, isOn: false }) {\n          Text('status button').fontColor('#182431').fontSize(12) // 设置Button内的文本\n        }.width(106) // 设置Button的宽度\n        .selectedColor('rgba(0,125,255,0.20)') // 设置选中状态的颜色\n        .onChange((isOn: boolean) => {\n          console.info('Component status:' + isOn) // 输出Toggle组件的状态变化\n        })\n\n        // 创建一个类型为Button的Toggle组件，初始状态为开启\n        Toggle({ type: ToggleType.Button, isOn: true }) {\n          Text('status button').fontColor('#182431').fontSize(12) // 设置Button内的文本\n        }.width(106) // 设置Button的宽度\n        .selectedColor('rgba(0,125,255,0.20)') // 设置选中状态的颜色\n        .onChange((isOn: boolean) => {\n          console.info('Component status:' + isOn) // 输出Toggle组件的状态变化\n        })\n      }\n    }.width('100%').padding(24) // 设置Column的宽度和内边距\n  }\n}