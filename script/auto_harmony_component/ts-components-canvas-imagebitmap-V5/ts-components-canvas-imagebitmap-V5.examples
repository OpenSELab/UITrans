/*\n实现思路：\n本示例展示了如何在鸿蒙ArkUI中使用Canvas组件绘制图像。首先，我们创建了一个CanvasRenderingContext2D对象，并加载了一个图像。然后在Canvas的onReady事件中，使用drawImage方法将图像绘制到Canvas上。\n\n总体功能与效果描述：\n该示例创建了一个全屏的Canvas组件，并在其中绘制了一张图片。图片被缩放并裁剪以适应Canvas的大小。\n*/\n\n// ImageExample.ets\n@Entry\n@Component\nstruct ImageExample {\n  // 创建一个RenderingContextSettings对象，启用高精度\n  private settings: RenderingContextSettings = new RenderingContextSettings(true)\n  // 创建一个CanvasRenderingContext2D对象，用于绘图操作\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)\n  // 加载一张图片\n  private img: ImageBitmap = new ImageBitmap("common/images/example.jpg")\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建一个Canvas组件，绑定到之前创建的context对象\n      Canvas(this.context)\n        .width('100%') // 设置Canvas宽度为全屏\n        .height('100%') // 设置Canvas高度为全屏\n        .backgroundColor('#ffff00') // 设置Canvas背景颜色为黄色\n        .onReady(() => {\n          // 在Canvas准备好后，绘制图像\n          this.context.drawImage(this.img, 0, 0, 500, 500, 0, 0, 400, 200)\n          // 关闭图像资源\n          this.img.close()\n        })\n    }\n    .width('100%') // 设置Flex组件宽度为全屏\n    .height('100%') // 设置Flex组件高度为全屏\n  }\n}


/*\n实现思路：\n本示例展示了如何在鸿蒙ArkUI中使用Canvas组件进行基本的绘图操作，包括填充矩形和绘制图像。通过CanvasRenderingContext2D上下文对象，实现了在Canvas上绘制图形和获取像素数据的功能。\n\n总体功能与效果描述：\n该示例创建了一个全屏的Flex布局，其中包含一个占据屏幕一半高度的Canvas组件。在Canvas上绘制一个绿色矩形，并将其像素数据转换为ImageBitmap对象，然后在Canvas的另一个位置绘制该图像。\n*/\n\n// Demo.ets\n@Entry\n@Component\nstruct Demo {\n  // 创建渲染上下文设置，启用抗锯齿\n  private settings: RenderingContextSettings = new RenderingContextSettings(true)\n  // 创建2D渲染上下文对象\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建Canvas组件，设置宽度和高度，背景颜色为黄色\n      Canvas(this.context)\n        .width('100%')\n        .height('50%')\n        .backgroundColor('#ffff00')\n        .onReady(() => {\n          // 设置填充颜色为绿色\n          this.context.fillStyle = "#00ff00"\n          // 绘制一个100x100的绿色矩形\n          this.context.fillRect(0, 0, 100, 100)\n          // 获取指定区域的像素数据\n          let pixel = this.context.getPixelMap(0, 0, 100, 100)\n          // 将像素数据转换为ImageBitmap对象\n          let image = new ImageBitmap(pixel)\n          // 在Canvas的另一个位置绘制该图像\n          this.context.drawImage(image, 100, 100)\n        })\n    }\n    .width('100%')\n    .height('100%')\n  }\n}


/*\n实现思路：\n1. 创建一个主页面组件，该组件包含一个Canvas元素，用于显示图像。\n2. 使用Web Worker进行图像处理，以避免阻塞主线程。\n3. 在Canvas的onReady事件中，将图像数据发送给Worker线程进行处理。\n4. Worker线程接收到图像数据后，进行图像绘制和处理，并将处理后的图像数据发送回主线程。\n5. 主线程接收到处理后的图像数据，将其绘制到Canvas上。\n\n总体功能与效果描述：\n该示例展示了如何在鸿蒙ArkUI中使用Canvas和Web Worker进行图像处理和显示。\n*/\n\n// imageBitmapExamplePage.ets\nimport worker from '@ohos.worker';\n\n@Entry\n@Component\nstruct imageBitmapExamplePage {\n  // 创建渲染上下文设置\n  private settings: RenderingContextSettings = new RenderingContextSettings(true);\n  // 创建Canvas渲染上下文\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings);\n  // 创建Worker线程\n  private myWorker = new worker.ThreadWorker('entry/ets/workers/Worker.ts');\n  // 加载图像\n  private img: ImageBitmap = new ImageBitmap("common/images/example.jpg");\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建Canvas组件\n      Canvas(this.context)\n        .width('100%') // 设置Canvas宽度为100%\n        .height('100%') // 设置Canvas高度为100%\n        .backgroundColor('#ffff00') // 设置Canvas背景颜色为黄色\n        .onReady(() => {\n          // 将图像数据发送给Worker线程\n          this.myWorker.postMessage({ myImage: this.img });\n          // 监听Worker线程的消息\n          this.myWorker.onmessage = (e): void => {\n            if (e.data.myImage) {\n              // 获取处理后的图像数据\n              let image: ImageBitmap = e.data.myImage;\n              // 将处理后的图像数据绘制到Canvas上\n              this.context.transferFromImageBitmap(image);\n            }\n          }\n        })\n    }\n    .width('100%') // 设置Flex容器宽度为100%\n    .height('100%') // 设置Flex容器高度为100%\n  }\n}\n\n// Worker.ts\n// 监听主线程的消息\nworkerPort.onmessage = function (e: MessageEvents) {\n  if (e.data.myImage) {\n    // 获取图像数据\n    let img = e.data.myImage;\n    // 创建离屏Canvas\n    let offCanvas = new OffscreenCanvas(600, 600);\n    // 获取离屏Canvas的2D上下文\n    let offContext = offCanvas.getContext("2d");\n    // 在离屏Canvas上绘制图像\n    offContext.drawImage(img, 0, 0, 500, 500, 0, 0, 400, 200);\n    // 将离屏Canvas转换为ImageBitmap\n    let image = offCanvas.transferToImageBitmap();\n    // 将处理后的图像数据发送回主线程\n    workerPort.postMessage({ myImage: image });\n  }\n}