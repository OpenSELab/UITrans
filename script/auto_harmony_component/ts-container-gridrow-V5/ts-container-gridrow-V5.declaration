{
    "description": "栅格容器组件，仅可以和栅格子组件(GridCol)在栅格布局场景中使用。",
    "details": "栅格布局可以为布局提供规律性的结构，解决多尺寸多设备的动态布局问题，保证不同设备上各个模块的布局一致性。",
    "interfaces": [
        {
            "description": "GridRow(option?: GridRowOptions)",
            "params": {
                "option": {
                    "type": "GridRowOptions",
                    "required": false,
                    "description": "栅格布局子组件参数。",
                    "default": null
                }
            }
        }
    ],
    "attributes": {
        "alignItems10+": {
            "description": "设置GridRow中的GridCol垂直主轴方向对齐方式。",
            "params": {
                "value": {
                    "type": "ItemAlign",
                    "required": true,
                    "description": "GridRow中的GridCol垂直主轴方向对齐方式。",
                    "default": "ItemAlign.Start"
                }
            }
        }
    },
    "events": {
        "onBreakpointChange": {
            "description": "断点发生变化时触发回调。",
            "params": {
                "breakpoints": {
                    "type": "string",
                    "required": false,
                    "description": "取值为\"xs\"、\"sm\"、\"md\"、\"lg\"、\"xl\"、\"xxl\"。",
                    "default": null
                }
            },
            "returns": null
        }
    },
    "rules": null,
    "examples": [
        "/*\\n实现思路：\\n本示例展示了如何使用GridRow和GridCol组件创建一个响应式的网格布局。通过设置不同的断点和列宽，实现根据窗口大小调整布局的效果。同时，通过监听断点变化事件，实时更新当前断点状态。\\n\\n总体功能与效果描述：\\n1. 创建一个包含多个颜色块的网格布局。\\n2. 根据窗口大小调整网格列的宽度。\\n3. 监听窗口断点变化，实时更新当前断点状态。\\n*/\\n\\n// GridRowExample.ets\\n@Entry\\n@Component\\nstruct GridRowExample {\\n  // 定义颜色数组，用于网格列的背景色\\n  @State bgColors: Color[] = [Color.Red, Color.Orange, Color.Yellow, Color.Green, Color.Pink, Color.Grey, Color.Blue, Color.Brown]\\n  // 当前断点状态，初始为'unknown'\\n  @State currentBp: string = 'unknown'\\n\\n  build() {\\n    Column() {\\n      // 创建一个GridRow组件，设置列数、间距、断点和方向\\n      GridRow({\\n        columns: 5, // 网格列数\\n        gutter: { x: 5, y: 10 }, // 列间距\\n        breakpoints: { value: [\"400vp\", \"600vp\", \"800vp\"], reference: BreakpointsReference.WindowSize }, // 断点设置\\n        direction: GridRowDirection.Row // 网格方向\\n      }) {\\n        // 遍历颜色数组，为每个颜色创建一个GridCol组件\\n        ForEach(this.bgColors, (color: Color) => {\\n          GridCol({ span: { xs: 1, sm: 2, md: 3, lg: 4 }, offset: 0, order: 0 }) {\\n            // 创建一个Row组件，设置宽度和高度\\n            Row().width(\"100%\").height(\"20vp\")\\n          }.borderColor(color).borderWidth(2) // 设置边框颜色和宽度\\n        })\\n      }.width(\"100%\").height(\"100%\") // 设置GridRow的宽度和高度\\n      .onBreakpointChange((breakpoint) => {\\n        // 监听断点变化事件，更新当前断点状态\\n        this.currentBp = breakpoint\\n      })\\n    }.width('80%').margin({ left: 10, top: 5, bottom: 5 }).height(200) // 设置Column的宽度、外边距和高度\\n    .border({ color: '#880606', width: 2 }) // 设置边框颜色和宽度\\n  }\\n}"
    ],
    "is_common_attrs": true
}