Title: WaterFlow-容器组件-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-waterflow-V5

Markdown Content:
瀑布流容器，由“行”和“列”分割的单元格所组成，通过容器自身的排列规则，将不同大小的“项目”自上而下，如瀑布般紧密布局。

说明

该组件从API Version 9 开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

接口
--

WaterFlow(options?: WaterFlowOptions)

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

WaterFlowOptions对象说明
--------------------

| 参数名 | 参数类型 | 必填 | 参数描述 |
| --- | --- | --- | --- |
| footer | [CustomBuilder](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#custombuilder8) | 否 | 设置WaterFlow尾部组件。
**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

 |
| scroller | [Scroller](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-scroll-V5#scroller) | 否 | 可滚动组件的控制器，与可滚动组件绑定。

**说明：**

不允许和其他滚动类组件，如：[List](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-list-V5)、[Grid](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-grid-V5)、[Scroll](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-scroll-V5)等绑定同一个滚动控制对象。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

 |
| sections12+ | [WaterFlowSections](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-waterflow-V5#sections12) | 否 | 设置FlowItem分组，实现同一个瀑布流组件内部各分组使用不同列数混合布局。

**说明：**

1\. 使用分组混合布局时会忽略columnsTemplate和rowsTemplate属性。

2\. 使用分组混合布局时不支持单独设置footer，可以使用最后一个分组作为尾部组件。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

 |
| layoutMode12+ | [WaterFlowLayoutMode](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-waterflow-V5#waterflowlayoutmode12%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E) | 否 | 设置WaterFlow的布局模式，根据使用场景选择更切合的模式。

**说明：**

默认值：[ALWAYS\_TOP\_DOWN](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-waterflow-V5#waterflowlayoutmode12%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

 |

WaterFlowSections12+
--------------------

瀑布流分组信息。

### constructor

constructor()

创建一个瀑布流分组。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### splice12+

splice(start: number, deleteCount?: number, sections?: Array<SectionOptions>): boolean

移除或者替换已存在的分组和/或添加新分组。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 名称 | 类型 | 必填 | 描述 |
| --- | --- | --- | --- |
| start | number | 是 | 从0开始计算的索引，会转换为整数，表示要开始改变分组的位置。
**说明：**

1\. 如果索引是负数，则从末尾开始计算，使用start + WaterFlowSections.length()。

2\. 如果 start < -WaterFlowSections.length()，则使用0。

3\. 如果 start >= WaterFlowSections.length()，则在最后添加新分组。

 |
| deleteCount | number | 否 | 表示要从start开始删除的分组数量。

**说明：**

1\. 如果省略了deleteCount，或者其值大于或等于由start指定的位置到WaterFlowSections末尾的分组数量，那么从start到WaterFlowSections末尾的所有分组将被删除。

2\. 如果deleteCount是0或者负数，则不会删除任何分组。

 |
| sections | Array<[SectionOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-waterflow-V5#sectionoptions12)\> | 否 | 表示要从start开始加入的分组。如果不指定，splice()将只从瀑布流中删除分组。 |

**返回值：**

| 类型 | 说明 |
| --- | --- |
| boolean | 分组是否修改成功，要加入的分组中有任意分组的itemsCount不是正整数时返回false。 |

### push12+

push(section: SectionOptions): boolean

将指定分组添加到瀑布流末尾。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

**返回值：**

| 类型 | 说明 |
| --- | --- |
| boolean | 分组是否添加成功，新分组的itemsCount不是正整数时返回false。 |

### update12+

update(sectionIndex: number, section: SectionOptions): boolean

修改指定索引分组的配置信息。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 名称 | 类型 | 必填 | 描述 |
| --- | --- | --- | --- |
| sectionIndex | number | 是 | 从0开始计算的索引，会转换为整数，表示要修改的分组的位置。
**说明：**

1\. 如果索引是负数，则从末尾开始计算，使用sectionIndex + WaterFlowSections.length()。

2\. 如果sectionIndex < -WaterFlowSections.length()，则使用0。

3\. 如果sectionIndex >= WaterFlowSections.length()，则在最后添加新分组。

 |
| section | [SectionOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-waterflow-V5#sectionoptions12) | 是 | 新的分组信息。 |

**返回值：**

| 类型 | 说明 |
| --- | --- |
| boolean | 分组是否更新成功，新分组的itemsCount不是正整数时返回false。 |

### values12+

values(): Array<SectionOptions>

获取瀑布流中所有分组配置信息。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

### length12+

length(): number

获取瀑布流中分组数量。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

SectionOptions12+
-----------------

FlowItem分组配置信息。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 名称 | 类型 | 必填 | 描述 |
| --- | --- | --- | --- |
| itemsCount | number | 是 | 分组中FlowItem数量，必须是正整数。 |
| crossCount | number | 否 | 纵向布局时为列数，横向布局时为行数，默认值：1。 |
| columnsGap | [Dimension](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#dimension10) | 否 | 该分组的列间距，不设置时使用瀑布流的columnsGap，设置非法值时使用0vp。 |
| rowsGap | [Dimension](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#dimension10) | 否 | 该分组的行间距，不设置时使用瀑布流的rowsGap，设置非法值时使用0vp。 |
| margin | [Margin](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#margin) | [Dimension](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#dimension10) | 否 | 该分组的外边距参数为Length类型时，四个方向外边距同时生效。
默认值：0

单位：vp

margin设置百分比时，上下左右外边距均以瀑布流的width作为基础值。

 |
| onGetItemMainSizeByIndex | [GetItemMainSizeByIndex](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-waterflow-V5#getitemmainsizebyindex12) | 否 | 瀑布流组件布局过程中获取指定index的FlowItem的主轴大小，纵向瀑布流时为高度，横向瀑布流时为宽度，单位vp。

**说明：**

1\. 同时使用onGetItemMainSizeByIndex和FlowItem的宽高属性时，主轴大小以onGetItemMainSizeByIndex返回结果为准。

2\. 使用onGetItemMainSizeByIndex可以提高瀑布流跳转到指定位置或index时的效率，避免混用设置onGetItemMainSizeByIndex和未设置的分组，会导致布局异常。

3\. onGetItemMainSizeByIndex返回负数时FlowItem高度为0。

 |

GetItemMainSizeByIndex12+
-------------------------

type GetItemMainSizeByIndex = (index: number) => number

根据index获取指定Item的主轴大小。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 名称 | 类型 | 必填 | 描述 |
| --- | --- | --- | --- |
| index | number | 是 | FlowItem在WaterFlow中的索引。 |

**返回值：**

| 类型 | 说明 |
| --- | --- |
| number | 指定index的FlowItem的主轴大小，纵向瀑布流时为高度，横向瀑布流时为宽度，单位vp。 |

WaterFlowLayoutMode12+枚举说明
--------------------------

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

| 名称 | 枚举值 | 描述 |
| --- | --- | --- |
| ALWAYS\_TOP\_DOWN | 0 | 默认的从上到下的布局模式。视窗内的FlowItem依赖视窗上方所有FlowItem的布局信息。因此跳转或切换列数时，需要计算出上方所有的FlowItem的布局信息。 |
| SLIDING\_WINDOW | 1 | 移动窗口式的布局模式。只考虑视窗内的布局信息，对视窗上方的FlowItem没有依赖关系，因此向后跳转或切换列数时只需要布局视窗内的FlowItem。有频繁切换列数的场景的应用建议使用该模式。
**说明：**

1\. 无动画跳转到较远的位置时，会以目标位置为基准，向前或向后布局FlowItem。这之后如果滑回跳转前的位置，内容的布局效果可能和之前不一致。 这个效果会导致跳转后回滑到顶部时，顶部节点可能不对齐。所以该布局模式下会在滑动到每个分组的顶部后自动调整布局，保证顶部对齐。

2\. 该模式不支持使用滚动条，就算设置了滚动条也无法显示。

3\. 不支持[scroller](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-waterflow-V5#waterflowoptions%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)的[scrollTo](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-scroll-V5#scrollto)接口。

4\. 如果在同一帧内调用跳转（如无动画的[scrollToIndex](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-scroll-V5#scrolltoindex)、[scrollEdge](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-scroll-V5#scrolledge)）和输入偏移量（如滑动手势或滚动动画），两者都会生效。

 |

### columnsTemplate

columnsTemplate(value: string)

设置当前瀑布流组件布局列的数量，不设置时默认1列。

例如, '1fr 1fr 2fr' 是将父组件分3列，将父组件允许的宽分为4等份，第一列占1份，第二列占1份，第三列占2份。

可使用columnsTemplate('repeat(auto-fill,track-size)')根据给定的列宽track-size自动计算列数，其中repeat、auto-fill为关键字，track-size为可设置的宽度，支持的单位包括px、vp、%或有效数字，默认单位为vp，使用方法参见示例2。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | string | 是 | 当前瀑布流组件布局列的数量。
默认值：'1fr'

 |

### rowsTemplate

rowsTemplate(value: string)

设置当前瀑布流组件布局行的数量，不设置时默认1行。

例如, '1fr 1fr 2fr'是将父组件分三行，将父组件允许的高分为4等份，第一行占1份，第二行占一份，第三行占2份。

可使用rowsTemplate('repeat(auto-fill,track-size)')根据给定的行高track-size自动计算行数，其中repeat、auto-fill为关键字，track-size为可设置的高度，支持的单位包括px、vp、%或有效数字，默认单位为vp。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | string | 是 | 当前瀑布流组件布局行的数量。
默认值：'1fr'

 |

### itemConstraintSize

itemConstraintSize(value: ConstraintSizeOptions)

设置约束尺寸，子组件布局时，进行尺寸范围限制。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | [ConstraintSizeOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#constraintsizeoptions) | 是 | 约束尺寸。设置小于0的值，参数不生效。
**说明：**

1.同时设置itemConstraintSize和FlowItem的[constraintSize](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-size-V5#constraintsize)属性时，minWidth/minHeight会取其中的最大值，maxWidth/maxHeight会取其中的最小值，调整后的值作为FlowItem的constraintSize处理。2.只设置itemConstraintSize时，相当于对WaterFlow所有子组件设置了相同的constraintSize。3.itemConstraintSize通过以上两种方式转换成FlowItem的constraintSize后的生效规则与通用属性[constraintSize](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-size-V5#constraintsize)相同。

 |

### columnsGap

columnsGap(value: Length)

设置列与列的间距。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | [Length](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#length) | 是 | 列与列的间距。
默认值：0

 |

### rowsGap

rowsGap(value: Length)

设置行与行的间距。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | [Length](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#length) | 是 | 行与行的间距。
默认值：0

 |

### layoutDirection

layoutDirection(value: FlexDirection)

设置布局的主轴方向。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | [FlexDirection](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#flexdirection) | 是 | 布局的主轴方向。
默认值：FlexDirection.Column

 |

layoutDirection优先级高于rowsTemplate和columnsTemplate。根据layoutDirection设置情况，分为以下三种设置模式:

*   layoutDirection设置纵向布局（FlexDirection.Column 或 FlexDirection.ColumnReverse）
    
    此时columnsTemplate有效（如果未设置，取默认值）。例如columnsTemplate设置为"1fr 1fr"、rowsTemplate设置为"1fr 1fr 1fr"时，瀑布流组件纵向布局，辅轴均分成横向2列。
    
*   layoutDirection设置横向布局（FlexDirection.Row 或 FlexDirection.RowReverse）
    
    此时rowsTemplate有效（如果未设置，取默认值）。例如columnsTemplate设置为"1fr 1fr"、rowsTemplate设置为"1fr 1fr 1fr"时，瀑布流组件横向布局，辅轴均分成纵向3列。
    
*   layoutDirection未设置布局方向
    
    布局方向为layoutDirection的默认值：FlexDirection.Column，此时columnsTemplate有效。例如columnsTemplate设置为"1fr 1fr"、rowsTemplate设置为"1fr 1fr 1fr"时，瀑布流组件纵向布局，辅轴均分成横向2列。
    

### enableScrollInteraction10+

enableScrollInteraction(value: boolean)

设置是否支持滚动手势，当设置为false时，无法通过手指或者鼠标滚动，但不影响控制器的滚动接口。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | boolean | 是 | 是否支持滚动手势。
默认值：true

 |

### nestedScroll10+

nestedScroll(value: NestedScrollOptions)

设置向前向后两个方向上的嵌套滚动模式，实现与父组件的滚动联动。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### friction10+

friction(value: number | Resource)

设置摩擦系数，手动划动滚动区域时生效，只对惯性滚动过程有影响，对惯性滚动过程中的链式效果有间接影响。设置为小于等于0的值时，按默认值处理。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | number | [Resource](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resource) | 是 | 摩擦系数。
默认值：非可穿戴设备为0.6，可穿戴设备为0.9。

从API version 11开始，非可穿戴设备默认值为0.7。

从API version 12开始，非可穿戴设备默认值为0.75。

 |

### cachedCount11+

cachedCount(value: number)

设置预加载的FlowItem的数量，只在LazyForEach中生效。设置该属性后会缓存cachedCount个FlowItem。[LazyForEach](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-rendering-control-lazyforeach-V5)超出显示和缓存范围的FlowItem会被释放。设置为小于0的值时，按默认值显示。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | number | 是 | 预加载的FlowItem的数量。
默认值：1

 |

### onReachStart

onReachStart(event: () => void)

瀑布流组件到达起始位置时触发。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### onReachEnd

onReachEnd(event: () => void)

瀑布流组件到底末尾位置时触发。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### onScrollFrameBegin10+

onScrollFrameBegin(event: (offset: number, state: ScrollState) => { offsetRemain: number; })

瀑布流开始滑动时触发，事件参数传入即将发生的滑动量，事件处理函数中可根据应用场景计算实际需要的滑动量并作为事件处理函数的返回值返回，瀑布流将按照返回值的实际滑动量进行滑动。

触发该事件的条件：手指拖动WaterFlow、WaterFlow惯性划动时每帧开始时触发；WaterFlow超出边缘回弹、使用滚动控制器和拖动滚动条的滚动不会触发。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| offset | number | 是 | 即将发生的滑动量，单位vp。 |
| state | [ScrollState](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-list-V5#scrollstate%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E) | 是 | 当前滑动状态。 |

**返回值：**

| 类型 | 说明 |
| --- | --- |
| { offsetRemain: number } | 实际滑动量，单位vp。 |

### onScrollIndex11+

onScrollIndex(event: (first: number, last: number) => void)

当前瀑布流显示的起始位置/终止位置的子组件发生变化时触发。瀑布流初始化时会触发一次。

瀑布流显示区域上第一个子组件/最后一个组件的索引值有变化就会触发。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| first | number | 是 | 当前显示的瀑布流起始位置的索引值。 |
| last | number | 是 | 当前显示的瀑布流终止位置的索引值。 |

示例
--

### 示例1

WaterFlow的基本使用。

4.  export class WaterFlowDataSource implements IDataSource {
5.    private dataArray: number\[\] = \[\]
6.    private listeners: DataChangeListener\[\] = \[\]

8.    constructor() {
9.      for (let i = 0; i < 100; i++) {
10.        this.dataArray.push(i)
11.      }
12.    }

15.    public getData(index: number): number {
16.      return this.dataArray\[index\]
17.    }

20.    notifyDataReload(): void {
21.      this.listeners.forEach(listener => {
22.        listener.onDataReloaded()
23.      })
24.    }

27.    notifyDataAdd(index: number): void {
28.      this.listeners.forEach(listener => {
29.        listener.onDataAdd(index)
30.      })
31.    }

34.    notifyDataChange(index: number): void {
35.      this.listeners.forEach(listener => {
36.        listener.onDataChange(index)
37.      })
38.    }

41.    notifyDataDelete(index: number): void {
42.      this.listeners.forEach(listener => {
43.        listener.onDataDelete(index)
44.      })
45.    }

48.    notifyDataMove(from: number, to: number): void {
49.      this.listeners.forEach(listener => {
50.        listener.onDataMove(from, to)
51.      })
52.    }

55.    notifyDatasetChange(operations: DataOperation\[\]): void {
56.      this.listeners.forEach(listener => {
57.        listener.onDatasetChange(operations);
58.      })
59.    }

62.    public totalCount(): number {
63.      return this.dataArray.length
64.    }

67.    registerDataChangeListener(listener: DataChangeListener): void {
68.      if (this.listeners.indexOf(listener) < 0) {
69.        this.listeners.push(listener)
70.      }
71.    }

74.    unregisterDataChangeListener(listener: DataChangeListener): void {
75.      const pos = this.listeners.indexOf(listener)
76.      if (pos >= 0) {
77.        this.listeners.splice(pos, 1)
78.      }
79.    }

82.    public add1stItem(): void {
83.      this.dataArray.splice(0, 0, this.dataArray.length)
84.      this.notifyDataAdd(0)
85.    }

88.    public addLastItem(): void {
89.      this.dataArray.splice(this.dataArray.length, 0, this.dataArray.length)
90.      this.notifyDataAdd(this.dataArray.length - 1)
91.    }

94.    public addItem(index: number): void {
95.      this.dataArray.splice(index, 0, this.dataArray.length)
96.      this.notifyDataAdd(index)
97.    }

100.    public delete1stItem(): void {
101.      this.dataArray.splice(0, 1)
102.      this.notifyDataDelete(0)
103.    }

106.    public delete2ndItem(): void {
107.      this.dataArray.splice(1, 1)
108.      this.notifyDataDelete(1)
109.    }

112.    public deleteLastItem(): void {
113.      this.dataArray.splice(-1, 1)
114.      this.notifyDataDelete(this.dataArray.length)
115.    }

118.    public deleteItem(index: number): void {
119.      this.dataArray.splice(index, 1)
120.      this.notifyDataDelete(index)
121.    }

124.    public reload(): void {
125.      this.dataArray.splice(1, 1)
126.      this.dataArray.splice(3, 2)
127.      this.notifyDataReload()
128.    }
129.  }

2.  import { WaterFlowDataSource } from './WaterFlowDataSource'

4.  @Entry
5.  @Component
6.  struct WaterFlowDemo {
7.    @State minSize: number = 80
8.    @State maxSize: number = 180
9.    @State fontSize: number = 24
10.    @State colors: number\[\] = \[0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F\]
11.    scroller: Scroller = new Scroller()
12.    dataSource: WaterFlowDataSource = new WaterFlowDataSource()
13.    private itemWidthArray: number\[\] = \[\]
14.    private itemHeightArray: number\[\] = \[\]

17.    getSize() {
18.      let ret = Math.floor(Math.random() \* this.maxSize)
19.      return (ret > this.minSize ? ret : this.minSize)
20.    }

23.    setItemSizeArray() {
24.      for (let i = 0; i < 100; i++) {
25.        this.itemWidthArray.push(this.getSize())
26.        this.itemHeightArray.push(this.getSize())
27.      }
28.    }

30.    aboutToAppear() {
31.      this.setItemSizeArray()
32.    }

34.    @Builder
35.    itemFoot() {
36.      Column() {
37.        Text(\`Footer\`)
38.          .fontSize(10)
39.          .backgroundColor(Color.Red)
40.          .width(50)
41.          .height(50)
42.          .align(Alignment.Center)
43.          .margin({ top: 2 })
44.      }
45.    }

47.    build() {
48.      Column({ space: 2 }) {
49.        WaterFlow() {
50.          LazyForEach(this.dataSource, (item: number) => {
51.            FlowItem() {
52.              Column() {
53.                Text("N" + item).fontSize(12).height('16')

55.                Image('res/waterFlowTest(' + item % 5 + ').jpg')
56.                  .objectFit(ImageFit.Fill)
57.                  .width('100%')
58.                  .layoutWeight(1)
59.              }
60.            }
61.            .onAppear(() => {

63.              if (item + 20 == this.dataSource.totalCount()) {
64.                for (let i = 0; i < 100; i++) {
65.                  this.dataSource.addLastItem()
66.                }
67.              }
68.            })
69.            .width('100%')
70.            .height(this.itemHeightArray\[item % 100\])
71.            .backgroundColor(this.colors\[item % 5\])
72.          }, (item: string) => item)
73.        }
74.        .columnsTemplate("1fr 1fr")
75.        .columnsGap(10)
76.        .rowsGap(5)
77.        .backgroundColor(0xFAEEE0)
78.        .width('100%')
79.        .height('100%')
80.        .onReachStart(() => {
81.          console.info('waterFlow reach start')
82.        })
83.        .onScrollStart(() => {
84.          console.info('waterFlow scroll start')
85.        })
86.        .onScrollStop(() => {
87.          console.info('waterFlow scroll stop')
88.        })
89.        .onScrollFrameBegin((offset: number, state: ScrollState) => {
90.          console.info('waterFlow scrollFrameBegin offset: ' + offset + ' state: ' + state.toString())
91.          return { offsetRemain: offset }
92.        })
93.      }
94.    }
95.  }

![Image 1](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240816151307.42212182756447355755597293556336:50001231000000:2800:697756A54CA4A5826B528A646B1CF5A372EB9E36DA372B3BBD85C7F137F86C52.gif?needInitFileName=true?needInitFileName=true)

### 示例2

auto-fill的使用。

2.  import { WaterFlowDataSource } from './WaterFlowDataSource'

4.  @Entry
5.  @Component
6.  struct WaterFlowDemo {
7.    @State minSize: number = 80
8.    @State maxSize: number = 180
9.    @State colors: number\[\] = \[0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F\]
10.    dataSource: WaterFlowDataSource = new WaterFlowDataSource()
11.    private itemWidthArray: number\[\] = \[\]
12.    private itemHeightArray: number\[\] = \[\]

15.    getSize() {
16.      let ret = Math.floor(Math.random() \* this.maxSize)
17.      return (ret > this.minSize ? ret : this.minSize)
18.    }

21.    setItemSizeArray() {
22.      for (let i = 0; i < 100; i++) {
23.        this.itemWidthArray.push(this.getSize())
24.        this.itemHeightArray.push(this.getSize())
25.      }
26.    }

28.    aboutToAppear() {
29.      this.setItemSizeArray()
30.    }

32.    build() {
33.      Column({ space: 2 }) {
34.        WaterFlow() {
35.          LazyForEach(this.dataSource, (item: number) => {
36.            FlowItem() {
37.              Column() {
38.                Text("N" + item).fontSize(12).height('16')
39.                Image('res/waterFlowTest(' + item % 5 + ').jpg')
40.              }
41.            }
42.            .width('100%')
43.            .height(this.itemHeightArray\[item % 100\])
44.            .backgroundColor(this.colors\[item % 5\])
45.          }, (item: string) => item)
46.        }
47.        .columnsTemplate('repeat(auto-fill,80)')
48.        .columnsGap(10)
49.        .rowsGap(5)
50.        .padding({left:5})
51.        .backgroundColor(0xFAEEE0)
52.        .width('100%')
53.        .height('100%')
54.      }
55.    }
56.  }

![Image 2](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240816151307.33922314557201989119079720061549:50001231000000:2800:80AB54E925E736BCEFF49D25D58BB46D059807B7E741762C308433DFDCA787FA.png?needInitFileName=true?needInitFileName=true)

### 示例3

WaterFlowSections的使用。

2.  import { WaterFlowDataSource } from './WaterFlowDataSource'

4.  @Reusable
5.  @Component
6.  struct ReusableFlowItem {
7.    @State item: number = 0

10.    aboutToReuse(params: Record<string, number\>) {
11.      this.item = params.item;
12.      console.info('Reuse item:' + this.item)
13.    }

15.    aboutToAppear() {
16.      console.info('new item:' + this.item)
17.    }

19.    build() {
20.      Image('res/waterFlowTest(' + this.item % 5 + ').jpg')
21.          .overlay('N' + this.item, { align: Alignment.Top })
22.          .objectFit(ImageFit.Fill)
23.          .width('100%')
24.          .layoutWeight(1)
25.    }
26.  }

28.  @Entry
29.  @Component
30.  struct WaterFlowDemo {
31.    minSize: number = 80
32.    maxSize: number = 180
33.    fontSize: number = 24
34.    colors: number\[\] = \[0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F\]
35.    scroller: Scroller = new Scroller()
36.    dataSource: WaterFlowDataSource = new WaterFlowDataSource()
37.    dataCount: number = this.dataSource.totalCount()
38.    private itemHeightArray: number\[\] = \[\]
39.    @State sections: WaterFlowSections = new WaterFlowSections()
40.    sectionMargin: Margin = { top: 10, left: 5, bottom: 10, right: 5 }
41.    oneColumnSection: SectionOptions = {
42.      itemsCount: 4,
43.      crossCount: 1,
44.      columnsGap: '5vp',
45.      rowsGap: 10,
46.      margin: this.sectionMargin,
47.      onGetItemMainSizeByIndex: (index: number) => {
48.        return this.itemHeightArray\[index % 100\]
49.      }
50.    }
51.    twoColumnSection: SectionOptions = {
52.      itemsCount: 2,
53.      crossCount: 2,
54.      onGetItemMainSizeByIndex: (index: number) => {
55.        return 100
56.      }
57.    }
58.    lastSection: SectionOptions = {
59.      itemsCount: 20,
60.      crossCount: 2,
61.      onGetItemMainSizeByIndex: (index: number) => {
62.        return this.itemHeightArray\[index % 100\]
63.      }
64.    }

67.    getSize() {
68.      let ret = Math.floor(Math.random() \* this.maxSize)
69.      return (ret > this.minSize ? ret : this.minSize)
70.    }

73.    setItemSizeArray() {
74.      for (let i = 0; i < 100; i++) {
75.        this.itemHeightArray.push(this.getSize())
76.      }
77.    }

79.    aboutToAppear() {
80.      this.setItemSizeArray()

82.      let sectionOptions: SectionOptions\[\] = \[\]
83.      let count = 0
84.      let oneOrTwo = 0
85.      while (count < this.dataCount) {
86.        if (this.dataCount - count < 20) {
87.          this.lastSection.itemsCount = this.dataCount - count
88.          sectionOptions.push(this.lastSection)
89.          break;
90.        }
91.        if (oneOrTwo++ % 2 == 0) {
92.          sectionOptions.push(this.oneColumnSection)
93.          count += this.oneColumnSection.itemsCount
94.        } else {
95.          sectionOptions.push(this.twoColumnSection)
96.          count += this.twoColumnSection.itemsCount
97.        }
98.      }
99.      this.sections.splice(0, 0, sectionOptions)
100.    }

102.    build() {
103.      Column({ space: 2 }) {
104.        Row() {
105.          Button('splice')
106.            .height('5%')
107.            .onClick(() => {

109.              let totalCount: number = this.dataSource.totalCount()
110.              let newSection: SectionOptions = {
111.                itemsCount: totalCount,
112.                crossCount: 2,
113.                onGetItemMainSizeByIndex: (index: number) => {
114.                  return this.itemHeightArray\[index % 100\]
115.                }
116.              }
117.              let oldLength: number = this.sections.length()
118.              this.sections.splice(0, oldLength, \[newSection\])
119.            })
120.            .margin({ top: 10, left: 20 })
121.          Button('update')
122.            .height('5%')
123.            .onClick(() => {

125.              let newSection: SectionOptions = {
126.                itemsCount: 6,
127.                crossCount: 3,
128.                columnsGap: 5,
129.                rowsGap: 10,
130.                margin: this.sectionMargin,
131.                onGetItemMainSizeByIndex: (index: number) => {
132.                  return this.itemHeightArray\[index % 100\]
133.                }
134.              }
135.              this.dataSource.addItem(this.oneColumnSection.itemsCount)
136.              this.dataSource.addItem(this.oneColumnSection.itemsCount + 1)
137.              this.dataSource.addItem(this.oneColumnSection.itemsCount + 2)
138.              this.dataSource.addItem(this.oneColumnSection.itemsCount + 3)
139.              const result: boolean = this.sections.update(1, newSection)
140.              console.info('update:' + result)
141.            })
142.            .margin({ top: 10, left: 20 })
143.          Button('delete')
144.            .height('5%')
145.            .onClick(() => {

147.              let newSection: SectionOptions = {
148.                itemsCount: 2,
149.                crossCount: 2,
150.                columnsGap: 5,
151.                rowsGap: 10,
152.                margin: this.sectionMargin,
153.                onGetItemMainSizeByIndex: (index: number) => {
154.                  return this.itemHeightArray\[index % 100\]
155.                }
156.              }
157.              this.dataSource.deleteItem(this.oneColumnSection.itemsCount)
158.              this.dataSource.deleteItem(this.oneColumnSection.itemsCount)
159.              this.dataSource.deleteItem(this.oneColumnSection.itemsCount)
160.              this.dataSource.deleteItem(this.oneColumnSection.itemsCount)
161.              this.sections.update(1, newSection)
162.            })
163.            .margin({ top: 10, left: 20 })
164.          Button('values')
165.            .height('5%')
166.            .onClick(() => {
167.              const sections: Array<SectionOptions\> = this.sections.values();
168.              for (const value of sections) {
169.                console.log(JSON.stringify(value));
170.              }
171.              console.info('count:' + this.sections.length())
172.            })
173.            .margin({ top: 10, left: 20 })
174.        }.margin({ bottom: 20 })

176.        WaterFlow({ scroller: this.scroller, sections: this.sections }) {
177.          LazyForEach(this.dataSource, (item: number) => {
178.            FlowItem() {
179.              ReusableFlowItem({ item: item })
180.            }
181.            .width('100%')

184.            .backgroundColor(this.colors\[item % 5\])
185.          }, (item: string) => item)
186.        }
187.        .columnsTemplate('1fr 1fr') 
188.        .columnsGap(10)
189.        .rowsGap(5)
190.        .backgroundColor(0xFAEEE0)
191.        .width('100%')
192.        .height('100%')
193.        .layoutWeight(1)
194.        .onScrollIndex((first: number, last: number) => {

196.          if (last + 20 >= this.dataSource.totalCount()) {
197.            for (let i = 0; i < 100; i++) {
198.              this.dataSource.addLastItem()
199.            }

201.            const sections: Array<SectionOptions\> = this.sections.values();
202.            let newSection: SectionOptions = sections\[this.sections.length() - 1\];
203.            newSection.itemsCount += 100;
204.            this.sections.update(-1, newSection);
205.          }
206.        })
207.      }
208.    }
209.  }

![Image 3](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240816151307.23289011516660759827372232009604:50001231000000:2800:DF14DD20AB05D2E530220A3DAF54183F9F245AC818817A559C1D5ECFDFDA67F5.png?needInitFileName=true?needInitFileName=true)

### 示例4

双指缩放改变列数。

2.  import { WaterFlowDataSource } from './WaterFlowDataSource'

4.  @Reusable
5.  @Component
6.  struct ReusableFlowItem {
7.    @State item: number = 0

10.    aboutToReuse(params: Record<string, number\>) {
11.      this.item = params.item;
12.      console.info('Reuse item:' + this.item)
13.    }

15.    aboutToAppear() {
16.      console.info('item:' + this.item)
17.    }

19.    build() {
20.      Column() {
21.        Text("N" + this.item).fontSize(12).height('16')
22.        Image('res/waterFlow (' + this.item % 5 + ').JPG')
23.          .objectFit(ImageFit.Fill)
24.          .width('100%')
25.          .layoutWeight(1)
26.      }
27.    }
28.  }

30.  @Entry
31.  @Component
32.  struct WaterFlowDemo {
33.    minSize: number = 80
34.    maxSize: number = 180
35.    colors: number\[\] = \[0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F\]
36.    @State columns: number = 2
37.    dataSource: WaterFlowDataSource = new WaterFlowDataSource()
38.    private itemWidthArray: number\[\] = \[\]
39.    private itemHeightArray: number\[\] = \[\]

42.    getSize() {
43.      let ret = Math.floor(Math.random() \* this.maxSize)
44.      return (ret > this.minSize ? ret : this.minSize)
45.    }

48.    setItemSizeArray() {
49.      for (let i = 0; i < 100; i++) {
50.        this.itemWidthArray.push(this.getSize())
51.        this.itemHeightArray.push(this.getSize())
52.      }
53.    }

55.    aboutToAppear() {
56.      let lastCount = AppStorage.get<number\>('columnsCount')
57.      if (typeof lastCount != 'undefined') {
58.        this.columns = lastCount
59.      }
60.      this.setItemSizeArray()
61.    }

63.    build() {
64.      Column({ space: 2 }) {
65.        Row() {
66.          Text('双指缩放改变列数')
67.            .height('5%')
68.            .margin({ top: 10, left: 20 })
69.        }

71.        WaterFlow() {
72.          LazyForEach(this.dataSource, (item: number) => {
73.            FlowItem() {
74.              ReusableFlowItem({ item: item })
75.            }
76.            .width('100%')
77.            .height(this.itemHeightArray\[item % 100\])
78.            .backgroundColor(this.colors\[item % 5\])
79.          }, (item: string) => item)
80.        }
81.        .columnsTemplate('1fr '.repeat(this.columns))
82.        .columnsGap(10)
83.        .rowsGap(5)
84.        .backgroundColor(0xFAEEE0)
85.        .width('100%')
86.        .height('100%')
87.        .layoutWeight(1)

89.        .animation({
90.          duration: 300,
91.          curve: Curve.Smooth
92.        })
93.        .priorityGesture(
94.          PinchGesture()
95.            .onActionEnd((event: GestureEvent) => {
96.              console.info('end scale:' + event.scale)

98.              if (event.scale > 2) {
99.                this.columns\--
100.              } else if (event.scale < 0.6) {
101.                this.columns++
102.              }

104.              this.columns = Math.min(4, Math.max(1, this.columns));
105.              AppStorage.setOrCreate<number\>('columnsCount', this.columns)
106.            })
107.        )
108.      }
109.    }
110.  }

![Image 4](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240816151308.65838281400170087396785051017519:50001231000000:2800:485CC4E5F6D421CE76018A0D35A49EDC6CC4928C54296287CF4F26A7A09587D4.gif?needInitFileName=true?needInitFileName=true)
