/*\n实现思路：\n本示例展示了如何使用鸿蒙ArkUI的Chip组件创建一个不显示删除图标的操作块。通过设置Chip组件的属性，如prefixIcon、label、size等，来定制操作块的外观和行为。\n\n总体功能与效果描述：\n该操作块显示一个带有蓝色图标和文本的Chip组件，文本为“操作块”，并且不显示删除图标。用户无法通过点击删除图标来移除该操作块。\n*/\n\n// Index.ets\nimport { Chip, ChipSize } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column({ space: 10 }) {\n      Chip({\n        // 设置Chip的前缀图标\n        prefixIcon: {\n          src: $r('app.media.chips'), // 图标的资源路径\n          size: { width: 16, height: 16 }, // 图标的尺寸\n          fillColor: Color.Blue // 图标的填充颜色\n        },\n        // 设置Chip的标签文本\n        label: {\n          text: "操作块", // 标签文本内容\n          fontSize: 12, // 文本字体大小\n          fontColor: Color.Blue, // 文本颜色\n          fontFamily: "HarmonyOS Sans", // 文本字体\n          labelMargin: { left: 20, right: 30 } // 文本的左右边距\n        },\n        size: ChipSize.SMALL, // Chip的大小，这里设置为小尺寸\n        allowClose: false, // 不允许显示删除图标\n        enabled: true, // Chip是否启用\n        backgroundColor: $r('sys.color.ohos_id_color_button_normal'), // Chip的背景颜色\n        borderRadius: $r('sys.float.ohos_id_corner_radius_button'), // Chip的边框圆角\n        onClose:()=>{\n          console.log("chip on close") // 当Chip被关闭时的回调函数\n        }\n      })\n    }\n  }\n}


/*\n实现思路：\n本示例展示了如何使用ArkUI的Chip组件创建一个带有默认删除图标的操作块。通过配置Chip组件的各个属性，如前缀图标、标签文本、尺寸、背景颜色等，实现一个可交互的操作块。\n\n总体功能与效果描述：\n该示例创建了一个带有蓝色前缀图标和蓝色文本标签的操作块，支持关闭功能，且背景颜色和边框圆角根据系统主题进行设置。\n*/\n\n// Index.ets\nimport { Chip, ChipSize } from '@kit.ArkUI'; // 导入Chip组件及其尺寸枚举\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局，组件间距为10\n      Chip({\n        prefixIcon: {\n          src: $r('app.media.chips'), // 设置前缀图标的资源路径\n          size: { width: 16, height: 16 }, // 设置前缀图标的尺寸\n          fillColor: Color.Blue // 设置前缀图标的填充颜色为蓝色\n        },\n        label: {\n          text: "操作块", // 设置标签文本内容\n          fontSize: 12, // 设置标签文本的字体大小\n          fontColor: Color.Blue, // 设置标签文本的颜色为蓝色\n          fontFamily: "HarmonyOS Sans", // 设置标签文本的字体族\n          labelMargin: { left: 20, right: 30 } // 设置标签文本的左右边距\n        },\n        size: ChipSize.NORMAL, // 设置Chip组件的尺寸为正常大小\n        allowClose: true, // 允许Chip组件显示关闭图标\n        enabled: true, // 启用Chip组件的交互功能\n        backgroundColor: $r('sys.color.ohos_id_color_button_normal'), // 设置Chip组件的背景颜色\n        borderRadius: $r('sys.float.ohos_id_corner_radius_button') // 设置Chip组件的边框圆角\n      })\n    }\n  }\n}


/*\n实现思路：\n本示例展示了如何使用ArkUI的Chip组件创建一个自定义删除图标的操作块。通过配置Chip组件的各个属性，如前缀图标、标签、后缀图标、大小、背景颜色等，实现一个具有特定样式和功能的操作块。\n\n总体功能与效果描述：\n该操作块包含一个前缀图标、文本标签和一个后缀删除图标。用户可以通过点击后缀图标来执行删除操作。操作块的样式和颜色可以根据需求进行自定义。\n*/\n\n// Index.ets\nimport { Chip, ChipSize } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column({ space: 10 }) {\n      Chip({\n        // 配置前缀图标\n        prefixIcon: {\n          src: $r('app.media.chips'), // 图标资源路径\n          size: { width: 16, height: 16 }, // 图标大小\n          fillColor: Color.Red // 图标填充颜色\n        },\n        // 配置标签文本\n        label: {\n          text: "操作块", // 标签文本内容\n          fontSize: 12, // 字体大小\n          fontColor: Color.Blue, // 字体颜色\n          fontFamily: "HarmonyOS Sans", // 字体家族\n          labelMargin: { left: 20, right: 30 } // 标签文本的左右边距\n        },\n        // 配置后缀图标\n        suffixIcon: {\n          src: $r('app.media.close'), // 图标资源路径\n          size: { width: 16, height: 16 }, // 图标大小\n          fillColor: Color.Red // 图标填充颜色\n        },\n        size: ChipSize.NORMAL, // 操作块的大小\n        allowClose: false, // 是否允许关闭操作块\n        enabled: true, // 操作块是否启用\n        backgroundColor: $r('sys.color.ohos_id_color_button_normal'), // 背景颜色\n        borderRadius: $r('sys.float.ohos_id_corner_radius_button') // 边框圆角\n      })\n    }\n  }\n}


/*\n实现思路：\n本示例展示了如何使用Chip组件实现一个布局镜像化的操作块。通过设置Chip组件的direction属性为Direction.Rtl，实现从右到左的布局。同时，配置了前缀图标、标签、后缀图标以及各种样式属性，以展示一个完整的Chip组件。\n\n总体功能与效果描述：\n该示例展示了一个从右到左布局的操作块，包含前缀图标、标签和后缀图标，并设置了相应的样式属性，如颜色、大小、边框半径等。\n*/\n\n// ChipPage.ets\nimport { Chip, ChipSize, LengthMetrics } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct ChipPage {\n  @State message: string = 'Hello World';\n\n  build() {\n    Column() {\n      Chip({\n        direction: Direction.Rtl, // 设置Chip组件的布局方向为从右到左\n        prefixIcon: {\n          src: $r('app.media.chips'), // 设置前缀图标的资源路径\n          size: { width: 16, height: 16 }, // 设置前缀图标的大小\n          fillColor: Color.Red, // 设置前缀图标的填充颜色\n        },\n        label: {\n          text: "操作块", // 设置标签的文本内容\n          fontSize: 12, // 设置标签的字体大小\n          fontColor: Color.Blue, // 设置标签的字体颜色\n          fontFamily: "HarmonyOS Sans", // 设置标签的字体家族\n          localizedLabelMargin: { start: LengthMetrics.vp(20), end: LengthMetrics.vp(20) }, // 设置标签的边距\n        },\n        suffixIcon: {\n          src: $r('app.media.close'), // 设置后缀图标的资源路径\n          size: { width: 16, height: 16 }, // 设置后缀图标的大小\n          fillColor: Color.Red, // 设置后缀图标的填充颜色\n        },\n        size: ChipSize.NORMAL, // 设置Chip组件的大小\n        allowClose: false, // 设置是否允许关闭Chip组件\n        enabled: true, // 设置Chip组件是否启用\n        backgroundColor: $r('sys.color.ohos_id_color_button_normal'), // 设置Chip组件的背景颜色\n        borderRadius: $r('sys.float.ohos_id_corner_radius_button') // 设置Chip组件的边框半径\n      })\n    }.justifyContent(FlexAlign.Center) // 设置Column组件的内容对齐方式为居中\n    .width('100%') // 设置Column组件的宽度为100%\n    .height('100%') // 设置Column组件的高度为100%\n  }\n}


/*\n实现思路：\n本示例展示了如何使用ArkUI的Chip组件创建一个可激活的操作块，并通过按钮改变其激活状态。Chip组件支持自定义图标、文本样式、背景颜色等，并提供了点击和关闭事件的回调。\n\n总体功能与效果描述：\n1. 创建一个Chip组件，显示一个带有图标和文本的操作块。\n2. 通过按钮切换Chip组件的激活状态，激活状态下Chip的图标和文本颜色会发生变化。\n3. Chip组件支持点击和关闭事件，点击和关闭时会在控制台输出相应信息。\n*/\n\n// Index.ets\nimport { Chip, ChipSize } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  @State isActivated: boolean = false; // 定义一个状态变量，用于控制Chip的激活状态\n\n  build() {\n    Column({ space: 10 }) {\n      Chip({\n        prefixIcon: {\n          src: $r('app.media.chips'), // 设置Chip的前缀图标资源路径\n          size: { width: 16, height: 16 }, // 设置图标的大小\n          fillColor: Color.Blue, // 设置图标的填充颜色\n          activatedFillColor: $r('sys.color.ohos_id_color_text_primary_contrary') // 设置激活状态下的图标填充颜色\n        },\n        label: {\n          text: "操作块", // 设置Chip的文本内容\n          fontSize: 12, // 设置文本的字体大小\n          fontColor: Color.Blue, // 设置文本的颜色\n          activatedFontColor: $r('sys.color.ohos_id_color_text_primary_contrary'), // 设置激活状态下的文本颜色\n          fontFamily: "HarmonyOS Sans", // 设置文本的字体家族\n          labelMargin: { left: 20, right: 30 } // 设置文本的左右边距\n        },\n        size: ChipSize.NORMAL, // 设置Chip的大小为正常尺寸\n        allowClose: true, // 允许Chip显示关闭按钮\n        enabled: true, // 启用Chip的交互功能\n        activated: this.isActivated, // 根据状态变量设置Chip的激活状态\n        backgroundColor: $r('sys.color.ohos_id_color_button_normal'), // 设置Chip的背景颜色\n        activatedBackgroundColor: $r('sys.color.ohos_id_color_emphasize'), // 设置激活状态下的背景颜色\n        borderRadius: $r('sys.float.ohos_id_corner_radius_button'), // 设置Chip的边框圆角\n        onClose:()=>{\n          console.log("chip on close") // 定义Chip关闭事件的回调函数\n        },\n        onClicked:()=>{\n          console.log("chip on clicked") // 定义Chip点击事件的回调函数\n        }\n      })\n\n      Button('改变激活状态').onClick(()=>{\n        this.isActivated = !this.isActivated; // 定义按钮点击事件的回调函数，切换Chip的激活状态\n      })\n    }\n  }\n}


/*\n实现思路：\n本示例展示了如何使用Chip组件，并通过前缀和后缀图标展示symbol类型资源。通过按钮改变Chip的激活状态，观察图标和文本颜色的变化。\n\n总体功能与效果描述：\n- 展示一个带有前缀图标和后缀图标的Chip组件。\n- 通过按钮改变Chip的激活状态，观察图标和文本颜色的变化。\n- 实现Chip的关闭和点击事件。\n*/\n\n// Index.ets\nimport { Chip, ChipSize, SymbolGlyphModifier } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  @State isActivated: boolean = false; // 定义一个状态变量，用于控制Chip的激活状态\n\n  build() {\n    Column({ space: 10 }) {\n      Chip({\n        prefixIcon: {\n          src: $r('app.media.chips'), // 设置前缀图标的资源路径\n          size: { width: 16, height: 16 }, // 设置前缀图标的大小\n          fillColor: Color.Blue, // 设置前缀图标的填充颜色\n          activatedFillColor: $r('sys.color.ohos_id_color_text_primary_contrary') // 设置激活状态下的前缀图标填充颜色\n        },\n        prefixSymbol: {\n          normal: new SymbolGlyphModifier($r('sys.symbol.ohos_star')).fontSize(16).fontColor([Color.Green]), // 设置前缀symbol图标在正常状态下的样式\n          activated: new SymbolGlyphModifier($r('sys.symbol.ohos_star')).fontSize(16).fontColor([Color.Red]), // 设置前缀symbol图标在激活状态下的样式\n        },\n        label: {\n          text: "操作块", // 设置Chip的标签文本\n          fontSize: 12, // 设置标签文本的字体大小\n          fontColor: Color.Blue, // 设置标签文本的颜色\n          activatedFontColor: $r('sys.color.ohos_id_color_text_primary_contrary'), // 设置激活状态下的标签文本颜色\n          fontFamily: "HarmonyOS Sans", // 设置标签文本的字体家族\n          labelMargin: { left: 20, right: 30 }, // 设置标签文本的边距\n        },\n        size: ChipSize.NORMAL, // 设置Chip的大小\n        allowClose: true, // 允许Chip关闭\n        enabled: true, // 启用Chip\n        activated: this.isActivated, // 设置Chip的激活状态\n        backgroundColor: $r('sys.color.ohos_id_color_button_normal'), // 设置Chip的背景颜色\n        activatedBackgroundColor: $r('sys.color.ohos_id_color_emphasize'), // 设置激活状态下的Chip背景颜色\n        borderRadius: $r('sys.float.ohos_id_corner_radius_button'), // 设置Chip的边框圆角\n        onClose:()=>{\n          console.log("chip on close") // 定义Chip关闭事件的处理函数\n        },\n        onClicked:()=>{\n          console.log("chip on clicked") // 定义Chip点击事件的处理函数\n        }\n      })\n\n      Button('改变激活状态').onClick(()=>{\n        this.isActivated = !this.isActivated; // 定义按钮点击事件，切换Chip的激活状态\n      })\n    }\n  }\n}