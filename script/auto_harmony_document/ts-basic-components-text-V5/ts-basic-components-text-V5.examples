/*\n实现一个简单的组件，展示如何配置隐私敏感信息隐藏。该组件包含一个文本组件，并通过设置`privacySensitive`属性来隐藏敏感信息。效果展示需要卡片框架支持。\n*/\n\n// 入口组件，表示该组件是应用的入口\n@Entry\n// 声明一个组件，组件名为ImageExample\n@Component\nstruct ImageExample {\n  // 构建方法，定义组件的UI结构\n  build() {\n    // 创建一个垂直布局的容器，设置子组件之间的间距为10\n    Column({ space: 10 }) {\n      // 创建一个文本组件，显示内容为"privacySensitive"\n      Text("privacySensitive")\n        // 设置文本组件为隐私敏感，当卡片框架支持隐私隐藏时，该文本内容将被隐藏\n        .privacySensitive(true)\n        // 设置文本组件的上边距为30\n        .margin({top :30})\n    }\n    // 设置容器的子组件水平居中对齐\n    .alignItems(HorizontalAlign.Center)\n    // 设置容器的宽度为100%\n    .width("100%")\n  }\n}


/*\n实现一个可选择的文本组件，支持通过键盘框选文本功能。文本组件的宽度为300，高度为100，最多显示5行文本。文本颜色为黑色，支持在应用内复制文本，并且默认选中第3到第8个字符。\n*/\n\n@Entry\n@Component\nstruct TextExample10 {\n  @State message: string = 'TextTextTextTextTextTextTextText' + 'TextTextTextTextTextTextTextTextTextTextTextTextTextTextTextText';\n\n  build() {\n    Column() {\n      Text(this.message)\n        .width(300) // 设置文本组件的宽度为300\n        .height(100) // 设置文本组件的高度为100\n        .maxLines(5) // 设置文本组件最多显示5行\n        .fontColor(Color.Black) // 设置文本颜色为黑色\n        .copyOption(CopyOptions.InApp) // 设置文本支持在应用内复制\n        .selection(3, 8) // 设置默认选中的文本范围为第3到第8个字符\n        .textSelectable(TextSelectableMode.SELECTABLE_FOCUSABLE) // 设置文本可选择，并且支持通过键盘框选文本\n    }.width('100%').margin({ top: 100 }) // 设置Column的宽度为100%，并设置顶部外边距为100\n  }\n}


/*\n实现一个展示文本组件的示例，通过设置halfLeading属性来控制文本的行间距。示例中包含两个文本组件，一个启用了halfLeading，另一个未启用，以便对比效果。\n*/\n\n@Entry\n@Component\nstruct TextExample12 {\n  build() {\n    Column({ space: 10 }) {\n      // 标题文本，显示“halfLeading”，字体大小为9，颜色为灰色，上下左右边距为15，宽度为90%\n      Text('halfLeading').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%')\n      \n      // 第一个文本组件，显示“This is the text with the halfLeading set.”，行高为60，启用了halfLeading，边框宽度为1，宽度为80%\n      Text("This is the text with the halfLeading set.")\n        .lineHeight(60) // 设置行高为60\n        .halfLeading(true) // 启用halfLeading，调整行间距\n        .borderWidth(1) // 设置边框宽度为1\n        .width('80%') // 设置宽度为80%\n      \n      // 第二个文本组件，显示“This is the text without the halfLeading set.”，行高为60，未启用halfLeading，边框宽度为1，宽度为80%\n      Text("This is the text without the halfLeading set.")\n        .lineHeight(60) // 设置行高为60\n        .halfLeading(false) // 未启用halfLeading，不调整行间距\n        .borderWidth(1) // 设置边框宽度为1\n        .width('80%') // 设置宽度为80%\n    }\n  }\n}


/*\n实现一个文本选择和复制功能的示例。用户可以通过点击按钮设置文本的选择范围，并且可以通过复制功能将选中的文本内容复制到剪贴板。复制的文本内容会显示在界面上。\n*/\n\n@Entry\n@Component\nstruct TextExample5 {\n  // 存储复制的文本内容\n  @State onCopy: string = ''\n  // 显示的文本内容\n  @State text: string = 'This is set selection to Selection text content This is set selection to Selection text content.'\n  // 文本选择的起始位置\n  @State start: number = 0\n  // 文本选择的结束位置\n  @State end: number = 20\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.Start }) {\n      // 显示文本内容，并设置字体大小、边框、行高和外边距\n      Text(this.text)\n        .fontSize(12)\n        .border({ width: 1 })\n        .lineHeight(20)\n        .margin(30)\n        // 设置文本的复制选项为仅在应用内复制\n        .copyOption(CopyOptions.InApp)\n        // 设置文本的选择范围\n        .selection(this.start, this.end)\n        // 监听复制事件，将复制的文本内容存储到onCopy状态变量中\n        .onCopy((value: string) => {\n          this.onCopy = value\n        })\n      // 按钮，点击后设置文本的选择范围\n      Button('Set text selection')\n        .margin({left:20})\n        .onClick(() => {\n          // 设置文本选择的起始位置和结束位置\n          this.start = 10\n          this.end = 30\n        })\n      // 显示复制的文本内容，并设置字体大小和外边距\n      Text(this.onCopy).fontSize(12).margin(10).key('copy')\n    }.height(600).width(335).padding({ left: 35, right: 35, top: 35 })\n  }\n}


/*\n实现一个文本组件，支持数据检测功能。文本内容包括电话号码、链接、邮箱、地址和时间。通过enableDataDetector属性控制数据检测的开启与关闭，通过dataDetectorConfig属性配置数据检测的类型和结果更新回调。\n*/\n\n@Entry\n@Component\nstruct TextExample6 {\n  // 定义电话号码状态变量\n  @State phoneNumber: string = '(86) (755) ********';\n  // 定义链接状态变量\n  @State url: string = 'www.*******.com';\n  // 定义邮箱状态变量\n  @State email: string = '***@example.com';\n  // 定义地址状态变量\n  @State address: string = 'XX省XX市XX区XXXX';\n  // 定义时间状态变量\n  @State datetime: string = 'XX年XX月XX日XXXX';\n  // 定义是否启用数据检测的状态变量\n  @State enableDataDetector: boolean = true;\n  // 定义数据检测类型的状态变量\n  @State types: TextDataDetectorType[] = [];\n\n  build() {\n    Row() {\n      Column() {\n        Text(\n          '电话号码：' + this.phoneNumber + '\n' +\n          '链接：' + this.url + '\n' +\n          '邮箱：' + this.email + '\n' +\n          '地址：' + this.address + '\n' +\n          '时间：' + this.datetime\n        )\n        .fontSize(16) // 设置文本字体大小为16\n        .copyOption(CopyOptions.InApp) // 设置文本复制选项为仅在应用内复制\n        .enableDataDetector(this.enableDataDetector) // 启用或禁用数据检测功能\n        .dataDetectorConfig({\n          types: this.types, // 配置数据检测的类型\n          onDetectResultUpdate: (result: string) => {} // 配置数据检测结果更新的回调函数\n        })\n        .textAlign(TextAlign.Center) // 设置文本对齐方式为居中\n        .borderWidth(1) // 设置文本边框宽度为1\n        .padding(10) // 设置文本内边距为10\n        .width('100%') // 设置文本宽度为100%\n      }\n      .width('100%') // 设置列的宽度为100%\n    }\n    .height('100%') // 设置行的宽度为100%\n  }\n}


/*\n实现一个包含文本组件的示例，展示如何使用getLayoutManager接口获取文本布局信息。示例中包含三个主要功能：\n1. 获取文本的行数。\n2. 获取指定坐标位置的字形信息。\n3. 获取指定行的文本样式和字体属性信息。\n*/\n\n@Entry\n@Component\nstruct TextExample9 {\n  // 定义状态变量，用于存储行数、字形信息和行信息\n  @State lineCount: string = ""\n  @State glyphPositionAtCoordinate: string = ""\n  @State lineMetrics: string = ""\n\n  // 创建TextController实例，用于控制文本组件\n  controller: TextController = new TextController()\n\n  // 定义文本内容\n  @State textStr: string = 'Hello World! 您好，世界！'\n\n  build() {\n    Scroll() {\n      Column() {\n        // 显示标题文本\n        Text('Text组件getLayoutManager接口获取段落相对组件的信息')\n          .fontSize(9)\n          .fontColor(0xCCCCCC)\n          .width('90%')\n          .padding(10)\n\n        // 显示文本内容，并绑定TextController\n        Text(this.textStr, { controller: this.controller })\n          .fontSize(25)\n          .borderWidth(1)\n          .onAreaChange(() => {\n            // 当文本区域发生变化时，获取LayoutManager实例并更新行数\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            this.lineCount = "LineCount: " + layoutManager.getLineCount()\n          })\n\n        // 显示行数标题\n        Text('LineCount').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 显示行数\n        Text(this.lineCount)\n\n        // 显示字形信息标题\n        Text('GlyphPositionAtCoordinate').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 按钮，点击后获取指定坐标位置的字形信息\n        Button("相对组件坐标[150,50]字形信息")\n          .onClick(() => {\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            let position: PositionWithAffinity = layoutManager.getGlyphPositionAtCoordinate(150, 50)\n            this.glyphPositionAtCoordinate =\n              "相对组件坐标[150,50] glyphPositionAtCoordinate position: " + position.position + " affinity: " +\n              position.affinity\n          })\n          .margin({ bottom: 20, top: 10 })\n\n        // 显示字形信息\n        Text(this.glyphPositionAtCoordinate)\n\n        // 显示行信息标题\n        Text('LineMetrics').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 按钮，点击后获取首行的文本样式和字体属性信息\n        Button("首行行信息、文本样式信息、以及字体属性信息")\n          .onClick(() => {\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            let lineMetrics: LineMetrics = layoutManager.getLineMetrics(0)\n            this.lineMetrics = "lineMetrics is " + JSON.stringify(lineMetrics) + '\\n\\n'\n            let runMetrics = lineMetrics.runMetrics\n            runMetrics.forEach((value, key) => {\n              this.lineMetrics += "runMetrics key is " + key + " " + JSON.stringify(value) + "\\n\\n"\n            });\n          })\n          .margin({ bottom: 20, top: 10 })\n\n        // 显示行信息\n        Text(this.lineMetrics)\n      }\n      .margin({ top: 100, left: 8, right: 8 })\n    }\n  }\n}


/*\n实现一个包含多种文本样式和布局策略的示例组件。该组件展示了如何使用textShadow、heightAdaptivePolicy和TextOverflow.MARQUEE等属性来控制文本的显示效果。\n*/\n\n// 自定义Text组件的样式函数，接受一个TextHeightAdaptivePolicy参数，用于设置文本的高度自适应策略\n@Extend(Text)\nfunction style(HeightAdaptivePolicy: TextHeightAdaptivePolicy) {\n  .width('80%') // 设置文本的宽度为父容器的80%\n  .height(90) // 设置文本的高度为90个单位\n  .borderWidth(1) // 设置文本的边框宽度为1个单位\n  .minFontSize(10) // 设置文本的最小字体大小为10个单位\n  .maxFontSize(30) // 设置文本的最大字体大小为30个单位\n  .maxLines(2) // 设置文本的最大行数为2行\n  .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时的处理方式为省略号\n  .heightAdaptivePolicy(HeightAdaptivePolicy) // 设置文本的高度自适应策略\n}\n\n// 主入口组件，展示多种文本样式和布局策略\n@Entry\n@Component\nstruct TextExample3 {\n  build() {\n    Column() {\n      // 展示textShadow效果的标题\n      Text('textShadow').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%')\n\n      // 展示textShadow效果的文本\n      Text('textShadow')\n        .width('80%') // 设置文本的宽度为父容器的80%\n        .height(55) // 设置文本的高度为55个单位\n        .fontSize(40) // 设置文本的字体大小为40个单位\n        .lineHeight(55) // 设置文本的行高为55个单位\n        .textAlign(TextAlign.Center) // 设置文本的对齐方式为居中\n        .textShadow({\n          radius: 10, // 设置阴影的模糊半径为10个单位\n          color: Color.Black, // 设置阴影的颜色为黑色\n          offsetX: 0, // 设置阴影的水平偏移量为0个单位\n          offsetY: 0 // 设置阴影的垂直偏移量为0个单位\n        })\n        .borderWidth(1) // 设置文本的边框宽度为1个单位\n      Divider() // 添加分隔线\n\n      // 展示heightAdaptivePolicy效果的标题\n      Text('heightAdaptivePolicy').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%')\n\n      // 展示不同heightAdaptivePolicy策略的文本\n      Text('This is the text with the height adaptive policy set')\n        .style(TextHeightAdaptivePolicy.MAX_LINES_FIRST) // 设置高度自适应策略为优先考虑最大行数\n      Text('This is the text with the height adaptive policy set')\n        .style(TextHeightAdaptivePolicy.MIN_FONT_SIZE_FIRST) // 设置高度自适应策略为优先考虑最小字体大小\n      Text('This is the text with the height adaptive policy set')\n        .style(TextHeightAdaptivePolicy.LAYOUT_CONSTRAINT_FIRST) // 设置高度自适应策略为优先考虑布局约束\n      Divider() // 添加分隔线\n\n      // 展示TextOverflow.MARQUEE效果的标题\n      Text('marquee').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%')\n\n      // 展示TextOverflow.MARQUEE效果的文本\n      Text('This is the text with the text overflow set marquee')\n        .width(300) // 设置文本的宽度为300个单位\n        .borderWidth(1) // 设置文本的边框宽度为1个单位\n        .textOverflow({ overflow: TextOverflow.MARQUEE }) // 设置文本溢出时的处理方式为跑马灯效果\n    }\n  }\n}


/*\n实现一个文本组件，支持自定义编辑菜单选项。通过 `editMenuOptions` 属性，可以设置自定义菜单项的文本内容、图标、回调方法。\n组件展示一段文本，并允许用户通过长按或右键点击文本区域来显示自定义的编辑菜单。菜单项包括默认的复制和全选选项，以及两个自定义选项。\n*/\n\n@Entry\n@Component\nstruct TextExample11 {\n  @State text: string = 'Text editMenuOptions' // 定义一个状态变量 `text`，用于存储文本内容\n\n  // 定义一个方法 `onCreateMenu`，用于自定义编辑菜单项\n  onCreateMenu(menuItems: Array<TextMenuItem>) {\n    menuItems.forEach((value, index) => {\n      value.icon = $r('app.media.startIcon') // 为每个菜单项设置图标\n      if (value.id.equals(TextMenuItemId.COPY)) { // 如果菜单项的 ID 是 COPY\n        value.content = "复制change" // 修改复制菜单项的文本内容\n      }\n      if (value.id.equals(TextMenuItemId.SELECT_ALL)) { // 如果菜单项的 ID 是 SELECT_ALL\n        value.content = "全选change" // 修改全选菜单项的文本内容\n      }\n    })\n    let item1: TextMenuItem = {\n      content: 'custom1', // 自定义菜单项的文本内容\n      icon: $r('app.media.startIcon'), // 自定义菜单项的图标\n      id: TextMenuItemId.of('custom1'), // 自定义菜单项的 ID\n    }\n    let item2: TextMenuItem = {\n      content: 'custom2', // 自定义菜单项的文本内容\n      id: TextMenuItemId.of('custom2'), // 自定义菜单项的 ID\n      icon: $r('app.media.startIcon'), // 自定义菜单项的图标\n    }\n    menuItems.push(item1) // 将自定义菜单项 `item1` 添加到菜单项列表的末尾\n    menuItems.unshift(item2) // 将自定义菜单项 `item2` 添加到菜单项列表的开头\n    return menuItems // 返回修改后的菜单项列表\n  }\n\n  build() {\n    Column() {\n      Text(this.text) // 显示文本内容\n        .fontSize(20) // 设置文本字体大小\n        .copyOption(CopyOptions.LocalDevice) // 设置复制选项为仅本地设备\n        .editMenuOptions({\n          onCreateMenu: this.onCreateMenu, // 设置自定义菜单项的回调方法\n          onMenuItemClick: (menuItem: TextMenuItem, textRange: TextRange) => { // 设置菜单项点击的回调方法\n            if (menuItem.id.equals(TextMenuItemId.of("custom2"))) { // 如果点击的是自定义菜单项 `custom2`\n              console.log("拦截 id: custom2 start:" + textRange.start + "; end:" + textRange.end) // 输出日志，表示拦截了该菜单项的点击事件\n              return true; // 返回 true，表示拦截该菜单项的默认行为\n            }\n            if (menuItem.id.equals(TextMenuItemId.COPY)) { // 如果点击的是复制菜单项\n              console.log("拦截 COPY start:" + textRange.start + "; end:" + textRange.end) // 输出日志，表示拦截了该菜单项的点击事件\n              return true; // 返回 true，表示拦截该菜单项的默认行为\n            }\n            if (menuItem.id.equals(TextMenuItemId.SELECT_ALL)) { // 如果点击的是全选菜单项\n              console.log("不拦截 SELECT_ALL start:" + textRange.start + "; end:" + textRange.end) // 输出日志，表示不拦截该菜单项的点击事件\n              return false; // 返回 false，表示不拦截该菜单项的默认行为\n            }\n            return false; // 返回 false，表示不拦截其他菜单项的默认行为\n          }\n        })\n        .margin({ top: 100 }) // 设置文本组件的上边距\n    }\n    .width("90%") // 设置列组件的宽度为父容器的 90%\n    .margin("5%") // 设置列组件的外边距为父容器的 5%\n  }\n}


/*\n实现一个展示文本样式的示例组件，包含文本装饰、基线偏移、字符间距和文本大小写转换的功能。通过Flex布局将不同样式的文本内容垂直排列，并设置相应的样式属性。\n*/\n\n// 自定义Text组件的样式\n@Extend(Text)\nfunction style() {\n  .fontSize(12) // 设置字体大小为12\n  .border({ width: 1 }) // 设置文本边框宽度为1\n  .padding(10) // 设置文本内边距为10\n  .width('100%') // 设置文本宽度为100%\n}\n\n// 主入口组件\n@Entry\n@Component\nstruct TextExample2 {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      // 展示文本装饰属性\n      Text('decoration').fontSize(9).fontColor(0xCCCCCC) // 设置标题文本样式\n      Text('This is the text content with the decoration set to LineThrough and the color set to Red.')\n        .decoration({\n          type: TextDecorationType.LineThrough, // 设置文本装饰类型为删除线\n          color: Color.Red // 设置文本装饰颜色为红色\n        })\n        .style() // 应用自定义样式\n\n      Text('This is the text content with the decoration set to Overline and the color set to Red.')\n        .decoration({\n          type: TextDecorationType.Overline, // 设置文本装饰类型为上划线\n          color: Color.Red, // 设置文本装饰颜色为红色\n          style: TextDecorationStyle.DOTTED // 设置文本装饰样式为点状\n        })\n        .style() // 应用自定义样式\n\n      Text('This is the text content with the decoration set to Underline and the color set to Red.')\n        .decoration({\n          type: TextDecorationType.Underline, // 设置文本装饰类型为下划线\n          color: Color.Red, // 设置文本装饰颜色为红色\n          style: TextDecorationStyle.WAVY // 设置文本装饰样式为波浪线\n        })\n        .style() // 应用自定义样式\n\n      // 展示基线偏移属性\n      Text('baselineOffset').fontSize(9).fontColor(0xCCCCCC) // 设置标题文本样式\n      Text('This is the text content with baselineOffset 0.')\n        .baselineOffset(0) // 设置基线偏移为0\n        .style() // 应用自定义样式\n      Text('This is the text content with baselineOffset 30.')\n        .baselineOffset(30) // 设置基线偏移为30\n        .style() // 应用自定义样式\n      Text('This is the text content with baselineOffset -20.')\n        .baselineOffset(-20) // 设置基线偏移为-20\n        .style() // 应用自定义样式\n\n      // 展示字符间距属性\n      Text('letterSpacing').fontSize(9).fontColor(0xCCCCCC) // 设置标题文本样式\n      Text('This is the text content with letterSpacing 0.')\n        .letterSpacing(0) // 设置字符间距为0\n        .style() // 应用自定义样式\n      Text('This is the text content with letterSpacing 3.')\n        .letterSpacing(3) // 设置字符间距为3\n        .style() // 应用自定义样式\n      Text('This is the text content with letterSpacing -1.')\n        .letterSpacing(-1) // 设置字符间距为-1\n        .style() // 应用自定义样式\n\n      // 展示文本大小写转换属性\n      Text('textCase').fontSize(9).fontColor(0xCCCCCC) // 设置标题文本样式\n      Text('This is the text content with textCase set to Normal.')\n        .textCase(TextCase.Normal) // 设置文本大小写为正常\n        .style() // 应用自定义样式\n      Text('This is the text content with textCase set to LowerCase.')\n        .textCase(TextCase.LowerCase) // 设置文本大小写为小写\n        .style() // 应用自定义样式\n      Text('This is the text content with textCase set to UpperCase.')\n        .textCase(TextCase.UpperCase) // 设置文本大小写为大写\n        .style() // 应用自定义样式\n\n    }.height(700).width(350).padding({ left: 35, right: 35, top: 35 }) // 设置Flex容器的高度、宽度和内边距\n  }\n}


/*\n实现一个文本展示组件，支持动态更改省略号位置、文本换行模式以及文本裁剪功能。通过按钮交互，用户可以切换不同的省略号位置和换行模式，并查看效果。\n*/\n\n@Entry\n@Component\nstruct TextExample4 {\n  // 定义文本内容\n  @State text: string =\n    'The text component is used to display a piece of textual information. Support universal attributes and universal text attributes.'\n  \n  // 定义省略号模式索引，初始值为0\n  @State ellipsisModeIndex: number = 0;\n  \n  // 定义省略号模式数组，包含三种模式：从开头省略、从中间省略、从结尾省略\n  @State ellipsisMode: EllipsisMode[] = [EllipsisMode.START, EllipsisMode.CENTER, EllipsisMode.END]\n  \n  // 定义省略号模式字符串数组，用于显示当前省略号模式\n  @State ellipsisModeStr: string[] = ['START', 'CENTER', 'END']\n  \n  // 定义换行模式索引，初始值为0\n  @State wordBreakIndex: number = 0;\n  \n  // 定义换行模式数组，包含三种模式：正常换行、强制换行、单词内换行\n  @State wordBreak: WordBreak[] = [WordBreak.NORMAL, WordBreak.BREAK_ALL, WordBreak.BREAK_WORD]\n  \n  // 定义换行模式字符串数组，用于显示当前换行模式\n  @State wordBreakStr: string[] = ['NORMAL', 'BREAK_ALL', 'BREAK_WORD']\n  \n  // 定义文本裁剪状态，初始值为false\n  @State textClip: boolean = false\n\n  build() {\n    Column({ space: 10 }) {\n      // 第一个文本组件，显示初始文本内容，设置字体大小、边框、行高、最大行数、省略号模式和宽度\n      Text(this.text)\n        .fontSize(16)\n        .border({ width: 1 })\n        .lineHeight(20)\n        .maxLines(1)\n        .textOverflow({ overflow: TextOverflow.Ellipsis })\n        .ellipsisMode(this.ellipsisMode[this.ellipsisModeIndex])\n        .width(300)\n        .margin({ left: 20, top: 20 })\n\n      // 按钮组件，点击后切换省略号模式\n      Row() {\n        Button('更改省略号位置：' + this.ellipsisModeStr[this.ellipsisModeIndex]).onClick(() => {\n          this.ellipsisModeIndex++\n          if (this.ellipsisModeIndex > (this.ellipsisModeStr.length - 1)) {\n            this.ellipsisModeIndex = 0\n          }\n        })\n      }\n\n      // 第二个文本组件，显示长文本内容，设置字体大小、边框、换行模式、行高、最大行数、裁剪状态和宽度\n      Text('This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.')\n        .fontSize(12)\n        .border({ width: 1 })\n        .wordBreak(WordBreak.NORMAL)\n        .lineHeight(20)\n        .maxLines(2)\n        .clip(this.textClip)\n        .width(260)\n      \n      // 按钮组件，点击后切换文本裁剪状态\n      Row() {\n        Button('切换clip：' + this.textClip).onClick(() => {\n          this.textClip = !this.textClip\n        })\n      }\n\n      // 第三个文本组件，显示初始文本内容，设置字体大小、边框、最大行数、省略号模式、换行模式、行高和宽度\n      Text(this.text)\n        .fontSize(12)\n        .border({ width: 1 })\n        .maxLines(2)\n        .textOverflow({ overflow: TextOverflow.Ellipsis })\n        .wordBreak(this.wordBreak[this.wordBreakIndex])\n        .lineHeight(20)\n        .width(260)\n      \n      // 按钮组件，点击后切换换行模式\n      Row() {\n        Button('更改wordBreak模式：' + this.wordBreakStr[this.wordBreakIndex]).onClick(() => {\n          this.wordBreakIndex++\n          if (this.wordBreakIndex > (this.wordBreakStr.length - 1)) {\n            this.wordBreakIndex = 0\n          }\n        })\n      }\n    }\n  }\n}


/*\n实现一个展示文本样式的示例组件，包括行间距、字体特性和换行策略的设置。通过按钮切换不同的换行策略，展示不同策略下的文本换行效果。\n*/\n\nimport { LengthMetrics } from '@kit.ArkUI'\n\n// 扩展Text组件，添加行间距设置功能\n@Extend(Text) function lineSpacingValue(LineSpacing: LengthMetrics|undefined) {\n  .lineSpacing(LineSpacing) // 设置行间距，参数为LengthMetrics类型或undefined\n  .fontSize(12) // 设置字体大小为12\n  .border({ width: 1 }) // 设置文本边框宽度为1\n}\n\n@Entry\n@Component\nstruct TextExample8 {\n  @State message1: string = "They can be classified as built-in components–those directly provided by the ArkUI framework and custom components – those defined by developers" +\n    "The built-in components include buttons radio buttonsprogress indicators and text You can set the rendering effectof thesecomponents in method chaining mode," +\n    "page components are divided into independent UI units to implementindependent creation development and reuse of different units on pages making pages more engineering-oriented.";\n  @State lineBreakStrategyIndex: number = 0; // 当前换行策略索引\n  @State lineBreakStrategy: LineBreakStrategy[] = [LineBreakStrategy.GREEDY, LineBreakStrategy.HIGH_QUALITY, LineBreakStrategy.BALANCED] // 换行策略数组\n  @State lineBreakStrategyStr: string[] = ['GREEDY', 'HIGH_QUALITY', 'BALANCED'] // 换行策略名称数组\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      Text('lineSpacing').fontSize(9).fontColor(0xCCCCCC) // 显示标题“lineSpacing”\n      Text('This is a context with no lineSpacing set.')\n        .lineSpacingValue(undefined) // 使用扩展方法设置行间距为undefined，即不设置行间距\n      Text( 'This is a context with lineSpacing set to 20_px.')\n        .lineSpacingValue(LengthMetrics.px(20)) // 使用扩展方法设置行间距为20px\n      Text('This is the context with lineSpacing set to 20_vp.')\n        .lineSpacingValue(LengthMetrics.vp(20)) // 使用扩展方法设置行间距为20vp\n      Text('This is the context with lineSpacing set to 20_fp.')\n        .lineSpacingValue(LengthMetrics.fp(20)) // 使用扩展方法设置行间距为20fp\n      Text('This is the context with lineSpacing set to 20_lpx.')\n        .lineSpacingValue(LengthMetrics.lpx(20)) // 使用扩展方法设置行间距为20lpx\n      Text('This is the context with lineSpacing set to 100%.')\n        .lineSpacingValue(LengthMetrics.percent(1)) // 使用扩展方法设置行间距为100%\n      Text('fontFeature').fontSize(9).fontColor(0xCCCCCC) // 显示标题“fontFeature”\n      Text('This is ss01 on : 0123456789')\n        .fontSize(20) // 设置字体大小为20\n        .fontFeature("\"ss01\" on") // 启用字体特性ss01\n      Text('This is ss01 off: 0123456789')\n        .fontSize(20) // 设置字体大小为20\n        .fontFeature("\"ss01\" off") // 禁用字体特性ss01\n      Text('lineBreakStrategy').fontSize(9).fontColor(0xCCCCCC) // 显示标题“lineBreakStrategy”\n      Text(this.message1)\n        .fontSize(12) // 设置字体大小为12\n        .border({ width: 1 }) // 设置文本边框宽度为1\n        .padding(10) // 设置内边距为10\n        .width('100%') // 设置文本宽度为100%\n        .lineBreakStrategy(this.lineBreakStrategy[this.lineBreakStrategyIndex]) // 设置换行策略\n      Row() {\n        Button('当前lineBreakStrategy模式：' + this.lineBreakStrategyStr[this.lineBreakStrategyIndex]).onClick(() => {\n          this.lineBreakStrategyIndex++ // 切换到下一个换行策略\n          if(this.lineBreakStrategyIndex > (this.lineBreakStrategyStr.length - 1)) {\n            this.lineBreakStrategyIndex = 0 // 如果超出数组范围，重置为0\n          }\n        })\n      }\n    }.height(600).width(350).padding({ left: 35, right: 35, top: 35 }) // 设置Flex容器的高度、宽度和内边距\n  }\n}


/*\n实现一个文本展示组件，展示不同文本对齐方式、文本溢出处理、最大行数限制以及行高的效果。\n*/\n\n// 自定义样式函数，用于设置文本的对齐方式、字体大小、边框、内边距和宽度\n@Extend(Text)\nfunction style(TextAlign: TextAlign) {\n  .textAlign(TextAlign) // 设置文本对齐方式\n  .fontSize(12) // 设置字体大小为12\n  .border({ width: 1 }) // 设置文本边框宽度为1\n  .padding(10) // 设置文本内边距为10\n  .width('100%') // 设置文本宽度为100%\n}\n\n// 入口组件，定义了一个文本展示示例\n@Entry\n@Component\nstruct TextExample1 {\n  build() {\n    // 创建一个Flex布局，方向为列布局，子项左对齐，子项之间有间隔\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n\n      // 显示文本“textAlign”，字体大小为9，颜色为灰色\n      Text('textAlign').fontSize(9).fontColor(0xCCCCCC)\n\n      // 显示文本“TextAlign set to Center.”，并应用自定义样式，设置文本对齐方式为居中\n      Text('TextAlign set to Center.')\n        .style(TextAlign.Center)\n\n      // 显示文本“TextAlign set to Start.”，并应用自定义样式，设置文本对齐方式为左对齐\n      Text('TextAlign set to Start.')\n        .style(TextAlign.Start)\n\n      // 显示文本“TextAlign set to End.”，并应用自定义样式，设置文本对齐方式为右对齐\n      Text('TextAlign set to End.')\n        .style(TextAlign.End)\n\n      // 显示文本“This is the text content with textAlign set to Center.”，并应用自定义样式，设置文本对齐方式为居中\n      Text('This is the text content with textAlign set to Center.')\n        .style(TextAlign.Center)\n\n      // 显示文本“This is the text content with textAlign set to Start.”，并应用自定义样式，设置文本对齐方式为左对齐\n      Text('This is the text content with textAlign set to Start.')\n        .style(TextAlign.Start)\n\n      // 显示文本“This is the text content with textAlign set to End.”，并应用自定义样式，设置文本对齐方式为右对齐\n      Text('This is the text content with textAlign set to End.')\n        .style(TextAlign.End)\n\n      // 显示文本“TextOverflow+maxLines”，字体大小为9，颜色为灰色\n      Text('TextOverflow+maxLines').fontSize(9).fontColor(0xCCCCCC)\n\n      // 显示长文本，设置文本溢出处理为裁剪，最大行数为1，并应用自定义样式，设置文本对齐方式为左对齐\n      Text('This is the setting of textOverflow to Clip text content This is the setting of textOverflow to None text content. This is the setting of textOverflow to Clip text content This is the setting of textOverflow to None text content.')\n        .textOverflow({ overflow: TextOverflow.Clip }) // 设置文本溢出处理为裁剪\n        .maxLines(1) // 设置最大行数为1\n        .style(TextAlign.Start) // 应用自定义样式，设置文本对齐方式为左对齐\n\n      // 显示长文本，设置文本溢出处理为省略号，最大行数为1，并应用自定义样式，设置文本对齐方式为左对齐\n      Text('This is set textOverflow to Ellipsis text content This is set textOverflow to Ellipsis text content.')\n        .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出处理为省略号\n        .maxLines(1) // 设置最大行数为1\n        .style(TextAlign.Start) // 应用自定义样式，设置文本对齐方式为左对齐\n\n      // 显示文本“lineHeight”，字体大小为9，颜色为灰色\n      Text('lineHeight').fontSize(9).fontColor(0xCCCCCC)\n\n      // 显示文本“This is the text with the line height set. This is the text with the line height set.”，并应用自定义样式，设置文本对齐方式为左对齐\n      Text('This is the text with the line height set. This is the text with the line height set.')\n        .style(TextAlign.Start)\n\n      // 显示文本“This is the text with the line height set. This is the text with the line height set.”，并应用自定义样式，设置文本对齐方式为左对齐，行高为20\n      Text('This is the text with the line height set. This is the text with the line height set.')\n        .style(TextAlign.Start)\n        .lineHeight(20) // 设置行高为20\n\n    }.height(600).width(340).padding({ left: 35, right: 35, top: 35 }) // 设置Flex布局的高度、宽度和内边距\n  }\n}


/*\n实现一个包含文本和图像的组件，支持自定义选择菜单和文本选中区域变化的回调。组件包含三个自定义菜单，分别在长按图像、右击文本和选择混合内容时弹出。每个菜单项点击后会关闭菜单。\n*/\n\n@Entry\n@Component\nstruct TextExample7 {\n  // 创建一个TextController实例，用于控制文本组件的行为\n  controller: TextController = new TextController();\n  // 创建一个TextOptions实例，用于配置文本组件的控制器\n  options: TextOptions = { controller: this.controller };\n\n  build() {\n    Column() {\n      Column() {\n        // 创建一个Text组件，包含文本和图像，并配置控制器\n        Text(undefined, this.options) {\n          Span('Hello World') // 添加文本内容\n          ImageSpan($r('app.media.icon')) // 添加图像内容\n            .width('100px') // 设置图像宽度\n            .height('100px') // 设置图像高度\n            .objectFit(ImageFit.Fill) // 设置图像填充方式\n            .verticalAlign(ImageSpanAlignment.CENTER) // 设置图像垂直对齐方式\n        }\n        .copyOption(CopyOptions.InApp) // 设置文本复制选项为仅在应用内复制\n        .bindSelectionMenu(TextSpanType.IMAGE, this.LongPressImageCustomMenu, TextResponseType.LONG_PRESS, {\n          // 绑定长按图像时的自定义菜单\n          onDisappear: () => {\n            console.info(`自定义选择菜单关闭时回调`); // 菜单关闭时的回调\n          },\n          onAppear: () => {\n            console.info(`自定义选择菜单弹出时回调`); // 菜单弹出时的回调\n          }\n        })\n        .bindSelectionMenu(TextSpanType.TEXT, this.RightClickTextCustomMenu, TextResponseType.RIGHT_CLICK)\n        // 绑定右击文本时的自定义菜单\n        .bindSelectionMenu(TextSpanType.MIXED, this.SelectMixCustomMenu, TextResponseType.SELECT)\n        // 绑定选择混合内容时的自定义菜单\n        .onTextSelectionChange((selectionStart: number, selectionEnd: number) => {\n          // 监听文本选中区域变化\n          console.info(`文本选中区域变化回调, selectionStart: ${selectionStart}, selectionEnd: ${selectionEnd}`);\n        })\n        .borderWidth(1) // 设置边框宽度\n        .borderColor(Color.Red) // 设置边框颜色\n        .width(200) // 设置组件宽度\n        .height(100) // 设置组件高度\n      }\n      .width('100%') // 设置内部列的宽度为100%\n      .backgroundColor(Color.White) // 设置背景颜色为白色\n      .alignItems(HorizontalAlign.Start) // 设置内部列的水平对齐方式为左对齐\n      .padding(25) // 设置内部列的填充\n    }\n    .height('100%') // 设置外部列的高度为100%\n  }\n\n  @Builder\n  RightClickTextCustomMenu() {\n    // 定义右击文本时的自定义菜单\n    Column() {\n      Menu() {\n        MenuItemGroup() {\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: "Right Click Menu 1", labelInfo: "" })\n            .onClick((event) => {\n              this.controller.closeSelectionMenu(); // 点击菜单项后关闭菜单\n            })\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: "Right Click Menu 2", labelInfo: "" })\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: "Right Click Menu 3", labelInfo: "" })\n        }\n      }\n      .MenuStyles() // 应用菜单样式\n    }\n  }\n\n  @Builder\n  LongPressImageCustomMenu() {\n    // 定义长按图像时的自定义菜单\n    Column() {\n      Menu() {\n        MenuItemGroup() {\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: "Long Press Image Menu 1", labelInfo: "" })\n            .onClick((event) => {\n              this.controller.closeSelectionMenu(); // 点击菜单项后关闭菜单\n            })\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: "Long Press Image Menu 2", labelInfo: "" })\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: "Long Press Image Menu 3", labelInfo: "" })\n        }\n      }\n      .MenuStyles() // 应用菜单样式\n    }\n  }\n\n  @Builder\n  SelectMixCustomMenu() {\n    // 定义选择混合内容时的自定义菜单\n    Column() {\n      Menu() {\n        MenuItemGroup() {\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: "Select Mixed Menu 1", labelInfo: "" })\n            .onClick((event) => {\n              this.controller.closeSelectionMenu(); // 点击菜单项后关闭菜单\n            })\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: "Select Mixed Menu 2", labelInfo: "" })\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: "Select Mixed Menu 3", labelInfo: "" })\n        }\n      }\n      .MenuStyles() // 应用菜单样式\n    }\n  }\n}\n\n@Extend(Menu)\nfunction MenuStyles() {\n  // 定义菜单的样式\n  .radius($r('sys.float.ohos_id_corner_radius_card')) // 设置菜单的圆角半径\n  .clip(true) // 设置菜单的裁剪方式\n  .backgroundColor('#F0F0F0') // 设置菜单的背景颜色\n}