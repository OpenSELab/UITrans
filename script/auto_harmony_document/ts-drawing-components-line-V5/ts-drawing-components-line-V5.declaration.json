{
    "description": "直线绘制组件。",
    "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
    "interfaces": [
        {
            "description": "Line(value?: {width?: string | number, height?: string | number})",
            "params": {
                "value": {
                    "type": {
                        "width": [
                            "string",
                            "number"
                        ],
                        "height": [
                            "string",
                            "number"
                        ]
                    },
                    "description": "组件的宽度和高度。"
                }
            }
        }
    ],
    "attributes": {
        "startPoint": {
            "description": "设置直线起点坐标点（相对坐标），异常值按照默认值处理。",
            "params": {
                "value": {
                    "type": "Array<Length>",
                    "required": true,
                    "description": "直线起点坐标点（相对坐标），单位vp。",
                    "default": [
                        0,
                        0
                    ]
                }
            }
        },
        "endPoint": {
            "description": "设置直线终点坐标点（相对坐标），异常值按照默认值处理。",
            "params": {
                "value": {
                    "type": "Array<Length>",
                    "required": true,
                    "description": "直线终点坐标点（相对坐标），单位vp。",
                    "default": [
                        0,
                        0
                    ]
                }
            }
        },
        "fill": {
            "description": "设置填充区域颜色。Line组件无法形成闭合区域，该属性设置无效。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "填充区域颜色。"
                }
            }
        },
        "fillOpacity": {
            "description": "设置填充区域透明度。Line组件无法形成闭合区域，该属性设置无效。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "string",
                        "Resource"
                    ],
                    "required": true,
                    "description": "填充区域透明度。",
                    "default": 1
                }
            }
        },
        "stroke": {
            "description": "设置边框颜色，不设置时，默认没有边框。异常值不会绘制边框线条。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "边框颜色。"
                }
            }
        },
        "strokeDashArray": {
            "description": "设置边框间隙。线段相交时可能会出现重叠现象。异常值按照默认值处理。",
            "params": {
                "value": {
                    "type": "Array<Length>",
                    "required": true,
                    "description": "边框间隙。",
                    "default": []
                }
            }
        },
        "strokeDashOffset": {
            "description": "设置边框绘制起点的偏移量。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "string"
                    ],
                    "required": true,
                    "description": "边框绘制起点的偏移量。",
                    "default": 0
                }
            }
        },
        "strokeLineCap": {
            "description": "设置边框端点绘制样式。",
            "params": {
                "value": {
                    "type": "LineCapStyle",
                    "required": true,
                    "description": "边框端点绘制样式。",
                    "default": "LineCapStyle.Butt"
                }
            }
        },
        "strokeLineJoin": {
            "description": "设置边框拐角绘制样式。Line组件无法形成拐角，该属性设置无效。",
            "params": {
                "value": {
                    "type": "LineJoinStyle",
                    "required": true,
                    "description": "边框拐角绘制样式。",
                    "default": "LineJoinStyle.Miter"
                }
            }
        },
        "strokeMiterLimit": {
            "description": "设置锐角绘制成斜角的极限值。Line组件无法设置锐角图形，该属性设置无效。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "string"
                    ],
                    "required": true,
                    "description": "锐角绘制成斜角的极限值。",
                    "default": 4
                }
            }
        },
        "strokeOpacity": {
            "description": "设置边框透明度。该属性的取值范围是[0.0, 1.0]，若给定值小于0.0，则取值为0.0；若给定值大于1.0，则取值为1.0，其余异常值按1.0处理。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "string",
                        "Resource"
                    ],
                    "required": true,
                    "description": "边框透明度。",
                    "default": 1
                }
            }
        },
        "strokeWidth": {
            "description": "设置边框宽度。该属性若为string类型, 暂不支持百分比，百分比按照1px处理。",
            "params": {
                "value": {
                    "type": "Length",
                    "required": true,
                    "description": "边框宽度。",
                    "default": 1
                }
            }
        },
        "antiAlias": {
            "description": "设置是否开启抗锯齿效果。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "是否开启抗锯齿效果。",
                    "default": true
                }
            }
        }
    },
    "events": {},
    "rules": null,
    "examples": [
        {
            "description": "该组件通过 Row 布局实现了一个展示三种不同线型样式的界面。布局宽度占据整个屏幕，高度设为 200vp，内边距为左右 10vp。组件的垂直方向上被分为三个部分，每个部分包含一个 Line 组件。每个 Line 组件以水平布局方式排列，Line 组件之间的间距均匀分布，且对齐方式为居中对齐。\nLine 组件的样式包括宽度、高度、起始点、结束点、描边颜色、描边宽度、描边线帽样式等属性，支持不同的样式展示。每个 Line 组件的功能是绘制一条从起始点到结束点的直线，并通过不同的描边线帽样式（如 Butt、Round、Square）展示不同的线型效果。\n整个布局通过 Row 布局保证 Line 组件在水平方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct LineExample1 {\n  build() {\n    Row({ space: 10 }) { // 创建一个水平布局的 Row 组件，组件之间的间距为 10vp\n\n      Line()\n        .width(100) // 设置 Line 组件的宽度为 100vp\n        .height(200) // 设置 Line 组件的高度为 200vp\n        .startPoint([50, 50]) // 设置 Line 组件的起始点为 (50, 50)\n        .endPoint([50, 200]) // 设置 Line 组件的结束点为 (50, 200)\n        .stroke(Color.Black) // 设置 Line 组件的描边颜色为黑色\n        .strokeWidth(20) // 设置 Line 组件的描边宽度为 20vp\n        .strokeLineCap(LineCapStyle.Butt) // 设置 Line 组件的描边线帽样式为 Butt\n        .backgroundColor('#F5F5F5') // 设置 Line 组件的背景颜色为 #F5F5F5\n        .margin(10) // 设置 Line 组件的外边距为 10vp\n\n      Line()\n        .width(100) // 设置 Line 组件的宽度为 100vp\n        .height(200) // 设置 Line 组件的高度为 200vp\n        .startPoint([50, 50]) // 设置 Line 组件的起始点为 (50, 50)\n        .endPoint([50, 200]) // 设置 Line 组件的结束点为 (50, 200)\n        .stroke(Color.Black) // 设置 Line 组件的描边颜色为黑色\n        .strokeWidth(20) // 设置 Line 组件的描边宽度为 20vp\n        .strokeLineCap(LineCapStyle.Round) // 设置 Line 组件的描边线帽样式为 Round\n        .backgroundColor('#F5F5F5') // 设置 Line 组件的背景颜色为 #F5F5F5\n\n      Line()\n        .width(100) // 设置 Line 组件的宽度为 100vp\n        .height(200) // 设置 Line 组件的高度为 200vp\n        .startPoint([50, 50]) // 设置 Line 组件的起始点为 (50, 50)\n        .endPoint([50, 200]) // 设置 Line 组件的结束点为 (50, 200)\n        .stroke(Color.Black) // 设置 Line 组件的描边颜色为黑色\n        .strokeWidth(20) // 设置 Line 组件的描边宽度为 20vp\n        .strokeLineCap(LineCapStyle.Square) // 设置 Line 组件的描边线帽样式为 Square\n        .backgroundColor('#F5F5F5') // 设置 Line 组件的背景颜色为 #F5F5F5\n    }\n  }\n}"
        },
        {
            "description": "该组件通过 Column 布局实现了一个展示多种类型线条的界面。布局宽度占据整个屏幕，高度根据内容自适应，内边距为 10vp。组件的垂直方向上被分为多个部分，每个部分包含一个 Line 组件。每个 Line 组件以水平布局方式排列，线条之间的间距均匀分布，且对齐方式为居中对齐。\n线条的样式包括宽度、高度、起点、终点、颜色、透明度、线宽、虚线样式等属性，支持不同的样式展示。线条组之间通过 Column 组件进行分隔。线条的功能包括展示不同样式的线条，用户可以通过界面直观地看到不同线条的效果。\n整个布局通过 Column 布局保证线条在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct LineExample {\n  build() {\n    Column({ space: 10 }) { // 使用 Column 布局，设置组件之间的间距为 10vp\n\n      Line()\n        .width(200) // 设置线条的宽度为 200vp\n        .height(150) // 设置线条的高度为 150vp\n        .startPoint([0, 0]) // 设置线条的起点为 (0, 0)\n        .endPoint([50, 100]) // 设置线条的终点为 (50, 100)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .backgroundColor('#F5F5F5') // 设置线条的背景颜色为 #F5F5F5\n\n      Line()\n        .width(200) // 设置线条的宽度为 200vp\n        .height(150) // 设置线条的高度为 150vp\n        .startPoint([50, 50]) // 设置线条的起点为 (50, 50)\n        .endPoint([150, 150]) // 设置线条的终点为 (150, 150)\n        .strokeWidth(5) // 设置线条的宽度为 5vp\n        .stroke(Color.Orange) // 设置线条的颜色为橙色\n        .strokeOpacity(0.5) // 设置线条的透明度为 0.5\n        .backgroundColor('#F5F5F5') // 设置线条的背景颜色为 #F5F5F5\n\n      Line()\n        .width(200) // 设置线条的宽度为 200vp\n        .height(150) // 设置线条的高度为 150vp\n        .startPoint([0, 0]) // 设置线条的起点为 (0, 0)\n        .endPoint([100, 100]) // 设置线条的终点为 (100, 100)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(3) // 设置线条的宽度为 3vp\n        .strokeDashArray([10, 3]) // 设置线条的虚线样式为 [10, 3]\n        .strokeDashOffset(5) // 设置线条的虚线偏移量为 5\n        .backgroundColor('#F5F5F5') // 设置线条的背景颜色为 #F5F5F5\n\n      Line()\n        .width(50) // 设置线条的宽度为 50vp\n        .height(50) // 设置线条的高度为 50vp\n        .startPoint([0, 0]) // 设置线条的起点为 (0, 0)\n        .endPoint([100, 100]) // 设置线条的终点为 (100, 100)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(3) // 设置线条的宽度为 3vp\n        .strokeDashArray([10, 3]) // 设置线条的虚线样式为 [10, 3]\n        .backgroundColor('#F5F5F5') // 设置线条的背景颜色为 #F5F5F5\n    }\n  }\n}"
        },
        {
            "description": "该组件通过 Column 布局实现了一个展示多种类型线条（如实线、虚线）及其样式效果的界面。布局宽度为 300vp，高度为 30vp，内边距为 0。组件的垂直方向上被分为多个部分，每个部分包含一个 Line 组件。每个 Line 组件以水平布局方式排列，线条之间的间距均匀分布，且对齐方式为居中对齐。\n线条的样式包括宽度、高度、起点、终点、颜色、粗细和虚线样式等属性，支持不同的样式展示。线条组之间通过 Column 组件进行分隔。线条的功能包括展示不同样式的线条，用户可以通过观察线条的样式来理解其设计意图。\n整个布局通过 Column 布局保证线条在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct LineExample {\n  build() {\n    Column() {\n      // 第一条实线\n      Line()\n        .width(300) // 设置线条的宽度为 300vp\n        .height(30) // 设置线条的高度为 30vp\n        .startPoint([50, 30]) // 设置线条的起点坐标为 (50, 30)\n        .endPoint([300, 30]) // 设置线条的终点坐标为 (300, 30)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(10) // 设置线条的粗细为 10vp\n\n      // 第二条虚线，虚线样式为 [50]\n      Line()\n        .width(300) // 设置线条的宽度为 300vp\n        .height(30) // 设置线条的高度为 30vp\n        .startPoint([50, 20]) // 设置线条的起点坐标为 (50, 20)\n        .endPoint([300, 20]) // 设置线条的终点坐标为 (300, 20)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(10) // 设置线条的粗细为 10vp\n        .strokeDashArray([50]) // 设置线条的虚线样式为 [50]，即 50vp 的实线，50vp 的空白\n\n      // 第三条虚线，虚线样式为 [50, 10]\n      Line()\n        .width(300) // 设置线条的宽度为 300vp\n        .height(30) // 设置线条的高度为 30vp\n        .startPoint([50, 20]) // 设置线条的起点坐标为 (50, 20)\n        .endPoint([300, 20]) // 设置线条的终点坐标为 (300, 20)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(10) // 设置线条的粗细为 10vp\n        .strokeDashArray([50, 10]) // 设置线条的虚线样式为 [50, 10]，即 50vp 的实线，10vp 的空白\n\n      // 第四条虚线，虚线样式为 [50, 10, 20]\n      Line()\n        .width(300) // 设置线条的宽度为 300vp\n        .height(30) // 设置线条的高度为 30vp\n        .startPoint([50, 20]) // 设置线条的起点坐标为 (50, 20)\n        .endPoint([300, 20]) // 设置线条的终点坐标为 (300, 20)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(10) // 设置线条的粗细为 10vp\n        .strokeDashArray([50, 10, 20]) // 设置线条的虚线样式为 [50, 10, 20]，即 50vp 的实线，10vp 的空白，20vp 的实线\n\n      // 第五条虚线，虚线样式为 [50, 10, 20, 30]\n      Line()\n        .width(300) // 设置线条的宽度为 300vp\n        .height(30) // 设置线条的高度为 30vp\n        .startPoint([50, 20]) // 设置线条的起点坐标为 (50, 20)\n        .endPoint([300, 20]) // 设置线条的终点坐标为 (300, 20)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(10) // 设置线条的粗细为 10vp\n        .strokeDashArray([50, 10, 20, 30]) // 设置线条的虚线样式为 [50, 10, 20, 30]，即 50vp 的实线，10vp 的空白，20vp 的实线，30vp 的空白\n    }\n  }\n}"
        }
    ],
    "is_common_attrs": true
}