{
    "description": "文本下载按钮，可显示具体下载进度。",
    "interfaces": [
        {
            "description": "ProgressButton({progress: number, content: string, progressButtonWidth?: Length, clickCallback: () => void, enable: boolean})",
            "params": {
                "progress": {
                    "type": "number",
                    "required": true,
                    "description": "下载按钮的当前进度值。"
                },
                "content": {
                    "type": "string",
                    "required": true,
                    "description": "下载按钮的文本。"
                },
                "progressButtonWidth": {
                    "type": [
                        "Length"
                    ],
                    "required": false,
                    "description": "下载按钮的宽度。",
                    "default": "44"
                },
                "clickCallback": {
                    "type": "() => void",
                    "required": true,
                    "description": "下载按钮的点击回调。"
                },
                "enable": {
                    "type": "boolean",
                    "required": true,
                    "description": "下载按钮是否可以点击。enable为true时，表示可以点击。enable为false时，表示不可点击。"
                }
            }
        }
    ],
    "attributes": {},
    "events": {},
    "is_common_attrs": true,
    "examples": [
        {
            "description": "该组件通过 Column 布局实现了一个展示下载按钮及其进度条的界面。布局宽度占据整个屏幕，高度自适应内容，内边距为上下 20vp。组件的垂直方向上被分为两个部分：一个文本标签和一个按钮。文本标签显示“下载按钮”，按钮用于触发下载操作。按钮的样式包括背景颜色、边框圆角、宽度和高度等属性，支持不同的样式展示。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发下载操作，按钮也可以在启用或禁用状态下进行展示。\n\n进度条按钮通过 ProgressButton 组件实现，显示下载进度。进度条按钮的样式包括宽度、高度、背景颜色等属性，支持不同的样式展示。进度条按钮的功能包括点击事件和状态效果，用户可以通过点击进度条按钮暂停或继续下载操作。\n\n整个布局通过 Column 布局保证按钮和进度条在垂直方向上有序排列，确保界面整洁美观。",
            "code": "import { ProgressButton } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct Index {\n  @State halfProgress: number = 0 // 进度条的进度值，初始值为0\n  @State smallProgress: number = 0 // 另一个进度条的进度值，初始值为0\n  @State bigProgress: number = 0 // 另一个进度条的进度值，初始值为0\n  @State textState1: string = '' // 进度条按钮的文本内容，初始值为空字符串\n  @State isRunning1: boolean = false // 进度条是否在运行，初始值为false\n  @State enableState1: boolean = true // 进度条按钮是否启用，初始值为true\n  @State progressState: Visibility = Visibility.None // 进度条按钮的可见性状态，初始值为不可见\n  @State ButtonState: Visibility = Visibility.Visible // 按钮的可见性状态，初始值为可见\n  @State buttonText: string = '下载' // 按钮的文本内容，初始值为“下载”\n  @State buttonEnable: boolean = true // 按钮是否启用，初始值为true\n  @State isEnd: boolean = false // 下载是否结束，初始值为false\n\n  build() {\n    Column({space: 20}) { // 创建一个垂直布局，子组件之间的间距为20vp\n      Text('下载按钮') // 创建一个文本标签，显示“下载按钮”\n      Button(this.buttonText) // 创建一个按钮，按钮文本为buttonText的值\n        .fontSize($r('sys.float.ohos_id_text_size_button3')) // 设置按钮文本的字体大小\n        .fontWeight(FontWeight.Medium) // 设置按钮文本的字体粗细\n        .fontColor($r('sys.color.ohos_id_color_emphasize')) // 设置按钮文本的颜色\n        .padding({left: 8, right: 8}) // 设置按钮的内边距\n        .opacity(this.buttonEnable? 1: 0.4) // 设置按钮的透明度，根据buttonEnable的值决定\n        .enabled(this.buttonEnable) // 设置按钮是否启用，根据buttonEnable的值决定\n        .height(28) // 设置按钮的高度\n        .borderRadius(14) // 设置按钮的边框圆角\n        .width(60) // 设置按钮的宽度\n        .backgroundColor($r(\"sys.color.ohos_id_color_button_normal\")) // 设置按钮的背景颜色\n        .onClick(() => { // 设置按钮的点击事件\n          if(!this.isEnd) { // 如果下载未结束\n            this.buttonText = '等待中' // 设置按钮文本为“等待中”\n            let timer1 = setInterval(() => { // 创建一个定时器\n              this.progressState = Visibility.Visible // 设置进度条按钮的可见性为可见\n              this.ButtonState = Visibility.None // 设置按钮的可见性为不可见\n              clearInterval(timer1) // 清除定时器\n              this.isRunning1 = true // 设置进度条为运行状态\n              let timer = setInterval(() => { // 创建一个定时器\n                if (this.isRunning1) { // 如果进度条在运行\n                  if (this.halfProgress === 100) { // 如果进度条的进度值为100\n                    this.isEnd = true // 设置下载结束\n                  } else { // 如果进度条的进度值不为100\n                    this.halfProgress++ // 进度条的进度值加1\n                    if (this.halfProgress === 100) { // 如果进度条的进度值为100\n                      this.textState1 = '安装中' // 设置进度条按钮的文本为“安装中”\n                      this.enableState1 = false // 设置进度条按钮为不可用\n                      this.ButtonState = Visibility.Visible // 设置按钮的可见性为可见\n                      this.progressState = Visibility.None // 设置进度条按钮的可见性为不可见\n                      this.buttonEnable = false // 设置按钮为不可用\n                      this.buttonText = '安装中' // 设置按钮的文本为“安装中”\n                      let timer2 = setInterval(() => { // 创建一个定时器\n                        this.buttonText = '打开' // 设置按钮的文本为“打开”\n                        this.buttonEnable = true // 设置按钮为可用\n                        this.isEnd = true // 设置下载结束\n                        clearInterval(timer2) // 清除定时器\n                      }, 2000) // 定时器的时间间隔为2000毫秒\n                    }\n                    console.info('x progress++ = ' + this.halfProgress) // 输出进度条的进度值\n                  }\n                } else { // 如果进度条不在运行\n                  console.info('x isRunning = ' + false) // 输出进度条不在运行\n                  clearInterval(timer) // 清除定时器\n                }\n              }, 100) // 定时器的时间间隔为100毫秒\n            }, 2000) // 定时器的时间间隔为2000毫秒\n          }\n        }).visibility(this.ButtonState) // 设置按钮的可见性\n\n      ProgressButton({ // 创建一个进度条按钮\n        progress: this.halfProgress, // 进度条的进度值\n        progressButtonWidth: \"60\", // 进度条按钮的宽度\n        content: this.textState1, // 进度条按钮的文本内容\n        enable: this.enableState1, // 进度条按钮是否启用\n        clickCallback: () => { // 设置进度条按钮的点击事件\n          if (this.isRunning1 && this.halfProgress < 100) { // 如果进度条在运行且进度值小于100\n            this.textState1 = '继续' // 设置进度条按钮的文本为“继续”\n          }\n          this.isRunning1 = !this.isRunning1 // 切换进度条的运行状态\n          let timer = setInterval(() => { // 创建一个定时器\n            if (this.isRunning1) { // 如果进度条在运行\n              if (this.halfProgress === 100) { // 如果进度条的进度值为100\n              } else { // 如果进度条的进度值不为100\n                this.halfProgress++ // 进度条的进度值加1\n                if (this.halfProgress === 100) { // 如果进度条的进度值为100\n                  this.textState1 = '安装中' // 设置进度条按钮的文本为“安装中”\n                  this.enableState1 = false // 设置进度条按钮为不可用\n                  this.ButtonState = Visibility.Visible // 设置按钮的可见性为可见\n                  this.progressState = Visibility.None // 设置进度条按钮的可见性为不可见\n                  this.buttonEnable = false // 设置按钮为不可用\n                  this.buttonText = '安装中' // 设置按钮的文本为“安装中”\n                  let timer2 = setInterval(() => { // 创建一个定时器\n                    this.buttonText = '打开' // 设置按钮的文本为“打开”\n                    this.buttonEnable = true // 设置按钮为可用\n                    this.isEnd = true // 设置下载结束\n                    clearInterval(timer2) // 清除定时器\n                  }, 2000) // 定时器的时间间隔为2000毫秒\n                }\n                console.info('x progress++ = ' + this.halfProgress) // 输出进度条的进度值\n              }\n            } else { // 如果进度条不在运行\n              console.info('x isRunning = ' + false) // 输出进度条不在运行\n              clearInterval(timer) // 清除定时器\n            }\n          }, 100) // 定时器的时间间隔为100毫秒\n        }\n      }).visibility(this.progressState) // 设置进度条按钮的可见性\n    }.alignItems(HorizontalAlign.Center).width('100%') // 设置布局的对齐方式为居中，宽度为100%\n  }\n}"
        }
    ]
}