/*\n实现一个带有进度条的下载按钮组件，支持下载、暂停、继续和安装功能。按钮在不同状态下显示不同的文本和进度条，进度条在下载过程中显示进度，下载完成后显示安装状态。\n*/\n\nimport { ProgressButton } from '@kit.ArkUI' // 导入ProgressButton组件\n\n@Entry\n@Component\nstruct Index {\n  @State halfProgress: number = 0 // 进度条的进度值，初始为0\n  @State smallProgress: number = 0 // 另一个进度条的进度值，初始为0（未使用）\n  @State bigProgress: number = 0 // 另一个进度条的进度值，初始为0（未使用）\n  @State textState1: string = '' // 进度条按钮的文本状态，初始为空\n  @State isRunning1: boolean = false // 进度条是否在运行，初始为false\n  @State enableState1: boolean = true // 进度条按钮是否启用，初始为true\n  @State progressState: Visibility = Visibility.None // 进度条的可见性状态，初始为不可见\n  @State ButtonState: Visibility = Visibility.Visible // 按钮的可见性状态，初始为可见\n  @State buttonText: string = '下载' // 按钮的文本，初始为“下载”\n  @State buttonEnable: boolean = true // 按钮是否启用，初始为true\n  @State isEnd: boolean = false // 下载是否完成，初始为false\n\n  build() {\n    Column({space: 20}) {\n      Text('下载按钮') // 显示“下载按钮”文本\n      Button(this.buttonText) // 创建一个按钮，文本为buttonText\n        .fontSize($r('sys.float.ohos_id_text_size_button3')) // 设置按钮文本的字体大小\n        .fontWeight(FontWeight.Medium) // 设置按钮文本的字体粗细\n        .fontColor($r('sys.color.ohos_id_color_emphasize')) // 设置按钮文本的颜色\n        .padding({left: 8, right: 8}) // 设置按钮的左右内边距\n        .opacity(this.buttonEnable? 1: 0.4) // 根据buttonEnable设置按钮的透明度\n        .enabled(this.buttonEnable) // 根据buttonEnable设置按钮是否启用\n        .height(28) // 设置按钮的高度\n        .borderRadius(14) // 设置按钮的圆角半径\n        .width(60) // 设置按钮的宽度\n        .backgroundColor($r("sys.color.ohos_id_color_button_normal")) // 设置按钮的背景颜色\n        .onClick(() => { // 按钮点击事件\n          if(!this.isEnd) { // 如果下载未完成\n            this.buttonText = '等待中' // 设置按钮文本为“等待中”\n            let timer1 = setInterval(() => { // 设置一个定时器，延迟2秒后开始下载\n              this.progressState = Visibility.Visible // 显示进度条\n              this.ButtonState = Visibility.None // 隐藏按钮\n              clearInterval(timer1) // 清除定时器\n              this.isRunning1 = true // 设置进度条为运行状态\n              let timer = setInterval(() => { // 设置一个定时器，每100毫秒更新一次进度\n                if (this.isRunning1) { // 如果进度条在运行\n                  if (this.halfProgress === 100) { // 如果进度达到100%\n                    this.isEnd = true // 设置下载完成\n                  } else {\n                    this.halfProgress++ // 进度增加1%\n                    if (this.halfProgress === 100) { // 如果进度达到100%\n                      this.textState1 = '安装中' // 设置进度条文本为“安装中”\n                      this.enableState1 = false // 禁用进度条按钮\n                      this.ButtonState = Visibility.Visible // 显示按钮\n                      this.progressState = Visibility.None // 隐藏进度条\n                      this.buttonEnable = false // 禁用按钮\n                      this.buttonText = '安装中' // 设置按钮文本为“安装中”\n                      let timer2 = setInterval(() => { // 设置一个定时器，2秒后显示“打开”\n                        this.buttonText = '打开' // 设置按钮文本为“打开”\n                        this.buttonEnable = true // 启用按钮\n                        this.isEnd = true // 设置下载完成\n                        clearInterval(timer2) // 清除定时器\n                      }, 2000)\n                    }\n                    console.info('x progress++ = ' + this.halfProgress) // 打印进度\n                  }\n                } else {\n                  console.info('x isRunning = ' + false) // 打印进度条未运行\n                  clearInterval(timer) // 清除定时器\n                }\n              }, 100)\n            }, 2000)\n          }\n        }).visibility(this.ButtonState) // 根据ButtonState设置按钮的可见性\n\n      ProgressButton({ // 创建一个进度条按钮\n        progress: this.halfProgress, // 进度条的进度值\n        progressButtonWidth: "60", // 进度条按钮的宽度\n        content: this.textState1, // 进度条按钮的文本\n        enable: this.enableState1, // 进度条按钮是否启用\n        clickCallback: () => { // 进度条按钮点击事件\n          if (this.isRunning1 && this.halfProgress < 100) { // 如果进度条在运行且进度未达到100%\n            this.textState1 = '继续' // 设置进度条文本为“继续”\n          }\n          this.isRunning1 = !this.isRunning1 // 切换进度条的运行状态\n          let timer = setInterval(() => { // 设置一个定时器，每100毫秒更新一次进度\n            if (this.isRunning1) { // 如果进度条在运行\n              if (this.halfProgress === 100) { // 如果进度达到100%\n              } else {\n                this.halfProgress++ // 进度增加1%\n                if (this.halfProgress === 100) { // 如果进度达到100%\n                  this.textState1 = '安装中' // 设置进度条文本为“安装中”\n                  this.enableState1 = false // 禁用进度条按钮\n                  this.ButtonState = Visibility.Visible // 显示按钮\n                  this.progressState = Visibility.None // 隐藏进度条\n                  this.buttonEnable = false // 禁用按钮\n                  this.buttonText = '安装中' // 设置按钮文本为“安装中”\n                  let timer2 = setInterval(() => { // 设置一个定时器，2秒后显示“打开”\n                    this.buttonText = '打开' // 设置按钮文本为“打开”\n                    this.buttonEnable = true // 启用按钮\n                    this.isEnd = true // 设置下载完成\n                    clearInterval(timer2) // 清除定时器\n                  }, 2000)\n                }\n                console.info('x progress++ = ' + this.halfProgress) // 打印进度\n              }\n            } else {\n              console.info('x isRunning = ' + false) // 打印进度条未运行\n              clearInterval(timer) // 清除定时器\n            }\n          }, 100)\n        }\n      }).visibility(this.progressState) // 根据progressState设置进度条的可见性\n    }.alignItems(HorizontalAlign.Center).width('100%') // 设置布局为居中对齐，宽度为100%\n  }\n}