[
    {
        "description": "该组件通过 Flex 布局实现了一个包含跑马灯（Marquee）和按钮的界面。布局宽度占据整个屏幕，高度设为 100%，内边距为 0。组件的垂直方向上被分为多个部分，每个部分包含一个跑马灯和一个按钮。跑马灯和按钮以垂直布局方式排列，对齐方式为居中对齐。\n跑马灯的样式包括宽度为 300vp，高度为 80vp，背景颜色为 #182431，字体颜色为 #FFFFFF，字体大小为 48，字体粗细为 700，底部边距为 40vp。跑马灯的功能包括开始、反弹和结束事件的回调函数，用户可以通过点击按钮触发跑马灯动画。\n按钮的样式包括宽度为 120vp，高度为 40vp，背景颜色为 #007DFF，字体大小为 16，字体粗细为 500。按钮的功能包括点击事件，用户可以通过点击按钮启动跑马灯动画。\n整个布局通过 Flex 布局保证跑马灯和按钮在垂直方向上有序排列，确保界面整洁美观。",
        "code": "@Entry\n@Component\nstruct MarqueeExample {\n  @State start: boolean = false // 控制跑马灯动画是否开始的标志\n  @State src: string = '' // 用于存储时间格式的字符串\n  @State marqueeText: string = 'Running Marquee' // 跑马灯显示的文本\n  private fromStart: boolean = true // 控制跑马灯动画是否从开始位置开始\n  private step: number = 10 // 跑马灯动画的步长\n  private loop: number = Number.POSITIVE_INFINITY // 跑马灯动画的循环次数，设置为无限循环\n  controller: TextClockController = new TextClockController() // 控制时间显示的控制器\n\n  // 将时间戳转换为时间格式的字符串\n  convert2time(value: number): string{\n    let date = new Date(Number(value+'000'));\n    let hours = date.getHours().toString().padStart(2, '0');\n    let minutes = date.getMinutes().toString().padStart(2, '0');\n    let seconds = date.getSeconds().toString().padStart(2, '0');\n    return hours+ \":\" + minutes + \":\" + seconds;\n  }\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Marquee({\n        start: this.start, // 控制跑马灯动画是否开始\n        step: this.step, // 跑马灯动画的步长\n        loop: this.loop, // 跑马灯动画的循环次数\n        fromStart: this.fromStart, // 控制跑马灯动画是否从开始位置开始\n        src: this.marqueeText + this.src // 跑马灯显示的文本内容\n      })\n        .marqueeUpdateStrategy(MarqueeUpdateStrategy.PRESERVE_POSITION) // 跑马灯更新策略，保持当前位置\n        .width(300) // 跑马灯宽度\n        .height(80) // 跑马灯高度\n        .fontColor('#FFFFFF') // 跑马灯字体颜色\n        .fontSize(48) // 跑马灯字体大小\n        .fontWeight(700) // 跑马灯字体粗细\n        .backgroundColor('#182431') // 跑马灯背景颜色\n        .margin({ bottom: 40 }) // 跑马灯底部边距\n        .onStart(() => {\n          console.info('Marquee animation complete onStart') // 跑马灯动画开始时的回调函数\n        })\n        .onBounce(() => {\n          console.info('Marquee animation complete onBounce') // 跑马灯动画反弹时的回调函数\n        })\n        .onFinish(() => {\n          console.info('Marquee animation complete onFinish') // 跑马灯动画结束时的回调函数\n        })\n      Button('Start')\n        .onClick(() => {\n          this.start = true // 设置跑马灯动画开始标志\n          this.controller.start() // 启动时间显示控制器\n        })\n        .width(120) // 按钮宽度\n        .height(40) // 按钮高度\n        .fontSize(16) // 按钮字体大小\n        .fontWeight(500) // 按钮字体粗细\n        .backgroundColor('#007DFF') // 按钮背景颜色\n      TextClock({ timeZoneOffset: -8, controller: this.controller }) // 时间显示组件，时区偏移为-8小时\n        .format('hms') // 时间格式为小时:分钟:秒\n        .onDateChange((value: number) => {\n          this.src = this.convert2time(value); // 时间变化时的回调函数，更新时间字符串\n        })\n        .margin(20) // 时间显示组件的边距\n        .fontSize(30) // 时间显示组件的字体大小\n    }\n    .width('100%') // 布局宽度\n    .height('100%') // 布局高度\n  }\n}"
    }
]