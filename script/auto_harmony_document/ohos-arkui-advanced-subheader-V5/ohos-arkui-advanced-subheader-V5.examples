/*\n实现一个带有二级标题的组件，支持点击操作按钮触发提示信息的功能。\n*/\n\n// 导入必要的模块和组件\nimport { promptAction, OperationType, SubHeader } from '@kit.ArkUI'\n\n// 使用@Entry和@Component装饰器定义一个名为SubHeaderExample的组件\n@Entry\n@Component\nstruct SubHeaderExample {\n  // 构建组件的UI结构\n  build() {\n    // 使用Column布局组件，垂直排列子组件\n    Column() {\n      // 使用SubHeader组件，设置一级标题、二级标题、操作类型和操作项\n      SubHeader({\n        // 设置一级标题为“一级标题”\n        primaryTitle: '一级标题',\n        // 设置二级标题为“二级标题”\n        secondaryTitle: '二级标题',\n        // 设置操作类型为带箭头的文本\n        operationType: OperationType.TEXT_ARROW,\n        // 设置操作项，包含一个操作按钮\n        operationItem: [{\n          // 设置操作按钮的文本为“更多”\n          value: '更多',\n          // 设置操作按钮的点击事件，点击后弹出提示信息“demo”\n          action: () => {\n            promptAction.showToast({ message: 'demo' })\n          }\n        }]\n      })\n    }\n  }\n}


/*\n实现一个带有二级标题和操作按钮的子标题组件。该组件包含一个图标、二级标题和一个按钮，点击按钮时会弹出一个提示信息。\n*/\n\n// 导入所需的模块和组件\nimport { promptAction, OperationType, SubHeader } from '@kit.ArkUI'\n\n// 使用@Entry和@Component装饰器定义一个入口组件\n@Entry\n@Component\nstruct SubHeaderExample {\n  // 构建组件的UI结构\n  build() {\n    Column() {\n      // 创建一个SubHeader组件，包含图标、二级标题和操作按钮\n      SubHeader({\n        // 设置图标资源路径\n        icon: $r('app.media.ic_public_community_messages'),\n        // 设置二级标题文本\n        secondaryTitle: '二级标题',\n        // 设置操作类型为按钮\n        operationType: OperationType.BUTTON,\n        // 定义操作按钮的属性和点击事件\n        operationItem: [{ \n          // 设置按钮显示的文本\n          value: '操作',\n          // 定义按钮点击时的动作\n          action: () => {\n            // 显示一个提示信息\n            promptAction.showToast({ message: 'demo' })\n          }\n        }]\n      })\n    }\n  }\n}


/*\n实现一个带有图标、标题和操作按钮的子标题组件。该组件支持点击操作按钮时显示一个提示信息。\n*/\n\n// 导入必要的模块和组件\nimport { promptAction, OperationType, SubHeader } from '@kit.ArkUI'\n\n// 使用@Entry和@Component装饰器定义一个名为SubHeaderExample的组件\n@Entry\n@Component\nstruct SubHeaderExample {\n  // 构建方法，定义组件的UI结构\n  build() {\n    Column() {\n      // 创建一个SubHeader组件，包含图标、标题和操作按钮\n      SubHeader({\n        // 设置图标为系统符号ohos_wifi\n        icon: $r('sys.symbol.ohos_wifi'),\n        // 设置图标的显示效果为分层效果\n        iconSymbolOptions: {\n          effectStrategy: SymbolEffectStrategy.HIERARCHICAL,\n        },\n        // 设置次级标题为“标题”\n        secondaryTitle: '标题',\n        // 设置操作类型为按钮\n        operationType: OperationType.BUTTON,\n        // 定义操作项，包含一个按钮，点击时显示提示信息\n        operationItem: [{ \n          value: '操作', // 按钮显示的文本\n          action: () => { // 按钮点击时的操作\n            promptAction.showToast({ message: 'demo' }) // 显示提示信息“demo”\n          }\n        }]\n      })\n    }\n  }\n}


/*\n实现一个自定义的子标题组件，包含自定义标题、一级标题、二级标题、图标和操作项。点击操作项时会弹出提示信息。\n*/\n\n// 导入必要的模块和组件\nimport { promptAction, OperationType, SubHeader } from '@kit.ArkUI';\n\n// 定义一个名为SubHeaderExample的组件，并将其标记为入口组件\n@Entry\n@Component\nstruct SubHeaderExample {\n  // 定义一个名为TitleBuilder的Builder方法，用于构建自定义标题\n  @Builder\n  TitleBuilder(): void {\n    Text('自定义标题')  // 创建一个文本组件，显示“自定义标题”\n      .fontSize(24)  // 设置字体大小为24\n      .fontColor(Color.Red)  // 设置字体颜色为红色\n      .fontWeight(FontWeight.Bold)  // 设置字体粗细为粗体\n  }\n\n  // 定义组件的构建方法\n  build() {\n    Column() {  // 创建一个垂直布局的容器\n      SubHeader({\n        titleBuilder: () => {  // 设置自定义标题的构建方法\n          this.TitleBuilder();  // 调用TitleBuilder方法构建自定义标题\n        },\n        primaryTitle: '一级标题',  // 设置一级标题为“一级标题”\n        secondaryTitle: '二级标题',  // 设置二级标题为“二级标题”\n        icon: $r('sys.symbol.ohos_star'),  // 设置图标为系统图标“ohos_star”\n        operationType: OperationType.TEXT_ARROW,  // 设置操作类型为带箭头的文本\n        operationItem: [{\n          value: '更多信息',  // 设置操作项的文本为“更多信息”\n          action: () => {  // 设置操作项的点击事件\n            promptAction.showToast({ message: 'demo' })  // 点击时弹出提示信息“demo”\n          }\n        }]\n      })\n    }\n  }\n}


/*\n实现一个带有子标题的组件，包含主标题和副标题，并支持自定义文本样式和操作按钮。组件的布局包括主标题和副标题的文本内容，以及一个操作按钮，点击按钮会弹出一个提示信息。\n*/\n\nimport { promptAction, OperationType, SubHeader, LengthMetrics, TextModifier } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct SubHeaderExample {\n  // 定义主标题的文本样式，初始为红色字体\n  @State primaryModifier: TextModifier = new TextModifier().fontColor(Color.Red);\n  // 定义副标题的文本样式，初始为红色字体\n  @State secondaryModifier: TextModifier = new TextModifier().fontColor(Color.Red);\n\n  build() {\n    Column() {\n      SubHeader({\n        // 主标题文本内容\n        primaryTitle: 'primaryTitle',\n        // 副标题文本内容\n        secondaryTitle: 'secondaryTitle',\n        // 主标题的文本样式\n        primaryTitleModifier: this.primaryModifier,\n        // 副标题的文本样式\n        secondaryTitleModifier: this.secondaryModifier,\n        // 操作按钮的类型，这里设置为带有箭头的文本按钮\n        operationType: OperationType.TEXT_ARROW,\n        // 操作按钮的配置项，包含按钮文本和点击事件\n        operationItem: [{\n          value: '更多信息',\n          action: () => {\n            // 点击按钮时弹出提示信息\n            promptAction.showToast({ message: 'demo'})\n          }\n        }],\n        // 内容的外边距，设置为左右各20vp\n        contentMargin: { start: LengthMetrics.vp(20), end: LengthMetrics.vp(20) },\n        // 内容的内边距，设置为左右各20vp\n        contentPadding: { start: LengthMetrics.vp(20), end: LengthMetrics.vp(20) }\n      })\n    }\n  }\n}


/*\n实现一个带有子标题的组件，子标题包含一个选择器和一组操作图标。选择器允许用户从预定义的选项中进行选择，并在选择时显示一个提示消息。操作图标组包含三个图标，每个图标点击时也会显示一个提示消息。\n*/\n\nimport { promptAction, OperationType, SubHeader } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct SubHeaderExample {\n  build() {\n    Column() {\n      SubHeader({\n        // 定义选择器属性\n        select: {\n          // 选择器的选项列表，每个选项包含一个值\n          options: [{ value: 'aaa' }, { value: 'bbb' }, { value: 'ccc' }],\n          // 选择器的标识符\n          value: 'selectdemo',\n          // 默认选中的选项索引\n          selected: 2,\n          // 选择器选项被选中时的回调函数\n          onSelect: (index: number, value?: string) => {\n            // 显示一个提示消息\n            promptAction.showToast({ message: 'demo' })\n          }\n        },\n        // 定义操作类型为图标组\n        operationType: OperationType.ICON_GROUP,\n        // 定义操作图标组，每个图标包含一个值和一个点击事件\n        operationItem: [{\n          // 图标的资源路径\n          value: $r('app.media.ic_public_community_messages'),\n          // 图标点击时的回调函数\n          action: () => {\n            // 显示一个提示消息\n            promptAction.showToast({ message: 'demo' })\n          }\n        }, {\n          // 图标的资源路径\n          value: $r('app.media.ic_public_community_messages'),\n          // 图标点击时的回调函数\n          action: () => {\n            // 显示一个提示消息\n            promptAction.showToast({ message: 'demo' })\n          }\n        }, {\n          // 图标的资源路径\n          value: $r('app.media.ic_public_community_messages'),\n          // 图标点击时的回调函数\n          action: () => {\n            // 显示一个提示消息\n            promptAction.showToast({ message: 'demo' })\n          }\n        }]\n      })\n    }\n  }\n}


/*\n实现一个带有子标题（SubHeader）的组件，子标题包含一个选择器和一个操作图标组。选择器允许用户从三个选项中选择一个，并在选择时显示一个提示消息。操作图标组包含三个图标，每个图标点击时会显示不同的提示消息。图标的渲染策略可以通过配置来改变。\n*/\n\nimport { promptAction, OperationType, SubHeader } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct SubHeaderExample {\n  build() {\n    Column() {\n      SubHeader({\n        select: {\n          // 选择器配置\n          options: [\n            { value: 'aaa' },  // 第一个选项\n            { value: 'bbb' },  // 第二个选项\n            { value: 'ccc' }   // 第三个选项\n          ],\n          value: 'selectdemo',  // 选择器的标识符\n          selected: 2,  // 默认选中第三个选项\n          onSelect: (index: number, value?: string) => {\n            // 选择事件处理函数，当选中某个选项时触发\n            promptAction.showToast({ message: 'demo' })  // 显示提示消息\n          }\n        },\n        operationType: OperationType.ICON_GROUP,  // 操作类型为图标组\n        operationItem: [\n          {\n            value: $r('sys.symbol.ohos_lungs'),  // 第一个图标的资源ID\n            action: () => {\n              // 第一个图标的点击事件处理函数\n              promptAction.showToast({ message: 'icon1' })  // 显示提示消息\n            }\n          },\n          {\n            value: $r('sys.symbol.ohos_lungs'),  // 第二个图标的资源ID\n            action: () => {\n              // 第二个图标的点击事件处理函数\n              promptAction.showToast({ message: 'icon2' })  // 显示提示消息\n            }\n          },\n          {\n            value: $r('sys.symbol.ohos_lungs'),  // 第三个图标的资源ID\n            action: () => {\n              // 第三个图标的点击事件处理函数\n              promptAction.showToast({ message: 'icon3' })  // 显示提示消息\n            }\n          }\n        ],\n        operationSymbolOptions: [\n          {\n            fontWeight: FontWeight.Lighter,  // 第一个图标的字体粗细\n          },\n          {\n            renderingStrategy: SymbolRenderingStrategy.MULTIPLE_COLOR,  // 第二个图标的渲染策略为多色\n            fontColor: [Color.Blue, Color.Grey, Color.Green],  // 第二个图标的颜色配置\n          },\n          {\n            renderingStrategy: SymbolRenderingStrategy.MULTIPLE_OPACITY,  // 第三个图标的渲染策略为多透明度\n            fontColor: [Color.Blue, Color.Grey, Color.Green],  // 第三个图标的颜色配置\n          }\n        ]\n      })\n    }\n  }\n}