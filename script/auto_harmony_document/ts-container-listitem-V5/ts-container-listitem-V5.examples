/*\n实现一个可滚动的列表组件，展示一个包含数字的列表项。列表项之间有20像素的间距，初始索引为0。列表项的背景色为白色，字体大小为16，文本居中对齐，边框圆角为10像素。列表的宽度为90%，隐藏滚动条。整个组件的背景色为浅灰色，顶部有5像素的内边距。\n*/\n\n@Entry\n@Component\nstruct ListItemExample {\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] // 定义一个包含数字的数组\n\n  build() {\n    Column() {\n      List({ space: 20, initialIndex: 0 }) { // 创建一个列表组件，列表项之间的间距为20像素，初始索引为0\n        ForEach(this.arr, (item: number) => { // 遍历数组中的每个元素\n          ListItem() { // 创建一个列表项\n            Text('' + item) // 创建一个文本组件，显示当前数组元素的值\n              .width('100%') // 设置文本组件的宽度为100%\n              .height(100) // 设置文本组件的高度为100像素\n              .fontSize(16) // 设置文本的字体大小为16像素\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n              .borderRadius(10) // 设置文本组件的边框圆角为10像素\n              .backgroundColor(0xFFFFFF) // 设置文本组件的背景色为白色\n          }\n        }, (item: string) => item) // 使用数组元素的值作为列表项的唯一标识\n      }.width('90%') // 设置列表的宽度为90%\n      .scrollBar(BarState.Off) // 隐藏列表的滚动条\n    }.width('100%').height('100%').backgroundColor(0xDCDCDC).padding({ top: 5 }) // 设置整个组件的宽度为100%，高度为100%，背景色为浅灰色，顶部内边距为5像素\n  }\n}


/*\n实现一个包含多个列表项的列表组件，支持多选功能。列表项分为两组，每组包含三个列表项，其中一组使用卡片样式，另一组使用默认样式。列表项之间有4vp的间距，背景颜色为浅灰色。\n*/\n\n@Entry\n@Component\nstruct ListItemExample3 {\n  build() {\n    Column() {\n      List({ space: "4vp", initialIndex: 0 }) { // 创建一个列表组件，设置列表项之间的间距为4vp，初始选中索引为0\n        ListItemGroup({ style: ListItemGroupStyle.CARD }) { // 创建一个列表项组，设置样式为卡片样式\n          ForEach([ListItemStyle.CARD, ListItemStyle.CARD, ListItemStyle.NONE], (itemStyle: number, index?: number) => { // 遍历数组，创建三个列表项，前两个使用卡片样式，最后一个使用默认样式\n            ListItem({ style: itemStyle }) { // 创建一个列表项，样式根据itemStyle变量决定\n              Text("" + index) // 创建一个文本组件，显示当前列表项的索引\n                .width("100%") // 设置文本组件的宽度为100%\n                .textAlign(TextAlign.Center) // 设置文本居中对齐\n            }\n          })\n        }\n        ForEach([ListItemStyle.CARD, ListItemStyle.CARD, ListItemStyle.NONE], (itemStyle: number, index?: number) => { // 遍历数组，创建三个列表项，前两个使用卡片样式，最后一个使用默认样式\n          ListItem({ style: itemStyle }) { // 创建一个列表项，样式根据itemStyle变量决定\n            Text("" + index) // 创建一个文本组件，显示当前列表项的索引\n              .width("100%") // 设置文本组件的宽度为100%\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n          }\n        })\n      }\n      .width('100%') // 设置列表组件的宽度为100%\n      .multiSelectable(true) // 设置列表支持多选功能\n      .backgroundColor(0xDCDCDC) // 设置列表的背景颜色为浅灰色\n    }\n    .width('100%') // 设置Column组件的宽度为100%\n    .padding({ top: 5 }) // 设置Column组件的上内边距为5vp\n  }\n}


/*\n实现一个带有滑动删除功能的列表组件。列表项可以滑动以显示删除和设置按钮，滑动过程中会触发状态变化，并在界面上显示相应的提示信息。\n*/\n\n@Entry\n@Component\nstruct ListItemExample2 {\n  // 定义一个状态变量 arr，用于存储列表项的数据\n  @State arr: number[] = [0, 1, 2, 3, 4]\n  \n  // 定义一个状态变量 enterEndDeleteAreaString，用于存储滑动进入删除区域时的提示信息\n  @State enterEndDeleteAreaString: string = "not enterEndDeleteArea"\n  \n  // 定义一个状态变量 exitEndDeleteAreaString，用于存储滑动退出删除区域时的提示信息\n  @State exitEndDeleteAreaString: string = "not exitEndDeleteArea"\n\n  // 定义一个 Builder 方法 itemEnd，用于生成列表项右侧的删除和设置按钮\n  @Builder itemEnd() {\n    Row() {\n      Button("Delete").margin("4vp") // 创建一个删除按钮，并设置边距\n      Button("Set").margin("4vp") // 创建一个设置按钮，并设置边距\n    }.padding("4vp").justifyContent(FlexAlign.SpaceEvenly) // 设置按钮容器的内边距和对齐方式\n  }\n\n  // 定义组件的 build 方法，用于构建 UI 结构\n  build() {\n    Column() {\n      List({ space: 10 }) { // 创建一个列表组件，设置列表项之间的间距为 10\n        ForEach(this.arr, (item: number) => { // 遍历 arr 数组，生成列表项\n          ListItem() {\n            Text("item" + item) // 创建一个文本组件，显示列表项的内容\n              .width('100%') // 设置文本组件的宽度为 100%\n              .height(100) // 设置文本组件的高度为 100\n              .fontSize(16) // 设置文本的字体大小为 16\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n              .borderRadius(10) // 设置文本组件的圆角半径为 10\n              .backgroundColor(0xFFFFFF) // 设置文本组件的背景颜色为白色\n          }\n          .transition({ type: TransitionType.Delete, opacity: 0 }) // 设置列表项删除时的过渡动画，透明度从 1 变为 0\n          .swipeAction({\n            end: {\n              builder: () => { this.itemEnd() }, // 设置滑动时显示的按钮区域\n              onAction: () => { // 定义滑动操作的回调函数\n                animateTo({ duration: 1000 }, () => { // 设置动画持续时间为 1000ms\n                  let index = this.arr.indexOf(item) // 获取当前列表项的索引\n                  this.arr.splice(index, 1) // 从数组中删除当前列表项\n                })\n              },\n              actionAreaDistance: 56, // 设置滑动操作区域的宽度为 56\n              onEnterActionArea: () => { // 定义进入滑动操作区域的回调函数\n                this.enterEndDeleteAreaString = "enterEndDeleteArea" // 更新进入滑动操作区域的状态提示信息\n                this.exitEndDeleteAreaString = "not exitEndDeleteArea" // 更新退出滑动操作区域的状态提示信息\n              },\n              onExitActionArea: () => { // 定义退出滑动操作区域的回调函数\n                this.enterEndDeleteAreaString = "not enterEndDeleteArea" // 更新进入滑动操作区域的状态提示信息\n                this.exitEndDeleteAreaString = "exitEndDeleteArea" // 更新退出滑动操作区域的状态提示信息\n              }\n            }\n          })\n        }, (item: string) => item) // 设置 ForEach 的 key 生成函数\n      }\n      Text(this.enterEndDeleteAreaString).fontSize(20) // 显示进入滑动操作区域的状态提示信息\n      Text(this.exitEndDeleteAreaString).fontSize(20) // 显示退出滑动操作区域的状态提示信息\n    }\n    .padding(10) // 设置容器的内边距为 10\n    .backgroundColor(0xDCDCDC) // 设置容器的背景颜色为浅灰色\n    .width('100%') // 设置容器的宽度为 100%\n    .height('100%') // 设置容器的高度为 100%\n  }\n}