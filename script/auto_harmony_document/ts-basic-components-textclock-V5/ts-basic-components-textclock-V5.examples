/*\n实现一个带有多个阴影效果的文本时钟组件。该组件通过@State装饰器管理状态变量textShadows，用于存储多个阴影选项。TextClock组件通过设置字体大小和应用阴影效果来展示当前时间。\n*/\n\n@Entry\n@Component\nstruct TextClockExample {\n  // 使用@State装饰器定义一个状态变量textShadows，用于存储多个阴影选项\n  @State textShadows : ShadowOptions | Array<ShadowOptions> = [\n    { radius: 10, color: Color.Red, offsetX: 10, offsetY: 0 }, // 红色阴影，半径10，水平偏移10\n    { radius: 10, color: Color.Black, offsetX: 20, offsetY: 0 }, // 黑色阴影，半径10，水平偏移20\n    { radius: 10, color: Color.Brown, offsetX: 30, offsetY: 0 }, // 棕色阴影，半径10，水平偏移30\n    { radius: 10, color: Color.Green, offsetX: 40, offsetY: 0 }, // 绿色阴影，半径10，水平偏移40\n    { radius: 10, color: Color.Yellow, offsetX: 100, offsetY: 0 } // 黄色阴影，半径10，水平偏移100\n  ]\n\n  build() {\n    Column({ space: 8 }) {\n      // 创建一个TextClock组件，设置字体大小为50，并应用定义的阴影效果\n      TextClock().fontSize(50).textShadow(this.textShadows)\n    }\n  }\n}


/*\n实现一个包含两个TextClock组件的示例，分别展示24小时制和12小时制的时间显示效果。每个TextClock组件下方都有相应的描述文本，说明其显示效果。\n*/\n\n@Entry\n@Component\nstruct TextClockExample {\n  build() {\n    Column({ space: 8 }) { // 创建一个垂直布局，组件间距为8\n      Row() { // 创建一个水平布局\n        // 描述文本，说明显示效果\n        Text("24小时制去除前导0：")\n          .fontSize(20) // 设置文本字体大小为20\n        // TextClock组件，显示24小时制时间，去除前导0\n        TextClock()\n          .fontSize(20) // 设置时间文本字体大小为20\n          .format("HH:mm:ss") // 设置时间格式为24小时制，HH表示小时，mm表示分钟，ss表示秒\n          .dateTimeOptions({hour: "numeric"}) // 设置小时显示为数字形式，去除前导0\n      }\n      Row() { // 创建一个水平布局\n        // 描述文本，说明显示效果\n        Text("12小时制增加前导0：")\n          .fontSize(20) // 设置文本字体大小为20\n        // TextClock组件，显示12小时制时间，增加前导0\n        TextClock()\n          .fontSize(20) // 设置时间文本字体大小为20\n          .format("aa hh:mm:ss") // 设置时间格式为12小时制，aa表示上午或下午，hh表示小时，mm表示分钟，ss表示秒\n          .dateTimeOptions({hour: "2-digit"}) // 设置小时显示为两位数字形式，增加前导0\n      }\n    }\n    .alignItems(HorizontalAlign.Start) // 设置Column组件内的子组件水平对齐方式为左对齐\n  }\n}


/*\n实现一个包含文本时钟和控制按钮的界面。文本时钟显示东八区的系统时间，精确到秒，并支持启动和停止功能。界面中心显示当前累积时间，每当时间变化时，累积时间会更新。\n*/\n\n@Entry\n@Component\nstruct Second {\n  // 定义一个状态变量，用于存储累积时间\n  @State accumulateTime: number = 0\n  \n  // 创建一个TextClockController对象，用于控制文本时钟的启动和停止\n  controller: TextClockController = new TextClockController()\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 显示当前累积时间\n      Text('Current milliseconds is ' + this.accumulateTime)\n        .fontSize(20)\n      \n      // 创建一个TextClock组件，显示东八区的系统时间，精确到秒\n      TextClock({ timeZoneOffset: -8, controller: this.controller })\n        .format('aa hh:mm:ss') // 设置时间格式为12小时制，显示上午/下午\n        .onDateChange((value: number) => {\n          // 每当时间变化时，更新累积时间\n          this.accumulateTime = value\n        })\n        .margin(20) // 设置外边距\n        .fontSize(30) // 设置字体大小\n      \n      // 创建一个按钮，点击后启动文本时钟\n      Button("start TextClock")\n        .margin({ bottom: 10 }) // 设置下边距\n        .onClick(() => {\n          // 启动文本时钟\n          this.controller.start()\n        })\n      \n      // 创建一个按钮，点击后停止文本时钟\n      Button("stop TextClock")\n        .onClick(() => {\n          // 停止文本时钟\n          this.controller.stop()\n        })\n    }\n    .width('100%') // 设置宽度为100%\n    .height('100%') // 设置高度为100%\n  }\n}


/*\n实现一个包含两个文本时钟的界面，用户可以通过按钮控制时钟的启动和停止。时钟显示当前时间，并根据时区偏移量调整时间显示。界面还显示当前累积的毫秒数。\n*/\n\n@Entry\n@Component\nstruct TextClockExample {\n  // 累积时间，单位为秒\n  @State accumulateTime1: number = 0\n  // 时区偏移量，单位为小时\n  @State timeZoneOffset: number = -8\n  // 文本时钟控制器\n  controller1: TextClockController = new TextClockController()\n  controller2: TextClockController = new TextClockController()\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 显示当前累积时间\n      Text('Current milliseconds is ' + this.accumulateTime1)\n        .fontSize(20)\n        .margin({ top: 20 })\n      // 第一个文本时钟，显示当前时间，并绑定控制器和时区偏移量\n      TextClock({ timeZoneOffset: this.timeZoneOffset, controller: this.controller1 })\n        .format('aa hh:mm:ss')\n        .onDateChange((value: number) => {\n          this.accumulateTime1 = value\n        })\n        .margin(20)\n        .fontSize(30)\n      // 第二个文本时钟，使用自定义样式，并绑定控制器和时区偏移量\n      TextClock({ timeZoneOffset: this.timeZoneOffset, controller: this.controller2 })\n        .format('aa hh:mm:ss')\n        .fontSize(30)\n        .contentModifier(new MyTextClockStyle('ContentModifier:'))\n      // 启动文本时钟的按钮\n      Button("start TextClock")\n        .margin({ top: 20, bottom: 10 })\n        .onClick(() => {\n          this.controller1.start()\n          this.controller2.start()\n        })\n      // 停止文本时钟的按钮\n      Button("stop TextClock")\n        .margin({ bottom: 30 })\n        .onClick(() => {\n          this.controller1.stop()\n          this.controller2.stop()\n        })\n    }\n    .width('100%')\n    .height('100%')\n  }\n}