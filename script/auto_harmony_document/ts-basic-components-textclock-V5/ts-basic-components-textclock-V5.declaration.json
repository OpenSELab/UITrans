{
    "description": "TextClock组件通过文本将当前系统时间显示在设备上。支持不同时区的时间显示，最高精度到秒级。",
    "details": "在组件不可见时时间变动将停止，组件的可见状态基于onVisibleAreaChange处理，可见阈值ratios大于0即视为可见状态。",
    "interfaces": [
        {
            "description": "TextClock(options?: { timeZoneOffset?: number, controller?: TextClockController })",
            "params": {
                "options": {
                    "type": "object",
                    "description": "TextClock组件的配置选项。",
                    "params": {
                        "timeZoneOffset": {
                            "type": "number",
                            "description": "设置时区偏移量。取值范围为[-14, 12]，表示东十二区到西十二区，其中负值表示东时区，正值表示西时区，比如东八区为-8。设置值为该取值范围内的浮点数时会进行取整，舍弃小数部分。对横跨国际日界线的国家或地区，用-13（UTC+13）和-14（UTC+14）来保证整个国家或者区域处在相同的时间，当设置的值不在取值范围内时，将使用当前系统的时区偏移量。",
                            "default": "当前系统的时区偏移量"
                        },
                        "controller": {
                            "type": "TextClockController",
                            "description": "绑定一个控制器，用来控制文本时钟的状态。"
                        }
                    }
                }
            }
        }
    ],
    "attributes": {
        "format": {
            "description": "设置显示时间格式，如“yyyy/MM/dd”、“yyyy-MM-dd”。",
            "params": {
                "value": {
                    "type": "string",
                    "required": true,
                    "description": "显示时间格式。"
                }
            }
        },
        "fontColor": {
            "description": "设置字体颜色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "字体颜色。"
                }
            }
        },
        "fontSize": {
            "description": "设置字体大小。",
            "params": {
                "value": {
                    "type": "Length",
                    "required": true,
                    "description": "字体大小。fontSize为number类型时，使用fp单位。字体默认大小16fp。不支持设置百分比字符串。"
                }
            }
        },
        "fontStyle": {
            "description": "设置字体样式。",
            "params": {
                "value": {
                    "type": "FontStyle",
                    "required": true,
                    "description": "字体样式。",
                    "default": "FontStyle.Normal"
                }
            }
        },
        "fontWeight": {
            "description": "设置文本的字体粗细，设置过大可能会在不同字体下有截断。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "FontWeight",
                        "string"
                    ],
                    "required": true,
                    "description": "文本的字体粗细，number类型取值[100, 900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如\"400\"，以及\"bold\"、\"bolder\"、\"lighter\"、\"regular\"、\"medium\"，分别对应FontWeight中相应的枚举值。",
                    "default": "FontWeight.Normal"
                }
            }
        },
        "fontFamily": {
            "description": "设置字体列表。",
            "params": {
                "value": {
                    "type": "ResourceStr",
                    "required": true,
                    "description": "字体列表。默认字体'HarmonyOS Sans'。"
                }
            }
        },
        "textShadow": {
            "description": "设置文字阴影效果。该接口支持以数组形式入参，实现多重文字阴影。不支持fill字段, 不支持智能取色模式。",
            "params": {
                "value": {
                    "type": [
                        "ShadowOptions",
                        "Array<ShadowOptions>"
                    ],
                    "required": true,
                    "description": "文字阴影效果。"
                }
            }
        },
        "fontFeature": {
            "description": "设置文字特性效果，比如数字等宽的特性。",
            "params": {
                "value": {
                    "type": "string",
                    "required": true,
                    "description": "文字特性效果。"
                }
            }
        },
        "contentModifier": {
            "description": "定制TextClock内容区的方法。",
            "params": {
                "modifier": {
                    "type": "ContentModifier<TextClockConfiguration>",
                    "required": true,
                    "description": "定制TextClock内容区的方法。"
                }
            }
        },
        "dateTimeOptions": {
            "description": "设置小时是否显示前导0。",
            "params": {
                "dateTimeOptions": {
                    "type": "Optional<DateTimeOptions>",
                    "required": true,
                    "description": "设置小时是否显示前导0，只支持设置hour参数，参数值为{hour: \"2-digit\"}时表示显示前导0，参数值为{hour: \"numeric\"}时表示不显示前导0。",
                    "default": "undefined，由组件根据应用设置格式自行判断是否显示前导0。"
                }
            }
        }
    },
    "events": {
        "onDateChange": {
            "description": "提供时间变化回调，该事件回调间隔为秒。组件不可见时不回调。非卡片中使用时，该事件回调间隔为秒。卡片中使用时，该事件回调间隔为分钟。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "Unix Time Stamp，即自1970年1月1日（UTC）起经过的秒数。"
                }
            }
        }
    },
    "rules": [
        "该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "该组件支持在ArkTS卡片中使用。",
        "该组件支持在元服务中使用。"
    ],
    "examples": [
        {
            "description": "该组件通过 Column 布局实现了一个展示带有多个阴影效果的文本时钟界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上仅包含一个 TextClock 组件，该组件以水平布局方式排列，且对齐方式为居中对齐。\nTextClock 组件的样式包括字体大小、文本阴影等属性，支持不同的样式展示。文本阴影通过多个 ShadowOptions 对象定义，每个对象包含阴影的半径、颜色、水平偏移量和垂直偏移量等属性。\n整个布局通过 Column 布局保证 TextClock 组件在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry // 标记该组件为入口组件\n@Component // 标记该组件为一个自定义组件\nstruct TextClockExample {\n  @State textShadows : ShadowOptions | Array<ShadowOptions> = [ // 定义一个状态变量 textShadows，用于存储文本阴影的配置\n    { radius: 10, color: Color.Red, offsetX: 10, offsetY: 0 }, // 第一个阴影配置：红色，半径10，水平偏移10，垂直偏移0\n    { radius: 10, color: Color.Black, offsetX: 20, offsetY: 0 }, // 第二个阴影配置：黑色，半径10，水平偏移20，垂直偏移0\n    { radius: 10, color: Color.Brown, offsetX: 30, offsetY: 0 }, // 第三个阴影配置：棕色，半径10，水平偏移30，垂直偏移0\n    { radius: 10, color: Color.Green, offsetX: 40, offsetY: 0 }, // 第四个阴影配置：绿色，半径10，水平偏移40，垂直偏移0\n    { radius: 10, color: Color.Yellow, offsetX: 100, offsetY: 0 } // 第五个阴影配置：黄色，半径10，水平偏移100，垂直偏移0\n  ]\n\n  build() {\n    Column({ space: 8 }) { // 创建一个垂直布局的 Column 组件，组件之间的间距为8\n      TextClock() // 创建一个 TextClock 组件，用于显示当前时间\n        .fontSize(50) // 设置 TextClock 组件的字体大小为50\n        .textShadow(this.textShadows) // 设置 TextClock 组件的文本阴影效果，使用 textShadows 变量中的配置\n    }\n  }\n}"
        },
        {
            "description": "该组件通过 Column 布局实现了一个展示时间格式的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为两个部分，每个部分包含一个标题和一个 TextClock 组件。每个部分的标题和 TextClock 组件以水平布局方式排列，标题和 TextClock 组件之间的间距均匀分布，且对齐方式为居中对齐。\n\nTextClock 组件的样式包括字体大小、时间格式等属性，支持不同的样式展示。第一个 TextClock 组件展示了 24 小时制的时间格式，并通过 dateTimeOptions 属性去除了前导 0。第二个 TextClock 组件展示了 12 小时制的时间格式，并通过 dateTimeOptions 属性增加了前导 0。\n\n整个布局通过 Column 布局保证标题和 TextClock 组件在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TextClockExample {\n  build() {\n    Column({ space: 8 }) { // 创建一个垂直布局的 Column 组件，设置组件之间的间距为 8vp\n      Row() { // 创建一个水平布局的 Row 组件\n        Text(\"24小时制去除前导0：\") // 创建一个 Text 组件，显示文本内容为 \"24小时制去除前导0：\"\n          .fontSize(20) // 设置字体大小为 20\n        TextClock() // 创建一个 TextClock 组件，用于显示时间\n          .fontSize(20) // 设置字体大小为 20\n          .format(\"HH:mm:ss\") // 设置时间格式为 \"HH:mm:ss\"，表示 24 小时制的时间格式\n          .dateTimeOptions({hour: \"numeric\"}) // 设置 dateTimeOptions 属性，去除小时字段的前导 0\n      }\n      Row() { // 创建一个水平布局的 Row 组件\n        Text(\"12小时制增加前导0：\") // 创建一个 Text 组件，显示文本内容为 \"12小时制增加前导0：\"\n          .fontSize(20) // 设置字体大小为 20\n        TextClock() // 创建一个 TextClock 组件，用于显示时间\n          .fontSize(20) // 设置字体大小为 20\n          .format(\"aa hh:mm:ss\") // 设置时间格式为 \"aa hh:mm:ss\"，表示 12 小时制的时间格式，并带有上午/下午标识\n          .dateTimeOptions({hour: \"2-digit\"}) // 设置 dateTimeOptions 属性，增加小时字段的前导 0\n      }\n    }\n    .alignItems(HorizontalAlign.Start) // 设置 Column 组件的子组件在水平方向上左对齐\n  }\n}"
        },
        {
            "description": "该组件通过 Flex 布局实现了一个展示当前时间（以毫秒为单位）的界面，并提供了启动和停止时钟的功能。布局宽度占据整个屏幕，高度设为 100%，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题、一个时钟显示和一个按钮组。时钟显示以文本形式展示当前时间的毫秒数，按钮组包含两个按钮，分别用于启动和停止时钟。\n时钟显示的样式包括字体大小为 30，边距为 20，字体大小为 20。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过 Flex 组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过 Flex 布局保证时钟和按钮在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct Second {\n  @State accumulateTime: number = 0 // 用于存储当前时间的毫秒数\n\n  controller: TextClockController = new TextClockController() // 创建一个 TextClock 控制器，用于控制时钟的启动和停止\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Text('Current milliseconds is ' + this.accumulateTime) // 显示当前时间的毫秒数\n        .fontSize(20) // 设置字体大小为 20\n\n      TextClock({ timeZoneOffset: -8, controller: this.controller }) // 创建一个 TextClock 组件，设置时区偏移为 -8，并绑定控制器\n        .format('aa hh:mm:ss') // 设置时间格式为 \"上午/下午 小时:分钟:秒\"\n        .onDateChange((value: number) => { // 当时间变化时，更新 accumulateTime 的值\n          this.accumulateTime = value\n        })\n        .margin(20) // 设置边距为 20\n        .fontSize(30) // 设置字体大小为 30\n\n      Button(\"start TextClock\") // 创建一个按钮，用于启动时钟\n        .margin({ bottom: 10 }) // 设置底部边距为 10\n        .onClick(() => { // 点击按钮时，启动时钟\n          this.controller.start()\n        })\n\n      Button(\"stop TextClock\") // 创建一个按钮，用于停止时钟\n        .onClick(() => { // 点击按钮时，停止时钟\n          this.controller.stop()\n        })\n    }\n    .width('100%') // 设置宽度为 100%\n    .height('100%') // 设置高度为 100%\n  }\n}"
        },
        {
            "description": "该示例实现了一个自定义文本时钟样式的功能，通过自定义样式实现了一个时间选择器组件。布局采用 Flex 布局，宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为多个部分，每个部分包含一个文本时钟和两个按钮。文本时钟的样式包括字体大小、边距等属性，支持不同的样式展示。按钮的功能包括点击事件，用户可以通过点击按钮启动或停止文本时钟。\n\n布局属性：\n- 宽度：100%\n- 高度：100%\n- 边距：文本时钟和按钮的边距分别为 20vp 和 20vp、30vp\n\n组件的样式和外观：\n- 字体大小：文本时钟的字体大小为 30vp，按钮的字体大小为默认值\n- 边距：文本时钟和按钮的边距分别为 20vp 和 20vp、30vp\n\n组件的排列和嵌套关系：\n- 垂直布局：通过 Flex 布局实现，垂直方向上排列文本时钟和按钮\n- 对齐方式：居中对齐\n\n组件的功能和交互：\n- 点击事件：按钮点击事件用于启动或停止文本时钟\n- 输入验证：无",
            "code": "// 自定义文本时钟样式类，实现 ContentModifier 接口\nclass MyTextClockStyle implements ContentModifier<TextClockConfiguration> {\n  // 当前时区偏移量，单位为小时\n  currentTimeZoneOffset: number = new Date().getTimezoneOffset() / 60\n  // 标题文本\n  title: string = ''\n\n  // 构造函数，初始化标题文本\n  constructor(title: string) {\n    this.title = title\n  }\n\n  // 应用内容修饰器，返回一个 WrappedBuilder\n  applyContent(): WrappedBuilder<[TextClockConfiguration]> {\n    return wrapBuilder(buildTextClock)\n  }\n}\n\n// 构建文本时钟的 Builder 函数\n@Builder\nfunction buildTextClock(config: TextClockConfiguration) {\n  Row() {\n    Column() {\n      // 显示标题文本\n      Text((config.contentModifier as MyTextClockStyle).title)\n        .fontSize(20)\n        .margin(20)\n      // 时间选择器组件，根据时区偏移量和 UTC 秒数动态改变选中值\n      TimePicker({\n        selected: (new Date(config.timeValue * 1000 + ((config.contentModifier as MyTextClockStyle).currentTimeZoneOffset - config.timeZoneOffset) * 60 * 60 * 1000)),\n        format: TimePickerFormat.HOUR_MINUTE_SECOND\n      })\n        .useMilitaryTime(!config.started) // 根据文本时钟的启动状态切换 12 小时制与 24 小时制\n    }\n  }\n}\n\n// 入口组件，实现文本时钟示例\n@Entry\n@Component\nstruct TextClockExample {\n  // 累计时间，单位为毫秒\n  @State accumulateTime1: number = 0\n  // 时区偏移量，单位为小时\n  @State timeZoneOffset: number = -8\n  // 文本时钟控制器\n  controller1: TextClockController = new TextClockController()\n  controller2: TextClockController = new TextClockController()\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 显示当前累计时间\n      Text('Current milliseconds is ' + this.accumulateTime1)\n        .fontSize(20)\n        .margin({ top: 20 })\n      // 第一个文本时钟组件\n      TextClock({ timeZoneOffset: this.timeZoneOffset, controller: this.controller1 })\n        .format('aa hh:mm:ss')\n        .onDateChange((value: number) => {\n          this.accumulateTime1 = value\n        })\n        .margin(20)\n        .fontSize(30)\n      // 第二个文本时钟组件，使用自定义样式\n      TextClock({ timeZoneOffset: this.timeZoneOffset, controller: this.controller2 })\n        .format('aa hh:mm:ss')\n        .fontSize(30)\n        .contentModifier(new MyTextClockStyle('ContentModifier:'))\n      // 启动文本时钟的按钮\n      Button(\"start TextClock\")\n        .margin({ top: 20, bottom: 10 })\n        .onClick(() => {\n          this.controller1.start()\n          this.controller2.start()\n        })\n      // 停止文本时钟的按钮\n      Button(\"stop TextClock\")\n        .margin({ bottom: 30 })\n        .onClick(() => {\n          this.controller1.stop()\n          this.controller2.stop()\n        })\n    }\n    .width('100%')\n    .height('100%')\n  }\n}"
        }
    ],
    "is_common_attrs": true
}