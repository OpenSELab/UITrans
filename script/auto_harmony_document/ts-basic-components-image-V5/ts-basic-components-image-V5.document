Title: Image-图片与视频-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-image-V5

Markdown Content:
Image为图片组件，常用于在应用中显示图片。Image支持加载[PixelMap](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-image-V5#pixelmap7)、[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)和[DrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#drawabledescriptor)类型的数据源，支持png、jpg、jpeg、bmp、svg、webp、gif和heif类型的图片格式。

说明

该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

使用快捷组合键对Image组件复制时，Image组件必须处于[获焦状态](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-common-events-focus-event-V5#%E8%AE%BE%E7%BD%AE%E7%BB%84%E4%BB%B6%E6%98%AF%E5%90%A6%E5%8F%AF%E8%8E%B7%E7%84%A6)。Image组件默认不获焦，需将[focusable](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-focus-V5#focusable)属性设置为true，即可使用TAB键将焦点切换到组件上，再将[focusOnTouch](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-focus-V5#focusontouch9)属性设置为true，即可实现点击获焦。

图片设置为svg图源时，当前支持的标签是svg、rect、circle、ellipse、path、line、polyline、polygon、feFlood、feBlend、feColorMatrix、feGaussianBlur、feComposite、feOffset、filter、mask、pattern、clippath、image、linearGradient、radialGradient、stop、animate、animateTransform、defs、g和use。

动图在Image组件不可见时停止动画，通过[onVisibleAreaChange](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-component-visible-area-change-event-V5#onvisibleareachange)事件实现组件的可见状态，可见阈值ratios大于0时，Image可见。

需要权限
----

使用网络图片时，需要申请权限ohos.permission.INTERNET。具体申请方式请参考[声明权限](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/declare-permissions-V5)。

接口
--

### Image

Image(src: PixelMap | ResourceStr | DrawableDescriptor)

通过图片数据源获取图片，用于后续渲染展示。

Image组件加载图片失败或图片尺寸为0时，图片组件大小自动为0，不跟随父组件的布局约束。

Image组件默认按照居中裁剪，例如组件宽高设置相同，原图长宽不等，此时按照中间区域进行裁剪。

Image加载成功且组件不设置宽高时，其显示大小自适应父组件。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

src

[PixelMap](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-image-V5#pixelmap7) | [ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)| [DrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#drawabledescriptor)

是

图片的数据源，支持本地图片和网络图片，引用方式请参考[加载图片资源](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-graphics-display-V5#%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90)。

1\. PixelMap格式为像素图，常用于图片编辑的场景。

2\. ResourceStr包含Resource和string格式。

string格式可用于加载网络图片和本地图片，常用于加载网络图片。当使用相对路径引用本地图片时，例如Image("common/test.jpg")，不支持跨包/跨模块调用该Image组件，建议使用Resource格式来管理需全局使用的图片资源。

\- 支持Base64字符串。格式data:image/\[png|jpeg|bmp|webp|heif\];base64,\[base64 data\], 其中\[base64 data\]为Base64字符串数据。

\- 支持file://路径前缀的字符串，[应用沙箱URI](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-file-fileuri-V5#constructor10)：file://<bundleName\>/<sandboxPath\>。当访问的路径中包含特殊符号时，需要使用[fileUri.getUriFromPath(path)](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-file-fileuri-V5#fileurigeturifrompath)去做转换。同时需要保证目录包路径下的文件有可读权限。

Resource格式可以跨包/跨模块访问资源文件，是访问本地图片的推荐方式。

3\. 当传入资源id或name为普通图片时，生成DrawableDescriptor对象。传入[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)类型可播放PixelMap数组动画。

**说明：**

\- ArkTS卡片上支持gif图片格式动效，但仅在显示时播放一次。

\- ArkTS卡片上不支持http://等网络相关路径前缀和file://路径前缀的字符串。

\- ArkTS卡片上不支持 [PixelMap](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-image-V5#pixelmap7)类型。

\- 加载本地图片过程中，如果对图片进行修改或者替换，可能会引起应用崩溃。因此需要覆盖图片文件时，应该先删除该文件再重新创建一个同名文件。

\- 网络图片必须支持RFC 9113标准，否则会导致加载失败。

\- 如果下载的网络图片大于10MB或一次下载的网络图片数量较多，建议使用[HTTP](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/http-request-V5)工具提前预下载，提高图片加载性能，方便应用侧管理数据。

\- 如果SVG图片没有原生大小，需要给Image组件设置宽高，否则不显示。

\- 如果SVG图片通过image标签引用本地其他图片，被引用的图片不支持svg格式和gif格式。

\- src由有效切换为无效时，图片保持不动。

### Image12+

Image(src: PixelMap | ResourceStr | DrawableDescriptor | ImageContent)

src新增[ImageContent](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-image-V5#imagecontent12)类型，可指定对应的图形内容。

**卡片能力：** 从API version 12开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

src

[PixelMap](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-image-V5#pixelmap7) | [ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)| [DrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#drawabledescriptor)| [ImageContent](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-image-V5#imagecontent12)

是

图片的数据源，支持本地图片和网络图片，引用方式请参考[加载图片资源](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-graphics-display-V5#%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90)。

1\. PixelMap格式为像素图，常用于图片编辑的场景。

2\. ResourceStr包含Resource和string格式。

string格式可用于加载网络图片和本地图片，常用于加载网络图片。当使用相对路径引用本地图片时，例如Image("common/test.jpg")，不支持跨包/跨模块调用该Image组件，建议使用Resource格式来管理需全局使用的图片资源。

\- 支持Base64字符串。格式data:image/\[png|jpeg|bmp|webp|heif\];base64,\[base64 data\], 其中\[base64 data\]为Base64字符串数据。

\- 支持file://路径前缀的字符串，[应用沙箱URI](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-file-fileuri-V5#constructor10)：file://<bundleName\>/<sandboxPath\>。当访问的路径中包含特殊符号时，需要使用[fileUri.getUriFromPath(path)](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-file-fileuri-V5#fileurigeturifrompath)去做转换。同时需要保证目录包路径下的文件有可读权限。

Resource格式可以跨包/跨模块访问资源文件，是访问本地图片的推荐方式。

3\. 当传入资源id或name为普通图片时，生成DrawableDescriptor对象。传入[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)类型可播放PixelMap数组动画。

4\. 传入[ImageContent](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-image-V5#imagecontent12)类型，指定图像内容。

**说明：**

\- ArkTS卡片上支持gif图片格式动效，但仅在显示时播放一次。

\- ArkTS卡片上不支持http://等网络相关路径前缀和file://路径前缀的字符串。

\- ArkTS卡片上不支持 [PixelMap](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-image-V5#pixelmap7)类型。

\- 加载本地图片过程中，如果对图片进行修改或者替换，可能会引起应用崩溃。因此需要覆盖图片文件时，应该先删除该文件再重新创建一个同名文件。

\- 网络图片必须支持RFC 9113标准，否则会导致加载失败。

\- 如果下载的网络图片大于10MB或一次下载的网络图片数量较多，建议使用[HTTP](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/http-request-V5)工具提前预下载，提高图片加载性能，方便应用侧管理数据。

\- 如果SVG图片没有原生大小，需要给Image组件设置宽高，否则不显示。

\- 如果SVG图片通过image标签引用本地其他图片，被引用的图片不支持svg格式和gif格式。

\- src由有效切换为无效时，图片保持不动。

### Image12+

Image(src: PixelMap | ResourceStr | DrawableDescriptor, imageAIOptions: ImageAIOptions)

Image新增[imageAIOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-image-common-V5#imageaioptions)参数，为组件设置AI分析选项。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

src

[PixelMap](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-image-V5#pixelmap7) | [ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)| [DrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#drawabledescriptor)

是

图片的数据源，支持本地图片和网络图片，引用方式请参考[加载图片资源](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-graphics-display-V5#%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90)。

1\. PixelMap格式为像素图，常用于图片编辑的场景。

2\. ResourceStr包含Resource和string格式。

string格式可用于加载网络图片和本地图片，常用于加载网络图片。当使用相对路径引用本地图片时，例如Image("common/test.jpg")，不支持跨包/跨模块调用该Image组件，建议使用Resource格式来管理需全局使用的图片资源。

\- 支持Base64字符串。格式data:image/\[png|jpeg|bmp|webp|heif\];base64,\[base64 data\], 其中\[base64 data\]为Base64字符串数据。

\- 支持file://路径前缀的字符串，[应用沙箱URI](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-file-fileuri-V5#constructor10)：file://<bundleName\>/<sandboxPath\>。当访问的路径中包含特殊符号时，需要使用[fileUri.getUriFromPath(path)](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-file-fileuri-V5#fileurigeturifrompath)去做转换。同时需要保证目录包路径下的文件有可读权限。

Resource格式可以跨包/跨模块访问资源文件，是访问本地图片的推荐方式。

3\. 当传入资源id或name为普通图片时，生成DrawableDescriptor对象。传入[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)类型可播放PixelMap数组动画。

**说明：**

\- ArkTS卡片上支持gif图片格式动效，但仅在显示时播放一次。

\- ArkTS卡片上不支持http://等网络相关路径前缀和file://路径前缀的字符串。

\- ArkTS卡片上不支持 [PixelMap](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-image-V5#pixelmap7)类型。

\- 加载本地图片过程中，如果对图片进行修改或者替换，可能会引起应用崩溃。因此需要覆盖图片文件时，应该先删除该文件再重新创建一个同名文件。

\- 网络图片必须支持RFC 9113标准，否则会导致加载失败。

\- 如果下载的网络图片大于10MB或一次下载的网络图片数量较多，建议使用[HTTP](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/http-request-V5)工具提前预下载，提高图片加载性能，方便应用侧管理数据。

\- 如果SVG图片没有原生大小，需要给Image组件设置宽高，否则不显示。

\- 如果SVG图片通过image标签引用本地其他图片，被引用的图片不支持svg格式和gif格式。

\- src由有效切换为无效时，图片保持不动。

imageAIOptions

[ImageAIOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-image-common-V5#imageaioptions)

是

给组件设置一个AI分析选项，通过此项可配置分析类型或绑定一个分析控制器。

### alt

alt(value: string | Resource | PixelMap)

设置图片加载时显示的占位图。

当组件的参数类型为[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)时设置该属性不生效。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

string | [Resource](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resource) | [PixelMap](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-image-V5#pixelmap7)12+

是

加载时显示的占位图，支持本地图片（png、jpg、bmp、svg、gif和heif类型）,支持[PixelMap](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-image-V5#pixelmap7)类型图片，不支持网络图片。

默认值：null

### objectFit

objectFit(value: ImageFit)

设置图片的填充效果。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ImageFit](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#imagefit)

是

图片的填充效果。

默认值：ImageFit.Cover

### objectRepeat

objectRepeat(value: ImageRepeat)

设置图片的重复样式，从中心点向两边重复，剩余空间不足放下一张图片时会截断。svg类型图源不支持该属性。

当组件的参数类型为[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)时设置该属性不生效。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ImageRepeat](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#imagerepeat)

是

图片的重复样式。

默认值：ImageRepeat.NoRepeat

### interpolation

interpolation(value: ImageInterpolation)

设置图片的插值效果，即缓解图片在缩放时的锯齿问题。svg类型图源不支持该属性。

当组件的参数类型为[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)时设置该属性不生效。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### renderMode

renderMode(value: ImageRenderMode)

设置图片的渲染模式。svg类型图源不支持该属性。

设置 [ColorFilter](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-image-V5#colorfilter9) 时，该属性设置不生效。

当组件的参数类型为[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)时设置该属性不生效。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ImageRenderMode](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-image-V5#imagerendermode)

是

图片的渲染模式为原色或黑白。

默认值：ImageRenderMode.Original

### sourceSize

sourceSize(value: { width: number; height: number })

设置图片解码尺寸。仅在目标尺寸小于图源尺寸时生效。svg类型图源和PixelMap资源不支持该属性。

当组件的参数类型为[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)时设置该属性不生效。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

{

width: number,

height: number

}

是

图片解码尺寸，降低图片的分辨率，常用于需要让图片显示尺寸比组件尺寸更小的场景。和ImageFit.None配合使用时可在组件内显示小图。

单位：vp

### matchTextDirection

matchTextDirection(value: boolean)

设置图片是否跟随系统语言方向，在RTL语言环境下显示镜像翻转显示效果。

当组件的参数类型为[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)时设置该属性不生效。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

boolean

是

图片是否跟随系统语言方向。

默认值：false

### fitOriginalSize

fitOriginalSize(value: boolean)

设置图片的显示尺寸是否跟随图源尺寸。图片组件尺寸未设置时，其显示尺寸是否跟随图源尺寸。

当组件的参数类型为[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)时设置该属性不生效。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

boolean

是

图片的显示尺寸是否跟随图源尺寸

默认值：false

### fillColor

fillColor(value: ResourceColor)

设置填充颜色，设置后填充颜色会覆盖在图片上。仅对svg图源生效，设置后会替换svg图片的填充颜色。如需对png图片进行修改颜色，可以使用[colorFilter](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-image-V5#colorfilter9)。

当组件的参数类型为[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)时设置该属性不生效。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### autoResize

autoResize(value: boolean)

设置图片解码过程中是否对图源自动缩放。降采样解码时图片的部分信息丢失，因此可能会导致图片质量的下降（如：出现锯齿），这时可以选择把autoResize设为false，按原图尺寸解码，提升显示效果，但会增加内存占用。

原图尺寸和显示尺寸不匹配时，图片都会出现些许的失真、模糊。最佳清晰度配置建议：

图片缩小显示时：.autoResize(false) + .interpolation(.Medium)

图片放大显示时：.interpolation(.High)

当组件的参数类型为[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)时设置该属性不生效。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

boolean

是

图片解码过程中是否对图源自动缩放。设置为true时，组件会根据显示区域的尺寸决定用于绘制的图源尺寸，有利于减少内存占用。如原图大小为1920x1080，而显示区域大小为200x200，则图片会降采样解码到200x200的尺寸，大幅度节省图片占用的内存。

默认值：false

### syncLoad8+

syncLoad(value: boolean)

设置是否同步加载图片。建议加载尺寸较小的本地图片时将syncLoad设为true，因为耗时较短，在主线程上执行即可。

当组件的参数类型为[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)时设置该属性不生效。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

boolean

是

是否同步加载图片，默认是异步加载。同步加载时阻塞UI线程，不会显示占位图。

默认值：false

### copyOption9+

copyOption(value: CopyOptions)

设置图片是否可复制。当copyOption设置为非CopyOptions.None时，支持使用长按、鼠标右击、快捷组合键'CTRL+C'等方式进行复制。svg图片不支持复制。

当组件的参数类型为[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)时设置该属性不生效。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[CopyOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#copyoptions9)

是

图片是否可复制。

默认值：CopyOptions.None

### colorFilter9+

colorFilter(value: ColorFilter | DrawingColorFilter)

为图像设置颜色滤镜效果。

设置该属性时，[renderMode](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-image-V5#rendermode)属性设置不生效。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ColorFilter](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#colorfilter9) | [DrawingColorFilter](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-graphics-drawing-V5#colorfilter)12+

是

1\. 给图像设置颜色滤镜效果，入参为一个的4x5的RGBA转换矩阵。

矩阵第一行表示R（红色）的向量值，第二行表示G（绿色）的向量值，第三行表示B（蓝色）的向量值，第四行表示A（透明度）的向量值，4行分别代表不同的RGBA的向量值。

当矩阵对角线值为1，其余值为0时，保持图片原有色彩。

**计算规则：**

如果输入的滤镜矩阵为：

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114447.88892891500765933808080721373064:50001231000000:2800:732E4A712D6F1CAD2685A968C8D83D715372276656ABD8ECC81396EE753EAD85.jpg?needInitFileName=true?needInitFileName=true)

像素点为\[R, G, B, A\]

则过滤后的颜色为 \[R’, G’, B’, A’\]

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114448.50786341732988426392147690490079:50001231000000:2800:E614D259105AA838B6E6BDC16032C57AEA749899A1A9BD6B1D71FF1788C49B7E.jpg?needInitFileName=true?needInitFileName=true)

2\. 从API Version12开始支持@ohos.graphics.drawing的ColorFilter类型作为入参。

**说明：**

API Version 11及之前，svg类型图源不支持该属性。

从API version 12开始，该接口中的DrawingColorfilter类型支持在元服务中使用。其中，svg类型的图源需具有stroke属性。

### draggable9+

draggable(value: boolean)

设置组件默认拖拽效果。不能和[onDragStart](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-events-drag-drop-V5#ondragstart)事件同时使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

boolean

是

组件默认拖拽效果，设置为true时，组件可拖拽，绑定的长按手势不生效。

API version 9及之前，默认值为false。API version 10及之后，默认值为true。

若用户需要设置自定义手势，则需要将draggable设置为false。

### enableAnalyzer11+

enableAnalyzer(enable: boolean)

设置组件支持AI分析，当前支持主体识别、文字识别和对象查找等功能。具体使用指导请参考[AI识图](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/vision-imageanalyzer-V5)

不能和[overlay](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-overlay-V5)属性同时使用，两者同时设置时overlay中CustomBuilder属性将失效。该特性依赖设备能力。

分析图像要求是静态非矢量图，即svg、gif等图像类型不支持分析，支持传入[PixelMap](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-image-V5#pixelmap7)进行分析，目前仅支持[RGBA\_8888](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-image-V5#pixelmapformat7)类型，使用方式见[示例4](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-image-V5#%E7%A4%BA%E4%BE%8B4)。

alt占位图不支持分析，objectRepeat属性仅在ImageRepeat.NoRepeat下支持分析，隐私遮罩属性[obscured](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-obscured-V5)打开时不支持分析。

基于完整原始图像进行分析，设置clip、margin、borderRadius、position和objectFit属性导致图像显示不完整，或使用renderMode设置蒙层，仍基于完整原始图像进行分析。 copyOption属性不影响AI分析功能。

当组件的参数类型为[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)时设置该属性不生效。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

enable

boolean

是

组件支持AI分析，设置为true时，组件可进行AI分析。

默认值：false

### resizable11+

resizable(value: ResizableOptions)

设置图像拉伸时可调整大小的图像选项。拉伸对拖拽缩略图以及占位图有效。

设置合法的 [ResizableOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-image-V5#resizableoptions11) 时，objectRepeat 属性设置不生效。

当设置 top +bottom 大于原图的高或者 left + right 大于原图的宽时 [ResizableOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-image-V5#resizableoptions11) 属性设置不生效。

当组件的参数类型为[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)时设置该属性不生效。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### privacySensitive12+

privacySensitive(supported: boolean)

设置是否支持卡片敏感隐私信息。

**卡片能力：** 从API version 12开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

supported

boolean

是

是否支持卡片敏感隐私信息。

默认值为false，当设置为true时，隐私模式下图片将显示为半透明底板样式。

**说明：**

设置null则不敏感。

进入隐私模式需要[卡片框架支持](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-obscured-V5)。

### dynamicRangeMode12+

dynamicRangeMode(value: DynamicRangeMode)

设置期望展示的图像动态范围。

该属性仅在手机设备上生效。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

ImageInterpolation
------------------

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

名称

描述

None

最近邻插值。

High

Cubic插值，插值质量最高，可能会影响图片渲染的速度。

Medium

MipMap插值。

Low

双线性插值。

ImageRenderMode
---------------

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

名称

描述

Original

原色渲染模式。

Template

黑白渲染模式。

ResizableOptions11+
-------------------

图像拉伸时可调整大小的图像选项。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

slice

[EdgeWidths](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-image-V5#edgewidths%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E)

否

边框宽度类型，用于描述组件边框不同方向的宽度。

**说明：**

只有当bottom和right同时大于0时，该属性生效。

lattice12+

[DrawingLattice](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-graphics-drawing-V5#lattice12)

否

矩形网格对象。

**说明：**

通过@ohos.graphics.drawing的createImageLattice接口创建Lattice类型作为入参。将图像划分为矩形网格，同时处于偶数列和偶数行上的网格图像是固定的，不会被拉伸。

该参数对[backgroundImageResizable](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-background-V5#backgroundimageresizable12)接口不生效。

EdgeWidths参数说明
--------------

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

名称

类型

必填

说明

top

[Length](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#length)

否

图片顶部拉伸时保持不变距离。

默认值：0

单位：vp

right

[Length](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#length)

否

图片右部拉伸时保持不变距离。

默认值：0

单位：vp

bottom

[Length](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#length)

否

图片底部拉伸时保持不变距离。

默认值：0

单位：vp

left

[Length](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#length)

否

图片左部拉伸时保持不变距离。

默认值：0

单位：vp

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114448.95042295135195297912897481390368:50001231000000:2800:FA942EC5DE37015F0183D438A897E0748174A01F0E75CFED2E2D61720FB16743.png?needInitFileName=true?needInitFileName=true)

DynamicRangeMode12+
-------------------

期望展示的图像动态范围。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

名称

描述

High

不受限动态范围，最大限度进行图片提亮。

Constraint

受限动态范围，受限进行图片提亮。

Standard

标准动态范围，不进行图片提亮。

### onComplete

onComplete(callback: (event?: { width: number, height: number, componentWidth: number, componentHeight: number, loadingStatus: number,contentWidth: number, contentHeight: number, contentOffsetX: number, contentOffsetY: number }) =\> void)

图片数据加载成功和解码成功时均触发该回调，返回成功加载的图片尺寸。

当组件的参数类型为[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)时该事件不触发。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

width

number

是

图片的宽。

单位：像素

height

number

是

图片的高。

单位：像素

componentWidth

number

是

组件的宽。

单位：像素

componentHeight

number

是

组件的高。

单位：像素

loadingStatus

number

是

图片加载成功的状态值。

**说明：**

返回的状态值为0时，表示图片数据加载成功。返回的状态值为1时，表示图片解码成功。

contentWidth10+

number

是

图片实际绘制的宽度。

单位：像素

**说明：**

仅在loadingStatus返回1时有效。

contentHeight10+

number

是

图片实际绘制的高度。

单位：像素

**说明：**

仅在loadingStatus返回1时有效。

contentOffsetX10+

number

是

实际绘制内容相对于组件自身的x轴偏移。

单位：像素

**说明：**

仅在loadingStatus返回1时有效。

contentOffsetY10+

number

是

实际绘制内容相对于组件自身的y轴偏移。

单位：像素

**说明：**

仅在loadingStatus返回1时有效。

### onError9+

onError(callback: ImageErrorCallback)

图片加载异常时触发该回调。

当组件的参数类型为[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)时该事件不触发。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### onFinish

onFinish(event: () =\> void)

当加载的源文件为带动效的svg格式图片时，svg动效播放完成时会触发这个回调。如果动效为无限循环动效，则不会触发这个回调。

仅支持svg格式的图片。当组件的参数类型为[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)时该事件不触发。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

ImageErrorCallback9+
--------------------

type ImageErrorCallback = (error: ImageError) =\> void

图片加载异常时触发的回调。

当组件的参数类型为[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)时该事件不触发。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

ImageError9+
------------

图片加载异常时触发回调的返回对象。

当组件的参数类型为[AnimatedDrawableDescriptor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-drawabledescriptor-V5#animateddrawabledescriptor12)时该事件不触发。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

componentWidth

number

是

组件的宽。

单位：像素

componentHeight

number

是

组件的高。

单位：像素

message10+

string

是

报错信息。

示例
--

### 示例1

加载基本类型图片

1.  @Entry
2.  @Component
3.  struct ImageExample1 {
4.    build() {
5.      Column() {
6.        Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start }) {
7.          Row() {

9.            Image($r('app.media.ic\_camera\_master\_ai\_leaf'))
10.              .width(110).height(110).margin(15)
11.              .overlay('png', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })

13.            Image($r('app.media.loading'))
14.              .width(110).height(110).margin(15)
15.              .overlay('gif', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })
16.          }
17.          Row() {

19.            Image($r('app.media.ic\_camera\_master\_ai\_clouded'))
20.              .width(110).height(110).margin(15)
21.              .overlay('svg', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })

23.            Image($r('app.media.ic\_public\_favor\_filled'))
24.              .width(110).height(110).margin(15)
25.              .overlay('jpg', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })
26.          }
27.        }
28.      }.height(320).width(360).padding({ right: 10, top: 10 })
29.    }
30.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114448.49468638463465731921832961154721:50001231000000:2800:608547A00396C32AF855639C412C67B96688851BD68BC16E9147DAD98A591636.gif?needInitFileName=true?needInitFileName=true)

### 示例2

加载网络图片时，默认网络超时是5分钟，建议使用alt配置加载时的占位图。使用[HTTP](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/http-request-V5)工具包发送网络请求，接着将返回的数据解码为Image组件中的PixelMap，图片开发可参考[图片处理](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/image-overview-V5)。

使用网络图片时，需要申请权限ohos.permission.INTERNET。具体申请方式请参考[声明权限](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/declare-permissions-V5)。

1.  import { http } from '@kit.NetworkKit';
2.  import { BusinessError } from '@kit.BasicServicesKit';
3.  import { image } from '@kit.ImageKit';

5.  @Entry
6.  @Component
7.  struct ImageExample2 {
8.    @State pixelMapImg: PixelMap | undefined = undefined;

10.    aboutToAppear() {
11.      this.requestImageUrl('https://www.example.com/xxx.png');
12.    }

14.    requestImageUrl(url: string) {
15.      http.createHttp().request(url, (error: BusinessError, data: http.HttpResponse)=\> {
16.        if (error) {
17.          console.error(\`request image failed: url: ${url}, code: ${error.code}, message: ${error.message}\`);
18.        } else {
19.          let imgData: ArrayBuffer = data.result as ArrayBuffer;
20.          console.info(\`request image success, size: ${imgData.byteLength}\`);
21.          let imgSource: image.ImageSource = image.createImageSource(imgData);
22.          class sizeTmp {
23.            height: number = 100
24.            width: number = 100
25.          }
26.          let options: Record<string, number | boolean | sizeTmp\> = {
27.            'alphaType': 0,
28.            'editable': false,
29.            'pixelFormat': 3,
30.            'scaleMode': 1,
31.            'size': { height: 100, width: 100 }
32.          }
33.          imgSource.createPixelMap(options).then((pixelMap: PixelMap) =\> {
34.            console.error('image createPixelMap success');
35.            this.pixelMapImg = pixelMap;
36.          })
37.        }
38.      })
39.    }

41.    build() {
42.      Column() {
43.        Image(this.pixelMapImg)
44.          .alt($r('app.media.img'))
45.          .objectFit(ImageFit.None)
46.          .width('100%')
47.          .height('100%')
48.      }
49.    }
50.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114448.23523689616327112418666770078650:50001231000000:2800:FAFC66CBE2B8AA979D1A5E784CB0BC624F36A1799BA266DB2AC1CD2528A748C7.gif?needInitFileName=true?needInitFileName=true)

### 示例3

为图片添加事件

1.  @Entry
2.  @Component
3.  struct ImageExample3 {
4.    private imageOne: Resource = $r('app.media.earth');
5.    private imageTwo: Resource = $r('app.media.star');
6.    private imageThree: Resource = $r('app.media.moveStar');
7.    @State src: Resource = this.imageOne
8.    @State src2: Resource = this.imageThree
9.    build(){
10.      Column(){

12.        Image(this.src)
13.          .width(100)
14.          .height(100)
15.          .onClick(() =\> {
16.            this.src = this.imageTwo
17.          })

20.        Image(this.src2)
21.          .width(100)
22.          .height(100)
23.          .onFinish(() =\> {

25.            this.src2 = this.imageOne
26.          })
27.      }.width('100%').height('100%')
28.    }
29.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114448.16901184968131957703848418545971:50001231000000:2800:4795F141C403F5CA1273A114B86C59574CB57DD32242EE8EB9DF338EFA2E0A6B.gif?needInitFileName=true?needInitFileName=true)

### 示例4

1.  import { image } from '@kit.ImageKit'

3.  @Entry
4.  @Component
5.  struct ImageExample4 {
6.    @State imagePixelMap: image.PixelMap | undefined = undefined
7.    private aiController: ImageAnalyzerController = new ImageAnalyzerController()
8.    private options: ImageAIOptions = {
9.      types: \[ImageAnalyzerType.SUBJECT, ImageAnalyzerType.TEXT\],
10.      aiController: this.aiController
11.    }

13.    async aboutToAppear() {
14.      this.imagePixelMap = await this.getPixmapFromMedia($r('app.media.img'))
15.    }

17.    build() {
18.      Column() {
19.        Image(this.imagePixelMap, this.options)
20.          .enableAnalyzer(true)
21.          .objectFit(ImageFit.Contain)
22.          .width(200)
23.          .height(300)
24.          .margin({left: 10})
25.        Button('getTypes')
26.          .onClick(() =\> {
27.            this.aiController.getImageAnalyzerSupportTypes()
28.          })
29.      }
30.    }
31.    private async getPixmapFromMedia(resource: Resource) {
32.      let unit8Array = await getContext(this)?.resourceManager?.getMediaContent({
33.        bundleName: resource.bundleName,
34.        moduleName: resource.moduleName,
35.        id: resource.id
36.      })
37.      let imageSource = image.createImageSource(unit8Array.buffer.slice(0, unit8Array.buffer.byteLength))
38.      let createPixelMap: image.PixelMap = await imageSource.createPixelMap({
39.        desiredPixelFormat: image.PixelMapFormat.RGBA\_8888
40.      })
41.      await imageSource.release()
42.      return createPixelMap
43.    }
44.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114448.56319921766565797792428806258902:50001231000000:2800:B0AEDC467B65E6D0DEF7D1321A668BCD24C30A5C38A4B3878AD4239BF3E3E522.png?needInitFileName=true?needInitFileName=true)

### 示例5

调整不同方向对图片进行拉伸

1.  @Entry
2.  @Component
3.  struct Index {
4.    @State top: number = 40
5.    @State bottom: number = 5
6.    @State left: number = 40
7.    @State right: number = 10

9.    build() {
10.      Column({ space: 5 }) {

12.        Image($r("app.media.sky"))
13.          .width(200).height(200)
14.          .border({ width: 2, color: Color.Pink })
15.          .objectFit(ImageFit.Contain)

18.        Image($r("app.media.sky"))
19.          .resizable({
20.            slice: {
21.              left: this.left,
22.              right: this.right,
23.              top: this.top,
24.              bottom: this.bottom
25.            }
26.          })
27.          .width(200)
28.          .height(200)
29.          .border({ width: 2, color: Color.Pink })
30.          .objectFit(ImageFit.Contain)

32.        Row() {
33.          Button("add top to " + this.top).fontSize(10)
34.            .onClick(() =\> {
35.              this.top += 2
36.            })
37.          Button("add bottom to " + this.bottom).fontSize(10)
38.            .onClick(() =\> {
39.              this.bottom += 2
40.            })
41.        }

43.        Row() {
44.          Button("add left to " + this.left).fontSize(10)
45.            .onClick(() =\> {
46.              this.left += 2
47.            })
48.          Button("add right to " + this.right).fontSize(10)
49.            .onClick(() =\> {
50.              this.right += 2
51.            })
52.        }

54.      }
55.      .justifyContent(FlexAlign.Start).width('100%').height('100%')
56.    }
57.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114448.83960608455933164706221555546491:50001231000000:2800:ACC616E7B94C68180341D93561B2B1C1A1DBE5B73833BF836AD435FB41D97F27.gif?needInitFileName=true?needInitFileName=true)

### 示例6

播放PixelMap数组动画

1.  import {AnimationOptions, AnimatedDrawableDescriptor} from '@kit.ArkUI'
2.  import { image } from '@kit.ImageKit'

4.  @Entry
5.  @Component
6.  struct ImageExample {
7.    pixelmaps: Array<PixelMap\>  = \[\];
8.    options: AnimationOptions = {duration:2000, iterations:1};
9.    @State animated: AnimatedDrawableDescriptor | undefined = undefined;

11.    async aboutToAppear() {
12.      this.pixelmaps = await this.getPixelMaps();
13.      this.animated = new AnimatedDrawableDescriptor(this.pixelmaps, this.options);
14.    }

16.    build() {
17.      Column() {
18.        Row() {
19.          Image(this.animated)
20.            .width('500px').height('500px')
21.            .onFinish(() =\> {
22.              console.info("finish")
23.            })
24.        }.height('50%')
25.        Row() {
26.          Button('once').width(100).padding(5).onClick(() =\> {
27.            this.options = {duration:2000, iterations:1};
28.            this.animated = new AnimatedDrawableDescriptor(this.pixelmaps, this.options);
29.          }).margin(5)
30.          Button('infinite').width(100).padding(5).onClick(() =\> {
31.            this.options = {duration:2000, iterations:-1};
32.            this.animated = new AnimatedDrawableDescriptor(this.pixelmaps, this.options);
33.          }).margin(5)
34.        }
35.      }.width('50%')
36.    }

38.    private async getPixmapListFromMedia(resource: Resource) {
39.      let unit8Array = await getContext(this)?.resourceManager?.getMediaContent({
40.        bundleName: resource.bundleName,
41.        moduleName: resource.moduleName,
42.        id: resource.id
43.      })
44.      let imageSource = image.createImageSource(unit8Array.buffer.slice(0, unit8Array.buffer.byteLength))
45.      let createPixelMap: Array<image.PixelMap\> = await imageSource.createPixelMapList({
46.        desiredPixelFormat: image.PixelMapFormat.RGBA\_8888
47.      })
48.      await imageSource.release()
49.      return createPixelMap
50.    }

52.    private async getPixmapFromMedia(resource: Resource) {
53.      let unit8Array = await getContext(this)?.resourceManager?.getMediaContent({
54.        bundleName: resource.bundleName,
55.        moduleName: resource.moduleName,
56.        id: resource.id
57.      })
58.      let imageSource = image.createImageSource(unit8Array.buffer.slice(0, unit8Array.buffer.byteLength))
59.      let createPixelMap: image.PixelMap = await imageSource.createPixelMap({
60.        desiredPixelFormat: image.PixelMapFormat.RGBA\_8888
61.      })
62.      await imageSource.release()
63.      return createPixelMap
64.    }

66.    private async getPixelMaps() {
67.      let Mypixelmaps:Array<PixelMap\> = await this.getPixmapListFromMedia($r('app.media.view'))
68.      Mypixelmaps.push(await this.getPixmapFromMedia($r('app.media.icon'))) 
69.      return Mypixelmaps;
70.    }
71.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114448.09374685239923420780179518790312:50001231000000:2800:5274BC3F4176AD8E96801872A86C92A5D1B6594D327AD21BEDFE85C27FA159DD.gif?needInitFileName=true?needInitFileName=true)

### 示例7

该示例实现了给图像设置颜色滤镜效果

1.  import { drawing, common2D } from '@kit.ArkGraphics2D';

3.  @Entry
4.  @Component
5.  struct ImageExample3 {
6.    private imageOne: Resource = $r('app.media.1');
7.    private imageTwo: Resource = $r('app.media.2');
8.    @State src: Resource = this.imageOne
9.    @State src2: Resource = this.imageTwo
10.    private ColorFilterMatrix: number\[\] = \[1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0\]
11.    private color: common2D.Color = { alpha: 255, red: 255, green: 0, blue: 0 };
12.    @State DrawingColorFilterFirst: ColorFilter | undefined = undefined
13.    @State DrawingColorFilterSecond: ColorFilter | undefined = undefined
14.    @State DrawingColorFilterThird: ColorFilter | undefined = undefined

16.    build() {
17.      Column() {
18.        Image(this.src)
19.          .width(100)
20.          .height(100)
21.          .colorFilter(this.DrawingColorFilterFirst)
22.          .onClick(()=\>{
23.            this.DrawingColorFilterFirst = drawing.ColorFilter.createBlendModeColorFilter(this.color, drawing.BlendMode.SRC\_IN);
24.          })

26.        Image(this.src2)
27.          .width(100)
28.          .height(100)
29.          .colorFilter(this.DrawingColorFilterSecond)
30.          .onClick(()=\>{
31.            this.DrawingColorFilterSecond = new ColorFilter(this.ColorFilterMatrix);
32.          })

35.        Image($r('app.media.test\_self'))
36.          .width(110).height(110).margin(15)
37.          .colorFilter(this.DrawingColorFilterThird)
38.          .onClick(()=\>{
39.            this.DrawingColorFilterThird = drawing.ColorFilter.createBlendModeColorFilter(this.color, drawing.BlendMode.SRC\_IN);
40.          })
41.      }
42.    }
43.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114448.52102207336895601224233026592649:50001231000000:2800:35E551E11613CCE8219EBB9B76CDCE6B817523AD0253DE00916ADD2B997ED1D9.gif?needInitFileName=true?needInitFileName=true)

### 示例8

该示例实现了给图像设置objectFit效果

1.  @Entry
2.  @Component
3.  struct ImageExample{
4.    build() {
5.      Column() {
6.        Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start }) {
7.          Row() {

9.            Image($r('app.media.sky'))
10.              .width(110).height(110).margin(15)
11.              .overlay('png', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })
12.              .border({ width: 2, color: Color.Pink })
13.              .objectFit(ImageFit.TOP\_START)

15.            Image($r('app.media.loading'))
16.              .width(110).height(110).margin(15)
17.              .overlay('gif', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })
18.              .border({ width: 2, color: Color.Pink })
19.              .objectFit(ImageFit.BOTTOM\_START)
20.          }
21.          Row() {

23.            Image($r('app.media.svg'))
24.              .width(110).height(110).margin(15)
25.              .overlay('svg', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })
26.              .border({ width: 2, color: Color.Pink })
27.              .objectFit(ImageFit.TOP\_END)

29.            Image($r('app.media.jpg'))
30.              .width(110).height(110).margin(15)
31.              .overlay('jpg', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })
32.              .border({ width: 2, color: Color.Pink })
33.              .objectFit(ImageFit.CENTER)
34.          }
35.        }
36.      }.height(320).width(360).padding({ right: 10, top: 10 })
37.    }
38.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114448.25298257840259929711491533122633:50001231000000:2800:04DD1574FE1A2DA46BEA9CB8954C02C1D3F86E2C6050AE6E8386C505E16C4997.gif?needInitFileName=true?needInitFileName=true)

### 示例9

该示例展示了ResourceStr类型与ImageContent类型作为数据源的显示图片效果。

1.  @Entry
2.  @Component
3.  struct ImageContentExample {
4.    @State imageSrcIndex: number = 0;
5.    @State imageSrcList: (ResourceStr | ImageContent)\[\] = \[$r('app.media.app\_icon'), ImageContent.EMPTY\]

7.    build() {
8.      Column({ space: 10 }) {
9.        Image(this.imageSrcList\[this.imageSrcIndex\])
10.          .width(100)
11.          .height(100)
12.        Button('点击切换Image的src')
13.          .padding(20)
14.          .onClick(() =\> {
15.            this.imageSrcIndex = (this.imageSrcIndex + 1) % this.imageSrcList.length
16.          })
17.      }.width('100%')
18.      .padding(20)
19.    }
20.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114448.38636641079458978046331608318096:50001231000000:2800:FFB1F26247B4E83094AAAB718D9D2F6F18183DD07458F1D5B72F3620060BD347.gif?needInitFileName=true?needInitFileName=true)

### 示例10

该示例展示了如何配置隐私隐藏，效果展示需要卡片框架支持

1.  @Entry
2.  @Component
3.  struct ImageExample {
4.    build() {
5.      Column({ space: 10 }) {
6.        Image($r("app.media.startIcon"))
7.          .width(50)
8.          .height(50)
9.          .margin({top :30})
10.          .privacySensitive(true)
11.      }
12.      .alignItems(HorizontalAlign.Center)
13.      .width("100%")
14.    }
15.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114448.44910977396490761753516719387505:50001231000000:2800:15325F14D9722E004FDC6D8F33EA64E112EDCFA64099BEA9D3BE19AF667C32FE.gif?needInitFileName=true?needInitFileName=true)

### 示例11

该示例实现了给图片设置扫光效果。

1.  import { curves } from '@kit.ArkUI';

3.  @Entry
4.  @Component
5.  struct ImageExample11 {
6.    private curve = curves.cubicBezier(0.33, 0, 0.67, 1);
7.    @State moveImg: string\[\] = \['imageScanEffect'\];
8.    @State moveImgVisible: Visibility = Visibility.Visible;
9.    @State durationTime: number = 1500;
10.    @State iterationsTimes: number = -1;
11.    @State private opacityValue: number = 0.5;
12.    @State imageWidth: number = 450;
13.    @State visible: Visibility = Visibility.Hidden;
14.    @State stackBackgroundColor: string = '#E1E4E9';
15.    @State linePositionX: number = 0 - this.imageWidth;
16.    @State linePositionY: number = 0;
17.    @State imgResource: Resource | undefined = undefined;

19.    startupAnimate() {
20.      this.moveImg.pop();
21.      this.moveImg.push('imageScanEffect');
22.      setTimeout(() =\> {
23.        this.imgResource = $r('app.media.img');
24.      }, 3000);
25.      animateTo({
26.        duration: this.durationTime,
27.        curve: this.curve,
28.        tempo: 1,
29.        iterations: this.iterationsTimes,
30.        delay: 0
31.      }, () =\> {
32.        this.linePositionX = this.imageWidth;
33.      })
34.    }

36.    build() {
37.      Column() {
38.        Row() {
39.          Stack() {
40.            Image(this.imgResource)
41.              .width(this.imageWidth)
42.              .height(200)
43.              .objectFit(ImageFit.Contain)
44.              .visibility(this.visible)
45.              .onComplete(() =\> {
46.                this.visible = Visibility.Visible;
47.                this.moveImg.pop();
48.              })
49.              .onError(() =\>{
50.                setTimeout(() =\> {
51.                  this.visible = Visibility.Visible;
52.                  this.moveImg.pop();
53.                }, 2600)
54.              })
55.            ForEach(this.moveImg, (item: string) =\> {
56.              Row()
57.                .width(this.imageWidth)
58.                .height(200)
59.                .visibility(this.moveImgVisible)
60.                .position({ x: this.linePositionX, y: this.linePositionY })
61.                .linearGradient({
62.                  direction: GradientDirection.Right,
63.                  repeating: false,
64.                  colors: \[\[0xE1E4E9, 0\], \[0xFFFFFF, 0.75\], \[0xE1E4E9, 1\]\]
65.                })
66.                .opacity(this.opacityValue)
67.            })
68.          }
69.          .backgroundColor(this.visible ? this.stackBackgroundColor : undefined)
70.          .margin({top: 20, left: 20, right: 20})
71.          .borderRadius(20)
72.          .clip(true)
73.          .onAppear(() =\> {
74.            this.startupAnimate();
75.          })
76.        }
77.      }
78.    }
79.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114448.90470550698370603940846569790553:50001231000000:2800:22D985648DEFA6A83A9C05AAA8B549AD94A886C8D6D2C87EA00078B719C62C93.gif?needInitFileName=true?needInitFileName=true)
