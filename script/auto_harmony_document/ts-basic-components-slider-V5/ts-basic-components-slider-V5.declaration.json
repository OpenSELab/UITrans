{
    "description": "滑动条组件，通常用于快速调节设置值，如音量调节、亮度调节等应用场景。",
    "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
    "interfaces": [
        {
            "description": "Slider(options?: SliderOptions)",
            "params": {
                "options": {
                    "type": "SliderOptions",
                    "description": "滑动条的配置选项。"
                }
            }
        }
    ],
    "attributes": {
        "value": {
            "description": "当前进度值。",
            "params": {
                "value": {
                    "type": "number",
                    "description": "当前进度值。",
                    "default": "与参数min的取值一致。"
                }
            }
        },
        "min": {
            "description": "设置最小值。",
            "params": {
                "value": {
                    "type": "number",
                    "description": "最小值。",
                    "default": "0"
                }
            }
        },
        "max": {
            "description": "设置最大值。",
            "params": {
                "value": {
                    "type": "number",
                    "description": "最大值。",
                    "default": "100"
                }
            }
        },
        "step": {
            "description": "设置Slider滑动步长。",
            "params": {
                "value": {
                    "type": "number",
                    "description": "滑动步长。",
                    "default": "1"
                }
            }
        },
        "style": {
            "description": "设置Slider的滑块与滑轨显示样式。",
            "params": {
                "value": {
                    "type": "SliderStyle",
                    "description": "滑块与滑轨显示样式。",
                    "default": "SliderStyle.OutSet"
                }
            }
        },
        "direction": {
            "description": "设置滑动条滑动方向为水平或竖直方向。",
            "params": {
                "value": {
                    "type": "Axis",
                    "description": "滑动方向。",
                    "default": "Axis.Horizontal"
                }
            }
        },
        "reverse": {
            "description": "设置滑动条取值范围是否反向。",
            "params": {
                "value": {
                    "type": "boolean",
                    "description": "取值范围是否反向。",
                    "default": "false"
                }
            }
        },
        "blockColor": {
            "description": "设置滑块的颜色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "滑块的颜色。"
                }
            }
        },
        "trackColor": {
            "description": "设置滑轨的背景颜色。",
            "params": {
                "value": {
                    "type": [
                        "ResourceColor",
                        "LinearGradient"
                    ],
                    "required": true,
                    "description": "滑轨的背景颜色。"
                }
            }
        },
        "selectedColor": {
            "description": "设置滑轨的已滑动部分颜色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "滑轨的已滑动部分颜色。"
                }
            }
        },
        "showSteps": {
            "description": "设置当前是否显示步长刻度值。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "当前是否显示步长刻度值。",
                    "default": "false"
                }
            }
        },
        "showTips": {
            "description": "设置滑动时是否显示气泡提示。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "滑动时是否显示气泡提示。",
                    "default": "false"
                },
                "content": {
                    "type": "ResourceStr",
                    "description": "气泡提示的文本内容，默认显示当前百分比。"
                }
            }
        },
        "trackThickness": {
            "description": "设置滑轨的粗细。",
            "params": {
                "value": {
                    "type": "Length",
                    "required": true,
                    "description": "滑轨的粗细。"
                }
            }
        },
        "blockBorderColor": {
            "description": "设置滑块描边颜色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "滑块描边颜色。"
                }
            }
        },
        "blockBorderWidth": {
            "description": "设置滑块描边粗细。",
            "params": {
                "value": {
                    "type": "Length",
                    "required": true,
                    "description": "滑块描边粗细。"
                }
            }
        },
        "stepColor": {
            "description": "设置刻度颜色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "刻度颜色。"
                }
            }
        },
        "trackBorderRadius": {
            "description": "设置底板圆角半径。",
            "params": {
                "value": {
                    "type": "Length",
                    "required": true,
                    "description": "底板圆角半径。"
                }
            }
        },
        "selectedBorderRadius": {
            "description": "设置已滑动部分（高亮）圆角半径。",
            "params": {
                "value": {
                    "type": "Dimension",
                    "required": true,
                    "description": "已选择部分圆角半径。"
                }
            }
        },
        "blockSize": {
            "description": "设置滑块大小。",
            "params": {
                "value": {
                    "type": "SizeOptions",
                    "required": true,
                    "description": "滑块大小。"
                }
            }
        },
        "blockStyle": {
            "description": "设置滑块形状参数。",
            "params": {
                "value": {
                    "type": "SliderBlockStyle",
                    "required": true,
                    "description": "滑块形状参数。"
                }
            }
        },
        "stepSize": {
            "description": "设置刻度大小（直径）。",
            "params": {
                "value": {
                    "type": "Length",
                    "required": true,
                    "description": "刻度大小（直径）。"
                }
            }
        },
        "sliderInteractionMode": {
            "description": "设置用户与滑动条组件交互方式。",
            "params": {
                "value": {
                    "type": "SliderInteraction",
                    "required": true,
                    "description": "用户与滑动条组件交互方式。",
                    "default": "SliderInteraction.SLIDE_AND_CLICK"
                }
            }
        },
        "minResponsiveDistance": {
            "description": "设置滑动响应的最小距离。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "滑动响应的最小距离。"
                }
            }
        },
        "contentModifier": {
            "description": "定制Slider内容区的方法。",
            "params": {
                "modifier": {
                    "type": "ContentModifier<SliderConfiguration>",
                    "required": true,
                    "description": "定制Slider内容区的方法。"
                }
            }
        },
        "slideRange": {
            "description": "设置有效滑动区间。",
            "params": {
                "value": {
                    "type": "SlideRange",
                    "required": true,
                    "description": "有效滑动区间。"
                }
            }
        }
    },
    "events": {
        "onChange": {
            "description": "Slider拖动或点击时触发事件回调。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "当前滑动进度值。"
                },
                "mode": {
                    "type": "SliderChangeMode",
                    "required": true,
                    "description": "事件触发的相关状态值。"
                }
            }
        }
    },
    "rules": [
        "Slider无默认padding。",
        "当Slider为水平滑动条时，Slider默认高度为40vp，宽度为父容器的宽度，滑动条居中显示，左右间距为分别为10vp，若设置padding，padding不会覆盖左右间距。",
        "当Slider为竖直滑动条时，Slider默认宽度为40vp，高度为父容器的高度，滑动条居中显示，上下间距为分别为6vp，若设置padding，padding不会覆盖上下间距。"
    ],
    "examples": [
        {
            "description": "该组件通过 Row 和 Column 布局实现了一个包含进度条、按钮和滑动条的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个进度条、两个按钮（增加和减少）、一个滑动条以及多个文本标签。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n\n进度条的样式为环形，显示当前进度值。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。滑动条的样式包括显示步长、宽度自适应等属性。文本标签的样式包括字体大小、颜色等属性，用于显示当前状态、进度值、最小值、最大值和步长。\n\n按钮的功能包括点击事件，用户可以通过点击按钮增加或减少滑动条的值。滑动条的功能包括拖动事件，用户可以通过拖动滑动条改变其值。整个布局通过 Row 和 Column 布局保证组件在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Builder function buildSlider(config: SliderConfiguration) {\n  Row() {\n    Column({space: 30}) {\n      // 创建一个环形进度条，显示当前进度值\n      Progress({value: config.value, total: config.max, type:ProgressType.Ring})\n        .margin({ top:20 })\n\n      // 创建一个按钮，点击后增加滑动条的值\n      Button('增加').onClick(() => {\n        config.value = config.value + config.step\n        config.triggerChange(config.value, SliderChangeMode.Click)\n      })\n        .width(100) // 设置按钮宽度\n        .height(25) // 设置按钮高度\n        .fontSize(10) // 设置按钮字体大小\n        .enabled(config.value<config.max) // 设置按钮是否启用，当值小于最大值时启用\n\n      // 创建一个按钮，点击后减少滑动条的值\n      Button('减少').onClick(() => {\n        config.value = config.value - config.step\n        config.triggerChange(config.value, SliderChangeMode.Click)\n      })\n        .width(100) // 设置按钮宽度\n        .height(25) // 设置按钮高度\n        .fontSize(10) // 设置按钮字体大小\n        .enabled(config.value>config.min) // 设置按钮是否启用，当值大于最小值时启用\n\n      // 创建一个滑动条，显示当前值，并支持拖动改变值\n      Slider({\n        value: config.value,\n        min: config.min,\n        max: config.max,\n        step:config.step,\n      })\n        .width(config.max) // 设置滑动条宽度\n        .visibility((config.contentModifier as MySliderStyle).showSlider?Visibility.Visible:Visibility.Hidden) // 根据配置显示或隐藏滑动条\n        .showSteps(true) // 显示步长\n        .onChange((value: number, mode: SliderChangeMode) => {\n          config.triggerChange(value, mode)\n        })\n\n      // 显示当前滑动条的状态（Begin, Moving, End, Click）\n      Text('当前状态：' + ((config.contentModifier as MySliderStyle).sliderChangeMode==0?\"Begin\"\n        :((config.contentModifier as MySliderStyle).sliderChangeMode==1?\"Moving\"\n          :((config.contentModifier as MySliderStyle).sliderChangeMode==2?\"End\"\n            :((config.contentModifier as MySliderStyle).sliderChangeMode==3?\"Click\":\"无\")))))\n        .fontSize(10) // 设置文本字体大小\n\n      // 显示当前滑动条的进度值\n      Text('进度值：' + config.value)\n        .fontSize(10) // 设置文本字体大小\n\n      // 显示滑动条的最小值\n      Text('最小值：' + config.min)\n        .fontSize(10) // 设置文本字体大小\n\n      // 显示滑动条的最大值\n      Text('最大值：' + config.max)\n        .fontSize(10) // 设置文本字体大小\n\n      // 显示滑动条的步长\n      Text('步长：' + config.step)\n        .fontSize(10) // 设置文本字体大小\n    }\n    .width('80%') // 设置列的宽度为父容器的80%\n  }\n  .width('100%') // 设置行的宽度为父容器的100%\n}\n\n// 定义一个类，用于配置滑动条的显示和状态\nclass MySliderStyle implements ContentModifier<SliderConfiguration> {\n  showSlider:boolean = true // 是否显示滑动条\n  sliderChangeMode:number = 0 // 滑动条的状态\n  constructor(showSlider: boolean,sliderChangeMode:number) {\n    this.showSlider = showSlider\n    this.sliderChangeMode = sliderChangeMode\n  }\n  applyContent() : WrappedBuilder<[SliderConfiguration]> {\n    return wrapBuilder(buildSlider)\n  }\n}\n\n@Entry\n@Component\nstruct SliderExample {\n  @State showSlider:boolean = true // 是否显示滑动条\n  @State sliderValue: number = 0 // 滑动条的当前值\n  @State sliderMin: number = 10 // 滑动条的最小值\n  @State sliderMax: number = 100 // 滑动条的最大值\n  @State sliderStep: number = 20 // 滑动条的步长\n  @State sliderChangeMode: number = 0 // 滑动条的状态\n\n  build() {\n    Column({ space: 8 }) {\n      Row() {\n        // 创建一个滑动条，显示当前值，并支持拖动改变值\n        Slider({\n          value: this.sliderValue,\n          min: this.sliderMin,\n          max: this.sliderMax,\n          step:this.sliderStep,\n        })\n          .showSteps(true) // 显示步长\n          .onChange((value: number, mode: SliderChangeMode) => {\n            this.sliderValue = value\n            this.sliderChangeMode = mode\n            console.info('【SliderLog】value:' + value + 'mode:' + mode.toString())\n          })\n          .contentModifier(new MySliderStyle(this.showSlider,this.sliderChangeMode)) // 应用自定义样式\n      }\n      .width('100%') // 设置行的宽度为父容器的100%\n    }\n    .width('100%') // 设置列的宽度为父容器的100%\n  }\n}"
        },
        {
            "description": "该组件通过 Column 布局实现了一个展示多种 Slider 组件样式和功能的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一个 Slider 组件。每个 Slider 组件的样式和功能各不相同，展示了不同的属性设置和交互效果。\n\n布局属性：\n- 使用 Column 布局，垂直排列各个子组件。\n- 每个子组件的宽度设置为 '90%'，确保在不同屏幕尺寸下都能良好显示。\n- 使用 space 属性设置子组件之间的间距为 8vp。\n- 使用 margin 属性设置标题的上下边距为 15vp。\n\n组件的样式和外观：\n- 标题使用 Text 组件，字体大小为 9vp，颜色为 0xCCCCCC，居中显示。\n- Slider 组件的样式包括 OutSet 和 InSet 两种，分别展示了不同的外观效果。\n- 通过 blockSize、blockBorderColor、blockBorderWidth 等属性自定义滑块的尺寸、边框颜色和宽度。\n- 通过 stepSize、stepColor 等属性自定义步长和步长颜色。\n- 通过 trackBorderRadius、selectedBorderRadius 等属性自定义轨道和选中部分的圆角。\n- 通过 blockStyle 属性自定义滑块的样式，包括默认样式、图片样式和自定义形状样式。\n- 通过 showTips 属性在滑块上显示提示信息，提示信息的内容为当前滑块的值。\n\n组件的排列和嵌套关系：\n- 使用 Column 布局，垂直排列各个子组件。\n- 每个子组件包含一个标题和一个 Slider 组件，标题在 Slider 组件的上方。\n- 使用 Divider 组件分隔不同的 Slider 组件部分，确保界面整洁。\n\n组件的功能和交互：\n- Slider 组件支持用户通过拖动滑块改变值，并实时更新显示的提示信息。\n- 通过 onChange 事件监听滑块值的变化，并将变化后的值更新到状态变量 tipsValue 中。\n- 通过 showTips 属性在滑块上显示提示信息，提示信息的内容为当前滑块的值。",
            "code": "@Entry\n@Component\nstruct SliderExample {\n  @State tipsValue: number = 40 // 初始化状态变量 tipsValue，用于存储滑块的当前值\n\n  build() {\n    Column({ space: 8 }) { // 使用 Column 布局，设置子组件之间的间距为 8vp\n      Text('block').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%') // 标题文本，字体大小为 9vp，颜色为 0xCCCCCC，上下边距为 15vp，宽度为 '90%'\n      Slider({ style: SliderStyle.OutSet, value: 40 }) // 创建一个 Slider 组件，样式为 OutSet，初始值为 40\n        .blockSize({ width: 40, height: 40 }) // 设置滑块的尺寸为 40x40vp\n        .blockBorderColor(Color.Red) // 设置滑块边框颜色为红色\n        .blockBorderWidth(5) // 设置滑块边框宽度为 5vp\n      Divider() // 分隔线，用于分隔不同的 Slider 组件部分\n      Text('step').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%') // 标题文本，字体大小为 9vp，颜色为 0xCCCCCC，上下边距为 15vp，宽度为 '90%'\n      Slider({ style: SliderStyle.InSet, value: 40, step: 10 }) // 创建一个 Slider 组件，样式为 InSet，初始值为 40，步长为 10\n        .showSteps(true) // 显示步长标记\n        .stepSize(8) // 设置步长标记的尺寸为 8vp\n        .stepColor(Color.Yellow) // 设置步长标记的颜色为黄色\n      Divider() // 分隔线，用于分隔不同的 Slider 组件部分\n      Text('track').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%') // 标题文本，字体大小为 9vp，颜色为 0xCCCCCC，上下边距为 15vp，宽度为 '90%'\n      Slider({ style: SliderStyle.InSet, value: 40 }) // 创建一个 Slider 组件，样式为 InSet，初始值为 40\n        .trackBorderRadius(2) // 设置轨道部分的圆角为 2vp\n      Divider() // 分隔线，用于分隔不同的 Slider 组件部分\n      Text('selected').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%') // 标题文本，字体大小为 9vp，颜色为 0xCCCCCC，上下边距为 15vp，宽度为 '90%'\n      Slider({ style: SliderStyle.InSet, value: 40 }) // 创建一个 Slider 组件，样式为 InSet，初始值为 40\n        .selectedBorderRadius(2) // 设置选中部分的圆角为 2vp\n      Divider() // 分隔线，用于分隔不同的 Slider 组件部分\n      Text('blockStyle').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%') // 标题文本，字体大小为 9vp，颜色为 0xCCCCCC，上下边距为 15vp，宽度为 '90%'\n      Slider({ style: SliderStyle.OutSet, value: 40 }) // 创建一个 Slider 组件，样式为 OutSet，初始值为 40\n        .blockStyle({ type: SliderBlockType.DEFAULT }) // 设置滑块样式为默认样式\n      Slider({ style: SliderStyle.OutSet, value: 40 }) // 创建一个 Slider 组件，样式为 OutSet，初始值为 40\n        .blockStyle({ type: SliderBlockType.IMAGE, image: $r('sys.media.ohos_app_icon') }) // 设置滑块样式为图片样式，图片资源为系统应用图标\n      Slider({ style: SliderStyle.OutSet, value: 40 }) // 创建一个 Slider 组件，样式为 OutSet，初始值为 40\n        .blockSize({ width: '60px', height: '60px' }) // 设置滑块的尺寸为 60x60vp\n        .blockColor(Color.Red) // 设置滑块颜色为红色\n        .blockStyle({ type: SliderBlockType.SHAPE, shape: new Path({ commands: 'M60 60 M30 30 L15 56 L45 56 Z' }) }) // 设置滑块样式为自定义形状样式，形状为自定义路径\n      Divider() // 分隔线，用于分隔不同的 Slider 组件部分\n      Text('tips').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%') // 标题文本，字体大小为 9vp，颜色为 0xCCCCCC，上下边距为 15vp，宽度为 '90%'\n      Slider({ style: SliderStyle.InSet, value: this.tipsValue }) // 创建一个 Slider 组件，样式为 InSet，初始值为状态变量 tipsValue\n        .showTips(true, this.tipsValue.toFixed()) // 显示提示信息，提示信息内容为当前滑块值\n        .onChange(value => { // 监听滑块值的变化事件\n          this.tipsValue = value // 更新状态变量 tipsValue 为当前滑块值\n        })\n    }\n  }\n}"
        },
        {
            "description": "该组件展示了多种类型的滑块（Slider）及其不同样式和方向的实现。布局宽度占据整个屏幕，通过 Column 和 Row 组件实现垂直和水平布局。滑块的样式包括 OutSet、InSet 和 NONE 三种风格，分别展示了水平和垂直方向的滑块。每个滑块组包含一个标题、滑块和显示当前值的文本组件。滑块的功能包括拖动滑块改变值、显示提示信息、显示步长等。滑块的样式和外观通过颜色、字体等属性进行自定义。",
            "code": "@Entry\n@Component\nstruct SliderExample {\n  @State outSetValueOne: number = 40 // 初始化滑块值\n  @State inSetValueOne: number = 40\n  @State noneValueOne: number = 40\n  @State outSetValueTwo: number = 40\n  @State inSetValueTwo: number = 40\n  @State vOutSetValueOne: number = 40\n  @State vInSetValueOne: number = 40\n  @State vOutSetValueTwo: number = 40\n  @State vInSetValueTwo: number = 40\n\n  build() {\n    Column({ space: 8 }) { // 主布局为垂直布局，间距为8\n      Text('outset slider').fontSize(9).fontColor(0xCCCCCC).width('90%').margin(15) // 标题文本，字体大小9，颜色0xCCCCCC，宽度90%，上下左右边距15\n      Row() { // 水平布局\n        Slider({\n          value: this.outSetValueOne, // 滑块当前值\n          min: 0, // 最小值\n          max: 100, // 最大值\n          style: SliderStyle.OutSet // 滑块风格为OutSet\n        })\n          .showTips(true) // 显示提示信息\n          .onChange((value: number, mode: SliderChangeMode) => { // 滑块值改变事件\n            this.outSetValueOne = value // 更新滑块值\n            console.info('value:' + value + 'mode:' + mode.toString()) // 打印滑块值和改变模式\n          })\n\n        Text(this.outSetValueOne.toFixed(0)).fontSize(12) // 显示滑块当前值的文本，字体大小12\n      }\n      .width('80%') // 宽度为80%\n      Row() {\n        Slider({\n          value: this.outSetValueTwo,\n          step: 10, // 步长为10\n          style: SliderStyle.OutSet\n        })\n          .showSteps(true) // 显示步长\n          .onChange((value: number, mode: SliderChangeMode) => {\n            this.outSetValueTwo = value\n            console.info('value:' + value + 'mode:' + mode.toString())\n          })\n        Text(this.outSetValueTwo.toFixed(0)).fontSize(12)\n      }\n      .width('80%')\n\n      Text('inset slider').fontSize(9).fontColor(0xCCCCCC).width('90%').margin(15)\n      Row() {\n        Slider({\n          value: this.inSetValueOne,\n          min: 0,\n          max: 100,\n          style: SliderStyle.InSet // 滑块风格为InSet\n        })\n          .blockColor('#191970') // 滑块颜色\n          .trackColor('#ADD8E6') // 轨道颜色\n          .selectedColor('#4169E1') // 选中部分颜色\n          .showTips(true)\n          .onChange((value: number, mode: SliderChangeMode) => {\n            this.inSetValueOne = value\n            console.info('value:' + value + 'mode:' + mode.toString())\n          })\n        Text(this.inSetValueOne.toFixed(0)).fontSize(12)\n      }\n      .width('80%')\n      Row() {\n        Slider({\n          value: this.inSetValueTwo,\n          step: 10,\n          style: SliderStyle.InSet\n        })\n          .blockColor('#191970')\n          .trackColor('#ADD8E6')\n          .selectedColor('#4169E1')\n          .showSteps(true)\n          .onChange((value: number, mode: SliderChangeMode) => {\n            this.inSetValueTwo = value\n            console.info('value:' + value + 'mode:' + mode.toString())\n          })\n        Text(this.inSetValueTwo.toFixed(0)).fontSize(12)\n      }\n      .width('80%')\n\n      Text('none slider').fontSize(9).fontColor(0xCCCCCC).width('90%').margin(15)\n      Row() {\n        Slider({\n          value: this.noneValueOne,\n          min: 0,\n          max: 100,\n          style: SliderStyle.NONE // 滑块风格为NONE\n        })\n          .blockColor('#191970')\n          .trackColor('#ADD8E6')\n          .selectedColor('#4169E1')\n          .showTips(true)\n          .onChange((value: number, mode: SliderChangeMode) => {\n            this.noneValueOne = value\n            console.info('value:' + value + 'mode:' + mode.toString())\n          })\n        Text(this.noneValueOne.toFixed(0)).fontSize(12)\n      }\n      .width('80%')\n\n      Row() {\n        Column() {\n          Text('vertical outset slider').fontSize(9).fontColor(0xCCCCCC).width('50%').margin(15)\n          Row() {\n            Text().width('10%')\n            Slider({\n              value: this.vOutSetValueOne,\n              style: SliderStyle.OutSet,\n              direction: Axis.Vertical // 垂直方向滑块\n            })\n              .blockColor('#191970')\n              .trackColor('#ADD8E6')\n              .selectedColor('#4169E1')\n              .showTips(true)\n              .onChange((value: number, mode: SliderChangeMode) => {\n                this.vOutSetValueOne = value\n                console.info('value:' + value + 'mode:' + mode.toString())\n              })\n            Slider({\n              value: this.vOutSetValueTwo,\n              step: 10,\n              style: SliderStyle.OutSet,\n              direction: Axis.Vertical\n            })\n              .blockColor('#191970')\n              .trackColor('#ADD8E6')\n              .selectedColor('#4169E1')\n              .showSteps(true)\n              .onChange((value: number, mode: SliderChangeMode) => {\n                this.vOutSetValueTwo = value\n                console.info('value:' + value + 'mode:' + mode.toString())\n              })\n          }\n        }.width('50%').height(300)\n\n        Column() {\n          Text('vertical inset slider').fontSize(9).fontColor(0xCCCCCC).width('50%').margin(15)\n          Row() {\n            Slider({\n              value: this.vInSetValueOne,\n              style: SliderStyle.InSet,\n              direction: Axis.Vertical,\n              reverse: true // 反向滑块\n            })\n              .showTips(true)\n              .onChange((value: number, mode: SliderChangeMode) => {\n                this.vInSetValueOne = value\n                console.info('value:' + value + 'mode:' + mode.toString())\n              })\n            Slider({\n              value: this.vInSetValueTwo,\n              step: 10,\n              style: SliderStyle.InSet,\n              direction: Axis.Vertical,\n              reverse: true\n            })\n              .showSteps(true)\n              .onChange((value: number, mode: SliderChangeMode) => {\n                this.vInSetValueTwo = value\n                console.info('value:' + value + 'mode:' + mode.toString())\n              })\n          }\n        }.width('50%').height(300)\n      }\n    }.width('100%') // 主布局宽度为100%\n  }\n}"
        }
    ],
    "is_common_attrs": true
}