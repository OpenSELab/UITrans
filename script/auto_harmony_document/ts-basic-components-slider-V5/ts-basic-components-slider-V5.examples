/*\n实现一个带有自定义样式的滑动条组件。滑动条的值、最小值、最大值、步长以及显示状态均可动态调整。滑动条的值变化时，会触发onChange事件，并输出当前值和变化模式。滑动条的样式通过自定义的ContentModifier进行定制。\n*/\n\n@Entry\n@Component\nstruct SliderExample {\n  // 控制滑动条是否显示的状态变量\n  @State showSlider: boolean = true\n  \n  // 滑动条的当前值\n  @State sliderValue: number = 0\n  \n  // 滑动条的最小值\n  @State sliderMin: number = 10\n  \n  // 滑动条的最大值\n  @State sliderMax: number = 100\n  \n  // 滑动条的步长\n  @State sliderStep: number = 20\n  \n  // 滑动条变化模式的状态变量\n  @State sliderChangeMode: number = 0\n\n  build() {\n    Column({ space: 8 }) {\n      Row() {\n        // 创建一个滑动条组件，设置其初始值、最小值、最大值和步长\n        Slider({\n          value: this.sliderValue,  // 当前值\n          min: this.sliderMin,      // 最小值\n          max: this.sliderMax,      // 最大值\n          step: this.sliderStep,    // 步长\n        })\n          .showSteps(true)  // 显示步长标记\n          .onChange((value: number, mode: SliderChangeMode) => {\n            // 当滑动条值变化时，更新状态变量并输出日志\n            this.sliderValue = value\n            this.sliderChangeMode = mode\n            console.info('【SliderLog】value:' + value + 'mode:' + mode.toString())\n          })\n          .contentModifier(new MySliderStyle(this.showSlider, this.sliderChangeMode))  // 应用自定义的ContentModifier\n      }\n      .width('100%')  // 设置行宽度为100%\n    }\n    .width('100%')  // 设置列宽度为100%\n  }\n}


/*\n实现一个包含多个自定义样式的滑动条组件示例。每个滑动条展示了不同的自定义属性，如滑动块大小、边框颜色、步长标记、轨道和选中区域的边框圆角、滑动块样式以及滑动条值的提示。\n*/\n\n@Entry\n@Component\nstruct SliderExample {\n  @State tipsValue: number = 40 // 初始化滑动条的值，用于显示提示\n\n  build() {\n    Column({ space: 8 }) {\n      Text('block').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%')\n      // 自定义滑动块的大小、边框颜色和宽度\n      Slider({ style: SliderStyle.OutSet, value: 40 })\n        .blockSize({ width: 40, height: 40 }) // 设置滑动块的大小\n        .blockBorderColor(Color.Red) // 设置滑动块边框颜色\n        .blockBorderWidth(5) // 设置滑动块边框宽度\n      Divider()\n      Text('step').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%')\n      // 设置滑动条的步长、步长标记的大小和颜色\n      Slider({ style: SliderStyle.InSet, value: 40, step: 10 })\n        .showSteps(true) // 显示步长标记\n        .stepSize(8) // 设置步长标记的大小\n        .stepColor(Color.Yellow) // 设置步长标记的颜色\n      Divider()\n      Text('track').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%')\n      // 自定义轨道的边框圆角\n      Slider({ style: SliderStyle.InSet, value: 40 })\n        .trackBorderRadius(2) // 设置轨道的边框圆角\n      Divider()\n      Text('selected').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%')\n      // 自定义选中区域的边框圆角\n      Slider({ style: SliderStyle.InSet, value: 40 })\n        .selectedBorderRadius(2) // 设置选中区域的边框圆角\n      Divider()\n      Text('blockStyle').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%')\n      // 设置滑动块的默认样式\n      Slider({ style: SliderStyle.OutSet, value: 40 })\n        .blockStyle({ type: SliderBlockType.DEFAULT }) // 设置滑动块为默认样式\n      // 设置滑动块为图片样式\n      Slider({ style: SliderStyle.OutSet, value: 40 })\n        .blockStyle({ type: SliderBlockType.IMAGE, image: $r('sys.media.ohos_app_icon') }) // 设置滑动块为图片样式\n      // 设置滑动块为自定义形状样式\n      Slider({ style: SliderStyle.OutSet, value: 40 })\n        .blockSize({ width: '60px', height: '60px' }) // 设置滑动块的大小\n        .blockColor(Color.Red) // 设置滑动块的颜色\n        .blockStyle({ type: SliderBlockType.SHAPE, shape: new Path({ commands: 'M60 60 M30 30 L15 56 L45 56 Z' }) }) // 设置滑动块为自定义形状样式\n      Divider()\n      Text('tips').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%')\n      // 显示滑动条的值提示，并在滑动时动态更新提示内容\n      Slider({ style: SliderStyle.InSet, value: this.tipsValue })\n        .showTips(true, this.tipsValue.toFixed()) // 显示滑动条的值提示\n        .onChange(value => {\n          this.tipsValue = value // 更新滑动条的值\n        })\n    }\n  }\n}


/*\n实现一个包含多种样式和方向的滑动条组件示例。滑动条包括水平和垂直方向，支持不同的样式（OutSet、InSet、None），并且可以显示步长标记和值提示。滑动条的值变化会通过控制台输出，并且滑动条的当前值会实时显示在界面上。\n*/\n\n@Entry\n@Component\nstruct SliderExample {\n  @State outSetValueOne: number = 40 // 初始化OutSet样式滑动条的值\n  @State inSetValueOne: number = 40 // 初始化InSet样式滑动条的值\n  @State noneValueOne: number = 40 // 初始化None样式滑动条的值\n  @State outSetValueTwo: number = 40 // 初始化OutSet样式滑动条的值，带有步长\n  @State inSetValueTwo: number = 40 // 初始化InSet样式滑动条的值，带有步长\n  @State vOutSetValueOne: number = 40 // 初始化垂直OutSet样式滑动条的值\n  @State vInSetValueOne: number = 40 // 初始化垂直InSet样式滑动条的值\n  @State vOutSetValueTwo: number = 40 // 初始化垂直OutSet样式滑动条的值，带有步长\n  @State vInSetValueTwo: number = 40 // 初始化垂直InSet样式滑动条的值，带有步长\n\n  build() {\n    Column({ space: 8 }) {\n      Text('outset slider').fontSize(9).fontColor(0xCCCCCC).width('90%').margin(15) // 显示标题文本\n      Row() {\n        Slider({\n          value: this.outSetValueOne, // 滑动条的当前值\n          min: 0, // 滑动条的最小值\n          max: 100, // 滑动条的最大值\n          style: SliderStyle.OutSet // 设置滑动条的样式为OutSet\n        })\n          .showTips(true) // 显示滑动条的值提示\n          .onChange((value: number, mode: SliderChangeMode) => {\n            this.outSetValueOne = value // 更新滑动条的值\n            console.info('value:' + value + 'mode:' + mode.toString()) // 输出当前值和变化模式\n          })\n        Text(this.outSetValueOne.toFixed(0)).fontSize(12) // 显示滑动条的当前值\n      }\n      .width('80%')\n      Row() {\n        Slider({\n          value: this.outSetValueTwo, // 滑动条的当前值\n          step: 10, // 滑动条的步长\n          style: SliderStyle.OutSet // 设置滑动条的样式为OutSet\n        })\n          .showSteps(true) // 显示滑动条的步长标记\n          .onChange((value: number, mode: SliderChangeMode) => {\n            this.outSetValueTwo = value // 更新滑动条的值\n            console.info('value:' + value + 'mode:' + mode.toString()) // 输出当前值和变化模式\n          })\n        Text(this.outSetValueTwo.toFixed(0)).fontSize(12) // 显示滑动条的当前值\n      }\n      .width('80%')\n\n      Text('inset slider').fontSize(9).fontColor(0xCCCCCC).width('90%').margin(15) // 显示标题文本\n      Row() {\n        Slider({\n          value: this.inSetValueOne, // 滑动条的当前值\n          min: 0, // 滑动条的最小值\n          max: 100, // 滑动条的最大值\n          style: SliderStyle.InSet // 设置滑动条的样式为InSet\n        })\n          .blockColor('#191970') // 设置滑动块的颜色\n          .trackColor('#ADD8E6') // 设置未选中轨道颜色\n          .selectedColor('#4169E1') // 设置选中轨道颜色\n          .showTips(true) // 显示滑动条的值提示\n          .onChange((value: number, mode: SliderChangeMode) => {\n            this.inSetValueOne = value // 更新滑动条的值\n            console.info('value:' + value + 'mode:' + mode.toString()) // 输出当前值和变化模式\n          })\n        Text(this.inSetValueOne.toFixed(0)).fontSize(12) // 显示滑动条的当前值\n      }\n      .width('80%')\n      Row() {\n        Slider({\n          value: this.inSetValueTwo, // 滑动条的当前值\n          step: 10, // 滑动条的步长\n          style: SliderStyle.InSet // 设置滑动条的样式为InSet\n        })\n          .blockColor('#191970') // 设置滑动块的颜色\n          .trackColor('#ADD8E6') // 设置未选中轨道颜色\n          .selectedColor('#4169E1') // 设置选中轨道颜色\n          .showSteps(true) // 显示滑动条的步长标记\n          .onChange((value: number, mode: SliderChangeMode) => {\n            this.inSetValueTwo = value // 更新滑动条的值\n            console.info('value:' + value + 'mode:' + mode.toString()) // 输出当前值和变化模式\n          })\n        Text(this.inSetValueTwo.toFixed(0)).fontSize(12) // 显示滑动条的当前值\n      }\n      .width('80%')\n\n      Text('none slider').fontSize(9).fontColor(0xCCCCCC).width('90%').margin(15) // 显示标题文本\n      Row() {\n        Slider({\n          value: this.noneValueOne, // 滑动条的当前值\n          min: 0, // 滑动条的最小值\n          max: 100, // 滑动条的最大值\n          style: SliderStyle.NONE // 设置滑动条的样式为None\n        })\n          .blockColor('#191970') // 设置滑动块的颜色\n          .trackColor('#ADD8E6') // 设置未选中轨道颜色\n          .selectedColor('#4169E1') // 设置选中轨道颜色\n          .showTips(true) // 显示滑动条的值提示\n          .onChange((value: number, mode: SliderChangeMode) => {\n            this.noneValueOne = value // 更新滑动条的值\n            console.info('value:' + value + 'mode:' + mode.toString()) // 输出当前值和变化模式\n          })\n        Text(this.noneValueOne.toFixed(0)).fontSize(12) // 显示滑动条的当前值\n      }\n      .width('80%')\n\n      Row() {\n        Column() {\n          Text('vertical outset slider').fontSize(9).fontColor(0xCCCCCC).width('50%').margin(15) // 显示标题文本\n          Row() {\n            Text().width('10%')\n            Slider({\n              value: this.vOutSetValueOne, // 滑动条的当前值\n              style: SliderStyle.OutSet, // 设置滑动条的样式为OutSet\n              direction: Axis.Vertical // 设置滑动条的方向为垂直\n            })\n              .blockColor('#191970') // 设置滑动块的颜色\n              .trackColor('#ADD8E6') // 设置未选中轨道颜色\n              .selectedColor('#4169E1') // 设置选中轨道颜色\n              .showTips(true) // 显示滑动条的值提示\n              .onChange((value: number, mode: SliderChangeMode) => {\n                this.vOutSetValueOne = value // 更新滑动条的值\n                console.info('value:' + value + 'mode:' + mode.toString()) // 输出当前值和变化模式\n              })\n            Slider({\n              value: this.vOutSetValueTwo, // 滑动条的当前值\n              step: 10, // 滑动条的步长\n              style: SliderStyle.OutSet, // 设置滑动条的样式为OutSet\n              direction: Axis.Vertical // 设置滑动条的方向为垂直\n            })\n              .blockColor('#191970') // 设置滑动块的颜色\n              .trackColor('#ADD8E6') // 设置未选中轨道颜色\n              .selectedColor('#4169E1') // 设置选中轨道颜色\n              .showSteps(true) // 显示滑动条的步长标记\n              .onChange((value: number, mode: SliderChangeMode) => {\n                this.vOutSetValueTwo = value // 更新滑动条的值\n                console.info('value:' + value + 'mode:' + mode.toString()) // 输出当前值和变化模式\n              })\n          }\n        }.width('50%').height(300)\n\n        Column() {\n          Text('vertical inset slider').fontSize(9).fontColor(0xCCCCCC).width('50%').margin(15) // 显示标题文本\n          Row() {\n            Slider({\n              value: this.vInSetValueOne, // 滑动条的当前值\n              style: SliderStyle.InSet, // 设置滑动条的样式为InSet\n              direction: Axis.Vertical, // 设置滑动条的方向为垂直\n              reverse: true // 竖向的Slider默认是上端是min值，下端是max值，因此想要从下往上滑动，需要设置reverse为true\n            })\n              .showTips(true) // 显示滑动条的值提示\n              .onChange((value: number, mode: SliderChangeMode) => {\n                this.vInSetValueOne = value // 更新滑动条的值\n                console.info('value:' + value + 'mode:' + mode.toString()) // 输出当前值和变化模式\n              })\n            Slider({\n              value: this.vInSetValueTwo, // 滑动条的当前值\n              step: 10, // 滑动条的步长\n              style: SliderStyle.InSet, // 设置滑动条的样式为InSet\n              direction: Axis.Vertical, // 设置滑动条的方向为垂直\n              reverse: true // 竖向的Slider默认是上端是min值，下端是max值，因此想要从下往上滑动，需要设置reverse为true\n            })\n              .showSteps(true) // 显示滑动条的步长标记\n              .onChange((value: number, mode: SliderChangeMode) => {\n                this.vInSetValueTwo = value // 更新滑动条的值\n                console.info('value:' + value + 'mode:' + mode.toString()) // 输出当前值和变化模式\n              })\n          }\n        }.width('50%').height(300)\n      }\n    }.width('100%')\n  }\n}