{
    "description": "该组件用来展示列表item分组，宽度默认充满List组件，必须配合List组件来使用。",
    "details": "该组件从API Version 9开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。该组件的父组件只能是List。ListItemGroup组件不支持设置通用属性aspectRatio。当ListItemGroup的父组件List的listDirection属性为Axis.Vertical时，设置通用属性height属性不生效。ListItemGroup的高度为header高度、footer高度和所有ListItem布局后总高度之和。当父组件List的listDirection属性为Axis.Horizontal时，设置通用属性width属性不生效。ListItemGroup的宽度为header宽度、footer宽度和所有ListItem布局后总宽度之和。当前ListItemGroup内部的ListItem组件不支持编辑、拖拽功能，即ListItem组件的editable属性不生效。",
    "interfaces": [
        {
            "description": "ListItemGroup(options?: ListItemGroupOptions)",
            "params": {
                "options": {
                    "type": "ListItemGroupOptions",
                    "required": false,
                    "description": "ListItemGroup的配置选项。"
                }
            }
        }
    ],
    "attributes": {
        "divider": {
            "description": "设置ListItem分割线样式，默认无分割线。strokeWidth, startMargin和endMargin不支持设置百分比。ListItem设置多态样式时，被按压的子组件上下的分割线不绘制。",
            "params": {
                "value": {
                    "type": {
                        "strokeWidth": "Length",
                        "color": "ResourceColor",
                        "startMargin": "Length",
                        "endMargin": "Length"
                    },
                    "required": true,
                    "description": "ListItem分割线样式。strokeWidth: 分割线的线宽。color: 分割线的颜色。默认值：0x08000000。startMargin: 分割线与列表侧边起始端的距离。默认值：0，单位：vp。endMargin: 分割线与列表侧边结束端的距离。默认值：0，单位：vp。"
                }
            }
        },
        "childrenMainSize": {
            "description": "设置ListItemGroup组件的子组件在主轴方向的大小信息。",
            "params": {
                "value": {
                    "type": "ChildrenMainSize",
                    "required": true,
                    "description": "通过ChildrenMainSize对象向ListItemGroup组件准确提供所有ListItem在主轴方向的大小信息。提供的主轴方向大小必须与子组件实际在主轴方向的大小一致。必须同时设置List的childrenMainSize属性使用。子组件主轴方向大小变化或者增删子组件时都必须通过ChildrenMainSize对象方法通知ListItemGroup组件。"
                }
            }
        }
    },
    "events": {},
    "rules": [
        "该组件的父组件只能是List。",
        "ListItemGroup组件不支持设置通用属性aspectRatio。",
        "当ListItemGroup的父组件List的listDirection属性为Axis.Vertical时，设置通用属性height属性不生效。",
        "当父组件List的listDirection属性为Axis.Horizontal时，设置通用属性width属性不生效。",
        "当前ListItemGroup内部的ListItem组件不支持编辑、拖拽功能，即ListItem组件的editable属性不生效。"
    ],
    "examples": [
        {
            "description": "该组件通过Column布局实现了一个展示多个ListItemGroup的列表界面。布局宽度占据整个屏幕，内边距为顶部5vp。组件的垂直方向上被分为多个部分，每个部分包含一个ListItemGroup。每个ListItemGroup包含多个ListItem，ListItem的样式根据数据动态设置。\nListItemGroup和ListItem的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。ListItemGroup之间通过Column组件进行分隔。ListItem的功能包括展示文本内容，用户可以通过点击ListItem触发相应操作。\n整个布局通过Column布局保证ListItemGroup在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct ListItemGroupExample2 {\n  // 定义一个数组，数组中的每个元素是一个对象，包含style和itemStyles两个属性\n  private arr: ArrObject[] = [\n    {\n      style: ListItemGroupStyle.CARD, // ListItemGroup的样式为CARD\n      itemStyles: [ListItemStyle.CARD, ListItemStyle.CARD, ListItemStyle.CARD] // 每个ListItem的样式为CARD\n    },\n    {\n      style: ListItemGroupStyle.CARD, // ListItemGroup的样式为CARD\n      itemStyles: [ListItemStyle.CARD, ListItemStyle.CARD, ListItemStyle.NONE] // 前两个ListItem的样式为CARD，最后一个为NONE\n    },\n    {\n      style: ListItemGroupStyle.CARD, // ListItemGroup的样式为CARD\n      itemStyles: [ListItemStyle.CARD, ListItemStyle.NONE, ListItemStyle.CARD] // 第一个和第三个ListItem的样式为CARD，第二个为NONE\n    },\n    {\n      style: ListItemGroupStyle.NONE, // ListItemGroup的样式为NONE\n      itemStyles: [ListItemStyle.CARD, ListItemStyle.CARD, ListItemStyle.NONE] // 前两个ListItem的样式为CARD，最后一个为NONE\n    }\n  ]\n\n  build() {\n    Column() {\n      List({ space: \"4vp\", initialIndex: 0 }) { // 创建一个List组件，设置item之间的间距为4vp，初始索引为0\n        ForEach(this.arr, (item: ArrObject, index?: number) => { // 遍历arr数组，生成ListItemGroup\n          ListItemGroup({ style: item.style }) { // 创建一个ListItemGroup，样式为item.style\n            ForEach(item.itemStyles, (itemStyle: number, itemIndex?: number) => { // 遍历item.itemStyles数组，生成ListItem\n              ListItem({ style: itemStyle }) { // 创建一个ListItem，样式为itemStyle\n                if (index != undefined && itemIndex != undefined) { // 确保index和itemIndex不为undefined\n                  Text(\"第\" + (index + 1) + \"个Group中第\" + (itemIndex + 1) + \"个item\") // 创建一个Text组件，显示当前ListItem的索引\n                    .width(\"100%\") // 设置Text的宽度为100%\n                    .textAlign(TextAlign.Center) // 设置Text的文本对齐方式为居中\n                }\n              }\n            }, (item: string) => item) // 使用item作为key\n          }\n        })\n      }\n      .width('100%') // 设置List的宽度为100%\n      .multiSelectable(true) // 设置List为多选模式\n      .backgroundColor(0xDCDCDC) // 设置List的背景颜色为0xDCDCDC\n    }\n    .width('100%') // 设置Column的宽度为100%\n    .padding({ top: 5 }) // 设置Column的上内边距为5vp\n  }\n}\n\n// 定义一个接口，包含style和itemStyles两个属性\ninterface ArrObject {\n  style: number; // ListItemGroup的样式\n  itemStyles: number[]; // 每个ListItem的样式数组\n}"
        },
        {
            "description": "该组件通过Column布局实现了一个展示课程表的界面。布局宽度占据整个屏幕，高度设为100%，背景颜色为0xDCDCDC，顶部内边距为5vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题、一组课程项目和一个底部信息。每个部分的标题和底部信息通过自定义的Builder方法生成，课程项目以列表形式展示。\n标题和底部信息的样式包括背景颜色、字体大小、宽度和内边距等属性，支持不同的样式展示。课程项目的样式包括背景颜色、字体大小、宽度和高度等属性，支持不同的样式展示。\n整个布局通过Column布局保证各部分在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct ListItemGroupExample {\n  private timeTable: TimeTable[] = [\n    {\n      title: '星期一',\n      projects: ['语文', '数学', '英语']\n    },\n    {\n      title: '星期二',\n      projects: ['物理', '化学', '生物']\n    },\n    {\n      title: '星期三',\n      projects: ['历史', '地理', '政治']\n    },\n    {\n      title: '星期四',\n      projects: ['美术', '音乐', '体育']\n    }\n  ]\n\n  // 生成列表项的头部信息，显示标题\n  @Builder\n  itemHead(text: string) {\n    Text(text)\n      .fontSize(20) // 设置字体大小为20\n      .backgroundColor(0xAABBCC) // 设置背景颜色为0xAABBCC\n      .width(\"100%\") // 设置宽度为100%\n      .padding(10) // 设置内边距为10\n  }\n\n  // 生成列表项的底部信息，显示课程数量\n  @Builder\n  itemFoot(num: number) {\n    Text('共' + num + \"节课\")\n      .fontSize(16) // 设置字体大小为16\n      .backgroundColor(0xAABBCC) // 设置背景颜色为0xAABBCC\n      .width(\"100%\") // 设置宽度为100%\n      .padding(5) // 设置内边距为5\n  }\n\n  build() {\n    Column() {\n      List({ space: 20 }) { // 创建一个列表，项之间的间距为20\n        ForEach(this.timeTable, (item: TimeTable) => {\n          ListItemGroup({ header: this.itemHead(item.title), footer: this.itemFoot(item.projects.length) }) {\n            ForEach(item.projects, (project: string) => {\n              ListItem() {\n                Text(project)\n                  .width(\"100%\") // 设置宽度为100%\n                  .height(100) // 设置高度为100\n                  .fontSize(20) // 设置字体大小为20\n                  .textAlign(TextAlign.Center) // 设置文本居中对齐\n                  .backgroundColor(0xFFFFFF) // 设置背景颜色为白色\n              }\n            }, (item: string) => item)\n          }\n          .divider({ strokeWidth: 1, color: Color.Blue }) // 设置分隔线的宽度和颜色\n        })\n      }\n      .width('90%') // 设置列表宽度为90%\n      .sticky(StickyStyle.Header | StickyStyle.Footer) // 设置头部和底部信息为粘性布局\n      .scrollBar(BarState.Off) // 关闭滚动条\n    }.width('100%').height('100%').backgroundColor(0xDCDCDC).padding({ top: 5 }) // 设置Column的宽度、高度、背景颜色和顶部内边距\n  }\n}\n\n// 定义TimeTable接口，包含标题和课程项目数组\ninterface TimeTable {\n  title: string;\n  projects: string[];\n}"
        }
    ],
    "is_common_attrs": true
}