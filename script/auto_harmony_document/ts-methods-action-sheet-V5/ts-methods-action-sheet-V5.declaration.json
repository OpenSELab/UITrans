{
    "description": "列表选择弹窗组件，用于显示一个包含多个选项的弹窗，用户可以选择其中一个选项。",
    "details": "从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。本模块功能依赖UI的执行上下文，不可在UI上下文不明确的地方使用，参见UIContext说明。从API version 10开始，可以通过使用UIContext中的showActionSheet来明确UI的执行上下文。",
    "interfaces": [
        {
            "description": "ActionSheet.show(value: ActionSheetOptions)",
            "params": {
                "value": {
                    "type": "ActionSheetOptions",
                    "required": true,
                    "description": "配置列表选择弹窗的参数。"
                }
            }
        }
    ],
    "attributes": {
        "ActionSheetOptions": {
            "description": "配置列表选择弹窗的参数。",
            "params": {
                "title": {
                    "type": [
                        "Resource",
                        "string"
                    ],
                    "required": true,
                    "description": "弹窗标题。"
                },
                "subtitle": {
                    "type": [
                        "ResourceStr"
                    ],
                    "required": false,
                    "description": "弹窗副标题。"
                },
                "message": {
                    "type": [
                        "Resource",
                        "string"
                    ],
                    "required": true,
                    "description": "弹窗内容。"
                },
                "autoCancel": {
                    "type": "boolean",
                    "required": false,
                    "description": "点击遮障层时，是否关闭弹窗。",
                    "default": true
                },
                "confirm": {
                    "type": "object",
                    "required": false,
                    "description": "确认Button的使能状态、默认焦点、按钮风格、文本内容和点击回调。",
                    "params": {
                        "enabled": {
                            "type": "boolean",
                            "required": false,
                            "description": "点击Button是否响应。",
                            "default": true
                        },
                        "defaultFocus": {
                            "type": "boolean",
                            "required": false,
                            "description": "设置Button是否是默认焦点。",
                            "default": false
                        },
                        "style": {
                            "type": "DialogButtonStyle",
                            "required": false,
                            "description": "设置Button的风格样式。",
                            "default": "DialogButtonStyle.DEFAULT"
                        },
                        "value": {
                            "type": [
                                "Resource",
                                "string"
                            ],
                            "required": true,
                            "description": "Button文本内容。"
                        },
                        "action": {
                            "type": "function",
                            "required": true,
                            "description": "Button选中时的回调。"
                        }
                    }
                },
                "cancel": {
                    "type": "function",
                    "required": false,
                    "description": "点击遮障层关闭dialog时的回调。"
                },
                "alignment": {
                    "type": "DialogAlignment",
                    "required": false,
                    "description": "弹窗在竖直方向上的对齐方式。",
                    "default": "DialogAlignment.Bottom"
                },
                "offset": {
                    "type": "object",
                    "required": false,
                    "description": "弹窗相对alignment所在位置的偏移量。",
                    "params": {
                        "dx": {
                            "type": [
                                "number",
                                "string",
                                "Resource"
                            ],
                            "required": true,
                            "description": "水平偏移量。"
                        },
                        "dy": {
                            "type": [
                                "number",
                                "string",
                                "Resource"
                            ],
                            "required": true,
                            "description": "垂直偏移量。"
                        }
                    }
                },
                "sheets": {
                    "type": "array",
                    "required": true,
                    "description": "设置选项内容，每个选择项支持设置图片、文本和选中的回调。",
                    "items": {
                        "type": "SheetInfo",
                        "params": {
                            "title": {
                                "type": [
                                    "string",
                                    "Resource"
                                ],
                                "required": true,
                                "description": "选项的文本内容。"
                            },
                            "icon": {
                                "type": [
                                    "string",
                                    "Resource"
                                ],
                                "required": false,
                                "description": "选项的图标。"
                            },
                            "action": {
                                "type": "function",
                                "required": true,
                                "description": "选项选中的回调。"
                            }
                        }
                    }
                }
            }
        }
    },
    "events": {},
    "rules": null,
    "examples": [
        {
            "description": "该组件通过 Flex 布局实现了一个展示 ActionSheet 弹出框的界面。布局宽度占据整个屏幕，高度设为 100%，内边距为 0。组件的垂直方向上居中对齐，包含一个按钮。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮的功能包括点击事件，用户可以通过点击按钮触发 ActionSheet 弹出框的显示。\n\nActionSheet 弹出框的样式包括标题、副标题、消息内容、确认按钮、取消按钮、以及多个选项按钮。弹出框的布局从屏幕底部弹出，偏移量为 {dx: 0, dy: -10}，确保弹出框在底部显示且略微向上偏移。弹出框的选项按钮以垂直布局方式排列，每个选项按钮包含一个标题和对应的点击事件。\n\n整个布局通过 Flex 布局保证按钮在垂直方向上居中对齐，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct ActionSheetExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建一个按钮，点击按钮时显示 ActionSheet 弹出框\n      Button('Click to Show ActionSheet')\n        .onClick(() => {\n          // 显示 ActionSheet 弹出框\n          ActionSheet.show({\n            title: 'ActionSheet title', // ActionSheet 的标题\n            subtitle: 'ActionSheet subtitle', // ActionSheet 的副标题\n            message: 'message', // ActionSheet 的消息内容\n            autoCancel: true, // 是否在点击外部区域时自动取消 ActionSheet\n            confirm: {\n              defaultFocus: true, // 确认按钮是否默认聚焦\n              value: 'Confirm button', // 确认按钮的文本\n              action: () => {\n                // 确认按钮的点击事件\n                console.log('Get Alert Dialog handled')\n              }\n            },\n            cancel: () => {\n              // 取消按钮的点击事件\n              console.log('actionSheet canceled')\n            },\n            onWillDismiss: (dismissDialogAction: DismissDialogAction) => {\n              // ActionSheet 即将消失时的回调函数\n              console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason))\n              console.log(\"dialog onWillDismiss\")\n              if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                // 如果原因是按下返回键，则取消 ActionSheet\n                dismissDialogAction.dismiss()\n              }\n              if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                // 如果原因是点击外部区域，则取消 ActionSheet\n                dismissDialogAction.dismiss()\n              }\n            },\n            alignment: DialogAlignment.Bottom, // ActionSheet 的对齐方式为底部\n            offset: { dx: 0, dy: -10 }, // ActionSheet 的偏移量\n            sheets: [\n              {\n                title: 'apples', // 选项按钮的标题\n                action: () => {\n                  // 选项按钮的点击事件\n                  console.log('apples')\n                }\n              },\n              {\n                title: 'bananas', // 选项按钮的标题\n                action: () => {\n                  // 选项按钮的点击事件\n                  console.log('bananas')\n                }\n              },\n              {\n                title: 'pears', // 选项按钮的标题\n                action: () => {\n                  // 选项按钮的点击事件\n                  console.log('pears')\n                }\n              }\n            ]\n          })\n        })\n    }.width('100%') // 设置 Flex 容器的宽度为 100%\n    .height('100%') // 设置 Flex 容器的高度为 100%\n  }\n}"
        },
        {
            "description": "该示例通过定义一个ActionSheet组件，展示了如何在鸿蒙ArkUI中创建和自定义一个操作表单（ActionSheet）。布局上，该组件使用Flex布局，将内容居中显示在屏幕中央。样式上，ActionSheet具有自定义的宽度、高度、背景色、边框样式、圆角半径和阴影效果。功能上，用户点击按钮后会弹出ActionSheet，其中包含多个选项，每个选项都有对应的点击事件。ActionSheet还支持确认和取消操作，并且可以通过点击外部区域或按下返回键来关闭。",
            "code": "@Entry\n@Component\nstruct ActionSheetExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建一个按钮，点击后显示ActionSheet\n      Button('Click to Show ActionSheet')\n        .onClick(() => {\n          ActionSheet.show({\n            title: 'ActionSheet title', // ActionSheet的标题\n            subtitle: 'ActionSheet subtitle', // ActionSheet的副标题\n            message: 'message', // ActionSheet的提示信息\n            autoCancel: true, // 是否在点击外部区域时自动取消ActionSheet\n            width: 300, // ActionSheet的宽度\n            height: 350, // ActionSheet的高度\n            cornerRadius: 20, // ActionSheet的圆角半径\n            borderWidth: 1, // ActionSheet的边框宽度\n            borderStyle: BorderStyle.Solid, // ActionSheet的边框样式，需要和borderWidth属性一起使用\n            borderColor: Color.Blue, // ActionSheet的边框颜色，需要和borderWidth属性一起使用\n            backgroundColor: Color.White, // ActionSheet的背景颜色\n            shadow: ({ radius: 20, color: Color.Grey, offsetX: 50, offsetY: 0}), // ActionSheet的阴影效果\n            confirm: {\n              defaultFocus: true, // 确认按钮是否默认聚焦\n              value: 'Confirm button', // 确认按钮的文本\n              action: () => {\n                console.log('Get Alert Dialog handled') // 确认按钮点击后的回调函数\n              }\n            },\n            cancel: () => {\n              console.log('actionSheet canceled') // 取消按钮点击后的回调函数\n            },\n            onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n              console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // ActionSheet即将关闭时的回调函数，输出关闭原因\n              console.log(\"dialog onWillDismiss\")\n              if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                dismissDialogAction.dismiss() // 如果关闭原因是按下返回键，则关闭ActionSheet\n              }\n              if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                dismissDialogAction.dismiss() // 如果关闭原因是点击外部区域，则关闭ActionSheet\n              }\n            },\n            alignment: DialogAlignment.Bottom, // ActionSheet的对齐方式，底部对齐\n            offset: { dx: 0, dy: -10 }, // ActionSheet的偏移量\n            sheets: [\n              {\n                title: 'apples', // 第一个选项的标题\n                action: () => {\n                  console.log('apples') // 第一个选项点击后的回调函数\n                }\n              },\n              {\n                title: 'bananas', // 第二个选项的标题\n                action: () => {\n                  console.log('bananas') // 第二个选项点击后的回调函数\n                }\n              },\n              {\n                title: 'pears', // 第三个选项的标题\n                action: () => {\n                  console.log('pears') // 第三个选项点击后的回调函数\n                }\n              }\n            ]\n          })\n        })\n    }.width('100%') // Flex容器的宽度占满整个屏幕\n    .height('100%') // Flex容器的高度占满整个屏幕\n  }\n}"
        },
        {
            "description": "该组件通过 Flex 布局实现了一个展示 ActionSheet 的界面。布局宽度占据整个屏幕，高度设为 100%，内边距为 0。组件的垂直方向上居中对齐，包含一个按钮。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮的功能包括点击事件，用户可以通过点击按钮触发 ActionSheet 的显示。\n\nActionSheet 是一个模态对话框，显示在屏幕的中心位置，具有标题、副标题和消息内容。ActionSheet 包含多个选项，每个选项都有一个标题和一个点击事件。ActionSheet 还包含一个确认按钮和一个取消按钮，用户可以通过点击这些按钮触发相应的操作。ActionSheet 在显示时会自动取消，并且可以通过点击屏幕外部或按下返回键来关闭。\n\n整个布局通过 Flex 布局保证按钮在垂直方向上居中对齐，确保界面整洁美观。",
            "code": "@Entry // 标记该组件为入口组件\n@Component // 标记该组件为一个可渲染的组件\nstruct ActionSheetExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) { // 使用 Flex 布局，垂直方向排列，居中对齐\n      Button('Click to Show ActionSheet') // 创建一个按钮，文本为 \"Click to Show ActionSheet\"\n        .onClick(() => { // 按钮点击事件\n          ActionSheet.show({\n            title: 'ActionSheet title', // ActionSheet 的标题\n            subtitle: 'ActionSheet subtitle', // ActionSheet 的副标题\n            message: 'message', // ActionSheet 的消息内容\n            autoCancel: true, // 自动取消 ActionSheet\n            showInSubWindow: true, // 在子窗口中显示 ActionSheet\n            isModal: true, // ActionSheet 为模态对话框\n            confirm: {\n              defaultFocus: true, // 确认按钮默认聚焦\n              value: 'Confirm button', // 确认按钮的文本\n              action: () => { // 确认按钮的点击事件\n                console.log('Get Alert Dialog handled') // 打印日志\n              }\n            },\n            cancel: () => { // 取消按钮的点击事件\n              console.log('actionSheet canceled') // 打印日志\n            },\n            onWillDismiss:(dismissDialogAction: DismissDialogAction)=> { // ActionSheet 即将关闭时的回调\n              console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 打印关闭原因\n              console.log(\"dialog onWillDismiss\") // 打印日志\n              if (dismissDialogAction.reason == DismissReason.PRESS_BACK) { // 如果关闭原因是按下返回键\n                dismissDialogAction.dismiss() // 关闭 ActionSheet\n              }\n              if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) { // 如果关闭原因是点击屏幕外部\n                dismissDialogAction.dismiss() // 关闭 ActionSheet\n              }\n            },\n            alignment: DialogAlignment.Center, // ActionSheet 对齐方式为居中\n            offset: { dx: 0, dy: -10 }, // ActionSheet 的偏移量\n            sheets: [ // ActionSheet 的选项列表\n              {\n                title: 'apples', // 选项标题\n                action: () => { // 选项点击事件\n                  console.log('apples') // 打印日志\n                }\n              },\n              {\n                title: 'bananas', // 选项标题\n                action: () => { // 选项点击事件\n                  console.log('bananas') // 打印日志\n                }\n              },\n              {\n                title: 'pears', // 选项标题\n                action: () => { // 选项点击事件\n                  console.log('pears') // 打印日志\n                }\n              }\n            ]\n          })\n        })\n    }.width('100%') // 设置 Flex 布局的宽度为 100%\n    .height('100%') // 设置 Flex 布局的高度为 100%\n  }\n}"
        },
        {
            "description": "该组件通过Column布局实现了一个包含按钮的界面，按钮点击后会显示一个ActionSheet。布局宽度占据整个屏幕，按钮的高度为88vp，内边距为顶部5vp。按钮的背景颜色为0x317aff。\nActionSheet的显示动画持续3秒，退出动画持续100毫秒。ActionSheet的标题为'ActionSheet 1'，消息内容为'Set Animation Duration open 3 second, close 100 ms'。ActionSheet的自动取消属性为true，对齐方式为顶部对齐。\nActionSheet的显示和隐藏动画通过TransitionEffect进行定义，显示时使用OPACITY和SCALE的组合动画，持续时间为3000毫秒，曲线为Sharp；隐藏时同样使用OPACITY和SCALE的组合动画，持续时间为100毫秒，曲线为Smooth。\nActionSheet的偏移量为{dx: 0, dy: -20}，即向上偏移20个单位。ActionSheet包含一个确认按钮和一个取消按钮，确认按钮的标题为'button'，点击后会触发回调函数，输出'Button-clicking callback'。取消按钮点击后会触发回调函数，输出'Closed callbacks'。\nActionSheet还包含三个选项，分别是'apples'、'bananas'和'pears'，每个选项点击后会触发相应的回调函数，分别输出'apples'、'bananas'和'pears'。",
            "code": "import { router } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct ActionSheetExample {\n  build() {\n    Column({ space: 5 }) {\n      Button('ActionSheet Set Duration')\n        .onClick(() => {\n          ActionSheet.show({\n            title: 'ActionSheet 1', // ActionSheet的标题\n            message: 'Set Animation Duration open 3 second, close 100 ms', // ActionSheet的消息内容\n            autoCancel: true, // 自动取消属性\n            alignment: DialogAlignment.Top, // 对齐方式为顶部对齐\n            transition: TransitionEffect.asymmetric(\n              TransitionEffect.OPACITY.animation({ duration: 3000, curve: Curve.Sharp }) // 显示动画的透明度变化，持续3000毫秒，曲线为Sharp\n                .combine(TransitionEffect.scale({ x: 1.5, y: 1.5 }).animation({ duration: 3000, curve: Curve.Sharp })), // 显示动画的缩放变化，持续3000毫秒，曲线为Sharp\n              TransitionEffect.OPACITY.animation({ duration: 100, curve: Curve.Smooth }) // 隐藏动画的透明度变化，持续100毫秒，曲线为Smooth\n                .combine(TransitionEffect.scale({ x: 0.5, y: 0.5 }).animation({ duration: 100, curve: Curve.Smooth })) // 隐藏动画的缩放变化，持续100毫秒，曲线为Smooth\n            ),\n            offset: { dx: 0, dy: -20 }, // ActionSheet的偏移量，向上偏移20个单位\n            confirm: {\n              value: 'button', // 确认按钮的标题\n              action: () => {\n                console.info('Button-clicking callback') // 确认按钮点击后的回调函数\n              }\n            },\n            cancel: () => {\n              console.info('Closed callbacks') // 取消按钮点击后的回调函数\n            },\n            sheets: [\n              {\n                title: 'apples', // 选项1的标题\n                action: () => {\n                  console.log('apples') // 选项1点击后的回调函数\n                }\n              },\n              {\n                title: 'bananas', // 选项2的标题\n                action: () => {\n                  console.log('bananas') // 选项2点击后的回调函数\n                }\n              },\n              {\n                title: 'pears', // 选项3的标题\n                action: () => {\n                  console.log('pears') // 选项3点击后的回调函数\n                }\n              }\n            ]\n          })\n        }).backgroundColor(0x317aff).height(\"88px\") // 按钮的背景颜色和高度\n    }.width('100%').margin({ top: 5 }) // 布局的宽度和顶部内边距\n  }\n}"
        }
    ],
    "is_common_attrs": true
}