/*\n实现一个包含ActionSheet的示例组件，点击按钮后显示ActionSheet，并设置动画效果和持续时间。ActionSheet包含标题、消息、确认按钮、取消按钮以及多个选项。每个选项点击后会触发相应的回调函数。\n*/\n\nimport { router } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct ActionSheetExample {\n  build() {\n    Column({ space: 5 }) {\n      Button('ActionSheet Set Duration')\n        .onClick(() => {\n          // 显示ActionSheet，并设置动画效果和持续时间\n          ActionSheet.show({\n            title: 'ActionSheet 1', // ActionSheet的标题\n            message: 'Set Animation Duration open 3 second, close 100 ms', // ActionSheet的消息\n            autoCancel: True, // 自动取消ActionSheet\n            alignment: DialogAlignment.Top, // ActionSheet的对齐方式\n            transition: TransitionEffect.asymmetric(\n              // 显示动画效果：透明度和缩放，持续3秒\n              TransitionEffect.OPACITY.animation({ duration: 3000, curve: Curve.Sharp }).combine(\n                TransitionEffect.scale({ x: 1.5, y: 1.5 }).animation({ duration: 3000, curve: Curve.Sharp })\n              ),\n              // 退出动画效果：透明度和缩放，持续100毫秒\n              TransitionEffect.OPACITY.animation({ duration: 100, curve: Curve.Smooth }).combine(\n                TransitionEffect.scale({ x: 0.5, y: 0.5 }).animation({ duration: 100, curve: Curve.Smooth })\n              )\n            ),\n            offset: { dx: 0, dy: -20 }, // ActionSheet的偏移量\n            confirm: {\n              value: 'button', // 确认按钮的文本\n              action: () => {\n                console.info('Button-clicking callback') // 确认按钮点击回调\n              }\n            },\n            cancel: () => {\n              console.info('Closed callbacks') // 取消按钮点击回调\n            },\n            sheets: [\n              {\n                title: 'apples', // 选项1的标题\n                action: () => {\n                  console.log('apples') // 选项1点击回调\n                }\n              },\n              {\n                title: 'bananas', // 选项2的标题\n                action: () => {\n                  console.log('bananas') // 选项2点击回调\n                }\n              },\n              {\n                title: 'pears', // 选项3的标题\n                action: () => {\n                  console.log('pears') // 选项3点击回调\n                }\n              }\n            ]\n          })\n        }).backgroundColor(0x317aff).height("88px") // 按钮的背景颜色和高度\n    }.width('100%').margin({ top: 5 }) // 列的宽度和小于顶部边距\n  }\n}


/*\n实现一个点击按钮后显示ActionSheet的组件。ActionSheet包含标题、副标题、消息内容、确认按钮、取消按钮以及多个选项。点击按钮后，ActionSheet会以模态对话框的形式显示在屏幕中央，并带有一定的偏移量。用户可以选择确认、取消或点击选项，每个操作都会触发相应的回调函数。\n*/\n\n@Entry\n@Component\nstruct ActionSheetExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建一个按钮，点击后显示ActionSheet\n      Button('Click to Show ActionSheet')\n        .onClick(() => {\n          // 显示ActionSheet\n          ActionSheet.show({\n            title: 'ActionSheet title', // ActionSheet的标题\n            subtitle: 'ActionSheet subtitle', // ActionSheet的副标题\n            message: 'message', // ActionSheet的消息内容\n            autoCancel: True, // 是否自动取消\n            showInSubWindow: True, // 是否在子窗口中显示\n            isModal: True, // 是否为模态对话框\n            confirm: {\n              defaultFocus: True, // 确认按钮是否默认聚焦\n              value: 'Confirm button', // 确认按钮的文本\n              action: () => {\n                console.log('Get Alert Dialog handled') // 确认按钮点击后的回调\n              }\n            },\n            cancel: () => {\n              console.log('actionSheet canceled') // 取消按钮点击后的回调\n            },\n            onWillDismiss: (dismissDialogAction: DismissDialogAction) => {\n              console.info("reason=" + JSON.stringify(dismissDialogAction.reason)) // 对话框即将关闭时的回调，输出关闭原因\n              console.log("dialog onWillDismiss")\n              if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                dismissDialogAction.dismiss() // 如果原因是按下返回键，则关闭对话框\n              }\n              if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                dismissDialogAction.dismiss() // 如果原因是点击外部区域，则关闭对话框\n              }\n            },\n            alignment: DialogAlignment.Center, // 对话框的对齐方式\n            offset: { dx: 0, dy: -10 }, // 对话框的偏移量\n            sheets: [\n              {\n                title: 'apples', // 选项1的标题\n                action: () => {\n                  console.log('apples') // 选项1点击后的回调\n                }\n              },\n              {\n                title: 'bananas', // 选项2的标题\n                action: () => {\n                  console.log('bananas') // 选项2点击后的回调\n                }\n              },\n              {\n                title: 'pears', // 选项3的标题\n                action: () => {\n                  console.log('pears') // 选项3点击后的回调\n                }\n              }\n            ]\n          })\n        })\n    }.width('100%') // 设置Flex容器的宽度为100%\n    .height('100%') // 设置Flex容器的高度为100%\n  }\n}


/*\n实现一个动作表单（ActionSheet）示例，用户点击按钮后弹出动作表单，表单包含标题、副标题、消息内容、确认按钮、取消按钮以及多个选项。用户可以选择选项或点击确认/取消按钮来执行相应操作。动作表单支持自动取消、默认聚焦、对齐方式、偏移量等配置。\n*/\n\n@Entry\n@Component\nstruct ActionSheetExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建一个按钮，点击后显示动作表单\n      Button('Click to Show ActionSheet')\n        .onClick(() => {\n          ActionSheet.show({\n            title: 'ActionSheet title', // 动作表单的标题\n            subtitle: 'ActionSheet subtitle', // 动作表单的副标题\n            message: 'message', // 动作表单的消息内容\n            autoCancel: True, // 自动取消动作表单，当用户点击外部区域或按下返回键时自动关闭\n            confirm: {\n              defaultFocus: True, // 确认按钮默认聚焦\n              value: 'Confirm button', // 确认按钮的文本\n              action: () => {\n                console.log('Get Alert Dialog handled') // 确认按钮点击后的动作，输出日志\n              }\n            },\n            cancel: () => {\n              console.log('actionSheet canceled') // 取消按钮点击后的动作，输出日志\n            },\n            onWillDismiss: (dismissDialogAction: DismissDialogAction) => {\n              console.info("reason=" + JSON.stringify(dismissDialogAction.reason)) // 动作表单即将消失的原因，输出日志\n              console.log("dialog onWillDismiss")\n              if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                dismissDialogAction.dismiss() // 按下返回键时关闭动作表单\n              }\n              if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                dismissDialogAction.dismiss() // 点击外部区域时关闭动作表单\n              }\n            },\n            alignment: DialogAlignment.Bottom, // 动作表单的对齐方式为底部\n            offset: { dx: 0, dy: -10 }, // 动作表单的偏移量，向上偏移10个单位\n            sheets: [\n              {\n                title: 'apples', // 第一个选项的标题\n                action: () => {\n                  console.log('apples') // 第一个选项点击后的动作，输出日志\n                }\n              },\n              {\n                title: 'bananas', // 第二个选项的标题\n                action: () => {\n                  console.log('bananas') // 第二个选项点击后的动作，输出日志\n                }\n              },\n              {\n                title: 'pears', // 第三个选项的标题\n                action: () => {\n                  console.log('pears') // 第三个选项点击后的动作，输出日志\n                }\n              }\n            ]\n          })\n        })\n    }.width('100%') // 设置Flex容器的宽度为100%\n    .height('100%') // 设置Flex容器的高度为100%\n  }\n}


/*\n实现一个按钮，点击按钮后弹出一个ActionSheet组件。ActionSheet组件包含标题、副标题、消息内容、确认按钮、取消按钮以及多个选项。每个选项点击后会执行相应的操作，并且可以设置ActionSheet的样式、对齐方式、偏移量等属性。\n*/\n\n@Entry\n@Component\nstruct ActionSheetExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建一个按钮，点击按钮后显示ActionSheet\n      Button('Click to Show ActionSheet')\n        .onClick(() => {\n          ActionSheet.show({\n            title: 'ActionSheet title', // 设置ActionSheet的标题\n            subtitle: 'ActionSheet subtitle', // 设置ActionSheet的副标题\n            message: 'message', // 设置ActionSheet的消息内容\n            autoCancel: True, // 设置ActionSheet是否自动取消\n            width: 300, // 设置ActionSheet的宽度\n            height: 350, // 设置ActionSheet的高度\n            cornerRadius: 20, // 设置ActionSheet的圆角半径\n            borderWidth: 1, // 设置ActionSheet的边框宽度\n            borderStyle: BorderStyle.Solid, // 设置ActionSheet的边框样式\n            borderColor: Color.Blue, // 设置ActionSheet的边框颜色\n            backgroundColor: Color.White, // 设置ActionSheet的背景颜色\n            shadow: ({ radius: 20, color: Color.Grey, offsetX: 50, offsetY: 0}), // 设置ActionSheet的阴影效果\n            confirm: {\n              defaultFocus: True, // 设置确认按钮是否默认聚焦\n              value: 'Confirm button', // 设置确认按钮的文本\n              action: () => {\n                console.log('Get Alert Dialog handled') // 确认按钮点击后的操作\n              }\n            },\n            cancel: () => {\n              console.log('actionSheet canceled') // 取消按钮点击后的操作\n            },\n            onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n              console.info("reason=" + JSON.stringify(dismissDialogAction.reason)) // 输出取消原因\n              console.log("dialog onWillDismiss") // 输出对话框即将消失的日志\n              if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                dismissDialogAction.dismiss() // 处理按下返回键的取消操作\n              }\n              if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                dismissDialogAction.dismiss() // 处理点击外部区域的取消操作\n              }\n            },\n            alignment: DialogAlignment.Bottom, // 设置ActionSheet的对齐方式\n            offset: { dx: 0, dy: -10 }, // 设置ActionSheet的偏移量\n            sheets: [\n              {\n                title: 'apples', // 设置第一个选项的标题\n                action: () => {\n                  console.log('apples') // 第一个选项点击后的操作\n                }\n              },\n              {\n                title: 'bananas', // 设置第二个选项的标题\n                action: () => {\n                  console.log('bananas') // 第二个选项点击后的操作\n                }\n              },\n              {\n                title: 'pears', // 设置第三个选项的标题\n                action: () => {\n                  console.log('pears') // 第三个选项点击后的操作\n                }\n              }\n            ]\n          })\n        })\n    }.width('100%') // 设置Flex容器的宽度为100%\n    .height('100%') // 设置Flex容器的高度为100%\n  }\n}