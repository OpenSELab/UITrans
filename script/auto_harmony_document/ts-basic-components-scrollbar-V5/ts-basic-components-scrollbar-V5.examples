/*\n实现一个带有自定义滚动条的垂直滚动列表组件。列表中的每一项是一个带有背景色的文本框，滚动条在内容超出视口时自动显示。\n*/\n\n@Entry\n@Component\nstruct ScrollBarExample {\n  // 创建一个Scroller实例，用于控制滚动行为\n  private scroller: Scroller = new Scroller()\n  \n  // 定义一个数字数组，用于生成列表项\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n  build() {\n    Column() {\n      // 使用Stack布局，将滚动内容和滚动条放在一起\n      Stack({ alignContent: Alignment.End }) {\n        // 创建一个可滚动的容器，使用scroller实例控制滚动\n        Scroll(this.scroller) {\n          // 使用Flex布局，方向为垂直排列\n          Flex({ direction: FlexDirection.Column }) {\n            // 使用ForEach循环生成列表项\n            ForEach(this.arr, (item: number) => {\n              Row() {\n                // 创建一个文本框，显示数组中的数字\n                Text(item.toString())\n                  .width('80%') // 设置文本框宽度为父容器的80%\n                  .height(60) // 设置文本框高度为60\n                  .backgroundColor('#3366CC') // 设置背景颜色\n                  .borderRadius(15) // 设置圆角边框\n                  .fontSize(16) // 设置字体大小\n                  .textAlign(TextAlign.Center) // 设置文本居中对齐\n                  .margin({ top: 5 }) // 设置顶部外边距\n              }\n            }, (item: number) => item.toString()) // 使用数字的字符串形式作为键\n          }.margin({ right: 15 }) // 设置右侧外边距\n        }\n        .width('90%') // 设置滚动容器的宽度为父容器的90%\n        .scrollBar(BarState.Off) // 关闭默认的滚动条\n        .scrollable(ScrollDirection.Vertical) // 设置滚动方向为垂直\n        \n        // 创建一个自定义的滚动条，使用scroller实例控制滚动\n        ScrollBar({ scroller: this.scroller, direction: ScrollBarDirection.Vertical, state: BarState.Auto })\n      }\n    }\n  }\n}


/*\n实现一个带有自定义滚动条的垂直滚动列表组件。列表中的每一项是一个带有背景色的文本框，滚动条位于列表的右侧，并且滚动条的样式可以自定义。\n*/\n\n// xxx.ets\n@Entry\n@Component\nstruct ScrollBarExample {\n  // 创建一个Scroller对象，用于控制滚动行为\n  private scroller: Scroller = new Scroller()\n  // 定义一个数字数组，用于生成列表项\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n  build() {\n    Column() {\n      // 使用Stack组件将滚动列表和滚动条叠加在一起，滚动条位于列表的右侧\n      Stack({ alignContent: Alignment.End }) {\n        // 创建一个可滚动的容器，使用scroller对象控制滚动行为\n        Scroll(this.scroller) {\n          // 使用Flex组件创建一个垂直方向的布局\n          Flex({ direction: FlexDirection.Column }) {\n            // 使用ForEach循环遍历数组，生成列表项\n            ForEach(this.arr, (item: number) => {\n              Row() {\n                // 创建一个文本框，显示数组中的数字\n                Text(item.toString())\n                  .width('80%') // 设置文本框的宽度为父容器的80%\n                  .height(60) // 设置文本框的高度为60\n                  .backgroundColor('#3366CC') // 设置文本框的背景颜色\n                  .borderRadius(15) // 设置文本框的圆角半径\n                  .fontSize(16) // 设置文本的字体大小\n                  .textAlign(TextAlign.Center) // 设置文本居中对齐\n                  .margin({ top: 5 }) // 设置文本框的上边距为5\n              }\n            }, (item: number) => item.toString()) // 使用数组中的数字作为唯一标识符\n          }.margin({ right: 15 }) // 设置Flex容器的右边距为15\n        }\n        .width('90%') // 设置滚动容器的宽度为父容器的90%\n        .scrollBar(BarState.Off) // 关闭默认的滚动条\n        .scrollable(ScrollDirection.Vertical) // 设置滚动方向为垂直方向\n\n        // 创建一个自定义的滚动条，使用scroller对象控制滚动行为\n        ScrollBar({ scroller: this.scroller, direction: ScrollBarDirection.Vertical, state: BarState.Auto }) {\n          Text()\n            .width(20) // 设置滚动条的宽度为20\n            .height(100) // 设置滚动条的高度为100\n            .borderRadius(10) // 设置滚动条的圆角半径\n            .backgroundColor('#C0C0C0') // 设置滚动条的背景颜色\n        }.width(20) // 设置滚动条容器的宽度为20\n        .backgroundColor('#ededed') // 设置滚动条容器的背景颜色\n      }\n    }\n  }\n}