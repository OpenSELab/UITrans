/*\n实现一个树形视图组件，支持节点的新增、删除、重命名操作，并能响应节点的点击、新增、删除和移动事件。树形视图的节点可以包含图标、标题和副标题，支持节点的层级嵌套。\n*/\n\n// 导入树形视图相关的控制器、监听器、监听器管理器、监听类型、节点参数和回调参数\nimport { TreeController, TreeListener, TreeListenerManager, TreeListenType, NodeParam, TreeView, CallbackParam } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct TreeViewDemo {\n  // 创建树形视图的控制器实例\n  private treeController: TreeController = new TreeController();\n  // 获取树形视图的监听器实例\n  private treeListener: TreeListener = TreeListenerManager.getInstance().getTreeListener();\n  // 定义一个状态变量，用于存储当前点击的节点ID\n  @State clickNodeId: number = 0;\n\n  // 组件即将消失时的生命周期方法，用于移除所有监听事件\n  aboutToDisappear(): void {\n    // 移除节点点击事件的监听\n    this.treeListener.off(TreeListenType.NODE_CLICK, undefined);\n    // 移除节点新增事件的监听\n    this.treeListener.off(TreeListenType.NODE_ADD, undefined);\n    // 移除节点删除事件的监听\n    this.treeListener.off(TreeListenType.NODE_DELETE, undefined);\n    // 移除节点移动事件的监听\n    this.treeListener.off(TreeListenType.NODE_MOVE, undefined);\n  }\n\n  // 定义一个Builder方法，用于构建树形视图的菜单\n  @Builder menuBuilder1() {\n    Flex({ direction: FlexDirection.Column, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n      // 新增节点按钮\n      Text('新增').fontSize(16).width(100).height(30).textAlign(TextAlign.Center)\n        .onClick((event: ClickEvent) => {\n          this.treeController.addNode();\n        })\n      Divider()\n      // 删除节点按钮\n      Text('删除').fontSize(16).width(100).height(30).textAlign(TextAlign.Center)\n        .onClick((event: ClickEvent) => {\n          this.treeController.removeNode();\n        })\n      Divider()\n      // 重命名节点按钮\n      Text('重命名').fontSize(16).width(100).height(30).textAlign(TextAlign.Center)\n        .onClick((event: ClickEvent) => {\n          this.treeController.modifyNode();\n        })\n    }.width(100).border({width: 1, color: 0x80808a, radius: '16dp'})\n  }\n\n  // 组件即将显示时的生命周期方法，用于初始化树形视图和监听事件\n  aboutToAppear(): void {\n    // 监听节点点击事件，并更新当前点击的节点ID\n    this.treeListener.on(TreeListenType.NODE_CLICK, (callbackParam: CallbackParam) => {\n      this.clickNodeId = callbackParam.currentNodeId;\n    })\n    // 监听节点新增事件，并更新当前点击的节点ID\n    this.treeListener.on(TreeListenType.NODE_ADD, (callbackParam: CallbackParam) => {\n      this.clickNodeId = callbackParam.currentNodeId;\n    })\n    // 监听节点删除事件，并更新当前点击的节点ID\n    this.treeListener.on(TreeListenType.NODE_DELETE, (callbackParam: CallbackParam) => {\n      this.clickNodeId = callbackParam.currentNodeId;\n    })\n    // 监听节点移动事件，并更新当前点击的节点ID（仅监听一次）\n    this.treeListener.once(TreeListenType.NODE_MOVE, (callbackParam: CallbackParam) => {\n      this.clickNodeId = callbackParam.currentNodeId;\n    })\n\n    // 定义节点的图标资源\n    let normalResource: Resource = $r('app.media.ic_public_collect_normal');\n    let selectedResource: Resource = $r('app.media.ic_public_collect_selected');\n    let editResource: Resource = $r('app.media.ic_public_collect_edit');\n    // 定义第一个节点的参数\n    let nodeParam: NodeParam = { parentNodeId:-1, currentNodeId: 1, isFolder: true, icon: normalResource, selectedIcon: selectedResource,\n      editIcon: editResource, primaryTitle: "目录1验证悬浮框自适应效果是否OK",\n      secondaryTitle: "6" };\n    // 使用树形视图控制器添加节点，并构建树形视图\n    this.treeController\n      .addNode(nodeParam)\n      .addNode({parentNodeId:1, currentNodeId: 2, isFolder: false, primaryTitle: "项目1_1" })\n      .addNode({ parentNodeId:-1, currentNodeId: 7, isFolder: true, primaryTitle: "目录2" })\n      .addNode({ parentNodeId:-1, currentNodeId: 23, isFolder: true, icon: normalResource, selectedIcon: selectedResource,\n        editIcon: editResource, primaryTitle: "目录3" })\n      .addNode({ parentNodeId:-1, currentNodeId: 24, isFolder: false, primaryTitle: "项目4" })\n      .addNode({ parentNodeId:-1, currentNodeId: 31, isFolder: true, icon: normalResource, selectedIcon: selectedResource,\n        editIcon: editResource, primaryTitle: "目录5", secondaryTitle: "0" })\n      .addNode({ parentNodeId:-1, currentNodeId: 32, isFolder: true, icon: normalResource, selectedIcon: selectedResource,\n        editIcon: editResource, primaryTitle: "目录6", secondaryTitle: "0" })\n      .addNode({ parentNodeId:32, currentNodeId: 35, isFolder: true, icon: normalResource, selectedIcon: selectedResource,\n        editIcon: editResource, primaryTitle: "目录6-1", secondaryTitle: "0" })\n      .addNode({ parentNodeId:-1, currentNodeId: 33, isFolder: true, icon: normalResource, selectedIcon: selectedResource,\n        editIcon: editResource, primaryTitle: "目录7", secondaryTitle: "0" })\n      .addNode({ parentNodeId:33, currentNodeId: 34, isFolder: false, primaryTitle: "项目8" })\n      .addNode({ parentNodeId:-1, currentNodeId: 36, isFolder: false, primaryTitle: "项目9" })\n      .buildDone();\n    // 刷新树形视图的节点\n    this.treeController.refreshNode(-1, "父节点", "子节点");\n  }\n\n  // 构建树形视图的主界面\n  build() {\n    Column(){\n      SideBarContainer(SideBarContainerType.Embed)\n      {\n        // 创建树形视图组件，并传入树形视图控制器\n        TreeView({ treeController: this.treeController })\n        Row() {\n          // 垂直分割线\n          Divider().vertical(true).strokeWidth(2).color(0x000000).lineCap(LineCapStyle.Round)\n          Column({ space: 30 }) {\n            // 显示当前点击的节点ID\n            Text('ClickNodeId=' + this.clickNodeId).fontSize('16fp')\n            // 新增节点按钮\n            Button('Add', { type: ButtonType.Normal, stateEffect: true })\n              .borderRadius(8).backgroundColor(0x317aff).width(90)\n              .onClick((event: ClickEvent) => {\n                this.treeController.addNode();\n              })\n            // 修改节点按钮\n            Button('Modify', { type: ButtonType.Normal, stateEffect: true })\n              .borderRadius(8).backgroundColor(0x317aff).width(90)\n              .onClick((event: ClickEvent) => {\n                this.treeController.modifyNode();\n              })\n            // 删除节点按钮\n            Button('Remove', { type: ButtonType.Normal, stateEffect: true })\n              .borderRadius(8).backgroundColor(0x317aff).width(120)\n              .onClick((event: ClickEvent) => {\n                this.treeController.removeNode();\n              })\n          }.height('100%').width('70%').alignItems(HorizontalAlign.Start).margin(10)\n        }\n      }\n      .focusable(true)\n      .showControlButton(false)\n      .showSideBar(true)\n    }\n  }\n}