[
    {
        "description": "该示例展示了如何在鸿蒙ArkUI中使用TreeView组件来实现一个树形结构的视图，并提供了对树节点进行增删改操作的功能。布局上，TreeView组件嵌套在SideBarContainer中，左侧显示树形结构，右侧显示操作按钮。样式上，按钮具有统一的背景颜色和圆角边框，文本居中对齐。功能上，用户可以通过点击按钮来添加、修改或删除树节点，树节点的点击事件会更新显示的节点ID。",
        "code": "import { TreeController, TreeListener, TreeListenerManager, TreeListenType, NodeParam, TreeView, CallbackParam } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct TreeViewDemo {\n  private treeController: TreeController = new TreeController(); // 创建TreeController实例，用于管理树节点的操作\n  private treeListener: TreeListener = TreeListenerManager.getInstance().getTreeListener(); // 获取TreeListener实例，用于监听树节点的事件\n  @State clickNodeId: number = 0; // 状态变量，用于存储当前点击的节点ID\n\n  aboutToDisappear(): void {\n    // 组件即将消失时，取消所有树节点事件的监听\n    this.treeListener.off(TreeListenType.NODE_CLICK, undefined);\n    this.treeListener.off(TreeListenType.NODE_ADD, undefined);\n    this.treeListener.off(TreeListenType.NODE_DELETE, undefined);\n    this.treeListener.off(TreeListenType.NODE_MOVE, undefined);\n  }\n\n  @Builder menuBuilder1() {\n    // 构建一个菜单栏，包含新增、删除和重命名三个按钮\n    Flex({ direction: FlexDirection.Column, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n      Text('新增').fontSize(16).width(100).height(30).textAlign(TextAlign.Center)\n        .onClick((event: ClickEvent) => {\n          this.treeController.addNode(); // 点击“新增”按钮时，调用treeController的addNode方法添加节点\n        })\n      Divider() // 分隔线\n      Text('删除').fontSize(16).width(100).height(30).textAlign(TextAlign.Center)\n        .onClick((event: ClickEvent) => {\n          this.treeController.removeNode(); // 点击“删除”按钮时，调用treeController的removeNode方法删除节点\n        })\n      Divider() // 分隔线\n      Text('重命名').fontSize(16).width(100).height(30).textAlign(TextAlign.Center)\n        .onClick((event: ClickEvent) => {\n          this.treeController.modifyNode(); // 点击“重命名”按钮时，调用treeController的modifyNode方法修改节点\n        })\n    }.width(100).border({width: 1, color: 0x80808a, radius: '16dp'}) // 设置菜单栏的宽度、边框宽度和颜色、圆角半径\n  }\n\n  aboutToAppear(): void {\n    // 组件即将显示时，设置树节点事件的监听\n    this.treeListener.on(TreeListenType.NODE_CLICK, (callbackParam: CallbackParam) => {\n      this.clickNodeId = callbackParam.currentNodeId; // 监听节点点击事件，更新clickNodeId状态变量\n    })\n    this.treeListener.on(TreeListenType.NODE_ADD, (callbackParam: CallbackParam) => {\n      this.clickNodeId = callbackParam.currentNodeId; // 监听节点添加事件，更新clickNodeId状态变量\n    })\n    this.treeListener.on(TreeListenType.NODE_DELETE, (callbackParam: CallbackParam) => {\n      this.clickNodeId = callbackParam.currentNodeId; // 监听节点删除事件，更新clickNodeId状态变量\n    })\n    this.treeListener.once(TreeListenType.NODE_MOVE, (callbackParam: CallbackParam) => {\n      this.clickNodeId = callbackParam.currentNodeId; // 监听节点移动事件，更新clickNodeId状态变量\n    })\n\n    let normalResource: Resource = $r('app.media.ic_public_collect_normal'); // 获取普通状态下的图标资源\n    let selectedResource: Resource = $r('app.media.ic_public_collect_selected'); // 获取选中状态下的图标资源\n    let editResource: Resource = $r('app.media.ic_public_collect_edit'); // 获取编辑状态下的图标资源\n    let nodeParam: NodeParam = { parentNodeId:-1, currentNodeId: 1, isFolder: true, icon: normalResource, selectedIcon: selectedResource,\n      editIcon: editResource, primaryTitle: \"目录1验证悬浮框自适应效果是否OK\",\n      secondaryTitle: \"6\" }; // 创建一个树节点参数对象\n    this.treeController\n      .addNode(nodeParam) // 添加根节点\n      .addNode({parentNodeId:1, currentNodeId: 2, isFolder: false, primaryTitle: \"项目1_1\" }) // 添加子节点\n      .addNode({ parentNodeId:-1, currentNodeId: 7, isFolder: true, primaryTitle: \"目录2\" }) // 添加根节点\n      .addNode({ parentNodeId:-1, currentNodeId: 23, isFolder: true, icon: normalResource, selectedIcon: selectedResource,\n        editIcon: editResource, primaryTitle: \"目录3\" }) // 添加根节点\n      .addNode({ parentNodeId:-1, currentNodeId: 24, isFolder: false, primaryTitle: \"项目4\" }) // 添加根节点\n      .addNode({ parentNodeId:-1, currentNodeId: 31, isFolder: true, icon: normalResource, selectedIcon: selectedResource,\n        editIcon: editResource, primaryTitle: \"目录5\", secondaryTitle: \"0\" }) // 添加根节点\n      .addNode({ parentNodeId:-1, currentNodeId: 32, isFolder: true, icon: normalResource, selectedIcon: selectedResource,\n        editIcon: editResource, primaryTitle: \"目录6\", secondaryTitle: \"0\" }) // 添加根节点\n      .addNode({ parentNodeId:32, currentNodeId: 35, isFolder: true, icon: normalResource, selectedIcon: selectedResource,\n        editIcon: editResource, primaryTitle: \"目录6-1\", secondaryTitle: \"0\" }) // 添加子节点\n      .addNode({ parentNodeId:-1, currentNodeId: 33, isFolder: true, icon: normalResource, selectedIcon: selectedResource,\n        editIcon: editResource, primaryTitle: \"目录7\", secondaryTitle: \"0\" }) // 添加根节点\n      .addNode({ parentNodeId:33, currentNodeId: 34, isFolder: false, primaryTitle: \"项目8\" }) // 添加子节点\n      .addNode({ parentNodeId:-1, currentNodeId: 36, isFolder: false, primaryTitle: \"项目9\" }) // 添加根节点\n      .buildDone(); // 完成树节点的构建\n    this.treeController.refreshNode(-1, \"父节点\", \"子节点\"); // 刷新树节点\n  }\n\n  build() {\n    Column(){\n      SideBarContainer(SideBarContainerType.Embed) // 创建一个嵌入式的侧边栏容器\n      {\n        TreeView({ treeController: this.treeController }) // 创建TreeView组件，绑定treeController\n        Row() {\n          Divider().vertical(true).strokeWidth(2).color(0x000000).lineCap(LineCapStyle.Round) // 创建垂直分隔线\n          Column({ space: 30 }) {\n            Text('ClickNodeId=' + this.clickNodeId).fontSize('16fp') // 显示当前点击的节点ID\n            Button('Add', { type: ButtonType.Normal, stateEffect: true })\n              .borderRadius(8).backgroundColor(0x317aff).width(90)\n              .onClick((event: ClickEvent) => {\n                this.treeController.addNode(); // 点击“Add”按钮时，调用treeController的addNode方法添加节点\n              })\n            Button('Modify', { type: ButtonType.Normal, stateEffect: true })\n              .borderRadius(8).backgroundColor(0x317aff).width(90)\n              .onClick((event: ClickEvent) => {\n                this.treeController.modifyNode(); // 点击“Modify”按钮时，调用treeController的modifyNode方法修改节点\n              })\n            Button('Remove', { type: ButtonType.Normal, stateEffect: true })\n              .borderRadius(8).backgroundColor(0x317aff).width(120)\n              .onClick((event: ClickEvent) => {\n                this.treeController.removeNode(); // 点击“Remove”按钮时，调用treeController的removeNode方法删除节点\n              })\n          }.height('100%').width('70%').alignItems(HorizontalAlign.Start).margin(10) // 设置按钮列的高度、宽度、对齐方式和边距\n        }\n      }\n      .focusable(true) // 设置侧边栏容器可聚焦\n      .showControlButton(false) // 隐藏控制按钮\n      .showSideBar(true) // 显示侧边栏\n    }\n  }}"
    }
]