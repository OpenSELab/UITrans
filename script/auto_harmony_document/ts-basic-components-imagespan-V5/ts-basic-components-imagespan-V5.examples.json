[
    {
        "description": "该组件通过 Column 布局实现了一个展示带有背景样式的 ImageSpan 图片的界面。布局宽度占据整个屏幕，高度由内容自动调整。组件的垂直方向上包含一个 Text 组件，Text 组件内部嵌套了一个 ImageSpan 组件。ImageSpan 组件用于显示应用图标，并设置了其宽度、高度、垂直对齐方式以及背景样式。\n\n布局属性方面，Column 组件的宽度设置为 100%，确保其占据整个屏幕宽度，同时通过 alignItems 属性设置为 HorizontalAlign.Center，使得内部内容在水平方向上居中对齐。\n\n组件的样式和外观方面，ImageSpan 组件的宽度设置为 60vp，高度设置为 60vp，垂直对齐方式设置为 ImageSpanAlignment.CENTER，确保图片在文本中垂直居中显示。背景样式通过 textBackgroundStyle 方法设置，背景颜色为绿色（Color.Green），背景圆角半径为 5vp，使得图片背景呈现圆角矩形的绿色背景。\n\n组件的排列和嵌套关系方面，Column 组件作为根布局，内部包含一个 Text 组件，Text 组件内部嵌套了 ImageSpan 组件。这种嵌套关系确保了 ImageSpan 图片在 Text 组件中正确显示，并且通过 Column 布局使得整个组件在垂直方向上居中对齐。\n\n组件的功能和交互方面，该示例主要展示了如何通过 ImageSpan 组件显示图片，并通过 textBackgroundStyle 方法设置图片的背景样式，没有涉及复杂的交互功能。",
        "code": "@Component\n@Entry\nstruct Index {\n  build() {\n    Column() {\n      Text() {\n        ImageSpan($r('app.media.app_icon')) // 使用 ImageSpan 组件显示应用图标，资源名为 app.media.app_icon\n          .width('60vp') // 设置 ImageSpan 的宽度为 60vp\n          .height('60vp') // 设置 ImageSpan 的高度为 60vp\n          .verticalAlign(ImageSpanAlignment.CENTER) // 设置 ImageSpan 的垂直对齐方式为居中\n          .textBackgroundStyle({color: Color.Green, radius: \"5vp\"}) // 设置 ImageSpan 的背景样式，背景颜色为绿色，圆角半径为 5vp\n      }\n    }.width('100%').alignItems(HorizontalAlign.Center) // 设置 Column 的宽度为 100%，内部内容在水平方向上居中对齐\n  }\n}"
    },
    {
        "description": "该组件通过Column布局实现了一个展示网络图片加载效果的界面。布局宽度占据整个屏幕，高度设为250vp，内边距为左右35vp、顶部35vp。组件的垂直方向上被分为两个部分：一个按钮和一个Text组件。按钮用于触发网络图片的加载请求，Text组件用于展示加载的图片。\n按钮的样式包括默认的背景颜色、边框圆角、宽度和高度等属性，支持点击事件。Text组件内部嵌套了一个ImageSpan组件，用于展示网络图片。ImageSpan组件设置了宽度为300vp，高度为300vp，并支持占位图功能。\n组件的功能包括点击按钮触发网络图片的加载请求，并在加载成功后展示图片。如果加载失败，则展示占位图。整个布局通过Column布局保证按钮和图片在垂直方向上有序排列，确保界面整洁美观。",
        "code": "@Entry\n@Component\nstruct SpanExample {\n  @State imageAlt: PixelMap | undefined = undefined // 用于存储加载的图片数据\n\n  httpRequest() {\n    // 发起HTTP请求获取网络图片\n    http.createHttp().request(\"https://www.example.com/xxx.png\", (error: BusinessError, data: http.HttpResponse) => {\n      if (error) {\n        // 请求失败时输出错误信息\n        console.error(`http request failed with. Code: ${error.code}, message: ${error.message}`)\n      } else {\n        // 请求成功时输出成功信息\n        console.log(`http request success.`)\n        let imageData: ArrayBuffer = data.result as ArrayBuffer\n        let imageSource: image.ImageSource = image.createImageSource(imageData)\n\n        class tmp {\n          height: number = 100\n          width: number = 100\n        }\n\n        let option: Record<string, number | boolean | tmp> = {\n          'alphaType': 0, \n          'editable': false, \n          'pixelFormat': 3, \n          'scaleMode': 1, \n          'size': { height: 100, width: 100 }\n        }\n\n        imageSource.createPixelMap(option).then((pixelMap: PixelMap) => {\n          // 将加载的图片数据存储到状态变量中\n          this.imageAlt = pixelMap\n        })\n      }\n    })\n  }\n\n  build() {\n    Column() {\n      Button(\"获取网络图片\")\n        .onClick(() => {\n          // 点击按钮触发网络图片的加载请求\n          this.httpRequest()\n        })\n\n      Text() {\n        ImageSpan('https://www.example.com/xxx.png')\n          .alt(this.imageAlt) // 设置占位图\n          .width(300) // 设置图片宽度\n          .height(300) // 设置图片高度\n      }\n    }.width('100%').height(250).padding({ left: 35, right: 35, top: 35 })\n  }\n}"
    },
    {
        "description": "该示例通过 Flex 布局实现了一个展示文本和图片混合排版的界面。布局宽度占据整个屏幕，高度设为 100%，内边距为左右 0、顶部 0。组件的垂直方向上被分为两个主要部分：一个居中的文本段落和一个包含多个 ImageSpan 和 Span 组件的文本段落。\n\n第一个文本段落居中显示，字体大小为 25，文本颜色为粉色，无装饰线。第二个文本段落包含多个 ImageSpan 和 Span 组件，每个 ImageSpan 和 Span 组件通过不同的垂直对齐方式（如居中、顶部、基线、底部）进行排列。每个 ImageSpan 的图片大小和样式不同，Span 组件的文本装饰线（如删除线、下划线）和颜色也不同。\n\n整个布局通过 Flex 布局保证文本和图片在垂直方向上有序排列，确保界面整洁美观。",
        "code": "@Entry\n@Component\nstruct SpanExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建一个居中的文本段落，字体大小为 25，文本颜色为粉色，无装饰线\n      Text() {\n        Span('This is the Span and ImageSpan component').fontSize(25).textCase(TextCase.Normal)\n          .decoration({ type: TextDecorationType.None, color: Color.Pink })\n      }.width('100%').textAlign(TextAlign.Center)\n\n      // 创建一个包含多个 ImageSpan 和 Span 组件的文本段落\n      Text() {\n        // 插入一个宽度为 200px，高度为 200px 的 ImageSpan，图片填充方式为完全填充，垂直对齐方式为居中\n        ImageSpan($r('app.media.icon'))\n          .width('200px')\n          .height('200px')\n          .objectFit(ImageFit.Fill)\n          .verticalAlign(ImageSpanAlignment.CENTER)\n        // 插入一个带有删除线的 Span 组件，字体大小为 25，颜色为红色\n        Span('I am LineThrough-span')\n          .decoration({ type: TextDecorationType.LineThrough, color: Color.Red }).fontSize(25)\n        // 插入一个宽度为 50px，高度为 50px 的 ImageSpan，垂直对齐方式为顶部\n        ImageSpan($r('app.media.icon'))\n          .width('50px')\n          .height('50px')\n          .verticalAlign(ImageSpanAlignment.TOP)\n        // 插入一个带有下划线的 Span 组件，字体大小为 25，颜色为红色\n        Span('I am Underline-span')\n          .decoration({ type: TextDecorationType.Underline, color: Color.Red }).fontSize(25)\n        // 插入一个宽度为 100px，高度为 100px 的 ImageSpan，垂直对齐方式为基线\n        ImageSpan($r('app.media.icon'))\n          .size({ width: '100px', height: '100px' })\n          .verticalAlign(ImageSpanAlignment.BASELINE)\n        // 插入一个带有下划线的 Span 组件，字体大小为 25，颜色为红色\n        Span('I am Underline-span')\n          .decoration({ type: TextDecorationType.Underline, color: Color.Red }).fontSize(25)\n        // 插入一个宽度为 70px，高度为 70px 的 ImageSpan，垂直对齐方式为底部\n        ImageSpan($r('app.media.icon'))\n          .width('70px')\n          .height('70px')\n          .verticalAlign(ImageSpanAlignment.BOTTOM)\n        // 插入一个带有下划线的 Span 组件，字体大小为 50，颜色为红色\n        Span('I am Underline-span')\n          .decoration({ type: TextDecorationType.Underline, color: Color.Red }).fontSize(50)\n      }\n      .width('100%')\n      .textIndent(50) // 设置文本缩进为 50\n    }.width('100%').height('100%').padding({ left: 0, right: 0, top: 0 })\n  }\n}"
    }
]