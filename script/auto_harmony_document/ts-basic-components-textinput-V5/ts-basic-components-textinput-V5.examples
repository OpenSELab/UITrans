/*\n实现一个包含两个TextInput组件的页面，展示如何在下划线开启时，设置下划线的颜色。第一个TextInput组件展示了如何根据不同的状态（正常、输入中、错误、禁用）设置不同的下划线颜色。第二个TextInput组件展示了如何设置单一的下划线颜色。\n*/\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column() {\n        // 创建一个TextInput组件，并设置提示文本内容\n        TextInput({placeholder:'提示文本内容'})\n          // 开启下划线显示\n          .showUnderline(true)\n          // 设置下划线颜色，根据不同的状态（正常、输入中、错误、禁用）设置不同的颜色\n          .underlineColor({normal:Color.Orange, typing:Color.Green, error:Color.Red, disable:Color.Gray});\n        \n        // 创建另一个TextInput组件，并设置提示文本内容\n        TextInput({placeholder:'提示文本内容'})\n          // 开启下划线显示\n          .showUnderline(true)\n          // 设置下划线颜色为单一的灰色\n          .underlineColor(Color.Gray);\n      }\n      // 设置Column的宽度为100%\n      .width('100%')\n    }\n    // 设置Row的高度为100%\n    .height('100%')\n  }\n}


/*\n实现一个文本输入组件，对比了使用fontFeature属性ss01开启和关闭的效果。通过两个TextInput组件展示不同设置下的字体特征变化。\n*/\n\n@Entry\n@Component\nstruct textInput {\n  @State text1: string = 'This is ss01 on : 0123456789' // 定义第一个文本内容，表示ss01开启\n  @State text2: string = 'This is ss01 off: 0123456789' // 定义第二个文本内容，表示ss01关闭\n\n  build() {\n    Column(){\n      TextInput({text: this.text1}) // 创建第一个文本输入组件，显示text1内容\n        .fontSize(20) // 设置字体大小为20\n        .margin({top:200}) // 设置顶部外边距为200\n        .fontFeature("\\"ss01\\" on") // 开启ss01字体特征\n      TextInput({text : this.text2}) // 创建第二个文本输入组件，显示text2内容\n        .margin({top:10}) // 设置顶部外边距为10\n        .fontSize(20) // 设置字体大小为20\n        .fontFeature("\\"ss01\\" off") // 关闭ss01字体特征\n    }\n    .width("90%") // 设置列的宽度为90%\n    .margin("5%") // 设置列的外边距为5%\n  }\n}


/*\n实现一个带有取消按钮的文本输入框组件。文本输入框支持自定义取消按钮的样式和图标，并且当用户输入内容时，输入的内容会被实时更新到状态变量中。\n*/\n\n@Entry\n@Component\nstruct ClearNodeExample {\n  // 定义一个状态变量 text，用于存储用户输入的文本内容\n  @State text: string = ''\n  \n  // 创建一个 TextInputController 实例，用于控制 TextInput 组件的行为\n  controller: TextInputController = new TextInputController()\n\n  build() {\n    Column() {\n      // 创建一个 TextInput 组件，设置占位符为 'input ...'，并使用上面定义的 controller 进行控制\n      TextInput({ placeholder: 'input ...', controller: this.controller })\n        .width(380) // 设置文本输入框的宽度为 380 像素\n        .height(60) // 设置文本输入框的高度为 60 像素\n        .cancelButton({\n          // 设置取消按钮的样式为常量样式（即始终显示取消按钮）\n          style: CancelButtonStyle.CONSTANT,\n          icon: {\n            // 设置取消按钮图标的大小为 45 像素\n            size: 45,\n            // 设置取消按钮图标的来源为应用资源中的图标\n            src: $r('app.media.icon'),\n            // 设置取消按钮图标的颜色为蓝色\n            color: Color.Blue\n          }\n        })\n        // 当文本输入框的内容发生变化时，触发 onChange 事件，更新状态变量 text\n        .onChange((value: string) => {\n          this.text = value\n        })\n    }\n  }\n}


/*\n实现一个带有计数器的文本输入框组件，支持显示输入字符的计数，并在输入字符达到最大长度的一半时高亮显示计数器。\n*/\n\n@Entry\n@Component\nstruct TextInputExample {\n  @State text: string = '' // 定义一个状态变量 text，用于存储用户输入的文本\n  controller: TextInputController = new TextInputController() // 创建一个 TextInputController 实例，用于控制 TextInput 组件的行为\n\n  build() {\n    Column() {\n      TextInput({ text: this.text, controller: this.controller }) // 创建一个 TextInput 组件，绑定 text 状态变量和 controller\n        .placeholderFont({ size: 16, weight: 400 }) // 设置占位符文本的字体大小和粗细\n        .width(336) // 设置 TextInput 组件的宽度为 336 像素\n        .height(56) // 设置 TextInput 组件的高度为 56 像素\n        .maxLength(6) // 设置 TextInput 组件的最大输入长度为 6 个字符\n        .showUnderline(true) // 显示 TextInput 组件的下划线\n        .showCounter(true, { thresholdPercentage: 50, highlightBorder: true }) // 显示计数器，并在输入字符达到最大长度的一半时高亮显示计数器\n\n        .onChange((value: string) => { // 监听 TextInput 的输入变化事件\n          this.text = value // 将输入的值赋给 text 状态变量\n        })\n    }.width('100%').height('100%').backgroundColor('#F1F3F5') // 设置 Column 容器的宽度、高度和背景颜色\n  }\n}


/*\n实现一个自定义键盘的TextInput组件示例。该示例展示了如何通过TextInput组件绑定自定义键盘，并通过自定义键盘输入内容到TextInput中。\n*/\n\n@Entry\n@Component\nstruct TextInputExample {\n  // 创建一个TextInputController实例，用于控制TextInput的行为\n  controller: TextInputController = new TextInputController()\n  \n  // 定义一个状态变量inputValue，用于存储TextInput的输入值\n  @State inputValue: string = ""\n\n  // 自定义键盘的构建器，用于生成自定义键盘的UI\n  @Builder CustomKeyboardBuilder() {\n    Column() {\n      // 创建一个按钮，点击后停止编辑TextInput\n      Button('x').onClick(() => {\n        this.controller.stopEditing()\n      })\n      \n      // 创建一个Grid布局，用于放置键盘的按键\n      Grid() {\n        // 使用ForEach循环生成键盘的按键\n        ForEach([1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'], (item: number | string) => {\n          GridItem() {\n            // 创建一个按钮，按钮的文本为当前循环的item\n            Button(item + "")\n              .width(110) // 设置按钮的宽度\n              .onClick(() => {\n                // 点击按钮时，将item添加到inputValue中\n                this.inputValue += item\n              })\n          }\n        })\n      }\n      .maxCount(3) // 设置Grid的最大列数为3\n      .columnsGap(10) // 设置列之间的间距\n      .rowsGap(10) // 设置行之间的间距\n      .padding(5) // 设置Grid的内边距\n    }\n    .backgroundColor(Color.Gray) // 设置自定义键盘的背景颜色为灰色\n  }\n\n  build() {\n    Column() {\n      // 创建一个TextInput组件，绑定controller和inputValue\n      TextInput({ controller: this.controller, text: this.inputValue })\n        .customKeyboard(this.CustomKeyboardBuilder()) // 设置自定义键盘为CustomKeyboardBuilder生成的键盘\n        .margin(10) // 设置TextInput的外边距\n        .border({ width: 1 }) // 设置TextInput的边框宽度\n        .height('48vp') // 设置TextInput的高度\n    }\n  }\n}


/*\n实现一个包含两个TextInput组件的示例，分别展示输入框的插入和删除回调功能。\n第一个TextInput组件支持插入回调，第二个TextInput组件支持删除回调。\n通过回调函数获取插入和删除的文本内容、插入和删除的位置以及删除的方向，并将这些信息显示在界面上。\n*/\n\n@Entry\n@Component\nstruct TextInputExample {\n  // 用于存储插入的文本内容\n  @State insertValue: string = ""\n  // 用于存储删除的文本内容\n  @State deleteValue: string = ""\n  // 用于存储插入的位置\n  @State insertOffset: number = 0\n  // 用于存储删除的位置\n  @State deleteOffset: number = 0\n  // 用于存储删除的方向，0表示向后删除，1表示向前删除\n  @State deleteDirection: number = 0\n\n  build() {\n    Row() {\n      Column() {\n        // 第一个TextInput组件，支持插入回调\n        TextInput({ text: "TextInput支持插入回调文本" })\n          .height(60)\n          // 插入前的回调函数，获取插入的文本内容\n          .onWillInsert((info: InsertValue) => {\n            this.insertValue = info.insertValue\n            return true;\n          })\n          // 插入后的回调函数，获取插入的位置\n          .onDidInsert((info: InsertValue) => {\n            this.insertOffset = info.insertOffset\n          })\n\n        // 显示插入的文本内容和插入的位置\n        Text("insertValue:" + this.insertValue + "  insertOffset:" + this.insertOffset).height(30)\n\n        // 第二个TextInput组件，支持删除回调\n        TextInput({ text: "TextInput支持删除回调文本b" })\n          .height(60)\n          // 删除前的回调函数，获取删除的文本内容和删除的方向\n          .onWillDelete((info: DeleteValue) => {\n            this.deleteValue = info.deleteValue\n            info.direction\n            return true;\n          })\n          // 删除后的回调函数，获取删除的位置和删除的方向\n          .onDidDelete((info: DeleteValue) => {\n            this.deleteOffset = info.deleteOffset\n            this.deleteDirection = info.direction\n          })\n\n        // 显示删除的文本内容和删除的位置\n        Text("deleteValue:" + this.deleteValue + "  deleteOffset:" + this.deleteOffset).height(30)\n        // 显示删除的方向，0表示向后删除，1表示向前删除\n        Text("deleteDirection:" + (this.deleteDirection == 0 ? "BACKWARD" : "FORWARD")).height(30)\n\n      }.width('100%')\n    }\n    .height('100%')\n  }\n}


/*\n实现一个文本输入框组件，展示不同高度自适应策略对文本显示的影响。通过设置minFontSize、maxFontSize和heightAdaptivePolicy属性，控制文本在输入框内的自适应显示方式。\n*/\n\n@Entry\n@Component\nstruct TextInputExample {\n  build() {\n    Row() {\n      Column() {\n        // 显示标题，说明当前展示的是高度自适应策略\n        Text('heightAdaptivePolicy').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 第一个文本输入框，未设置高度自适应策略\n        TextInput({text: 'This is the text without the height adaptive policy set'})\n          .width('80%').height(50).borderWidth(1).margin(1)\n        \n        // 第二个文本输入框，设置高度自适应策略为MAX_LINES_FIRST\n        TextInput({text: 'This is the text with the height adaptive policy set'})\n          .width('80%').height(50).borderWidth(1).margin(1)\n          .minFontSize(4) // 设置最小字体大小为4\n          .maxFontSize(40) // 设置最大字体大小为40\n          .maxLines(3) // 设置最大行数为3\n          .heightAdaptivePolicy(TextHeightAdaptivePolicy.MAX_LINES_FIRST) // 高度自适应策略为优先适应最大行数\n        \n        // 第三个文本输入框，设置高度自适应策略为MIN_FONT_SIZE_FIRST\n        TextInput({text: 'This is the text with the height adaptive policy set'})\n          .width('80%').height(50).borderWidth(1).margin(1)\n          .minFontSize(4) // 设置最小字体大小为4\n          .maxFontSize(40) // 设置最大字体大小为40\n          .maxLines(3) // 设置最大行数为3\n          .heightAdaptivePolicy(TextHeightAdaptivePolicy.MIN_FONT_SIZE_FIRST) // 高度自适应策略为优先适应最小字体大小\n        \n        // 第四个文本输入框，设置高度自适应策略为LAYOUT_CONSTRAINT_FIRST\n        TextInput({text: 'This is the text with the height adaptive policy set'})\n          .width('80%').height(50).borderWidth(1).margin(1)\n          .minFontSize(4) // 设置最小字体大小为4\n          .maxFontSize(40) // 设置最大字体大小为40\n          .maxLines(3) // 设置最大行数为3\n          .heightAdaptivePolicy(TextHeightAdaptivePolicy.LAYOUT_CONSTRAINT_FIRST) // 高度自适应策略为优先适应布局约束\n      }.height('90%')\n    }\n    .width('90%')\n    .margin(10)\n  }\n}


/*\n实现一个自定义键盘弹出时发生避让的示例。该示例包含一个自定义键盘，用户可以通过点击按钮来切换输入框的高度，并且键盘弹出时会自动避让输入框，避免遮挡。\n*/\n\n@Entry\n@Component\nstruct Input {\n  // 创建一个TextInputController实例，用于控制TextInput组件的行为\n  controller: TextInputController = new TextInputController()\n  \n  // 定义一个状态变量inputValue，用于存储输入框的文本内容\n  @State inputValue: string = ""\n  \n  // 定义一个状态变量height1，用于控制输入框的高度，初始值为80%\n  @State height1: string | number = '80%'\n  \n  // 定义一个状态变量supportAvoidance，用于控制是否支持键盘避让功能，初始值为true\n  @State supportAvoidance: boolean = true;\n\n  // 自定义键盘的构建器，用于生成自定义键盘的UI\n  @Builder CustomKeyboardBuilder() {\n    Column() {\n      Row() {\n        // 创建一个按钮，点击后停止编辑\n        Button('x').onClick(() => {\n          this.controller.stopEditing()\n        }).margin(10)\n      }\n      Grid() {\n        // 使用ForEach循环生成数字和符号按钮\n        ForEach([1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'], (item: number | string) => {\n          GridItem() {\n            // 创建一个按钮，点击后将对应的数字或符号添加到输入框中\n            Button(item + "").width(110).onClick(() => {\n              this.inputValue += item\n            })\n          }\n        })\n      }.maxCount(3).columnsGap(10).rowsGap(10).padding(5)\n    }.backgroundColor(Color.Gray)\n  }\n\n  build() {\n    Column() {\n      Row() {\n        // 创建一个按钮，点击后将输入框高度设置为20%\n        Button("20%").fontSize(24).onClick(() => {\n          this.height1 = "20%"\n        })\n        // 创建一个按钮，点击后将输入框高度设置为80%\n        Button("80%").fontSize(24).margin({ left: 20 }).onClick(() => {\n          this.height1 = "80%"\n        })\n      }\n      .justifyContent(FlexAlign.Center)\n      .alignItems(VerticalAlign.Bottom)\n      .height(this.height1) // 设置Row的高度为height1\n      .width("100%")\n      .padding({ bottom: 50 })\n\n      // 创建一个TextInput组件，使用自定义键盘，并支持键盘避让功能\n      TextInput({ controller: this.controller, text: this.inputValue })\n        .customKeyboard(this.CustomKeyboardBuilder(), { supportAvoidance: this.supportAvoidance })\n        .margin(10)\n        .border({ width: 1 })\n    }\n  }\n}


/*\n实现一个展示不同wordBreak属性的TextInput样式的示例。通过设置不同的wordBreak属性，展示TextInput组件在不同换行策略下的表现。\n*/\n\n@Entry\n@Component\nstruct TextInputExample {\n  build() {\n    Column() {\n      // 展示TextInput为inline模式，WordBreakType属性为NORMAL的样式\n      Text("TextInput为inline模式，WordBreakType属性为NORMAL的样式：").fontSize(16).fontColor(0xFF0000)\n      TextInput({\n        text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'\n      })\n        .fontSize(16) // 设置字体大小为16\n        .style(TextInputStyle.Inline) // 设置TextInput的样式为inline模式\n        .wordBreak(WordBreak.NORMAL) // 设置wordBreak属性为NORMAL，即按照正常单词边界换行\n\n      // 展示TextInput为inline模式，英文文本，WordBreakType属性为BREAK_ALL的样式\n      Text("TextInput为inline模式，英文文本，WordBreakType属性为BREAK_ALL的样式：").fontSize(16).fontColor(0xFF0000)\n      TextInput({\n        text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'\n      })\n        .fontSize(16) // 设置字体大小为16\n        .style(TextInputStyle.Inline) // 设置TextInput的样式为inline模式\n        .wordBreak(WordBreak.BREAK_ALL) // 设置wordBreak属性为BREAK_ALL，即允许在单词内换行\n\n      // 展示TextInput为inline模式，中文文本，WordBreakType属性为BREAK_ALL的样式\n      Text("TextInput为inline模式，中文文本，WordBreakType属性为BREAK_ALL的样式：").fontSize(16).fontColor(0xFF0000)\n      TextInput({\n        text: '多行文本输入框组件，当输入的文本内容超过组件宽度时会自动换行显示。\\n高度未设置时，组件无默认高度，自适应内容高度。宽度未设置时，默认撑满最大宽度。'\n      })\n        .fontSize(16) // 设置字体大小为16\n        .style(TextInputStyle.Inline) // 设置TextInput的样式为inline模式\n        .wordBreak(WordBreak.BREAK_ALL) // 设置wordBreak属性为BREAK_ALL，即允许在单词内换行\n\n      // 展示TextInput为inline模式，WordBreakType属性为BREAK_WORD的样式\n      Text("TextInput为inline模式，WordBreakType属性为BREAK_WORD的样式：").fontSize(16).fontColor(0xFF0000)\n      TextInput({\n        text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'\n      })\n        .fontSize(16) // 设置字体大小为16\n        .style(TextInputStyle.Inline) // 设置TextInput的样式为inline模式\n        .wordBreak(WordBreak.BREAK_WORD) // 设置wordBreak属性为BREAK_WORD，即尽量在单词边界换行，必要时在单词内换行\n    }\n  }\n}


/*\n实现一个展示不同换行策略效果的示例组件。通过设置不同的lineBreakStrategy，展示在相同文本内容和布局条件下，不同换行策略对文本显示效果的影响。\n*/\n\n@Entry\n@Component\nstruct TextExample1 {\n  // 定义一个状态变量message1，用于存储示例文本内容\n  @State message1: string = "They can be classified as built-in components–those directly provided by the ArkUI framework and custom components – those defined by developers" +\n    "The built-in components include buttons radio buttonsprogress indicators and text You can set the rendering effectof thesecomponents in method chaining mode," +\n    "page components are divided into independent UI units to implementindependent creation development and reuse of different units on pages making pages more engineering-oriented.";\n\n  build() {\n    // 使用Flex布局，方向为列布局，子元素左对齐\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start }) {\n      // 显示标题，说明当前展示的换行策略为GREEDY\n      Text('LineBreakStrategy.GREEDY').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n      // 创建一个TextInput组件，显示message1的内容，并设置换行策略为GREEDY\n      TextInput({text: this.message1})\n        .fontSize(12) // 设置字体大小\n        .border({ width: 1 }) // 设置边框宽度\n        .padding(10) // 设置内边距\n        .width('100%') // 设置宽度为父容器的100%\n        .maxLines(5) // 设置最大行数为5\n        .style(TextInputStyle.Inline) // 设置TextInput的样式为Inline\n        .lineBreakStrategy(LineBreakStrategy.GREEDY) // 设置换行策略为GREEDY\n\n      // 显示标题，说明当前展示的换行策略为HIGH_QUALITY\n      Text('LineBreakStrategy.HIGH_QUALITY').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n      // 创建一个TextInput组件，显示message1的内容，并设置换行策略为HIGH_QUALITY\n      TextInput({text: this.message1})\n        .fontSize(12)\n        .border({ width: 1 })\n        .padding(10)\n        .width('100%')\n        .maxLines(5)\n        .style(TextInputStyle.Inline)\n        .lineBreakStrategy(LineBreakStrategy.HIGH_QUALITY) // 设置换行策略为HIGH_QUALITY\n\n      // 显示标题，说明当前展示的换行策略为BALANCED\n      Text('LineBreakStrategy.BALANCED').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n      // 创建一个TextInput组件，显示message1的内容，并设置换行策略为BALANCED\n      TextInput({text: this.message1})\n        .fontSize(12)\n        .border({ width: 1 })\n        .padding(10)\n        .width('100%')\n        .maxLines(5)\n        .style(TextInputStyle.Inline)\n        .lineBreakStrategy(LineBreakStrategy.BALANCED) // 设置换行策略为BALANCED\n    }\n    .height(700) // 设置Flex容器的高度\n    .width(370) // 设置Flex容器的宽度\n    .padding({ left: 35, right: 35, top: 35 }) // 设置Flex容器的内边距\n  }\n}


/*\n实现一个包含多个TextInput组件的示例，展示了密码输入框的自定义图标、下划线样式、错误提示、单位选择以及用户名输入验证功能。\n*/\n\n@Entry\n@Component\nstruct TextInputExample {\n  // 定义密码输入框的图标资源\n  @State PassWordSrc1: Resource = $r('app.media.onIcon') // 密码可见时的图标\n  @State PassWordSrc2: Resource = $r('app.media.offIcon') // 密码不可见时的图标\n  @State TextError: string = '' // 错误提示文本\n  @State Text: string = '' // 用户输入的文本\n  @State NameText: string = 'test' // 用户名验证的标准文本\n\n  // 定义一个Builder方法，用于生成单位选择组件\n  @Builder itemEnd() {\n    Select([{ value: 'KB' },\n      { value: 'MB' },\n      { value: 'GB' },\n      { value: 'TB', }])\n      .height("48vp") // 设置高度\n      .borderRadius(0) // 设置边框圆角\n      .selected(2) // 设置默认选中项\n      .align(Alignment.Center) // 设置对齐方式\n      .value('MB') // 设置默认值\n      .font({ size: 20, weight: 500 }) // 设置字体样式\n      .fontColor('#182431') // 设置字体颜色\n      .selectedOptionFont({ size: 20, weight: 400 }) // 设置选中项字体样式\n      .optionFont({ size: 20, weight: 400 }) // 设置选项字体样式\n      .backgroundColor(Color.Transparent) // 设置背景颜色\n      .responseRegion({ height: "40vp", width: "80%", x: '10%', y: '6vp' }) // 设置响应区域\n      .onSelect((index: number) => {\n        console.info('Select:' + index) // 选择事件回调\n      })\n  }\n\n  build() {\n    Column({ space: 20 }) {\n\n      // 第一个TextInput组件，展示自定义密码图标\n      TextInput({ placeholder: 'user define password icon' })\n        .type(InputType.Password) // 设置输入类型为密码\n        .width(380) // 设置宽度\n        .height(60) // 设置高度\n        .passwordIcon({ onIconSrc: this.PassWordSrc1, offIconSrc: this.PassWordSrc2 }) // 设置密码图标\n\n      // 第二个TextInput组件，展示下划线样式、错误提示和单位选择\n      TextInput({ placeholder: 'underline style' })\n        .showUnderline(true) // 显示下划线\n        .width(380) // 设置宽度\n        .height(60) // 设置高度\n        .showError('Error') // 显示错误提示\n        .showUnit(this.itemEnd) // 显示单位选择组件\n\n      // 显示用户名输入的文本\n      Text(`用户名：${this.Text}`)\n        .width('95%') // 设置宽度\n\n      // 第三个TextInput组件，用于输入用户名，并进行验证\n      TextInput({ placeholder: '请输入用户名', text: this.Text })\n        .showUnderline(true) // 显示下划线\n        .width(380) // 设置宽度\n        .showError(this.TextError) // 显示错误提示\n        .onChange((value: string) => {\n          this.Text = value // 输入内容变化时更新状态\n        })\n        .onSubmit((enterKey: EnterKeyType, event: SubmitEvent) => {\n          if (this.Text == this.NameText) { // 验证用户名是否正确\n            this.TextError = '' // 清除错误提示\n          } else {\n            this.TextError = '用户名输入错误' // 显示错误提示\n            this.Text = '' // 清空输入内容\n            event.keepEditableState() // 保持输入框的可编辑状态\n          }\n        })\n\n    }.width('100%') // 设置Column的宽度\n  }\n}


/*\n实现一个带有自定义编辑菜单的文本输入组件。该组件允许用户自定义编辑菜单的选项，包括修改现有选项的文本内容和图标，以及添加新的自定义选项。此外，组件还支持拦截特定菜单项的点击事件，并根据需要进行处理。\n*/\n\n@Entry\n@Component\nstruct TextInputExample {\n  @State text: string = 'TextInput editMenuOptions' // 初始化文本输入框的默认文本内容\n\n  // 自定义编辑菜单的创建方法\n  onCreateMenu(menuItems: Array<TextMenuItem>) {\n    menuItems.forEach((value, index) => {\n      value.icon = $r('app.media.startIcon') // 为每个菜单项设置相同的图标\n      if (value.id.equals(TextMenuItemId.COPY)) {\n        value.content = "复制change" // 修改“复制”菜单项的文本内容\n      }\n      if (value.id.equals(TextMenuItemId.SELECT_ALL)) {\n        value.content = "全选change" // 修改“全选”菜单项的文本内容\n      }\n    })\n    let item1: TextMenuItem = {\n      content: 'custom1', // 自定义菜单项1的文本内容\n      icon: $r('app.media.startIcon'), // 自定义菜单项1的图标\n      id: TextMenuItemId.of('custom1'), // 自定义菜单项1的唯一标识符\n    }\n    let item2: TextMenuItem = {\n      content: 'custom2', // 自定义菜单项2的文本内容\n      id: TextMenuItemId.of('custom2'), // 自定义菜单项2的唯一标识符\n      icon: $r('app.media.startIcon'), // 自定义菜单项2的图标\n    }\n    menuItems.push(item1) // 将自定义菜单项1添加到菜单项列表的末尾\n    menuItems.unshift(item2) // 将自定义菜单项2添加到菜单项列表的开头\n    return menuItems // 返回修改后的菜单项列表\n  }\n\n  build() {\n    Column() {\n      TextInput({ text: this.text }) // 创建一个文本输入组件，初始文本为@State变量text的值\n        .width('95%') // 设置文本输入框的宽度为父容器的95%\n        .height(50) // 设置文本输入框的高度为50像素\n        .editMenuOptions({\n          onCreateMenu: this.onCreateMenu, // 设置自定义编辑菜单的创建方法\n          onMenuItemClick: (menuItem: TextMenuItem, textRange: TextRange) => { // 设置菜单项点击事件的回调方法\n            if (menuItem.id.equals(TextMenuItemId.of("custom2"))) {\n              console.log("拦截 id: custom2 start:" + textRange.start + "; end:" + textRange.end) // 拦截并打印自定义菜单项2的点击事件\n              return true; // 返回true表示拦截该事件\n            }\n            if (menuItem.id.equals(TextMenuItemId.COPY)) {\n              console.log("拦截 COPY start:" + textRange.start + "; end:" + textRange.end) // 拦截并打印“复制”菜单项的点击事件\n              return true; // 返回true表示拦截该事件\n            }\n            if (menuItem.id.equals(TextMenuItemId.SELECT_ALL)) {\n              console.log("不拦截 SELECT_ALL start:" + textRange.start + "; end:" + textRange.end) // 打印“全选”菜单项的点击事件，但不拦截\n              return false; // 返回false表示不拦截该事件\n            }\n            return false; // 默认返回false，不拦截其他菜单项的点击事件\n          }\n        })\n        .margin({ top: 100 }) // 设置文本输入框的上外边距为100像素\n    }\n    .width("90%") // 设置Column容器的宽度为父容器的90%\n    .margin("5%") // 设置Column容器的左右外边距为父容器的5%\n  }\n}


/*\n实现一个包含多个TextInput组件的示例，展示了TextInput的基本使用方法，包括文本输入、密码输入、邮箱输入以及自定义样式和控制光标位置等功能。\n*/\n\n@Entry\n@Component\nstruct TextInputExample {\n  // 定义一个状态变量text，用于存储用户输入的文本\n  @State text: string = ''\n  \n  // 定义一个状态变量positionInfo，用于存储光标的位置信息\n  @State positionInfo: CaretOffset = { index: 0, x: 0, y: 0 }\n  \n  // 定义一个状态变量passwordState，用于控制密码输入框的显示状态\n  @State passwordState: boolean = false\n  \n  // 创建一个TextInputController实例，用于控制TextInput组件的行为\n  controller: TextInputController = new TextInputController()\n\n  build() {\n    Column() {\n      // 创建一个TextInput组件，用于输入普通文本\n      TextInput({ text: this.text, placeholder: 'input your word...', controller: this.controller })\n        .placeholderColor(Color.Grey) // 设置占位符文本的颜色为灰色\n        .placeholderFont({ size: 14, weight: 400 }) // 设置占位符文本的字体大小和粗细\n        .caretColor(Color.Blue) // 设置光标的颜色为蓝色\n        .width('95%') // 设置组件的宽度为父容器的95%\n        .height(40) // 设置组件的高度为40\n        .margin(20) // 设置组件的外边距为20\n        .fontSize(14) // 设置输入文本的字体大小为14\n        .fontColor(Color.Black) // 设置输入文本的颜色为黑色\n        .inputFilter('\[a-z\]', (e) => { // 设置输入过滤器，只允许输入小写字母\n          console.log(JSON.stringify(e)) // 打印过滤事件的详细信息\n        })\n        .onChange((value: string) => { // 监听输入文本的变化事件\n          this.text = value // 更新状态变量text的值\n        })\n      \n      // 显示用户输入的文本\n      Text(this.text)\n      \n      // 创建一个按钮，点击后将光标移动到输入框的第一个字符位置\n      Button('Set caretPosition 1')\n        .margin(15) // 设置按钮的外边距为15\n        .onClick(() => {\n          this.controller.caretPosition(1) // 设置光标位置为1\n        })\n      \n      // 创建一个按钮，点击后获取光标的位置信息\n      Button('Get CaretOffset')\n        .margin(15) // 设置按钮的外边距为15\n        .onClick(() => {\n          this.positionInfo = this.controller.getCaretOffset() // 获取光标的位置信息并更新状态变量positionInfo\n        })\n\n      // 创建一个TextInput组件，用于输入密码\n      TextInput({ placeholder: 'input your password...' })\n        .width('95%') // 设置组件的宽度为父容器的95%\n        .height(40) // 设置组件的高度为40\n        .margin(20) // 设置组件的外边距为20\n        .type(InputType.Password) // 设置输入类型为密码\n        .maxLength(9) // 设置最大输入长度为9\n        .showPasswordIcon(true) // 显示密码可见性图标\n        .showPassword(this.passwordState) // 根据passwordState状态变量控制密码的可见性\n        .onSecurityStateChange(((isShowPassword: boolean) => { // 监听密码可见性状态的变化事件\n          console.info('isShowPassword', isShowPassword) // 打印密码可见性状态\n          this.passwordState = isShowPassword // 更新状态变量passwordState的值\n        }))\n\n      // 创建一个TextInput组件，用于输入邮箱地址\n      TextInput({ placeholder: 'input your email...' })\n        .width('95%') // 设置组件的宽度为父容器的95%\n        .height(40) // 设置组件的高度为40\n        .margin(20) // 设置组件的外边距为20\n        .contentType(ContentType.EMAIL_ADDRESS) // 设置输入内容类型为邮箱地址\n        .maxLength(9) // 设置最大输入长度为9\n\n      // 创建一个TextInput组件，用于展示内联样式\n      TextInput({ text: 'inline style' })\n        .width('95%') // 设置组件的宽度为父容器的95%\n        .height(50) // 设置组件的高度为50\n        .margin(20) // 设置组件的外边距为20\n        .borderRadius(0) // 设置边框圆角为0\n        .style(TextInputStyle.Inline) // 设置输入框样式为内联样式\n    }.width('100%') // 设置Column组件的宽度为父容器的100%\n  }\n}


/*\n实现一个文本输入框示例，展示如何使用lineHeight设置文本行高，使用letterSpacing设置文本字符间距，使用decoration设置文本装饰线样式。\n*/\n\n@Entry\n@Component\nstruct TextInputExample {\n  build() {\n    Row() {\n      Column() {\n        // 显示标题 "lineHeight"，字体大小为9，颜色为灰色\n        Text('lineHeight').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 创建一个文本输入框，显示默认行高的文本\n        TextInput({text: 'lineHeight unset'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(10) // 设置内边距为10\n          .margin(5) // 设置外边距为5\n        \n        // 创建一个文本输入框，设置行高为15\n        TextInput({text: 'lineHeight 15'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(10) // 设置内边距为10\n          .margin(5) // 设置外边距为5\n          .lineHeight(15) // 设置行高为15\n        \n        // 创建一个文本输入框，设置行高为30\n        TextInput({text: 'lineHeight 30'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(10) // 设置内边距为10\n          .margin(5) // 设置外边距为5\n          .lineHeight(30) // 设置行高为30\n\n        // 显示标题 "letterSpacing"，字体大小为9，颜色为灰色\n        Text('letterSpacing').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 创建一个文本输入框，设置字符间距为0\n        TextInput({text: 'letterSpacing 0'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .letterSpacing(0) // 设置字符间距为0\n        \n        // 创建一个文本输入框，设置字符间距为3\n        TextInput({text: 'letterSpacing 3'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .letterSpacing(3) // 设置字符间距为3\n        \n        // 创建一个文本输入框，设置字符间距为-1\n        TextInput({text: 'letterSpacing -1'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .letterSpacing(-1) // 设置字符间距为-1\n\n        // 显示标题 "decoration"，字体大小为9，颜色为灰色\n        Text('decoration').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 创建一个文本输入框，设置装饰线为贯穿线，颜色为红色\n        TextInput({text: 'LineThrough, Red'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .decoration({type: TextDecorationType.LineThrough, color: Color.Red}) // 设置装饰线为贯穿线，颜色为红色\n        \n        // 创建一个文本输入框，设置装饰线为上划线，颜色为红色，样式为虚线\n        TextInput({text: 'Overline, Red, DASHED'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .decoration({type: TextDecorationType.Overline, color: Color.Red, style: TextDecorationStyle.DASHED}) // 设置装饰线为上划线，颜色为红色，样式为虚线\n        \n        // 创建一个文本输入框，设置装饰线为下划线，颜色为红色，样式为波浪线\n        TextInput({text: 'Underline, Red, WAVY'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .decoration({type: TextDecorationType.Underline, color: Color.Red, style: TextDecorationStyle.WAVY}) // 设置装饰线为下划线，颜色为红色，样式为波浪线\n      }\n      .height('90%') // 设置列的高度为父容器的90%\n    }\n    .width('90%') // 设置行的宽度为父容器的90%\n    .margin(10) // 设置行的外边距为10\n  }\n}


/*\n实现一个电话号码输入框，能够自动将输入的电话号码格式化为XXX XXXX XXXX的格式。\n支持光标位置的自动调整，确保用户输入体验流畅。\n*/\n\n@Entry\n@Component\nstruct phone_example {\n  // 存储用户提交的电话号码\n  @State submitValue: string = ''\n  // 存储当前输入的电话号码\n  @State text: string = ''\n  // 电话号码的最大长度（包括空格）\n  public readonly NUM_TEXT_MAXSIZE_LENGTH = 13\n  // 存储去除空格后的电话号码\n  @State teleNumberNoSpace: string = ""\n  // 存储下一个光标位置\n  @State nextCaret: number = -1 \n  // 存储实际的字符位置\n  @State actualCh: number = -1 \n  // 存储上一次的光标起始位置\n  @State lastCaretPosition: number = 0\n  // 存储上一次的光标结束位置\n  @State lastCaretPositionEnd: number = 0\n  // 文本输入框的控制器\n  controller: TextInputController = new TextInputController()\n\n  // 检查字符串是否为空\n  isEmpty(str?: string): boolean {\n    return str == 'undefined' || !str || !new RegExp("[^\s]").test(str)\n  }\n\n  // 检查是否需要添加空格\n  checkNeedNumberSpace(numText: string) {\n    let isSpace: RegExp = new RegExp('[\\+;,#\\*]', 'g')\n    let isRule: RegExp = new RegExp('^\\+.*')\n\n    if (isSpace.test(numText)) {\n      if (isRule.test(numText)) {\n        return true\n      } else {\n        return false\n      }\n    }\n    return true;\n  }\n\n  // 去除字符串中的空格\n  removeSpace(str: string): string {\n    if (this.isEmpty(str)) {\n      return ''\n    }\n    return str.replace(new RegExp("[\s]", "g"), '')\n  }\n\n  // 设置光标位置\n  setCaret() {\n    if (this.nextCaret != -1) {\n      console.log("to keep caret position right, change caret to", this.nextCaret)\n      this.controller.caretPosition(this.nextCaret)\n      this.nextCaret = -1\n    }\n  }\n\n  // 计算光标位置\n  calcCaretPosition(nextText: string) {\n    let befNumberNoSpace: string = this.removeSpace(this.text)\n    this.actualCh = 0\n    if (befNumberNoSpace.length < this.teleNumberNoSpace.length) { \n      for (let i = 0; i < this.lastCaretPosition; i++) {\n        if (this.text[i] != ' ') {\n          this.actualCh += 1\n        }\n      }\n      this.actualCh += this.teleNumberNoSpace.length - befNumberNoSpace.length\n      console.log("actualCh: " + this.actualCh)\n      for (let i = 0; i < nextText.length; i++) {\n        if (nextText[i] != ' ') {\n          this.actualCh -= 1\n          if (this.actualCh <= 0) {\n            this.nextCaret = i + 1\n            break;\n          }\n        }\n      }\n    } else if (befNumberNoSpace.length > this.teleNumberNoSpace.length) { \n      if (this.lastCaretPosition === this.text.length) {\n        console.log("Caret at last, no need to change")\n      } else if (this.lastCaretPosition === this.lastCaretPositionEnd) {\n        for (let i = this.lastCaretPosition; i < this.text.length; i++) {\n          if (this.text[i] != ' ') {\n            this.actualCh += 1\n          }\n        }\n        for (let i = nextText.length - 1; i >= 0; i--) {\n          if (nextText[i] != ' ') {\n            this.actualCh -= 1\n            if (this.actualCh <= 0) {\n              this.nextCaret = i\n              break;\n            }\n          }\n        }\n      } else {\n        this.nextCaret = this.lastCaretPosition \n      }\n    }\n  }\n\n  build() {\n    Column() {\n      Row() {\n        // 创建一个电话号码输入框\n        TextInput({ text: `${this.text}`, controller: this.controller }).type(InputType.PhoneNumber).height('48vp')\n          .onChange((number: string) => {\n            this.teleNumberNoSpace = this.removeSpace(number);\n            let nextText: string = ""\n            if (this.teleNumberNoSpace.length > this.NUM_TEXT_MAXSIZE_LENGTH - 2) {\n              nextText = this.teleNumberNoSpace\n            } else if (this.checkNeedNumberSpace(number)) {\n              if (this.teleNumberNoSpace.length <= 3) {\n                nextText = this.teleNumberNoSpace\n              } else {\n                let split1: string = this.teleNumberNoSpace.substring(0, 3)\n                let split2: string = this.teleNumberNoSpace.substring(3)\n                nextText = split1 + ' ' + split2\n                if (this.teleNumberNoSpace.length > 7) {\n                  split2 = this.teleNumberNoSpace.substring(3, 7)\n                  let split3: string = this.teleNumberNoSpace.substring(7)\n                  nextText = split1 + ' ' + split2 + ' ' + split3\n                }\n              }\n            } else {\n              nextText = number\n            }\n            console.log("onChange Triggered:" + this.text + "|" + nextText + "|" + number)\n            if (this.text === nextText && nextText === number) {\n              this.setCaret()\n            } else {\n              this.calcCaretPosition(nextText)\n            }\n            this.text = nextText\n          })\n          .onTextSelectionChange((selectionStart, selectionEnd) => {\n            console.log("selection change: ", selectionStart, selectionEnd)\n            this.lastCaretPosition = selectionStart\n            this.lastCaretPositionEnd = selectionEnd\n          })\n      }\n    }\n    .width('100%')\n    .height("100%")\n  }\n}