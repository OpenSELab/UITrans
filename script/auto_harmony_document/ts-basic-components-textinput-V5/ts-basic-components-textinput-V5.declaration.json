{
    "description": "单行文本输入框组件。",
    "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
    "interfaces": [
        {
            "description": "TextInput(value?: TextInputOptions)",
            "params": {
                "value": {
                    "type": "TextInputOptions",
                    "description": "文本输入框的初始值。"
                }
            }
        }
    ],
    "attributes": {
        "placeholder": {
            "description": "设置无输入时的提示文本。",
            "params": {
                "value": {
                    "type": "ResourceStr",
                    "description": "提示文本内容。"
                }
            }
        },
        "text": {
            "description": "设置输入框当前的文本内容。",
            "params": {
                "value": {
                    "type": "ResourceStr",
                    "description": "输入框的文本内容。"
                }
            }
        },
        "controller": {
            "description": "设置TextInput控制器。",
            "params": {
                "value": {
                    "type": "TextInputController",
                    "description": "TextInput的控制器。"
                }
            }
        },
        "type": {
            "description": "设置输入框类型。",
            "params": {
                "value": {
                    "type": "InputType",
                    "required": true,
                    "description": "输入框类型。",
                    "default": "InputType.Normal"
                }
            }
        },
        "placeholderColor": {
            "description": "设置placeholder文本颜色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "placeholder文本颜色。"
                }
            }
        },
        "placeholderFont": {
            "description": "设置placeholder文本样式，包括字体大小，字体粗细，字体族，字体风格。",
            "params": {
                "value": {
                    "type": "Font",
                    "description": "placeholder文本样式。"
                }
            }
        },
        "enterKeyType": {
            "description": "设置输入法回车键类型。",
            "params": {
                "value": {
                    "type": "EnterKeyType",
                    "required": true,
                    "description": "输入法回车键类型。",
                    "default": "EnterKeyType.Done"
                }
            }
        },
        "caretColor": {
            "description": "设置输入框光标颜色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "输入框光标颜色。"
                }
            }
        },
        "maxLength": {
            "description": "设置文本的最大输入字符数。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "文本的最大输入字符数。",
                    "default": "Infinity"
                }
            }
        },
        "fontColor": {
            "description": "设置字体颜色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "字体颜色。"
                }
            }
        },
        "fontSize": {
            "description": "设置字体大小。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "string",
                        "Resource"
                    ],
                    "required": true,
                    "description": "字体大小。fontSize为number类型时，使用fp单位。字体默认大小16fp。不支持设置百分比字符串。"
                }
            }
        },
        "fontStyle": {
            "description": "设置字体样式。",
            "params": {
                "value": {
                    "type": "FontStyle",
                    "required": true,
                    "description": "字体样式。",
                    "default": "FontStyle.Normal"
                }
            }
        },
        "fontWeight": {
            "description": "设置文本的字体粗细，设置过大可能会在不同字体下有截断。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "FontWeight",
                        "string"
                    ],
                    "required": true,
                    "description": "文本的字体粗细，number类型取值[100, 900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如\"400\"，以及\"bold\"、\"bolder\"、\"lighter\"、\"regular\"、\"medium\"，分别对应FontWeight中相应的枚举值。",
                    "default": "FontWeight.Normal"
                }
            }
        },
        "fontFamily": {
            "description": "设置字体列表。",
            "params": {
                "value": {
                    "type": [
                        "string",
                        "Resource"
                    ],
                    "required": true,
                    "description": "字体列表。默认字体'HarmonyOS Sans'。"
                }
            }
        },
        "inputFilter": {
            "description": "通过正则表达式设置输入过滤器。匹配表达式的输入允许显示，不匹配的输入将被过滤。仅支持单个字符匹配，不支持字符串匹配。",
            "params": {
                "value": {
                    "type": "ResourceStr",
                    "required": true,
                    "description": "正则表达式。"
                },
                "error": {
                    "type": "(value: string) => void",
                    "description": "正则匹配失败时，返回被过滤的内容。"
                }
            }
        },
        "copyOption": {
            "description": "设置输入的文本是否可复制。设置CopyOptions.None时，当前TextInput中的文字无法被复制或剪切，仅支持粘贴。",
            "params": {
                "value": {
                    "type": "CopyOptions",
                    "required": true,
                    "description": "输入的文本是否可复制。",
                    "default": "CopyOptions.LocalDevice"
                }
            }
        },
        "showPasswordIcon": {
            "description": "设置当密码输入模式时，输入框末尾的图标是否显示。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "密码输入模式时，输入框末尾的图标是否显示。",
                    "default": true
                }
            }
        },
        "style": {
            "description": "设置输入框为默认风格或内联输入风格，内联输入风格只支持InputType.Normal类型。",
            "params": {
                "value": {
                    "type": [
                        "TextInputStyle",
                        "TextContentStyle"
                    ],
                    "required": true,
                    "description": "输入框风格。"
                }
            }
        },
        "textAlign": {
            "description": "设置文本在输入框中的水平对齐方式。",
            "params": {
                "value": {
                    "type": "TextAlign",
                    "required": true,
                    "description": "文本在输入框中的水平对齐方式。",
                    "default": "TextAlign.Start"
                }
            }
        },
        "selectedBackgroundColor": {
            "description": "设置文本选中底板颜色。如果未设置不透明度，默认为20%不透明度。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "文本选中底板颜色。"
                }
            }
        },
        "caretStyle": {
            "description": "设置光标风格。",
            "params": {
                "value": {
                    "type": "CaretStyle",
                    "required": true,
                    "description": "光标风格。"
                }
            }
        },
        "caretPosition": {
            "description": "设置光标位置。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "光标的位置。"
                }
            }
        },
        "showUnit": {
            "description": "设置控件作为文本框单位。需搭配showUnderline使用，当showUnderline为true时生效。",
            "params": {
                "value": {
                    "type": "CustomBuilder",
                    "required": true,
                    "description": "控件作为文本框单位。"
                }
            }
        },
        "showError": {
            "description": "设置错误状态下提示的错误文本或者不显示错误状态。",
            "params": {
                "value": {
                    "type": [
                        "ResourceStr",
                        "undefined"
                    ],
                    "description": "错误状态下提示的错误文本或者不显示错误状态。",
                    "default": "undefined"
                }
            }
        },
        "showUnderline": {
            "description": "设置是否开启下划线。下划线默认颜色为'#33182431'，默认粗细为1px，文本框尺寸48vp，下划线只支持InputType.Normal类型。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "是否开启下划线。",
                    "default": false
                }
            }
        },
        "passwordIcon": {
            "description": "设置当密码输入模式时，输入框末尾的图标。",
            "params": {
                "value": {
                    "type": "PasswordIcon",
                    "required": true,
                    "description": "密码输入模式时，输入框末尾的图标。",
                    "default": "系统提供的密码图标。"
                }
            }
        },
        "enableKeyboardOnFocus": {
            "description": "设置TextInput通过点击以外的方式获焦时，是否绑定输入法。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "通过点击以外的方式获焦时，是否绑定输入法。",
                    "default": true
                }
            }
        },
        "selectionMenuHidden": {
            "description": "设置是否不弹出系统文本选择菜单。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "是否不弹出系统文本选择菜单。",
                    "default": false
                }
            }
        },
        "barState": {
            "description": "设置内联输入风格编辑态时滚动条的显示模式。",
            "params": {
                "value": {
                    "type": "BarState",
                    "required": true,
                    "description": "内联输入风格编辑态时滚动条的显示模式。",
                    "default": "BarState.Auto"
                }
            }
        },
        "maxLines": {
            "description": "设置内联输入风格编辑态时文本可显示的最大行数。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "内联输入风格编辑态时文本可显示的最大行数。",
                    "default": 3
                }
            }
        },
        "customKeyboard": {
            "description": "设置自定义键盘。",
            "params": {
                "value": {
                    "type": "CustomBuilder",
                    "required": true,
                    "description": "自定义键盘。"
                },
                "options": {
                    "type": "KeyboardOptions",
                    "description": "自定义键盘的选项。"
                }
            }
        },
        "enableAutoFill": {
            "description": "设置是否启用自动填充。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "是否启用自动填充。",
                    "default": true
                }
            }
        },
        "passwordRules": {
            "description": "定义生成密码的规则。在触发自动填充时，所设置的密码规则会透传给密码保险箱，用于新密码的生成。",
            "params": {
                "value": {
                    "type": "string",
                    "required": true,
                    "description": "定义生成密码的规则。"
                }
            }
        },
        "cancelButton": {
            "description": "设置右侧清除按钮样式。不支持内联模式。",
            "params": {
                "value": {
                    "type": {
                        "style": "CancelButtonStyle",
                        "icon": "IconOptions"
                    },
                    "required": true,
                    "description": "右侧清除按钮样式。"
                }
            }
        },
        "selectAll": {
            "description": "设置当初始状态，是否全选文本。不支持内联模式。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "是否全选文本。",
                    "default": false
                }
            }
        },
        "showCounter": {
            "description": "设置当通过InputCounterOptions输入的字符数超过阈值时显示计数器。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "是否显示计数器。",
                    "default": false
                },
                "options": {
                    "type": "InputCounterOptions",
                    "description": "计数器的选项。"
                }
            }
        },
        "contentType": {
            "description": "设置自动填充类型。",
            "params": {
                "value": {
                    "type": "ContentType",
                    "required": true,
                    "description": "自动填充类型。"
                }
            }
        },
        "underlineColor": {
            "description": "开启下划线时，支持配置下划线颜色。",
            "params": {
                "value": {
                    "type": [
                        "ResourceColor",
                        "UnderlineColor",
                        "undefined"
                    ],
                    "required": true,
                    "description": "设置下划线颜色。",
                    "default": "主题配置的下划线颜色。主题配置的默认下滑颜色为'#33182431'。"
                }
            }
        },
        "lineHeight": {
            "description": "设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小，number类型时单位为fp。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "string",
                        "Resource"
                    ],
                    "required": true,
                    "description": "文本的文本行高。"
                }
            }
        },
        "decoration": {
            "description": "设置文本装饰线类型样式及其颜色。密码模式不生效。",
            "params": {
                "value": {
                    "type": "TextDecorationOptions",
                    "required": true,
                    "description": "文本装饰线对象。",
                    "default": {
                        "type": "TextDecorationType.None",
                        "color": "Color.Black",
                        "style": "TextDecorationStyle.SOLID"
                    }
                }
            }
        },
        "letterSpacing": {
            "description": "设置文本字符间距。设置该值为百分比时，按默认值显示。设置该值为0时，按默认值显示。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "string",
                        "Resource"
                    ],
                    "required": true,
                    "description": "文本字符间距。"
                }
            }
        },
        "fontFeature": {
            "description": "设置文字特性效果，比如数字等宽的特性。",
            "params": {
                "value": {
                    "type": "string",
                    "required": true,
                    "description": "文字特性效果。"
                }
            }
        },
        "wordBreak": {
            "description": "设置文本断行规则。该属性在组件设置内联模式时样式生效，但对placeholder文本无效。",
            "params": {
                "value": {
                    "type": "WordBreak",
                    "required": true,
                    "description": "内联输入风格编辑态时断行规则。",
                    "default": "WordBreak.BREAK_WORD"
                }
            }
        },
        "textOverflow": {
            "description": "设置文本超长时的显示方式。仅在内联模式的编辑态、非编辑态下支持。",
            "params": {
                "value": {
                    "type": "TextOverflow",
                    "required": true,
                    "description": "文本超长时的显示方式。",
                    "default": {
                        "inline_non_editing": "TextOverflow.Ellipsis",
                        "inline_editing": "TextOverflow.Clip"
                    }
                }
            }
        },
        "textIndent": {
            "description": "设置首行文本缩进。",
            "params": {
                "value": {
                    "type": "Dimension",
                    "required": true,
                    "description": "首行文本缩进。"
                }
            }
        },
        "minFontSize": {
            "description": "设置文本最小显示字号。需配合maxFontSize以及maxLines(组件设置为内联输入风格且编辑态时使用)或布局大小限制使用，单独设置不生效。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "string",
                        "Resource"
                    ],
                    "required": true,
                    "description": "文本最小显示字号。"
                }
            }
        },
        "maxFontSize": {
            "description": "设置文本最大显示字号。需配合minFontSize以及maxLines(组件设置为内联输入风格且编辑态时使用)或布局大小限制使用，单独设置不生效。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "string",
                        "Resource"
                    ],
                    "required": true,
                    "description": "文本最大显示字号。"
                }
            }
        },
        "heightAdaptivePolicy": {
            "description": "组件设置为内联输入风格时，设置文本自适应高度的方式。",
            "params": {
                "value": {
                    "type": "TextHeightAdaptivePolicy",
                    "required": true,
                    "description": "文本自适应高度的方式。",
                    "default": "TextHeightAdaptivePolicy.MAX_LINES_FIRST"
                }
            }
        },
        "showPassword": {
            "description": "设置密码的显隐状态。需组合密码模式才能生效，非密码输入模式不生效。",
            "params": {
                "visible": {
                    "type": "boolean",
                    "required": true,
                    "description": "是否显示密码。",
                    "default": false
                }
            }
        },
        "lineBreakStrategy": {
            "description": "设置折行规则。该属性在wordBreak不等于breakAll的时候生效，不支持连词符。",
            "params": {
                "strategy": {
                    "type": "LineBreakStrategy",
                    "required": true,
                    "description": "文本的折行规则。",
                    "default": "LineBreakStrategy.GREEDY"
                }
            }
        },
        "editMenuOptions": {
            "description": "设置自定义菜单扩展项，允许用户设置扩展项的文本内容、图标、回调方法。",
            "params": {
                "editMenu": {
                    "type": "EditMenuOptions",
                    "required": true,
                    "description": "自定义菜单扩展项。"
                }
            }
        },
        "enablePreviewText": {
            "description": "设置是否开启输入预上屏。",
            "params": {
                "enable": {
                    "type": "boolean",
                    "required": true,
                    "description": "是否开启输入预上屏。",
                    "default": true
                }
            }
        }
    },
    "events": {
        "onChange": {
            "description": "输入内容发生变化时，触发该回调。",
            "params": {
                "callback": {
                    "type": "EditableTextOnChangeCallback",
                    "required": true,
                    "description": "输入内容发生变化时的回调函数。"
                }
            }
        },
        "onSubmit": {
            "description": "按下输入法回车键触发该回调。",
            "params": {
                "callback": {
                    "type": "(enterKey: EnterKeyType, event: SubmitEvent) => void",
                    "required": true,
                    "description": "按下输入法回车键时的回调函数。"
                }
            }
        },
        "onEditChanged": {
            "description": "输入状态变化时，触发该回调。",
            "params": {
                "callback": {
                    "type": "(isEditing: boolean) => void",
                    "required": true,
                    "description": "输入状态变化时的回调函数。"
                }
            }
        },
        "onEditChange": {
            "description": "输入状态变化时，触发该回调。有光标时为编辑态，无光标时为非编辑态。isEditing为true表示正在输入。",
            "params": {
                "callback": {
                    "type": "(isEditing: boolean) => void",
                    "required": true,
                    "description": "输入状态变化时的回调函数。"
                }
            }
        },
        "onCopy": {
            "description": "进行复制操作时，触发该回调。",
            "params": {
                "callback": {
                    "type": "(value: string) => void",
                    "required": true,
                    "description": "进行复制操作时的回调函数。"
                }
            }
        },
        "onCut": {
            "description": "进行剪切操作时，触发该回调。",
            "params": {
                "callback": {
                    "type": "(value: string) => void",
                    "required": true,
                    "description": "进行剪切操作时的回调函数。"
                }
            }
        },
        "onPaste": {
            "description": "进行粘贴操作时，触发该回调。",
            "params": {
                "callback": {
                    "type": "(value: string, event: PasteEvent) => void",
                    "required": true,
                    "description": "进行粘贴操作时的回调函数。"
                }
            }
        },
        "onTextSelectionChange": {
            "description": "文本选择的位置发生变化或编辑状态下光标位置发生变化时，触发该回调。",
            "params": {
                "callback": {
                    "type": "(selectionStart: number, selectionEnd: number) => void",
                    "required": true,
                    "description": "文本选择或光标位置变化时的回调函数。"
                }
            }
        },
        "onContentScroll": {
            "description": "文本内容滚动时，触发该回调。",
            "params": {
                "callback": {
                    "type": "(totalOffsetX: number, totalOffsetY: number) => void",
                    "required": true,
                    "description": "文本内容滚动时的回调函数。"
                }
            }
        },
        "onSecurityStateChange": {
            "description": "密码显隐状态切换时，触发该回调。",
            "params": {
                "callback": {
                    "type": "Callback<boolean>",
                    "required": true,
                    "description": "密码显隐状态切换时的回调函数。"
                }
            }
        },
        "onWillInsert": {
            "description": "在将要输入时，触发该回调。",
            "params": {
                "callback": {
                    "type": "Callback<InsertValue, boolean>",
                    "required": true,
                    "description": "在将要输入时的回调函数。"
                }
            }
        },
        "onDidInsert": {
            "description": "在输入完成时，触发该回调。",
            "params": {
                "callback": {
                    "type": "Callback<InsertValue>",
                    "required": true,
                    "description": "在输入完成时的回调函数。"
                }
            }
        },
        "onWillDelete": {
            "description": "在将要删除时，触发该回调。",
            "params": {
                "callback": {
                    "type": "Callback<DeleteValue, boolean>",
                    "required": true,
                    "description": "在将要删除时的回调函数。"
                }
            }
        },
        "onDidDelete": {
            "description": "在删除完成时，触发该回调。",
            "params": {
                "callback": {
                    "type": "Callback<DeleteValue>",
                    "required": true,
                    "description": "在删除完成时的回调函数。"
                }
            }
        }
    },
    "rules": null,
    "examples": [
        {
            "description": "该组件通过 Row 和 Column 布局实现了一个展示两个 TextInput 组件的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为一个 Column，其中包含两个 TextInput 组件。每个 TextInput 组件以垂直布局方式排列，且对齐方式为居中对齐。\nTextInput 组件的样式包括下划线的显示和颜色设置。第一个 TextInput 组件的下划线颜色根据不同的状态（正常、输入、错误、禁用）分别设置为橙色、绿色、红色和灰色。第二个 TextInput 组件的下划线颜色统一设置为灰色。\n整个布局通过 Row 和 Column 布局保证 TextInput 组件在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column() {\n        // 创建一个 TextInput 组件，设置提示文本内容为 '提示文本内容'\n        TextInput({placeholder:'提示文本内容'})\n          // 显示下划线\n          .showUnderline(true)\n          // 设置下划线颜色，根据不同状态分别设置颜色\n          .underlineColor({normal:Color.Orange, typing:Color.Green, error:Color.Red, disable:Color.Gray});\n        \n        // 创建另一个 TextInput 组件，设置提示文本内容为 '提示文本内容'\n        TextInput({placeholder:'提示文本内容'})\n          // 显示下划线\n          .showUnderline(true)\n          // 设置下划线颜色为灰色\n          .underlineColor(Color.Gray);\n      }\n      // 设置 Column 的宽度为 100%\n      .width('100%')\n    }\n    // 设置 Row 的高度为 100%\n    .height('100%')\n  }\n}"
        },
        {
            "description": "该组件展示了一个带有取消按钮的文本输入框。布局宽度为380vp，高度为60vp，文本输入框位于垂直布局的顶部。取消按钮的样式为常量（CONSTANT），图标大小为45vp，颜色为蓝色，图标资源名为'app.media.icon'。文本输入框的内容变化会实时更新到组件的状态变量'text'中。",
            "code": "@Entry\n@Component\nstruct ClearNodeExample {\n  @State text: string = '' // 定义一个状态变量'text'，用于存储文本输入框的内容\n  controller: TextInputController = new TextInputController() // 创建一个TextInputController实例，用于控制文本输入框的行为\n\n  build() {\n    Column() { // 使用Column布局组件，将子组件垂直排列\n      TextInput({ placeholder: 'input ...', controller: this.controller }) // 创建一个文本输入框，占位符为'input ...'，并使用之前创建的controller进行控制\n        .width(380) // 设置文本输入框的宽度为380vp\n        .height(60) // 设置文本输入框的高度为60vp\n        .cancelButton({ // 设置文本输入框的取消按钮\n          style: CancelButtonStyle.CONSTANT, // 设置取消按钮的样式为常量（CONSTANT）\n          icon: { // 设置取消按钮的图标\n            size: 45, // 设置图标的大小为45vp\n            src: $r('app.media.icon'), // 设置图标的资源名为'app.media.icon'\n            color: Color.Blue // 设置图标的颜色为蓝色\n          }\n        })\n        .onChange((value: string) => { // 监听文本输入框的内容变化事件\n          this.text = value // 将文本输入框的内容实时更新到状态变量'text'中\n        })\n    }\n  }\n}"
        },
        {
            "description": "该组件展示了两个 `TextInput` 组件，分别使用了 `fontFeature` 属性的 `ss01` 属性和不使用 `ss01` 属性的效果。布局宽度占据整个屏幕的 90%，内边距为左右 5%。组件的垂直方向上被分为两个部分，每个部分包含一个 `TextInput` 组件。每个 `TextInput` 组件的文本内容通过 `@State` 变量进行管理，并且设置了字体大小为 20vp。第一个 `TextInput` 组件的 `fontFeature` 属性设置为 `\"ss01\" on`，第二个 `TextInput` 组件的 `fontFeature` 属性设置为 `\"ss01\" off`。通过对比这两个 `TextInput` 组件的显示效果，可以直观地看到 `ss01` 属性对字体显示的影响。",
            "code": "@Entry\n@Component\nstruct textInput {\n  // 定义两个状态变量，分别用于存储两个 `TextInput` 组件的文本内容\n  @State text1: string = 'This is ss01 on : 0123456789'\n  @State text2: string = 'This is ss01 off: 0123456789'\n\n  build() {\n    Column() {\n      // 第一个 `TextInput` 组件，使用 `ss01` 属性开启\n      TextInput({ text: this.text1 })\n        .fontSize(20) // 设置字体大小为 20vp\n        .margin({ top: 200 }) // 设置顶部外边距为 200vp\n        .fontFeature(\"\\\\\"ss01\\\\\" on\") // 设置 `fontFeature` 属性为 `ss01` 开启\n\n      // 第二个 `TextInput` 组件，使用 `ss01` 属性关闭\n      TextInput({ text: this.text2 })\n        .margin({ top: 10 }) // 设置顶部外边距为 10vp\n        .fontSize(20) // 设置字体大小为 20vp\n        .fontFeature(\"\\\\\"ss01\\\\\" off\") // 设置 `fontFeature` 属性为 `ss01` 关闭\n    }\n    .width(\"90%\") // 设置组件宽度为屏幕宽度的 90%\n    .margin(\"5%\") // 设置左右外边距为屏幕宽度的 5%\n  }\n}"
        },
        {
            "description": "该组件实现了一个带有计数器的文本输入框。布局宽度占据整个屏幕，高度设为 100%，背景颜色为 #F1F3F5。组件的垂直方向上包含一个 TextInput 组件，该组件的宽度为 336vp，高度为 56vp，最大输入长度为 6 个字符。TextInput 组件下方显示一个计数器，当输入字符数超过最大长度的 50% 时，计数器会高亮显示。\n\nTextInput 组件的样式包括占位符字体大小为 16，字体粗细为 400，显示下划线，并且输入框下方显示计数器。计数器的功能是实时显示当前输入的字符数，并在输入字符数超过最大长度的 50% 时高亮显示。\n\n组件的功能包括用户输入文本时，实时更新文本内容，并触发 onChange 事件，更新组件的 @State 变量 text。",
            "code": "@Entry\n@Component\nstruct TextInputExample {\n  @State text: string = '' // 定义一个状态变量 text，用于存储用户输入的文本\n  controller: TextInputController = new TextInputController() // 创建一个 TextInputController 实例，用于控制 TextInput 组件的行为\n\n  build() {\n    Column() {\n      TextInput({ text: this.text, controller: this.controller }) // 创建一个 TextInput 组件，绑定 text 状态变量和 controller\n        .placeholderFont({ size: 16, weight: 400 }) // 设置占位符字体大小为 16，字体粗细为 400\n        .width(336) // 设置 TextInput 组件的宽度为 336vp\n        .height(56) // 设置 TextInput 组件的高度为 56vp\n        .maxLength(6) // 设置 TextInput 组件的最大输入长度为 6 个字符\n        .showUnderline(true) // 显示 TextInput 组件的下划线\n        .showCounter(true, { thresholdPercentage: 50, highlightBorder: true }) // 显示计数器，当输入字符数超过最大长度的 50% 时，计数器高亮显示\n\n        .onChange((value: string) => { // 监听 TextInput 组件的 onChange 事件\n          this.text = value // 更新 text 状态变量\n        })\n    }.width('100%').height('100%').backgroundColor('#F1F3F5') // 设置 Column 组件的宽度为 100%，高度为 100%，背景颜色为 #F1F3F5\n  }\n}"
        },
        {
            "description": "该示例展示了如何在鸿蒙ArkUI中使用TextInput组件绑定自定义键盘。布局上，TextInput组件位于Column容器中，占据一定的宽度和高度，并设置了边框样式。自定义键盘通过@Builder装饰器定义，包含一个Column容器，内部嵌套了Grid组件用于排列数字和符号按钮。每个按钮的宽度和高度固定，按钮之间有间距，整体背景颜色为灰色。\n\n布局属性：\n- TextInput组件的宽度由父容器Column决定，高度为48vp，边距为10vp，边框宽度为1。\n- 自定义键盘的Grid组件最大列数为3，列间距和行间距均为10vp，内边距为5vp。\n\n组件的样式和外观：\n- TextInput组件的边框样式为宽度1的实线边框。\n- 自定义键盘的背景颜色为灰色。\n- 按钮的宽度为110vp，高度由内容决定。\n\n组件的排列和嵌套关系：\n- TextInput组件位于Column容器的顶部。\n- 自定义键盘通过@Builder装饰器定义，包含一个Column容器，内部嵌套了Grid组件用于排列按钮。\n\n组件的功能和交互：\n- TextInput组件绑定了一个自定义键盘，用户可以通过点击自定义键盘上的按钮输入内容。\n- 自定义键盘上的按钮点击事件会将对应的字符添加到TextInput的输入值中。\n- 自定义键盘上的'x'按钮点击事件会停止编辑。",
            "code": "@Entry\n@Component\nstruct TextInputExample {\n  // 创建一个TextInputController实例，用于控制TextInput组件的行为\n  controller: TextInputController = new TextInputController()\n  \n  // 定义一个状态变量inputValue，用于存储TextInput的输入值\n  @State inputValue: string = \"\"\n\n  // 使用@Builder装饰器定义自定义键盘的布局\n  @Builder CustomKeyboardBuilder() {\n    Column() {\n      // 创建一个按钮，点击时停止编辑\n      Button('x').onClick(() => {\n        this.controller.stopEditing()\n      })\n      \n      // 创建一个Grid组件，用于排列数字和符号按钮\n      Grid() {\n        // 使用ForEach循环生成按钮\n        ForEach([1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'], (item: number | string) => {\n          GridItem() {\n            // 创建一个按钮，点击时将对应的字符添加到inputValue中\n            Button(item + \"\")\n              .width(110).onClick(() => {\n                this.inputValue += item\n              })\n          }\n        })\n      }\n      // 设置Grid的最大列数为3，列间距和行间距均为10vp，内边距为5vp\n      .maxCount(3).columnsGap(10).rowsGap(10).padding(5)\n    }\n    // 设置自定义键盘的背景颜色为灰色\n    .backgroundColor(Color.Gray)\n  }\n\n  // 构建组件的布局\n  build() {\n    Column() {\n      // 创建一个TextInput组件，绑定controller和inputValue，并设置自定义键盘\n      TextInput({ controller: this.controller, text: this.inputValue })\n        .customKeyboard(this.CustomKeyboardBuilder())\n        .margin(10)\n        .border({ width: 1 })\n        .height('48vp')\n    }\n  }\n}"
        },
        {
            "description": "该组件通过 Row 和 Column 布局实现了一个展示两个 TextInput 组件及其回调功能的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为两个部分，每个部分包含一个 TextInput 组件和一个显示回调信息的 Text 组件。每个 TextInput 组件的高度为 60vp，显示的文本分别为 \"TextInput支持插入回调文本\" 和 \"TextInput支持删除回调文本b\"。\n\nTextInput 组件的样式包括高度属性，支持插入和删除回调。插入回调分为 onWillInsert 和 onDidInsert，分别在插入操作前和插入操作后触发。删除回调分为 onWillDelete 和 onDidDelete，分别在删除操作前和删除操作后触发。回调信息通过 Text 组件显示，包括插入的值、插入的偏移量、删除的值、删除的偏移量和删除的方向（向前或向后）。\n\n整个布局通过 Row 和 Column 布局保证组件在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TextInputExample {\n  @State insertValue: string = \"\" // 存储插入的文本值\n  @State deleteValue: string = \"\" // 存储删除的文本值\n  @State insertOffset: number = 0 // 存储插入的偏移量\n  @State deleteOffset: number = 0 // 存储删除的偏移量\n  @State deleteDirection: number = 0 // 存储删除的方向，0 表示向后删除，1 表示向前删除\n\n  build() {\n    Row() {\n      Column() {\n        TextInput({ text: \"TextInput支持插入回调文本\" })\n          .height(60) // 设置 TextInput 的高度为 60vp\n          .onWillInsert((info: InsertValue) => { // 插入操作前的回调\n            this.insertValue = info.insertValue // 获取并存储插入的文本值\n            return true; // 返回 true 表示允许插入操作\n          })\n          .onDidInsert((info: InsertValue) => { // 插入操作后的回调\n            this.insertOffset = info.insertOffset // 获取并存储插入的偏移量\n          })\n\n        Text(\"insertValue:\" + this.insertValue + \"  insertOffset:\" + this.insertOffset).height(30) // 显示插入的文本值和偏移量\n\n        TextInput({ text: \"TextInput支持删除回调文本b\" })\n          .height(60) // 设置 TextInput 的高度为 60vp\n          .onWillDelete((info: DeleteValue) => { // 删除操作前的回调\n            this.deleteValue = info.deleteValue // 获取并存储删除的文本值\n            info.direction // 获取删除的方向\n            return true; // 返回 true 表示允许删除操作\n          })\n          .onDidDelete((info: DeleteValue) => { // 删除操作后的回调\n            this.deleteOffset = info.deleteOffset // 获取并存储删除的偏移量\n            this.deleteDirection = info.direction // 获取并存储删除的方向\n          })\n\n        Text(\"deleteValue:\" + this.deleteValue + \"  deleteOffset:\" + this.deleteOffset).height(30) // 显示删除的文本值和偏移量\n        Text(\"deleteDirection:\" + (this.deleteDirection == 0 ? \"BACKWARD\" : \"FORWARD\")).height(30) // 显示删除的方向\n\n      }.width('100%') // 设置 Column 的宽度为 100%\n    }\n    .height('100%') // 设置 Row 的高度为 100%\n  }\n}"
        },
        {
            "description": "该组件通过 Flex 布局实现了一个展示不同 `lineBreakStrategy` 设置效果的界面。布局宽度为 370vp，高度为 700vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为三个部分，每个部分包含一个标题和一个 `TextInput` 组件。每个 `TextInput` 组件的宽度占据整个父容器的宽度，高度根据内容自动调整，最大行数为 5 行。\n\n每个 `TextInput` 组件的样式包括字体大小为 12vp，边框宽度为 1vp，内边距为 10vp，背景颜色为默认白色。标题的样式包括字体大小为 9vp，字体颜色为 0xCCCCCC，宽度为 90%，内边距为 10vp。\n\n组件的功能是通过设置不同的 `lineBreakStrategy` 属性来展示文本在 `TextInput` 中的换行策略。`lineBreakStrategy` 属性有三种可选值：`GREEDY`、`HIGH_QUALITY` 和 `BALANCED`。每种策略的效果在 `TextInput` 中展示，用户可以通过对比不同策略的效果来选择合适的换行策略。",
            "code": "@Entry\n@Component\nstruct TextExample1 {\n  @State message1: string = \"They can be classified as built-in components–those directly provided by the ArkUI framework and custom components – those defined by developers\" +\n    \"The built-in components include buttons radio buttonsprogress indicators and text You can set the rendering effectof thesecomponents in method chaining mode,\" +\n    \"page components are divided into independent UI units to implementindependent creation development and reuse of different units on pages making pages more engineering-oriented.\";\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start }) {\n      // 标题：展示 `lineBreakStrategy` 设置为 `GREEDY` 的效果\n      Text('LineBreakStrategy.GREEDY').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n      // `TextInput` 组件，展示 `GREEDY` 策略的换行效果\n      TextInput({text: this.message1})\n        .fontSize(12)\n        .border({ width: 1 })\n        .padding(10)\n        .width('100%')\n        .maxLines(5)\n        .style(TextInputStyle.Inline)\n        .lineBreakStrategy(LineBreakStrategy.GREEDY)\n\n      // 标题：展示 `lineBreakStrategy` 设置为 `HIGH_QUALITY` 的效果\n      Text('LineBreakStrategy.HIGH_QUALITY').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n      // `TextInput` 组件，展示 `HIGH_QUALITY` 策略的换行效果\n      TextInput({text: this.message1})\n        .fontSize(12)\n        .border({ width: 1 })\n        .padding(10)\n        .width('100%')\n        .maxLines(5)\n        .style(TextInputStyle.Inline)\n        .lineBreakStrategy(LineBreakStrategy.HIGH_QUALITY)\n\n      // 标题：展示 `lineBreakStrategy` 设置为 `BALANCED` 的效果\n      Text('LineBreakStrategy.BALANCED').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n      // `TextInput` 组件，展示 `BALANCED` 策略的换行效果\n      TextInput({text: this.message1})\n        .fontSize(12)\n        .border({ width: 1 })\n        .padding(10)\n        .width('100%')\n        .maxLines(5)\n        .style(TextInputStyle.Inline)\n        .lineBreakStrategy(LineBreakStrategy.BALANCED)\n    }.height(700).width(370).padding({ left: 35, right: 35, top: 35 })\n  }\n}"
        },
        {
            "description": "该组件实现了一个自定义键盘弹出时发生避让的示例。布局宽度占据整个屏幕，高度根据状态变量 `height1` 动态调整，初始值为 80%。组件的垂直方向上被分为两个主要部分：顶部是一个包含两个按钮的行，用于动态调整高度；底部是一个 `TextInput` 组件，用于输入文本。\n\n顶部按钮行的高度由状态变量 `height1` 控制，初始值为 80%。按钮行中的两个按钮分别用于将高度设置为 20% 和 80%。按钮的排列方式为水平居中对齐，按钮之间的间距为 20vp。按钮的样式包括字体大小为 24vp，点击事件用于更新 `height1` 的值。\n\n底部的 `TextInput` 组件用于输入文本，其高度为自适应。`TextInput` 组件的边框宽度为 1vp，边距为 10vp。`TextInput` 组件支持自定义键盘，自定义键盘通过 `CustomKeyboardBuilder` 方法构建。自定义键盘的背景颜色为灰色，包含一个关闭按钮和一个数字键盘。数字键盘的布局为网格布局，每行最多显示 3 个按钮，按钮之间的列间距和行间距均为 10vp，内边距为 5vp。数字键盘的按钮宽度为 110vp，点击事件用于将数字添加到输入框中。\n\n整个布局通过 `Column` 布局保证按钮和输入框在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct Input {\n  // 控制 TextInput 组件的控制器\n  controller: TextInputController = new TextInputController()\n  // 输入框的值\n  @State inputValue: string = \"\"\n  // 顶部按钮行的高度，初始值为 80%\n  @State height1: string | number = '80%'\n  // 是否支持键盘避让功能\n  @State supportAvoidance: boolean = true;\n\n  // 自定义键盘的构建方法\n  @Builder CustomKeyboardBuilder() {\n    Column() {\n      Row() {\n        // 关闭按钮，点击后停止编辑\n        Button('x').onClick(() => {\n          this.controller.stopEditing()\n        }).margin(10)\n      }\n      Grid() {\n        // 数字键盘的按钮，使用 ForEach 循环生成\n        ForEach([1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'], (item: number | string) => {\n          GridItem() {\n            Button(item + \"\")\n              .width(110).onClick(() => {\n                this.inputValue += item\n              })\n          }\n        })\n      }.maxCount(3).columnsGap(10).rowsGap(10).padding(5)\n    }.backgroundColor(Color.Gray)\n  }\n\n  build() {\n    Column() {\n      Row() {\n        // 设置高度为 20% 的按钮\n        Button(\"20%\")\n          .fontSize(24)\n          .onClick(() => {\n            this.height1 = \"20%\"\n          })\n        // 设置高度为 80% 的按钮\n        Button(\"80%\")\n          .fontSize(24)\n          .margin({ left: 20 })\n          .onClick(() => {\n            this.height1 = \"80%\"\n          })\n      }\n      .justifyContent(FlexAlign.Center)\n      .alignItems(VerticalAlign.Bottom)\n      .height(this.height1)\n      .width(\"100%\")\n      .padding({ bottom: 50 })\n\n      // 输入框组件，支持自定义键盘\n      TextInput({ controller: this.controller, text: this.inputValue })\n        .customKeyboard(this.CustomKeyboardBuilder(), { supportAvoidance: this.supportAvoidance })\n        .margin(10)\n        .border({ width: 1 })\n    }\n  }\n}"
        },
        {
            "description": "该组件展示了不同wordBreak属性的TextInput样式。布局采用Column组件，垂直排列多个TextInput实例，每个实例上方有一个描述文本。布局宽度未明确设置，默认撑满最大宽度。每个TextInput实例的高度自适应内容高度。\n组件的样式包括字体大小、字体颜色、TextInput的样式（Inline模式）以及wordBreak属性。字体大小统一设置为16，描述文本的字体颜色为红色（0xFF0000）。TextInput的样式为Inline模式，即内联模式，文本内容超过组件宽度时会自动换行显示。\n组件的排列和嵌套关系为：Column组件包含多个Text和TextInput组件，每个Text组件描述其下方的TextInput的样式和wordBreak属性。\n组件的功能和交互主要是展示不同wordBreak属性对文本换行方式的影响。wordBreak属性有四种类型：NORMAL、BREAK_ALL、BREAK_WORD，分别对应不同的换行规则。",
            "code": "@Entry\n@Component\nstruct TextInputExample {\n  build() {\n    Column() {\n      // 描述文本，字体大小为16，颜色为红色\n      Text(\"TextInput为inline模式，WordBreakType属性为NORMAL的样式：\").fontSize(16).fontColor(0xFF0000)\n      // TextInput组件，设置文本内容、字体大小、样式为Inline、wordBreak为NORMAL\n      TextInput({\n        text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'\n      })\n        .fontSize(16)\n        .style(TextInputStyle.Inline) \n        .wordBreak(WordBreak.NORMAL) \n\n      // 描述文本，字体大小为16，颜色为红色\n      Text(\"TextInput为inline模式，英文文本，WordBreakType属性为BREAK_ALL的样式：\").fontSize(16).fontColor(0xFF0000)\n      // TextInput组件，设置文本内容、字体大小、样式为Inline、wordBreak为BREAK_ALL\n      TextInput({\n        text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'\n      })\n        .fontSize(16)\n        .style(TextInputStyle.Inline)\n        .wordBreak(WordBreak.BREAK_ALL)\n\n      // 描述文本，字体大小为16，颜色为红色\n      Text(\"TextInput为inline模式，中文文本，WordBreakType属性为BREAK_ALL的样式：\").fontSize(16).fontColor(0xFF0000)\n      // TextInput组件，设置文本内容、字体大小、样式为Inline、wordBreak为BREAK_ALL\n      TextInput({\n        text: '多行文本输入框组件，当输入的文本内容超过组件宽度时会自动换行显示。\\\\n高度未设置时，组件无默认高度，自适应内容高度。宽度未设置时，默认撑满最大宽度。'\n      })\n        .fontSize(16)\n        .style(TextInputStyle.Inline)\n        .wordBreak(WordBreak.BREAK_ALL)\n\n      // 描述文本，字体大小为16，颜色为红色\n      Text(\"TextInput为inline模式，WordBreakType属性为BREAK_WORD的样式：\").fontSize(16).fontColor(0xFF0000)\n      // TextInput组件，设置文本内容、字体大小、样式为Inline、wordBreak为BREAK_WORD\n      TextInput({\n        text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'\n      })\n        .fontSize(16)\n        .style(TextInputStyle.Inline)\n        .wordBreak(WordBreak.BREAK_WORD)\n    }\n  }\n}"
        },
        {
            "description": "该组件通过 Row 和 Column 布局实现了一个展示文本输入框及其自适应字号策略的界面。布局宽度占据整个屏幕的 90%，高度设为 90%，内边距为 10vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组文本输入框。每个文本输入框组的文本输入框以垂直布局方式排列，文本输入框之间的间距均匀分布，且对齐方式为居中对齐。\n文本输入框的样式包括宽度、高度、边框宽度、边距等属性，支持不同的自适应字号策略展示。文本输入框组之间通过 Column 组件进行分隔。文本输入框的功能包括输入事件和自适应字号策略，用户可以通过输入文本触发相应操作，文本输入框也可以在不同的自适应字号策略下进行展示。\n整个布局通过 Row 和 Column 布局保证文本输入框在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TextInputExample {\n  build() {\n    Row() {\n      Column() {\n        // 标题文本，显示 \"heightAdaptivePolicy\"，字体大小为 9，颜色为 0xCCCCCC\n        Text('heightAdaptivePolicy').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 第一个文本输入框，显示 \"This is the text without the height adaptive policy set\"，宽度为 80%，高度为 50vp，边框宽度为 1vp，边距为 1vp\n        TextInput({text: 'This is the text without the height adaptive policy set'})\n          .width('80%').height(50).borderWidth(1).margin(1)\n        \n        // 第二个文本输入框，显示 \"This is the text with the height adaptive policy set\"，宽度为 80%，高度为 50vp，边框宽度为 1vp，边距为 1vp，最小字体大小为 4，最大字体大小为 40，最大行数为 3，高度自适应策略为 MAX_LINES_FIRST\n        TextInput({text: 'This is the text with the height adaptive policy set'})\n          .width('80%').height(50).borderWidth(1).margin(1)\n          .minFontSize(4)\n          .maxFontSize(40)\n          .maxLines(3)\n          .heightAdaptivePolicy(TextHeightAdaptivePolicy.MAX_LINES_FIRST)\n        \n        // 第三个文本输入框，显示 \"This is the text with the height adaptive policy set\"，宽度为 80%，高度为 50vp，边框宽度为 1vp，边距为 1vp，最小字体大小为 4，最大字体大小为 40，最大行数为 3，高度自适应策略为 MIN_FONT_SIZE_FIRST\n        TextInput({text: 'This is the text with the height adaptive policy set'})\n          .width('80%').height(50).borderWidth(1).margin(1)\n          .minFontSize(4)\n          .maxFontSize(40)\n          .maxLines(3)\n          .heightAdaptivePolicy(TextHeightAdaptivePolicy.MIN_FONT_SIZE_FIRST)\n        \n        // 第四个文本输入框，显示 \"This is the text with the height adaptive policy set\"，宽度为 80%，高度为 50vp，边框宽度为 1vp，边距为 1vp，最小字体大小为 4，最大字体大小为 40，最大行数为 3，高度自适应策略为 LAYOUT_CONSTRAINT_FIRST\n        TextInput({text: 'This is the text with the height adaptive policy set'})\n          .width('80%').height(50).borderWidth(1).margin(1)\n          .minFontSize(4)\n          .maxFontSize(40)\n          .maxLines(3)\n          .heightAdaptivePolicy(TextHeightAdaptivePolicy.LAYOUT_CONSTRAINT_FIRST)\n      }.height('90%')\n    }\n    .width('90%')\n    .margin(10)\n  }\n}"
        },
        {
            "description": "该组件展示了一个带有自定义编辑菜单选项的文本输入框。布局宽度占据屏幕的90%，高度为50vp，内边距为顶部100vp，左右5%。文本输入框的宽度为95%，高度为50vp，位于垂直布局的顶部。\n组件的样式包括文本输入框的宽度和高度，以及外边距。文本输入框的排列方式为垂直布局，确保其在界面中的位置居中且顶部有足够的空间。\n组件的功能包括自定义编辑菜单选项的文本内容、图标和回调方法。用户可以通过点击菜单项触发相应的操作，并在控制台输出相关信息。",
            "code": "@Entry\n@Component\nstruct TextInputExample {\n  @State text: string = 'TextInput editMenuOptions' // 初始化文本输入框的默认文本内容\n\n  // 自定义菜单项的创建方法\n  onCreateMenu(menuItems: Array<TextMenuItem>) {\n    menuItems.forEach((value, index) => {\n      value.icon = $r('app.media.startIcon') // 设置菜单项的图标\n      if (value.id.equals(TextMenuItemId.COPY)) {\n        value.content = \"复制change\" // 修改复制菜单项的文本内容\n      }\n      if (value.id.equals(TextMenuItemId.SELECT_ALL)) {\n        value.content = \"全选change\" // 修改全选菜单项的文本内容\n      }\n    })\n    let item1: TextMenuItem = {\n      content: 'custom1', // 自定义菜单项1的文本内容\n      icon: $r('app.media.startIcon'), // 自定义菜单项1的图标\n      id: TextMenuItemId.of('custom1'), // 自定义菜单项1的唯一标识\n    }\n    let item2: TextMenuItem = {\n      content: 'custom2', // 自定义菜单项2的文本内容\n      id: TextMenuItemId.of('custom2'), // 自定义菜单项2的唯一标识\n      icon: $r('app.media.startIcon'), // 自定义菜单项2的图标\n    }\n    menuItems.push(item1) // 将自定义菜单项1添加到菜单项列表的末尾\n    menuItems.unshift(item2) // 将自定义菜单项2添加到菜单项列表的开头\n    return menuItems // 返回修改后的菜单项列表\n  }\n\n  build() {\n    Column() {\n      TextInput({ text: this.text }) // 创建一个文本输入框，初始文本为@State变量text的值\n        .width('95%') // 设置文本输入框的宽度为95%\n        .height(50) // 设置文本输入框的高度为50vp\n        .editMenuOptions({\n          onCreateMenu: this.onCreateMenu, // 设置自定义菜单项的创建方法\n          onMenuItemClick: (menuItem: TextMenuItem, textRange: TextRange) => { // 设置菜单项点击的回调方法\n            if (menuItem.id.equals(TextMenuItemId.of(\"custom2\"))) {\n              console.log(\"拦截 id: custom2 start:\" + textRange.start + \"; end:\" + textRange.end) // 拦截自定义菜单项2的点击事件，并输出相关信息\n              return true; // 返回true表示拦截该事件\n            }\n            if (menuItem.id.equals(TextMenuItemId.COPY)) {\n              console.log(\"拦截 COPY start:\" + textRange.start + \"; end:\" + textRange.end) // 拦截复制菜单项的点击事件，并输出相关信息\n              return true; // 返回true表示拦截该事件\n            }\n            if (menuItem.id.equals(TextMenuItemId.SELECT_ALL)) {\n              console.log(\"不拦截 SELECT_ALL start:\" + textRange.start + \"; end:\" + textRange.end) // 不拦截全选菜单项的点击事件，并输出相关信息\n              return false; // 返回false表示不拦截该事件\n            }\n            return false; // 默认返回false，不拦截其他菜单项的点击事件\n          }\n        })\n        .margin({ top: 100 }) // 设置文本输入框的上边距为100vp\n    }\n    .width(\"90%\") // 设置垂直布局的宽度为90%\n    .margin(\"5%\") // 设置垂直布局的左右边距为5%\n  }\n}"
        },
        {
            "description": "该组件通过Column布局实现了一个包含多个TextInput组件的界面。布局宽度占据整个屏幕，每个TextInput组件的高度为60vp，宽度为380vp，组件之间的间距为20vp。组件的垂直方向上被分为三个部分，每个部分包含一个TextInput组件。\n\n第一个TextInput组件展示了自定义密码图标的功能。密码图标通过passwordIcon属性设置，当密码可见时显示PassWordSrc1图标，当密码不可见时显示PassWordSrc2图标。\n\n第二个TextInput组件展示了下划线样式和错误提示的功能。通过showUnderline属性设置为true，显示下划线样式。通过showError属性设置错误提示信息，并通过showUnit属性设置右侧的单位选择器。单位选择器通过Select组件实现，包含KB、MB、GB、TB四个选项，默认选中MB。单位选择器的样式包括高度、字体大小、字体颜色、背景颜色等。\n\n第三个TextInput组件展示了用户名输入和错误提示的功能。通过showUnderline属性设置为true，显示下划线样式。通过showError属性设置错误提示信息。用户输入用户名后，通过onChange事件监听输入内容，并通过onSubmit事件验证输入内容是否正确。如果输入内容与预设的用户名一致，则清除错误提示；否则，显示错误提示并清空输入内容。\n\n整个布局通过Column布局保证TextInput组件在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TextInputExample {\n  @State PassWordSrc1: Resource = $r('app.media.onIcon') // 密码可见时的图标资源\n  @State PassWordSrc2: Resource = $r('app.media.offIcon') // 密码不可见时的图标资源\n  @State TextError: string = '' // 错误提示信息\n  @State Text: string = '' // 用户输入的文本\n  @State NameText: string = 'test' // 预设的用户名\n\n  @Builder itemEnd() {\n    Select([{ value: 'KB' },\n      { value: 'MB' },\n      { value: 'GB' },\n      { value: 'TB', }])\n      .height(\"48vp\") // 单位选择器的高度\n      .borderRadius(0) // 单位选择器的边框圆角\n      .selected(2) // 默认选中第三个选项\n      .align(Alignment.Center) // 对齐方式为居中对齐\n      .value('MB') // 默认选中的值\n      .font({ size: 20, weight: 500 }) // 字体大小和粗细\n      .fontColor('#182431') // 字体颜色\n      .selectedOptionFont({ size: 20, weight: 400 }) // 选中选项的字体大小和粗细\n      .optionFont({ size: 20, weight: 400 }) // 选项的字体大小和粗细\n      .backgroundColor(Color.Transparent) // 背景颜色为透明\n      .responseRegion({ height: \"40vp\", width: \"80%\", x: '10%', y: '6vp' }) // 响应区域\n      .onSelect((index: number) => {\n        console.info('Select:' + index) // 选中选项时的回调函数\n      })\n  }\n\n  build() {\n    Column({ space: 20 }) {\n\n      TextInput({ placeholder: 'user define password icon' })\n        .type(InputType.Password) // 输入类型为密码\n        .width(380) // 宽度\n        .height(60) // 高度\n        .passwordIcon({ onIconSrc: this.PassWordSrc1, offIconSrc: this.PassWordSrc2 }) // 密码图标\n\n      TextInput({ placeholder: 'underline style' })\n        .showUnderline(true) // 显示下划线样式\n        .width(380) // 宽度\n        .height(60) // 高度\n        .showError('Error') // 错误提示信息\n        .showUnit(this.itemEnd) // 右侧的单位选择器\n\n      Text(`用户名：${this.Text}`) // 显示用户名\n        .width('95%') // 宽度\n      TextInput({ placeholder: '请输入用户名', text: this.Text })\n        .showUnderline(true) // 显示下划线样式\n        .width(380) // 宽度\n        .showError(this.TextError) // 错误提示信息\n        .onChange((value: string) => {\n          this.Text = value // 监听输入内容\n        })\n        .onSubmit((enterKey: EnterKeyType, event: SubmitEvent) => {\n          if (this.Text == this.NameText) {\n            this.TextError = '' // 输入内容正确时清除错误提示\n          } else {\n            this.TextError = '用户名输入错误' // 输入内容错误时显示错误提示\n            this.Text = '' // 清空输入内容\n            event.keepEditableState() // 保持编辑状态\n          }\n        })\n\n    }.width('100%') // 布局宽度占据整个屏幕\n  }\n}"
        },
        {
            "description": "该示例展示了如何在鸿蒙ArkUI中使用TextInput组件，包括基本输入框、密码输入框、邮箱输入框以及带有内联样式的输入框。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个TextInput组件。每个TextInput组件的宽度为95%，高度为40vp，内边距为20vp。\n\nTextInput组件的样式包括占位符颜色、占位符字体、光标颜色、字体大小、字体颜色等属性。组件的功能包括输入过滤、输入内容变化监听、光标位置控制、密码显示状态切换等。组件的排列和嵌套关系通过Column组件实现，确保输入框在垂直方向上有序排列，界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TextInputExample {\n  @State text: string = '' // 用于存储用户输入的文本\n  @State positionInfo: CaretOffset = { index: 0, x: 0, y: 0 } // 用于存储光标位置信息\n  @State passwordState: boolean = false // 用于控制密码输入框的显示状态\n  controller: TextInputController = new TextInputController() // 用于控制TextInput组件的控制器\n\n  build() {\n    Column() {\n      TextInput({ text: this.text, placeholder: 'input your word...', controller: this.controller })\n        .placeholderColor(Color.Grey) // 设置占位符颜色为灰色\n        .placeholderFont({ size: 14, weight: 400 }) // 设置占位符字体大小为14，字重为400\n        .caretColor(Color.Blue) // 设置光标颜色为蓝色\n        .width('95%') // 设置输入框宽度为95%\n        .height(40) // 设置输入框高度为40vp\n        .margin(20) // 设置输入框内边距为20vp\n        .fontSize(14) // 设置输入框字体大小为14\n        .fontColor(Color.Black) // 设置输入框字体颜色为黑色\n        .inputFilter('[a-z]', (e) => { // 设置输入过滤，只允许输入小写字母\n          console.log(JSON.stringify(e)) // 打印过滤事件信息\n        })\n        .onChange((value: string) => { // 监听输入内容变化\n          this.text = value // 更新输入文本状态\n        })\n      Text(this.text) // 显示用户输入的文本\n      Button('Set caretPosition 1')\n        .margin(15) // 设置按钮内边距为15vp\n        .onClick(() => { // 监听按钮点击事件\n          this.controller.caretPosition(1) // 设置光标位置为1\n        })\n      Button('Get CaretOffset')\n        .margin(15) // 设置按钮内边距为15vp\n        .onClick(() => { // 监听按钮点击事件\n          this.positionInfo = this.controller.getCaretOffset() // 获取光标位置信息并更新状态\n        })\n\n      TextInput({ placeholder: 'input your password...' })\n        .width('95%') // 设置输入框宽度为95%\n        .height(40) // 设置输入框高度为40vp\n        .margin(20) // 设置输入框内边距为20vp\n        .type(InputType.Password) // 设置输入框类型为密码\n        .maxLength(9) // 设置最大输入长度为9\n        .showPasswordIcon(true) // 显示密码显示/隐藏图标\n        .showPassword(this.passwordState) // 根据状态控制密码显示/隐藏\n        .onSecurityStateChange((isShowPassword: boolean) => { // 监听密码显示状态变化\n          console.info('isShowPassword', isShowPassword) // 打印密码显示状态\n          this.passwordState = isShowPassword // 更新密码显示状态\n        })\n\n      TextInput({ placeholder: 'input your email...' })\n        .width('95%') // 设置输入框宽度为95%\n        .height(40) // 设置输入框高度为40vp\n        .margin(20) // 设置输入框内边距为20vp\n        .contentType(ContentType.EMAIL_ADDRESS) // 设置输入框内容类型为邮箱地址\n        .maxLength(9) // 设置最大输入长度为9\n\n      TextInput({ text: 'inline style' })\n        .width('95%') // 设置输入框宽度为95%\n        .height(50) // 设置输入框高度为50vp\n        .margin(20) // 设置输入框内边距为20vp\n        .borderRadius(0) // 设置输入框边框圆角为0\n        .style(TextInputStyle.Inline) // 设置输入框样式为内联样式\n    }.width('100%') // 设置Column组件宽度为100%\n  }\n}"
        },
        {
            "description": "该组件通过Flex布局实现了一个展示文本输入框及其相关属性的界面。布局宽度占据整个屏幕的90%，高度设为90%，内边距为左右10vp。组件的垂直方向上被分为三个部分，每个部分包含一个标题和一组文本输入框。每个文本输入框组的文本输入框以垂直布局方式排列，文本输入框之间的间距均匀分布，且对齐方式为居中对齐。\n文本输入框的样式包括边框宽度、内边距、外边距、行高、字符间距和装饰线等属性，支持不同的样式展示。文本输入框组之间通过Flex组件进行分隔。文本输入框的功能包括显示不同的行高、字符间距和装饰线样式，用户可以通过输入框查看不同样式效果。\n整个布局通过Flex布局保证文本输入框在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TextInputExample {\n  build() {\n    Row() {\n      Column() {\n        // 标题：行高\n        Text('lineHeight').fontSize(9).fontColor(0xCCCCCC)\n        // 文本输入框：未设置行高\n        TextInput({text: 'lineHeight unset'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(10) // 设置内边距为10\n          .margin(5) // 设置外边距为5\n        // 文本输入框：行高为15\n        TextInput({text: 'lineHeight 15'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(10) // 设置内边距为10\n          .margin(5) // 设置外边距为5\n          .lineHeight(15) // 设置行高为15\n        // 文本输入框：行高为30\n        TextInput({text: 'lineHeight 30'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(10) // 设置内边距为10\n          .margin(5) // 设置外边距为5\n          .lineHeight(30) // 设置行高为30\n\n        // 标题：字符间距\n        Text('letterSpacing').fontSize(9).fontColor(0xCCCCCC)\n        // 文本输入框：字符间距为0\n        TextInput({text: 'letterSpacing 0'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .letterSpacing(0) // 设置字符间距为0\n        // 文本输入框：字符间距为3\n        TextInput({text: 'letterSpacing 3'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .letterSpacing(3) // 设置字符间距为3\n        // 文本输入框：字符间距为-1\n        TextInput({text: 'letterSpacing -1'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .letterSpacing(-1) // 设置字符间距为-1\n\n        // 标题：装饰线\n        Text('decoration').fontSize(9).fontColor(0xCCCCCC)\n        // 文本输入框：装饰线为贯穿线，红色\n        TextInput({text: 'LineThrough, Red'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .decoration({type: TextDecorationType.LineThrough, color: Color.Red}) // 设置装饰线为贯穿线，颜色为红色\n        // 文本输入框：装饰线为上划线，红色，虚线\n        TextInput({text: 'Overline, Red, DASHED'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .decoration({type: TextDecorationType.Overline, color: Color.Red, style: TextDecorationStyle.DASHED}) // 设置装饰线为上划线，颜色为红色，样式为虚线\n        // 文本输入框：装饰线为下划线，红色，波浪线\n        TextInput({text: 'Underline, Red, WAVY'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .decoration({type: TextDecorationType.Underline, color: Color.Red, style: TextDecorationStyle.WAVY}) // 设置装饰线为下划线，颜色为红色，样式为波浪线\n      }.height('90%') // 设置列的高度为90%\n    }\n    .width('90%') // 设置行的宽度为90%\n    .margin(10) // 设置行的外边距为10\n  }\n}"
        },
        {
            "description": "该组件通过Column和Row布局实现了一个电话号码输入框，并自动将输入的电话号码格式化为XXX XXXX XXXX的格式。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上包含一个Row，Row中嵌套了一个TextInput组件。TextInput的高度为48vp，用于输入电话号码。\nTextInput的样式包括输入类型为电话号码，高度为48vp。TextInput的功能包括输入事件和文本选择变化事件。输入事件会触发电话号码的格式化逻辑，文本选择变化事件会记录当前的文本选择位置。\n整个布局通过Column布局保证TextInput在垂直方向上居中，确保界面简洁美观。",
            "code": "@Entry\n@Component\nstruct phone_example {\n  @State submitValue: string = '' // 用于存储提交的电话号码\n  @State text: string = '' // 用于存储当前输入的电话号码\n  public readonly NUM_TEXT_MAXSIZE_LENGTH = 13 // 电话号码的最大长度（包括空格）\n  @State teleNumberNoSpace: string = \"\" // 用于存储去除空格后的电话号码\n  @State nextCaret: number = -1 // 用于存储下一个光标位置\n  @State actualCh: number = -1 // 用于存储实际字符位置\n  @State lastCaretPosition: number = 0 // 用于存储上一次的光标起始位置\n  @State lastCaretPositionEnd: number = 0 // 用于存储上一次的光标结束位置\n  controller: TextInputController = new TextInputController() // TextInput的控制器\n\n  // 判断字符串是否为空\n  isEmpty(str?: string): boolean {\n    return str == 'undefined' || !str || !new RegExp(\"[^\\\\s]\").test(str)\n  }\n\n  // 检查是否需要添加号码空格\n  checkNeedNumberSpace(numText: string) {\n    let isSpace: RegExp = new RegExp('[\\\\+;,#\\\\*]', 'g')\n    let isRule: RegExp = new RegExp('^\\\\+.*')\n\n    if (isSpace.test(numText)) {\n      if (isRule.test(numText)) {\n        return true\n      } else {\n        return false\n      }\n    }\n    return true;\n  }\n\n  // 去除字符串中的空格\n  removeSpace(str: string): string {\n    if (this.isEmpty(str)) {\n      return ''\n    }\n    return str.replace(new RegExp(\"[\\\\s]\", \"g\"), '')\n  }\n\n  // 设置光标位置\n  setCaret() {\n    if (this.nextCaret != -1) {\n      console.log(\"to keep caret position right, change caret to\", this.nextCaret)\n      this.controller.caretPosition(this.nextCaret)\n      this.nextCaret = -1\n    }\n  }\n\n  // 计算光标位置\n  calcCaretPosition(nextText: string) {\n    let befNumberNoSpace: string = this.removeSpace(this.text)\n    this.actualCh = 0\n    if (befNumberNoSpace.length < this.teleNumberNoSpace.length) { \n      for (let i = 0; i < this.lastCaretPosition; i++) {\n        if (this.text[i] != ' ') {\n          this.actualCh += 1\n        }\n      }\n      this.actualCh += this.teleNumberNoSpace.length - befNumberNoSpace.length\n      console.log(\"actualCh: \" + this.actualCh)\n      for (let i = 0; i < nextText.length; i++) {\n        if (nextText[i] != ' ') {\n          this.actualCh -= 1\n          if (this.actualCh <= 0) {\n            this.nextCaret = i + 1\n            break;\n          }\n        }\n      }\n    } else if (befNumberNoSpace.length > this.teleNumberNoSpace.length) { \n      if (this.lastCaretPosition === this.text.length) {\n        console.log(\"Caret at last, no need to change\")\n      } else if (this.lastCaretPosition === this.lastCaretPositionEnd) {\n        for (let i = this.lastCaretPosition; i < this.text.length; i++) {\n          if (this.text[i] != ' ') {\n            this.actualCh += 1\n          }\n        }\n        for (let i = nextText.length - 1; i >= 0; i--) {\n          if (nextText[i] != ' ') {\n            this.actualCh -= 1\n            if (this.actualCh <= 0) {\n              this.nextCaret = i\n              break;\n            }\n          }\n        }\n      } else {\n        this.nextCaret = this.lastCaretPosition \n      }\n    }\n  }\n\n  build() {\n    Column() {\n      Row() {\n        TextInput({ text: `${this.text}`, controller: this.controller }).type(InputType.PhoneNumber).height('48vp')\n          .onChange((number: string) => {\n            this.teleNumberNoSpace = this.removeSpace(number);\n            let nextText: string = \"\"\n            if (this.teleNumberNoSpace.length > this.NUM_TEXT_MAXSIZE_LENGTH - 2) {\n              nextText = this.teleNumberNoSpace\n            } else if (this.checkNeedNumberSpace(number)) {\n              if (this.teleNumberNoSpace.length <= 3) {\n                nextText = this.teleNumberNoSpace\n              } else {\n                let split1: string = this.teleNumberNoSpace.substring(0, 3)\n                let split2: string = this.teleNumberNoSpace.substring(3)\n                nextText = split1 + ' ' + split2\n                if (this.teleNumberNoSpace.length > 7) {\n                  split2 = this.teleNumberNoSpace.substring(3, 7)\n                  let split3: string = this.teleNumberNoSpace.substring(7)\n                  nextText = split1 + ' ' + split2 + ' ' + split3\n                }\n              }\n            } else {\n              nextText = number\n            }\n            console.log(\"onChange Triggered:\" + this.text + \"|\" + nextText + \"|\" + number)\n            if (this.text === nextText && nextText === number) {\n              this.setCaret()\n            } else {\n              this.calcCaretPosition(nextText)\n            }\n            this.text = nextText\n          })\n          .onTextSelectionChange((selectionStart, selectionEnd) => {\n            console.log(\"selection change: \", selectionStart, selectionEnd)\n            this.lastCaretPosition = selectionStart\n            this.lastCaretPositionEnd = selectionEnd\n          })\n      }\n    }\n    .width('100%')\n    .height(\"100%\")\n  }\n}"
        }
    ],
    "is_common_attrs": true
}