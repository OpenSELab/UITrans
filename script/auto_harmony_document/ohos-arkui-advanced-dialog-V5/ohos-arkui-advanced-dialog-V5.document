Title: 弹出框 (Dialog)-弹窗-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-arkui-advanced-dialog-V5

Markdown Content:
弹出框是一种模态窗口，通常用于在保持当前的上下文环境时，临时展示用户需关注的信息或待处理的操作，用户在模态弹出框内完成上述交互任务。模态弹出框需要用户进行交互才能够退出模态模式。

说明

该组件从API Version 10开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

导入模块
----

1.  import { TipsDialog, SelectDialog, ConfirmDialog, AlertDialog, LoadingDialog, CustomContentDialog } from '@kit.ArkUI'

TipsDialog
----------

TipsDialog({controller: CustomDialogController, imageRes: Resource, imageSize?: SizeOptions, title?: ResourceStr, content?: ResourceStr, checkTips?: ResourceStr, ischecked?: boolean, checkAction?: (isChecked: boolean) =\> void, primaryButton?: ButtonOptions, secondaryButton?: ButtonOptions})

提示弹出框，即为带图形确认框，必要时可通过图形化方式展现确认框。

**装饰器类型：**@CustomDialog

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

名称

参数类型

必填

装饰器类型

说明

controller

[CustomDialogController](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-custom-dialog-box-V5#customdialogcontroller)

是

\-

提示弹出框控制器。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

imageRes

[ResourceStr12+](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr) | [PixelMap12+](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-image-V5#pixelmap7)

是

\-

展示的图片。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

imageSize

[SizeOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#sizeoptions)

否

\-

自定义图片尺寸。

默认值：64\*64vp

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

title

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

\-

提示弹出框标题。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

content

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

\-

提示弹出框内容。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

checkTips

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

\-

checkbox的提示内容。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

isChecked

boolean

否

@Prop

value为true时，表示checkbox已选中，value为false时，表示未选中。

默认值：false

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

checkAction12+

(isChecked: boolean) =\> void

否

\-

现推荐使用 onCheckedChange12+。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

onCheckedChange12+

Callback<boolean\>

否

\-

checkbox的选中状态改变事件。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

primaryButton

[ButtonOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-arkui-advanced-dialog-V5#buttonoptions)

否

\-

提示框左侧按钮。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

secondaryButton

[ButtonOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-arkui-advanced-dialog-V5#buttonoptions)

否

\-

提示框右侧按钮。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

theme12+

[Theme](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-theme-V5#theme) | [CustomTheme](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-theme-V5#customtheme)

否

\-

主题信息，可以是CustomTheme或从onWillApplyTheme中获取的Theme实例。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

SelectDialog
------------

SelectDialog({controller: CustomDialogController, title: ResourceStr, content?: ResourceStr, selectedIndex?: number, confirm?: ButtonOptions, radioContent: Array<SheetInfo\>})

选择类弹出框，弹框中以列表或网格的形式提供可选的内容。

**装饰器类型：**@CustomDialog

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

名称

参数类型

必填

说明

controller

[CustomDialogController](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-custom-dialog-box-V5#customdialogcontroller)

是

选择弹出框控制器。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

title

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

是

选择弹出框标题。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

content

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

选择弹出框内容。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

selectedIndex

number

否

选择弹出框的选中项。

默认值：-1

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

confirm

[ButtonOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-arkui-advanced-dialog-V5#buttonoptions)

否

选择弹出框底部按钮。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

radioContent

Array<[SheetInfo](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-action-sheet-V5#sheetinfo%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)\>

是

选择弹出框的子项内容列表，每个选择项支持设置文本和选中的回调事件。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

theme12+

[Theme](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-theme-V5#theme) | [CustomTheme](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-theme-V5#customtheme)

否

主题信息，可以是CustomTheme或从onWillApplyTheme中获取的Theme实例。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

ConfirmDialog
-------------

ConfirmDialog({controller: CustomDialogController, title: ResourceStr, content?: ResourceStr, checkTips?: ResourceStr, ischecked?: boolean, primaryButton?: ButtonOptions, secondaryButton?: ButtonOptions})

信息确认类弹出框，操作未正确执行（如网络错误、电池电量过低），或未正确操作时（如指纹录入），反馈的错误或提示信息。

**装饰器类型：**@CustomDialog

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

名称

参数类型

必填

装饰器类型

说明

controller

[CustomDialogController](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-custom-dialog-box-V5#customdialogcontroller)

是

\-

确认弹出框控制器。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

title

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

是

\-

确认弹出框标题。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

content

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

\-

确认弹出框内容。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

checkTips

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

\-

checkbox的提示内容。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

isChecked

boolean

否

@Prop

value为true时，表示checkbox已选中，value为false时，表示未选中。

默认值：false

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

onCheckedChange12+

Callback<boolean\>

否

\-

checkbox的选中状态改变事件。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

primaryButton

[ButtonOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-arkui-advanced-dialog-V5#buttonoptions)

否

\-

确认框左侧按钮。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

secondaryButton

[ButtonOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-arkui-advanced-dialog-V5#buttonoptions)

否

\-

确认框右侧按钮。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

theme12+

[Theme](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-theme-V5#theme)| [CustomTheme](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-theme-V5#customtheme)

否

\-

主题信息，可以是CustomTheme或从onWillApplyTheme中获取的Theme实例。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

AlertDialog
-----------

AlertDialog({controller: CustomDialogController, primaryTitle?: ResourceStr, secondaryTitle?: ResourceStr, content: ResourceStr, primaryButton?: ButtonOptions, secondaryButton?: ButtonOptions})

操作确认类弹出框，触发一个将产生严重后果的不可逆操作时，如删除、重置、取消编辑、停止等。

**装饰器类型：**@CustomDialog

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

名称

参数类型

必填

说明

controller

[CustomDialogController](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-custom-dialog-box-V5#customdialogcontroller)

是

确认弹出框控制器。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

primaryTitle12+

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

确认框一级标题。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

secondaryTitle12+

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

确认框二级标题。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

content

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

是

确认弹出框内容。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

primaryButton

[ButtonOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-arkui-advanced-dialog-V5#buttonoptions)

否

确认框左侧按钮。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

secondaryButton

[ButtonOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-arkui-advanced-dialog-V5#buttonoptions)

否

确认框右侧按钮。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

theme12+

[Theme](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-theme-V5#theme) | [CustomTheme](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-theme-V5#customtheme)

否

主题信息，可以是CustomTheme或从onWillApplyTheme中获取的Theme实例。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

LoadingDialog
-------------

LoadingDialog({controller: CustomDialogController, content?: ResourceStr})

进度加载类弹出框，操作正在执行时的提示信息。

**装饰器类型：**@CustomDialog

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

名称

参数类型

必填

说明

controller

[CustomDialogController](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-custom-dialog-box-V5#customdialogcontroller)

是

加载弹出框控制器。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

content

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

加载弹出框内容。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

theme12+

[Theme](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-theme-V5#theme)| [CustomTheme](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-theme-V5#customtheme)

否

主题信息，可以是CustomTheme或从onWillApplyTheme中获取的Theme实例。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

CustomContentDialog12+
----------------------

CustomContentDialog({controller: CustomDialogController, contentBuilder: () =\> void, primaryTitle?: ResourceStr, secondaryTitle?: ResourceStr, contentAreaPadding?: Padding, buttons?: ButtonOptions\[\]})

自定义内容区弹出框，同时支持定义操作区按钮样式。

**装饰器类型：**@CustomDialog

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

ButtonOptions
-------------

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

value

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

是

按钮的内容。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

action

() =\> void

否

按钮的点击事件。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

background

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

否

按钮的背景。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

fontColor

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

否

按钮的字体颜色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

buttonStyle12+

[ButtonStyleMode](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-button-V5#buttonstylemode11%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

否

按钮的样式。

默认值：2in1设备为ButtonStyleMode.NORMAL，其他设备为ButtonStyleMode.TEXTUAL。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

role12+

[ButtonRole](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-button-V5#buttonrole12%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

否

按钮的角色。

默认值：ButtonRole.NORMAL。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

说明

buttonStyle和role优先级高于fontColor和background。如果buttonStyle和role设置的是默认值，那么fontColor和background可生效。

示例
--

### 示例1

弹出上图下文弹出框。

1.  import { TipsDialog } from '@kit.ArkUI';
2.  import { image } from '@kit.ImageKit';

4.  @Entry
5.  @Component
6.  struct Index {
7.    @State pixelMap: PixelMap | undefined = undefined;
8.    isChecked = false;
9.    dialogControllerImage: CustomDialogController = new CustomDialogController({
10.      builder: TipsDialog({
11.        imageRes: $r('sys.media.ohos\_ic\_public\_voice'),
12.        content: '想要卸载这个APP嘛?',
13.        primaryButton: {
14.          value: '取消',
15.          action: () =\> {
16.            console.info('Callback when the first button is clicked')
17.          },
18.        },
19.        secondaryButton: {
20.          value: '删除',
21.          role: ButtonRole.ERROR,
22.          action: () =\> {
23.            console.info('Callback when the second button is clicked')
24.          }
25.        },
26.        onCheckedChange: () =\> {
27.          console.info('Callback when the checkbox is clicked')
28.        }
29.      }),
30.    })

32.    build() {
33.      Row() {
34.        Stack() {
35.          Column(){
36.            Button("上图下文弹出框")
37.              .width(96)
38.              .height(40)
39.              .onClick(() =\> {
40.                this.dialogControllerImage.open()
41.              })
42.          }.margin({bottom: 300})
43.        }.align(Alignment.Bottom)
44.        .width('100%').height('100%')
45.      }
46.      .backgroundImageSize({ width: '100%', height: '100%' })
47.      .height('100%')
48.    }

50.    aboutToAppear(): void {
51.      this.getPixmapFromMedia($r('app.media.app\_icon'));    
52.    }

54.    async getPixmapFromMedia(resource: Resource) {
55.      let unit8Array = await getContext(this)?.resourceManager?.getMediaContent({
56.        bundleName: resource.bundleName,
57.        moduleName: resource.moduleName,
58.        id: resource.id
59.      })
60.      let imageSource = image.createImageSource(unit8Array.buffer.slice(0, unit8Array.buffer.byteLength))
61.      this.pixelMap = await imageSource.createPixelMap({
62.        desiredPixelFormat: image.PixelMapFormat.RGBA\_8888
63.      })
64.      await imageSource.release()
65.      return this.pixelMap;
66.    }
67.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114527.54182127742018883630393877355378:50001231000000:2800:4C9A06FE7F294965D8F1047FFA7086C4A3D369F33F005F93A1DD200C4EF7B0E5.png?needInitFileName=true?needInitFileName=true)

### 示例2

弹出纯列表弹出框。

1.  import { SelectDialog } from '@kit.ArkUI'

3.  @Entry
4.  @Component
5.  struct Index {
6.    radioIndex = 0;
7.    dialogControllerList: CustomDialogController = new CustomDialogController({
8.      builder: SelectDialog({
9.        title: '文本标题',
10.        selectedIndex: this.radioIndex,
11.        confirm: {
12.          value: '取消',
13.          action: () =\> {},
14.        },
15.        radioContent: \[
16.          {
17.            title: '文本文本文本文本文本',
18.            action: () =\> {
19.              this.radioIndex = 0
20.            }
21.          },
22.          {
23.            title: '文本文本文本文本',
24.            action: () =\> {
25.              this.radioIndex = 1
26.            }
27.          },
28.          {
29.            title: '文本文本文本文本',
30.            action: () =\> {
31.              this.radioIndex = 2
32.            }
33.          },
34.        \]
35.      }),
36.    })

38.    build() {
39.      Row() {
40.        Stack() {
41.          Column() {
42.            Button("纯列表弹出框")
43.              .width(96)
44.              .height(40)
45.              .onClick(() =\> {
46.                this.dialogControllerList.open()
47.              })
48.          }.margin({ bottom: 300 })
49.        }.align(Alignment.Bottom)
50.        .width('100%').height('100%')
51.      }
52.      .backgroundImageSize({ width: '100%', height: '100%' })
53.      .height('100%')
54.    }
55.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114527.27640985650457945165724361963345:50001231000000:2800:BE60B71551CBC80903218717A8C0D1FA005DE8A6B7834C34E058D6BDAEC3C9AC.png?needInitFileName=true?needInitFileName=true)

### 示例3

弹出文本+勾选弹出框。

1.  import { ConfirmDialog } from '@kit.ArkUI'

3.  @Entry
4.  @Component
5.  struct Index {
6.    isChecked = false;
7.    dialogControllerCheckBox: CustomDialogController = new CustomDialogController({
8.      builder: ConfirmDialog({
9.        title: '文本标题',
10.        content: '文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本',
11.        isChecked: this.isChecked,
12.        checkTips: '禁止后不再提示',
13.        primaryButton: {
14.          value: '禁止',
15.          action: () =\> {},
16.        },
17.        secondaryButton: {
18.          value: '允许',
19.          action: () =\> {
20.            this.isChecked = false
21.            console.info('Callback when the second button is clicked')
22.          }
23.        },
24.        onCheckedChange: () =\> {
25.          console.info('Callback when the checkbox is clicked')
26.        },
27.      }),
28.      autoCancel: true,
29.      alignment: DialogAlignment.Bottom
30.    })

32.    build() {
33.      Row() {
34.        Stack() {
35.          Column(){
36.            Button("文本+勾选弹出框")
37.              .width(96)
38.              .height(40)
39.              .onClick(() =\> {
40.                this.dialogControllerCheckBox.open()
41.              })
42.          }.margin({bottom: 300})
43.        }.align(Alignment.Bottom)
44.        .width('100%').height('100%')
45.      }
46.      .backgroundImageSize({ width: '100%', height: '100%' })
47.      .height('100%')
48.    }
49.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114527.58125683945872855775312651441073:50001231000000:2800:AF9939A20328101FF624C7C9AD3E4E03D1267A8E866F0060F94CDF8D3DDA0942.png?needInitFileName=true?needInitFileName=true)

### 示例4

弹出纯文本弹出框。

1.  import { AlertDialog } from '@kit.ArkUI'

3.  @Entry
4.  @Component
5.  struct Index {
6.    dialogControllerConfirm: CustomDialogController = new CustomDialogController({
7.      builder: AlertDialog({
8.        primaryTitle: '弹框一级标题',
9.        secondaryTitle: '弹框二级标题',
10.        content: '文本文本文本文本文本',
11.        primaryButton: {
12.          value: '取消',
13.          action: () =\> {
14.          },
15.        },
16.        secondaryButton: {
17.          value: '确认',
18.          role: ButtonRole.ERROR,
19.          action: () =\> {
20.            console.info('Callback when the second button is clicked')
21.          }
22.        },
23.      }),
24.    })

26.    build() {
27.      Row() {
28.        Stack() {
29.          Column() {
30.            Button("纯文本弹出框")
31.              .width(96)
32.              .height(40)
33.              .onClick(() =\> {
34.                this.dialogControllerConfirm.open()
35.              })
36.          }.margin({ bottom: 300 })
37.        }.align(Alignment.Bottom)
38.        .width('100%').height('100%')
39.      }
40.      .backgroundImageSize({ width: '100%', height: '100%' })
41.      .height('100%')
42.    }
43.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114527.97306497884467413962103893724107:50001231000000:2800:7AA28147A53453BAAC39CD72FB580DA77A1BC92B39C2671E99487653A6AEBE41.png?needInitFileName=true?needInitFileName=true)

### 示例5

弹出进度条弹出框。

1.  import { LoadingDialog } from '@kit.ArkUI'

3.  @Entry
4.  @Component
5.  struct Index {
6.    dialogControllerProgress: CustomDialogController = new CustomDialogController({
7.      builder: LoadingDialog({
8.        content: '文本文本文本文本文本...',
9.      }),
10.    })

12.    build() {
13.      Row() {
14.        Stack() {
15.          Column() {
16.            Button("进度条弹出框")
17.              .width(96)
18.              .height(40)
19.              .onClick(() =\> {
20.                this.dialogControllerProgress.open()
21.              })
22.          }.margin({ bottom: 300 })
23.        }.align(Alignment.Bottom)
24.        .width('100%').height('100%')
25.      }
26.      .backgroundImageSize({ width: '100%', height: '100%' })
27.      .height('100%')
28.    }
29.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114527.19195671540021832279814591663790:50001231000000:2800:C7FC25C8AE47EFE2622093AF455E9E081F2D1112E80DA777B77C3773F88E5380.png?needInitFileName=true?needInitFileName=true)

### 示例6

弹出主题风格弹框。

1.  import { CustomColors, CustomTheme, LoadingDialog } from '@kit.ArkUI'

3.  class CustomThemeImpl implements CustomTheme {
4.    colors?: CustomColors;

6.    constructor(colors: CustomColors) {
7.      this.colors = colors;
8.    }
9.  }

11.  class CustomThemeColors implements CustomColors {
12.    fontPrimary = '#ffd0a300';
13.    iconSecondary = '#ffd000cd';
14.  }

16.  @Entry
17.  @Component
18.  struct Index {
19.    @State customTheme: CustomTheme = new CustomThemeImpl(new CustomThemeColors());
20.    dialogController: CustomDialogController = new CustomDialogController({
21.      builder: LoadingDialog({
22.        content: 'text',
23.        theme: this.customTheme,
24.      })
25.    });

27.    build() {
28.      Row() {
29.        Stack() {
30.          Column() {
31.            Button('dialog')
32.              .width(96)
33.              .height(40)
34.              .onClick(() =\> {
35.                this.dialogController.open();
36.              })
37.          }.margin({ bottom: 300 })
38.        }.align(Alignment.Bottom)
39.        .width('100%').height('100%')
40.      }
41.      .backgroundImageSize({ width: '100%', height: '100%' })
42.      .height('100%')
43.    }
44.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114527.60940861669427558675087385432520:50001231000000:2800:675A3A4F3410CDA36B33C5B6A55426095778AE1E10FAC4E78C7D220BE3416072.png?needInitFileName=true?needInitFileName=true)

### 示例7

弹出支持自定义内容弹出框。

1.  import { CustomContentDialog } from '@kit.ArkUI'

3.  @Entry
4.  @Component
5.  struct Index {
6.    dialogController: CustomDialogController = new CustomDialogController({
7.      builder: CustomContentDialog({
8.        primaryTitle: '标题',
9.        secondaryTitle: '辅助文本',
10.        contentBuilder: () =\> {
11.          this.buildContent();
12.        },
13.        buttons: \[{ value: '按钮1', buttonStyle: ButtonStyleMode.TEXTUAL, action: () =\> {
14.          console.info('Callback when the button is clicked')
15.        } }, { value: '按钮2', buttonStyle: ButtonStyleMode.TEXTUAL, role: ButtonRole.ERROR }\],
16.      }),
17.    });

19.    build() {
20.      Column() {
21.        Button("支持自定义内容弹出框")
22.          .onClick(() =\> {
23.            this.dialogController.open()
24.          })
25.      }
26.      .width('100%')
27.      .height('100%')
28.      .justifyContent(FlexAlign.Center)
29.    }

31.    @Builder
32.    buildContent(): void {
33.      Column() {
34.        Text('内容区')
35.      }
36.    }
37.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114527.37531692561846340102525973793622:50001231000000:2800:81632D40C3757DE9DAD9FCE88FC9A2B37B927ABC5748191773AF20924452D264.png?needInitFileName=true?needInitFileName=true)
