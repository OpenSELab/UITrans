{
    "description": "文本滑动选择器弹窗 (TextPickerDialog) 是一个全局UI方法，用于在弹窗上展示文本选择器。",
    "details": "该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。本模块功能依赖UI的执行上下文，不可在UI上下文不明确的地方使用，参见UIContext说明。从API version 10开始，可以通过使用UIContext中的showTextPickerDialog来明确UI的执行上下文。",
    "interfaces": [
        {
            "description": "static show(options?: TextPickerDialogOptions)",
            "params": {
                "options": {
                    "type": "TextPickerDialogOptions",
                    "required": false,
                    "description": "配置文本选择器弹窗的参数。"
                }
            }
        }
    ],
    "attributes": {
        "TextPickerDialogOptions": {
            "description": "文本选择器弹窗的参数继承自TextPickerOptions。",
            "params": {
                "defaultPickerItemHeight": {
                    "type": [
                        "number",
                        "string"
                    ],
                    "required": false,
                    "description": "设置选择器中选项的高度。",
                    "default": "选中项56vp，非选中项36vp。设置该参数后，选中项与非选中项的高度均为所设置的值。"
                },
                "disappearTextStyle10+": {
                    "type": "PickerTextStyle",
                    "required": false,
                    "description": "设置所有选项中最上和最下两个选项的文本颜色、字号、字体粗细。"
                },
                "textStyle10+": {
                    "type": "PickerTextStyle",
                    "required": false,
                    "description": "设置所有选项中除了最上、最下及选中项以外的文本颜色、字号、字体粗细。"
                },
                "selectedTextStyle10+": {
                    "type": "PickerTextStyle",
                    "required": false,
                    "description": "设置选中项的文本颜色、字号、字体粗细。"
                },
                "acceptButtonStyle12+": {
                    "type": "PickerDialogButtonStyle",
                    "required": false,
                    "description": "设置确认按钮显示样式、样式和重要程度、角色、背景色、圆角、文本颜色、字号、字体粗细、字体样式、字体列表、按钮是否默认响应Enter键。"
                },
                "cancelButtonStyle12+": {
                    "type": "PickerDialogButtonStyle",
                    "required": false,
                    "description": "设置取消按钮显示样式、样式和重要程度、角色、背景色、圆角、文本颜色、字号、字体粗细、字体样式、字体列表、按钮是否默认响应Enter键。"
                },
                "canLoop10+": {
                    "type": "boolean",
                    "required": false,
                    "description": "设置是否可循环滚动。",
                    "default": true
                },
                "alignment10+": {
                    "type": "DialogAlignment",
                    "required": false,
                    "description": "弹窗在竖直方向上的对齐方式。"
                },
                "offset10+": {
                    "type": "Offset",
                    "required": false,
                    "description": "弹窗相对alignment所在位置的偏移量。"
                },
                "maskRect10+": {
                    "type": "Rectangle",
                    "required": false,
                    "description": "弹窗遮蔽层区域，在遮蔽层区域内的事件不透传，在遮蔽层区域外的事件透传。"
                },
                "onAccept": {
                    "type": "function",
                    "required": false,
                    "description": "点击弹窗中的“确定”按钮时触发该回调。"
                },
                "onCancel": {
                    "type": "function",
                    "required": false,
                    "description": "点击弹窗中的“取消”按钮时触发该回调。"
                },
                "onChange": {
                    "type": "function",
                    "required": false,
                    "description": "滑动弹窗中的选择器使当前选中项改变时触发该回调。"
                },
                "backgroundColor11+": {
                    "type": "ResourceColor",
                    "required": false,
                    "description": "弹窗背板颜色。"
                },
                "backgroundBlurStyle11+": {
                    "type": "BlurStyle",
                    "required": false,
                    "description": "弹窗背板模糊材质。"
                },
                "onDidAppear12+": {
                    "type": "function",
                    "required": false,
                    "description": "弹窗弹出时的事件回调。"
                },
                "onDidDisappear12+": {
                    "type": "function",
                    "required": false,
                    "description": "弹窗消失时的事件回调。"
                },
                "onWillAppear12+": {
                    "type": "function",
                    "required": false,
                    "description": "弹窗显示动效前的事件回调。"
                },
                "onWillDisappear12+": {
                    "type": "function",
                    "required": false,
                    "description": "弹窗退出动效前的事件回调。"
                },
                "shadow12+": {
                    "type": [
                        "ShadowOptions",
                        "ShadowStyle"
                    ],
                    "required": false,
                    "description": "设置弹窗背板的阴影。"
                }
            }
        }
    },
    "events": {
        "onAccept": {
            "description": "点击弹窗中的“确定”按钮时触发该回调。",
            "params": {
                "value": {
                    "type": "TextPickerResult",
                    "required": true,
                    "description": "选中项的文本内容和索引值。"
                }
            }
        },
        "onCancel": {
            "description": "点击弹窗中的“取消”按钮时触发该回调。",
            "params": {}
        },
        "onChange": {
            "description": "滑动弹窗中的选择器使当前选中项改变时触发该回调。",
            "params": {
                "value": {
                    "type": "TextPickerResult",
                    "required": true,
                    "description": "选中项的文本内容和索引值。"
                }
            }
        },
        "onDidAppear12+": {
            "description": "弹窗弹出时的事件回调。",
            "params": {}
        },
        "onDidDisappear12+": {
            "description": "弹窗消失时的事件回调。",
            "params": {}
        },
        "onWillAppear12+": {
            "description": "弹窗显示动效前的事件回调。",
            "params": {}
        },
        "onWillDisappear12+": {
            "description": "弹窗退出动效前的事件回调。",
            "params": {}
        }
    },
    "rules": [
        "该组件从API Version 8开始支持。",
        "本模块功能依赖UI的执行上下文，不可在UI上下文不明确的地方使用。",
        "从API version 10开始，可以通过使用UIContext中的showTextPickerDialog来明确UI的执行上下文。"
    ],
    "examples": [
        {
            "description": "该组件展示了一个带有自定义样式的按钮，点击按钮后会弹出一个文本选择对话框（TextPickerDialog）。布局宽度占据整个屏幕，高度设为 100%，内边距为 20vp。组件的垂直方向上被分为一个按钮，按钮的文本内容为“TextPickerDialog:”加上当前选中的文本值。按钮的点击事件会触发文本选择对话框的显示，对话框中包含一个文本选择器，用户可以通过滚动选择不同的文本项。\n\n按钮的样式包括边距、点击事件等属性。文本选择对话框的样式包括文本颜色、字体大小、字体粗细等属性，支持自定义背景颜色、边框圆角等样式。对话框的功能包括点击确定按钮和取消按钮的事件处理，用户可以通过点击确定按钮选择文本项，并通过点击取消按钮关闭对话框。\n\n整个布局通过 Row 和 Column 组件实现，确保按钮在垂直方向上有序排列，确保界面整洁美观。",
            "code": "// xxx.ets\n@Entry\n@Component\nstruct TextPickerDialogExample {\n  // 定义一个私有变量 select，用于存储当前选中的索引或索引数组\n  private select: number | number[] = 0\n  // 定义一个私有数组 fruits，用于存储文本选择器的选项\n  private fruits: string[] = ['apple1', 'orange2', 'peach3', 'grape4', 'banana5']\n  // 定义一个状态变量 v，用于存储当前选中的文本值\n  @State v: string = '';\n\n  build() {\n    Row() {\n      Column() {\n        // 创建一个按钮，按钮的文本内容为“TextPickerDialog:”加上当前选中的文本值\n        Button(\"TextPickerDialog:\" + this.v)\n          .margin(20) // 设置按钮的边距为 20vp\n          .onClick(() => {\n            // 点击按钮时显示文本选择对话框\n            TextPickerDialog.show({\n              range: this.fruits, // 设置文本选择器的选项范围\n              selected: this.select, // 设置当前选中的索引\n              disappearTextStyle: {color: Color.Red, font: {size: 15, weight: FontWeight.Lighter}}, // 设置对话框消失时的文本样式\n              textStyle: {color: Color.Black, font: {size: 20, weight: FontWeight.Normal}}, // 设置对话框中文本的默认样式\n              selectedTextStyle: {color: Color.Blue, font: {size: 30, weight: FontWeight.Bolder}}, // 设置选中项的文本样式\n              acceptButtonStyle: { type: ButtonType.Normal, style: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL, fontColor: Color.Red, // 设置确定按钮的样式\n                fontSize: '26fp', fontWeight: FontWeight.Bolder, fontStyle: FontStyle.Normal, fontFamily: 'sans-serif', backgroundColor:'#80834511',\n                borderRadius: 20 },\n              cancelButtonStyle: { type: ButtonType.Normal, style: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL, fontColor: Color.Blue, // 设置取消按钮的样式\n                fontSize: '16fp', fontWeight: FontWeight.Normal, fontStyle: FontStyle.Italic, fontFamily: 'sans-serif', backgroundColor:'#50182431',\n                borderRadius: 10 },\n              onAccept: (value: TextPickerResult) => {\n                // 设置 select 为按下确定按钮时候的选中项 index，这样当弹窗再次弹出时显示选中的是上一次确定的选项\n                this.select = value.index\n                console.log(this.select + '')\n                // 点击确定后，被选到的文本数据展示到页面\n                this.v = value.value as string\n                console.info(\"TextPickerDialog:onAccept()\" + JSON.stringify(value))\n              },\n              onCancel: () => {\n                console.info(\"TextPickerDialog:onCancel()\")\n              },\n              onChange: (value: TextPickerResult) => {\n                console.info(\"TextPickerDialog:onChange()\" + JSON.stringify(value))\n              },\n              onDidAppear: () => {\n                console.info(\"TextPickerDialog:onDidAppear()\")\n              },\n              onDidDisappear: () => {\n                console.info(\"TextPickerDialog:onDidDisappear()\")\n              },\n              onWillAppear: () => {\n                console.info(\"TextPickerDialog:onWillAppear()\")\n              },\n              onWillDisappear: () => {\n                console.info(\"TextPickerDialog:onWillDisappear()\")\n              }\n            })\n          })\n      }.width('100%') // 设置 Column 的宽度为 100%\n    }.height('100%') // 设置 Row 的高度为 100%\n  }\n}"
        },
        {
            "description": "该组件展示了一个带有文本选择器对话框（TextPickerDialog）的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上包含一个按钮，按钮的文本显示当前选中的水果名称。按钮的点击事件会触发文本选择器对话框的显示。\n\n按钮的样式包括边距为 20vp，宽度占据父容器的 100%。按钮的文本颜色和字体大小未明确设置，使用默认值。按钮的功能包括点击事件，点击后会弹出文本选择器对话框。\n\n文本选择器对话框的样式包括：\n- 范围（range）：显示的水果名称数组。\n- 选中项（selected）：初始选中的水果索引。\n- 消失文本样式（disappearTextStyle）：对话框消失时文本的颜色为红色，字体大小为 15，字体粗细为较轻。\n- 文本样式（textStyle）：对话框中文本的颜色为黑色，字体大小为 20，字体粗细为正常。\n- 选中文本样式（selectedTextStyle）：选中项文本的颜色为蓝色，字体大小为 30，字体粗细为较粗。\n\n对话框的功能包括：\n- 点击确定按钮（onAccept）：设置选中项索引，并将选中的水果名称显示在按钮文本中。\n- 点击取消按钮（onCancel）：仅记录日志。\n- 选中项变化（onChange）：记录日志。\n- 对话框显示（onDidAppear）：记录日志。\n- 对话框消失（onDidDisappear）：记录日志。\n- 对话框即将显示（onWillAppear）：记录日志。\n- 对话框即将消失（onWillDisappear）：记录日志。\n\n整个布局通过 Row 和 Column 组件实现，确保按钮在垂直方向上居中对齐。",
            "code": "// xxx.ets\n@Entry\n@Component\nstruct TextPickerDialogExample {\n  // 选中的水果索引，初始值为 0\n  private select: number | number[] = 0\n  // 水果名称数组\n  private fruits: string[] = ['apple1', 'orange2', 'peach3', 'grape4', 'banana5']\n  // 当前选中的水果名称，初始值为空字符串\n  @State v: string = '';\n\n  build() {\n    Row() {\n      Column() {\n        // 按钮，显示当前选中的水果名称\n        Button(\"TextPickerDialog:\" + this.v)\n          .margin(20) // 按钮边距为 20vp\n          .onClick(() => {\n            // 点击按钮时显示文本选择器对话框\n            TextPickerDialog.show({\n              range: this.fruits, // 对话框中显示的水果名称数组\n              selected: this.select, // 初始选中的水果索引\n              disappearTextStyle: {color: Color.Red, font: {size: 15, weight: FontWeight.Lighter}}, // 对话框消失时文本样式\n              textStyle: {color: Color.Black, font: {size: 20, weight: FontWeight.Normal}}, // 对话框中文本样式\n              selectedTextStyle: {color: Color.Blue, font: {size: 30, weight: FontWeight.Bolder}}, // 选中项文本样式\n              onAccept: (value: TextPickerResult) => {\n                // 点击确定按钮时，设置选中项索引，并将选中的水果名称显示在按钮文本中\n                this.select = value.index\n                console.log(this.select + '')\n                this.v = value.value as string\n                console.info(\"TextPickerDialog:onAccept()\" + JSON.stringify(value))\n              },\n              onCancel: () => {\n                // 点击取消按钮时，记录日志\n                console.info(\"TextPickerDialog:onCancel()\")\n              },\n              onChange: (value: TextPickerResult) => {\n                // 选中项变化时，记录日志\n                console.info(\"TextPickerDialog:onChange()\" + JSON.stringify(value))\n              },\n              onDidAppear: () => {\n                // 对话框显示时，记录日志\n                console.info(\"TextPickerDialog:onDidAppear()\")\n              },\n              onDidDisappear: () => {\n                // 对话框消失时，记录日志\n                console.info(\"TextPickerDialog:onDidDisappear()\")\n              },\n              onWillAppear: () => {\n                // 对话框即将显示时，记录日志\n                console.info(\"TextPickerDialog:onWillAppear()\")\n              },\n              onWillDisappear: () => {\n                // 对话框即将消失时，记录日志\n                console.info(\"TextPickerDialog:onWillDisappear()\")\n              }\n            })\n          })\n      }.width('100%') // 按钮宽度占据父容器的 100%\n    }.height('100%') // 布局高度占据整个屏幕\n  }\n}"
        }
    ],
    "is_common_attrs": true
}