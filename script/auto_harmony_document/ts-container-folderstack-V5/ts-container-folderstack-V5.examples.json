[
    {
        "description": "该组件通过FolderStack布局实现了一个分屏显示的界面，上半屏显示视频区域，下半屏堆叠显示视频标题和视频控制栏。布局宽度占据整个屏幕，高度设为100%，背景颜色为粉色。组件的垂直方向上被分为两个部分，上半部分包含一个视频区域，下半部分包含视频标题和视频控制栏。每个部分的组件以垂直布局方式排列，组件之间的间距均匀分布，且对齐方式为居中对齐。\n\n视频区域的样式包括背景颜色为粉色，宽度和高度均为100%，字体大小为25，文本居中对齐。视频标题和视频控制栏的样式包括背景颜色为红色，宽度和高度均为100%，字体大小为25，文本居中对齐。视频标题和视频控制栏的排列方式为垂直布局，且对齐方式分别为顶部对齐和底部对齐。\n\nFolderStack组件的功能包括折叠状态改变时的回调、悬停状态改变时的回调、是否启动动效、是否自动旋转等。FolderStack组件的背景颜色为黄色，宽度和高度均为100%，边框宽度为1。\n\n整个布局通过FolderStack布局保证视频区域和视频标题、视频控制栏在垂直方向上有序排列，确保界面整洁美观。",
        "code": "@Entry\n@Component\nstruct Index {\n  @State len_wid: number = 480\n  @State w: string = \"40%\"\n\n  build() {\n    Column() {\n      // upperItems将所需要的悬停到上半屏的id放入upperItems传入，其余组件会堆叠在下半屏区域\n      FolderStack({ upperItems: [\"upperitemsId\"] }) {\n        // 此Column会自动上移到上半屏\n        Column() {\n          Text(\"video zone\")\n            .height(\"100%\")\n            .width(\"100%\")\n            .textAlign(TextAlign.Center)\n            .fontSize(25)\n        }\n        .backgroundColor(Color.Pink)\n        .width(\"100%\")\n        .height(\"100%\")\n        .id(\"upperitemsId\")\n\n        // 下列两个Column堆叠在下半屏区域\n        Column() {\n          Text(\"video title\")\n            .width(\"100%\")\n            .height(50)\n            .textAlign(TextAlign.Center)\n            .backgroundColor(Color.Red)\n            .fontSize(25)\n        }\n        .width(\"100%\")\n        .height(\"100%\")\n        .justifyContent(FlexAlign.Start)\n\n        Column() {\n          Text(\"video bar\")\n            .width(\"100%\")\n            .height(50)\n            .textAlign(TextAlign.Center)\n            .backgroundColor(Color.Red)\n            .fontSize(25)\n        }\n        .width(\"100%\")\n        .height(\"100%\")\n        .justifyContent(FlexAlign.End)\n      }\n      .backgroundColor(Color.Yellow)\n      // 是否启动动效\n      .enableAnimation(true)\n      // 是否自动旋转\n      .autoHalfFold(true)\n      // folderStack回调 当折叠状态改变时回调\n      .onFolderStateChange((msg) => {\n        if (msg.foldStatus === FoldStatus.FOLD_STATUS_EXPANDED) {\n          console.info(\"The device is currently in the expanded state\")\n        } else if (msg.foldStatus === FoldStatus.FOLD_STATUS_HALF_FOLDED) {\n          console.info(\"The device is currently in the half folded state\")\n        } else {\n          // .............\n        }\n      })\n      // hoverStatusChange回调 当悬停状态改变时回调\n      .onHoverStatusChange((msg) => {\n        console.log('this foldStatus:' + msg.foldStatus);\n        console.log('this isHoverMode:' + msg.isHoverMode);\n        console.log('this appRotation:' + msg.appRotation);\n        console.log('this windowStatusType:' + msg.windowStatusType);\n      })\n      // folderStack如果不撑满页面全屏，作为普通Stack使用\n      .alignContent(Alignment.Bottom)\n      .height(\"100%\")\n      .width(\"100%\")\n      .borderWidth(1)\n      .backgroundColor(Color.Yellow)\n    }\n    .height(\"100%\")\n    .width(\"100%\")\n    .borderWidth(1)\n    .backgroundColor(Color.Pink)\n    .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM])\n  }\n}"
    }
]