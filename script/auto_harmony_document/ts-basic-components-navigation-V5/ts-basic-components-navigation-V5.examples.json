[
    {
        "description": "该示例演示了在嵌套Navigation场景下，如何获取父NavPathStack并进行导航操作。整体布局采用全屏的Navigation组件，内部嵌套了一个子Navigation组件。父Navigation组件的背景颜色为绿色，子Navigation组件的背景颜色为橙色。子Navigation组件内部包含一个按钮，点击该按钮会获取父Navigation的NavPathStack，并将其导航路径推送到父Navigation中。\n\n布局属性：\n- 父Navigation组件和子Navigation组件的宽度均为100%，高度均为100%，占据整个屏幕。\n- 子Navigation组件的宽度为80%，高度为80%，位于父Navigation组件的中心位置。\n\n组件的样式和外观：\n- 父Navigation组件的背景颜色为绿色（Color.Green）。\n- 子Navigation组件的背景颜色为橙色（Color.Orange），并且设置了圆角裁剪（clip: true）。\n- 按钮的宽度为80%，高度为40vp，边距为20vp，背景颜色为默认的按钮颜色。\n\n组件的排列和嵌套关系：\n- 父Navigation组件内部嵌套了一个Stack组件，Stack组件的子元素为子Navigation组件。\n- 子Navigation组件内部包含一个按钮，按钮位于子Navigation组件的中心位置。\n\n组件的功能和交互：\n- 点击按钮会触发onClick事件，事件处理函数中通过调用childNavStack.getParent()方法获取父Navigation的NavPathStack，并调用pushPath方法将导航路径推送到父Navigation中。",
        "code": "@Entry\n@Component\nstruct NavigationExample1 {\n  @State childNavStack: NavPathStack = new NavPathStack(); // 定义一个状态变量childNavStack，用于存储子Navigation的NavPathStack\n\n  build() {\n    Navigation() { // 创建父Navigation组件\n      Stack({alignContent: Alignment.Center}) { // 创建一个Stack组件，内容对齐方式为居中\n        Navigation(this.childNavStack) { // 创建子Navigation组件，并传入childNavStack\n          Button('push Path to parent Navigation', { stateEffect: true, type: ButtonType.Capsule }) // 创建一个按钮，按钮文本为'push Path to parent Navigation'，按钮类型为胶囊按钮\n            .width('80%') // 设置按钮宽度为80%\n            .height(40) // 设置按钮高度为40vp\n            .margin(20) // 设置按钮边距为20vp\n            .onClick(() => { // 设置按钮点击事件\n              let parentStack = this.childNavStack.getParent(); // 获取父Navigation的NavPathStack\n              parentStack?.pushPath({ name: \"pageOne\" }); // 将导航路径推送到父Navigation中\n            })\n        }\n        .clip(true) // 设置子Navigation组件的圆角裁剪\n        .backgroundColor(Color.Orange) // 设置子Navigation组件的背景颜色为橙色\n        .width('80%') // 设置子Navigation组件的宽度为80%\n        .height('80%') // 设置子Navigation组件的高度为80%\n        .title('ChildNavigation') // 设置子Navigation组件的标题为'ChildNavigation'\n      }\n      .width('100%') // 设置Stack组件的宽度为100%\n      .height('100%') // 设置Stack组件的高度为100%\n    }\n    .backgroundColor(Color.Green) // 设置父Navigation组件的背景颜色为绿色\n    .width('100%') // 设置父Navigation组件的宽度为100%\n    .height('100%') // 设置父Navigation组件的高度为100%\n    .title('ParentNavigation') // 设置父Navigation组件的标题为'ParentNavigation'\n  }\n}\n\n@Builder\nexport function PageOneBuilder(name: string) { // 定义一个Builder函数，用于构建PageOne页面\n  NavDestination() { // 创建一个NavDestination组件\n    Text(\"this is \" + name) // 创建一个Text组件，显示文本为'this is ' + name\n  }\n  .title(name) // 设置NavDestination组件的标题为name\n}\n\n{\n  \"routerMap\": [ // 定义路由映射\n    {\n      \"name\": \"pageOne\", // 路由名称\n      \"pageSourceFile\": \"src/main/ets/pages/PageOne.ets\", // 页面源文件路径\n      \"buildFunction\": \"PageOneBuilder\", // 页面构建函数\n      \"data\": { // 页面数据\n        \"description\": \"this is pageOne\" // 页面描述\n      }\n    }\n  ]\n}"
    },
    {
        "description": "该示例演示了NavDestination的生命周期时序，并通过Navigation组件实现了页面的导航功能。布局宽度占据整个屏幕，高度设为100%，内边距为20vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组按钮。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Column组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过Column布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
        "code": "// 定义一个Builder函数，用于构建PageOne页面\n@Builder\nexport function PageOneBuilder(name: string, param: Object) {\n  PageOneComponent()\n}\n\n// 定义PageOneComponent组件\n@Component\nstruct PageOneComponent {\n  // 定义一个私有变量stack，用于存储导航路径栈\n  private stack: NavPathStack | null = null;\n  // 定义一个状态变量eventStr，用于存储生命周期事件的字符串\n  @State eventStr: string = \"\";\n\n  // 构建PageOneComponent的UI\n  build() {\n    NavDestination() {\n      Column() {\n        // 显示生命周期事件的字符串\n        Text(\"event: \" + this.eventStr)\n        // 定义一个按钮，点击后将页面推入导航栈\n        Button('pushPath', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            if (this.stack) {\n              this.stack.pushPath({name: \"pageOne\"});\n            }\n          })\n        // 定义一个按钮，点击后将页面从导航栈中弹出\n        Button('pop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.stack?.pop()\n          })\n      }\n      .width('100%')\n      .height('100%')\n    }\n    .title('pageOne')\n    // 生命周期事件处理函数\n    .onAppear(() => { this.eventStr += \"<onAppear>\"; })\n    .onDisAppear(() => { this.eventStr += \"<onDisAppear>\"; })\n    .onShown(() => { this.eventStr += \"<onShown>\"; })\n    .onHidden(() => { this.eventStr += \"<onHidden>\"; })\n    .onWillAppear(() => { this.eventStr += \"<onWillAppear>\"; })\n    .onWillDisappear(() => { this.eventStr += \"<onWillDisappear>\"; })\n    .onWillShow(() => { this.eventStr += \"<onWillShow>\"; })\n    .onWillHide(() => { this.eventStr += \"<onWillHide>\"; })\n    // 页面准备就绪时的处理函数\n    .onReady((ctx: NavDestinationContext) => {\n      try {\n        this.eventStr += \"<onReady>\";\n        this.stack = ctx.pathStack;\n      } catch (e) {\n        console.log(`testTag onReady catch exception: ${JSON.stringify(e)}`)\n      }\n    })\n  }\n}\n\n// 定义NavigationExample3组件\n@Entry\n@Component\nstruct NavigationExample3 {\n  // 定义一个私有变量stack，用于存储导航路径栈\n  private stack : NavPathStack = new NavPathStack();\n\n  // 构建NavigationExample3的UI\n  build() {\n    Navigation(this.stack) {\n      Stack({alignContent: Alignment.Center}) {\n        // 定义一个按钮，点击后将页面推入导航栈\n        Button('pushPath', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.stack.pushPath({ name: \"pageOne\" })\n          })\n      }\n      .width('100%')\n      .height('100%')\n    }\n    .width('100%')\n    .height('100%')\n    .title('Navigation')\n  }\n}\n\n// 定义路由映射\n{\n  \"routerMap\": [\n    {\n      \"name\": \"pageOne\",\n      \"pageSourceFile\": \"src/main/ets/pages/Index.ets\",\n      \"buildFunction\": \"PageOneBuilder\",\n      \"data\": {\n        \"description\": \"this is pageOne\"\n      }\n    }\n  ]\n}"
    },
    {
        "description": "该示例通过Navigation组件实现了一个带有标题栏的STACK布局效果。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为两个主要部分：Navigation标题栏和内容区域。Navigation标题栏包含主标题和副标题，并支持两种样式：STANDARD和STACK。内容区域包含一个可滚动的列布局，列布局中包含一个图片、两个按钮和一个列表。按钮用于切换标题栏的样式，列表展示了从0到11的数字。\n\n布局属性：\n- 整个布局的宽度为100%，高度为100%。\n- Navigation标题栏的背景模糊样式为COMPONENT_THICK。\n- 内容区域的背景颜色为#F1F3F5。\n- 图片的高度为138vp，宽度为100%。\n- 按钮的高度为50vp，宽度为100%，按钮之间的间距为12vp。\n- 列表项的高度为100vp，宽度为100%，背景颜色为橙色，边框圆角为10vp，字体大小为16，文本居中对齐。\n\n组件的样式和外观：\n- Navigation标题栏的主标题为'NavTitle'，副标题为'subtitle'。\n- 图片的资源名为$r('app.media.image_1')。\n- 按钮的文本分别为'BarStyle.STANDARD'和'BarStyle.STACK'。\n- 列表项的文本颜色为橙色，背景颜色为橙色。\n\n组件的排列和嵌套关系：\n- 整个布局通过Column组件进行垂直排列。\n- Navigation组件嵌套在Column组件中，内容区域嵌套在Navigation组件中。\n- 内容区域通过Column组件进行垂直排列，包含一个图片、两个按钮和一个列表。\n- 列表通过ForEach组件进行动态生成，每个列表项通过ListItem组件进行展示。\n\n组件的功能和交互：\n- 点击'BarStyle.STANDARD'按钮时，标题栏样式切换为STANDARD。\n- 点击'BarStyle.STACK'按钮时，标题栏样式切换为STACK。\n- 列表项展示了从0到11的数字，每个数字通过Text组件进行展示。",
        "code": "@Entry\n@Component\nstruct NavigationExample {\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]; // 列表数据源\n  private scrollerForScroll: Scroller = new Scroller(); // 用于控制滚动行为的Scroller对象\n  @State barStyle: BarStyle = BarStyle.STANDARD; // 标题栏样式状态，初始为STANDARD\n\n  build() {\n    Column() {\n      Navigation() {\n        Column() {\n          Scroll(this.scrollerForScroll) { // 可滚动的列布局\n            Column() {\n              Image($r('app.media.image_1')) // 图片组件，资源名为$r('app.media.image_1')\n                .height(138) // 图片高度为138vp\n                .width('100%') // 图片宽度为100%\n              Button('BarStyle.STANDARD') // 按钮组件，文本为'BarStyle.STANDARD'\n                .height('50vp') // 按钮高度为50vp\n                .onClick(() => { // 按钮点击事件\n                  this.barStyle = BarStyle.STANDARD; // 切换标题栏样式为STANDARD\n                })\n              Button('BarStyle.STACK') // 按钮组件，文本为'BarStyle.STACK'\n                .height('50vp') // 按钮高度为50vp\n                .margin({ top: 12 }) // 按钮顶部间距为12vp\n                .onClick(() => { // 按钮点击事件\n                  this.barStyle = BarStyle.STACK; // 切换标题栏样式为STACK\n                })\n\n              ForEach(this.arr, (item: number) => { // 动态生成列表项\n                ListItem() {\n                  Text('' + item) // 文本组件，显示列表项的数字\n                    .width('100%') // 文本宽度为100%\n                    .height(100) // 文本高度为100vp\n                    .fontSize(16) // 字体大小为16\n                    .textAlign(TextAlign.Center) // 文本居中对齐\n                    .borderRadius(10) // 边框圆角为10vp\n                    .backgroundColor(Color.Orange) // 背景颜色为橙色\n                    .margin({ top: 12 }) // 顶部间距为12vp\n                }\n              }, (item: string) => item) // 列表项的唯一标识符\n            }\n          }\n        }\n        .width('100%') // 内容区域宽度为100%\n        .height('100%') // 内容区域高度为100%\n        .backgroundColor(0xDCDCDC) // 内容区域背景颜色为0xDCDCDC\n      }\n      .title(\n        {\n          main: 'NavTitle', // 主标题\n          sub: 'subtitle' // 副标题\n        },\n        {\n          backgroundBlurStyle: BlurStyle.COMPONENT_THICK, // 背景模糊样式为COMPONENT_THICK\n          barStyle: this.barStyle, // 标题栏样式，根据状态变化\n        }\n      )\n      .titleMode(NavigationTitleMode.Free) // 标题模式为Free\n      .hideTitleBar(false) // 不隐藏标题栏\n    }.width('100%').height('100%').backgroundColor('#F1F3F5') // 整个布局的宽度、高度和背景颜色\n  }\n}"
    },
    {
        "description": "该示例主要演示了在鸿蒙ArkUI中使用NavPathStack和NavDestination组件实现页面栈操作的功能。具体包括以下几点：\n1. NavPathStack无需声明为状态变量，也可以实现页面栈操作功能。\n2. NavDestination通过onReady事件能够拿到对应的NavPathInfo和所属的NavPathStack。\n\n布局方面，示例中使用了Column和Stack布局组件来组织页面内容。Column组件用于垂直排列子组件，Stack组件用于堆叠子组件。按钮组件用于触发页面栈的push和pop操作。\n\n样式方面，按钮组件设置了宽度、高度、边距等属性，以确保按钮在页面中的显示效果。按钮的样式包括胶囊形状和启用状态效果。\n\n功能方面，按钮组件绑定了点击事件，用于触发页面栈的push和pop操作。通过NavDestination的onReady事件，可以获取当前页面的NavPathInfo和所属的NavPathStack，从而实现页面栈的管理。",
        "code": "// 定义一个PageParam类，用于传递页面参数\nclass PageParam {\n  constructor(num_: number) {\n    this.num = num_;\n  }\n  num: number = 0; // 页面参数，初始值为0\n}\n\n// 定义一个Builder函数，用于构建PageOne组件\n@Builder\nexport function PageOneBuilder(name: string, param: Object) {\n  PageOne() // 调用PageOne组件\n}\n\n// 定义PageOne组件\n@Component\nstruct PageOne {\n  private stack: NavPathStack | null = null; // 页面栈对象，初始值为null\n  private name: string = \"\"; // 页面名称，初始值为空字符串\n  private paramNum: number = 0; // 页面参数，初始值为0\n\n  build() {\n    NavDestination() {\n      Column() {\n        // 显示当前页面的名称和参数\n        Text(\"NavPathInfo: name: \" + this.name + \", paramNum: \" + this.paramNum)\n        // 定义一个按钮，用于触发页面栈的push操作\n        Button('pushPath', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%') // 按钮宽度为父容器的80%\n          .height(40) // 按钮高度为40vp\n          .margin(20) // 按钮上下左右边距为20vp\n          .onClick(() => {\n            if (this.stack) {\n              let p = new PageParam(this.paramNum + 1); // 创建一个新的PageParam对象，参数值为当前参数值加1\n              this.stack.pushPath({name: \"pageOne\", param: p}); // 将新页面推入页面栈\n            }\n          })\n        // 定义一个按钮，用于触发页面栈的pop操作\n        Button('pop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%') // 按钮宽度为父容器的80%\n          .height(40) // 按钮高度为40vp\n          .margin(20) // 按钮上下左右边距为20vp\n          .onClick(() => {\n            this.stack?.pop() // 将当前页面从页面栈中弹出\n          })\n      }\n      .width('100%') // Column组件宽度为父容器的100%\n      .height('100%') // Column组件高度为父容器的100%\n    }\n    .title('pageOne') // 设置NavDestination的标题为\"pageOne\"\n    .onReady((ctx: NavDestinationContext) => {\n      try {\n        this.name = ctx?.pathInfo?.name; // 获取当前页面的名称\n        this.paramNum = (ctx?.pathInfo?.param as PageParam)?.num; // 获取当前页面的参数\n        this.stack = ctx.pathStack; // 获取当前页面的页面栈对象\n      } catch (e) {\n        console.log(`testTag onReady catch exception: ${JSON.stringify(e)}`) // 捕获并记录onReady事件中的异常\n      }\n    })\n  }\n}\n\n// 定义NavigationExample2组件\n@Entry\n@Component\nstruct NavigationExample2 {\n  private stack : NavPathStack = new NavPathStack(); // 创建一个NavPathStack对象\n\n  build() {\n    Navigation(this.stack) {\n      Stack({alignContent: Alignment.Center}) {\n        // 定义一个按钮，用于触发页面栈的push操作\n        Button('pushPath', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%') // 按钮宽度为父容器的80%\n          .height(40) // 按钮高度为40vp\n          .margin(20) // 按钮上下左右边距为20vp\n          .onClick(() => {\n            let p = new PageParam(1); // 创建一个新的PageParam对象，参数值为1\n            this.stack.pushPath({ name: \"pageOne\", param: p }) // 将新页面推入页面栈\n          })\n      }\n      .width('100%') // Stack组件宽度为父容器的100%\n      .height('100%') // Stack组件高度为父容器的100%\n    }\n    .width('100%') // Navigation组件宽度为父容器的100%\n    .height('100%') // Navigation组件高度为父容器的100%\n    .title('Navigation') // 设置Navigation的标题为\"Navigation\"\n  }\n}\n\n// 定义路由映射配置\n{\n  \"routerMap\": [\n    {\n      \"name\": \"pageOne\", // 页面名称\n      \"pageSourceFile\": \"src/main/ets/pages/Index.ets\", // 页面源文件路径\n      \"buildFunction\": \"PageOneBuilder\", // 构建页面的函数\n      \"data\": {\n        \"description\": \"this is pageOne\" // 页面描述\n      }\n    }\n  ]\n}"
    },
    {
        "description": "该示例主要演示如何定义NavPathStack的派生类和派生类在Navigation中的基本用法。布局上，示例包含一个主页（Index）和一个子页面（PageOne）。主页中包含一个按钮，点击按钮可以导航到子页面。子页面中显示当前页面的信息和参数信息，并包含一个按钮用于再次导航到子页面。\n\n布局属性：\n- 主页和子页面都使用了Column布局，垂直排列内容。\n- 按钮的边距为20vp，文本的边距为10vp或20vp。\n- 文本的字体大小分别为25vp和20vp，字体加粗，文本对齐方式为左对齐。\n- 子页面的背景颜色为粉色。\n\n组件的样式和外观：\n- 按钮的样式为默认按钮样式，点击时触发导航操作。\n- 文本的颜色为默认颜色，字体加粗，对齐方式为左对齐。\n- 子页面的背景颜色为粉色，突出显示子页面的内容。\n\n组件的排列和嵌套关系：\n- 主页和子页面都使用了Column布局，垂直排列内容。\n- 按钮和文本在Column中依次排列，按钮位于文本下方。\n- 子页面中的按钮和文本在Column中依次排列，按钮位于文本下方。\n\n组件的功能和交互：\n- 主页中的按钮点击后触发导航操作，导航到子页面。\n- 子页面中的按钮点击后再次触发导航操作，导航到子页面。\n- 子页面在加载完成后，通过onReady事件获取当前页面的信息和参数信息，并显示在页面上。",
        "code": "// 定义DerivedNavPathStack类，继承自NavPathStack\nclass DerivedNavPathStack extends NavPathStack {\n  // 默认的id值\n  id: string = \"__default__\"\n\n  // 设置id的方法\n  setId(id: string) {\n    this.id = id;\n  }\n\n  // 获取页面信息的接口\n  getInfo(): string {\n    return \"this page used Derived NavPathStack, id: \" + this.id\n  }\n\n  // 重载pushPath方法，支持两种参数形式\n  pushPath(info: NavPathInfo, animated?: boolean): void\n  pushPath(info: NavPathInfo, options?: NavigationOptions): void\n  pushPath(info: NavPathInfo, secArg?: boolean | NavigationOptions): void {\n    console.log('[derive-test] reached DerivedNavPathStack\\'s pushPath');\n    if (typeof secArg === 'boolean') {\n      super.pushPath(info, secArg);\n    } else {\n      super.pushPath(info, secArg);\n    }\n  }\n\n  // 重载pop方法，支持两种参数形式\n  pop(animated?: boolean | undefined): NavPathInfo | undefined\n  pop(result: Object, animated?: boolean | undefined): NavPathInfo | undefined\n  pop(result?: Object, animated?: boolean | undefined): NavPathInfo | undefined {\n    console.log('[derive-test] reached DerivedNavPathStack\\'s pop');\n    return super.pop(result, animated);\n  }\n}\n\n// 定义param类，用于传递参数\nclass param {\n  info: string = \"__default_param__\";\n  constructor(info: string) { this.info = info }\n}\n\n// 主页组件\n@Entry\n@Component\nstruct Index {\n  // 创建DerivedNavPathStack实例\n  derivedStack: DerivedNavPathStack = new DerivedNavPathStack();\n\n  // 页面即将显示时的回调\n  aboutToAppear(): void {\n    this.derivedStack.setId('origin stack');\n  }\n\n  // 页面映射构建器\n  @Builder\n  pageMap(name: string) {\n    PageOne()\n  }\n\n  // 构建主页内容\n  build() {\n    Navigation(this.derivedStack) {\n      Button('to Page One').margin(20).onClick(() => {\n        this.derivedStack.pushPath({\n          name: 'pageOne',\n          param: new param('push pageOne in homePage when stack size: ' + this.derivedStack.size())\n        });\n      })\n    }.navDestination(this.pageMap)\n    .title('Home Page')\n  }\n}\n\n// 子页面组件\n@Component\nstruct PageOne {\n  // 创建DerivedNavPathStack实例\n  derivedStack: DerivedNavPathStack = new DerivedNavPathStack();\n  curStringifyParam: string = \"NA\";\n\n  // 构建子页面内容\n  build() {\n    NavDestination() {\n      Column() {\n        Text(this.derivedStack.getInfo())\n          .margin(10)\n          .fontSize(25)\n          .fontWeight(FontWeight.Bold)\n          .textAlign(TextAlign.Start)\n        Text('current page param info:')\n          .margin(10)\n          .fontSize(25)\n          .fontWeight(FontWeight.Bold)\n          .textAlign(TextAlign.Start)\n        Text(this.curStringifyParam)\n          .margin(20)\n          .fontSize(20)\n          .textAlign(TextAlign.Start)\n      }.backgroundColor(Color.Pink)\n      Button('to Page One').margin(20).onClick(() => {\n        this.derivedStack.pushPath({\n          name: 'pageOne',\n          param: new param('push pageOne in pageOne when stack size: ' + this.derivedStack.size())\n        });\n      })\n    }.title('Page One')\n    .onReady((context: NavDestinationContext) => {\n      console.log('[derive-test] reached PageOne\\'s onReady');\n      this.derivedStack = context.pathStack as DerivedNavPathStack;\n      console.log('[derive-test] -- got derivedStack: ' + this.derivedStack.id);\n      this.curStringifyParam = JSON.stringify(context.pathInfo.param);\n      console.log('[derive-test] -- got param: ' + this.curStringifyParam);\n    })\n  }\n}"
    },
    {
        "description": "该示例主要演示了如何在鸿蒙ArkUI中使用Navigation和NavDestination组件来自定义设置标题栏的边距。布局上，示例分为两个主要部分：主页面（NavigationExample）和目标页面（NavDestinationExample）。主页面包含三个按钮，分别用于切换标题栏的内间距和跳转到目标页面。目标页面也包含两个按钮，用于切换标题栏的内间距。\n\n布局属性方面，主页面和目标页面都使用了Column和Row组件来实现垂直和水平布局。按钮的布局宽度为100%，高度为100%，确保按钮在页面中占据适当的空间。按钮之间的间距通过margin属性设置为5vp，确保按钮之间有一定的间隔。\n\n组件的样式和外观方面，按钮的背景颜色、边框圆角、宽度和高度等属性未在代码中明确设置，但可以通过鸿蒙ArkUI的默认样式进行展示。按钮的排列和嵌套关系通过Column和Row组件实现，确保按钮在垂直和水平方向上有序排列。\n\n组件的功能和交互方面，按钮的点击事件通过onClick方法实现，用户可以通过点击按钮来切换标题栏的内间距或跳转到目标页面。标题栏的内间距通过paddingStart和paddingEnd属性进行设置，支持动态调整。\n\n整个布局通过Navigation和NavDestination组件实现页面导航和标题栏的自定义设置，确保界面整洁美观且功能完善。",
        "code": "import { LengthMetrics } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct NavigationExample {\n  @Provide('navPathStack') navPathStack: NavPathStack = new NavPathStack();\n\n  @State paddingStart: LengthMetrics = LengthMetrics.vp(0); // 标题栏左侧内间距，初始值为0vp\n  @State paddingEnd: LengthMetrics = LengthMetrics.vp(0); // 标题栏右侧内间距，初始值为0vp\n  @State menuItems: Array<NavigationMenuItem> = [\n    {\n      value: 'menuItem1',\n      icon: 'resources/base/media/ic_public_ok.svg',\n      action: () => {\n      }\n    }\n  ]\n\n  @Builder\n  myRouter(name: string, param?: Object) {\n    if (name === 'NavDestinationExample') {\n      NavDestinationExample();\n    }\n  }\n\n  build() {\n    Navigation(this.navPathStack) {\n      Column() {\n        Button('切换标题栏内间距为16vp')\n          .onClick(() => {\n            this.paddingStart = LengthMetrics.vp(16); // 设置标题栏左侧内间距为16vp\n            this.paddingEnd = LengthMetrics.vp(16); // 设置标题栏右侧内间距为16vp\n          })\n          .margin({ top: 5 }) // 设置按钮顶部外边距为5vp\n\n        Button('切换标题栏内间距为24vp')\n          .onClick(() => {\n            this.paddingStart = LengthMetrics.vp(24); // 设置标题栏左侧内间距为24vp\n            this.paddingEnd = LengthMetrics.vp(24); // 设置标题栏右侧内间距为24vp\n          })\n          .margin({ top: 5 }) // 设置按钮顶部外边距为5vp\n\n        Button('跳转')\n          .onClick(() => {\n            this.navPathStack.pushPathByName('NavDestinationExample', null); // 跳转到目标页面\n          })\n          .margin({ top: 5 }) // 设置按钮顶部外边距为5vp\n      }\n    }\n    .titleMode(NavigationTitleMode.Mini) // 设置标题栏模式为Mini模式\n    .title('一级页面', {\n      paddingStart: this.paddingStart, // 设置标题栏左侧内间距\n      paddingEnd: this.paddingEnd, // 设置标题栏右侧内间距\n    })\n    .menus(this.menuItems) // 设置菜单项\n    .navDestination(this.myRouter) // 设置导航目标页面的路由\n  }\n}\n\n@Component\nexport struct NavDestinationExample {\n  @Consume('navPathStack') navPathStack: NavPathStack;\n  @State menuItems: Array<NavigationMenuItem> = [\n    {\n      value: 'menuItem1',\n      icon: 'resources/base/media/ic_public_ok.svg',\n      action: () => {\n      }\n    }\n  ]\n  @State paddingStart: LengthMetrics = LengthMetrics.vp(0); // 标题栏左侧内间距，初始值为0vp\n  @State paddingEnd: LengthMetrics = LengthMetrics.vp(0); // 标题栏右侧内间距，初始值为0vp\n\n  build() {\n    NavDestination() {\n      Row() {\n        Column() {\n          Button('切换标题栏内间距为32vp')\n            .onClick(() => {\n              this.paddingStart = LengthMetrics.vp(32); // 设置标题栏左侧内间距为32vp\n              this.paddingEnd = LengthMetrics.vp(32); // 设置标题栏右侧内间距为32vp\n            })\n            .margin({ top: 5 }) // 设置按钮顶部外边距为5vp\n\n          Button('切换标题栏内间距为20vp')\n            .onClick(() => {\n              this.paddingStart = LengthMetrics.vp(20); // 设置标题栏左侧内间距为20vp\n              this.paddingEnd = LengthMetrics.vp(20); // 设置标题栏右侧内间距为20vp\n            })\n            .margin({ top: 5 }) // 设置按钮顶部外边距为5vp\n        }\n        .width('100%') // 设置Column的宽度为100%\n      }\n      .height('100%') // 设置Row的高度为100%\n    }\n    .hideTitleBar(false) // 不隐藏标题栏\n    .title('NavDestination title', {\n      paddingStart: this.paddingStart, // 设置标题栏左侧内间距\n      paddingEnd: this.paddingEnd, // 设置标题栏右侧内间距\n    })\n    .menus(this.menuItems) // 设置菜单项\n  }\n}"
    },
    {
        "description": "该示例主要演示了如何在鸿蒙ArkUI中使用Navigation和NavDestination组件，并通过Symbol组件来定制导航栏和工具栏的图标。布局上，Navigation组件作为主容器，包含一个按钮用于触发导航跳转。NavDestination组件则作为目标页面，展示在导航跳转后的内容。\n\n布局属性方面，Navigation组件设置了标题模式为Mini，并配置了菜单项和工具栏项。NavDestination组件设置了背景颜色、标题栏样式和返回按钮图标。\n\n样式和外观方面，SymbolGlyphModifier用于定制图标的颜色和渲染策略，支持多色渲染。Navigation组件的返回按钮图标使用了SymbolGlyphModifier来设置图标和颜色。\n\n组件的排列和嵌套关系上，Navigation组件内部嵌套了一个Column组件，包含一个按钮。NavDestination组件内部嵌套了一个Row组件，Row组件内部又嵌套了一个Column组件，用于布局内容。\n\n功能和交互方面，按钮点击事件触发导航跳转，Navigation组件通过navPathStack管理导航路径，NavDestination组件通过menus属性配置菜单项。",
        "code": "import { SymbolGlyphModifier } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct NavigationExample {\n  @Provide('navPathStack') navPathStack: NavPathStack = new NavPathStack(); // 提供导航路径栈，用于管理导航路径\n  @State menuItems: Array<NavigationMenuItem> = [ // 定义菜单项数组\n    {\n      value: 'menuItem1',\n      icon: 'resources/base/media/ic_public_ok.svg' // 菜单项图标\n    },\n    {\n      value: 'menuItem2',\n      icon: 'resources/base/media/ic_public_ok.svg',\n      symbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos_folder_badge_plus')).fontColor([Color.Red, Color.Green]).renderingStrategy(SymbolRenderingStrategy.MULTIPLE_COLOR), // 使用SymbolGlyphModifier定制图标颜色和渲染策略\n    },\n    {\n      value: 'menuItem3',\n      symbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos_lungs')), // 使用SymbolGlyphModifier定制图标\n    },\n  ];\n\n  @State toolItems: Array<ToolbarItem> = [ // 定义工具栏项数组\n    {\n      value: 'toolItem1',\n      icon: 'resources/base/media/ic_public_ok.svg',\n      symbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos_lungs')),\n      status: ToolbarItemStatus.ACTIVE,\n      activeSymbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos_folder_badge_plus')).fontColor([Color.Red, Color.Green]).renderingStrategy(SymbolRenderingStrategy.MULTIPLE_COLOR), // 使用SymbolGlyphModifier定制激活状态下的图标颜色和渲染策略\n      action: () => {}\n    },\n    {\n      value: 'toolItem2',\n      symbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos_star')),\n      status: ToolbarItemStatus.ACTIVE,\n      activeIcon: 'resources/base/media/ic_public_more.svg',\n      action: () => {}\n    },\n    {\n      value: 'toolItem3',\n      symbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos_star')),\n      status: ToolbarItemStatus.ACTIVE,\n      activeSymbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos_lungs')),\n      action: () => {}\n    }\n  ];\n\n  @Builder\n  myRouter(name: string, param?: Object) { // 定义路由构建器\n    if (name === 'NavigationMenu') {\n      NavigationMenu(); // 构建NavigationMenu组件\n    }\n  }\n\n  build() {\n    Navigation(this.navPathStack) { // 创建Navigation组件\n      Column() {\n        Button('跳转').onClick(() => { // 创建按钮，点击后触发导航跳转\n          this.navPathStack.pushPathByName('NavigationMenu', null); // 将NavigationMenu组件推入导航路径栈\n        })\n      }\n    }\n    .backButtonIcon(new SymbolGlyphModifier($r('sys.symbol.ohos_wifi'))) // 设置返回按钮图标\n    .titleMode(NavigationTitleMode.Mini) // 设置标题模式为Mini\n    .menus(this.menuItems) // 设置菜单项\n    .toolbarConfiguration(this.toolItems) // 设置工具栏项\n    .title('一级页面') // 设置标题\n    .navDestination(this.myRouter) // 设置导航目标\n  }\n}\n\n@Component\nexport struct NavigationMenu {\n  @Consume('navPathStack') navPathStack: NavPathStack; // 消费导航路径栈\n  @State menuItems: Array<NavigationMenuItem> = [ // 定义菜单项数组\n    {\n      value: 'menuItem1',\n      icon: 'resources/base/media/ic_public_ok.svg',\n      action: () => {}\n    },\n    {\n      value: 'menuItem2',\n      symbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos_folder_badge_plus')).fontColor([Color.Red, Color.Green]).renderingStrategy(SymbolRenderingStrategy.MULTIPLE_COLOR), // 使用SymbolGlyphModifier定制图标颜色和渲染策略\n      action: () => {}\n    },\n    {\n      value: 'menuItem3',\n      symbolIcon: new SymbolGlyphModifier($r('sys.symbol.repeat_1')),\n      action: () => {}\n    },\n  ];\n\n  build() {\n    NavDestination() { // 创建NavDestination组件\n      Row() {\n        Column() {\n        }\n        .width('100%') // 设置Column宽度为100%\n      }\n      .height('100%') // 设置Row高度为100%\n    }\n    .hideTitleBar(false) // 不隐藏标题栏\n    .title('NavDestination title') // 设置标题\n    .backgroundColor($r('sys.color.ohos_id_color_titlebar_sub_bg')) // 设置背景颜色\n    .backButtonIcon(new SymbolGlyphModifier($r('sys.symbol.ohos_star')).fontColor([Color.Blue])) // 设置返回按钮图标和颜色\n    .menus(this.menuItems) // 设置菜单项\n  }\n}"
    },
    {
        "description": "该示例主要演示了如何在鸿蒙ArkUI中设置Navigation主页的标题栏、工具栏和NavDestination页面的标题栏的背景颜色和背景模糊效果。布局上，主页和子页面都使用了Stack和Column组件进行嵌套布局，确保内容在垂直和水平方向上的居中对齐。样式上，通过定义不同的颜色和模糊效果，实现了标题栏和工具栏的动态切换。功能上，通过按钮点击事件，用户可以切换标题栏和工具栏的背景颜色和模糊效果，同时还可以通过按钮导航到子页面。",
        "code": "// 定义两种颜色和两种模糊效果\nlet COLOR1: string = \"#80004AAF\"; // 定义第一种颜色\nlet COLOR2: string = \"#802787D9\"; // 定义第二种颜色\nlet BLUR_STYLE_1: BlurStyle = BlurStyle.BACKGROUND_THIN; // 定义第一种模糊效果\nlet BLUR_STYLE_2: BlurStyle = BlurStyle.BACKGROUND_THICK; // 定义第二种模糊效果\n\n@Component\nstruct BackComponent {\n  build() {\n    Row() {\n      Column() {}\n        .height('100%') // 设置高度为100%\n        .backgroundColor(\"#3D9DB4\") // 设置背景颜色\n        .layoutWeight(9) // 设置布局权重\n      Column() {}\n        .height('100%') // 设置高度为100%\n        .backgroundColor(\"17A98D\") // 设置背景颜色\n        .layoutWeight(9) // 设置布局权重\n      Column() {}\n        .height('100%') // 设置高度为100%\n        .backgroundColor(\"FFC000\") // 设置背景颜色\n        .layoutWeight(9) // 设置布局权重\n    }\n    .height('100%') // 设置高度为100%\n    .width('100%') // 设置宽度为100%\n  }\n}\n\n@Component\nstruct ColorAndBlur {\n  @State useColor1: boolean = true; // 定义状态变量，用于切换颜色\n  @State useBlur1: boolean = true; // 定义状态变量，用于切换模糊效果\n\n  build() {\n    NavDestination() {\n      Stack({alignContent: Alignment.Center}) {\n        BackComponent()\n          .width('100%') // 设置宽度为100%\n          .height('100%') // 设置高度为100%\n        Column() {\n          Stack({alignContent: Alignment.Center}) {\n            Button(\"switch color\")\n              .onClick(() => {\n                this.useColor1 = !this.useColor1; // 切换颜色状态\n              })\n          }\n          .width('100%') // 设置宽度为100%\n          .layoutWeight(1) // 设置布局权重\n          Stack({alignContent: Alignment.Center}) {\n            Button(\"switch blur\")\n              .onClick(() => {\n                this.useBlur1 = !this.useBlur1; // 切换模糊效果状态\n              })\n          }\n          .width('100%') // 设置宽度为100%\n          .layoutWeight(1) // 设置布局权重\n        }\n        .width('100%') // 设置宽度为100%\n        .height('100%') // 设置高度为100%\n      }.width('100%') // 设置宽度为100%\n      .height('100%') // 设置高度为100%\n    }\n    .width('100%') // 设置宽度为100%\n    .height('100%') // 设置高度为100%\n\n    .title(\"switch titlebar color and blur\", {\n      backgroundColor: this.useColor1 ? COLOR1 : COLOR2, // 根据状态设置背景颜色\n      backgroundBlurStyle: this.useBlur1 ? BLUR_STYLE_1 : BLUR_STYLE_2, // 根据状态设置模糊效果\n      barStyle: BarStyle.STACK // 设置标题栏样式\n    })\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  private stack: NavPathStack = new NavPathStack(); // 定义导航路径栈\n  @State useColor1: boolean = true; // 定义状态变量，用于切换颜色\n  @State useBlur1: boolean = true; // 定义状态变量，用于切换模糊效果\n\n  @Builder\n  PageBuilder(name: string) {\n    ColorAndBlur() // 构建子页面\n  }\n\n  build() {\n    Navigation(this.stack) {\n      Stack({alignContent: Alignment.Center}) {\n        BackComponent()\n          .width('100%') // 设置宽度为100%\n          .height('100%') // 设置高度为100%\n        Column() {\n          Stack({alignContent: Alignment.Center}) {\n            Button(\"switch color\")\n              .onClick(() => {\n                this.useColor1 = !this.useColor1; // 切换颜色状态\n              })\n          }\n          .width('100%') // 设置宽度为100%\n          .layoutWeight(1) // 设置布局权重\n          Stack({alignContent: Alignment.Center}) {\n            Button(\"switch blur\")\n              .onClick(() => {\n                this.useBlur1 = !this.useBlur1; // 切换模糊效果状态\n              })\n          }\n          .width('100%') // 设置宽度为100%\n          .layoutWeight(1) // 设置布局权重\n          Stack({alignContent: Alignment.Center}) {\n            Button(\"push page\")\n              .onClick(() => {\n                this.stack.pushPath({name: \"page\"}) // 导航到子页面\n              })\n          }\n          .width('100%') // 设置宽度为100%\n          .layoutWeight(1) // 设置布局权重\n        }\n        .width('100%') // 设置宽度为100%\n        .height('80%') // 设置高度为80%\n      }.width('100%') // 设置宽度为100%\n      .height('100%') // 设置高度为100%\n    }\n    .width('100%') // 设置宽度为100%\n    .height('100%') // 设置高度为100%\n    .navDestination(this.PageBuilder) // 设置导航目标页面\n\n    .title(\"NavTitle\", {\n      backgroundColor: this.useColor1 ? COLOR1 : COLOR2, // 根据状态设置背景颜色\n      backgroundBlurStyle: this.useBlur1 ? BLUR_STYLE_1 : BLUR_STYLE_2, // 根据状态设置模糊效果\n      barStyle: BarStyle.STACK // 设置标题栏样式\n    })\n\n    .toolbarConfiguration([\n      {value: \"a\"},\n      {value: \"b\"},\n      {value: \"c\"}\n    ], {\n      backgroundColor: this.useColor1 ? COLOR1 : COLOR2, // 根据状态设置背景颜色\n      backgroundBlurStyle: this.useBlur1 ? BLUR_STYLE_1 : BLUR_STYLE_2 // 根据状态设置模糊效果\n    })\n  }\n}"
    },
    {
        "description": "该示例主要演示了Navigation页面的布局。整体布局采用Column组件，宽度占据整个屏幕，高度也占据整个屏幕，背景颜色为#F1F3F5。布局分为三个主要部分：标题部分、菜单部分和内容部分。\n\n标题部分通过@Builder装饰器定义了一个NavigationTitle组件，该组件包含两段文本：主标题和副标题。主标题字体颜色为#182431，字体大小为30vp，行高为41vp，字体粗细为700；副标题字体颜色为#182431，字体大小为14vp，行高为19vp，透明度为0.4，上下边距为2vp和20vp。标题部分整体采用Column布局，对齐方式为水平左对齐。\n\n菜单部分通过@Builder装饰器定义了一个NavigationMenus组件，该组件包含三个图标，每个图标的宽度为24vp，高度为24vp。图标之间通过margin属性设置左间距为24vp。菜单部分整体采用Row布局。\n\n内容部分包含一个Navigation组件，该组件内部嵌套了一个TextInput组件和一个List组件。TextInput组件的占位符为'search...'，宽度为90%，高度为40vp，背景颜色为#FFFFFF，上边距为8vp。List组件的高度为324vp，宽度为100%，上边距为12vp，左边距为10%。List组件内部通过ForEach循环渲染了arr数组中的数字，每个ListItem包含一个Text组件，显示对应的数字，宽度为90%，高度为72vp，背景颜色为#FFFFFF，边框圆角为24vp，字体大小为16vp，字体粗细为500，文本居中对齐。\n\nNavigation组件的标题模式为NavigationTitleMode.Full，工具栏配置了三个按钮，分别对应添加、应用和收藏功能。标题栏和工具栏默认显示，当标题模式发生变化时，会通过console.info输出当前的标题模式。",
        "code": "class A {\n  text: string = '' // 定义一个字符串类型的变量text，初始值为空字符串\n  num: number = 0 // 定义一个数字类型的变量num，初始值为0\n}\n\n@Entry\n@Component\nstruct NavigationExample {\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] // 定义一个数字数组arr，包含0到9的数字\n  @State currentIndex: number = 0 // 定义一个状态变量currentIndex，初始值为0\n\n  @Builder NavigationTitle() {\n    Column() {\n      Text('Title') // 显示主标题\n        .fontColor('#182431') // 设置字体颜色为#182431\n        .fontSize(30) // 设置字体大小为30vp\n        .lineHeight(41) // 设置行高为41vp\n        .fontWeight(700) // 设置字体粗细为700\n      Text('subtitle') // 显示副标题\n        .fontColor('#182431') // 设置字体颜色为#182431\n        .fontSize(14) // 设置字体大小为14vp\n        .lineHeight(19) // 设置行高为19vp\n        .opacity(0.4) // 设置透明度为0.4\n        .margin({ top: 2, bottom: 20 }) // 设置上下边距为2vp和20vp\n    }.alignItems(HorizontalAlign.Start) // 设置对齐方式为水平左对齐\n  }\n\n  @Builder NavigationMenus() {\n    Row() {\n      Image('resources/base/media/ic_public_add.svg') // 显示第一个图标\n        .width(24) // 设置图标宽度为24vp\n        .height(24) // 设置图标高度为24vp\n      Image('resources/base/media/ic_public_add.svg') // 显示第二个图标\n        .width(24) // 设置图标宽度为24vp\n        .height(24) // 设置图标高度为24vp\n        .margin({ left: 24 }) // 设置左间距为24vp\n      Image('common/ic_public_more.svg') // 显示第三个图标\n        .width(24) // 设置图标宽度为24vp\n        .height(24) // 设置图标高度为24vp\n        .margin({ left: 24 }) // 设置左间距为24vp\n    }\n  }\n\n  build() {\n    Column() {\n      Navigation() {\n        TextInput({ placeholder: 'search...' }) // 创建一个TextInput组件，占位符为'search...'\n          .width('90%') // 设置宽度为90%\n          .height(40) // 设置高度为40vp\n          .backgroundColor('#FFFFFF') // 设置背景颜色为#FFFFFF\n          .margin({ top: 8 }) // 设置上边距为8vp\n\n        List({ space: 12, initialIndex: 0 }) { // 创建一个List组件，间距为12vp，初始索引为0\n          ForEach(this.arr, (item: number) => { // 遍历arr数组\n            ListItem() {\n              Text('' + item) // 显示当前数字\n                .width('90%') // 设置宽度为90%\n                .height(72) // 设置高度为72vp\n                .backgroundColor('#FFFFFF') // 设置背景颜色为#FFFFFF\n                .borderRadius(24) // 设置边框圆角为24vp\n                .fontSize(16) // 设置字体大小为16vp\n                .fontWeight(500) // 设置字体粗细为500\n                .textAlign(TextAlign.Center) // 设置文本居中对齐\n            }\n          }, (item: number) => item.toString()) // 将数字转换为字符串作为键\n        }\n        .height(324) // 设置List高度为324vp\n        .width('100%') // 设置List宽度为100%\n        .margin({ top: 12, left: '10%' }) // 设置上边距为12vp，左边距为10%\n      }\n      .title(this.NavigationTitle) // 设置Navigation的标题为NavigationTitle组件\n      .menus(this.NavigationMenus) // 设置Navigation的菜单为NavigationMenus组件\n      .titleMode(NavigationTitleMode.Full) // 设置标题模式为全屏模式\n      .toolbarConfiguration([ // 配置工具栏按钮\n        {\n          value: $r(\"app.string.navigation_toolbar_add\"), // 按钮文本资源\n          icon: $r(\"app.media.ic_public_highlightsed\") // 按钮图标资源\n        },\n        {\n          value: $r(\"app.string.navigation_toolbar_app\"), // 按钮文本资源\n          icon: $r(\"app.media.ic_public_highlights\") // 按钮图标资源\n        },\n        {\n          value: $r(\"app.string.navigation_toolbar_collect\"), // 按钮文本资源\n          icon: $r(\"app.media.ic_public_highlights\") // 按钮图标资源\n        }\n      ])\n      .hideTitleBar(false) // 设置标题栏不隐藏\n      .hideToolBar(false) // 设置工具栏不隐藏\n      .onTitleModeChange((titleModel: NavigationTitleMode) => { // 监听标题模式变化事件\n        console.info('titleMode' + titleModel) // 输出当前标题模式\n      })\n    }.width('100%').height('100%').backgroundColor('#F1F3F5') // 设置整体布局宽度为100%，高度为100%，背景颜色为#F1F3F5\n  }\n}"
    },
    {
        "description": "该示例主要演示了在鸿蒙ArkUI中使用Navigation组件进行页面导航，并实现带参返回的功能。整个应用包含三个主要页面：首页（NavigationExample）、PageOne和PageTwo。每个页面通过Navigation组件进行导航，支持多种方式的页面跳转和返回操作。\n\n布局方面，每个页面都使用了Column组件来垂直排列多个Button组件。每个Button组件的宽度为80%，高度为40vp，并且有10vp的边距。Button组件的排列方式为垂直排列，确保按钮在垂直方向上有序排列，界面整洁美观。\n\n样式方面，Button组件的类型为Capsule（胶囊形状），并且启用了状态效果（stateEffect: true），使得按钮在点击时会有视觉反馈。按钮的宽度占据父容器的80%，高度为40vp，边距为10vp，确保按钮在页面中居中显示。\n\n功能方面，每个Button组件都绑定了onClick事件，点击按钮会触发相应的页面跳转或返回操作。页面跳转时可以传递参数，并在返回时接收返回的参数，更新页面状态。页面返回操作支持多种方式，包括返回到指定页面、返回到指定索引的页面等。",
        "code": "@Entry\n@Component\nstruct NavigationExample {\n  pageInfo: NavPathStack = new NavPathStack()\n\n  build() {\n    Navigation(this.pageInfo) {\n      Column() {\n        Button('StartTest', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pageInfo.pushPath({ name: 'pageOne' });\n          })\n      }\n    }.title('NavIndex')\n  }\n}\n\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nclass TmpClass{\n  count:number = 10\n}\n\nclass ParamWithOp {\n  operation: number = 1\n  count: number = 10\n}\n\n@Builder\nexport function PageOneBuilder(name: string, param: Object) {\n  PageOne()\n}\n\n@Component\nexport struct PageOne {\n  pageInfo: NavPathStack = new NavPathStack();\n  @State message: string = 'Hello World'\n\n  build() {\n    NavDestination() {\n      Column() {\n        Text(this.message)\n          .width('80%')\n          .height(50)\n          .margin(10)\n\n        Button('pushPath', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(10)\n          .onClick(()=>{\n            this.pageInfo.pushPath({name: 'pageTwo', param: new ParamWithOp(), onPop: (popInfo: PopInfo)=>{\n              this.message = '[pushPath]last page is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result);\n            }});\n          })\n\n        Button('pushPathByName', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(10)\n          .onClick(() => {\n            let tmp = new TmpClass()\n            this.pageInfo.pushPathByName('pageTwo', tmp, (popInfo)=>{\n              this.message = '[pushPathByName]last page is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result);\n            });\n          })\n\n        Button('pushDestination', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(10)\n          .onClick(()=>{\n            let tmp = new TmpClass()\n\n            this.pageInfo.pushDestination({name: 'pageTwo', param: new ParamWithOp(), onPop: (popInfo: PopInfo)=>{\n              this.message = '[pushDestination]last page is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result);\n            }}).catch((error: BusinessError)=>{\n              console.error(`[pushDestination]failed, error code = ${error.code}, error.message = ${error.message}.`);\n            }).then(()=>{\n              console.error('[pushDestination]success.');\n            });\n          })\n\n        Button('pushDestinationByName', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(10)\n          .onClick(()=>{\n            let tmp = new TmpClass()\n\n            this.pageInfo.pushDestinationByName('pageTwo', tmp, (popInfo)=>{\n              this.message = '[pushDestinationByName]last page is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result);\n            }).catch((error: BusinessError)=>{\n              console.error(`[pushDestinationByName]failed, error code = ${error.code}, error.message = ${error.message}.`);\n            }).then(()=>{\n              console.error('[pushDestinationByName]success.');\n            });\n          })\n\n        Button('pushPathWithoutOnPop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(10)\n          .onClick(()=>{\n            this.pageInfo.pushPath({name: 'pageTwo', param: new ParamWithOp()});\n          })\n\n        Button('pushPathByNameWithoutOnPop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(10)\n          .onClick(() => {\n            let tmp = new TmpClass()\n            this.pageInfo.pushPathByName('pageTwo', tmp);\n          })\n\n        Button('pushDestinationWithoutOnPop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(10)\n          .onClick(()=>{\n            let tmp = new TmpClass()\n\n            this.pageInfo.pushDestination({name: 'pageTwo', param: new ParamWithOp()})\n              .catch((error: BusinessError)=>{\n                console.error(`[pushDestinationWithoutOnPop]failed, error code = ${error.code}, error.message = ${error.message}.`);\n              }).then(()=>{\n                console.error('[pushDestinationWithoutOnPop]success.');\n              });\n          })\n\n        Button('pushDestinationByNameWithoutOnPop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(10)\n          .onClick(() => {\n            let tmp = new TmpClass()\n\n            this.pageInfo.pushDestinationByName('pageTwo', tmp)\n              .catch((error: BusinessError)=>{\n                console.error(`[pushDestinationByNameWithoutOnPop]failed, error code = ${error.code}, error.message = ${error.message}.`);\n              }).then(()=>{\n                console.error('[pushDestinationByNameWithoutOnPop]success.');\n              });\n          })\n\n        Button('clear', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(10)\n          .onClick(() => {\n            this.pageInfo.clear();\n          })\n      }.width('100%').height('100%')\n    }.title('pageOne')\n    .onBackPressed(() => {\n      this.pageInfo.pop({number: 1})\n      return true\n    }).onReady((context: NavDestinationContext) => {\n      this.pageInfo = context.pathStack;\n    })\n  }\n}\n\nclass resultClass {\n  constructor(count: number) {\n    this.count = count;\n  }\n  count: number = 10\n}\n\n@Builder\nexport function PageTwoBuilder() {\n  PageTwo()\n}\n\n@Component\nexport struct PageTwo {\n  pathStack: NavPathStack = new NavPathStack()\n\n  build() {\n    NavDestination() {\n      Column() {\n        Button('pop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pathStack.pop(new resultClass(1));\n          })\n\n        Button('popToName', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pathStack.popToName('pageOne', new resultClass(11));\n          })\n\n        Button('popToIndex', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pathStack.popToIndex(0, new resultClass(111));\n          })\n\n        Button('popWithoutResult', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pathStack.pop();\n          })\n\n        Button('popToNameWithoutResult', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pathStack.popToName('pageOne');\n          })\n\n        Button('popToIndexWithoutResult', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pathStack.popToIndex(0);\n          })\n      }.width('100%').height('100%')\n    }.title('pageTwo')\n    .onBackPressed(() => {\n      this.pathStack.pop(new resultClass(0));\n      return true;\n    }).onReady((context: NavDestinationContext) => {\n      this.pathStack = context.pathStack\n    })\n  }\n}\n\n{\n  \"routerMap\": [\n    {\n      \"name\": \"pageOne\",\n      \"pageSourceFile\": \"src/main/ets/pages/PageOne.ets\",\n      \"buildFunction\": \"PageOneBuilder\",\n      \"data\": {\n        \"description\": \"this is pageOne\"\n      }\n    },\n    {\n      \"name\": \"pageTwo\",\n      \"pageSourceFile\": \"src/main/ets/pages/PageTwo.ets\",\n      \"buildFunction\": \"PageTwoBuilder\"\n    }\n  ]\n}"
    },
    {
        "description": "该示例主要演示了在鸿蒙ArkUI中使用NavPathStack进行页面导航和路由拦截的功能。通过NavPathStack，开发者可以管理页面的堆栈，实现页面的跳转、拦截、回退等操作。示例中包含了两个主要页面（PageOne和PageTwo），并通过按钮触发不同的导航操作。布局上，页面主要由按钮组成，按钮的排列方式为垂直布局，按钮之间有适当的间距。按钮的样式为胶囊形状，宽度占据父容器的80%，高度为40vp，边距为20vp。按钮的功能包括页面跳转、路由拦截开关、页面堆栈操作等。",
        "code": "@Entry\n@Component\nstruct NavigationExample {\n  // 定义一个NavPathStack实例，用于管理页面堆栈\n  pageInfos: NavPathStack = new NavPathStack()\n  // 定义一个布尔变量，用于控制是否启用路由拦截\n  isUseInterception: boolean = false;\n\n  // 注册路由拦截的方法\n  registerInterception() {\n    this.pageInfos.setInterception({\n      // 页面即将显示时的拦截处理\n      willShow: (from: NavDestinationContext | \"navBar\", to: NavDestinationContext | \"navBar\",\n                 operation: NavigationOperation, animated: boolean) => {\n        // 如果未启用拦截，直接返回\n        if (!this.isUseInterception) {\n          return;\n        }\n        // 如果目标页面是导航栏，输出日志\n        if (typeof to === \"string\") {\n          console.log(\"target page is navigation home\");\n          return;\n        }\n\n        // 获取目标页面的上下文\n        let target: NavDestinationContext = to as NavDestinationContext;\n        // 如果目标页面是pageTwo，则将其替换为pageOne\n        if (target.pathInfo.name === 'pageTwo') {\n          target.pathStack.pop();\n          target.pathStack.pushPathByName('pageOne', null);\n        }\n      },\n      // 页面已经显示后的拦截处理\n      didShow: (from: NavDestinationContext | \"navBar\", to: NavDestinationContext | \"navBar\",\n                operation: NavigationOperation, isAnimated: boolean) => {\n        // 如果未启用拦截，直接返回\n        if (!this.isUseInterception) {\n          return;\n        }\n        // 如果当前页面是导航栏，输出日志\n        if (typeof from === \"string\") {\n          console.log(\"current transition is from navigation home\");\n        } else {\n          console.log(`current transition is from  ${(from as NavDestinationContext).pathInfo.name}`)\n        }\n        // 如果目标页面是导航栏，输出日志\n        if (typeof to === \"string\") {\n          console.log(\"current transition to is navBar\");\n        } else {\n          console.log(`current transition is to ${(to as NavDestinationContext).pathInfo.name}`);\n        }\n      },\n      // 导航模式改变时的拦截处理\n      modeChange: (mode: NavigationMode) => {\n        // 如果未启用拦截，直接返回\n        if (!this.isUseInterception) {\n          return;\n        }\n        console.log(`current navigation mode is ${mode}`);\n      }\n    })\n  }\n\n  // 构建页面的方法\n  build() {\n    Navigation(this.pageInfos) {\n      Column() {\n        // 定义一个按钮，点击后跳转到pageOne\n        Button('pushPath', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pageInfos.pushPath({ name: 'pageOne' })\n          })\n        // 定义一个按钮，点击后切换路由拦截的启用状态\n        Button('use interception', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.isUseInterception = !this.isUseInterception;\n            if (this.isUseInterception) {\n              this.registerInterception();\n            } else {\n              this.pageInfos.setInterception(undefined);\n            }\n          })\n      }\n    }.title('NavIndex')\n  }\n}\n\n// 定义一个临时类，用于传递参数\nclass TmpClass{\n  count:number = 10\n}\n\n// 定义一个Builder函数，用于构建PageOne页面\n@Builder\nexport function PageOneBuilder(name: string, param: Object) {\n  PageOne()\n}\n\n// 定义PageOne组件\n@Component\nexport struct PageOne {\n  // 定义一个NavPathStack实例，用于管理页面堆栈\n  pageInfos: NavPathStack = new NavPathStack()\n\n  // 构建PageOne页面的方法\n  build() {\n    NavDestination() {\n      Column() {\n        // 定义一个按钮，点击后跳转到pageTwo\n        Button('pushPathByName', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            let tmp = new TmpClass()\n            this.pageInfos.pushPathByName('pageTwo', tmp)\n          })\n        // 定义一个按钮，点击后以单例模式跳转到pageOne\n        Button('singletonLaunchMode', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pageInfos.pushPath({ name: 'pageOne' }, { launchMode: LaunchMode.MOVE_TO_TOP_SINGLETON })\n          })\n        // 定义一个按钮，点击后回退到指定名称的页面\n        Button('popToname', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pageInfos.popToName('pageTwo')\n            console.log('popToName' + JSON.stringify(this.pageInfos), '返回值' + JSON.stringify(this.pageInfos.popToName('pageTwo')))\n          })\n        // 定义一个按钮，点击后回退到指定索引的页面\n        Button('popToIndex', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pageInfos.popToIndex(1)\n            console.log('popToIndex' + JSON.stringify(this.pageInfos))\n          })\n        // 定义一个按钮，点击后将指定名称的页面移动到堆栈顶部\n        Button('moveToTop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pageInfos.moveToTop('pageTwo')\n            console.log('moveToTop' + JSON.stringify(this.pageInfos), '返回值' + JSON.stringify(this.pageInfos.moveToTop('pageTwo')))\n          })\n        // 定义一个按钮，点击后将指定索引的页面移动到堆栈顶部\n        Button('moveIndexToTop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pageInfos.moveIndexToTop(1)\n            console.log('moveIndexToTop' + JSON.stringify(this.pageInfos))\n          })\n        // 定义一个按钮，点击后清空页面堆栈\n        Button('clear', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pageInfos.clear()\n          })\n        // 定义一个按钮，点击后获取页面堆栈的相关信息\n        Button('get', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            console.log('-------------------')\n            console.log('获取栈中所有NavDestination页面的名称', JSON.stringify(this.pageInfos.getAllPathName()))\n            console.log('获取index指定的NavDestination页面的参数信息', JSON.stringify(this.pageInfos.getParamByIndex(1)))\n            console.log('获取全部名为name的NavDestination页面的参数信息', JSON.stringify(this.pageInfos.getParamByName('pageTwo')))\n            console.log('获取全部名为name的NavDestination页面的位置索引', JSON.stringify(this.pageInfos.getIndexByName('pageOne')))\n            console.log('获取栈大小', JSON.stringify(this.pageInfos.size()))\n          })\n      }.width('100%').height('100%')\n    }.title('pageOne')\n    .onBackPressed(() => {\n      const popDestinationInfo = this.pageInfos.pop()\n      console.log('pop' + '返回值' + JSON.stringify(popDestinationInfo))\n      return true\n    }).onReady((context: NavDestinationContext) => {\n      this.pageInfos = context.pathStack\n    })\n  }\n}\n\n// 定义一个Builder函数，用于构建PageTwo页面\n@Builder\nexport function PageTwoBuilder(name: string, param: Object) {\n  PageTwo()\n}\n\n// 定义PageTwo组件\n@Component\nexport struct PageTwo {\n  // 定义一个NavPathStack实例，用于管理页面堆栈\n  pathStack: NavPathStack = new NavPathStack()\n\n  // 定义一个菜单项数组，用于设置页面的菜单\n  private menuItems: Array<NavigationMenuItem> = [\n    {\n      value: \"1\",\n      icon: 'resources/base/media/undo.svg',\n    },\n    {\n      value: \"2\",\n      icon: 'resources/base/media/redo.svg',\n      isEnabled: false,\n    },\n    {\n      value: \"3\",\n      icon: 'resources/base/media/ic_public_ok.svg',\n      isEnabled: true,\n    }\n  ]\n\n  // 构建PageTwo页面的方法\n  build() {\n    NavDestination() {\n      Column() {\n        // 定义一个按钮，点击后跳转到pageOne\n        Button('pushPathByName', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pathStack.pushPathByName('pageOne', null)\n          })\n      }.width('100%').height('100%')\n    }.title('pageTwo')\n    .menus(this.menuItems)\n    .onBackPressed(() => {\n      this.pathStack.pop()\n      return true\n    })\n    .onReady((context: NavDestinationContext) => {\n      this.pathStack = context.pathStack;\n      console.log(\"current page config info is \" + JSON.stringify(context.getConfigInRouteMap()))\n    })\n  }\n}\n\n// 定义路由映射配置\n{\n  \"routerMap\": [\n    {\n      \"name\": \"pageOne\",\n      \"pageSourceFile\": \"src/main/ets/pages/PageOne.ets\",\n      \"buildFunction\": \"PageOneBuilder\",\n      \"data\": {\n        \"description\": \"this is pageOne\"\n      }\n    },\n    {\n      \"name\": \"pageTwo\",\n      \"pageSourceFile\": \"src/main/ets/pages/PageTwo.ets\",\n      \"buildFunction\": \"PageTwoBuilder\"\n    }\n  ]\n}"
    },
    {
        "description": "该示例主要演示了如何在鸿蒙ArkUI中设置每个NavDestination子页面的自定义转场动画及可交互转场动画。通过自定义的转场动画，用户可以在页面切换时看到不同的动画效果，并且可以通过手势交互来控制转场动画的进度和完成状态。\n\n布局方面，示例中使用了Navigation组件来管理页面的导航栈，并通过NavDestination组件来定义每个页面的内容。每个页面内部使用了Column组件来垂直排列按钮，按钮用于触发页面导航操作。\n\n样式方面，页面背景颜色通过backgroundColor属性设置，按钮的样式通过width、height、margin等属性进行定义。页面内容的平移效果通过translate属性实现，手势交互通过PanGesture组件实现。\n\n功能方面，示例中通过CustomTransition类来管理自定义转场动画的参数和回调函数。页面切换时，会根据当前的导航操作（如PUSH或POP）来执行相应的动画效果。用户可以通过手势滑动来控制转场动画的进度，并在手势结束时根据滑动的距离决定是否完成转场。",
        "code": "import { CustomTransition, AnimateCallback } from './CustomNavigationUtils'\n\n@Entry\n@Component\nstruct NavigationExample {\n  pageInfos: NavPathStack = new NavPathStack();\n\n  aboutToAppear() {\n    if (this.pageInfos === undefined) {\n      this.pageInfos = new NavPathStack();\n    }\n    this.pageInfos.pushPath({ name: 'pageOne', param: CustomTransition.getInstance().getAnimationId() });\n  }\n\n  build() {\n    Navigation(this.pageInfos) {\n    }\n    .title('NavIndex')\n    .hideNavBar(true)\n    .customNavContentTransition((from: NavContentInfo, to: NavContentInfo, operation: NavigationOperation) => {\n      if (from.mode == NavDestinationMode.DIALOG || to.mode == NavDestinationMode.DIALOG) {\n        return undefined;\n      }\n\n      if (from.index === -1 || to.index === -1) {\n        return undefined;\n      }\n\n      CustomTransition.getInstance().operation = operation;\n      if (CustomTransition.getInstance().interactive) {\n        let customAnimation: NavigationAnimatedTransition = {\n          onTransitionEnd: (isSuccess: boolean) => {\n            console.log(\"===== current transition is \" + isSuccess);\n            CustomTransition.getInstance().recoverState();\n            CustomTransition.getInstance().proxy = undefined;\n          },\n          transition: (transitionProxy: NavigationTransitionProxy) => {\n            CustomTransition.getInstance().proxy = transitionProxy;\n            let targetIndex: string | undefined = operation == NavigationOperation.PUSH ?\n              (to.navDestinationId) : (from.navDestinationId);\n            if (targetIndex) {\n              CustomTransition.getInstance().fireInteractiveAnimation(targetIndex, operation);\n            }\n          },\n          isInteractive: CustomTransition.getInstance().interactive\n        }\n        return customAnimation;\n      }\n      let customAnimation: NavigationAnimatedTransition = {\n        onTransitionEnd: (isSuccess: boolean) => {\n          console.log(`current transition result is ${isSuccess}`)\n        },\n        timeout: 7000,\n\n        transition: (transitionProxy: NavigationTransitionProxy) => {\n          if (!from.navDestinationId || !to.navDestinationId) {\n            return;\n          }\n\n          let fromParam: AnimateCallback = CustomTransition.getInstance().getAnimateParam(from.navDestinationId);\n          let toParam: AnimateCallback = CustomTransition.getInstance().getAnimateParam(to.navDestinationId);\n          if (operation == NavigationOperation.PUSH) {\n            if (toParam.start) {\n              toParam.start(true, false);\n            }\n            animateTo({\n              duration: 500, onFinish: () => {\n                transitionProxy.finishTransition();\n              }\n            }, () => {\n              if (toParam.finish) {\n                toParam.finish(true, false);\n              }\n            })\n          } else {\n            if (fromParam.start) {\n              fromParam.start(true, true);\n            }\n            animateTo({\n              duration: 500, onFinish: () => {\n                transitionProxy.finishTransition();\n              }\n            }, () => {\n              if (fromParam.finish) {\n                fromParam.finish(true, true);\n              }\n            })\n          }\n        }\n      };\n      return customAnimation;\n    })\n  }\n}\n\nimport {CustomTransition} from './CustomNavigationUtils';\n\n@Builder\nexport function PageOneBuilder(name: string, param: Object) {\n  PageOne()\n}\n\n@Component\nexport struct PageOne {\n  pageInfos: NavPathStack = new NavPathStack();\n  @State translateX: string = '0';\n  pageId: string = '';\n  rectWidth: number = 0;\n  interactive: boolean = false;\n\n  registerCallback() {\n    CustomTransition.getInstance().registerNavParam(this.pageId, (isPush: boolean, isExit: boolean) => {\n      if (isPush) {\n        this.translateX = '100%';\n      } else {\n        this.translateX = '0';\n      }\n    }, (isPush: boolean, isExit: boolean) => {\n      if (isPush) {\n        this.translateX = '0';\n      } else {\n        this.translateX = '100%';\n      }\n    }, (isPush: boolean, isExit: boolean) => {\n      this.translateX = '0';\n    }, (operation: NavigationOperation) => {\n      if (operation == NavigationOperation.PUSH) {\n        this.translateX = '100%';\n        animateTo({\n          duration: 1000,\n          onFinish: () => {\n            this.translateX = '0';\n          }\n        }, () => {\n          this.translateX = '0';\n        })\n      } else {\n        this.translateX = '0';\n        animateTo({\n          duration: 1000,\n          onFinish: () => {\n            this.translateX = '0';\n          }\n        }, () => {\n          this.translateX = '100%';\n        })\n      }\n    }, 200);\n  }\n\n  build() {\n    NavDestination() {\n      Column() {\n        Button(`setInteractive`)\n          .onClick(() => {\n            CustomTransition.getInstance().interactive = !CustomTransition.getInstance().interactive;\n            this.interactive = CustomTransition.getInstance().interactive;\n          })\n\n        Button('pushPathByName', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pageInfos.pushDestinationByName('pageTwo', CustomTransition.getInstance().getAnimationId());\n          })\n      }\n      .size({ width: '100%', height: '100%' })\n    }\n    .title('pageOne')\n    .onDisAppear(() => {\n      CustomTransition.getInstance().unRegisterNavParam(this.pageId);\n    })\n    .onReady((context: NavDestinationContext) => {\n      this.pageInfos = context.pathStack;\n      if (context.navDestinationId) {\n        this.pageId = context.navDestinationId;\n        this.registerCallback();\n      }\n    })\n    .translate({ x: this.translateX })\n    .backgroundColor('#F1F3F5')\n    .gesture(PanGesture()\n      .onActionStart((event: GestureEvent) => {\n        this.rectWidth = event.target.area.width as number;\n        if (event.offsetX < 0) {\n          this.pageInfos.pushPath({ name: 'pageTwo', param: CustomTransition.getInstance().getAnimationId() });\n        } else {\n          this.pageInfos.pop();\n        }\n      })\n      .onActionUpdate((event: GestureEvent) => {\n        let rate = event.fingerList[0].localX / this.rectWidth;\n        CustomTransition.getInstance().updateProgress(rate);\n      })\n      .onActionEnd((event: GestureEvent) => {\n        let rate: number = event.fingerList[0].localX / this.rectWidth;\n        CustomTransition.getInstance().finishInteractiveAnimation(rate);\n      }))\n  }\n}\n\nimport {CustomTransition} from './CustomNavigationUtils'\n\n@Builder\nexport function PageTwoBuilder(name: string, param: Object) {\n  PageTwo({param: param as number})\n}\n\n@Component\nexport struct PageTwo {\n  pageInfos: NavPathStack = new NavPathStack();\n  @State translateX: string = '0';\n  pageId: string = '';\n  rectWidth: number = 0;\n  param: number = 0;\n\n  registerCallback() {\n    CustomTransition.getInstance().registerNavParam(this.pageId, (isPush: boolean, isExit: boolean) => {\n      if (isPush) {\n        this.translateX = '100%'\n      } else {\n        this.translateX = '0';\n      }\n    }, (isPush: boolean, isExit: boolean) => {\n      if (isPush) {\n        this.translateX = '0';\n      } else {\n        this.translateX = '100%'\n      }\n    }, (isPush: boolean, isExit: boolean) => {\n      this.translateX = '0';\n    }, (operation: NavigationOperation) => {\n      if (operation == NavigationOperation.PUSH) {\n        this.translateX = '100%';\n        animateTo({duration: 500, onFinish: () => {\n          this.translateX = '0';\n        }}, () => {\n          this.translateX = '0'\n        })\n      } else {\n        this.translateX = '0';\n        animateTo({duration: 500, onFinish: () => {\n          this.translateX = \"0\"\n        }}, () => {\n          this.translateX = '100%';\n        })\n      }\n    }, 2000)\n  }\n\n  build() {\n    NavDestination() {\n      Column() {\n        Button('pushPathByName', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pageInfos.pushPath({name:'pageOne', param: CustomTransition.getInstance().getAnimationId()})\n          })\n      }\n      .size({ width: '100%', height: '100%' })\n    }\n    .title('pageTwo')\n    .gesture(PanGesture()\n      .onActionStart((event: GestureEvent) => {\n        this.rectWidth = event.target.area.width as number;\n        if (event.offsetX < 0) {\n          this.pageInfos.pushPath({ name: 'pageOne', param: CustomTransition.getInstance().getAnimationId() });\n        } else {\n          this.pageInfos.pop();\n        }\n      })\n      .onActionUpdate((event: GestureEvent) => {\n        let rate = event.fingerList[0].localX / this.rectWidth;\n        CustomTransition.getInstance().updateProgress(rate);\n      })\n      .onActionEnd((event: GestureEvent) => {\n        let rate = event.fingerList[0].localX / this.rectWidth;\n        CustomTransition.getInstance().finishInteractiveAnimation(rate);\n      }))\n    .onAppear(() => {\n      this.registerCallback();\n    })\n    .onDisAppear(() => {\n      CustomTransition.getInstance().unRegisterNavParam(this.pageId);\n    })\n    .onReady((context: NavDestinationContext) => {\n      this.pageInfos = context.pathStack;\n      if (context.navDestinationId) {\n        this.pageId = context.navDestinationId;\n        this.registerCallback();\n      }\n    })\n    .translate({x: this.translateX})\n    .backgroundColor(Color.Yellow)\n  }\n}\n\nexport interface AnimateCallback {\n  finish: ((isPush: boolean, isExit: boolean) => void | undefined) | undefined;\n  start: ((isPush: boolean, isExit: boolean) => void | undefined) | undefined;\n  onFinish: ((isPush: boolean, isExit: boolean) => void | undefined) | undefined;\n  interactive: ((operation: NavigationOperation) => void | undefined) | undefined;\n  timeout: (number | undefined) | undefined;\n}\n\nconst customTransitionMap: Map<string, AnimateCallback> = new Map();\n\nexport class CustomTransition {\n  static delegate = new CustomTransition();\n  interactive: boolean = false;\n  proxy: NavigationTransitionProxy | undefined = undefined;\n  private animationId: number = 0;\n  operation: NavigationOperation = NavigationOperation.PUSH\n\n  static getInstance() {\n    return CustomTransition.delegate;\n  }\n\n  registerNavParam(name: string, startCallback: (operation: boolean, isExit: boolean) => void,\n    endCallback: (operation: boolean, isExit: boolean) => void,\n    onFinish: (operation: boolean, isExit: boolean) => void,\n    interactiveCallback: (operation: NavigationOperation) => void,\n    timeout: number): void {\n    if (customTransitionMap.has(name)) {\n      let param = customTransitionMap.get(name);\n      if (param != undefined) {\n        param.start = startCallback;\n        param.finish = endCallback;\n        param.timeout = timeout;\n        param.onFinish = onFinish;\n        param.interactive = interactiveCallback;\n        return;\n      }\n    }\n    let params: AnimateCallback = { timeout: timeout, start: startCallback, finish: endCallback, onFinish: onFinish,\n      interactive: interactiveCallback };\n    customTransitionMap.set(name, params);\n  }\n\n  getAnimationId() {\n    return Date.now();\n  }\n\n  unRegisterNavParam(name: string): void {\n    customTransitionMap.delete(name);\n  }\n\n  fireInteractiveAnimation(id: string, operation: NavigationOperation) {\n    let animation = customTransitionMap.get(id)?.interactive;\n    if (!animation) {\n      return;\n    }\n    animation(operation);\n  }\n\n  updateProgress(progress: number) {\n    if (!this.proxy?.updateTransition) {\n      return;\n    }\n    progress = this.operation == NavigationOperation.PUSH ? 1 - progress : progress;\n    this.proxy?.updateTransition(progress);\n  }\n\n  cancelTransition() {\n    if (this.proxy?.cancelTransition) {\n      this.proxy.cancelTransition();\n    }\n  }\n\n  recoverState() {\n    if (!this.proxy?.from.navDestinationId || !this.proxy?.to.navDestinationId) {\n      return;\n    }\n    let fromParam = customTransitionMap.get(this.proxy.from.navDestinationId);\n    if (fromParam?.onFinish) {\n      fromParam.onFinish(false, false);\n    }\n    let toParam = customTransitionMap.get(this.proxy?.to.navDestinationId);\n    if (toParam?.onFinish) {\n      toParam.onFinish(true, true);\n    }\n  }\n\n  finishTransition() {\n    this.proxy?.finishTransition();\n  }\n\n  finishInteractiveAnimation(rate: number) {\n    if (this.operation == NavigationOperation.PUSH) {\n      if (rate > 0.5) {\n        if (this.proxy?.cancelTransition) {\n          this.proxy.cancelTransition();\n        }\n      } else {\n        this.proxy?.finishTransition();\n      }\n    } else {\n      if (rate > 0.5) {\n        this.proxy?.finishTransition();\n      } else {\n        if (this.proxy?.cancelTransition) {\n          this.proxy.cancelTransition();\n        }\n      }\n    }\n  }\n\n  getAnimateParam(name: string): AnimateCallback {\n    let result: AnimateCallback = {\n      start: customTransitionMap.get(name)?.start,\n      finish: customTransitionMap.get(name)?.finish,\n      timeout: customTransitionMap.get(name)?.timeout,\n      onFinish: customTransitionMap.get(name)?.onFinish,\n      interactive: customTransitionMap.get(name)?.interactive,\n    };\n    return result;\n  }\n}\n\n{\n  \"routerMap\": [\n    {\n      \"name\": \"pageOne\",\n      \"pageSourceFile\": \"src/main/ets/pages/PageOne.ets\",\n      \"buildFunction\": \"PageOneBuilder\",\n      \"data\": {\n        \"description\": \"this is pageOne\"\n      }\n    },\n    {\n      \"name\": \"pageTwo\",\n      \"pageSourceFile\": \"src/main/ets/pages/PageTwo.ets\",\n      \"buildFunction\": \"PageTwoBuilder\"\n    }\n  ]\n}"
    }
]