[
    {
        "description": "该组件通过Flex布局实现了一个展示对话框的界面。布局宽度占据整个屏幕，高度设为100%，背景颜色为半透明的黑色（rgba(0, 0, 0, 0.1)）。组件的垂直方向上包含一个Row组件，内部嵌套一个Column组件。Column组件内部包含一个Text组件，用于显示“show dialog”文本。Text组件的样式包括字体大小为50vp，字体加粗（FontWeight.Bold），并且设置了点击事件。\n\n点击Text组件后，会触发一个对话框的显示。对话框的配置包括主标题和副标题，主标题颜色为RGB颜色（rgb(255, 192, 0)），副标题颜色为红色（Color.Red）。对话框的背景和前景图片分别引用了应用资源中的图片（$r('app.media.testBackgroundImg')和$r('app.media.testForegroundImg')）。对话框的关闭按钮样式为亮色调（IconStyle.LIGHT），主标题和副标题的相对位置设置为主标题在副标题下方（TitlePosition.BOTTOM），底部距离类型设置为存在菜单栏情况下的距离（BottomOffset.OFFSET_FOR_BAR）。\n\n对话框的点击和关闭事件分别绑定了回调函数，用于在控制台输出相应的日志信息。",
        "code": "// 导入必要的模块和组件\nimport { getMyUiContext } from '../entryability/EntryAbility';\nimport { UIContext, InterstitialDialogAction, IconStyle, TitlePosition, BottomOffset } from '@kit.ArkUI';\n\n// 定义Index组件，作为页面的入口组件\n@Entry\n@Component\nstruct Index {\n  build() {\n    // 使用Row组件作为根布局，占据整个屏幕宽度\n    Row() {\n      // 使用Column组件作为内部布局，占据整个屏幕宽度\n      Column() {\n        // 创建一个Text组件，显示“show dialog”文本\n        Text(\"show dialog\")\n          .fontSize(50) // 设置字体大小为50vp\n          .fontWeight(FontWeight.Bold) // 设置字体加粗\n          .onClick(() => { // 设置点击事件\n            // 获取UIContext对象\n            let ctx: UIContext | null = getMyUiContext();\n            // 创建InterstitialDialogAction对象，配置对话框的各项属性\n            let interstitialDialogAction: InterstitialDialogAction = new InterstitialDialogAction({\n              uiContext: ctx as UIContext, // 设置UIContext\n              title: \"主标题\", // 设置主标题文本\n              subtitle: \"副标题\", // 设置副标题文本\n              titleColor: 'rgb(255, 192, 0)', // 设置主标题颜色为RGB颜色\n              subtitleColor: Color.Red, // 设置副标题颜色为红色\n              backgroundImage: $r('app.media.testBackgroundImg'), // 设置背景图片\n              foregroundImage: $r('app.media.testForegroundImg'), // 设置前景图片\n              iconStyle: IconStyle.LIGHT, // 设置关闭按钮样式为亮色调\n              titlePosition: TitlePosition.BOTTOM, // 设置主标题在副标题下方\n              bottomOffsetType: BottomOffset.OFFSET_FOR_BAR, // 设置底部距离类型为存在菜单栏情况下的距离\n              onDialogClick: () => { console.log('outer dialog click action') }, // 设置对话框点击事件回调\n              onDialogClose: () => { console.log('outer close action') } // 设置对话框关闭事件回调\n            });\n            // 打开对话框\n            interstitialDialogAction.openDialog();\n          })\n      }\n      .width('100%') // 设置Column组件宽度为100%\n    }\n    .height('100%') // 设置Row组件高度为100%\n    .backgroundColor('rgba(0, 0, 0, 0.1)') // 设置背景颜色为半透明的黑色\n  }\n}"
    },
    {
        "description": "该示例展示了如何在鸿蒙ArkUI中创建一个带有主标题和副标题的对话框，并通过点击按钮触发对话框的显示。布局上，主标题位于副标题的上方，对话框的底部距离设置为不存在菜单栏的情况下的距离。样式上，主标题和副标题分别设置了不同的颜色，关闭按钮设置为暗色调。功能上，点击按钮后会弹出对话框，并可以响应对话框的点击和关闭事件。\n\n布局属性：\n- 按钮的宽度占据整个屏幕，高度为100%。\n- 按钮的背景颜色为半透明的黑色（rgba(0, 0, 0, 0.1)）。\n- 按钮内的文本字体大小为50vp，字体加粗。\n\n组件的样式和外观：\n- 主标题颜色为RGB(255, 192, 0)。\n- 副标题颜色为红色。\n- 关闭按钮的图标样式为暗色调。\n- 对话框的背景图片和前景图片分别引用了资源文件app.media.testBackgroundImg和app.media.testForegroundImg。\n\n组件的排列和嵌套关系：\n- 按钮位于Row组件内，Row组件的高度为100%。\n- 按钮内的文本位于Column组件内，Column组件的宽度为100%。\n\n组件的功能和交互：\n- 点击按钮后，会调用getMyUiContext()方法获取UIContext，并创建一个InterstitialDialogAction对象。\n- 通过调用openDialog()方法显示对话框。\n- 对话框的点击和关闭事件分别绑定了回调函数，用于在控制台输出日志。",
        "code": "import { getMyUiContext } from '../entryability/EntryAbility';\nimport { UIContext, InterstitialDialogAction, IconStyle, TitlePosition, BottomOffset } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column() {\n        Text(\"show dialog\")\n          .fontSize(50) // 设置文本字体大小为50vp\n          .fontWeight(FontWeight.Bold) // 设置文本字体加粗\n          .onClick(() => { // 设置点击事件\n            let ctx: UIContext | null = getMyUiContext(); // 获取UIContext\n            let interstitialDialogAction: InterstitialDialogAction = new InterstitialDialogAction({\n              uiContext: ctx as UIContext, // 设置UIContext\n              title: \"主标题\", // 设置主标题\n              subtitle: \"副标题\", // 设置副标题\n              titleColor: 'rgb(255, 192, 0)', // 设置主标题颜色为RGB(255, 192, 0)\n              subtitleColor: Color.Red, // 设置副标题颜色为红色\n              backgroundImage: $r('app.media.testBackgroundImg'), // 设置背景图片\n              foregroundImage: $r('app.media.testForegroundImg'), // 设置前景图片\n              iconStyle: IconStyle.DARK, // 设置关闭按钮图标样式为暗色调\n              titlePosition: TitlePosition.TOP, // 设置主标题位于副标题上方\n              bottomOffsetType: BottomOffset.OFFSET_FOR_NONE, // 设置底部距离为不存在菜单栏的情况下的距离\n              onDialogClick: () => { console.log('outer dialog click action') }, // 设置对话框点击事件回调\n              onDialogClose: () => { console.log('outer close action') } // 设置对话框关闭事件回调\n            });\n            interstitialDialogAction.openDialog(); // 显示对话框\n          })\n      }\n      .width('100%') // 设置Column宽度为100%\n    }\n    .height('100%') // 设置Row高度为100%\n    .backgroundColor('rgba(0, 0, 0, 0.1)') // 设置背景颜色为半透明的黑色\n  }\n}"
    }
]