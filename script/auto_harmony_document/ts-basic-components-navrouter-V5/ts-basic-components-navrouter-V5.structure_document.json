{
    "description": "导航组件，默认提供点击响应处理，不需要开发者自定义点击事件逻辑。",
    "details": "该组件从API Version 9开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
    "interfaces": [
        {
            "description": "NavRouter()",
            "params": {}
        },
        {
            "description": "NavRouter(value: RouteInfo)",
            "params": {
                "value": {
                    "type": "RouteInfo",
                    "required": true,
                    "description": "路由信息"
                }
            }
        }
    ],
    "attributes": {
        "mode10+": {
            "description": "设置指定点击NavRouter跳转到NavDestination页面时，使用的路由模式。",
            "params": {
                "mode": {
                    "type": "NavRouteMode",
                    "required": true,
                    "description": "指定点击NavRouter跳转到NavDestination页面时，使用的路由模式。",
                    "default": "NavRouteMode.PUSH_WITH_RECREATE"
                }
            }
        }
    },
    "events": {
        "onStateChange": {
            "description": "组件激活状态切换时触发该回调。开发者点击激活NavRouter，加载对应的NavDestination子组件时，回调onStateChange(true)。NavRouter对应的NavDestination子组件不再显示时，回调onStateChange(false)。",
            "params": {
                "isActivated": {
                    "type": "boolean",
                    "required": true,
                    "description": "isActivated为true时表示激活，为false时表示未激活。"
                }
            }
        }
    },
    "rules": [
        "必须包含两个子组件，其中第二个子组件必须为NavDestination。",
        "子组件个数异常时：1. 有且仅有1个时，触发路由到NavDestination的能力失效。2. 有且仅有1个时，且使用NavDestination场景下，不进行路由。3. 大于2个时，后续的子组件不显示。4. 第二个子组件不为NavDestination时，触发路由功能失效。"
    ],
    "examples": [
        "// xxx.ets\n@Entry\n@Component\nstruct NavRouterExample {\n  @State isActiveWLAN: boolean = false\n  @State isActiveBluetooth: boolean = false\n\n  build() {\n    Navigation() {\n      NavRouter() {\n        Row() {\n          Row()\n            .width(30)\n            .height(30)\n            .borderRadius(30)\n            .margin({ left: 3, right: 10 })\n            .backgroundColor(Color.Pink)\n          Text(`WLAN`)\n            .fontSize(22)\n            .fontWeight(500)\n            .textAlign(TextAlign.Center)\n        }\n        .width('90%')\n        .height(60)\n\n        NavDestination() {\n          Flex({ direction: FlexDirection.Row }) {\n            Text('未找到可用WLAN').fontSize(30).padding({ left: 15 })\n          }\n        }.title(\"WLAN\")\n      }\n      .margin({ top: 10, bottom: 10 })\n      .backgroundColor(this.isActiveWLAN ? '#ccc' : '#fff')\n      .borderRadius(20)\n      .mode(NavRouteMode.PUSH_WITH_RECREATE)\n      .onStateChange((isActivated: boolean) => {\n        this.isActiveWLAN = isActivated\n      })\n\n      NavRouter() {\n        Row() {\n          Row()\n            .width(30)\n            .height(30)\n            .borderRadius(30)\n            .margin({ left: 3, right: 10 })\n            .backgroundColor(Color.Pink)\n          Text(`蓝牙`)\n            .fontSize(22)\n            .fontWeight(500)\n            .textAlign(TextAlign.Center)\n        }\n        .width('90%')\n        .height(60)\n\n        NavDestination() {\n          Flex({ direction: FlexDirection.Row }) {\n            Text('未找到可用蓝牙').fontSize(30).padding({ left: 15 })\n          }\n        }.title(\"蓝牙\")\n      }\n      .margin({ top: 10, bottom: 10 })\n      .backgroundColor(this.isActiveBluetooth ? '#ccc' : '#fff')\n      .borderRadius(20)\n      .mode(NavRouteMode.REPLACE)\n      .onStateChange((isActivated: boolean) => {\n        this.isActiveBluetooth = isActivated\n      })\n    }\n    .height('100%')\n    .width('100%')\n    .title('设置')\n    .backgroundColor(\"#F2F3F5\")\n    .titleMode(NavigationTitleMode.Free)\n    .mode(NavigationMode.Auto)\n  }\n}"
    ],
    "is_common_attrs": true
}