/*\n实现一个导航路由示例，包含两个导航路由：WLAN和蓝牙。每个导航路由包含一个导航内容和一个导航目的地。导航内容显示一个带有图标和文本的行，导航目的地显示一个文本提示。导航路由的背景颜色会根据激活状态变化，激活时背景颜色为灰色，未激活时为白色。导航路由的模式分别为PUSH_WITH_RECREATE和REPLACE。\n*/\n\n@Entry\n@Component\nstruct NavRouterExample {\n  @State isActiveWLAN: boolean = false // 用于记录WLAN导航的激活状态\n  @State isActiveBluetooth: boolean = false // 用于记录蓝牙导航的激活状态\n\n  build() {\n    Navigation() {\n      // WLAN导航路由\n      NavRouter() {\n        // WLAN导航内容\n        Row() {\n          Row()\n            .width(30) // 设置宽度为30\n            .height(30) // 设置高度为30\n            .borderRadius(30) // 设置圆角半径为30\n            .margin({ left: 3, right: 10 }) // 设置左右边距\n            .backgroundColor(Color.Pink) // 设置背景颜色为粉色\n          Text(`WLAN`)\n            .fontSize(22) // 设置字体大小为22\n            .fontWeight(500) // 设置字体粗细为500\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n        }\n        .width('90%') // 设置宽度为父容器的90%\n        .height(60) // 设置高度为60\n\n        // WLAN导航目的地\n        NavDestination() {\n          Flex({ direction: FlexDirection.Row }) {\n            Text('未找到可用WLAN').fontSize(30).padding({ left: 15 }) // 设置文本字体大小为30，左边距为15\n          }\n        }.title("WLAN") // 设置导航目的地的标题为WLAN\n      }\n      .margin({ top: 10, bottom: 10 }) // 设置上下边距为10\n      .backgroundColor(this.isActiveWLAN ? '#ccc' : '#fff') // 根据激活状态改变背景颜色，激活时为灰色，未激活时为白色\n      .borderRadius(20) // 设置圆角半径为20\n      .mode(NavRouteMode.PUSH_WITH_RECREATE) // 设置路由模式为PUSH_WITH_RECREATE\n      .onStateChange((isActivated: boolean) => {\n        this.isActiveWLAN = isActivated // 监听激活状态变化，更新isActiveWLAN状态\n      })\n\n      // 蓝牙导航路由，与WLAN导航类似\n      NavRouter() {\n        Row() {\n          Row()\n            .width(30) // 设置宽度为30\n            .height(30) // 设置高度为30\n            .borderRadius(30) // 设置圆角半径为30\n            .margin({ left: 3, right: 10 }) // 设置左右边距\n            .backgroundColor(Color.Pink) // 设置背景颜色为粉色\n          Text(`蓝牙`)\n            .fontSize(22) // 设置字体大小为22\n            .fontWeight(500) // 设置字体粗细为500\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n        }\n        .width('90%') // 设置宽度为父容器的90%\n        .height(60) // 设置高度为60\n\n        NavDestination() {\n          Flex({ direction: FlexDirection.Row }) {\n            Text('未找到可用蓝牙').fontSize(30).padding({ left: 15 }) // 设置文本字体大小为30，左边距为15\n          }\n        }.title("蓝牙") // 设置导航目的地的标题为蓝牙\n      }\n      .margin({ top: 10, bottom: 10 }) // 设置上下边距为10\n      .backgroundColor(this.isActiveBluetooth ? '#ccc' : '#fff') // 根据激活状态改变背景颜色，激活时为灰色，未激活时为白色\n      .borderRadius(20) // 设置圆角半径为20\n      .mode(NavRouteMode.REPLACE) // 设置路由模式为REPLACE\n      .onStateChange((isActivated: boolean) => {\n        this.isActiveBluetooth = isActivated // 监听激活状态变化，更新isActiveBluetooth状态\n      })\n    }\n    .height('100%') // 设置高度为父容器的100%\n    .width('100%') // 设置宽度为父容器的100%\n    .title('设置') // 设置导航栏标题为“设置”\n    .backgroundColor("#F2F3F5") // 设置背景颜色为浅灰色\n    .titleMode(NavigationTitleMode.Free) // 设置标题模式为自由模式\n    .mode(NavigationMode.Auto) // 设置导航模式为自动模式\n  }\n}