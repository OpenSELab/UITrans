[
    {
        "description": "该组件通过 Navigation 和 NavRouter 组件实现了一个导航路由界面，用于在不同的设置选项之间进行切换。布局宽度占据整个屏幕，高度设为 100%，背景颜色为 #F2F3F5。组件的垂直方向上被分为两个部分，每个部分包含一个导航路由项。每个导航路由项由一个 Row 组件和一个 NavDestination 组件组成，Row 组件用于显示路由项的图标和标题，NavDestination 组件用于显示路由项的详细内容。\n\n导航路由项的样式包括背景颜色、边框圆角、宽度和高度等属性，支持不同的样式展示。导航路由项之间通过 margin 属性进行分隔。导航路由项的功能包括点击事件和状态效果，用户可以通过点击导航路由项触发相应操作，导航路由项也可以在激活或未激活状态下进行展示。\n\n整个布局通过 Navigation 组件保证导航路由项在垂直方向上有序排列，确保界面整洁美观。",
        "code": "// xxx.ets\n@Entry\n@Component\nstruct NavRouterExample {\n  @State isActiveWLAN: boolean = false // 状态变量，表示 WLAN 路由项是否处于激活状态\n  @State isActiveBluetooth: boolean = false // 状态变量，表示蓝牙路由项是否处于激活状态\n\n  build() {\n    Navigation() {\n      NavRouter() {\n        Row() {\n          Row()\n            .width(30) // 设置 Row 组件的宽度为 30vp\n            .height(30) // 设置 Row 组件的高度为 30vp\n            .borderRadius(30) // 设置 Row 组件的边框圆角为 30vp\n            .margin({ left: 3, right: 10 }) // 设置 Row 组件的左右边距为 3vp 和 10vp\n            .backgroundColor(Color.Pink) // 设置 Row 组件的背景颜色为粉色\n          Text('WLAN') // 显示文本 \"WLAN\"\n            .fontSize(22) // 设置文本的字体大小为 22vp\n            .fontWeight(500) // 设置文本的字体粗细为 500\n            .textAlign(TextAlign.Center) // 设置文本的对齐方式为居中对齐\n        }\n        .width('90%') // 设置 Row 组件的宽度为父容器的 90%\n        .height(60) // 设置 Row 组件的高度为 60vp\n\n        NavDestination() {\n          Flex({ direction: FlexDirection.Row }) {\n            Text('未找到可用WLAN').fontSize(30).padding({ left: 15 }) // 显示文本 \"未找到可用WLAN\"，字体大小为 30vp，左边距为 15vp\n          }\n        }.title(\"WLAN\") // 设置 NavDestination 组件的标题为 \"WLAN\"\n      }\n      .margin({ top: 10, bottom: 10 }) // 设置 NavRouter 组件的上下边距为 10vp\n      .backgroundColor(this.isActiveWLAN ? '#ccc' : '#fff') // 根据 isActiveWLAN 状态变量的值设置 NavRouter 组件的背景颜色\n      .borderRadius(20) // 设置 NavRouter 组件的边框圆角为 20vp\n      .mode(NavRouteMode.PUSH_WITH_RECREATE) // 设置 NavRouter 组件的导航模式为 PUSH_WITH_RECREATE\n      .onStateChange((isActivated: boolean) => {\n        this.isActiveWLAN = isActivated // 当 NavRouter 组件的状态发生变化时，更新 isActiveWLAN 状态变量的值\n      })\n\n      NavRouter() {\n        Row() {\n          Row()\n            .width(30) // 设置 Row 组件的宽度为 30vp\n            .height(30) // 设置 Row 组件的高度为 30vp\n            .borderRadius(30) // 设置 Row 组件的边框圆角为 30vp\n            .margin({ left: 3, right: 10 }) // 设置 Row 组件的左右边距为 3vp 和 10vp\n            .backgroundColor(Color.Pink) // 设置 Row 组件的背景颜色为粉色\n          Text('蓝牙') // 显示文本 \"蓝牙\"\n            .fontSize(22) // 设置文本的字体大小为 22vp\n            .fontWeight(500) // 设置文本的字体粗细为 500\n            .textAlign(TextAlign.Center) // 设置文本的对齐方式为居中对齐\n        }\n        .width('90%') // 设置 Row 组件的宽度为父容器的 90%\n        .height(60) // 设置 Row 组件的高度为 60vp\n\n        NavDestination() {\n          Flex({ direction: FlexDirection.Row }) {\n            Text('未找到可用蓝牙').fontSize(30).padding({ left: 15 }) // 显示文本 \"未找到可用蓝牙\"，字体大小为 30vp，左边距为 15vp\n          }\n        }.title(\"蓝牙\") // 设置 NavDestination 组件的标题为 \"蓝牙\"\n      }\n      .margin({ top: 10, bottom: 10 }) // 设置 NavRouter 组件的上下边距为 10vp\n      .backgroundColor(this.isActiveBluetooth ? '#ccc' : '#fff') // 根据 isActiveBluetooth 状态变量的值设置 NavRouter 组件的背景颜色\n      .borderRadius(20) // 设置 NavRouter 组件的边框圆角为 20vp\n      .mode(NavRouteMode.REPLACE) // 设置 NavRouter 组件的导航模式为 REPLACE\n      .onStateChange((isActivated: boolean) => {\n        this.isActiveBluetooth = isActivated // 当 NavRouter 组件的状态发生变化时，更新 isActiveBluetooth 状态变量的值\n      })\n    }\n    .height('100%') // 设置 Navigation 组件的高度为 100%\n    .width('100%') // 设置 Navigation 组件的宽度为 100%\n    .title('设置') // 设置 Navigation 组件的标题为 \"设置\"\n    .backgroundColor(\"#F2F3F5\") // 设置 Navigation 组件的背景颜色为 #F2F3F5\n    .titleMode(NavigationTitleMode.Free) // 设置 Navigation 组件的标题模式为 Free\n    .mode(NavigationMode.Auto) // 设置 Navigation 组件的导航模式为 Auto\n  }\n}"
    }
]