Title: Matrix2D-画布绘制-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-components-canvas-matrix2d-V5

Markdown Content:
矩阵对象，可以对矩阵进行缩放、旋转、平移等变换。

说明

从 API Version 8 开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

接口
--

Matrix2D(unit?: LengthMetricsUnit)

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

属性
--

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### scaleX

2.  @Entry
3.  @Component
4.  struct Matrix2DScaleX {
5.    @State message: string = 'Matrix2D ScaleX'

7.    printMatrix(title: string, matrix: Matrix2D) {
8.      console.log(title)
9.      console.log("Matrix \[scaleX = " + matrix.scaleX + ", scaleY = " + matrix.scaleY +
10.                  ", rotateX = " + matrix.rotateX + ", rotateY = " + matrix.rotateY +
11.                  ", translateX = " + matrix.translateX + ", translateY = " + matrix.translateY + "\]")
12.    }
13.    build() {
14.      Row() {
15.        Column() {
16.          Text(this.message)
17.            .fontSize(20)
18.            .fontWeight(FontWeight.Bold)
19.          Button("Set scaleX")
20.            .onClick(() => {
21.              let matrix : Matrix2D = new Matrix2D()
22.              matrix.scaleX = 1
23.              this.printMatrix(this.message, matrix)
24.            })
25.        }
26.        .width('100%')
27.      }
28.      .height('100%')
29.    }
30.  }

### scaleY

2.  @Entry
3.  @Component
4.  struct Matrix2DScaleY {
5.    @State message: string = 'Matrix2D ScaleY'

7.    printMatrix(title: string, matrix: Matrix2D) {
8.      console.log(title)
9.      console.log("Matrix \[scaleX = " + matrix.scaleX + ", scaleY = " + matrix.scaleY +
10.                  ", rotateX = " + matrix.rotateX + ", rotateY = " + matrix.rotateY +
11.                  ", translateX = " + matrix.translateX + ", translateY = " + matrix.translateY + "\]")
12.    }
13.    build() {
14.      Row() {
15.        Column() {
16.          Text(this.message)
17.            .fontSize(20)
18.            .fontWeight(FontWeight.Bold)
19.          Button("Set scaleY")
20.            .onClick(() => {
21.              let matrix : Matrix2D = new Matrix2D()
22.              matrix.scaleY = 1
23.              this.printMatrix(this.message, matrix)
24.            })
25.        }
26.        .width('100%')
27.      }
28.      .height('100%')
29.    }
30.  }

### rotateX

2.  @Entry
3.  @Component
4.  struct Matrix2DRotateX {
5.    @State message: string = 'Matrix2D RotateX'

7.    printMatrix(title: string, matrix: Matrix2D) {
8.      console.log(title)
9.      console.log("Matrix \[scaleX = " + matrix.scaleX + ", scaleY = " + matrix.scaleY +
10.                  ", rotateX = " + matrix.rotateX + ", rotateY = " + matrix.rotateY +
11.                  ", translateX = " + matrix.translateX + ", translateY = " + matrix.translateY + "\]")
12.    }
13.    build() {
14.      Row() {
15.        Column() {
16.          Text(this.message)
17.            .fontSize(20)
18.            .fontWeight(FontWeight.Bold)
19.          Button("Set rotateX")
20.            .onClick(() => {
21.              let matrix : Matrix2D = new Matrix2D()
22.              matrix.rotateX = Math.sin(45 / Math.PI)
23.              this.printMatrix(this.message, matrix)
24.            })
25.        }
26.        .width('100%')
27.      }
28.      .height('100%')
29.    }
30.  }

### rotateY

2.  @Entry
3.  @Component
4.  struct Matrix2DRotateY {
5.    @State message: string = 'Matrix2D RotateY'

7.    printMatrix(title: string, matrix: Matrix2D) {
8.      console.log(title)
9.      console.log("Matrix \[scaleX = " + matrix.scaleX + ", scaleY = " + matrix.scaleY +
10.                  ", rotateX = " + matrix.rotateX + ", rotateY = " + matrix.rotateY +
11.                  ", translateX = " + matrix.translateX + ", translateY = " + matrix.translateY + "\]")
12.    }
13.    build() {
14.      Row() {
15.        Column() {
16.          Text(this.message)
17.            .fontSize(20)
18.            .fontWeight(FontWeight.Bold)
19.          Button("Set rotateY")
20.            .onClick(() => {
21.              let matrix : Matrix2D = new Matrix2D()
22.              matrix.rotateY = Math.cos(45 / Math.PI)
23.              this.printMatrix(this.message, matrix)
24.            })
25.        }
26.        .width('100%')
27.      }
28.      .height('100%')
29.    }
30.  }

### translateX

2.  @Entry
3.  @Component
4.  struct Matrix2DTranslateX {
5.    @State message: string = 'Matrix2D TranslateX'

7.    printMatrix(title: string, matrix: Matrix2D) {
8.      console.log(title)
9.      console.log("Matrix \[scaleX = " + matrix.scaleX + ", scaleY = " + matrix.scaleY +
10.                  ", rotateX = " + matrix.rotateX + ", rotateY = " + matrix.rotateY +
11.                  ", translateX = " + matrix.translateX + ", translateY = " + matrix.translateY + "\]")
12.    }
13.    build() {
14.      Row() {
15.        Column() {
16.          Text(this.message)
17.            .fontSize(20)
18.            .fontWeight(FontWeight.Bold)
19.          Button("Set translateX")
20.            .onClick(() => {
21.              let matrix : Matrix2D = new Matrix2D()
22.              matrix.translateX = 10
23.              this.printMatrix(this.message, matrix)
24.            })
25.        }
26.        .width('100%')
27.      }
28.      .height('100%')
29.    }
30.  }

### translateY

2.  @Entry
3.  @Component
4.  struct Matrix2DTranslateY {
5.    @State message: string = 'Matrix2D TranslateY'

7.    printMatrix(title: string, matrix: Matrix2D) {
8.      console.log(title)
9.      console.log("Matrix \[scaleX = " + matrix.scaleX + ", scaleY = " + matrix.scaleY +
10.                  ", rotateX = " + matrix.rotateX + ", rotateY = " + matrix.rotateY +
11.                  ", translateX = " + matrix.translateX + ", translateY = " + matrix.translateY + "\]")
12.    }
13.    build() {
14.      Row() {
15.        Column() {
16.          Text(this.message)
17.            .fontSize(20)
18.            .fontWeight(FontWeight.Bold)
19.          Button("Set translateY")
20.            .onClick(() => {
21.              let matrix : Matrix2D = new Matrix2D()
22.              matrix.translateY = 10
23.              this.printMatrix(this.message, matrix)
24.            })
25.        }
26.        .width('100%')
27.      }
28.      .height('100%')
29.    }
30.  }

方法
--

### identity

identity(): Matrix2D

创建一个单位矩阵。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

**示例：**

2.  @Entry
3.  @Component
4.  struct Matrix2DIdentity {
5.    @State message: string = 'Matrix2D Identity'

7.    printMatrix(title: string, matrix: Matrix2D) {
8.      console.log(title)
9.      console.log("Matrix \[scaleX = " + matrix.scaleX + ", scaleY = " + matrix.scaleY +
10.                  ", rotateX = " + matrix.rotateX + ", rotateY = " + matrix.rotateY +
11.                  ", translateX = " + matrix.translateX + ", translateY = " + matrix.translateY + "\]")
12.    }
13.    build() {
14.      Row() {
15.        Column() {
16.          Text(this.message)
17.            .fontSize(20)
18.            .fontWeight(FontWeight.Bold)
19.          Button("matrix identity")
20.            .onClick(() => {
21.              let matrix : Matrix2D = new Matrix2D()
22.              matrix = matrix.identity()
23.              this.printMatrix(this.message, matrix)
24.            })
25.        }
26.        .width('100%')
27.      }
28.      .height('100%')
29.    }
30.  }

### invert

invert(): Matrix2D

得到当前矩阵的逆矩阵。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

**示例：**

2.  @Entry
3.  @Component
4.  struct Matrix2DInvert {
5.    @State message: string = 'Matrix2D Invert'

7.    printMatrix(title: string, matrix: Matrix2D) {
8.      console.log(title)
9.      console.log("Matrix \[scaleX = " + matrix.scaleX + ", scaleY = " + matrix.scaleY +
10.                  ", rotateX = " + matrix.rotateX + ", rotateY = " + matrix.rotateY +
11.                  ", translateX = " + matrix.translateX + ", translateY = " + matrix.translateY + "\]")
12.    }
13.    build() {
14.      Row() {
15.        Column() {
16.          Text(this.message)
17.            .fontSize(20)
18.            .fontWeight(FontWeight.Bold)
19.          Button("matrix invert")
20.            .onClick(() => {
21.              let matrix : Matrix2D = new Matrix2D()
22.              matrix.scaleX = 2
23.              matrix.scaleY = 1
24.              matrix.rotateX = 0
25.              matrix.rotateY = 0
26.              matrix.translateX = 10
27.              matrix.translateY = 20
28.              matrix.invert()
29.              this.printMatrix(this.message, matrix)
30.            })
31.        }
32.        .width('100%')
33.      }
34.      .height('100%')
35.    }
36.  }

### multiply(deprecated)

multiply(other?: Matrix2D): Matrix2D

当前矩阵与目标矩阵相乘。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。该接口为空接口。

该接口从API version 10开始废弃。

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| other | Matrix2D | 否 | 目标矩阵。
默认值：null。

 |

**返回值：**

**示例：**

2.  @Entry
3.  @Component
4.  struct Matrix2DMultiply {
5.    @State message: string = 'Matrix2D Multiply'

7.    printMatrix(title: string, matrix: Matrix2D) {
8.      console.log(title)
9.      console.log("Matrix \[scaleX = " + matrix.scaleX + ", scaleY = " + matrix.scaleY +
10.                  ", rotateX = " + matrix.rotateX + ", rotateY = " + matrix.rotateY +
11.                  ", translateX = " + matrix.translateX + ", translateY = " + matrix.translateY + "\]")
12.    }
13.    build() {
14.      Row() {
15.        Column() {
16.          Text(this.message)
17.            .fontSize(20)
18.            .fontWeight(FontWeight.Bold)
19.          Button("matrix multiply")
20.            .onClick(() => {
21.              let matrix : Matrix2D = new Matrix2D()
22.              matrix.scaleX = 1
23.              matrix.scaleY = 1
24.              matrix.rotateX = 0
25.              matrix.rotateY = 0
26.              matrix.translateX = 0
27.              matrix.translateY = 0
28.              let other: Matrix2D = new Matrix2D()
29.              other.scaleX = 2
30.              other.scaleY = 2
31.              other.rotateX = 0
32.              other.rotateY = 0
33.              other.translateX = 10
34.              other.translateY = 10
35.              other.multiply(other)
36.              this.printMatrix(this.message, matrix)
37.            })
38.        }
39.        .width('100%')
40.      }
41.      .height('100%')
42.    }
43.  }

### rotate(deprecated)

rotate(rx?: number, ry?: number): Matrix2D

对当前矩阵进行旋转运算。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。该接口为空接口。

该接口从API version 10开始废弃，推荐使用[rotate](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-components-canvas-matrix2d-V5#rotate10)。

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| rx | number | 否 | 旋转点的水平方向坐标。
默认单位为vp。

默认值：0。

 |
| ry | number | 否 | 旋转点的垂直方向坐标。

默认单位为vp。

默认值：0。

 |

**返回值：**

**示例：**

2.  @Entry
3.  @Component
4.  struct Matrix2DRotate {
5.    @State message: string = 'Matrix2D Rotate'

7.    printMatrix(title: string, matrix: Matrix2D) {
8.      console.log(title)
9.      console.log("Matrix \[scaleX = " + matrix.scaleX + ", scaleY = " + matrix.scaleY +
10.                  ", rotateX = " + matrix.rotateX + ", rotateY = " + matrix.rotateY +
11.                  ", translateX = " + matrix.translateX + ", translateY = " + matrix.translateY + "\]")
12.    }
13.    build() {
14.      Row() {
15.        Column() {
16.          Text(this.message)
17.            .fontSize(20)
18.            .fontWeight(FontWeight.Bold)
19.          Button("matrix rotate")
20.            .onClick(() => {
21.              let matrix : Matrix2D = new Matrix2D()
22.              matrix.scaleX = 1
23.              matrix.scaleY = 1
24.              matrix.rotateX = 0
25.              matrix.rotateY = 0
26.              matrix.translateX = 0
27.              matrix.translateY = 0
28.              matrix.rotate(10, 10)
29.              this.printMatrix(this.message, matrix)
30.            })
31.        }
32.        .width('100%')
33.      }
34.      .height('100%')
35.    }
36.  }

### rotate10+

rotate(degree: number, rx?: number, ry?: number): Matrix2D

以旋转点为中心、对当前矩阵进行右乘旋转运算。

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| degree | number | 是 | 旋转角度，单位为弧度。顺时针方向为正角度，可以通过Math.PI / 180将角度转换为弧度值。
默认值：0。

 |
| rx | number | 否 | 旋转点的水平方向坐标。

默认单位为vp。

默认值：0。

 |
| ry | number | 否 | 旋转点的垂直方向坐标。

默认单位为vp。

默认值：0。

 |

**返回值：**

**示例：**

2.  @Entry
3.  @Component
4.  struct Matrix2DRotate {
5.    @State message: string = 'Matrix2D Rotate'

7.    printMatrix(title: string, matrix: Matrix2D) {
8.      console.log(title)
9.      console.log("Matrix \[scaleX = " + matrix.scaleX + ", scaleY = " + matrix.scaleY +
10.                  ", rotateX = " + matrix.rotateX + ", rotateY = " + matrix.rotateY +
11.                  ", translateX = " + matrix.translateX + ", translateY = " + matrix.translateY + "\]")
12.    }
13.    build() {
14.      Row() {
15.        Column() {
16.          Text(this.message)
17.            .fontSize(20)
18.            .fontWeight(FontWeight.Bold)
19.          Button("matrix rotate")
20.            .onClick(() => {
21.              let matrix : Matrix2D = new Matrix2D()
22.              matrix.scaleX = 1
23.              matrix.scaleY = 1
24.              matrix.rotateX = 0
25.              matrix.rotateY = 0
26.              matrix.translateX = 0
27.              matrix.translateY = 0
28.              matrix.rotate(90 / Math.PI, 10, 10)
29.              this.printMatrix(this.message, matrix)
30.            })
31.        }
32.        .width('100%')
33.      }
34.      .height('100%')
35.    }
36.  }

### translate

translate(tx?: number, ty?: number): Matrix2D

对当前矩阵进行左乘平移运算。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| tx | number | 否 | 水平方向平移距离。
默认单位为vp。

默认值：0。

 |
| ty | number | 否 | 垂直方向平移距离。

默认单位为vp。

默认值：0。

 |

**返回值：**

**示例：**

2.  @Entry
3.  @Component
4.  struct Matrix2DTranslate {
5.    @State message: string = 'Matrix2D Translate'

7.    printMatrix(title: string, matrix: Matrix2D) {
8.      console.log(title)
9.      console.log("Matrix \[scaleX = " + matrix.scaleX + ", scaleY = " + matrix.scaleY +
10.                  ", rotateX = " + matrix.rotateX + ", rotateY = " + matrix.rotateY +
11.                  ", translateX = " + matrix.translateX + ", translateY = " + matrix.translateY + "\]")
12.    }
13.    build() {
14.      Row() {
15.        Column() {
16.          Text(this.message)
17.            .fontSize(20)
18.            .fontWeight(FontWeight.Bold)
19.          Button("matrix translate")
20.            .onClick(() => {
21.              let matrix : Matrix2D = new Matrix2D()
22.              matrix.scaleX = 1
23.              matrix.scaleY = 1
24.              matrix.rotateX = 0
25.              matrix.rotateY = 0
26.              matrix.translateX = 0
27.              matrix.translateY = 0
28.              matrix.translate(100, 100)
29.              this.printMatrix(this.message, matrix)
30.            })
31.        }
32.        .width('100%')
33.      }
34.      .height('100%')
35.    }
36.  }

### scale

scale(sx?: number, sy?: number): Matrix2D

对当前矩阵进行右乘缩放运算。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数 | 类型 | 必填 | 描述 |
| --- | --- | --- | --- |
| sx | number | 否 | 水平缩放比例系数。
默认值：1。

 |
| sy | number | 否 | 垂直缩放比例系数。

默认值：1。

 |

**返回值：**

**示例：**

2.  @Entry
3.  @Component
4.  struct Matrix2DScale {
5.    @State message: string = 'Matrix2D Scale'

7.    printMatrix(title: string, matrix: Matrix2D) {
8.      console.log(title)
9.      console.log("Matrix \[scaleX = " + matrix.scaleX + ", scaleY = " + matrix.scaleY +
10.                  ", rotateX = " + matrix.rotateX + ", rotateY = " + matrix.rotateY +
11.                  ", translateX = " + matrix.translateX + ", translateY = " + matrix.translateY + "\]")
12.    }
13.    build() {
14.      Row() {
15.        Column() {
16.          Text(this.message)
17.            .fontSize(20)
18.            .fontWeight(FontWeight.Bold)
19.          Button("matrix scale")
20.            .onClick(() => {
21.              let matrix : Matrix2D = new Matrix2D()
22.              matrix.scaleX = 1
23.              matrix.scaleY = 1
24.              matrix.rotateX = 0
25.              matrix.rotateY = 0
26.              matrix.translateX = 0
27.              matrix.translateY = 0
28.              matrix.scale(0.5, 0.5)
29.              this.printMatrix(this.message, matrix)
30.            })
31.        }
32.        .width('100%')
33.      }
34.      .height('100%')
35.    }
36.  }
