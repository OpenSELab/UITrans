{
    "description": "仅在Tabs中使用，对应一个切换页签的内容视图。",
    "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
    "interfaces": [
        {
            "description": "TabContent()",
            "params": {}
        }
    ],
    "attributes": {
        "tabBar": {
            "description": "设置TabBar上显示内容。",
            "params": {
                "value": {
                    "type": [
                        "string",
                        "Resource",
                        "CustomBuilder",
                        {
                            "icon": [
                                "string",
                                "Resource"
                            ],
                            "text": [
                                "string",
                                "Resource"
                            ]
                        }
                    ],
                    "required": true,
                    "description": "TabBar上显示的内容。"
                }
            }
        },
        "tabBar9+": {
            "description": "设置TabBar上显示内容。底部样式没有下划线效果。icon异常时显示灰色图块。",
            "params": {
                "value": {
                    "type": [
                        "SubTabBarStyle",
                        "BottomTabBarStyle"
                    ],
                    "required": true,
                    "description": "TabBar上显示的内容。"
                }
            }
        }
    },
    "events": {
        "onWillShow12+": {
            "description": "逻辑回调，TabContent将要显示的时候触发该回调。场景包括TabContent首次显示，TabContent切换，页面切换，窗口前后台切换。",
            "params": {
                "event": {
                    "type": "VoidCallback",
                    "required": true,
                    "description": "回调函数。"
                }
            }
        },
        "onWillHide12+": {
            "description": "逻辑回调，TabContent将要隐藏的时候触发该回调。场景包括TabContent切换，页面切换，窗口前后台切换。",
            "params": {
                "event": {
                    "type": "VoidCallback",
                    "required": true,
                    "description": "回调函数。"
                }
            }
        }
    },
    "rules": [
        "TabContent组件不支持设置通用宽度属性，其宽度默认撑满Tabs父组件。",
        "TabContent组件不支持设置通用高度属性，其高度由Tabs父组件高度与TabBar组件高度决定。",
        "vertical属性为false值，交换上述2个限制。",
        "TabContent组件不支持内容过长时页面的滑动，如需页面滑动，可嵌套List使用。"
    ],
    "examples": [
        {
            "description": "该组件通过 Flex 布局实现了一个带有标签页（Tabs）的界面。布局宽度占据整个屏幕，高度设为 414vp，内边距为顶部 52vp。组件的垂直方向上包含一个 Tabs 组件，Tabs 组件的标签栏位于顶部，标签栏的宽度为 96vp，高度为 414vp，背景颜色为 #F1F3F5。每个标签页的内容通过 TabContent 组件定义，标签页的标签栏内容通过自定义的 tabBuilder 方法生成。\n\n标签栏的内容包括一个图标和一个文本，图标根据当前选中的标签页显示不同的图标（选中时显示 public_icon_on.svg，未选中时显示 public_icon_off.svg），图标的宽度为 24vp，高度为 24vp，对象适应方式为 contain，底部边距为 4vp。文本内容为 \"Tab\"，字体颜色根据当前选中的标签页显示不同的颜色（选中时为 #007DFF，未选中时为 #182431），字体大小为 10vp，字体粗细为 500，行高为 14vp。\n\n标签页的切换通过 Tabs 组件的 onChange 事件实现，当用户切换标签页时，currentIndex 状态变量会更新为当前选中的标签页索引。整个布局通过 Flex 布局保证标签页在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TabContentExample {\n  @State fontColor: string = '#182431' // 未选中标签页的字体颜色\n  @State selectedFontColor: string = '#007DFF' // 选中标签页的字体颜色\n  @State currentIndex: number = 0 // 当前选中的标签页索引\n  private controller: TabsController = new TabsController() // Tabs 组件的控制器\n\n  @Builder tabBuilder(index: number) {\n    Column() {\n      Image(this.currentIndex === index ? '/common/public_icon_on.svg' : '/common/public_icon_off.svg')\n        .width(24) // 图标的宽度\n        .height(24) // 图标的高度\n        .margin({ bottom: 4 }) // 图标的底部边距\n        .objectFit(ImageFit.Contain) // 图标的对象适应方式\n      Text('Tab')\n        .fontColor(this.currentIndex === index ? this.selectedFontColor : this.fontColor) // 根据当前选中的标签页设置字体颜色\n        .fontSize(10) // 字体大小\n        .fontWeight(500) // 字体粗细\n        .lineHeight(14) // 行高\n    }.width('100%').height('100%').justifyContent(FlexAlign.Center) // 标签栏内容的布局方式\n  }\n\n  build() {\n    Column() {\n      Tabs({ barPosition: BarPosition.Start, controller: this.controller }) {\n        TabContent()\n          .tabBar(this.tabBuilder(0)) // 第一个标签页的标签栏内容\n        TabContent()\n          .tabBar(this.tabBuilder(1)) // 第二个标签页的标签栏内容\n        TabContent()\n          .tabBar(this.tabBuilder(2)) // 第三个标签页的标签栏内容\n        TabContent()\n          .tabBar(this.tabBuilder(3)) // 第四个标签页的标签栏内容\n      }\n      .vertical(true) // 标签栏垂直排列\n      .barWidth(96) // 标签栏的宽度\n      .barHeight(414) // 标签栏的高度\n      .onChange((index: number) => {\n        this.currentIndex = index // 更新当前选中的标签页索引\n      })\n      .width(96) // Tabs 组件的宽度\n      .height(414) // Tabs 组件的高度\n      .backgroundColor('#F1F3F5') // Tabs 组件的背景颜色\n      .margin({ top: 52 }) // Tabs 组件的顶部边距\n    }.width('100%') // 整个布局的宽度\n  }\n}"
        },
        {
            "description": "该组件实现了一个底部页签样式（BottomTabBarStyle）的界面，通过 Tabs 组件展示多个页签，并在每个页签的底部显示一个图标。布局宽度占据整个屏幕，高度为 200vp，背景颜色为 0xF1F3F5。页签的排列方式为水平排列，支持滚动，且页签栏固定在底部。每个页签的内容区域为一个全宽全高的 Column 组件，背景颜色分别为 Pink、Orange、Blue 和 Green。页签栏的样式通过 BottomTabBarStyle 进行自定义，每个页签栏显示一个系统图标，图标通过 SymbolGlyphModifier 进行加载。页签的切换事件通过 onChange 事件监听，并在控制台输出当前选中的页签索引。页签的显示和隐藏事件通过 onWillShow 和 onWillHide 事件监听，并在控制台输出相应的信息。",
            "code": "import { SymbolGlyphModifier } from '@kit.ArkUI' // 导入 SymbolGlyphModifier 用于加载系统图标\n\n@Entry\n@Component\nstruct Index {\n  @State symbolModifier1: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_wifi')); // 定义第一个页签的图标\n  @State symbolModifier2: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ellipsis_bubble')); // 定义第二个页签的图标\n  @State symbolModifier3: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.dot_video')); // 定义第三个页签的图标\n  @State symbolModifier4: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.exposure')); // 定义第四个页签的图标\n\n  build() {\n    Column({space: 5}) { // 主布局为垂直布局，子组件间距为 5vp\n      Text(\"底部页签样式\") // 显示标题文本\n      Column(){ // 内容区域布局\n        Tabs({barPosition: BarPosition.End}) { // 创建 Tabs 组件，页签栏位于底部\n          TabContent() { // 第一个页签内容\n            Column().width('100%').height('100%').backgroundColor(Color.Pink) // 内容区域为全宽全高的 Column，背景颜色为 Pink\n          }.tabBar(new BottomTabBarStyle({ // 设置页签栏样式\n            normal: this.symbolModifier1, // 正常状态下的图标\n          }, 'Pink'))\n          .onWillShow(() => { // 页签即将显示时触发的事件\n            console.info(\"Pink will show\") // 在控制台输出信息\n          })\n          .onWillHide(() => { // 页签即将隐藏时触发的事件\n            console.info(\"Pink will hide\") // 在控制台输出信息\n          })\n\n          TabContent() { // 第二个页签内容\n            Column().width('100%').height('100%').backgroundColor(Color.Orange) // 内容区域为全宽全高的 Column，背景颜色为 Orange\n          }.tabBar(new BottomTabBarStyle({ // 设置页签栏样式\n            normal: this.symbolModifier2, // 正常状态下的图标\n          }, 'Orange'))\n          .onWillShow(() => { // 页签即将显示时触发的事件\n            console.info(\"Orange will show\") // 在控制台输出信息\n          })\n          .onWillHide(() => { // 页签即将隐藏时触发的事件\n            console.info(\"Orange will hide\") // 在控制台输出信息\n          })\n\n          TabContent() { // 第三个页签内容\n            Column().width('100%').height('100%').backgroundColor(Color.Blue) // 内容区域为全宽全高的 Column，背景颜色为 Blue\n          }.tabBar(new BottomTabBarStyle({ // 设置页签栏样式\n            normal: this.symbolModifier3, // 正常状态下的图标\n          }, 'Blue'))\n          .onWillShow(() => { // 页签即将显示时触发的事件\n            console.info(\"Blue will show\") // 在控制台输出信息\n          })\n          .onWillHide(() => { // 页签即将隐藏时触发的事件\n            console.info(\"Blue will hide\") // 在控制台输出信息\n          })\n\n          TabContent() { // 第四个页签内容\n            Column().width('100%').height('100%').backgroundColor(Color.Green) // 内容区域为全宽全高的 Column，背景颜色为 Green\n          }.tabBar(new BottomTabBarStyle({ // 设置页签栏样式\n            normal: this.symbolModifier4, // 正常状态下的图标\n          }, 'Green'))\n          .onWillShow(() => { // 页签即将显示时触发的事件\n            console.info(\"Green will show\") // 在控制台输出信息\n          })\n          .onWillHide(() => { // 页签即将隐藏时触发的事件\n            console.info(\"Green will hide\") // 在控制台输出信息\n          })\n        }\n        .vertical(false) // 页签水平排列\n        .scrollable(true) // 页签可滚动\n        .barMode(BarMode.Fixed) // 页签栏固定\n        .onChange((index:number)=>{ // 页签切换事件\n          console.info(index.toString()) // 在控制台输出当前选中的页签索引\n        })\n        .width('100%') // 内容区域宽度为全屏\n        .backgroundColor(0xF1F3F5) // 内容区域背景颜色为 0xF1F3F5\n      }.width('100%').height(200) // 内容区域宽度为全屏，高度为 200vp\n    }\n  }\n}"
        },
        {
            "description": "该示例通过鸿蒙ArkUI框架实现了一个带有自定义TabBar样式的Tabs组件。布局上，整个界面由一个Row组件包裹，内部包含一个Column组件，Column组件内包含两个Button组件和一个Tabs组件。Button组件用于更新TabBar的内容，Tabs组件用于展示两个TabContent，每个TabContent的TabBar样式通过SubTabBarStyle进行自定义。\n\n布局属性方面，Row组件占据整个屏幕高度，Column组件占据整个屏幕宽度和高度。Button组件的宽度为90%，边距为20vp。Tabs组件的宽度为414vp，高度为414vp，TabBar的宽度为414vp，高度为96vp，背景颜色为#F1F3F5，顶部边距为20vp。\n\n组件的样式和外观方面，Button组件的文本颜色和背景颜色未指定，但通过width和margin属性设置了按钮的宽度和边距。Tabs组件的TabBar样式通过SubTabBarStyle进行自定义，每个TabContent的背景颜色分别为粉色和蓝色，边框圆角为12vp。\n\n组件的排列和嵌套关系方面，Row组件包裹Column组件，Column组件内依次排列两个Button组件和一个Tabs组件。Tabs组件内部包含两个TabContent，每个TabContent通过Column组件进行布局，背景颜色和边框圆角属性分别设置。\n\n组件的功能和交互方面，Button组件通过onClick事件监听器实现点击事件，点击后更新对应TabBar的内容。Tabs组件通过SubTabBarStyle设置自定义的TabBar样式，并通过TabContent组件展示不同的内容。",
            "code": "import { ComponentContent, UIContext } from \"@kit.ArkUI\"\n\n// 定义Params类，用于传递文本参数\nclass Params {\n  text: string = \"\"\n\n  constructor(text: string) {\n    this.text = text;\n  }\n}\n\n// 定义buildText函数，用于构建显示文本的组件\n@Builder\nfunction buildText(params: Params) {\n  Column() {\n    Text(params.text) // 显示传递的文本\n      .fontSize(20) // 设置字体大小为20\n      .fontWeight(FontWeight.Bold) // 设置字体加粗\n      .margin(20) // 设置文本的边距为20vp\n  }\n}\n\n// 定义Index组件，作为应用的入口组件\n@Entry\n@Component\nstruct Index {\n  @State message1: string = \"tabBar1\" // 定义状态变量message1，初始值为\"tabBar1\"\n  @State message2: string = \"tabBar2\" // 定义状态变量message2，初始值为\"tabBar2\"\n  context: UIContext = this.getUIContext() // 获取UI上下文\n  private count1 = 0; // 定义私有变量count1，用于记录点击次数\n  private count2 = 0; // 定义私有变量count2，用于记录点击次数\n  private controller: TabsController = new TabsController(); // 创建Tabs控制器\n  tabBar1: ComponentContent<Params> = new ComponentContent<Params>(this.context, wrapBuilder<[Params]>(buildText), new Params(this.message1)); // 创建ComponentContent实例，用于tabBar1\n  tabBar2: ComponentContent<Params> = new ComponentContent<Params>(this.context, wrapBuilder<[Params]>(buildText), new Params(this.message2)); // 创建ComponentContent实例，用于tabBar2\n\n  build() {\n    Row() {\n      Column() {\n        Button(\"更新tabBar1\").width('90%').margin(20) // 创建按钮，宽度为90%，边距为20vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.count1 += 1; // 点击次数加1\n            const message1 = \"Update 1_\" + this.count1.toString(); // 生成新的文本\n            this.tabBar1.update(new Params(message1)); // 更新tabBar1的内容\n          })\n        Button(\"更新tabBar2\").width('90%').margin(20) // 创建按钮，宽度为90%，边距为20vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.count2 += 1; // 点击次数加1\n            const message2 = \"Update 2_\" + this.count2.toString(); // 生成新的文本\n            this.tabBar2.update(new Params(message2)); // 更新tabBar2的内容\n          })\n        Tabs({ barPosition: BarPosition.Start, controller: this.controller }) { // 创建Tabs组件，TabBar位置在开始，使用自定义控制器\n          TabContent() { // 创建第一个TabContent\n            Column().width('100%').height('100%').backgroundColor(Color.Pink).borderRadius('12vp') // 设置Column组件的宽度、高度、背景颜色和边框圆角\n          }.tabBar(new SubTabBarStyle(this.tabBar1)) // 设置TabBar样式为SubTabBarStyle，内容为tabBar1\n          TabContent() { // 创建第二个TabContent\n            Column().width('100%').height('100%').backgroundColor(Color.Blue).borderRadius('12vp') // 设置Column组件的宽度、高度、背景颜色和边框圆角\n          }.tabBar(SubTabBarStyle.of(this.tabBar2)) // 设置TabBar样式为SubTabBarStyle，内容为tabBar2\n        }\n        .vertical(false) // 设置Tabs组件为水平布局\n        .barWidth(414) // 设置TabBar宽度为414vp\n        .barHeight(96) // 设置TabBar高度为96vp\n        .width(414) // 设置Tabs组件宽度为414vp\n        .height(414) // 设置Tabs组件高度为414vp\n        .backgroundColor('#F1F3F5') // 设置Tabs组件背景颜色为#F1F3F5\n        .margin({ top: 20 }) // 设置Tabs组件顶部边距为20vp\n      }\n      .width('100%') // 设置Column组件宽度为100%\n      .height('100%') // 设置Column组件高度为100%\n    }\n    .height('100%') // 设置Row组件高度为100%\n  }\n}"
        },
        {
            "description": "该组件实现了一个带有标签页（Tabs）的界面，用户可以通过点击不同的标签页来切换显示不同的内容。布局宽度占据整个屏幕，高度设为 190vp，背景颜色为 #F1F3F5，顶部有 38vp 的边距。标签页的标签栏位于内容区域的底部，高度为 56vp，水平排列，不垂直排列。每个标签页的内容区域包含一个文本和一个分隔线，文本字体大小为 36，颜色为 #182431，字体粗细为 500，透明度为 0.4，上下边距分别为 30vp 和 56.5vp。分隔线的宽度为 0.5vp，颜色为 #182431，透明度为 0.05。\n\n标签页的标签栏部分通过自定义的 `tabBuilder` 方法生成，每个标签包含一个图标和一个文本。图标根据当前选中的标签页显示不同的图标（选中时为 `/common/public_icon_on.svg`，未选中时为 `/common/public_icon_off.svg`），图标的宽度为 24vp，高度为 24vp，底部边距为 4vp，对象适应方式为 `ImageFit.Contain`。文本字体大小为 10，字体粗细为 500，行高为 14，颜色根据是否选中而变化（选中时为 #007DFF，未选中时为 #182431）。\n\n组件的功能包括标签页的切换和选中状态的更新。当用户点击不同的标签页时，`onChange` 事件会触发，更新 `currentIndex` 的值，从而改变标签页的选中状态和内容显示。",
            "code": "@Entry\n@Component\nstruct TabContentExample {\n  @State fontColor: string = '#182431' // 未选中标签页的文本颜色\n  @State selectedFontColor: string = '#007DFF' // 选中标签页的文本颜色\n  @State currentIndex: number = 0 // 当前选中的标签页索引\n  private controller: TabsController = new TabsController() // 标签页控制器\n\n  @Builder tabBuilder(index: number) {\n    Column() {\n      Image(this.currentIndex === index ? '/common/public_icon_on.svg' : '/common/public_icon_off.svg')\n        .width(24) // 图标宽度\n        .height(24) // 图标高度\n        .margin({ bottom: 4 }) // 图标底部边距\n        .objectFit(ImageFit.Contain) // 图标适应方式\n      Text(`Tab${index + 1}`)\n        .fontColor(this.currentIndex === index ? this.selectedFontColor : this.fontColor) // 文本颜色根据选中状态变化\n        .fontSize(10) // 文本字体大小\n        .fontWeight(500) // 文本字体粗细\n        .lineHeight(14) // 文本行高\n    }.width('100%') // 标签宽度占据父容器的100%\n  }\n\n  build() {\n    Column() {\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) {\n        TabContent() {\n          Column() {\n            Text('Tab1')\n              .fontSize(36) // 文本字体大小\n              .fontColor('#182431') // 文本颜色\n              .fontWeight(500) // 文本字体粗细\n              .opacity(0.4) // 文本透明度\n              .margin({ top: 30, bottom: 56.5 }) // 文本上下边距\n            Divider()\n              .strokeWidth(0.5) // 分隔线宽度\n              .color('#182431') // 分隔线颜色\n              .opacity(0.05) // 分隔线透明度\n          }.width('100%') // 内容区域宽度占据父容器的100%\n        }.tabBar(this.tabBuilder(0)) // 第一个标签页的标签栏\n\n        TabContent() {\n          Column() {\n            Text('Tab2')\n              .fontSize(36) // 文本字体大小\n              .fontColor('#182431') // 文本颜色\n              .fontWeight(500) // 文本字体粗细\n              .opacity(0.4) // 文本透明度\n              .margin({ top: 30, bottom: 56.5 }) // 文本上下边距\n            Divider()\n              .strokeWidth(0.5) // 分隔线宽度\n              .color('#182431') // 分隔线颜色\n              .opacity(0.05) // 分隔线透明度\n          }.width('100%') // 内容区域宽度占据父容器的100%\n        }.tabBar(this.tabBuilder(1)) // 第二个标签页的标签栏\n\n        TabContent() {\n          Column() {\n            Text('Tab3')\n              .fontSize(36) // 文本字体大小\n              .fontColor('#182431') // 文本颜色\n              .fontWeight(500) // 文本字体粗细\n              .opacity(0.4) // 文本透明度\n              .margin({ top: 30, bottom: 56.5 }) // 文本上下边距\n            Divider()\n              .strokeWidth(0.5) // 分隔线宽度\n              .color('#182431') // 分隔线颜色\n              .opacity(0.05) // 分隔线透明度\n          }.width('100%') // 内容区域宽度占据父容器的100%\n        }.tabBar(this.tabBuilder(2)) // 第三个标签页的标签栏\n\n        TabContent() {\n          Column() {\n            Text('Tab4')\n              .fontSize(36) // 文本字体大小\n              .fontColor('#182431') // 文本颜色\n              .fontWeight(500) // 文本字体粗细\n              .opacity(0.4) // 文本透明度\n              .margin({ top: 30, bottom: 56.5 }) // 文本上下边距\n            Divider()\n              .strokeWidth(0.5) // 分隔线宽度\n              .color('#182431') // 分隔线颜色\n              .opacity(0.05) // 分隔线透明度\n          }.width('100%') // 内容区域宽度占据父容器的100%\n        }.tabBar(this.tabBuilder(3)) // 第四个标签页的标签栏\n      }\n      .vertical(false) // 标签栏水平排列\n      .barHeight(56) // 标签栏高度\n      .onChange((index: number) => {\n        this.currentIndex = index // 更新当前选中的标签页索引\n      })\n      .width(360) // 标签页宽度\n      .height(190) // 标签页高度\n      .backgroundColor('#F1F3F5') // 标签页背景颜色\n      .margin({ top: 38 }) // 标签页顶部边距\n    }.width('100%') // 父容器宽度占据整个屏幕\n  }\n}"
        },
        {
            "description": "该组件通过 Column 布局实现了一个包含多个 Tab 的界面，每个 Tab 包含一个文本内容区域和一个 TabBar。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为多个部分，每个部分包含一个 TabContent 和一个 TabBar。每个 TabContent 包含一个 Column 布局，其中包含一个 Text 组件，用于显示文本内容。TabBar 的样式包括文本溢出处理、字体大小、最大行数等属性，支持不同的样式展示。TabBar 的功能包括点击事件和状态效果，用户可以通过点击 TabBar 切换不同的 TabContent。\n整个布局通过 Column 布局保证 Tab 在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TabsTextOverflow {\n  @State message: string = 'Hello World' // 状态变量，用于存储消息内容\n  private controller: TabsController = new TabsController() // Tabs 控制器，用于管理 Tab 的切换\n  @State subTabOverflowOpaque: boolean = true; // 状态变量，用于控制 TabBar 的透明度\n\n  build() {\n    Column() {\n      Tabs({ barPosition: BarPosition.Start, controller: this.controller }) { // 创建 Tabs 组件，设置 TabBar 位置为开始位置，并绑定控制器\n        TabContent() { // 创建第一个 TabContent\n          Column() {\n            Text('单行省略号截断').fontSize(30).fontColor(0xFF000000) // 创建 Text 组件，设置字体大小和颜色\n          }.width('100%').height('100%').backgroundColor(Color.Pink) // 设置 Column 的宽度和高度为 100%，背景颜色为粉色\n        }\n        .tabBar(SubTabBarStyle.of('开始【单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断】结束')\n          .labelStyle({\n            overflow: TextOverflow.Ellipsis, // 设置文本溢出时显示省略号\n            maxLines: 1, // 设置最大行数为 1\n            minFontSize: 10, // 设置最小字体大小为 10\n            heightAdaptivePolicy: TextHeightAdaptivePolicy.MAX_LINES_FIRST, // 设置高度自适应策略为优先适应最大行数\n            font: { size: 20 } // 设置字体大小为 20\n          }))\n\n        TabContent() { // 创建第二个 TabContent\n          Column() {\n            Text('先缩小再截断').fontSize(30).fontColor(0xFF000000) // 创建 Text 组件，设置字体大小和颜色\n          }.width('100%').height('100%').backgroundColor(Color.Pink) // 设置 Column 的宽度和高度为 100%，背景颜色为粉色\n        }\n        .tabBar(SubTabBarStyle.of('开始【先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断】结束')\n          .labelStyle({\n            overflow: TextOverflow.Clip, // 设置文本溢出时直接截断\n            maxLines: 1, // 设置最大行数为 1\n            minFontSize: 15, // 设置最小字体大小为 15\n            maxFontSize: 15, // 设置最大字体大小为 15\n            heightAdaptivePolicy: TextHeightAdaptivePolicy.MIN_FONT_SIZE_FIRST, // 设置高度自适应策略为优先适应最小字体大小\n            font: { size: 20 } // 设置字体大小为 20\n          }))\n\n        TabContent() { // 创建第三个 TabContent\n          Column() {\n            Text('先缩小再换行再截断').fontSize(30).fontColor(0xFF000000) // 创建 Text 组件，设置字体大小和颜色\n          }.width('100%').height('100%').backgroundColor(Color.Pink) // 设置 Column 的宽度和高度为 100%，背景颜色为粉色\n        }\n        .tabBar(SubTabBarStyle.of('开始【先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断】结束')\n          .labelStyle({\n            overflow: TextOverflow.Clip, // 设置文本溢出时直接截断\n            maxLines: 2, // 设置最大行数为 2\n            minFontSize: 15, // 设置最小字体大小为 15\n            maxFontSize: 15, // 设置最大字体大小为 15\n            heightAdaptivePolicy: TextHeightAdaptivePolicy.MIN_FONT_SIZE_FIRST, // 设置高度自适应策略为优先适应最小字体大小\n            font: { size: 20 } // 设置字体大小为 20\n          }))\n\n        TabContent() { // 创建第四个 TabContent\n          Column() {\n            Text('换行').fontSize(30).fontColor(0xFF000000) // 创建 Text 组件，设置字体大小和颜色\n          }\n          .width('100%').height('100%').backgroundColor(Color.Pink) // 设置 Column 的宽度和高度为 100%，背景颜色为粉色\n        }.tabBar(SubTabBarStyle.of('开始【换行换行换行换行换行换行换行换行换行换行换行换行换行换行换行】结束')\n          .labelStyle({\n            overflow: TextOverflow.Clip, // 设置文本溢出时直接截断\n            maxLines: 10, // 设置最大行数为 10\n            minFontSize: 10, // 设置最小字体大小为 10\n            heightAdaptivePolicy: TextHeightAdaptivePolicy.MAX_LINES_FIRST, // 设置高度自适应策略为优先适应最大行数\n            font: { size: 20 } // 设置字体大小为 20\n          }))\n      }\n      .vertical(true).scrollable(true) // 设置 Tabs 为垂直布局，并启用滚动\n      .barMode(BarMode.Fixed) // 设置 TabBar 模式为固定模式\n      .barHeight(720) // 设置 TabBar 高度为 720\n      .barWidth(200).animationDuration(400) // 设置 TabBar 宽度为 200，动画持续时间为 400 毫秒\n      .onChange((index: number) => { // 设置 Tab 切换时的回调函数\n        console.info(index.toString()) // 打印当前选中的 Tab 索引\n      })\n      .height('100%').width('100%') // 设置 Tabs 的宽度和高度为 100%\n    }\n    .height('100%') // 设置 Column 的高度为 100%\n  }\n}"
        },
        {
            "description": "该组件通过 Tabs 组件实现了一个包含子页签和底部页签的界面。布局宽度占据整个屏幕，高度设为 400vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为两个主要部分：子页签样式和底部页签样式。\n\n子页签样式部分包含一个 Tabs 组件，其页签位于内容区域的上方（BarPosition.Start）。每个 TabContent 包含一个 Column 组件，背景颜色分别为 Pink、Yellow、Blue 和 Green。每个 TabContent 的页签样式通过 SubTabBarStyle 进行自定义，包括未选中时的文本颜色为红色（Color.Red），选中时的文本颜色为绿色（Color.Green）。\n\n底部页签样式部分同样包含一个 Tabs 组件，其页签位于内容区域的下方（BarPosition.End）。每个 TabContent 包含一个 Column 组件，背景颜色分别为 Pink、Yellow、Blue 和 Green。每个 TabContent 的页签样式通过 BottomTabBarStyle 进行自定义，包括未选中时的文本颜色和图标颜色为红色（Color.Red），选中时的文本颜色和图标颜色为绿色（Color.Green）。\n\n整个布局通过 Column 组件进行垂直排列，确保子页签和底部页签在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TabBarStyleExample {\n  build() {\n    Column({ space: 5 }) {\n      Text(\"子页签样式\") // 显示子页签样式的标题\n      Column() {\n        Tabs({ barPosition: BarPosition.Start }) { // 创建一个 Tabs 组件，页签位于内容区域的上方\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink) // 创建一个 Column 组件，背景颜色为粉色\n          }.tabBar(new SubTabBarStyle('Pink') // 设置子页签的样式，标签为 \"Pink\"\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })) // 设置未选中时的文本颜色为红色，选中时的文本颜色为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Yellow) // 创建一个 Column 组件，背景颜色为黄色\n          }.tabBar(new SubTabBarStyle('Yellow') // 设置子页签的样式，标签为 \"Yellow\"\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })) // 设置未选中时的文本颜色为红色，选中时的文本颜色为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue) // 创建一个 Column 组件，背景颜色为蓝色\n          }.tabBar(new SubTabBarStyle('Blue') // 设置子页签的样式，标签为 \"Blue\"\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })) // 设置未选中时的文本颜色为红色，选中时的文本颜色为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green) // 创建一个 Column 组件，背景颜色为绿色\n          }.tabBar(new SubTabBarStyle('Green') // 设置子页签的样式，标签为 \"Green\"\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })) // 设置未选中时的文本颜色为红色，选中时的文本颜色为绿色\n        }\n        .vertical(false) // 设置 Tabs 组件为水平布局\n        .scrollable(true) // 设置 Tabs 组件为可滚动\n        .barMode(BarMode.Fixed) // 设置 Tabs 组件的页签模式为固定模式\n        .onChange((index: number) => { // 设置 Tabs 组件的切换事件\n          console.info(index.toString()) // 打印当前选中的页签索引\n        })\n        .width('100%') // 设置 Tabs 组件的宽度为 100%\n        .backgroundColor(0xF1F3F5) // 设置 Tabs 组件的背景颜色\n      }.width('100%').height(200) // 设置 Column 组件的宽度为 100%，高度为 200vp\n\n      Text(\"底部页签样式\") // 显示底部页签样式的标题\n      Column() {\n        Tabs({ barPosition: BarPosition.End }) { // 创建一个 Tabs 组件，页签位于内容区域的下方\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink) // 创建一个 Column 组件，背景颜色为粉色\n          }\n          .tabBar(new BottomTabBarStyle('/common/public_icon_off.svg', 'pink') // 设置底部页签的样式，图标路径为 \"/common/public_icon_off.svg\"，标签为 \"pink\"\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }) // 设置未选中时的文本颜色为红色，选中时的文本颜色为绿色\n            .iconStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })) // 设置未选中时的图标颜色为红色，选中时的图标颜色为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Yellow) // 创建一个 Column 组件，背景颜色为黄色\n          }.tabBar(new BottomTabBarStyle('/common/public_icon_off.svg', 'Yellow') // 设置底部页签的样式，图标路径为 \"/common/public_icon_off.svg\"，标签为 \"Yellow\"\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }) // 设置未选中时的文本颜色为红色，选中时的文本颜色为绿色\n            .iconStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })) // 设置未选中时的图标颜色为红色，选中时的图标颜色为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue) // 创建一个 Column 组件，背景颜色为蓝色\n          }.tabBar(new BottomTabBarStyle('/common/public_icon_off.svg', 'Blue') // 设置底部页签的样式，图标路径为 \"/common/public_icon_off.svg\"，标签为 \"Blue\"\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }) // 设置未选中时的文本颜色为红色，选中时的文本颜色为绿色\n            .iconStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })) // 设置未选中时的图标颜色为红色，选中时的图标颜色为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green) // 创建一个 Column 组件，背景颜色为绿色\n          }.tabBar(new BottomTabBarStyle('/common/public_icon_off.svg', 'Green') // 设置底部页签的样式，图标路径为 \"/common/public_icon_off.svg\"，标签为 \"Green\"\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }) // 设置未选中时的文本颜色为红色，选中时的文本颜色为绿色\n            .iconStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })) // 设置未选中时的图标颜色为红色，选中时的图标颜色为绿色\n        }\n        .vertical(false) // 设置 Tabs 组件为水平布局\n        .scrollable(true) // 设置 Tabs 组件为可滚动\n        .barMode(BarMode.Fixed) // 设置 Tabs 组件的页签模式为固定模式\n        .onChange((index: number) => { // 设置 Tabs 组件的切换事件\n          console.info(index.toString()) // 打印当前选中的页签索引\n        })\n        .width('100%') // 设置 Tabs 组件的宽度为 100%\n        .backgroundColor(0xF1F3F5) // 设置 Tabs 组件的背景颜色\n      }.width('100%').height(200) // 设置 Column 组件的宽度为 100%，高度为 200vp\n    }\n  }\n}"
        },
        {
            "description": "该组件展示了三种不同样式的页签（Tab）布局：子页签样式、底部页签样式和侧边页签样式。每个页签布局包含四个页签项，每个页签项对应一个不同颜色的内容区域。布局宽度占据整个屏幕，高度分别为 200vp 和 400vp。组件的垂直方向上被分为三个部分，每个部分包含一个标题和一个页签布局。\n\n子页签样式：页签位于内容区域的上方，页签项水平排列，页签栏固定在顶部，页签项可滚动。每个页签项的背景颜色与其对应的内容区域颜色一致。页签项在显示和隐藏时会触发相应的回调函数，输出日志信息。\n\n底部页签样式：页签位于内容区域的下方，页签项水平排列，页签栏固定在底部，页签项可滚动。每个页签项包含一个系统图标和文本标签，背景颜色与其对应的内容区域颜色一致。页签项在显示和隐藏时会触发相应的回调函数，输出日志信息。\n\n侧边页签样式：页签位于内容区域的左侧，页签项垂直排列，页签栏固定在左侧，页签项可滚动。每个页签项包含一个系统图标和文本标签，背景颜色与其对应的内容区域颜色一致。页签项在显示和隐藏时会触发相应的回调函数，输出日志信息。\n\n整个布局通过 Column 布局保证页签布局在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TabBarStyleExample {\n  build() {\n    Column({ space: 5 }) {\n      // 子页签样式标题\n      Text(\"子页签样式\")\n      Column() {\n        Tabs({ barPosition: BarPosition.Start }) {\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink)\n          }.tabBar(new SubTabBarStyle('Pink'))\n          .onWillShow(() => {\n            console.info(\"Pink will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Pink will hide\")\n          })\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Yellow)\n          }.tabBar(new SubTabBarStyle('Yellow'))\n          .onWillShow(() => {\n            console.info(\"Yellow will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Yellow will hide\")\n          })\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue)\n          }.tabBar(new SubTabBarStyle('Blue'))\n          .onWillShow(() => {\n            console.info(\"Blue will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Blue will hide\")\n          })\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green)\n          }.tabBar(new SubTabBarStyle('Green'))\n          .onWillShow(() => {\n            console.info(\"Green will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Green will hide\")\n          })\n        }\n        .vertical(false) // 页签项水平排列\n        .scrollable(true) // 页签项可滚动\n        .barMode(BarMode.Fixed) // 页签栏固定\n        .onChange((index: number) => {\n          console.info(index.toString())\n        })\n        .width('100%') // 宽度占据整个父容器\n        .backgroundColor(0xF1F3F5) // 背景颜色\n      }.width('100%').height(200) // 高度为 200vp\n\n      // 底部页签样式标题\n      Text(\"底部页签样式\")\n      Column() {\n        Tabs({ barPosition: BarPosition.End }) {\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink)\n          }.tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Pink'))\n          .onWillShow(() => {\n            console.info(\"Pink will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Pink will hide\")\n          })\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Yellow)\n          }.tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Yellow'))\n          .onWillShow(() => {\n            console.info(\"Yellow will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Yellow will hide\")\n          })\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue)\n          }.tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Blue'))\n          .onWillShow(() => {\n            console.info(\"Blue will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Blue will hide\")\n          })\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green)\n          }.tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Green'))\n          .onWillShow(() => {\n            console.info(\"Green will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Green will hide\")\n          })\n        }\n        .vertical(false) // 页签项水平排列\n        .scrollable(true) // 页签项可滚动\n        .barMode(BarMode.Fixed) // 页签栏固定\n        .onChange((index: number) => {\n          console.info(index.toString())\n        })\n        .width('100%') // 宽度占据整个父容器\n        .backgroundColor(0xF1F3F5) // 背景颜色\n      }.width('100%').height(200) // 高度为 200vp\n\n      // 侧边页签样式标题\n      Text(\"侧边页签样式\")\n      Column() {\n        Tabs({ barPosition: BarPosition.Start }) {\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink)\n          }.tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Pink'))\n          .onWillShow(() => {\n            console.info(\"Pink will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Pink will hide\")\n          })\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Yellow)\n          }.tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Yellow'))\n          .onWillShow(() => {\n            console.info(\"Yellow will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Yellow will hide\")\n          })\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue)\n          }.tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Blue'))\n          .onWillShow(() => {\n            console.info(\"Blue will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Blue will hide\")\n          })\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green)\n          }.tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Green'))\n          .onWillShow(() => {\n            console.info(\"Green will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Green will hide\")\n          })\n        }\n        .vertical(true) // 页签项垂直排列\n        .scrollable(true) // 页签项可滚动\n        .barMode(BarMode.Fixed) // 页签栏固定\n        .onChange((index: number) => {\n          console.info(index.toString())\n        })\n        .width('100%') // 宽度占据整个父容器\n        .backgroundColor(0xF1F3F5) // 背景颜色\n      }.width('100%').height(400) // 高度为 400vp\n    }\n  }\n}"
        },
        {
            "description": "该组件通过Column和Row布局实现了一个包含多个按钮和Tabs组件的界面。布局宽度占据整个屏幕，高度设为500vp，内边距为24vp。组件的垂直方向上被分为多个部分，每个部分包含一组按钮和一个Tabs组件。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Row组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\nTabs组件包含三个TabContent，每个TabContent包含一个Column组件，背景颜色分别为粉色、绿色和蓝色。Tabs组件的样式包括动画持续时间、高度、背景颜色、标签栏模式等属性。\n整个布局通过Column和Row布局保证按钮和Tabs组件在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TabContentExample6 {\n  private controller: TabsController = new TabsController() // 创建一个TabsController实例，用于控制Tabs组件\n  @State text: string = \"2\" // 定义一个状态变量text，初始值为\"2\"\n  @State tabPadding: number = 0; // 定义一个状态变量tabPadding，初始值为0\n  @State symmetricExtensible: boolean = false; // 定义一个状态变量symmetricExtensible，初始值为false\n  @State layoutMode: LayoutMode = LayoutMode.VERTICAL; // 定义一个状态变量layoutMode，初始值为LayoutMode.VERTICAL\n  @State verticalAlign: VerticalAlign = VerticalAlign.Center; // 定义一个状态变量verticalAlign，初始值为VerticalAlign.Center\n\n  build() {\n    Column() {\n      Row() {\n        Button(\"padding+10 \" + this.tabPadding) // 创建一个按钮，显示当前tabPadding值并增加10\n          .width('47%') // 设置按钮宽度为47%\n          .height(50) // 设置按钮高度为50vp\n          .margin({ top: 5 }) // 设置按钮上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.tabPadding += 10 // 点击按钮时，tabPadding增加10\n          })\n          .margin({ right: '6%', bottom: '12vp' }) // 设置按钮右边距为6%，下边距为12vp\n        Button(\"padding-10 \" + this.tabPadding) // 创建一个按钮，显示当前tabPadding值并减少10\n          .width('47%') // 设置按钮宽度为47%\n          .height(50) // 设置按钮高度为50vp\n          .margin({ top: 5 }) // 设置按钮上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.tabPadding -= 10 // 点击按钮时，tabPadding减少10\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮下边距为12vp\n      }\n\n      Row() {\n        Button(\"文本增加 \") // 创建一个按钮，点击时增加文本\n          .width('47%') // 设置按钮宽度为47%\n          .height(50) // 设置按钮高度为50vp\n          .margin({ top: 5 }) // 设置按钮上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.text += '文本增加' // 点击按钮时，text增加\"文本增加\"\n          })\n          .margin({ right: '6%', bottom: '12vp' }) // 设置按钮右边距为6%，下边距为12vp\n        Button(\"文本重置\") // 创建一个按钮，点击时重置文本\n          .width('47%') // 设置按钮宽度为47%\n          .height(50) // 设置按钮高度为50vp\n          .margin({ top: 5 }) // 设置按钮上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.text = \"2\" // 点击按钮时，text重置为\"2\"\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮下边距为12vp\n      }\n\n      Row() {\n        Button(\"symmetricExtensible改变 \" + this.symmetricExtensible) // 创建一个按钮，显示当前symmetricExtensible值并改变\n          .width('100%') // 设置按钮宽度为100%\n          .height(50) // 设置按钮高度为50vp\n          .margin({ top: 5 }) // 设置按钮上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.symmetricExtensible = !this.symmetricExtensible // 点击按钮时，symmetricExtensible取反\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮下边距为12vp\n      }\n\n      Row() {\n        Button(\"layoutMode垂直 \") // 创建一个按钮，点击时将layoutMode设置为垂直\n          .width('47%') // 设置按钮宽度为47%\n          .height(50) // 设置按钮高度为50vp\n          .margin({ top: 5 }) // 设置按钮上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.layoutMode = LayoutMode.VERTICAL; // 点击按钮时，layoutMode设置为垂直\n          })\n          .margin({ right: '6%', bottom: '12vp' }) // 设置按钮右边距为6%，下边距为12vp\n        Button(\"layoutMode水平 \") // 创建一个按钮，点击时将layoutMode设置为水平\n          .width('47%') // 设置按钮宽度为47%\n          .height(50) // 设置按钮高度为50vp\n          .margin({ top: 5 }) // 设置按钮上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.layoutMode = LayoutMode.HORIZONTAL; // 点击按钮时，layoutMode设置为水平\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮下边距为12vp\n      }\n\n      Row() {\n        Button(\"verticalAlign朝上\") // 创建一个按钮，点击时将verticalAlign设置为朝上\n          .width('100%') // 设置按钮宽度为100%\n          .height(50) // 设置按钮高度为50vp\n          .margin({ top: 5 }) // 设置按钮上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.verticalAlign = VerticalAlign.Top; // 点击按钮时，verticalAlign设置为朝上\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮下边距为12vp\n      }\n\n      Row() {\n        Button(\"verticalAlign居中\") // 创建一个按钮，点击时将verticalAlign设置为居中\n          .width('100%') // 设置按钮宽度为100%\n          .height(50) // 设置按钮高度为50vp\n          .margin({ top: 5 }) // 设置按钮上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.verticalAlign = VerticalAlign.Center; // 点击按钮时，verticalAlign设置为居中\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮下边距为12vp\n      }\n\n      Row() {\n        Button(\"verticalAlign朝下\") // 创建一个按钮，点击时将verticalAlign设置为朝下\n          .width('100%') // 设置按钮宽度为100%\n          .height(50) // 设置按钮高度为50vp\n          .margin({ top: 5 }) // 设置按钮上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.verticalAlign = VerticalAlign.Bottom; // 点击按钮时，verticalAlign设置为朝下\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮下边距为12vp\n      }\n\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) { // 创建一个Tabs组件，标签栏位置在底部，使用controller控制\n        TabContent() { // 创建第一个TabContent\n          Column().width('100%').height('100%').backgroundColor(Color.Pink) // 创建一个Column组件，宽度为100%，高度为100%，背景颜色为粉色\n        }.tabBar(BottomTabBarStyle.of($r(\"sys.media.ohos_app_icon\"), \"1\")) // 设置TabContent的标签栏样式，图标为系统资源，文本为\"1\"\n\n        TabContent() { // 创建第二个TabContent\n          Column().width('100%').height('100%').backgroundColor(Color.Green) // 创建一个Column组件，宽度为100%，高度为100%，背景颜色为绿色\n        }.tabBar(BottomTabBarStyle.of($r(\"sys.media.ohos_app_icon\"), this.text) // 设置TabContent的标签栏样式，图标为系统资源，文本为text\n          .padding(this.tabPadding) // 设置标签栏的内边距为tabPadding\n          .verticalAlign(this.verticalAlign) // 设置标签栏的垂直对齐方式为verticalAlign\n          .layoutMode(this.layoutMode) // 设置标签栏的布局模式为layoutMode\n          .symmetricExtensible(this.symmetricExtensible)) // 设置标签栏的对称扩展属性为symmetricExtensible\n\n        TabContent() { // 创建第三个TabContent\n          Column().width('100%').height('100%').backgroundColor(Color.Blue) // 创建一个Column组件，宽度为100%，高度为100%，背景颜色为蓝色\n        }.tabBar(BottomTabBarStyle.of($r(\"sys.media.ohos_app_icon\"), \"3\")) // 设置TabContent的标签栏样式，图标为系统资源，文本为\"3\"\n      }\n      .animationDuration(300) // 设置Tabs组件的动画持续时间为300毫秒\n      .height('60%') // 设置Tabs组件的高度为60%\n      .backgroundColor(0xf1f3f5) // 设置Tabs组件的背景颜色为浅灰色\n      .barMode(BarMode.Fixed) // 设置Tabs组件的标签栏模式为固定模式\n    }\n    .width('100%') // 设置Column组件的宽度为100%\n    .height(500) // 设置Column组件的高度为500vp\n    .margin({ top: 5 }) // 设置Column组件的上边距为5vp\n    .padding('24vp') // 设置Column组件的内边距为24vp\n  }\n}"
        },
        {
            "description": "该组件通过Column布局实现了一个包含多个按钮和一个Tabs组件的界面。布局宽度占据整个屏幕，高度设为250vp，内边距为顶部24vp、左右24vp。组件的垂直方向上被分为多个部分，每个部分包含一个按钮和一个Tabs组件。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Column组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\nTabs组件包含多个TabContent，每个TabContent包含一个Column组件，Column组件的背景颜色和边框圆角属性不同。Tabs组件的样式包括下划线的颜色、高度、宽度、圆角半径和间距等属性，支持动态变化。Tabs组件的功能包括切换TabContent和触发onChange事件。\n整个布局通过Column布局保证按钮和Tabs组件在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TabsAttr {\n  private controller: TabsController = new TabsController() // Tabs组件的控制器\n  @State indicatorColor: Color = Color.Blue; // 下划线的颜色\n  @State indicatorWidth: number = 40; // 下划线的宽度\n  @State indicatorHeight: number = 10; // 下划线的高度\n  @State indicatorBorderRadius: number = 5; // 下划线的圆角半径\n  @State indicatorSpace: number = 10; // 下划线的间距\n  @State subTabBorderRadius: number = 20; // 子Tab的圆角半径\n  @State selectedMode: SelectedMode = SelectedMode.INDICATOR; // 选中模式\n  private colorFlag: boolean = true; // 颜色变化标志\n  private widthFlag: boolean = true; // 宽度变化标志\n  private heightFlag: boolean = true; // 高度变化标志\n  private borderFlag: boolean = true; // 圆角半径变化标志\n  private spaceFlag: boolean = true; // 间距变化标志\n\n  build() {\n    Column() {\n      Button(\"下划线颜色变化\").width('100%').margin({ bottom: '12vp' }) // 按钮，点击后改变下划线的颜色\n        .onClick((event?: ClickEvent) => {\n          if (this.colorFlag) {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorColor = Color.Red // 下划线颜色变为红色\n            })\n          } else {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorColor = Color.Yellow // 下划线颜色变为黄色\n            })\n          }\n          this.colorFlag = !this.colorFlag // 切换颜色变化标志\n        })\n      Button(\"下划线高度变化\").width('100%').margin({ bottom: '12vp' }) // 按钮，点击后改变下划线的高度\n        .onClick((event?: ClickEvent) => {\n          if (this.heightFlag) {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorHeight = 20 // 下划线高度变为20\n            })\n          } else {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorHeight = 10 // 下划线高度变为10\n            })\n          }\n          this.heightFlag = !this.heightFlag // 切换高度变化标志\n        })\n      Button(\"下划线宽度变化\").width('100%').margin({ bottom: '12vp' }) // 按钮，点击后改变下划线的宽度\n        .onClick((event?: ClickEvent) => {\n          if (this.widthFlag) {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorWidth = 30 // 下划线宽度变为30\n            })\n          } else {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorWidth = 50 // 下划线宽度变为50\n            })\n          }\n          this.widthFlag = !this.widthFlag // 切换宽度变化标志\n        })\n      Button(\"下划线圆角半径变化\").width('100%').margin({ bottom: '12vp' }) // 按钮，点击后改变下划线的圆角半径\n        .onClick((event?: ClickEvent) => {\n          if (this.borderFlag) {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorBorderRadius = 0 // 下划线圆角半径变为0\n            })\n          } else {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorBorderRadius = 5 // 下划线圆角半径变为5\n            })\n          }\n          this.borderFlag = !this.borderFlag // 切换圆角半径变化标志\n        })\n      Button(\"下划线间距变化\").width('100%').margin({ bottom: '12vp' }) // 按钮，点击后改变下划线的间距\n        .onClick((event?: ClickEvent) => {\n          if (this.spaceFlag) {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorSpace = 20 // 下划线间距变为20\n            })\n          } else {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorSpace = 10 // 下划线间距变为10\n            })\n          }\n          this.spaceFlag = !this.spaceFlag // 切换间距变化标志\n        })\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) { // Tabs组件，包含多个TabContent\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Pink).borderRadius('12vp') // TabContent，背景颜色为粉色，边框圆角为12vp\n        }.tabBar(SubTabBarStyle.of('pink') // 子Tab的样式\n          .indicator({\n            color: this.indicatorColor, // 下划线的颜色\n            height: this.indicatorHeight, // 下划线的高度\n            width: this.indicatorWidth, // 下划线的宽度\n            borderRadius: this.indicatorBorderRadius, // 下划线的圆角半径\n            marginTop: this.indicatorSpace // 下划线的间距\n          })\n          .selectedMode(this.selectedMode) // 选中模式\n          .board({ borderRadius: this.subTabBorderRadius }) // 子Tab的圆角半径\n          .labelStyle({})\n        )\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Yellow).borderRadius('12vp') // TabContent，背景颜色为黄色，边框圆角为12vp\n        }.tabBar('yellow') // 子Tab的样式\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Blue).borderRadius('12vp') // TabContent，背景颜色为蓝色，边框圆角为12vp\n        }.tabBar('blue') // 子Tab的样式\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green).borderRadius('12vp') // TabContent，背景颜色为绿色，边框圆角为12vp\n        }.tabBar('green') // 子Tab的样式\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Gray).borderRadius('12vp') // TabContent，背景颜色为灰色，边框圆角为12vp\n        }.tabBar('gray') // 子Tab的样式\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Orange).borderRadius('12vp') // TabContent，背景颜色为橙色，边框圆角为12vp\n        }.tabBar('orange') // 子Tab的样式\n      }\n      .vertical(false) // Tabs组件为水平布局\n      .scrollable(true) // Tabs组件可滚动\n      .barMode(BarMode.Scrollable) // Tabs组件的Bar模式为可滚动\n      .barHeight(140) // Tabs组件的Bar高度为140\n      .animationDuration(400) // Tabs组件的动画持续时间为400ms\n      .onChange((index: number) => { // Tabs组件的onChange事件\n        console.info(index.toString()) // 打印当前选中的Tab的索引\n      })\n      .backgroundColor(0xF5F5F5) // Tabs组件的背景颜色为0xF5F5F5\n      .height(320) // Tabs组件的高度为320\n    }.width('100%').height(250).padding({ top: '24vp', left: '24vp', right: '24vp' }) // Column组件的宽度为100%，高度为250vp，内边距为顶部24vp、左右24vp\n  }\n}"
        }
    ],
    "is_common_attrs": false
}