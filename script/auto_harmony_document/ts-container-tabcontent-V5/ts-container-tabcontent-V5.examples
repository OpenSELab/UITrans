/*\n实现一个垂直布局的选项卡组件，支持标签栏的图标和文本颜色根据选中状态动态变化。选项卡切换时，更新当前选中的索引，并使用TabsController管理选项卡状态。\n*/\n\n@Entry\n@Component\nstruct TabContentExample {\n  @State fontColor: string = '#182431' // 定义未选中标签的文本颜色\n  @State selectedFontColor: string = '#007DFF' // 定义选中标签的文本颜色\n  @State currentIndex: number = 0 // 定义当前选中的标签索引\n  private controller: TabsController = new TabsController() // 创建一个TabsController实例来管理选项卡状态\n\n  @Builder tabBuilder(index: number) {\n    Column() {\n      Image(this.currentIndex === index ? '/common/public_icon_on.svg' : '/common/public_icon_off.svg')\n        .width(24)\n        .height(24)\n        .margin({ bottom: 4 })\n        .objectFit(ImageFit.Contain)\n        // 根据当前选中的索引显示不同的图标\n      Text('Tab')\n        .fontColor(this.currentIndex === index ? this.selectedFontColor : this.fontColor)\n        .fontSize(10)\n        .fontWeight(500)\n        .lineHeight(14)\n        // 根据当前选中的索引设置文本颜色\n    }.width('100%').height('100%').justifyContent(FlexAlign.Center)\n  }\n\n  build() {\n    Column() {\n      Tabs({ barPosition: BarPosition.Start, controller: this.controller }) {\n        TabContent()\n          .tabBar(this.tabBuilder(0))\n        TabContent()\n          .tabBar(this.tabBuilder(1))\n        TabContent()\n          .tabBar(this.tabBuilder(2))\n        TabContent()\n          .tabBar(this.tabBuilder(3))\n        // 创建四个选项卡，每个选项卡使用tabBuilder方法生成标签栏内容\n      }\n      .vertical(true) // 设置选项卡为垂直布局\n      .barWidth(96) // 设置标签栏宽度\n      .barHeight(414) // 设置标签栏高度\n      .onChange((index: number) => {\n        this.currentIndex = index\n        // 当选项卡切换时，更新当前选中的索引\n      })\n      .width(96)\n      .height(414)\n      .backgroundColor('#F1F3F5')\n      .margin({ top: 52 })\n    }.width('100%')\n  }\n}


/*\n实现一个底部页签样式的标签栏组件，包含四个标签页，每个标签页使用不同的系统图标作为标签栏的图标，并且每个标签页具有不同的背景颜色。标签栏支持水平滚动，标签切换时会输出当前标签的索引。\n*/\n\nimport { SymbolGlyphModifier } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct Index {\n  // 定义四个状态变量，分别用于存储四个不同的系统图标\n  @State symbolModifier1: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_wifi'));\n  @State symbolModifier2: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ellipsis_bubble'));\n  @State symbolModifier3: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.dot_video'));\n  @State symbolModifier4: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.exposure'));\n\n  build() {\n    Column({space: 5}) {\n      Text("底部页签样式")\n      Column(){\n        Tabs({barPosition: BarPosition.End}) {\n          // 第一个标签页，背景色为粉色\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink)\n          }.tabBar(new BottomTabBarStyle({\n            normal: this.symbolModifier1, // 使用第一个系统图标\n          }, 'Pink'))\n          .onWillShow(() => {\n            console.info("Pink will show") // 标签页即将显示时输出日志\n          })\n          .onWillHide(() => {\n            console.info("Pink will hide") // 标签页即将隐藏时输出日志\n          })\n\n          // 第二个标签页，背景色为橙色\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Orange)\n          }.tabBar(new BottomTabBarStyle({\n            normal: this.symbolModifier2, // 使用第二个系统图标\n          }, 'Orange'))\n          .onWillShow(() => {\n            console.info("Orange will show") // 标签页即将显示时输出日志\n          })\n          .onWillHide(() => {\n            console.info("Orange will hide") // 标签页即将隐藏时输出日志\n          })\n\n          // 第三个标签页，背景色为蓝色\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue)\n          }.tabBar(new BottomTabBarStyle({\n            normal: this.symbolModifier3, // 使用第三个系统图标\n          }, 'Blue'))\n          .onWillShow(() => {\n            console.info("Blue will show") // 标签页即将显示时输出日志\n          })\n          .onWillHide(() => {\n            console.info("Blue will hide") // 标签页即将隐藏时输出日志\n          })\n\n          // 第四个标签页，背景色为绿色\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green)\n          }.tabBar(new BottomTabBarStyle({\n            normal: this.symbolModifier4, // 使用第四个系统图标\n          }, 'Green'))\n          .onWillShow(() => {\n            console.info("Green will show") // 标签页即将显示时输出日志\n          })\n          .onWillHide(() => {\n            console.info("Green will hide") // 标签页即将隐藏时输出日志\n          })\n        }\n        .vertical(False) // 设置标签栏为水平布局\n        .scrollable(True) // 设置标签栏可滚动\n        .barMode(BarMode.Fixed) // 设置标签栏为固定模式\n        .onChange((index:number)=>{\n          console.info(index.toString()) // 标签切换时输出当前标签的索引\n        })\n        .width('100%')\n        .backgroundColor(0xF1F3F5)\n      }.width('100%').height(200)\n    }\n  }\n}


/*\n实现一个带有标签栏的页面组件，支持标签切换功能。标签栏位于页面底部，包含四个标签项，每个标签项包含一个图标和一个文本。点击不同的标签项，页面内容会切换到对应的标签内容。\n*/\n\n@Entry\n@Component\nstruct TabContentExample {\n  @State fontColor: string = '#182431' // 默认字体颜色\n  @State selectedFontColor: string = '#007DFF' // 选中标签的字体颜色\n  @State currentIndex: number = 0 // 当前选中的标签索引\n  private controller: TabsController = new TabsController() // 标签控制器\n\n  // 构建标签栏项的Builder方法\n  @Builder tabBuilder(index: number) {\n    Column() {\n      Image(this.currentIndex === index ? '/common/public_icon_on.svg' : '/common/public_icon_off.svg')\n        .width(24)\n        .height(24)\n        .margin({ bottom: 4 })\n        .objectFit(ImageFit.Contain)\n      Text(`Tab${index + 1}`)\n        .fontColor(this.currentIndex === index ? this.selectedFontColor : this.fontColor)\n        .fontSize(10)\n        .fontWeight(500)\n        .lineHeight(14)\n    }.width('100%')\n  }\n\n  build() {\n    Column() {\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) {\n        TabContent() {\n          Column() {\n            Text('Tab1')\n              .fontSize(36)\n              .fontColor('#182431')\n              .fontWeight(500)\n              .opacity(0.4)\n              .margin({ top: 30, bottom: 56.5 })\n            Divider()\n              .strokeWidth(0.5)\n              .color('#182431')\n              .opacity(0.05)\n          }.width('100%')\n        }.tabBar(this.tabBuilder(0)) // 使用tabBuilder方法构建第一个标签项\n\n        TabContent() {\n          Column() {\n            Text('Tab2')\n              .fontSize(36)\n              .fontColor('#182431')\n              .fontWeight(500)\n              .opacity(0.4)\n              .margin({ top: 30, bottom: 56.5 })\n            Divider()\n              .strokeWidth(0.5)\n              .color('#182431')\n              .opacity(0.05)\n          }.width('100%')\n        }.tabBar(this.tabBuilder(1)) // 使用tabBuilder方法构建第二个标签项\n\n        TabContent() {\n          Column() {\n            Text('Tab3')\n              .fontSize(36)\n              .fontColor('#182431')\n              .fontWeight(500)\n              .opacity(0.4)\n              .margin({ top: 30, bottom: 56.5 })\n            Divider()\n              .strokeWidth(0.5)\n              .color('#182431')\n              .opacity(0.05)\n          }.width('100%')\n        }.tabBar(this.tabBuilder(2)) // 使用tabBuilder方法构建第三个标签项\n\n        TabContent() {\n          Column() {\n            Text('Tab4')\n              .fontSize(36)\n              .fontColor('#182431')\n              .fontWeight(500)\n              .opacity(0.4)\n              .margin({ top: 30, bottom: 56.5 })\n            Divider()\n              .strokeWidth(0.5)\n              .color('#182431')\n              .opacity(0.05)\n          }.width('100%')\n        }.tabBar(this.tabBuilder(3)) // 使用tabBuilder方法构建第四个标签项\n      }\n      .vertical(False) // 设置标签栏为水平布局\n      .barHeight(56) // 设置标签栏高度\n      .onChange((index: number) => {\n        this.currentIndex = index // 更新当前选中的标签索引\n      })\n      .width(360)\n      .height(190)\n      .backgroundColor('#F1F3F5')\n      .margin({ top: 38 })\n    }.width('100%')\n  }\n}


/*\n实现一个包含两个Tab的界面，每个Tab包含一个文本组件。通过点击按钮可以更新对应Tab中的文本内容。\n布局：使用Row和Column进行布局，包含两个按钮和一个Tabs组件。\n样式：设置文本字体大小、粗细、外边距，按钮宽度、外边距，Tabs的宽度、高度、背景颜色等。\n功能与效果：点击按钮时，更新对应Tab中的文本内容，并显示更新次数。\n*/\n\nimport { ComponentContent, UIContext } from "@kit.ArkUI"\n\n// 定义一个Params类，用于传递文本内容\nclass Params {\n  text: string = ""\n\n  constructor(text: string) {\n    this.text = text;\n  }\n}\n\n// 使用Builder装饰器定义一个构建文本组件的函数\n@Builder\nfunction buildText(params: Params) {\n  Column() {\n    Text(params.text)\n      .fontSize(20) // 设置文本字体大小\n      .fontWeight(FontWeight.Bold) // 设置文本字体粗细\n      .margin(20) // 设置文本外边距\n  }\n}\n\n// 主组件Index，使用@Entry和@Component装饰器\n@Entry\n@Component\nstruct Index {\n  @State message1: string = "tabBar1" // 定义状态变量message1，初始值为"tabBar1"\n  @State message2: string = "tabBar2" // 定义状态变量message2，初始值为"tabBar2"\n  context: UIContext = this.getUIContext() // 获取UI上下文\n  private count1 = 0; // 定义私有变量count1，用于记录更新次数\n  private count2 = 0; // 定义私有变量count2，用于记录更新次数\n  private controller: TabsController = new TabsController(); // 创建Tabs控制器\n  tabBar1: ComponentContent<Params> = new ComponentContent<Params>(this.context, wrapBuilder<[Params]>(buildText), new Params(this.message1)); // 创建ComponentContent实例tabBar1\n  tabBar2: ComponentContent<Params> = new ComponentContent<Params>(this.context, wrapBuilder<[Params]>(buildText), new Params(this.message2)); // 创建ComponentContent实例tabBar2\n\n  build() {\n    Row() {\n      Column() {\n        Button("更新tabBar1").width('90%').margin(20) // 创建按钮，点击时更新tabBar1的内容\n          .onClick((event?: ClickEvent) => {\n            this.count1 += 1; // 更新次数加1\n            const message1 = "Update 1_" + this.count1.toString(); // 生成新的文本内容\n            this.tabBar1.update(new Params(message1)); // 更新tabBar1的内容\n          })\n        Button("更新tabBar2").width('90%').margin(20) // 创建按钮，点击时更新tabBar2的内容\n          .onClick((event?: ClickEvent) => {\n            this.count2 += 1; // 更新次数加1\n            const message2 = "Update 2_" + this.count2.toString(); // 生成新的文本内容\n            this.tabBar2.update(new Params(message2)); // 更新tabBar2的内容\n          })\n        Tabs({ barPosition: BarPosition.Start, controller: this.controller }) { // 创建Tabs组件\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink).borderRadius('12vp') // 创建TabContent内容\n          }.tabBar(new SubTabBarStyle(this.tabBar1)) // 设置TabBar样式\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue).borderRadius('12vp') // 创建TabContent内容\n          }.tabBar(SubTabBarStyle.of(this.tabBar2)) // 设置TabBar样式\n        }\n        .vertical(False) // 设置Tabs为水平布局\n        .barWidth(414) // 设置TabBar宽度\n        .barHeight(96) // 设置TabBar高度\n        .width(414) // 设置Tabs宽度\n        .height(414) // 设置Tabs高度\n        .backgroundColor('#F1F3F5') // 设置Tabs背景颜色\n        .margin({ top: 20 }) // 设置Tabs外边距\n      }\n      .width('100%') // 设置Column宽度\n      .height('100%') // 设置Column高度\n    }\n    .height('100%') // 设置Row高度\n  }\n}


/*\n实现一个包含两种不同样式页签的组件：子页签样式和底部页签样式。子页签样式位于页签内容的上方，底部页签样式位于页签内容的下方。每个页签内容区域的颜色不同，并且页签的文本和图标颜色在选中与未选中状态下有所区别。页签支持水平滚动和固定模式，并监听页签变化事件。\n*/\n\n@Entry\n@Component\nstruct TabBarStyleExample {\n  build() {\n    Column({ space: 5 }) {\n      Text("子页签样式")\n      Column() {\n        Tabs({ barPosition: BarPosition.Start }) {\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink)\n          }.tabBar(new SubTabBarStyle('Pink')\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }))\n          // 设置子页签的文本颜色，未选中时为红色，选中时为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Yellow)\n          }.tabBar(new SubTabBarStyle('Yellow')\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }))\n          // 设置子页签的文本颜色，未选中时为红色，选中时为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue)\n          }.tabBar(new SubTabBarStyle('Blue')\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }))\n          // 设置子页签的文本颜色，未选中时为红色，选中时为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green)\n          }.tabBar(new SubTabBarStyle('Green')\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }))\n          // 设置子页签的文本颜色，未选中时为红色，选中时为绿色\n        }\n        .vertical(False)\n        .scrollable(True)\n        .barMode(BarMode.Fixed)\n        .onChange((index: number) => {\n          console.info(index.toString())\n        })\n        // 设置Tabs的垂直方向、可滚动、固定模式，并监听页签变化事件\n        .width('100%')\n        .backgroundColor(0xF1F3F5)\n      }.width('100%').height(200)\n\n      Text("底部页签样式")\n      Column() {\n        Tabs({ barPosition: BarPosition.End }) {\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink)\n          }.tabBar(new BottomTabBarStyle('/common/public_icon_off.svg', 'pink')\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })\n            .iconStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }))\n          // 设置底部页签的文本和图标颜色，未选中时为红色，选中时为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Yellow)\n          }.tabBar(new BottomTabBarStyle('/common/public_icon_off.svg', 'Yellow')\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })\n            .iconStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }))\n          // 设置底部页签的文本和图标颜色，未选中时为红色，选中时为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue)\n          }.tabBar(new BottomTabBarStyle('/common/public_icon_off.svg', 'Blue')\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })\n            .iconStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }))\n          // 设置底部页签的文本和图标颜色，未选中时为红色，选中时为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green)\n          }.tabBar(new BottomTabBarStyle('/common/public_icon_off.svg', 'Green')\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })\n            .iconStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }))\n          // 设置底部页签的文本和图标颜色，未选中时为红色，选中时为绿色\n        }\n        .vertical(False)\n        .scrollable(True)\n        .barMode(BarMode.Fixed)\n        .onChange((index: number) => {\n          console.info(index.toString())\n        })\n        // 设置Tabs的垂直方向、可滚动、固定模式，并监听页签变化事件\n        .width('100%')\n        .backgroundColor(0xF1F3F5)\n      }.width('100%').height(200)\n    }\n  }\n}


/*\n实现一个带有多个Tab的界面，每个Tab的内容为一个带有背景颜色的文本列。Tab栏的标签文本根据不同的策略处理溢出情况，包括单行省略号截断、先缩小再截断、先缩小再换行再截断、以及换行。Tab栏可以垂直滚动，并且Tab切换时会输出当前Tab的索引。\n*/\n\n@Entry\n@Component\nstruct TabsTextOverflow {\n  @State message: string = 'Hello World' // 初始化一个状态变量，用于显示消息\n  private controller: TabsController = new TabsController() // 创建一个Tabs控制器实例，用于管理Tab的切换\n  @State subTabOverflowOpaque: boolean = True; // 初始化一个状态变量，用于控制子Tab的溢出透明度\n\n  build() {\n    Column() {\n      Tabs({ barPosition: BarPosition.Start, controller: this.controller }) {\n        TabContent() {\n          Column() {\n            Text('单行省略号截断').fontSize(30).fontColor(0xFF000000) // 设置文本内容和样式\n          }.width('100%').height('100%').backgroundColor(Color.Pink) // 设置列的宽度和高度，并设置背景颜色\n        }\n        .tabBar(SubTabBarStyle.of('开始【单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断】结束')\n          .labelStyle({\n            overflow: TextOverflow.Ellipsis, // 设置文本溢出处理方式为省略号\n            maxLines: 1, // 设置最大行数为1\n            minFontSize: 10, // 设置最小字体大小\n            heightAdaptivePolicy: TextHeightAdaptivePolicy.MAX_LINES_FIRST, // 设置高度自适应策略\n            font: { size: 20 } // 设置字体大小\n          }))\n\n        TabContent() {\n          Column() {\n            Text('先缩小再截断').fontSize(30).fontColor(0xFF000000) // 设置文本内容和样式\n          }.width('100%').height('100%').backgroundColor(Color.Pink) // 设置列的宽度和高度，并设置背景颜色\n        }\n        .tabBar(SubTabBarStyle.of('开始【先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断】结束')\n          .labelStyle({\n            overflow: TextOverflow.Clip, // 设置文本溢出处理方式为剪切\n            maxLines: 1, // 设置最大行数为1\n            minFontSize: 15, // 设置最小字体大小\n            maxFontSize: 15, // 设置最大字体大小\n            heightAdaptivePolicy: TextHeightAdaptivePolicy.MIN_FONT_SIZE_FIRST, // 设置高度自适应策略\n            font: { size: 20 } // 设置字体大小\n          }))\n\n        TabContent() {\n          Column() {\n            Text('先缩小再换行再截断').fontSize(30).fontColor(0xFF000000) // 设置文本内容和样式\n          }.width('100%').height('100%').backgroundColor(Color.Pink) // 设置列的宽度和高度，并设置背景颜色\n        }\n        .tabBar(SubTabBarStyle.of('开始【先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断】结束')\n          .labelStyle({\n            overflow: TextOverflow.Clip, // 设置文本溢出处理方式为剪切\n            maxLines: 2, // 设置最大行数为2\n            minFontSize: 15, // 设置最小字体大小\n            maxFontSize: 15, // 设置最大字体大小\n            heightAdaptivePolicy: TextHeightAdaptivePolicy.MIN_FONT_SIZE_FIRST, // 设置高度自适应策略\n            font: { size: 20 } // 设置字体大小\n          }))\n\n        TabContent() {\n          Column() {\n            Text('换行').fontSize(30).fontColor(0xFF000000) // 设置文本内容和样式\n          }\n          .width('100%').height('100%').backgroundColor(Color.Pink) // 设置列的宽度和高度，并设置背景颜色\n        }.tabBar(SubTabBarStyle.of('开始【换行换行换行换行换行换行换行换行换行换行换行换行换行换行换行】结束')\n          .labelStyle({\n            overflow: TextOverflow.Clip, // 设置文本溢出处理方式为剪切\n            maxLines: 10, // 设置最大行数为10\n            minFontSize: 10, // 设置最小字体大小\n            heightAdaptivePolicy: TextHeightAdaptivePolicy.MAX_LINES_FIRST, // 设置高度自适应策略\n            font: { size: 20 } // 设置字体大小\n          }))\n      }\n      .vertical(True).scrollable(True) // 设置Tabs为垂直方向且可滚动\n      .barMode(BarMode.Fixed) // 设置Tab栏模式为固定\n      .barHeight(720) // 设置Tab栏高度\n      .barWidth(200).animationDuration(400) // 设置Tab栏宽度及动画持续时间\n      .onChange((index: number) => {\n        console.info(index.toString()) // 当Tab切换时，输出当前Tab的索引\n      })\n      .height('100%').width('100%') // 设置Tabs的宽度和高度\n    }\n    .height('100%') // 设置列的高度\n  }\n}


/*\n实现一个包含多个Tab的组件，每个Tab的内容和样式可以通过按钮动态调整。具体功能包括：\n1. 通过按钮调整Tab的padding值。\n2. 通过按钮增加或重置Tab的文本内容。\n3. 通过按钮切换Tab的对称扩展属性。\n4. 通过按钮切换Tab的布局模式（垂直或水平）。\n5. 通过按钮切换Tab的垂直对齐方式（朝上、居中、朝下）。\n6. 每个Tab的内容为一个全屏的背景颜色块。\n*/\n\n@Entry\n@Component\nstruct TabContentExample6 {\n  private controller: TabsController = new TabsController()\n  @State text: string = "2"\n  @State tabPadding: number = 0;\n  @State symmetricExtensible: boolean = False;\n  @State layoutMode: LayoutMode = LayoutMode.VERTICAL;\n  @State verticalAlign: VerticalAlign = VerticalAlign.Center;\n\n  build() {\n    Column() {\n      Row() {\n        Button("padding+10 " + this.tabPadding)\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.tabPadding += 10\n          })\n          .margin({ right: '6%', bottom: '12vp' })\n        // 点击按钮增加Tab的padding值\n\n        Button("padding-10 " + this.tabPadding)\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.tabPadding -= 10\n          })\n          .margin({ bottom: '12vp' })\n        // 点击按钮减少Tab的padding值\n      }\n\n      Row() {\n        Button("文本增加 ")\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.text += '文本增加'\n          })\n          .margin({ right: '6%', bottom: '12vp' })\n        // 点击按钮增加Tab的文本内容\n\n        Button("文本重置")\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.text = "2"\n          })\n          .margin({ bottom: '12vp' })\n        // 点击按钮重置Tab的文本内容\n      }\n\n      Row() {\n        Button("symmetricExtensible改变 " + this.symmetricExtensible)\n          .width('100%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.symmetricExtensible = !this.symmetricExtensible\n          })\n          .margin({ bottom: '12vp' })\n        // 点击按钮切换Tab的对称扩展属性\n      }\n\n      Row() {\n        Button("layoutMode垂直 ")\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.layoutMode = LayoutMode.VERTICAL;\n          })\n          .margin({ right: '6%', bottom: '12vp' })\n        // 点击按钮将Tab的布局模式设置为垂直\n\n        Button("layoutMode水平 ")\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.layoutMode = LayoutMode.HORIZONTAL;\n          })\n          .margin({ bottom: '12vp' })\n        // 点击按钮将Tab的布局模式设置为水平\n      }\n\n      Row() {\n        Button("verticalAlign朝上")\n          .width('100%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.verticalAlign = VerticalAlign.Top;\n          })\n          .margin({ bottom: '12vp' })\n        // 点击按钮将Tab的垂直对齐方式设置为朝上\n      }\n\n      Row() {\n        Button("verticalAlign居中")\n          .width('100%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.verticalAlign = VerticalAlign.Center;\n          })\n          .margin({ bottom: '12vp' })\n        // 点击按钮将Tab的垂直对齐方式设置为居中\n      }\n\n      Row() {\n        Button("verticalAlign朝下")\n          .width('100%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.verticalAlign = VerticalAlign.Bottom;\n          })\n          .margin({ bottom: '12vp' })\n        // 点击按钮将Tab的垂直对齐方式设置为朝下\n      }\n\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) {\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Pink)\n        }.tabBar(BottomTabBarStyle.of($r("sys.media.ohos_app_icon"), "1"))\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar(BottomTabBarStyle.of($r("sys.media.ohos_app_icon"), this.text)\n          .padding(this.tabPadding)\n          .verticalAlign(this.verticalAlign)\n          .layoutMode(this.layoutMode)\n          .symmetricExtensible(this.symmetricExtensible))\n        // 第二个Tab的内容和样式，根据状态变量动态调整\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Blue)\n        }.tabBar(BottomTabBarStyle.of($r("sys.media.ohos_app_icon"), "3"))\n      }\n      .animationDuration(300)\n      .height('60%')\n      .backgroundColor(0xf1f3f5)\n      .barMode(BarMode.Fixed)\n    }\n    .width('100%')\n    .height(500)\n    .margin({ top: 5 })\n    .padding('24vp')\n  }\n}


/*\n实现一个可自定义下划线指示器样式的标签页组件，支持通过按钮动态改变下划线的颜色、高度、宽度、圆角半径和间距。标签页内容为不同颜色的矩形，标签栏位于底部，支持滚动。\n*/\n\n@Entry\n@Component\nstruct TabsAttr {\n  private controller: TabsController = new TabsController() // 标签页控制器，用于控制标签页的切换\n  @State indicatorColor: Color = Color.Blue; // 下划线指示器的颜色，初始为蓝色\n  @State indicatorWidth: number = 40; // 下划线指示器的宽度，初始为40\n  @State indicatorHeight: number = 10; // 下划线指示器的高度，初始为10\n  @State indicatorBorderRadius: number = 5; // 下划线指示器的圆角半径，初始为5\n  @State indicatorSpace: number = 10; // 下划线指示器的间距，初始为10\n  @State subTabBorderRadius: number = 20; // 子标签页的圆角半径，初始为20\n  @State selectedMode: SelectedMode = SelectedMode.INDICATOR; // 选中模式，初始为下划线指示器模式\n  private colorFlag: boolean = True; // 颜色变化标志，用于切换下划线颜色\n  private widthFlag: boolean = True; // 宽度变化标志，用于切换下划线宽度\n  private heightFlag: boolean = True; // 高度变化标志，用于切换下划线高度\n  private borderFlag: boolean = True; // 圆角变化标志，用于切换下划线圆角半径\n  private spaceFlag: boolean = True; // 间距变化标志，用于切换下划线间距\n\n  build() {\n    Column() {\n      Button("下划线颜色变化").width('100%').margin({ bottom: '12vp' })\n        .onClick((event?: ClickEvent) => {\n          // 点击按钮时，切换下划线指示器的颜色\n          if (this.colorFlag) {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorColor = Color.Red // 将下划线颜色变为红色\n            })\n          } else {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorColor = Color.Yellow // 将下划线颜色变为黄色\n            })\n          }\n          this.colorFlag = !this.colorFlag // 切换颜色变化标志\n        })\n      Button("下划线高度变化").width('100%').margin({ bottom: '12vp' })\n        .onClick((event?: ClickEvent) => {\n          // 点击按钮时，切换下划线指示器的高度\n          if (this.heightFlag) {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorHeight = 20 // 将下划线高度变为20\n            })\n          } else {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorHeight = 10 // 将下划线高度变为10\n            })\n          }\n          this.heightFlag = !this.heightFlag // 切换高度变化标志\n        })\n      Button("下划线宽度变化").width('100%').margin({ bottom: '12vp' })\n        .onClick((event?: ClickEvent) => {\n          // 点击按钮时，切换下划线指示器的宽度\n          if (this.widthFlag) {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorWidth = 30 // 将下划线宽度变为30\n            })\n          } else {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorWidth = 50 // 将下划线宽度变为50\n            })\n          }\n          this.widthFlag = !this.widthFlag // 切换宽度变化标志\n        })\n      Button("下划线圆角半径变化").width('100%').margin({ bottom: '12vp' })\n        .onClick((event?: ClickEvent) => {\n          // 点击按钮时，切换下划线指示器的圆角半径\n          if (this.borderFlag) {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorBorderRadius = 0 // 将下划线圆角半径变为0\n            })\n          } else {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorBorderRadius = 5 // 将下划线圆角半径变为5\n            })\n          }\n          this.borderFlag = !this.borderFlag // 切换圆角变化标志\n        })\n      Button("下划线间距变化").width('100%').margin({ bottom: '12vp' })\n        .onClick((event?: ClickEvent) => {\n          // 点击按钮时，切换下划线指示器的间距\n          if (this.spaceFlag) {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorSpace = 20 // 将下划线间距变为20\n            })\n          } else {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorSpace = 10 // 将下划线间距变为10\n            })\n          }\n          this.spaceFlag = !this.spaceFlag // 切换间距变化标志\n        })\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) {\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Pink).borderRadius('12vp')\n        }.tabBar(SubTabBarStyle.of('pink')\n          .indicator({\n            color: this.indicatorColor, \n            height: this.indicatorHeight, \n            width: this.indicatorWidth, \n            borderRadius: this.indicatorBorderRadius, \n            marginTop: this.indicatorSpace \n          })\n          .selectedMode(this.selectedMode)\n          .board({ borderRadius: this.subTabBorderRadius })\n          .labelStyle({})\n        )\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Yellow).borderRadius('12vp')\n        }.tabBar('yellow')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Blue).borderRadius('12vp')\n        }.tabBar('blue')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green).borderRadius('12vp')\n        }.tabBar('green')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Gray).borderRadius('12vp')\n        }.tabBar('gray')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Orange).borderRadius('12vp')\n        }.tabBar('orange')\n      }\n      .vertical(False) // 设置标签页为水平布局\n      .scrollable(True) // 设置标签页可滚动\n      .barMode(BarMode.Scrollable) // 设置标签栏为可滚动模式\n      .barHeight(140) // 设置标签栏高度为140\n      .animationDuration(400) // 设置标签页切换动画时长为400毫秒\n      .onChange((index: number) => {\n        console.info(index.toString()) // 当标签页切换时，输出当前选中的标签页索引\n      })\n      .backgroundColor(0xF5F5F5) // 设置标签页背景颜色为浅灰色\n      .height(320) // 设置标签页高度为320\n    }.width('100%').height(250).padding({ top: '24vp', left: '24vp', right: '24vp' }) // 设置整体布局的宽度、高度和内边距\n  }\n}


/*\n实现一个包含三种不同样式TabBar的示例组件。每种样式分别展示了子页签、底部页签和侧边页签的不同布局和交互效果。\n*/\n\n@Entry\n@Component\nstruct TabBarStyleExample {\n  build() {\n    Column({ space: 5 }) {\n      // 显示“子页签样式”文本\n      Text("子页签样式")\n      Column() {\n        // 创建一个Tab组件，页签位于顶部\n        Tabs({ barPosition: BarPosition.Start }) {\n          // 第一个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink)\n          }\n          .tabBar(new SubTabBarStyle('Pink')) // 设置TabBar的样式为子页签样式，显示文本“Pink”\n          .onWillShow(() => {\n            console.info("Pink will show") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info("Pink will hide") // 当Tab页签即将隐藏时，输出日志\n          })\n\n          // 第二个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Yellow)\n          }\n          .tabBar(new SubTabBarStyle('Yellow')) // 设置TabBar的样式为子页签样式，显示文本“Yellow”\n          .onWillShow(() => {\n            console.info("Yellow will show") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info("Yellow will hide") // 当Tab页签即将隐藏时，输出日志\n          })\n\n          // 第三个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue)\n          }\n          .tabBar(new SubTabBarStyle('Blue')) // 设置TabBar的样式为子页签样式，显示文本“Blue”\n          .onWillShow(() => {\n            console.info("Blue will show") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info("Blue will hide") // 当Tab页签即将隐藏时，输出日志\n          })\n\n          // 第四个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green)\n          }\n          .tabBar(new SubTabBarStyle('Green')) // 设置TabBar的样式为子页签样式，显示文本“Green”\n          .onWillShow(() => {\n            console.info("Green will show") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info("Green will hide") // 当Tab页签即将隐藏时，输出日志\n          })\n        }\n        .vertical(False) // 设置TabBar为水平布局\n        .scrollable(True) // 设置TabBar可滚动\n        .barMode(BarMode.Fixed) // 设置TabBar为固定模式\n        .onChange((index: number) => {\n          console.info(index.toString()) // 当Tab页签切换时，输出当前选中的页签索引\n        })\n        .width('100%') // 设置Tab组件的宽度为100%\n        .backgroundColor(0xF1F3F5) // 设置Tab组件的背景颜色\n      }\n      .width('100%') // 设置Column的宽度为100%\n      .height(200) // 设置Column的高度为200\n\n      // 显示“底部页签样式”文本\n      Text("底部页签样式")\n      Column() {\n        // 创建一个Tab组件，页签位于底部\n        Tabs({ barPosition: BarPosition.End }) {\n          // 第一个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink)\n          }\n          .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Pink')) // 设置TabBar的样式为底部页签样式，显示图标和文本“Pink”\n          .onWillShow(() => {\n            console.info("Pink will show") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info("Pink will hide") // 当Tab页签即将隐藏时，输出日志\n          })\n\n          // 第二个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Yellow)\n          }\n          .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Yellow')) // 设置TabBar的样式为底部页签样式，显示图标和文本“Yellow”\n          .onWillShow(() => {\n            console.info("Yellow will show") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info("Yellow will hide") // 当Tab页签即将隐藏时，输出日志\n          })\n\n          // 第三个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue)\n          }\n          .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Blue')) // 设置TabBar的样式为底部页签样式，显示图标和文本“Blue”\n          .onWillShow(() => {\n            console.info("Blue will show") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info("Blue will hide") // 当Tab页签即将隐藏时，输出日志\n          })\n\n          // 第四个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green)\n          }\n          .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Green')) // 设置TabBar的样式为底部页签样式，显示图标和文本“Green”\n          .onWillShow(() => {\n            console.info("Green will show") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info("Green will hide") // 当Tab页签即将隐藏时，输出日志\n          })\n        }\n        .vertical(False) // 设置TabBar为水平布局\n        .scrollable(True) // 设置TabBar可滚动\n        .barMode(BarMode.Fixed) // 设置TabBar为固定模式\n        .onChange((index: number) => {\n          console.info(index.toString()) // 当Tab页签切换时，输出当前选中的页签索引\n        })\n        .width('100%') // 设置Tab组件的宽度为100%\n        .backgroundColor(0xF1F3F5) // 设置Tab组件的背景颜色\n      }\n      .width('100%') // 设置Column的宽度为100%\n      .height(200) // 设置Column的高度为200\n\n      // 显示“侧边页签样式”文本\n      Text("侧边页签样式")\n      Column() {\n        // 创建一个Tab组件，页签位于左侧\n        Tabs({ barPosition: BarPosition.Start }) {\n          // 第一个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink)\n          }\n          .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Pink')) // 设置TabBar的样式为底部页签样式，显示图标和文本“Pink”\n          .onWillShow(() => {\n            console.info("Pink will show") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info("Pink will hide") // 当Tab页签即将隐藏时，输出日志\n          })\n\n          // 第二个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Yellow)\n          }\n          .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Yellow')) // 设置TabBar的样式为底部页签样式，显示图标和文本“Yellow”\n          .onWillShow(() => {\n            console.info("Yellow will show") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info("Yellow will hide") // 当Tab页签即将隐藏时，输出日志\n          })\n\n          // 第三个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue)\n          }\n          .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Blue')) // 设置TabBar的样式为底部页签样式，显示图标和文本“Blue”\n          .onWillShow(() => {\n            console.info("Blue will show") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info("Blue will hide") // 当Tab页签即将隐藏时，输出日志\n          })\n\n          // 第四个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green)\n          }\n          .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Green')) // 设置TabBar的样式为底部页签样式，显示图标和文本“Green”\n          .onWillShow(() => {\n            console.info("Green will show") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info("Green will hide") // 当Tab页签即将隐藏时，输出日志\n          })\n        }\n        .vertical(True) // 设置TabBar为垂直布局\n        .scrollable(True) // 设置TabBar可滚动\n        .barMode(BarMode.Fixed) // 设置TabBar为固定模式\n        .onChange((index: number) => {\n          console.info(index.toString()) // 当Tab页签切换时，输出当前选中的页签索引\n        })\n        .width('100%') // 设置Tab组件的宽度为100%\n        .backgroundColor(0xF1F3F5) // 设置Tab组件的背景颜色\n      }\n      .width('100%') // 设置Column的宽度为100%\n      .height(400) // 设置Column的高度为400\n    }\n  }\n}