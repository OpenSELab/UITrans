[
    {
        "description": "GLTF模型加载示例。\n该组件通过Row和Column布局实现了一个展示GLTF模型的界面。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为一个标题和一个3D模型展示区域。标题文本位于顶部，3D模型展示区域位于下方。\n标题文本的样式包括默认字体和颜色，宽度占据整个Column的100%。3D模型展示区域的宽度为90%，高度为90%，通过Component3D组件加载并渲染GLTF模型。环境贴图通过environment方法加载，模型类型为SURFACE。\n整个布局通过Row和Column布局保证标题和3D模型在垂直方向上有序排列，确保界面整洁美观。",
        "code": "@Entry\n@Component\nstruct Index {\n  // 定义SceneOptions对象，包含GLTF模型的路径和模型类型\n  scene: SceneOptions = { scene: $rawfile('gltf/DamageHemlt/glTF/DamagedHelmet.gltf'), modelType: ModelType.SURFACE};\n\n  build() {\n    Row() {\n      Column() {\n        // 显示标题文本\n        Text('GLTF Example')\n        // 使用Component3D组件加载并渲染GLTF模型\n        Component3D( this.scene )\n          .environment($rawfile('gltf/Environment/glTF/Environment.gltf')) // 加载环境贴图\n          .renderWidth('90%').renderHeight('90%') // 设置渲染区域的宽度和高度\n      }.width('100%') // Column的宽度占据整个Row的100%\n    }\n    .height('100%') // Row的高度占据整个屏幕的100%\n  }\n}\n\n/*\n自定义渲染示例。\n该组件通过Row和Column布局实现了一个展示自定义渲染效果的界面。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为一个标题和一个自定义渲染区域。标题文本位于顶部，自定义渲染区域位于下方。\n标题文本的样式包括默认字体和颜色，宽度占据整个Column的100%。自定义渲染区域的宽度为50%，高度为50%，通过Component3D组件加载并渲染自定义渲染效果。自定义渲染效果通过shader、shaderImageTexture、shaderInputBuffer和customRender方法实现。\n整个布局通过Row和Column布局保证标题和自定义渲染区域在垂直方向上有序排列，确保界面整洁美观。\n*/\n\nimport { Animator as animator, AnimatorResult } from '@kit.ArkUI';\n\n// 定义EngineTime类，用于管理时间相关的变量\nclass EngineTime {\n  totalTimeUs = 0; // 总时间，单位为微秒\n  deltaTimeUs = 0; // 时间增量，单位为微秒\n};\n\nlet engineTime = new EngineTime(); // 创建EngineTime实例\nlet frameCount: number = 0; // 帧计数器\n\n// 定义TickFrame函数，用于更新时间变量\nfunction TickFrame() {\n  if (frameCount == 10) {\n    engineTime.totalTimeUs += 1.0; // 每10帧增加总时间\n    engineTime.deltaTimeUs += 1.0; // 每10帧增加时间增量\n    frameCount = 0; // 重置帧计数器\n  } else {\n    frameCount++; // 帧计数器递增\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  // 定义SceneOptions对象，包含GLTF模型的路径和模型类型\n  scene: SceneOptions = { scene: $rawfile('gltf/DamageHemlt/glTF/DamagedHelmet.gltf'), modelType: ModelType.SURFACE};\n  // 创建AnimatorResult对象，用于管理动画效果\n  backAnimator: AnimatorResult = animator.create({\n    duration: 2000, // 动画持续时间，单位为毫秒\n    easing: \"ease\", // 动画缓动效果\n    delay: 0, // 动画延迟时间，单位为毫秒\n    fill: \"none\", // 动画填充模式\n    direction: \"normal\", // 动画播放方向\n    iterations: -1, // 动画循环次数，-1表示无限循环\n    begin: 100, // 动画起始值\n    end: 200, // 动画结束值\n  });\n  @State timeDelta: number[] = [1.0, 2.0]; // 定义状态变量，用于存储时间增量\n\n  create() {\n    // 设置动画结束时的回调函数\n    this.backAnimator.onfinish = () => {\n      console.log('backAnimator onfinish'); // 打印日志\n    }\n    // 设置动画每一帧的回调函数\n    this.backAnimator.onframe = value => {\n      TickFrame(); // 更新时间变量\n      this.timeDelta[0] = engineTime.deltaTimeUs; // 更新时间增量\n    }\n  }\n\n  build() {\n    Row() {\n      Column() {\n        // 显示标题文本\n        Text('custom rendering')\n        // 使用Component3D组件加载并渲染自定义渲染效果\n        Component3D()\n          .shader($rawfile('assets/app/shaders/shader/London.shader')) // 加载自定义着色器\n          .shaderImageTexture($rawfile('assets/London.jpg')) // 加载纹理图片\n          .shaderInputBuffer(this.timeDelta) // 传递时间增量\n          .customRender($rawfile('assets/app/rendernodegraphs/London.rng'), true) // 加载自定义渲染节点图\n          .renderWidth('90%').renderHeight('90%') // 设置渲染区域的宽度和高度\n          .onAppear(() => {\n            this.create(); // 初始化动画\n            this.backAnimator.play(); // 播放动画\n          }).width('50%').height('50%') // 设置Component3D的宽度和高度\n      }.width('100%') // Column的宽度占据整个Row的100%\n    }\n    .height('100%') // Row的高度占据整个屏幕的100%\n  }\n}"
    }
]