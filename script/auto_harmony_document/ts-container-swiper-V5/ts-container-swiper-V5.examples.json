[
    {
        "description": "该示例通过 Swiper 组件实现了一个轮播图效果，并使用数字指示器（Indicator.digit）来显示当前页码。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上分为两个主要部分：Swiper 轮播图和控制按钮行。Swiper 轮播图内部包含多个 Text 组件，每个 Text 组件显示一个数字，并通过 LazyForEach 动态加载数据。Swiper 组件的样式包括背景颜色、字体大小、对齐方式等属性，支持自动播放、循环播放、指示器显示等功能。控制按钮行包含两个按钮，分别用于显示下一页和上一页，按钮的样式包括背景颜色、字体大小、对齐方式等属性，支持点击事件触发相应操作。",
        "code": "// 定义一个数据源类，实现 IDataSource 接口\nclass MyDataSource implements IDataSource {\n  private list: number[] = []\n\n  // 构造函数，初始化数据列表\n  constructor(list: number[]) {\n    this.list = list\n  }\n\n  // 返回数据总数\n  totalCount(): number {\n    return this.list.length\n  }\n\n  // 根据索引获取数据\n  getData(index: number): number {\n    return this.list[index]\n  }\n\n  // 注册数据变化监听器（未实现）\n  registerDataChangeListener(listener: DataChangeListener): void {\n  }\n\n  // 注销数据变化监听器（未实现）\n  unregisterDataChangeListener() {\n  }\n}\n\n// 主入口组件\n@Entry\n@Component\nstruct SwiperExample {\n  // 创建 Swiper 控制器\n  private swiperController: SwiperController = new SwiperController()\n  // 初始化数据源\n  private data: MyDataSource = new MyDataSource([])\n\n  // 组件即将显示时执行的逻辑\n  aboutToAppear(): void {\n    let list: number[] = []\n    // 生成一个包含 1 到 10 的数字列表\n    for (let i = 1; i <= 10; i++) {\n      list.push(i);\n    }\n    // 更新数据源\n    this.data = new MyDataSource(list)\n  }\n\n  // 构建组件\n  build() {\n    Column({ space: 5 }) {\n      // 创建 Swiper 组件\n      Swiper(this.swiperController) {\n        // 使用 LazyForEach 动态加载数据\n        LazyForEach(this.data, (item: string) => {\n          Text(item.toString())\n            .width('90%')\n            .height(160)\n            .backgroundColor(0xAFEEEE)\n            .textAlign(TextAlign.Center)\n            .fontSize(30)\n        }, (item: string) => item)\n      }\n      .cachedCount(2) // 设置缓存页数\n      .index(1) // 设置初始显示页的索引\n      .autoPlay(true) // 开启自动播放\n      .interval(4000) // 设置自动播放间隔时间\n      .indicator(Indicator.digit() \n        .top(200) // 设置指示器距离顶部的位置\n        .fontColor(Color.Gray) // 设置指示器字体颜色\n        .selectedFontColor(Color.Gray) // 设置选中项字体颜色\n        .digitFont({ size: 20, weight: FontWeight.Bold }) // 设置指示器字体样式\n        .selectedDigitFont({ size: 20, weight: FontWeight.Normal })) // 设置选中项字体样式\n      .loop(true) // 开启循环播放\n      .duration(1000) // 设置切换动画时长\n      .itemSpace(0) // 设置页面间距\n      .displayArrow(true, false) // 设置是否显示箭头\n\n      // 创建控制按钮行\n      Row({ space: 12 }) {\n        Button('showNext')\n          .onClick(() => {\n            this.swiperController.showNext() // 显示下一页\n          })\n        Button('showPrevious')\n          .onClick(() => {\n            this.swiperController.showPrevious() // 显示上一页\n          })\n      }.margin(5) // 设置按钮行外边距\n    }.width('100%') // 设置列宽度\n    .margin({ top: 5 }) // 设置列顶部外边距\n  }\n}"
    },
    {
        "description": "该组件实现了一个带有圆点导航指示器的轮播图（Swiper）界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为两个主要部分：轮播图和控制按钮。轮播图部分包含多个文本项，每个文本项以卡片形式展示，背景颜色为浅蓝色，文本居中显示，字体大小为30。轮播图的导航指示器为圆点形式，支持超长显示动画效果，最多显示9个圆点。控制按钮部分包含两个按钮，分别用于切换到下一个和上一个轮播项。按钮的样式包括背景颜色、宽度和高度等属性，支持点击事件。\n\n布局属性：\n- 轮播图的宽度为90%，高度为160vp，内边距为5vp。\n- 控制按钮的宽度为自适应，高度为自适应，内边距为5vp。\n\n组件的样式和外观：\n- 轮播图的背景颜色为浅蓝色（0xAFEEEE），文本颜色为默认颜色，字体大小为30。\n- 导航指示器的圆点颜色为灰色，选中圆点的颜色为蓝色，圆点的宽度和高度分别为8vp和8vp，选中圆点的宽度为16vp，高度为8vp。\n- 控制按钮的背景颜色为默认颜色，文本颜色为默认颜色。\n\n组件的排列和嵌套关系：\n- 轮播图和控制按钮通过Column组件垂直排列，轮播图在上，控制按钮在下。\n- 轮播图内部的文本项通过LazyForEach组件动态生成。\n- 控制按钮通过Row组件水平排列，按钮之间的间距为12vp。\n\n组件的功能和交互：\n- 轮播图支持自动播放，间隔为4000毫秒，循环播放，切换动画时间为1000毫秒。\n- 导航指示器支持超长显示动画效果，最多显示9个圆点。\n- 控制按钮支持点击事件，点击“showNext”按钮切换到下一个轮播项，点击“showPrevious”按钮切换到上一个轮播项。",
        "code": "// 定义一个数据源类，用于提供轮播图的数据\nclass MyDataSource implements IDataSource {\n  private list: number[] = []\n\n  constructor(list: number[]) {\n    this.list = list\n  }\n\n  totalCount(): number {\n    return this.list.length\n  }\n\n  getData(index: number): number {\n    return this.list[index]\n  }\n\n  registerDataChangeListener(listener: DataChangeListener): void {\n  }\n\n  unregisterDataChangeListener() {\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  private swiperController: SwiperController = new SwiperController()\n  private data: MyDataSource = new MyDataSource([])\n\n  aboutToAppear(): void {\n    let list: number[] = []\n    for (let i = 1; i <= 15; i++) {\n      list.push(i);\n    }\n    this.data = new MyDataSource(list)\n  }\n\n  build() {\n    Column({ space: 5 }) {\n      Swiper(this.swiperController) {\n        LazyForEach(this.data, (item: string) => {\n          Text(item.toString())\n            .width('90%')\n            .height(160)\n            .backgroundColor(0xAFEEEE)\n            .textAlign(TextAlign.Center)\n            .fontSize(30)\n        }, (item: string) => item)\n      }\n      .cachedCount(2)\n      .index(5)\n      .autoPlay(true)\n      .interval(4000)\n      .loop(true)\n      .duration(1000)\n      .itemSpace(0)\n      .indicator( \n        new DotIndicator()\n          .itemWidth(8)\n          .itemHeight(8)\n          .selectedItemWidth(16)\n          .selectedItemHeight(8)\n          .color(Color.Gray)\n          .selectedColor(Color.Blue)\n          .maxDisplayCount(9))\n      .displayArrow({ \n        showBackground: true,\n        isSidebarMiddle: true,\n        backgroundSize: 24,\n        backgroundColor: Color.White,\n        arrowSize: 18,\n        arrowColor: Color.Blue\n      }, false)\n      .curve(Curve.Linear)\n      Row({ space: 12 }) {\n        Button('showNext')\n          .onClick(() => {\n            this.swiperController.showNext()\n          })\n        Button('showPrevious')\n          .onClick(() => {\n            this.swiperController.showPrevious()\n          })\n      }.margin(5)\n    }.width('100%')\n    .margin({ top: 5 })\n  }\n}"
    },
    {
        "description": "该示例通过 Swiper 组件实现了一个按组翻页的效果。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上分为两个主要部分：Swiper 组件和按钮组。Swiper 组件用于展示一组数字，每个数字以 Text 组件的形式显示在一个卡片中。Swiper 组件的布局属性包括宽度为 90%，高度为 160vp，背景颜色为 0xAFEEEE，文本居中对齐，字体大小为 30。Swiper 组件的样式包括自动播放、循环播放、间隔时间为 4 秒、过渡时间为 1 秒、项目间距为 10vp，并带有指示器。指示器的样式包括默认和选中状态下的宽度和高度均为 15vp，颜色分别为灰色和蓝色。\n\n按钮组位于 Swiper 组件下方，包含两个按钮：“showNext” 和 “showPrevious”。按钮组的布局属性包括宽度为 100%，内边距为 5vp。按钮的样式包括默认的按钮样式，点击事件分别用于显示下一组和上一组内容。\n\n整个布局通过 Column 组件实现垂直排列，确保界面整洁美观。",
        "code": "// 定义一个数据源类，实现 IDataSource 接口\nclass MyDataSource implements IDataSource {\n  private list: number[] = []\n\n  // 构造函数，初始化数据源列表\n  constructor(list: number[]) {\n    this.list = list\n  }\n\n  // 返回数据源的总数\n  totalCount(): number {\n    return this.list.length\n  }\n\n  // 根据索引获取数据源中的数据\n  getData(index: number): number {\n    return this.list[index]\n  }\n\n  // 注册数据变化监听器（未实现）\n  registerDataChangeListener(listener: DataChangeListener): void {\n  }\n\n  // 注销数据变化监听器（未实现）\n  unregisterDataChangeListener() {\n  }\n}\n\n// 主入口组件\n@Entry\n@Component\nstruct SwiperExample {\n  // Swiper 控制器，用于控制 Swiper 组件的翻页\n  private swiperController: SwiperController = new SwiperController()\n  // 数据源实例，初始为空\n  private data: MyDataSource = new MyDataSource([])\n\n  // 组件即将显示时执行的初始化操作\n  aboutToAppear(): void {\n    let list: number[] = []\n    // 生成一个包含 1 到 10 的数字列表\n    for (let i = 1; i <= 10; i++) {\n      list.push(i);\n    }\n    // 初始化数据源\n    this.data = new MyDataSource(list)\n  }\n\n  // 构建组件的 UI\n  build() {\n    Column({ space: 5 }) {\n      // Swiper 组件，用于展示一组卡片\n      Swiper(this.swiperController) {\n        // 使用 LazyForEach 遍历数据源，生成 Text 组件\n        LazyForEach(this.data, (item: string) => {\n          Text(item.toString())\n            .width('90%') // 文本宽度为 90%\n            .height(160) // 文本高度为 160vp\n            .backgroundColor(0xAFEEEE) // 背景颜色为浅蓝色\n            .textAlign(TextAlign.Center) // 文本居中对齐\n            .fontSize(30) // 字体大小为 30\n        }, (item: string) => item) // 唯一标识符为 item 本身\n      }\n      .displayCount(3, true) // 每页显示 3 个项目，并启用分组\n      .autoPlay(true) // 自动播放\n      .interval(4000) // 自动播放间隔为 4 秒\n      .loop(true) // 循环播放\n      .duration(1000) // 过渡时间为 1 秒\n      .itemSpace(10) // 项目间距为 10vp\n      .indicator( \n        new DotIndicator()\n          .itemWidth(15) // 指示器宽度为 15vp\n          .itemHeight(15) // 指示器高度为 15vp\n          .selectedItemWidth(15) // 选中指示器宽度为 15vp\n          .selectedItemHeight(15) // 选中指示器高度为 15vp\n          .color(Color.Gray) // 默认指示器颜色为灰色\n          .selectedColor(Color.Blue)) // 选中指示器颜色为蓝色\n\n      // 按钮组，用于控制 Swiper 组件的翻页\n      Row({ space: 12 }) {\n        Button('showNext')\n          .onClick(() => {\n            this.swiperController.showNext() // 显示下一组内容\n          })\n        Button('showPrevious')\n          .onClick(() => {\n            this.swiperController.showPrevious() // 显示上一组内容\n          })\n      }.margin(5) // 按钮组内边距为 5vp\n    }.width('100%') // 列宽度为 100%\n    .margin({ top: 5 }) // 顶部外边距为 5vp\n  }\n}"
    },
    {
        "description": "该组件通过自定义Swiper页面切换动画实现了一个展示多种颜色背景的界面。布局宽度占据整个屏幕，高度设为300vp。组件的垂直方向上包含一个Swiper组件，Swiper组件内部通过ForEach循环生成多个Text组件，每个Text组件代表一个页面，背景颜色从预定义的颜色数组中获取。\nSwiper组件的样式包括高度、隐藏指示器、显示页面数量等属性。每个Text组件的样式包括宽度、高度、字体大小、文本对齐方式、背景颜色、透明度、缩放比例、平移位置和z轴索引等属性。\n组件的功能包括自定义页面切换动画，通过customContentTransition接口实现。在页面切换过程中，根据页面的位置和索引，动态调整页面的透明度、缩放比例、平移位置和z轴索引，从而实现自定义的动画效果。\n整个布局通过Column布局保证Swiper组件在垂直方向上居中显示，确保界面整洁美观。",
        "code": "@Entry\n@Component\nstruct SwiperCustomAnimationExample {\n  // 定义显示的页面数量\n  private DISPLAY_COUNT: number = 2\n  // 定义最小缩放比例\n  private MIN_SCALE: number = 0.75\n\n  // 定义背景颜色数组\n  @State backgroundColors: Color[] = [Color.Green, Color.Blue, Color.Yellow, Color.Pink, Color.Gray, Color.Orange]\n  // 定义透明度数组\n  @State opacityList: number[] = []\n  // 定义缩放比例数组\n  @State scaleList: number[] = []\n  // 定义平移位置数组\n  @State translateList: number[] = []\n  // 定义z轴索引数组\n  @State zIndexList: number[] = []\n\n  // 组件初始化时调用，初始化各个数组\n  aboutToAppear(): void {\n    for (let i = 0; i < this.backgroundColors.length; i++) {\n      this.opacityList.push(1.0)\n      this.scaleList.push(1.0)\n      this.translateList.push(0.0)\n      this.zIndexList.push(0)\n    }\n  }\n\n  build() {\n    Column() {\n      Swiper() {\n        // 通过ForEach循环生成多个Text组件\n        ForEach(this.backgroundColors, (backgroundColor: Color, index: number) => {\n          Text(index.toString()).width('100%').height('100%').fontSize(50).textAlign(TextAlign.Center)\n            .backgroundColor(backgroundColor)\n            // 设置透明度\n            .opacity(this.opacityList[index])\n            // 设置缩放比例\n            .scale({ x: this.scaleList[index], y: this.scaleList[index] })\n            // 设置平移位置\n            .translate({ x: this.translateList[index] })\n            // 设置z轴索引\n            .zIndex(this.zIndexList[index])\n        })\n      }\n      .height(300)\n      // 隐藏指示器\n      .indicator(false)\n      // 设置显示的页面数量\n      .displayCount(this.DISPLAY_COUNT, true)\n      // 自定义页面切换动画\n      .customContentTransition({\n        timeout: 1000,\n        transition: (proxy: SwiperContentTransitionProxy) => {\n          // 根据页面的位置和索引，动态调整页面的透明度、缩放比例、平移位置和z轴索引\n          if (proxy.position <= proxy.index % this.DISPLAY_COUNT || proxy.position >= this.DISPLAY_COUNT + proxy.index % this.DISPLAY_COUNT) {\n            this.opacityList[proxy.index] = 1.0\n            this.scaleList[proxy.index] = 1.0\n            this.translateList[proxy.index] = 0.0\n            this.zIndexList[proxy.index] = 0\n          } else {\n            if (proxy.index % this.DISPLAY_COUNT === 0) {\n              this.opacityList[proxy.index] = 1 - proxy.position / this.DISPLAY_COUNT\n              this.scaleList[proxy.index] = this.MIN_SCALE + (1 - this.MIN_SCALE) * (1 - proxy.position / this.DISPLAY_COUNT)\n              this.translateList[proxy.index] = - proxy.position * proxy.mainAxisLength + (1 - this.scaleList[proxy.index]) * proxy.mainAxisLength / 2.0\n            } else {\n              this.opacityList[proxy.index] = 1 - (proxy.position - 1) / this.DISPLAY_COUNT\n              this.scaleList[proxy.index] = this.MIN_SCALE + (1 - this.MIN_SCALE) * (1 - (proxy.position - 1) / this.DISPLAY_COUNT)\n              this.translateList[proxy.index] = - (proxy.position - 1) * proxy.mainAxisLength - (1 - this.scaleList[proxy.index]) * proxy.mainAxisLength / 2.0\n            }\n            this.zIndexList[proxy.index] = -1\n          }\n        }\n      })\n      // 页面滚动时触发的事件\n      .onContentDidScroll((selectedIndex: number, index: number, position: number, mainAxisLength: number) => {\n        console.info(\"onContentDidScroll selectedIndex: \" + selectedIndex + \", index: \" + index + \", position: \" + position + \", mainAxisLength: \" + mainAxisLength)\n      })\n    }.width('100%')\n  }\n}"
    },
    {
        "description": "该示例通过 Swiper 组件实现了一个轮播图功能，并使用自定义的导航点和控制按钮来增强用户体验。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为两个主要部分：轮播图和控制按钮。轮播图部分包含多个文本项，每个文本项以卡片形式展示，卡片背景颜色为浅蓝色，文本居中显示，字体大小为30。控制按钮部分包含两个按钮，分别用于显示下一项和上一项，按钮之间有12vp的间距，按钮的点击事件通过 SwiperController 控制轮播图的切换。\n\n轮播图的样式包括导航点的颜色、大小和选中状态的颜色，导航点以灰色显示，选中时变为蓝色。轮播图的切换效果为线性动画，切换时间为1000毫秒，支持自动播放和循环播放，间隔为4000毫秒。轮播图的交互功能包括滑动切换、动画开始和结束的回调事件，以及导航点的交互功能。\n\n整个布局通过 Column 和 Row 组件进行嵌套，确保界面整洁美观，且功能丰富。",
        "code": "// 自定义数据源类，实现 IDataSource 接口\nclass MyDataSource implements IDataSource {\n  private list: number[] = []\n\n  // 构造函数，初始化数据列表\n  constructor(list: number[]) {\n    this.list = list\n  }\n\n  // 返回数据总数\n  totalCount(): number {\n    return this.list.length\n  }\n\n  // 根据索引获取数据项\n  getData(index: number): number {\n    return this.list[index]\n  }\n\n  // 注册数据变化监听器（未实现）\n  registerDataChangeListener(listener: DataChangeListener): void {\n  }\n\n  // 注销数据变化监听器（未实现）\n  unregisterDataChangeListener() {\n  }\n}\n\n// 入口组件，使用 Swiper 组件实现轮播图功能\n@Entry\n@Component\nstruct SwiperExample {\n  // Swiper 控制器，用于手动控制轮播图\n  private swiperController: SwiperController = new SwiperController()\n  // 数据源实例，初始为空\n  private data: MyDataSource = new MyDataSource([])\n\n  // 组件即将显示时，初始化数据源\n  aboutToAppear(): void {\n    let list: number[] = []\n    for (let i = 1; i <= 10; i++) {\n      list.push(i);\n    }\n    this.data = new MyDataSource(list)\n  }\n\n  // 构建组件布局\n  build() {\n    Column({ space: 5 }) {\n      // Swiper 组件，用于展示轮播图\n      Swiper(this.swiperController) {\n        // 使用 LazyForEach 遍历数据源，生成轮播图项\n        LazyForEach(this.data, (item: string) => {\n          Text(item.toString())\n            .width('90%') // 文本项宽度为父容器的90%\n            .height(160) // 文本项高度为160vp\n            .backgroundColor(0xAFEEEE) // 文本项背景颜色为浅蓝色\n            .textAlign(TextAlign.Center) // 文本居中对齐\n            .fontSize(30) // 文本字体大小为30\n        }, (item: string) => item)\n      }\n      .cachedCount(2) // 缓存2个轮播图项\n      .index(1) // 初始显示第2个轮播图项\n      .autoPlay(true) // 开启自动播放\n      .interval(4000) // 自动播放间隔为4000毫秒\n      .loop(true) // 开启循环播放\n      .indicatorInteractive(true) // 开启导航点交互功能\n      .duration(1000) // 切换动画时间为1000毫秒\n      .itemSpace(0) // 轮播图项之间的间距为0\n      .indicator( \n        new DotIndicator()\n          .itemWidth(15) // 导航点宽度为15vp\n          .itemHeight(15) // 导航点高度为15vp\n          .selectedItemWidth(15) // 选中导航点宽度为15vp\n          .selectedItemHeight(15) // 选中导航点高度为15vp\n          .color(Color.Gray) // 导航点颜色为灰色\n          .selectedColor(Color.Blue)) // 选中导航点颜色为蓝色\n      .displayArrow({ \n        showBackground: true, // 显示箭头背景\n        isSidebarMiddle: true, // 箭头位于侧边栏中间\n        backgroundSize: 24, // 箭头背景大小为24vp\n        backgroundColor: Color.White, // 箭头背景颜色为白色\n        arrowSize: 18, // 箭头大小为18vp\n        arrowColor: Color.Blue // 箭头颜色为蓝色\n      }, false) // 不显示箭头\n      .curve(Curve.Linear) // 切换动画曲线为线性\n      .onChange((index: number) => {\n        console.info(index.toString()) // 切换时输出当前索引\n      })\n      .onGestureSwipe((index: number, extraInfo: SwiperAnimationEvent) => {\n        console.info(\"index: \" + index) // 滑动时输出当前索引\n        console.info(\"current offset: \" + extraInfo.currentOffset) // 滑动时输出当前偏移量\n      })\n      .onAnimationStart((index: number, targetIndex: number, extraInfo: SwiperAnimationEvent) => {\n        console.info(\"index: \" + index) // 动画开始时输出当前索引\n        console.info(\"targetIndex: \" + targetIndex) // 动画开始时输出目标索引\n        console.info(\"current offset: \" + extraInfo.currentOffset) // 动画开始时输出当前偏移量\n        console.info(\"target offset: \" + extraInfo.targetOffset) // 动画开始时输出目标偏移量\n        console.info(\"velocity: \" + extraInfo.velocity) // 动画开始时输出速度\n      })\n      .onAnimationEnd((index: number, extraInfo: SwiperAnimationEvent) => {\n        console.info(\"index: \" + index) // 动画结束时输出当前索引\n        console.info(\"current offset: \" + extraInfo.currentOffset) // 动画结束时输出当前偏移量\n      })\n\n      // 控制按钮部分，包含两个按钮\n      Row({ space: 12 }) {\n        Button('showNext')\n          .onClick(() => {\n            this.swiperController.showNext() // 点击按钮显示下一项\n          })\n        Button('showPrevious')\n          .onClick(() => {\n            this.swiperController.showPrevious() // 点击按钮显示上一项\n          })\n      }.margin(5) // 按钮部分的外边距为5vp\n    }.width('100%') // 主布局宽度为100%\n    .margin({ top: 5 }) // 主布局的上外边距为5vp\n  }\n}"
    }
]