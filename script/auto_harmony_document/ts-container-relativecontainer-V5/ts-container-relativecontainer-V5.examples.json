[
    {
        "description": "该示例展示了如何在鸿蒙ArkUI中使用`bias`属性来控制组件在容器中的偏移量。布局由一个`Row`组件包裹一个`RelativeContainer`组件构成。`Row`组件用于水平排列其子组件，而`RelativeContainer`组件则用于相对定位其子组件。\n\n布局宽度为300vp，高度为300vp，并且有一个蓝色的边框。`Row`组件的高度设置为100%，以确保其占据整个父容器的空间。`RelativeContainer`组件内部包含一个`Row`组件，该`Row`组件的宽度为100vp，高度为100vp，背景颜色为红色。通过`alignRules`属性，`Row`组件被相对定位在`RelativeContainer`的顶部、底部、左侧和右侧，并且通过`bias`属性在垂直方向上偏移了30%。\n\n组件的样式包括背景颜色、边框颜色和宽度等属性。组件的排列和嵌套关系通过`Row`和`RelativeContainer`组件实现，确保子组件在父容器中的相对位置。组件的功能主要是展示`bias`属性的用法，通过调整`bias`属性的值，可以控制组件在容器中的偏移量。",
        "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() { // 创建一个水平排列的容器\n      RelativeContainer() { // 创建一个相对定位的容器\n        Row().width(100).height(100) // 创建一个宽度为100vp，高度为100vp的Row组件\n          .backgroundColor(\"#FF3333\") // 设置背景颜色为红色\n          .alignRules({ // 设置相对定位规则\n            top: {anchor: \"__container__\", align: VerticalAlign.Top}, // 相对于容器的顶部对齐\n            bottom: {anchor: \"__container__\", align: VerticalAlign.Bottom}, // 相对于容器的底部对齐\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start}, // 相对于容器的左侧对齐\n            right: {anchor: \"__container__\", align: HorizontalAlign.End}, // 相对于容器的右侧对齐\n            bias: {vertical: 0.3} // 在垂直方向上偏移30%\n          })\n          .id(\"row1\") // 设置组件的ID为\"row1\"\n      }\n      .width(300).height(300) // 设置RelativeContainer的宽度为300vp，高度为300vp\n      .margin({left: 50}) // 设置左侧外边距为50vp\n      .border({width: 2, color: \"#6699FF\"}) // 设置边框宽度为2vp，颜色为蓝色\n    }\n    .height('100%') // 设置Row组件的高度为100%\n  }\n}"
    },
    {
        "description": "该示例展示了如何在鸿蒙ArkUI中使用`guideline`进行布局。通过`RelativeContainer`组件和`guideline`，可以实现复杂的相对布局。布局中包含一个`Row`组件，内部嵌套了一个`RelativeContainer`，`RelativeContainer`中定义了两个`guideline`，分别用于水平和垂直方向的定位。`Row`组件内部有一个红色的`Row`子组件，该子组件通过`alignRules`属性与`guideline`进行对齐。整体布局宽度为300vp，高度为300vp，带有蓝色边框，并且左边缘有50vp的边距。\n\n布局属性：\n- `Row`组件的宽度为300vp，高度为300vp，左边缘有50vp的边距。\n- `RelativeContainer`的宽度为300vp，高度为300vp。\n- 红色的`Row`子组件的宽度为100vp，高度为100vp。\n\n组件的样式和外观：\n- `Row`组件的背景颜色为红色（#FF3333）。\n- `RelativeContainer`的边框宽度为2vp，颜色为蓝色（#6699FF）。\n\n组件的排列和嵌套关系：\n- `Row`组件内部嵌套了一个`RelativeContainer`。\n- `RelativeContainer`内部定义了两个`guideline`，分别用于水平和垂直方向的定位。\n- 红色的`Row`子组件通过`alignRules`属性与`guideline`进行对齐。\n\n组件的功能和交互：\n- `guideline`用于辅助布局，通过`alignRules`属性实现组件的相对定位。\n- `alignRules`属性指定了组件相对于`guideline`的对齐方式。",
        "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        Row().width(100).height(100) // 创建一个宽度为100vp，高度为100vp的Row组件\n          .backgroundColor(\"#FF3333\") // 设置背景颜色为红色（#FF3333）\n          .alignRules({\n            left: {anchor: \"guideline1\", align: HorizontalAlign.End}, // 左边缘与guideline1的末端对齐\n            top: {anchor: \"guideline2\", align: VerticalAlign.Top} // 顶部与guideline2的顶部对齐\n          })\n          .id(\"row1\") // 为该Row组件设置ID为\"row1\"\n      }\n      .width(300).height(300) // 设置RelativeContainer的宽度为300vp，高度为300vp\n      .margin({left: 50}) // 设置左边缘的边距为50vp\n      .border({width:2, color: \"#6699FF\"}) // 设置边框宽度为2vp，颜色为蓝色（#6699FF）\n      .guideLine([{id:\"guideline1\", direction: Axis.Vertical, position:{start:50}}, // 定义一个垂直方向的guideline，起始位置为50vp\n        {id:\"guideline2\", direction: Axis.Horizontal, position:{start:50}}]) // 定义一个水平方向的guideline，起始位置为50vp\n    }\n    .height('100%') // 设置Row组件的高度为100%\n  }\n}"
    },
    {
        "description": "该组件通过 RelativeContainer 和 Row 布局实现了一个水平方向的带 bias 的 PACKED 链。布局宽度为 300vp，高度为 300vp，外边距为左侧 50vp，边框宽度为 2vp，颜色为 #6699FF。组件的垂直方向上包含三个 Row 组件，每个 Row 组件包含一个 Text 组件，分别显示 \"row1\"、\"row2\" 和 \"row3\"。每个 Row 组件的宽度为 80vp，高度为 80vp，背景颜色分别为 #FF3333、#FFCC00 和 #FF6633。\n\nRow 组件的排列和嵌套关系如下：\n- \"row1\" 组件通过 alignRules 属性设置其左对齐于容器，右对齐于 \"row2\" 组件的左侧，垂直居中对齐于容器，并且设置了水平方向的 bias 为 0。\n- \"row2\" 组件通过 alignRules 属性设置其左对齐于 \"row1\" 组件的右侧，右对齐于 \"row3\" 组件的左侧，顶部对齐于 \"row1\" 组件的顶部。\n- \"row3\" 组件通过 alignRules 属性设置其左对齐于 \"row2\" 组件的右侧，右对齐于容器的右侧，顶部对齐于 \"row1\" 组件的顶部。\n\n整个布局通过 RelativeContainer 和 Row 组件的组合，实现了水平方向的 PACKED 链布局，确保组件在水平方向上有序排列，并且通过 bias 属性调整了组件的位置。",
        "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF3333\")\n          .alignRules({\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start}, // 左对齐于容器\n            right: {anchor: \"row2\", align : HorizontalAlign.Start}, // 右对齐于 \"row2\" 组件的左侧\n            center: {anchor: \"__container__\", align: VerticalAlign.Center}, // 垂直居中对齐于容器\n            bias : {horizontal : 0} // 水平方向的 bias 为 0\n          })\n          .id(\"row1\")\n          .chainMode(Axis.Horizontal, ChainStyle.PACKED) // 设置水平方向的 PACKED 链\n\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            left: {anchor: \"row1\", align: HorizontalAlign.End}, // 左对齐于 \"row1\" 组件的右侧\n            right: {anchor: \"row3\", align : HorizontalAlign.Start}, // 右对齐于 \"row3\" 组件的左侧\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 顶部对齐于 \"row1\" 组件的顶部\n          })\n          .id(\"row2\")\n\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            left: {anchor: \"row2\", align: HorizontalAlign.End}, // 左对齐于 \"row2\" 组件的右侧\n            right: {anchor: \"__container__\", align : HorizontalAlign.End}, // 右对齐于容器的右侧\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 顶部对齐于 \"row1\" 组件的顶部\n          })\n          .id(\"row3\")\n      }\n      .width(300).height(300)\n      .margin({left: 50})\n      .border({width:2, color: \"#6699FF\"})\n    }\n    .height('100%')\n  }\n}"
    },
    {
        "description": "该示例展示了以容器和容器内组件作为锚点进行布局的用法。整体布局由一个 `Row` 容器包裹一个 `RelativeContainer` 容器组成。`RelativeContainer` 容器内部包含五个 `Row` 组件，每个 `Row` 组件内包含一个 `Text` 组件，用于显示文本内容。每个 `Row` 组件通过 `alignRules` 属性定义了相对于容器或其他组件的布局规则。\n\n布局属性方面，`RelativeContainer` 容器的宽度为 300vp，高度为 300vp，并且设置了左边距为 50vp，容器周围有宽度为 2vp 的蓝色边框。每个 `Row` 组件的宽度为 100vp，高度为 100vp，背景颜色分别为不同的颜色。\n\n组件的样式和外观方面，每个 `Row` 组件内的 `Text` 组件通过 `justifyContent` 属性设置为居中对齐，背景颜色通过 `backgroundColor` 属性设置为不同的颜色。\n\n组件的排列和嵌套关系方面，`RelativeContainer` 容器内部的 `Row` 组件通过 `alignRules` 属性定义了相对于容器或其他组件的布局规则。例如，`row1` 组件相对于容器的顶部和左侧对齐，`row2` 组件相对于容器的顶部和右侧对齐，`row3` 组件相对于 `row1` 组件的底部和右侧对齐，同时相对于 `row2` 组件的左侧对齐。\n\n组件的功能和交互方面，该示例主要展示了布局的灵活性，没有涉及具体的交互功能。",
        "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF3333\")\n          .alignRules({\n            top: {anchor: \"__container__\", align: VerticalAlign.Top},\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start}\n          })\n          .id(\"row1\")\n\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            top: {anchor: \"__container__\", align: VerticalAlign.Top},\n            right: {anchor: \"__container__\", align: HorizontalAlign.End}\n          })\n          .id(\"row2\")\n\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .height(100)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            top: {anchor: \"row1\", align: VerticalAlign.Bottom},\n            left: {anchor: \"row1\", align: HorizontalAlign.End},\n            right: {anchor: \"row2\", align: HorizontalAlign.Start}\n          })\n          .id(\"row3\")\n\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .backgroundColor(\"#FF9966\")\n          .alignRules({\n            top: {anchor: \"row3\", align: VerticalAlign.Bottom},\n            bottom: {anchor: \"__container__\", align: VerticalAlign.Bottom},\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start},\n            right: {anchor: \"row1\", align: HorizontalAlign.End}\n          })\n          .id(\"row4\")\n\n        Row(){Text('row5')}.justifyContent(FlexAlign.Center)\n          .backgroundColor(\"#FF66FF\")\n          .alignRules({\n            top: {anchor: \"row3\", align: VerticalAlign.Bottom},\n            bottom: {anchor: \"__container__\", align: VerticalAlign.Bottom},\n            left: {anchor: \"row2\", align: HorizontalAlign.Start},\n            right: {anchor: \"__container__\", align: HorizontalAlign.End}\n          })\n          .id(\"row5\")\n      }\n      .width(300).height(300)\n      .margin({left: 50})\n      .border({width:2, color: \"#6699FF\"})\n    }\n    .height('100%')\n  }\n}"
    },
    {
        "description": "该示例展示了在容器内子组件设置margin的用法。整体布局由一个Row组件包裹一个RelativeContainer组件构成，RelativeContainer内部包含四个Row子组件，每个Row组件内嵌一个Text组件。布局宽度为300vp，高度为300vp，外边距为左50vp，容器有蓝色边框。\n\n子组件的排列和嵌套关系如下：\n- Row1位于容器的左上角，宽度100vp，高度100vp，背景颜色为红色，内边距为10vp。\n- Row2位于Row1的右侧，宽度100vp，高度100vp，背景颜色为黄色。\n- Row3位于Row1的下方，宽度100vp，高度100vp，背景颜色为橙色。\n- Row4位于Row3的右侧，且位于Row2的下方，宽度100vp，高度100vp，背景颜色为浅橙色，内边距为10vp。\n\n每个子组件通过alignRules属性进行相对定位，确保在RelativeContainer中的位置关系。",
        "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // Row1组件，包含一个Text组件，内容为'row1'，居中对齐，宽度100vp，高度100vp，背景颜色为红色，内边距为10vp\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF3333\")\n          .alignRules({\n            top: {anchor: \"__container__\", align: VerticalAlign.Top}, // 顶部对齐容器顶部\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start} // 左侧对齐容器左侧\n          })\n          .id(\"row1\")\n          .margin(10) // 设置内边距为10vp\n\n        // Row2组件，包含一个Text组件，内容为'row2'，居中对齐，宽度100vp，高度100vp，背景颜色为黄色\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            left: {anchor: \"row1\", align: HorizontalAlign.End}, // 左侧对齐Row1的右侧\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 顶部对齐Row1的顶部\n          })\n          .id(\"row2\")\n\n        // Row3组件，包含一个Text组件，内容为'row3'，居中对齐，宽度100vp，高度100vp，背景颜色为橙色\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            left: {anchor: \"row1\", align: HorizontalAlign.Start}, // 左侧对齐Row1的左侧\n            top: {anchor: \"row1\", align: VerticalAlign.Bottom} // 顶部对齐Row1的底部\n          })\n          .id(\"row3\")\n\n        // Row4组件，包含一个Text组件，内容为'row4'，居中对齐，宽度100vp，高度100vp，背景颜色为浅橙色，内边距为10vp\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF9966\")\n          .alignRules({\n            left: {anchor: \"row3\", align: HorizontalAlign.End}, // 左侧对齐Row3的右侧\n            top: {anchor: \"row2\", align: VerticalAlign.Bottom} // 顶部对齐Row2的底部\n          })\n          .id(\"row4\")\n          .margin(10) // 设置内边距为10vp\n      }\n      .width(300).height(300) // 设置RelativeContainer的宽度为300vp，高度为300vp\n      .margin({left: 50}) // 设置RelativeContainer的左外边距为50vp\n      .border({width:2, color: \"#6699FF\"}) // 设置RelativeContainer的边框宽度为2vp，颜色为蓝色\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}"
    },
    {
        "description": "该示例展示了如何在鸿蒙ArkUI中使用RelativeContainer组件和barrier来实现复杂的布局。布局宽度为300vp，高度为300vp，外边距为左侧50vp，并带有2vp宽的蓝色边框。布局内部包含四个Row组件，每个Row组件包含一个Text组件，分别显示'row1'、'row2'、'row3'和'row4'。每个Row组件具有不同的背景颜色，并且通过alignRules属性定义了它们之间的相对位置关系。\n\n布局中使用了两个barrier，分别命名为barrier1和barrier2。barrier1位于row1和row2的右侧，barrier2位于row1和row2的底部。这些barrier作为锚点，用于定义row3和row4的相对位置。row3的左侧与barrier1的右侧对齐，顶部与row1的顶部对齐；row4的左侧与row1的左侧对齐，顶部与barrier2的底部对齐。\n\n整个布局通过RelativeContainer组件实现，确保组件之间的相对位置关系正确，并且通过barrier实现了更复杂的布局控制。",
        "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个Row组件，包含一个Text组件，显示'row1'，宽度100vp，高度100vp，背景颜色为红色，居中对齐\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF3333\")\n          .id(\"row1\")\n\n        // 第二个Row组件，包含一个Text组件，显示'row2'，宽度100vp，高度100vp，背景颜色为黄色，通过alignRules属性定义其相对位置\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            middle: {anchor: \"row1\", align: HorizontalAlign.End}, // 水平方向上与row1的右侧对齐\n            top: {anchor: \"row1\", align: VerticalAlign.Bottom} // 垂直方向上与row1的底部对齐\n          })\n          .id(\"row2\")\n\n        // 第三个Row组件，包含一个Text组件，显示'row3'，宽度100vp，高度100vp，背景颜色为橙色，通过alignRules属性定义其相对位置\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            left: {anchor: \"barrier1\", align: HorizontalAlign.End}, // 水平方向上与barrier1的右侧对齐\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 垂直方向上与row1的顶部对齐\n          })\n          .id(\"row3\")\n\n        // 第四个Row组件，包含一个Text组件，显示'row4'，宽度50vp，高度50vp，背景颜色为浅橙色，通过alignRules属性定义其相对位置\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .width(50).height(50)\n          .backgroundColor(\"#FF9966\")\n          .alignRules({\n            left: {anchor: \"row1\", align: HorizontalAlign.Start}, // 水平方向上与row1的左侧对齐\n            top: {anchor: \"barrier2\", align: VerticalAlign.Bottom} // 垂直方向上与barrier2的底部对齐\n          })\n          .id(\"row4\")\n      }\n      .width(300).height(300) // RelativeContainer的宽度为300vp，高度为300vp\n      .margin({left: 50}) // 左侧外边距为50vp\n      .border({width:2, color: \"#6699FF\"}) // 边框宽度为2vp，颜色为蓝色\n      .barrier([ // 定义两个barrier，barrier1和barrier2\n        {id: \"barrier1\", direction: BarrierDirection.RIGHT, referencedId:[\"row1\", \"row2\"]}, // barrier1位于row1和row2的右侧\n        {id: \"barrier2\", direction: BarrierDirection.BOTTOM, referencedId:[\"row1\", \"row2\"]} // barrier2位于row1和row2的底部\n      ])\n    }\n    .height('100%') // Row组件的高度占据整个屏幕\n  }\n}"
    },
    {
        "description": "该示例展示了在RTL（Right-to-Left，从右到左）模式下，使用`RelativeContainer`组件进行相对布局，并通过`LocalizedAlignRuleOptions`和`LocalizedBarrierDirection`设置对齐方式的用法。布局宽度为300vp，高度为300vp，外边距为左侧50vp，并带有宽度为2vp的蓝色边框。组件的排列和嵌套关系如下：\n\n1. 整个布局被包裹在一个`Row`组件中，`Row`组件的高度设置为100%，占据整个屏幕高度。\n2. `RelativeContainer`组件内部包含四个`Row`子组件，每个`Row`组件包含一个`Text`组件，分别显示文本'row1'、'row2'、'row3'和'row4'。\n3. 每个`Row`组件的宽度为100vp，高度为100vp（除了'row4'，其宽度为50vp，高度为50vp），并设置了不同的背景颜色。\n4. `Row`组件的对齐方式通过`justifyContent(FlexAlign.Center)`设置为居中对齐。\n5. 通过`alignRules`属性，设置了每个`Row`组件相对于其他组件或barrier的对齐规则。例如，'row2'相对于'row1'在水平方向上对齐到末尾，在垂直方向上对齐到下方。\n6. `RelativeContainer`组件的方向设置为`Direction.Rtl`，即从右到左布局。\n7. 通过`barrier`属性，定义了两个barrier，分别用于在水平和垂直方向上作为对齐的锚点。`barrier1`在水平方向上位于'row1'和'row2'的末尾，`barrier2`在垂直方向上位于'row1'和'row2'的下方。\n\n整个布局通过`RelativeContainer`组件实现相对定位，确保在RTL模式下组件能够正确对齐。",
        "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个Row组件，包含文本'row1'，宽度100vp，高度100vp，背景颜色为红色，居中对齐\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF3333\")\n          .id(\"row1\")\n\n        // 第二个Row组件，包含文本'row2'，宽度100vp，高度100vp，背景颜色为黄色，相对于'row1'进行对齐\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            middle: {anchor: \"row1\", align: HorizontalAlign.End}, // 水平方向上对齐到'row1'的末尾\n            top: {anchor: \"row1\", align: VerticalAlign.Bottom} // 垂直方向上对齐到'row1'的下方\n          })\n          .id(\"row2\")\n\n        // 第三个Row组件，包含文本'row3'，宽度100vp，高度100vp，背景颜色为橙色，相对于barrier1进行对齐\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            start: {anchor: \"barrier1\", align: HorizontalAlign.End}, // 水平方向上对齐到barrier1的末尾\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 垂直方向上对齐到'row1'的顶部\n          })\n          .id(\"row3\")\n\n        // 第四个Row组件，包含文本'row4'，宽度50vp，高度50vp，背景颜色为浅橙色，相对于'row1'和barrier2进行对齐\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .width(50).height(50)\n          .backgroundColor(\"#FF9966\")\n          .alignRules({\n            start: {anchor: \"row1\", align: HorizontalAlign.Start}, // 水平方向上对齐到'row1'的起始位置\n            top: {anchor: \"barrier2\", align: VerticalAlign.Bottom} // 垂直方向上对齐到barrier2的下方\n          })\n          .id(\"row4\")\n      }\n      .direction(Direction.Rtl) // 设置布局方向为从右到左\n      .width(300).height(300) // 设置RelativeContainer的宽度和高度\n      .margin({left: 50}) // 设置左侧外边距\n      .border({width:2, color: \"#6699FF\"}) // 设置蓝色边框\n      .barrier([\n        {id: \"barrier1\", localizedDirection: LocalizedBarrierDirection.END, referencedId:[\"row1\", \"row2\"]}, // 定义barrier1，位于'row1'和'row2'的末尾\n        {id: \"barrier2\", localizedDirection: LocalizedBarrierDirection.BOTTOM, referencedId:[\"row1\", \"row2\"]} // 定义barrier2，位于'row1'和'row2'的下方\n      ])\n    }\n    .height('100%') // 设置Row组件的高度为100%\n  }\n}"
    },
    {
        "description": "该示例展示了如何使用 RelativeContainer 组件来实现容器大小适应内容（声明 size 为 \"auto\"）的布局。RelativeContainer 是一个相对布局容器，允许子组件通过相对定位来排列。在这个示例中，四个 Row 组件被放置在 RelativeContainer 中，并通过 alignRules 属性进行相对定位。每个 Row 组件包含一个 Text 组件，用于显示文本内容。Row 组件的宽度和高度均为 100vp，背景颜色不同，以便区分。RelativeContainer 的宽度和高度设置为 \"auto\"，使其大小适应内部内容。整个布局通过 Row 组件包裹，并设置了边距和边框样式。\n\n布局属性：\n- RelativeContainer 的宽度和高度设置为 \"auto\"，使其大小适应内部内容。\n- Row 组件的宽度和高度均为 100vp。\n- RelativeContainer 设置了左外边距为 50vp，并添加了宽度为 2vp、颜色为 \"#6699FF\" 的边框。\n\n组件的样式和外观：\n- Row 组件的背景颜色分别为 \"#FF3333\"、\"#FFCC00\"、\"#FF6633\" 和 \"#FF9966\"。\n- Text 组件的文本内容分别为 \"row1\"、\"row2\"、\"row3\" 和 \"row4\"。\n- RelativeContainer 的边框颜色为 \"#6699FF\"。\n\n组件的排列和嵌套关系：\n- 四个 Row 组件被放置在 RelativeContainer 中，并通过 alignRules 属性进行相对定位。\n- Row 组件的排列方式为水平布局，并通过 justifyContent 属性设置为居中对齐。\n\n组件的功能和交互：\n- 该示例主要展示了布局和样式，没有涉及交互功能。",
        "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center) // 创建一个 Row 组件，包含一个 Text 组件，内容为 \"row1\"，并设置为居中对齐\n          .width(100).height(100) // 设置 Row 组件的宽度和高度均为 100vp\n          .backgroundColor(\"#FF3333\") // 设置 Row 组件的背景颜色为 \"#FF3333\"\n          .id(\"row1\") // 为 Row 组件设置 ID 为 \"row1\"，用于相对定位\n\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center) // 创建一个 Row 组件，包含一个 Text 组件，内容为 \"row2\"，并设置为居中对齐\n          .width(100).height(100) // 设置 Row 组件的宽度和高度均为 100vp\n          .backgroundColor(\"#FFCC00\") // 设置 Row 组件的背景颜色为 \"#FFCC00\"\n          .alignRules({ // 设置 Row 组件的相对定位规则\n            left: {anchor: \"row1\", align: HorizontalAlign.End}, // 相对于 \"row1\" 的右侧对齐\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 相对于 \"row1\" 的顶部对齐\n          })\n          .id(\"row2\") // 为 Row 组件设置 ID 为 \"row2\"，用于相对定位\n\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center) // 创建一个 Row 组件，包含一个 Text 组件，内容为 \"row3\"，并设置为居中对齐\n          .width(100).height(100) // 设置 Row 组件的宽度和高度均为 100vp\n          .backgroundColor(\"#FF6633\") // 设置 Row 组件的背景颜色为 \"#FF6633\"\n          .alignRules({ // 设置 Row 组件的相对定位规则\n            left: {anchor: \"row1\", align: HorizontalAlign.Start}, // 相对于 \"row1\" 的左侧对齐\n            top: {anchor: \"row1\", align: VerticalAlign.Bottom} // 相对于 \"row1\" 的底部对齐\n          })\n          .id(\"row3\") // 为 Row 组件设置 ID 为 \"row3\"，用于相对定位\n\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center) // 创建一个 Row 组件，包含一个 Text 组件，内容为 \"row4\"，并设置为居中对齐\n          .width(100).height(100) // 设置 Row 组件的宽度和高度均为 100vp\n          .backgroundColor(\"#FF9966\") // 设置 Row 组件的背景颜色为 \"#FF9966\"\n          .alignRules({ // 设置 Row 组件的相对定位规则\n            left: {anchor: \"row3\", align: HorizontalAlign.End}, // 相对于 \"row3\" 的右侧对齐\n            top: {anchor: \"row2\", align: VerticalAlign.Bottom} // 相对于 \"row2\" 的底部对齐\n          })\n          .id(\"row4\") // 为 Row 组件设置 ID 为 \"row4\"，用于相对定位\n      }\n      .width(\"auto\").height(\"auto\") // 设置 RelativeContainer 的宽度和高度为 \"auto\"，使其大小适应内部内容\n      .margin({left: 50}) // 设置 RelativeContainer 的左外边距为 50vp\n      .border({width:2, color: \"#6699FF\"}) // 设置 RelativeContainer 的边框宽度为 2vp，颜色为 \"#6699FF\"\n    }\n    .height('100%') // 设置 Row 组件的高度为 100%，使其占据整个屏幕高度\n  }\n}"
    },
    {
        "description": "该组件通过 RelativeContainer 和 Row 组件实现了一个复杂的布局，展示了多个 Row 组件在水平方向上的不同链式布局效果。布局宽度为 300vp，高度为 300vp，外边距为左侧 50vp，并带有宽度为 2vp 的蓝色边框。组件的垂直方向上被分为多个部分，每个部分包含一个 Row 组件，每个 Row 组件内包含一个 Text 组件，用于显示文本内容。每个 Row 组件的宽度为 80vp，高度为 80vp，背景颜色分别为红色、黄色和橙色。\n\n组件的排列和嵌套关系如下：\n- 整个布局通过 RelativeContainer 进行包裹，内部的 Row 组件通过 alignRules 属性进行相对定位。\n- 每个 Row 组件通过 chainMode 接口设置水平方向的链式布局模式，分别为 SPREAD、SPREAD_INSIDE 和 PACKED。\n- 每个 Row 组件内的 Text 组件通过 justifyContent 属性设置为居中对齐。\n\n组件的功能和交互包括：\n- 通过 chainMode 接口设置不同的链式布局模式，展示不同的布局效果。\n- 通过 alignRules 属性进行相对定位，确保每个 Row 组件在容器中的位置符合预期。\n- 每个 Row 组件的背景颜色通过 backgroundColor 属性设置，分别为红色、黄色和橙色。\n\n整个布局通过 RelativeContainer 和 Row 组件的组合，实现了复杂的布局效果，确保界面整洁美观。",
        "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // Row1: 红色背景，水平方向 SPREAD 链式布局\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF3333\")\n          .alignRules({\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start},\n            right: {anchor: \"row2\", align: HorizontalAlign.Start},\n            top: {anchor: \"__container__\", align: VerticalAlign.Top}\n          })\n          .id(\"row1\")\n          .chainMode(Axis.Horizontal, ChainStyle.SPREAD)\n\n        // Row2: 黄色背景，相对 Row1 定位\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            left: {anchor: \"row1\", align: HorizontalAlign.End},\n            right: {anchor: \"row3\", align: HorizontalAlign.Start},\n            top: {anchor: \"row1\", align: VerticalAlign.Top}\n          })\n          .id(\"row2\")\n\n        // Row3: 橙色背景，相对 Row2 定位\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            left: {anchor: \"row2\", align: HorizontalAlign.End},\n            right: {anchor: \"__container__\", align: HorizontalAlign.End},\n            top: {anchor: \"row1\", align: VerticalAlign.Top}\n          })\n          .id(\"row3\")\n\n        // Row4: 红色背景，水平方向 SPREAD_INSIDE 链式布局\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF3333\")\n          .alignRules({\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start},\n            right: {anchor: \"row5\", align: HorizontalAlign.Start},\n            center: {anchor: \"__container__\", align: VerticalAlign.Center}\n          })\n          .id(\"row4\")\n          .chainMode(Axis.Horizontal, ChainStyle.SPREAD_INSIDE)\n\n        // Row5: 黄色背景，相对 Row4 定位\n        Row(){Text('row5')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            left: {anchor: \"row4\", align: HorizontalAlign.End},\n            right: {anchor: \"row6\", align: HorizontalAlign.Start},\n            top: {anchor: \"row4\", align: VerticalAlign.Top}\n          })\n          .id(\"row5\")\n\n        // Row6: 橙色背景，相对 Row5 定位\n        Row(){Text('row6')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            left: {anchor: \"row5\", align: HorizontalAlign.End},\n            right: {anchor: \"__container__\", align: HorizontalAlign.End},\n            top: {anchor: \"row4\", align: VerticalAlign.Top}\n          })\n          .id(\"row6\")\n\n        // Row7: 红色背景，水平方向 PACKED 链式布局\n        Row(){Text('row7')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF3333\")\n          .alignRules({\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start},\n            right: {anchor: \"row8\", align: HorizontalAlign.Start},\n            bottom: {anchor: \"__container__\", align: VerticalAlign.Bottom}\n          })\n          .id(\"row7\")\n          .chainMode(Axis.Horizontal, ChainStyle.PACKED)\n\n        // Row8: 黄色背景，相对 Row7 定位\n        Row(){Text('row8')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            left: {anchor: \"row7\", align: HorizontalAlign.End},\n            right: {anchor: \"row9\", align: HorizontalAlign.Start},\n            top: {anchor: \"row7\", align: VerticalAlign.Top}\n          })\n          .id(\"row8\")\n\n        // Row9: 橙色背景，相对 Row8 定位\n        Row(){Text('row9')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            left: {anchor: \"row8\", align: HorizontalAlign.End},\n            right: {anchor: \"__container__\", align: HorizontalAlign.End},\n            top: {anchor: \"row7\", align: VerticalAlign.Top}\n          })\n          .id(\"row9\")\n      }\n      .width(300).height(300)\n      .margin({left: 50})\n      .border({width:2, color: \"#6699FF\"})\n    }\n    .height('100%')\n  }\n}"
    }
]