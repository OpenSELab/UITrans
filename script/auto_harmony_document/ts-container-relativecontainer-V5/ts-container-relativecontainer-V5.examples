/*\n实现一个包含RelativeContainer布局的组件，其中包含一个红色的Row组件，并通过Guideline进行定位。RelativeContainer具有固定的宽度和高度，并带有边框。Row组件通过alignRules属性与Guideline对齐。\n*/\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 创建一个红色的Row组件，宽度为100，高度为100\n        Row().width(100).height(100)\n          .backgroundColor("#FF3333")\n          // 设置Row组件的定位规则\n          .alignRules({\n            // 左边缘与guideline1的末端对齐\n            left: {anchor: "guideline1", align: HorizontalAlign.End},\n            // 上边缘与guideline2的顶部对齐\n            top: {anchor: "guideline2", align: VerticalAlign.Top}\n          })\n          .id("row1")\n      }\n      // 设置RelativeContainer的宽度和高度，并添加边框\n      .width(300).height(300)\n      .margin({left: 50})\n      .border({width:2, color: "#6699FF"})\n      // 定义两个Guideline，一个垂直，一个水平，分别位于容器的50像素处\n      .guideLine([\n        {id:"guideline1", direction: Axis.Vertical, position:{start:50}},\n        {id:"guideline2", direction: Axis.Horizontal, position:{start:50}}\n      ])\n    }\n    .height('100%')\n  }\n}


/*\n实现一个包含RelativeContainer的Row组件，其中RelativeContainer内部包含一个红色矩形。红色矩形的顶部、底部、左侧和右侧分别与RelativeContainer的顶部、底部、左侧和右侧对齐，并通过垂直偏移使其相对于父容器的顶部和底部偏移30%。RelativeContainer的宽度为300，高度为300，左边距为50，并带有宽度为2的蓝色边框。整个Row的高度为100%。\n*/\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 创建一个宽度为100，高度为100的红色矩形\n        Row().width(100).height(100)\n          .backgroundColor("#FF3333")\n          .alignRules({\n            // 矩形的顶部与父容器的顶部对齐\n            top: {anchor: "__container__", align: VerticalAlign.Top},\n            // 矩形的底部与父容器的底部对齐\n            bottom: {anchor: "__container__", align: VerticalAlign.Bottom},\n            // 矩形的左侧与父容器的左侧对齐\n            left: {anchor: "__container__", align: HorizontalAlign.Start},\n            // 矩形的右侧与父容器的右侧对齐\n            right: {anchor: "__container__", align: HorizontalAlign.End},\n            // 设置矩形的垂直偏移，使其相对于父容器的顶部和底部偏移30%\n            bias: {vertical: 0.3}\n          })\n          .id("row1")\n      }\n      .width(300).height(300)\n      .margin({left: 50}) // 设置RelativeContainer的左边距为50\n      .border({width:2, color: "#6699FF"}) // 为RelativeContainer添加一个宽度为2的蓝色边框\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}


/*\n实现一个包含四个Row组件的布局，每个Row组件包含一个Text组件，并通过RelativeContainer进行相对定位。每个Row组件具有不同的背景颜色，并且相对于其他Row组件进行定位。整体布局具有边框和左边距，以适应内容大小。\n*/\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个Row组件，包含一个Text组件，内容为'row1'，宽度为100，高度为100，背景颜色为红色，居中对齐\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor("#FF3333")\n          .id("row1") // 设置id为"row1"，用于后续的相对定位\n\n        // 第二个Row组件，包含一个Text组件，内容为'row2'，宽度为100，高度为100，背景颜色为黄色，相对于"row1"进行定位\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor("#FFCC00")\n          .alignRules({\n            left: {anchor: "row1", align: HorizontalAlign.End}, // 相对于"row1"的右边\n            top: {anchor: "row1", align: VerticalAlign.Top} // 相对于"row1"的顶部\n          })\n          .id("row2") // 设置id为"row2"，用于后续的相对定位\n\n        // 第三个Row组件，包含一个Text组件，内容为'row3'，宽度为100，高度为100，背景颜色为橙色，相对于"row1"进行定位\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor("#FF6633")\n          .alignRules({\n            left: {anchor: "row1", align: HorizontalAlign.Start}, // 相对于"row1"的左边\n            top: {anchor: "row1", align: VerticalAlign.Bottom} // 相对于"row1"的底部\n          })\n          .id("row3") // 设置id为"row3"，用于后续的相对定位\n\n        // 第四个Row组件，包含一个Text组件，内容为'row4'，宽度为100，高度为100，背景颜色为浅橙色，相对于"row3"和"row2"进行定位\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor("#FF9966")\n          .alignRules({\n            left: {anchor: "row3", align: HorizontalAlign.End}, // 相对于"row3"的右边\n            top: {anchor: "row2", align: VerticalAlign.Bottom} // 相对于"row2"的底部\n          })\n          .id("row4") // 设置id为"row4"，用于后续的相对定位\n      }\n      .width("auto").height("auto") // 设置RelativeContainer的宽度和高度为"auto"，使其大小适应内容\n      .margin({left: 50}) // 设置左边距为50\n      .border({width:2, color: "#6699FF"}) // 设置边框宽度为2，颜色为蓝色\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}


/*\n实现一个相对布局的示例，包含四个矩形，每个矩形通过RelativeContainer进行相对定位。\n第一个矩形位于容器的左上角，第二个矩形位于第一个矩形的右侧，第三个矩形位于第一个矩形的下方，第四个矩形位于第三个矩形的右侧和第二个矩形的下方。\n每个矩形都有一个文本标签，并且通过alignRules属性进行相对定位。\n*/\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个矩形，红色背景，位于容器的左上角，设置了10像素的margin\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor("#FF3333")\n          .alignRules({\n            top: {anchor: "__container__", align: VerticalAlign.Top}, // 顶部对齐容器顶部\n            left: {anchor: "__container__", align: HorizontalAlign.Start} // 左侧对齐容器左侧\n          })\n          .id("row1")\n          .margin(10) // 设置外边距为10像素\n\n        // 第二个矩形，黄色背景，位于第一个矩形的右侧\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor("#FFCC00")\n          .alignRules({\n            left: {anchor: "row1", align: HorizontalAlign.End}, // 左侧对齐第一个矩形的右侧\n            top: {anchor: "row1", align: VerticalAlign.Top} // 顶部对齐第一个矩形的顶部\n          })\n          .id("row2")\n\n        // 第三个矩形，橙色背景，位于第一个矩形的下方\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor("#FF6633")\n          .alignRules({\n            left: {anchor: "row1", align: HorizontalAlign.Start}, // 左侧对齐第一个矩形的左侧\n            top: {anchor: "row1", align: VerticalAlign.Bottom} // 顶部对齐第一个矩形的底部\n          })\n          .id("row3")\n\n        // 第四个矩形，浅橙色背景，位于第三个矩形的右侧，第二个矩形的下方，设置了10像素的margin\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor("#FF9966")\n          .alignRules({\n            left: {anchor: "row3", align: HorizontalAlign.End}, // 左侧对齐第三个矩形的右侧\n            top: {anchor: "row2", align: VerticalAlign.Bottom} // 顶部对齐第二个矩形的底部\n          })\n          .id("row4")\n          .margin(10) // 设置外边距为10像素\n      }\n      .width(300).height(300) // 设置RelativeContainer的宽度和高度\n      .margin({left: 50}) // 设置RelativeContainer的左侧外边距为50像素\n      .border({width:2, color: "#6699FF"}) // 设置RelativeContainer的边框\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}


/*\n实现一个相对布局的示例，包含三个Row组件，每个Row组件通过RelativeContainer进行相对定位和对齐。每个Row组件具有不同的背景色，并通过alignRules属性定义其相对位置和对齐方式。整体布局在一个Row组件内，并设置了边框和外边距。\n*/\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个Row组件，包含文本'row1'，设置为居中对齐，宽度80，高度80，背景色为红色\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor("#FF3333")\n          // 设置alignRules，定义组件的相对位置和对齐方式\n          .alignRules({\n            left: {anchor: "__container__", align: HorizontalAlign.Start}, // 左对齐到容器左侧\n            right: {anchor: "row2", align : HorizontalAlign.Start}, // 右对齐到row2的左侧\n            center: {anchor: "__container__", align: VerticalAlign.Center}, // 垂直居中对齐到容器\n            bias : {horizontal : 0} // 水平方向的bias值为0\n          })\n          .id("row1") // 设置组件ID为row1\n          .chainMode(Axis.Horizontal, ChainStyle.PACKED) // 设置水平方向的链模式为PACKED\n\n        // 第二个Row组件，包含文本'row2'，设置为居中对齐，宽度80，高度80，背景色为黄色\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor("#FFCC00")\n          // 设置alignRules，定义组件的相对位置和对齐方式\n          .alignRules({\n            left: {anchor: "row1", align: HorizontalAlign.End}, // 左对齐到row1的右侧\n            right: {anchor: "row3", align : HorizontalAlign.Start}, // 右对齐到row3的左侧\n            top: {anchor: "row1", align: VerticalAlign.Top} // 顶部对齐到row1的顶部\n          })\n          .id("row2") // 设置组件ID为row2\n\n        // 第三个Row组件，包含文本'row3'，设置为居中对齐，宽度80，高度80，背景色为橙色\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor("#FF6633")\n          // 设置alignRules，定义组件的相对位置和对齐方式\n          .alignRules({\n            left: {anchor: "row2", align: HorizontalAlign.End}, // 左对齐到row2的右侧\n            right: {anchor: "__container__", align : HorizontalAlign.End}, // 右对齐到容器右侧\n            top: {anchor: "row1", align: VerticalAlign.Top} // 顶部对齐到row1的顶部\n          })\n          .id("row3") // 设置组件ID为row3\n      }\n      .width(300).height(300) // 设置RelativeContainer的宽度和高度\n      .margin({left: 50}) // 设置左侧外边距\n      .border({width:2, color: "#6699FF"}) // 设置边框宽度和颜色\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}


/*\n实现一个相对布局的示例，展示如何在RelativeContainer中使用Row组件，并通过alignRules和barrier进行复杂的相对定位。每个Row组件都有不同的背景色和文本内容，并通过ID进行引用。barrier用于定义虚拟的边界线，帮助组件进行更精确的定位。\n*/\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个Row组件，显示文本'row1'，背景色为红色，宽度高度均为100，居中对齐\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor("#FF3333")\n          .id("row1") // 为该组件设置ID，方便后续组件引用\n\n        // 第二个Row组件，显示文本'row2'，背景色为黄色，宽度高度均为100，相对于row1进行定位\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor("#FFCC00")\n          .alignRules({\n            middle: {anchor: "row1", align: HorizontalAlign.End}, // 水平方向上与row1的右边缘对齐\n            top: {anchor: "row1", align: VerticalAlign.Bottom} // 垂直方向上与row1的底边缘对齐\n          })\n          .id("row2") // 为该组件设置ID，方便后续组件引用\n\n        // 第三个Row组件，显示文本'row3'，背景色为橙色，宽度高度均为100，相对于barrier1进行定位\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor("#FF6633")\n          .alignRules({\n            left: {anchor: "barrier1", align: HorizontalAlign.End}, // 水平方向上与barrier1的右边缘对齐\n            top: {anchor: "row1", align: VerticalAlign.Top} // 垂直方向上与row1的顶边缘对齐\n          })\n          .id("row3") // 为该组件设置ID，方便后续组件引用\n\n        // 第四个Row组件，显示文本'row4'，背景色为浅橙色，宽度高度均为50，相对于row1和barrier2进行定位\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .width(50).height(50)\n          .backgroundColor("#FF9966")\n          .alignRules({\n            left: {anchor: "row1", align: HorizontalAlign.Start}, // 水平方向上与row1的左边缘对齐\n            top: {anchor: "barrier2", align: VerticalAlign.Bottom} // 垂直方向上与barrier2的底边缘对齐\n          })\n          .id("row4") // 为该组件设置ID，方便后续组件引用\n      }\n      .width(300).height(300) // 设置RelativeContainer的宽度和高度\n      .margin({left: 50}) // 设置左边距\n      .border({width:2, color: "#6699FF"}) // 设置边框\n      .barrier([\n        {id: "barrier1", direction: BarrierDirection.RIGHT, referencedId:["row1", "row2"]}, // 定义barrier1，方向为右，参考row1和row2的右边缘\n        {id: "barrier2", direction: BarrierDirection.BOTTOM, referencedId:["row1", "row2"]} // 定义barrier2，方向为下，参考row1和row2的底边缘\n      ])\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}


/*\n实现一个相对布局的示例，展示如何在RelativeContainer中使用Row组件，并通过alignRules和barrier实现复杂的对齐和布局效果。示例中包含四个Row组件，分别显示不同的文本和背景颜色，并通过alignRules和barrier实现它们之间的相对位置关系。\n*/\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个Row组件，显示文本'row1'，并设置其宽度和高度为100，背景颜色为红色\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor("#FF3333")\n          .id("row1") // 设置组件的id为"row1"，用于后续的对齐规则引用\n\n        // 第二个Row组件，显示文本'row2'，并设置其宽度和高度为100，背景颜色为黄色\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor("#FFCC00")\n          .alignRules({\n            middle: {anchor: "row1", align: HorizontalAlign.End}, // 水平方向上，row2相对于row1的右侧对齐\n            top: {anchor: "row1", align: VerticalAlign.Bottom} // 垂直方向上，row2相对于row1的底部对齐\n          })\n          .id("row2") // 设置组件的id为"row2"，用于后续的对齐规则引用\n\n        // 第三个Row组件，显示文本'row3'，并设置其宽度和高度为100，背景颜色为橙色\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor("#FF6633")\n          .alignRules({\n            start: {anchor: "barrier1", align: HorizontalAlign.End}, // 水平方向上，row3相对于barrier1的右侧对齐\n            top: {anchor: "row1", align: VerticalAlign.Top} // 垂直方向上，row3相对于row1的顶部对齐\n          })\n          .id("row3") // 设置组件的id为"row3"，用于后续的对齐规则引用\n\n        // 第四个Row组件，显示文本'row4'，并设置其宽度和高度为50，背景颜色为浅橙色\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .width(50).height(50)\n          .backgroundColor("#FF9966")\n          .alignRules({\n            start: {anchor: "row1", align: HorizontalAlign.Start}, // 水平方向上，row4相对于row1的左侧对齐\n            top: {anchor: "barrier2", align: VerticalAlign.Bottom} // 垂直方向上，row4相对于barrier2的底部对齐\n          })\n          .id("row4") // 设置组件的id为"row4"，用于后续的对齐规则引用\n      }\n      .direction(Direction.Rtl) // 设置RelativeContainer的方向为RTL，即从右到左布局\n      .width(300).height(300) // 设置RelativeContainer的宽度和高度为300\n      .margin({left: 50}) // 设置RelativeContainer的左边距为50\n      .border({width:2, color: "#6699FF"}) // 设置RelativeContainer的边框宽度和颜色\n      .barrier([\n        {id: "barrier1", localizedDirection: LocalizedBarrierDirection.END, referencedId:["row1", "row2"]}, // 定义barrier1，水平方向上位于row1和row2的右侧\n        {id: "barrier2", localizedDirection: LocalizedBarrierDirection.BOTTOM, referencedId:["row1", "row2"]} // 定义barrier2，垂直方向上位于row1和row2的底部\n      ])\n    }\n    .height('100%') // 设置Row组件的高度为100%\n  }\n}


/*\n实现一个复杂的布局示例，使用RelativeContainer组件来精确控制多个Row组件的位置。每个Row组件通过alignRules属性定义其相对于容器或其他Row组件的位置关系，从而实现复杂的布局效果。\n*/\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个Row组件，位于容器的左上角\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor("#FF3333")\n          .alignRules({\n            top: {anchor: "__container__", align: VerticalAlign.Top}, // 顶部与容器顶部对齐\n            left: {anchor: "__container__", align: HorizontalAlign.Start} // 左侧与容器左侧对齐\n          })\n          .id("row1") // 设置id以便在其他组件中引用\n\n        // 第二个Row组件，位于容器的右上角\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor("#FFCC00")\n          .alignRules({\n            top: {anchor: "__container__", align: VerticalAlign.Top}, // 顶部与容器顶部对齐\n            right: {anchor: "__container__", align: HorizontalAlign.End} // 右侧与容器右侧对齐\n          })\n          .id("row2") // 设置id以便在其他组件中引用\n\n        // 第三个Row组件，位于row1的右下角，并且与row2的左侧对齐\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .height(100)\n          .backgroundColor("#FF6633")\n          .alignRules({\n            top: {anchor: "row1", align: VerticalAlign.Bottom}, // 顶部与row1的底部对齐\n            left: {anchor: "row1", align: HorizontalAlign.End}, // 左侧与row1的右侧对齐\n            right: {anchor: "row2", align: HorizontalAlign.Start} // 右侧与row2的左侧对齐\n          })\n          .id("row3") // 设置id以便在其他组件中引用\n\n        // 第四个Row组件，位于row3的下方，并且与容器的左下角和row1的右侧对齐\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .backgroundColor("#FF9966")\n          .alignRules({\n            top: {anchor: "row3", align: VerticalAlign.Bottom}, // 顶部与row3的底部对齐\n            bottom: {anchor: "__container__", align: VerticalAlign.Bottom}, // 底部与容器底部对齐\n            left: {anchor: "__container__", align: HorizontalAlign.Start}, // 左侧与容器左侧对齐\n            right: {anchor: "row1", align: HorizontalAlign.End} // 右侧与row1的右侧对齐\n          })\n          .id("row4") // 设置id以便在其他组件中引用\n\n        // 第五个Row组件，位于row3的下方，并且与row2的左侧和容器的右下角对齐\n        Row(){Text('row5')}.justifyContent(FlexAlign.Center)\n          .backgroundColor("#FF66FF")\n          .alignRules({\n            top: {anchor: "row3", align: VerticalAlign.Bottom}, // 顶部与row3的底部对齐\n            bottom: {anchor: "__container__", align: VerticalAlign.Bottom}, // 底部与容器底部对齐\n            left: {anchor: "row2", align: HorizontalAlign.Start}, // 左侧与row2的左侧对齐\n            right: {anchor: "__container__", align: HorizontalAlign.End} // 右侧与容器右侧对齐\n          })\n          .id("row5") // 设置id以便在其他组件中引用\n      }\n      .width(300).height(300) // 设置RelativeContainer的宽度和高度\n      .margin({left: 50}) // 设置左侧外边距\n      .border({width:2, color: "#6699FF"}) // 设置边框\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}


/*\n实现一个包含多个链布局的相对容器组件，展示不同链布局样式（SPREAD、SPREAD_INSIDE、PACKED）的效果。每个链布局包含三个子组件，通过alignRules属性设置子组件之间的相对位置关系。\n*/\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个链布局：SPREAD\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor("#FF3333")\n          .alignRules({\n            left: {anchor: "__container__", align: HorizontalAlign.Start}, // 左对齐容器\n            right: {anchor: "row2", align : HorizontalAlign.Start}, // 右对齐row2的左侧\n            top: {anchor: "__container__", align: VerticalAlign.Top} // 顶部对齐容器\n          })\n          .id("row1")\n          .chainMode(Axis.Horizontal, ChainStyle.SPREAD) // 设置水平方向的SPREAD链布局\n\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor("#FFCC00")\n          .alignRules({\n            left: {anchor: "row1", align: HorizontalAlign.End}, // 左对齐row1的右侧\n            right: {anchor: "row3", align : HorizontalAlign.Start}, // 右对齐row3的左侧\n            top: {anchor: "row1", align: VerticalAlign.Top} // 顶部对齐row1的顶部\n          })\n          .id("row2")\n\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor("#FF6633")\n          .alignRules({\n            left: {anchor: "row2", align: HorizontalAlign.End}, // 左对齐row2的右侧\n            right: {anchor: "__container__", align : HorizontalAlign.End}, // 右对齐容器的右侧\n            top: {anchor: "row1", align: VerticalAlign.Top} // 顶部对齐row1的顶部\n          })\n          .id("row3")\n\n        // 第二个链布局：SPREAD_INSIDE\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor("#FF3333")\n          .alignRules({\n            left: {anchor: "__container__", align: HorizontalAlign.Start}, // 左对齐容器\n            right: {anchor: "row5", align : HorizontalAlign.Start}, // 右对齐row5的左侧\n            center: {anchor: "__container__", align: VerticalAlign.Center} // 垂直居中对齐容器\n          })\n          .id("row4")\n          .chainMode(Axis.Horizontal, ChainStyle.SPREAD_INSIDE) // 设置水平方向的SPREAD_INSIDE链布局\n\n        Row(){Text('row5')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor("#FFCC00")\n          .alignRules({\n            left: {anchor: "row4", align: HorizontalAlign.End}, // 左对齐row4的右侧\n            right: {anchor: "row6", align : HorizontalAlign.Start}, // 右对齐row6的左侧\n            top: {anchor: "row4", align: VerticalAlign.Top} // 顶部对齐row4的顶部\n          })\n          .id("row5")\n\n        Row(){Text('row6')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor("#FF6633")\n          .alignRules({\n            left: {anchor: "row5", align: HorizontalAlign.End}, // 左对齐row5的右侧\n            right: {anchor: "__container__", align : HorizontalAlign.End}, // 右对齐容器的右侧\n            top: {anchor: "row4", align: VerticalAlign.Top} // 顶部对齐row4的顶部\n          })\n          .id("row6")\n\n        // 第三个链布局：PACKED\n        Row(){Text('row7')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor("#FF3333")\n          .alignRules({\n            left: {anchor: "__container__", align: HorizontalAlign.Start}, // 左对齐容器\n            right: {anchor: "row8", align : HorizontalAlign.Start}, // 右对齐row8的左侧\n            bottom: {anchor: "__container__", align: VerticalAlign.Bottom} // 底部对齐容器\n          })\n          .id("row7")\n          .chainMode(Axis.Horizontal, ChainStyle.PACKED) // 设置水平方向的PACKED链布局\n\n        Row(){Text('row8')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor("#FFCC00")\n          .alignRules({\n            left: {anchor: "row7", align: HorizontalAlign.End}, // 左对齐row7的右侧\n            right: {anchor: "row9", align : HorizontalAlign.Start}, // 右对齐row9的左侧\n            top: {anchor: "row7", align: VerticalAlign.Top} // 顶部对齐row7的顶部\n          })\n          .id("row8")\n\n        Row(){Text('row9')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor("#FF6633")\n          .alignRules({\n            left: {anchor: "row8", align: HorizontalAlign.End}, // 左对齐row8的右侧\n            right: {anchor: "__container__", align : HorizontalAlign.End}, // 右对齐容器的右侧\n            top: {anchor: "row7", align: VerticalAlign.Top} // 顶部对齐row7的顶部\n          })\n          .id("row9")\n      }\n      .width(300).height(300) // 设置RelativeContainer的宽度和高度\n      .margin({left: 50}) // 设置左侧外边距\n      .border({width:2, color: "#6699FF"}) // 设置边框\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}