/*\n实现一个时间选择器组件，支持切换12小时制和24小时制显示，并能够实时更新和显示选中的时间。组件包含一个按钮用于切换时间显示模式，一个时间选择器用于选择时间，并提供了不同状态下的文本样式设置。\n*/\n\n@Entry\n@Component\nstruct TimePickerExample {\n  @State isMilitaryTime: boolean = false // 用于控制时间显示模式，初始为12小时制\n  private selectedTime: Date = new Date('2022-07-22T08:00:00') // 初始选中的时间\n\n  build() {\n    Column() {\n      Button('切换12小时制/24小时制')\n        .margin(30) // 设置按钮的上下边距\n        .onClick(() => {\n          this.isMilitaryTime = !this.isMilitaryTime // 切换时间显示模式\n        })\n      TimePicker({\n        selected: this.selectedTime, // 当前选中的时间\n      })\n        .useMilitaryTime(this.isMilitaryTime) // 根据isMilitaryTime状态切换12小时制或24小时制显示\n        .onChange((value: TimePickerResult) => {\n          if(value.hour >= 0) {\n            this.selectedTime.setHours(value.hour, value.minute) // 更新选中的时间\n            console.info('select current date is: ' + JSON.stringify(value)) // 输出当前选中的时间\n          }\n        })\n        .disappearTextStyle({color: Color.Red, font: {size: 15, weight: FontWeight.Lighter}}) // 设置不可见文本的样式\n        .textStyle({color: Color.Black, font: {size: 20, weight: FontWeight.Normal}}) // 设置普通文本的样式\n        .selectedTextStyle({color: Color.Blue, font: {size: 30, weight: FontWeight.Bolder}}) // 设置选中时间的文本样式\n    }.width('100%')\n  }\n}