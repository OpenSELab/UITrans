[
    {
        "description": "该组件通过 Column 布局实现了一个时间选择器（TimePicker）及其控制按钮的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为两个部分：一个按钮和一个时间选择器。按钮用于切换时间选择器的显示格式（12小时制或24小时制），按钮的点击事件会切换 `isMilitaryTime` 状态变量的值。时间选择器根据 `isMilitaryTime` 的值来决定显示格式，并允许用户选择时间。选择时间后，时间选择器的 `onChange` 事件会更新 `selectedTime` 状态变量，并在控制台输出当前选择的时间。\n\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过 Column 组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n\n时间选择器的样式包括文本颜色、字体大小和字体粗细等属性，支持不同的样式展示。时间选择器的文本样式分为三种：消失文本样式、普通文本样式和选中文本样式。消失文本样式用于未选中的时间文本，普通文本样式用于未选中的时间文本，选中文本样式用于当前选中的时间文本。\n\n整个布局通过 Column 布局保证按钮和时间选择器在垂直方向上有序排列，确保界面整洁美观。",
        "code": "// xxx.ets\n@Entry\n@Component\nstruct TimePickerExample {\n  @State isMilitaryTime: boolean = false // 状态变量，用于控制时间选择器的显示格式（12小时制或24小时制）\n  private selectedTime: Date = new Date('2022-07-22T08:00:00') // 状态变量，用于存储当前选择的时间\n\n  build() {\n    Column() {\n      Button('切换12小时制/24小时制') // 创建一个按钮，用于切换时间选择器的显示格式\n        .margin(30) // 设置按钮的外边距为30vp\n        .onClick(() => { // 设置按钮的点击事件\n          this.isMilitaryTime = !this.isMilitaryTime // 切换 `isMilitaryTime` 状态变量的值\n        })\n      TimePicker({\n        selected: this.selectedTime, // 设置时间选择器的初始选中时间为 `selectedTime`\n      })\n        .useMilitaryTime(this.isMilitaryTime) // 根据 `isMilitaryTime` 的值决定时间选择器的显示格式\n        .onChange((value: TimePickerResult) => { // 设置时间选择器的 `onChange` 事件\n          if(value.hour >= 0) { // 如果小时值有效\n            this.selectedTime.setHours(value.hour, value.minute) // 更新 `selectedTime` 状态变量\n            console.info('select current date is: ' + JSON.stringify(value)) // 在控制台输出当前选择的时间\n          }\n        })\n        .disappearTextStyle({color: Color.Red, font: {size: 15, weight: FontWeight.Lighter}}) // 设置未选中的时间文本样式\n        .textStyle({color: Color.Black, font: {size: 20, weight: FontWeight.Normal}}) // 设置普通时间文本样式\n        .selectedTextStyle({color: Color.Blue, font: {size: 30, weight: FontWeight.Bolder}}) // 设置选中时间文本样式\n    }.width('100%') // 设置 Column 的宽度为100%\n  }\n}"
    }
]