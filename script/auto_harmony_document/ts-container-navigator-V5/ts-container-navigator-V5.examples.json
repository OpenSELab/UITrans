[
    {
        "description": "该组件通过 Flex 布局实现了一个导航页面，包含两个导航按钮。布局宽度为 350vp，高度为 150vp，内边距为 35vp。组件的垂直方向上被分为两个部分，每个部分包含一个导航按钮。每个导航按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n导航按钮的样式包括宽度占据整个父容器的宽度，文本居中对齐。第一个导航按钮用于跳转到 Detail 页面，并传递参数；第二个导航按钮用于返回前一个页面，通过点击事件触发返回操作。\n整个布局通过 Flex 布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
        "code": "// Navigator.ets\n@Entry\n@Component\nstruct NavigatorExample {\n  @State active: boolean = false // 用于控制第二个导航按钮的状态\n  @State name: NameObject = { name: 'news' } // 用于传递到 Detail 页面的参数\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      Navigator({ target: 'pages/container/navigator/Detail', type: NavigationType.Push }) {\n        Text('Go to ' + this.name.name + ' page') // 显示跳转页面的文本\n          .width('100%').textAlign(TextAlign.Center) // 文本宽度占据整个父容器，居中对齐\n      }.params(new TextObject(this.name)) // 传递参数到 Detail 页面\n\n      Navigator() {\n        Text('Back to previous page').width('100%').textAlign(TextAlign.Center) // 显示返回页面的文本\n      }.active(this.active) // 控制导航按钮的状态\n      .onClick(() => {\n        this.active = true // 点击后激活返回操作\n      })\n    }.height(150).width(350).padding(35) // 设置布局的高度、宽度和内边距\n  }\n}\n\ninterface NameObject {\n  name: string; // 定义用于传递的参数结构\n}\n\nclass TextObject {\n  text: NameObject; // 用于传递的参数对象\n\n  constructor(text: NameObject) {\n    this.text = text; // 构造函数，初始化参数对象\n  }\n}"
    }
]