[
    {
        "description": "该组件通过 Column 布局实现了一个展示两个圆形图形的界面。布局宽度占据整个屏幕，高度由内容自动调整。组件的垂直方向上包含两个圆形图形，每个圆形图形之间有 10vp 的间距。\n第一个圆形图形是一个填充的圆形，直径为 150vp，没有边框。第二个圆形图形是一个圆环，直径为 150vp，线条为红色虚线，线条宽度为 3vp。圆环的填充透明度为 0，表示没有填充颜色。\n整个布局通过 Column 布局保证圆形图形在垂直方向上有序排列，确保界面整洁美观。",
        "code": "// xxx.ets\n@Entry\n@Component\nstruct CircleExample {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局，子组件之间的间距为 10vp\n      // 绘制一个直径为 150 的圆\n      Circle({ width: 150, height: 150 }) // 创建一个宽度为 150vp，高度为 150vp 的圆形图形\n\n      // 绘制一个直径为 150、线条为红色虚线的圆环（宽高设置不一致时以短边为直径）\n      Circle()\n        .width(150) // 设置圆环的宽度为 150vp\n        .height(200) // 设置圆环的高度为 200vp，但由于宽高不一致，实际直径为 150vp\n        .fillOpacity(0) // 设置圆环的填充透明度为 0，表示没有填充颜色\n        .strokeWidth(3) // 设置圆环的线条宽度为 3vp\n        .stroke(Color.Red) // 设置圆环的线条颜色为红色\n        .strokeDashArray([1, 2]) // 设置圆环的线条为虚线，虚线长度为 1vp，间隔为 2vp\n    }.width('100%') // 设置整个 Column 布局的宽度为 100%\n  }\n}"
    }
]