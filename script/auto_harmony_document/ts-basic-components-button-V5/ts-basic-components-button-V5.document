Title: Button-按钮与选择-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-button-V5

Markdown Content:
按钮组件，可快速创建不同样式的按钮。

说明

该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

接口
--

### Button

Button(options: ButtonOptions)

创建可以包含单个子组件的按钮。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### Button

Button(label: ResourceStr, options?: ButtonOptions)

使用文本内容创建相应的按钮组件，此时Button无法包含子组件。

文本内容默认单行显示。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

ButtonOptions对象说明
-----------------

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

type

[ButtonType](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-button-V5#buttontype%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

否

描述按钮显示样式。

默认值：ButtonType.Capsule

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

stateEffect

boolean

否

按钮按下时是否开启按压态显示效果，当设置为false时，按压效果关闭。

默认值：true

**说明：**

当开启按压态显示效果，开发者设置状态样式时，会基于状态样式设置完成后的背景色再进行颜色叠加。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

buttonStyle11+

[ButtonStyleMode](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-button-V5#buttonstylemode11%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

否

描述按钮的样式和重要程度。

默认值：ButtonStyleMode.EMPHASIZED

**说明：**

按钮重要程度：强调按钮\>普通按钮\>文字按钮。

**卡片能力：** 从API version 11开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

controlSize11+

[ControlSize](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-button-V5#controlsize11%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

否

描述按钮的尺寸。

默认值：ControlSize.NORMAL

**卡片能力：** 从API version 11开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

role12+

[ButtonRole](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-button-V5#buttonrole12%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

否

描述按钮的角色。

默认值：ButtonRole.NORMAL

**卡片能力：** 从API version 12开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

### type

type(value: ButtonType)

设置Button样式。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ButtonType](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-button-V5#buttontype%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

是

Button样式。

默认值：ButtonType.Capsule

### fontSize

fontSize(value: Length)

设置文本显示字号。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[Length](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#length)

是

文本显示字号。

默认值：当controlSize为ControlSize.NORMAL时，默认值为$r('sys.float.Body\_L')

当controlSize为ControlSize.SMALL时，默认值为$r('sys.float.Body\_S')。

### fontColor

fontColor(value: ResourceColor)

设置文本显示颜色。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

是

文本显示颜色。

默认值：$r('sys.color.font\_on\_primary')，显示为白色字体。

### fontWeight

fontWeight(value: number | FontWeight | string)

设置文本的字体粗细。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

number | [FontWeight](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#fontweight) | string

是

文本的字体粗细，number类型取值\[100, 900\]，取值间隔为100，取值越大，字体越粗。

默认值：400

### fontStyle8+

fontStyle(value: FontStyle)

设置文本的字体样式。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[FontStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#fontstyle)

是

文本的字体样式。

默认值：FontStyle.Normal。

### stateEffect

stateEffect(value: boolean)

设置是否开启按压态显示效果。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

boolean

是

按钮按下时是否开启按压态显示效果，当设置为false时，按压效果关闭。

默认值：true

### fontFamily8+

fontFamily(value: string | Resource)

设置字体列表。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

string | [Resource](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resource)

是

字体列表。默认字体'HarmonyOS Sans'，当前支持'HarmonyOS Sans'字体和[注册自定义字体](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-font-V5)。

### labelStyle10+

labelStyle(value: LabelStyle)

设置Button组件label文本和字体的样式。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[LabelStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-button-V5#labelstyle10%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)

是

Button组件label文本和字体的样式。

### buttonStyle11+

buttonStyle(value: ButtonStyleMode)

设置Button组件的样式和重要程度。

**卡片能力：** 从API version 11开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ButtonStyleMode](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-button-V5#buttonstylemode11%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

是

Button组件的样式和重要程度。

默认值:ButtonStyleMode.EMPHASIZED

### controlSize11+

controlSize(value: ControlSize)

设置Button组件的尺寸。

**卡片能力：** 从API version 11开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ControlSize](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-button-V5#controlsize11%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

是

Button组件的尺寸。

默认值:ControlSize.NORMAL

### role12+

role(value: ButtonRole)

设置Button组件的角色。

**卡片能力：** 从API version 12开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ButtonRole](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-button-V5#buttonrole12%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

是

设置Button组件的角色。

默认值:ButtonRole.NORMAL

### contentModifier12+

contentModifier(modifier: ContentModifier<ButtonConfiguration\>)

定制Button内容区的方法。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

ButtonType枚举说明
--------------

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

描述

Capsule

胶囊型按钮（圆角默认为高度的一半）。

Circle

圆形按钮。

Normal

普通按钮（默认不带圆角）。

说明

*   按钮圆角通过[通用属性borderRadius](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-border-V5#borderradius)设置。
*   当按钮类型为Capsule时，borderRadius设置不生效，按钮圆角始终为宽、高中较小值的一半。
*   当按钮类型为Circle时，若同时设置了宽和高，则borderRadius不生效，且按钮半径为宽高中较小值的一半；若只设置宽、高中的一个，则borderRadius不生效，且按钮半径为所设宽或所设高值的一半；若不设置宽高，则borderRadius为按钮半径；若borderRadius的值为负，则borderRadius的值按照0处理。
*   按钮文本通过[fontSize](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-button-V5#fontsize)、[fontColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-button-V5#fontcolor)、[fontStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-button-V5#fontstyle8)、[fontFamily](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-button-V5#fontfamily8)、[fontWeight](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-button-V5#fontweight)进行设置。
*   设置[颜色渐变](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-gradient-color-V5)需先设置[backgroundColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-background-V5#backgroundcolor)为透明色。

LabelStyle10+对象说明
-----------------

**元服务API：** 从API version 11开始，该接口支持在元服务中使用

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

overflow

[TextOverflow](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#textoverflow)

否

设置label文本超长时的显示方式。文本截断是按字截断。例如，英文以单词为最小单位进行截断，若需要以字母为单位进行截断，可在字母间添加零宽空格。

默认值：TextOverflow.Ellipsis

maxLines

number

否

设置label文本的最大行数。默认情况下，文本是自动折行的，如果指定此参数，则文本最多不会超过指定的行。如果有多余的文本，可以通过overflow来指定截断方式。

默认值：1

minFontSize

number | [ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

设置label文本最小显示字号。需配合maxFontSize以及maxLines或布局大小限制使用。

**说明：**

minFontSize小于或等于0时，自适应字号不生效。

maxFontSize

number | [ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

设置label文本最大显示字号。需配合minFontSize以及maxLines或布局大小限制使用。

heightAdaptivePolicy

[TextHeightAdaptivePolicy](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#textheightadaptivepolicy10)

否

设置label文本自适应高度的方式。

默认值：TextHeightAdaptivePolicy.MAX\_LINES\_FIRST。

font

[Font](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#font)

否

设置label文本字体样式。

默认值：默认值参考[Font](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#font)。

ButtonStyleMode11+枚举说明
----------------------

**卡片能力：** 从API version 11开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

描述

EMPHASIZED

强调按钮（用于强调当前操作）。

NORMAL

普通按钮（一般界面操作）。

TEXTUAL

文本按钮（纯文本，无背景颜色）。

ControlSize11+枚举说明
------------------

**卡片能力：** 从API version 11开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

描述

SMALL

小尺寸按钮。

NORMAL

正常尺寸按钮。

ButtonRole12+枚举说明
-----------------

**卡片能力：** 从API version 12开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

描述

NORMAL

正常按钮。

ERROR

警示按钮。

ButtonConfiguration12+对象说明
--------------------------

开发者需要自定义class实现ContentModifier接口。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

只读

可选

说明

label

string

否

否

Button的文本标签。

pressed

boolean

否

否

指示是否按下Button。

**说明：**

此属性指示的是原本Button是否被按压，而非build出来的新组件。若新build出来的组件超过原本组件的大小，那么超出部分按压不触发。

triggerClick

[ButtonTriggerClickCallback](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-button-V5#buttontriggerclickcallback12%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)

否

否

使用builder新构建出来组件的点击事件。

ButtonTriggerClickCallback12+对象说明
---------------------------------

type ButtonTriggerClickCallback = (xPos: number, yPos: number) =\> void

定义ButtonConfiguration中使用的回调类型。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

参数名

类型

必填

说明

xPos

number

是

点击位置x的坐标。

yPos

number

是

点击位置y的坐标。

示例
--

### 示例1

2.  @Entry
3.  @Component
4.  struct ButtonExample {
5.    build() {
6.      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {
7.        Text('Normal button').fontSize(9).fontColor(0xCCCCCC)
8.        Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {
9.          Button('OK', { type: ButtonType.Normal, stateEffect: true })
10.            .borderRadius(8)
11.            .backgroundColor(0x317aff)
12.            .width(90)
13.            .onClick(() =\> {
14.              console.log('ButtonType.Normal')
15.            })
16.          Button({ type: ButtonType.Normal, stateEffect: true }) {
17.            Row() {
18.              LoadingProgress().width(20).height(20).margin({ left: 12 }).color(0xFFFFFF)
19.              Text('loading').fontSize(12).fontColor(0xffffff).margin({ left: 5, right: 12 })
20.            }.alignItems(VerticalAlign.Center)
21.          }.borderRadius(8).backgroundColor(0x317aff).width(90).height(40)

23.          Button('Disable', { type: ButtonType.Normal, stateEffect: false }).opacity(0.4)
24.            .borderRadius(8).backgroundColor(0x317aff).width(90)
25.        }

27.        Text('Capsule button').fontSize(9).fontColor(0xCCCCCC)
28.        Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {
29.          Button('OK', { type: ButtonType.Capsule, stateEffect: true }).backgroundColor(0x317aff).width(90)
30.          Button({ type: ButtonType.Capsule, stateEffect: true }) {
31.            Row() {
32.              LoadingProgress().width(20).height(20).margin({ left: 12 }).color(0xFFFFFF)
33.              Text('loading').fontSize(12).fontColor(0xffffff).margin({ left: 5, right: 12 })
34.            }.alignItems(VerticalAlign.Center).width(90).height(40)
35.          }.backgroundColor(0x317aff)

37.          Button('Disable', { type: ButtonType.Capsule, stateEffect: false }).opacity(0.4)
38.            .backgroundColor(0x317aff).width(90)
39.        }

41.        Text('Circle button').fontSize(9).fontColor(0xCCCCCC)
42.        Flex({ alignItems: ItemAlign.Center, wrap: FlexWrap.Wrap }) {
43.          Button({ type: ButtonType.Circle, stateEffect: true }) {
44.            LoadingProgress().width(20).height(20).color(0xFFFFFF)
45.          }.width(55).height(55).backgroundColor(0x317aff)

47.          Button({ type: ButtonType.Circle, stateEffect: true }) {
48.            LoadingProgress().width(20).height(20).color(0xFFFFFF)
49.          }.width(55).height(55).margin({ left: 20 }).backgroundColor(0xF55A42)
50.        }
51.      }.height(400).padding({ left: 35, right: 35, top: 35 })
52.    }
53.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114424.09555059700071604701491317417204:50001231000000:2800:907462E5F9B53A0D6C599BF4831AFE8470ADD984BFF042CCE98726F09957DA5C.gif?needInitFileName=true?needInitFileName=true)

### 示例2

2.  @Entry
3.  @Component
4.  struct SwipeGestureExample {
5.    @State count: number = 0

7.    build() {
8.      Column() {
9.        Text(\`${this.count}\`)
10.          .fontSize(30)
11.          .onClick(() =\> {
12.            this.count++
13.          })
14.        if (this.count <\= 0) {
15.          Button('count is negative').fontSize(30).height(50)
16.        } else if (this.count % 2 === 0) {
17.          Button('count is even').fontSize(30).height(50)
18.        } else {
19.          Button('count is odd').fontSize(30).height(50)
20.        }
21.      }.height('100%').width('100%').justifyContent(FlexAlign.Center)
22.    }
23.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114424.64319037196036978481174951060482:50001231000000:2800:4ACFCA05ED794B686D160E5DFBF25A521025F37757EA64E01DFE3FB3F6D561DB.gif?needInitFileName=true?needInitFileName=true)

### 示例3

2.  @Entry
3.  @Component
4.  struct buttonTestDemo {
5.    @State txt: string = 'overflowTextOverlengthTextOverflow.Clip';
6.    @State widthShortSize: number = 210;

8.    build() {
9.      Row() {
10.        Column() {
11.          Button(this.txt)
12.            .width(this.widthShortSize)
13.            .height(100)
14.            .backgroundColor(0x317aff)
15.            .labelStyle({ overflow: TextOverflow.Clip,
16.              maxLines: 1,
17.              minFontSize: 20,
18.              maxFontSize: 20,
19.              font: {
20.                size: 20,
21.                weight: FontWeight.Bolder,
22.                family: 'cursive',
23.                style: FontStyle.Italic
24.              }
25.            })
26.            .fontSize(40)
27.        }
28.        .width('100%')
29.      }
30.      .height('100%')
31.    }
32.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114424.93228938684329115790913446986129:50001231000000:2800:C265EBD47C399AEACCFD5D6D2331C1A402857ACFFCCA419DCD078B25539E28A5.png?needInitFileName=true?needInitFileName=true)

### 示例4

2.  @Entry
3.  @Component
4.  struct ButtonExample {
5.    build() {
6.      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {
7.        Text('Normal size button').fontSize(9).fontColor(0xCCCCCC)
8.        Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {
9.          Button('Emphasized', { buttonStyle: ButtonStyleMode.EMPHASIZED });
10.          Button('Normal', { buttonStyle: ButtonStyleMode.NORMAL });
11.          Button('Textual', { buttonStyle: ButtonStyleMode.TEXTUAL });
12.        }

14.        Text('Small size button').fontSize(9).fontColor(0xCCCCCC)
15.        Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {
16.          Button('Emphasized', { controlSize: ControlSize.SMALL, buttonStyle: ButtonStyleMode.EMPHASIZED });
17.          Button('Normal', { controlSize: ControlSize.SMALL, buttonStyle: ButtonStyleMode.NORMAL });
18.          Button('Textual', { controlSize: ControlSize.SMALL, buttonStyle: ButtonStyleMode.TEXTUAL });
19.        }

21.        Text('Small size button').fontSize(9).fontColor(0xCCCCCC)
22.        Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {
23.          Button('Emphasized').controlSize(ControlSize.SMALL).buttonStyle(ButtonStyleMode.EMPHASIZED);
24.          Button('Normal').controlSize(ControlSize.SMALL).buttonStyle(ButtonStyleMode.NORMAL);
25.          Button('Textual').controlSize(ControlSize.SMALL).buttonStyle(ButtonStyleMode.TEXTUAL);
26.        }

28.      }.height(400).padding({ left: 35, right: 35, top: 35 })
29.    }
30.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114424.68581218896218371883463935042764:50001231000000:2800:87D043534049B39E8CB56654A8D97C6BE573D9321318F68103E3FA1975A32172.jpeg?needInitFileName=true?needInitFileName=true)

### 示例5

2.  @Entry
3.  @Component
4.  struct ButtonExample {
5.    build() {
6.      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {
7.        Text('Role is Normal button').fontSize(9).fontColor(0xCCCCCC)
8.        Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {
9.          Button('Emphasized', { buttonStyle: ButtonStyleMode.EMPHASIZED, role: ButtonRole.NORMAL });
10.          Button('Normal', { buttonStyle: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL });
11.          Button('Textual', { buttonStyle: ButtonStyleMode.TEXTUAL, role: ButtonRole.NORMAL });
12.        }
13.        Text('Role is Error button').fontSize(9).fontColor(0xCCCCCC)
14.        Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {
15.          Button('Emphasized', { buttonStyle: ButtonStyleMode.EMPHASIZED, role: ButtonRole.ERROR});
16.          Button('Normal', { buttonStyle: ButtonStyleMode.NORMAL, role: ButtonRole.ERROR });
17.          Button('Textual', { buttonStyle: ButtonStyleMode.TEXTUAL, role: ButtonRole.ERROR });
18.        }
19.      }.height(200).padding({ left: 35, right: 35, top: 35 })
20.    }
21.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114425.46448184753273233317240752753703:50001231000000:2800:ECC4E32851CB2411C8F8E72FEBFA8C8E5EF048D1C1FDC2CAAA7AC37409A1DEF9.jpeg?needInitFileName=true?needInitFileName=true)

### 示例6

该示例实现了自定义样式的功能，自定义样式实现了一个圆圈替换原本的按钮样式。如果按压，圆圈将变成红色，标题会显示按压字样；如果没有按压，圆圈将变成黑色，标题会显示非按压字样。

1.  class MyButtonStyle implements ContentModifier<ButtonConfiguration\> {
2.    x: number = 0
3.    y: number = 0
4.    selectedColor:Color = Color.Black

6.    constructor(x : number, y: number,ColorType:Color) {
7.      this.x = x
8.      this.y = y
9.      this.selectedColor = ColorType
10.    }
11.    applyContent() : WrappedBuilder<\[ButtonConfiguration\]\>
12.    {
13.      return wrapBuilder(buildButton1)
14.    }
15.  }

17.  @Builder function buildButton1(config: ButtonConfiguration) {
18.    Column({space:30}) {
19.      Text(config.enabled ? "enabled true" : "enabled false")
20.      Text('圆圈状态' + (config.pressed ? "（ 按压 ）" : "（ 非按压 ）"))
21.      Text('点击位置x坐标：' + (config.enabled ? (config.contentModifier as MyButtonStyle).x : "0"))
22.      Text('点击位置y坐标：' + (config.enabled ? (config.contentModifier as MyButtonStyle).y : "0"))
23.      Circle({ width: 50, height: 50 })
24.        .fill(config.pressed ? (config.contentModifier as MyButtonStyle).selectedColor : Color.Black)
25.        .gesture(
26.          TapGesture({count:1}).onAction((event: GestureEvent)=\>{
27.            config.triggerClick(event.fingerList\[0\].localX,event.fingerList\[0\].localY)
28.          })).opacity(config.enabled ? 1 : 0.1)
29.    }
30.  }

32.  @Entry
33.  @Component
34.  struct ButtonExample {
35.    @State buttonEnabled: boolean = true;
36.    @State positionX: number = 0
37.    @State positionY: number = 0
38.    @State state : boolean\[\] = \[true,false\]
39.    @State index:number = 0
40.    build() {
41.      Column() {
42.        Button('OK')
43.          .contentModifier(new MyButtonStyle(this.positionX,this.positionY,Color.Red))
44.          .onClick((event) =\> {
45.            console.info('change' + JSON.stringify(event))
46.            this.positionX = event.displayX
47.            this.positionY = event.displayY
48.          }).enabled(this.buttonEnabled)
49.        Row() {
50.          Toggle({ type: ToggleType.Switch, isOn: true }).onChange((value: boolean) =\> {
51.            if (value) {
52.              this.buttonEnabled = true
53.            } else {
54.              this.buttonEnabled = false
55.            }
56.          }).margin({left:-80})
57.        }
58.      }.height('100%').width('100%').justifyContent(FlexAlign.Center)
59.    }
60.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114425.70796309666109198356018646549266:50001231000000:2800:DB9E73F9DA5B0D4BF546D680D07F830E109BA96E6B1F40EB6E76B92B2555EE53.gif?needInitFileName=true?needInitFileName=true)

