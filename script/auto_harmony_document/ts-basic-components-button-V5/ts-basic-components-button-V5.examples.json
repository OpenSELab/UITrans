[
    {
        "description": "该组件通过Row和Column布局实现了一个按钮展示界面。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为一个Column，其中包含一个Button。Button的宽度由@State变量widthShortSize控制，高度固定为100vp，背景颜色为0x317aff。Button的文本内容由@State变量txt控制，文本样式包括溢出处理方式为TextOverflow.Clip，最大行数为1，字体大小固定为20，字体加粗，字体家族为'cursive'，字体样式为斜体。Button的文本字体大小为40。",
        "code": "@Entry\n@Component\nstruct buttonTestDemo {\n  @State txt: string = 'overflowTextOverlengthTextOverflow.Clip'; // 按钮的文本内容\n  @State widthShortSize: number = 210; // 按钮的宽度\n\n  build() {\n    Row() {\n      Column() {\n        Button(this.txt) // 创建一个按钮，文本内容为txt\n          .width(this.widthShortSize) // 设置按钮的宽度为widthShortSize\n          .height(100) // 设置按钮的高度为100vp\n          .backgroundColor(0x317aff) // 设置按钮的背景颜色为0x317aff\n          .labelStyle({ \n            overflow: TextOverflow.Clip, // 设置文本溢出处理方式为裁剪\n            maxLines: 1, // 设置文本最大行数为1\n            minFontSize: 20, // 设置最小字体大小为20\n            maxFontSize: 20, // 设置最大字体大小为20\n            font: {\n              size: 20, // 设置字体大小为20\n              weight: FontWeight.Bolder, // 设置字体加粗\n              family: 'cursive', // 设置字体家族为'cursive'\n              style: FontStyle.Italic // 设置字体样式为斜体\n            }\n          })\n          .fontSize(40) // 设置按钮文本的字体大小为40\n      }\n      .width('100%') // 设置Column的宽度为100%\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}"
    },
    {
        "description": "该组件通过 Column 布局实现了一个简单的计数器界面。布局宽度占据整个屏幕，高度设为 100%，内容在垂直方向上居中对齐。组件的垂直方向上包含一个 Text 组件和一个 Button 组件。\nText 组件用于显示当前计数器的值，字体大小为 30，点击 Text 组件可以增加计数器的值。Button 组件根据计数器的值显示不同的文本，字体大小为 30，高度为 50。当计数器的值为负数时，Button 显示 \"count is negative\"；当计数器的值为偶数时，Button 显示 \"count is even\"；当计数器的值为奇数时，Button 显示 \"count is odd\"。\n整个布局通过 Column 布局保证 Text 和 Button 在垂直方向上有序排列，确保界面整洁美观。",
        "code": "@Entry\n@Component\nstruct SwipeGestureExample {\n  @State count: number = 0 // 定义一个状态变量 count，初始值为 0\n\n  build() {\n    Column() {\n      Text(`${this.count}`) // 显示当前计数器的值\n        .fontSize(30) // 设置字体大小为 30\n        .onClick(() => { // 点击 Text 组件时触发的事件\n          this.count++ // 增加计数器的值\n        })\n      if (this.count <= 0) { // 当计数器的值小于等于 0 时\n        Button('count is negative') // 显示 \"count is negative\" 的按钮\n          .fontSize(30) // 设置字体大小为 30\n          .height(50) // 设置按钮高度为 50\n      } else if (this.count % 2 === 0) { // 当计数器的值为偶数时\n        Button('count is even') // 显示 \"count is even\" 的按钮\n          .fontSize(30) // 设置字体大小为 30\n          .height(50) // 设置按钮高度为 50\n      } else { // 当计数器的值为奇数时\n        Button('count is odd') // 显示 \"count is odd\" 的按钮\n          .fontSize(30) // 设置字体大小为 30\n          .height(50) // 设置按钮高度为 50\n      }\n    }\n    .height('100%') // 设置 Column 的高度为 100%\n    .width('100%') // 设置 Column 的宽度为 100%\n    .justifyContent(FlexAlign.Center) // 设置 Column 的内容在垂直方向上居中对齐\n  }\n}"
    },
    {
        "description": "该组件通过 Flex 布局实现了一个展示不同样式和角色的按钮的界面。布局高度设为 200vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为两个部分，每个部分包含一个标题和一组按钮。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过 Flex 组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过 Flex 布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
        "code": "@Entry\n@Component\nstruct ButtonExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      // 第一部分：普通按钮\n      Text('Role is Normal button').fontSize(9).fontColor(0xCCCCCC) // 标题文本，字体大小为9，颜色为灰色\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        Button('Emphasized', { buttonStyle: ButtonStyleMode.EMPHASIZED, role: ButtonRole.NORMAL }); // 强调按钮，样式为强调，角色为普通\n        Button('Normal', { buttonStyle: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL }); // 普通按钮，样式为普通，角色为普通\n        Button('Textual', { buttonStyle: ButtonStyleMode.TEXTUAL, role: ButtonRole.NORMAL }); // 文本按钮，样式为文本，角色为普通\n      }\n      // 第二部分：错误按钮\n      Text('Role is Error button').fontSize(9).fontColor(0xCCCCCC) // 标题文本，字体大小为9，颜色为灰色\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        Button('Emphasized', { buttonStyle: ButtonStyleMode.EMPHASIZED, role: ButtonRole.ERROR}); // 强调按钮，样式为强调，角色为错误\n        Button('Normal', { buttonStyle: ButtonStyleMode.NORMAL, role: ButtonRole.ERROR }); // 普通按钮，样式为普通，角色为错误\n        Button('Textual', { buttonStyle: ButtonStyleMode.TEXTUAL, role: ButtonRole.ERROR }); // 文本按钮，样式为文本，角色为错误\n      }\n    }.height(200).padding({ left: 35, right: 35, top: 35 }) // 设置整个组件的高度为200vp，内边距为左右35vp、顶部35vp\n  }\n}"
    },
    {
        "description": "该组件通过 Flex 布局实现了一个展示多种类型按钮（如强调按钮、普通按钮、文本按钮）及其不同尺寸效果的界面。布局宽度占据整个屏幕，高度设为 400vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组按钮。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过 Flex 组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过 Flex 布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
        "code": "@Entry\n@Component\nstruct ButtonExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      // 创建一个文本组件，显示“Normal size button”，字体大小为9，颜色为0xCCCCCC\n      Text('Normal size button').fontSize(9).fontColor(0xCCCCCC)\n      // 创建一个水平布局的 Flex 组件，对齐方式为居中对齐，按钮之间的间距均匀分布\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        // 创建一个强调风格的按钮，显示文本“Emphasized”\n        Button('Emphasized', { buttonStyle: ButtonStyleMode.EMPHASIZED });\n        // 创建一个普通风格的按钮，显示文本“Normal”\n        Button('Normal', { buttonStyle: ButtonStyleMode.NORMAL });\n        // 创建一个文本风格的按钮，显示文本“Textual”\n        Button('Textual', { buttonStyle: ButtonStyleMode.TEXTUAL });\n      }\n\n      // 创建一个文本组件，显示“Small size button”，字体大小为9，颜色为0xCCCCCC\n      Text('Small size button').fontSize(9).fontColor(0xCCCCCC)\n      // 创建一个水平布局的 Flex 组件，对齐方式为居中对齐，按钮之间的间距均匀分布\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        // 创建一个强调风格的小尺寸按钮，显示文本“Emphasized”\n        Button('Emphasized', { controlSize: ControlSize.SMALL, buttonStyle: ButtonStyleMode.EMPHASIZED });\n        // 创建一个普通风格的小尺寸按钮，显示文本“Normal”\n        Button('Normal', { controlSize: ControlSize.SMALL, buttonStyle: ButtonStyleMode.NORMAL });\n        // 创建一个文本风格的小尺寸按钮，显示文本“Textual”\n        Button('Textual', { controlSize: ControlSize.SMALL, buttonStyle: ButtonStyleMode.TEXTUAL });\n      }\n\n      // 创建一个文本组件，显示“Small size button”，字体大小为9，颜色为0xCCCCCC\n      Text('Small size button').fontSize(9).fontColor(0xCCCCCC)\n      // 创建一个水平布局的 Flex 组件，对齐方式为居中对齐，按钮之间的间距均匀分布\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        // 创建一个强调风格的小尺寸按钮，显示文本“Emphasized”\n        Button('Emphasized').controlSize(ControlSize.SMALL).buttonStyle(ButtonStyleMode.EMPHASIZED);\n        // 创建一个普通风格的小尺寸按钮，显示文本“Normal”\n        Button('Normal').controlSize(ControlSize.SMALL).buttonStyle(ButtonStyleMode.NORMAL);\n        // 创建一个文本风格的小尺寸按钮，显示文本“Textual”\n        Button('Textual').controlSize(ControlSize.SMALL).buttonStyle(ButtonStyleMode.TEXTUAL);\n      }\n\n    }.height(400).padding({ left: 35, right: 35, top: 35 })\n  }\n}"
    },
    {
        "description": "该组件实现了一个自定义样式的按钮，通过自定义样式类 `MyButtonStyle` 实现了按钮的圆圈样式替换。布局宽度占据整个屏幕，高度设为 100%，内边距为 0。组件的垂直方向上被分为两个部分：一个自定义样式的按钮和一个开关控件。按钮的样式包括背景颜色、宽度和高度等属性，支持不同的样式展示。按钮组之间通过 Flex 组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。开关控件用于控制按钮的启用或禁用状态。整个布局通过 Flex 布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
        "code": "// 自定义样式类，实现按钮的圆圈样式替换\nclass MyButtonStyle implements ContentModifier<ButtonConfiguration> {\n  x: number = 0 // 按钮点击位置的x坐标\n  y: number = 0 // 按钮点击位置的y坐标\n  selectedColor: Color = Color.Black // 按钮按压时的颜色\n\n  // 构造函数，初始化按钮的位置和颜色\n  constructor(x: number, y: number, ColorType: Color) {\n    this.x = x\n    this.y = y\n    this.selectedColor = ColorType\n  }\n\n  // 应用自定义样式，返回一个构建器\n  applyContent(): WrappedBuilder<[ButtonConfiguration]> {\n    return wrapBuilder(buildButton1)\n  }\n}\n\n// 构建器函数，用于构建自定义样式的按钮\n@Builder function buildButton1(config: ButtonConfiguration) {\n  Column({ space: 30 }) {\n    // 显示按钮的启用状态\n    Text(config.enabled ? \"enabled true\" : \"enabled false\")\n    // 显示按钮的按压状态\n    Text('圆圈状态' + (config.pressed ? \"（ 按压 ）\" : \"（ 非按压 ）\"))\n    // 显示按钮点击位置的x坐标\n    Text('点击位置x坐标：' + (config.enabled ? (config.contentModifier as MyButtonStyle).x : \"0\"))\n    // 显示按钮点击位置的y坐标\n    Text('点击位置y坐标：' + (config.enabled ? (config.contentModifier as MyButtonStyle).y : \"0\"))\n    // 绘制一个圆圈，根据按压状态改变颜色\n    Circle({ width: 50, height: 50 })\n      .fill(config.pressed ? (config.contentModifier as MyButtonStyle).selectedColor : Color.Black)\n      .gesture(\n        // 添加点击手势，触发按钮点击事件\n        TapGesture({ count: 1 }).onAction((event: GestureEvent) => {\n          config.triggerClick(event.fingerList[0].localX, event.fingerList[0].localY)\n        })\n      ).opacity(config.enabled ? 1 : 0.1) // 根据按钮启用状态设置透明度\n  }\n}\n\n// 入口组件，定义按钮示例\n@Entry\n@Component\nstruct ButtonExample {\n  @State buttonEnabled: boolean = true; // 按钮的启用状态\n  @State positionX: number = 0 // 按钮点击位置的x坐标\n  @State positionY: number = 0 // 按钮点击位置的y坐标\n  @State state: boolean[] = [true, false] // 按钮状态数组\n  @State index: number = 0 // 按钮状态索引\n\n  build() {\n    Column() {\n      // 创建一个自定义样式的按钮\n      Button('OK')\n        .contentModifier(new MyButtonStyle(this.positionX, this.positionY, Color.Red))\n        .onClick((event) => {\n          console.info('change' + JSON.stringify(event))\n          this.positionX = event.displayX // 更新按钮点击位置的x坐标\n          this.positionY = event.displayY // 更新按钮点击位置的y坐标\n        }).enabled(this.buttonEnabled) // 设置按钮的启用状态\n\n      Row() {\n        // 创建一个开关控件，用于控制按钮的启用或禁用状态\n        Toggle({ type: ToggleType.Switch, isOn: true }).onChange((value: boolean) => {\n          if (value) {\n            this.buttonEnabled = true // 启用按钮\n          } else {\n            this.buttonEnabled = false // 禁用按钮\n          }\n        }).margin({ left: -80 }) // 设置开关控件的左边距\n      }\n    }.height('100%').width('100%').justifyContent(FlexAlign.Center) // 设置布局的高度、宽度和对齐方式\n  }\n}"
    },
    {
        "description": "该组件通过 Flex 布局实现了一个展示多种类型按钮（如普通按钮、胶囊按钮、圆形按钮）及其状态效果的界面。布局宽度占据整个屏幕，高度设为 400vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组按钮。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过 Flex 组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过 Flex 布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
        "code": "@Entry\n@Component\nstruct ButtonExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      // 第一部分：普通按钮\n      Text('Normal button').fontSize(9).fontColor(0xCCCCCC) // 标题文本，字体大小为9，颜色为灰色\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        Button('OK', { type: ButtonType.Normal, stateEffect: true }) // 普通按钮，显示文本为“OK”，启用状态效果\n          .borderRadius(8) // 按钮边框圆角为8\n          .backgroundColor(0x317aff) // 按钮背景颜色为蓝色\n          .width(90) // 按钮宽度为90\n          .onClick(() => {\n            console.log('ButtonType.Normal') // 点击按钮时输出日志\n          })\n        Button({ type: ButtonType.Normal, stateEffect: true }) {\n          Row() {\n            LoadingProgress().width(20).height(20).margin({ left: 12 }).color(0xFFFFFF) // 加载进度条，宽度20，高度20，左边距12，颜色为白色\n            Text('loading').fontSize(12).fontColor(0xffffff).margin({ left: 5, right: 12 }) // 文本“loading”，字体大小12，颜色为白色，左右边距分别为5和12\n          }.alignItems(VerticalAlign.Center) // 行内元素垂直居中对齐\n        }.borderRadius(8).backgroundColor(0x317aff).width(90).height(40) // 按钮边框圆角为8，背景颜色为蓝色，宽度90，高度40\n\n        Button('Disable', { type: ButtonType.Normal, stateEffect: false }).opacity(0.4) // 禁用状态的普通按钮，显示文本为“Disable”，不启用状态效果，透明度为0.4\n          .borderRadius(8).backgroundColor(0x317aff).width(90) // 按钮边框圆角为8，背景颜色为蓝色，宽度90\n      }\n\n      // 第二部分：胶囊按钮\n      Text('Capsule button').fontSize(9).fontColor(0xCCCCCC) // 标题文本，字体大小为9，颜色为灰色\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        Button('OK', { type: ButtonType.Capsule, stateEffect: true }).backgroundColor(0x317aff).width(90) // 胶囊按钮，显示文本为“OK”，启用状态效果，背景颜色为蓝色，宽度90\n        Button({ type: ButtonType.Capsule, stateEffect: true }) {\n          Row() {\n            LoadingProgress().width(20).height(20).margin({ left: 12 }).color(0xFFFFFF) // 加载进度条，宽度20，高度20，左边距12，颜色为白色\n            Text('loading').fontSize(12).fontColor(0xffffff).margin({ left: 5, right: 12 }) // 文本“loading”，字体大小12，颜色为白色，左右边距分别为5和12\n          }.alignItems(VerticalAlign.Center).width(90).height(40) // 行内元素垂直居中对齐，宽度90，高度40\n        }.backgroundColor(0x317aff) // 按钮背景颜色为蓝色\n\n        Button('Disable', { type: ButtonType.Capsule, stateEffect: false }).opacity(0.4) // 禁用状态的胶囊按钮，显示文本为“Disable”，不启用状态效果，透明度为0.4\n          .backgroundColor(0x317aff).width(90) // 按钮背景颜色为蓝色，宽度90\n      }\n\n      // 第三部分：圆形按钮\n      Text('Circle button').fontSize(9).fontColor(0xCCCCCC) // 标题文本，字体大小为9，颜色为灰色\n      Flex({ alignItems: ItemAlign.Center, wrap: FlexWrap.Wrap }) {\n        Button({ type: ButtonType.Circle, stateEffect: true }) {\n          LoadingProgress().width(20).height(20).color(0xFFFFFF) // 加载进度条，宽度20，高度20，颜色为白色\n        }.width(55).height(55).backgroundColor(0x317aff) // 圆形按钮，宽度55，高度55，背景颜色为蓝色\n\n        Button({ type: ButtonType.Circle, stateEffect: true }) {\n          LoadingProgress().width(20).height(20).color(0xFFFFFF) // 加载进度条，宽度20，高度20，颜色为白色\n        }.width(55).height(55).margin({ left: 20 }).backgroundColor(0xF55A42) // 圆形按钮，宽度55，高度55，左边距20，背景颜色为红色\n      }\n    }.height(400).padding({ left: 35, right: 35, top: 35 }) // 整体布局高度为400，内边距为左右35，顶部35\n  }\n}"
    }
]