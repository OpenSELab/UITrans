[
    {
        "description": "该组件通过 Column 布局实现了一个展示日期选择器的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个日期选择器组件。日期选择器的类型为 INLINE_DATE，表示日期选择器以行内形式展示。日期选择器的初始年份设置为 2016 年，当日期发生变化时，会触发 onDateChange 事件，并在控制台输出当前选择的日期。\n日期选择器的样式包括默认的背景颜色、字体颜色等，支持用户自定义样式。日期选择器的排列方式为垂直布局，确保日期选择器在垂直方向上有序排列，界面整洁美观。",
        "code": "import { CounterType, CounterComponent, DateData } from '@kit.ArkUI'; // 导入 CounterType、CounterComponent 和 DateData 类型\n\n@Entry // 标记该组件为入口组件\n@Component // 标记该结构体为组件\nstruct DataStyleExample {\n  build() {\n    Column() { // 创建一个垂直布局的容器\n\n      CounterComponent({ // 创建一个日期选择器组件\n        options: {\n          type: CounterType.INLINE_DATE, // 设置日期选择器的类型为行内日期选择器\n          dateOptions: {\n            year: 2016, // 设置日期选择器的初始年份为 2016 年\n            onDateChange: (date: DateData) => { // 设置日期变化时的回调函数\n              console.log(\"onDateChange Date: \" + date.toString()); // 在控制台输出当前选择的日期\n            }\n          }\n        }\n      })\n    }\n  }\n}"
    },
    {
        "description": "该示例展示了一个计数器组件的使用，通过 `CounterComponent` 组件实现了一个列表类型的计数器。布局采用垂直布局（`Column`），组件宽度占据整个父容器的宽度，高度根据内容自适应。组件的样式和外观包括计数器的标签、最小值、当前值和最大值的设置。计数器的排列和嵌套关系为垂直布局，标签和计数器值的排列为水平布局，标签位于左侧，计数器值位于右侧。计数器的功能包括点击事件，用户可以通过点击计数器的增减按钮来调整计数器的值，计数器的值会在最小值和最大值之间进行限制。",
        "code": "// 导入计数器组件及其类型\nimport { CounterType, CounterComponent } from '@kit.ArkUI';\n\n// 定义一个入口组件\n@Entry\n// 定义一个组件结构\n@Component\nstruct ListCounterExample {\n  // 构建组件的 UI 结构\n  build() {\n    // 使用垂直布局\n    Column() {\n      // 创建一个计数器组件，类型为列表类型\n      CounterComponent({\n        options: {\n          // 设置计数器类型为列表类型\n          type: CounterType.LIST,\n          // 设置计数器的具体选项\n          numberOptions: {\n            // 设置计数器的标签为 \"价格\"\n            label: \"价格\",\n            // 设置计数器的最小值为 0\n            min: 0,\n            // 设置计数器的当前值为 5\n            value: 5,\n            // 设置计数器的最大值为 10\n            max: 10\n          }\n        }\n      })\n    }\n  }\n}"
    },
    {
        "description": "该组件通过 Column 布局实现了一个紧凑型的计数器界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个 CounterComponent 组件，该组件用于展示和操作计数器的值。\nCounterComponent 组件的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。计数器的值通过按钮进行增减操作，按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过 Column 布局保证计数器在垂直方向上有序排列，确保界面整洁美观。",
        "code": "// 导入 CounterType 和 CounterComponent 组件\nimport { CounterType, CounterComponent } from '@kit.ArkUI';\n\n// 使用 @Entry 和 @Component 装饰器定义一个名为 CompactCounterExample 的组件\n@Entry\n@Component\nstruct CompactCounterExample {\n  // 构建组件的 UI 结构\n  build() {\n    // 使用 Column 布局，垂直排列子组件\n    Column() {\n      // 创建一个 CounterComponent 组件，并传入配置选项\n      CounterComponent({\n        options: {\n          // 设置计数器的类型为 COMPACT\n          type: CounterType.COMPACT,\n          // 配置计数器的具体选项\n          numberOptions: {\n            // 设置计数器的标签为 \"数量\"\n            label: \"数量\",\n            // 设置计数器的初始值为 10\n            value: 10,\n            // 设置计数器的最小值为 0\n            min: 0,\n            // 设置计数器的最大值为 100\n            max: 100,\n            // 设置计数器的步长为 10\n            step: 10\n          }\n        }\n      })\n    }\n  }\n}"
    },
    {
        "description": "该组件通过 Column 布局实现了一个计数器组件的展示界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个 CounterComponent 组件，该组件用于展示和控制计数器的值。\n\nCounterComponent 组件的样式和外观包括：\n- 计数器的初始值为 100，最小值为 10，最大值为 1000，步长为 2。\n- 计数器的文本宽度为 100vp，用于控制显示区域的宽度。\n- 计数器的类型为 INLINE，表示计数器以行内形式展示。\n\n组件的排列和嵌套关系为：\n- 整个界面通过 Column 组件进行垂直布局，确保 CounterComponent 组件在垂直方向上居中显示。\n\n组件的功能和交互包括：\n- 计数器的值可以通过点击加减按钮进行调整，每次调整的步长为 2。\n- 当计数器的值发生变化时，会触发 onChange 事件，并在控制台输出当前的计数值。\n\n整个布局通过 Column 布局保证计数器在垂直方向上有序排列，确保界面整洁美观。",
        "code": "import { CounterType, CounterComponent } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct NumberStyleExample {\n  build() {\n    Column() {\n      // 创建一个 CounterComponent 组件，用于展示和控制计数器的值\n      CounterComponent({\n        options: {\n          type: CounterType.INLINE, // 设置计数器类型为 INLINE，表示以行内形式展示\n          inlineOptions: {\n            value: 100, // 设置计数器的初始值为 100\n            min: 10, // 设置计数器的最小值为 10\n            step: 2, // 设置计数器的步长为 2，即每次调整的增量或减量为 2\n            max: 1000, // 设置计数器的最大值为 1000\n            textWidth: 100, // 设置计数器文本显示区域的宽度为 100vp\n            onChange: (value: number) => {\n              // 当计数器的值发生变化时，触发 onChange 事件，并在控制台输出当前的计数值\n              console.log(\"onDateChange Date: \" + value.toString());\n            }\n          }\n        }\n      })\n    }\n  }\n}"
    },
    {
        "description": "该组件通过 Column 布局实现了一个展示多种类型计数器（如列表型、紧凑型、数字内联型、日期内联型）的界面。布局宽度占据整个屏幕，高度设为 100%，内边距为无。组件的垂直方向上被分为多个部分，每个部分包含一个计数器组件。每个计数器组件以垂直布局方式排列，计数器之间的间距通过 margin 属性设置为 20vp，且对齐方式为居中对齐。\n计数器的样式包括宽度、高度、边距等属性，支持不同的样式展示。计数器组件之间通过 Column 组件进行分隔。计数器的功能包括点击事件和状态效果，用户可以通过点击计数器触发相应操作，计数器也可以在启用或禁用状态下进行展示。\n整个布局通过 Column 布局保证计数器在垂直方向上有序排列，确保界面整洁美观。",
        "code": "import { CounterType, CounterComponent, DateData } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct CounterPage {\n  @State currentDirection: Direction = Direction.Rtl // 定义当前的布局方向，默认为从右到左（RTL）\n\n  build() {\n    Column({}) {\n      // 列表型计数器组件\n      CounterComponent({\n        options: {\n          direction: this.currentDirection, // 设置计数器的布局方向\n          type: CounterType.LIST, // 设置计数器的类型为列表型\n          numberOptions: {\n            label: \"价格\", // 设置计数器的标签\n            min: 0, // 设置计数器的最小值\n            value: 5, // 设置计数器的当前值\n            max: 10, // 设置计数器的最大值\n          }\n        }\n      })\n      .width('80%') // 设置计数器的宽度为父容器的80%\n\n      // 紧凑型计数器组件\n      CounterComponent({\n        options: {\n          direction: this.currentDirection, // 设置计数器的布局方向\n          type: CounterType.COMPACT, // 设置计数器的类型为紧凑型\n          numberOptions: {\n            label: \"数量\", // 设置计数器的标签\n            value: 10, // 设置计数器的当前值\n            min: 0, // 设置计数器的最小值\n            max: 100, // 设置计数器的最大值\n            step: 10 // 设置计数器的步长\n          }\n        }\n      }).margin({ top: 20 }) // 设置计数器的上边距为20vp\n\n      // 数字内联型计数器组件\n      CounterComponent({\n        options: {\n          type: CounterType.INLINE, // 设置计数器的类型为数字内联型\n          direction: this.currentDirection, // 设置计数器的布局方向\n          inlineOptions: {\n            value: 100, // 设置计数器的当前值\n            min: 10, // 设置计数器的最小值\n            step: 2, // 设置计数器的步长\n            max: 1000, // 设置计数器的最大值\n            textWidth: 100, // 设置计数器文本的宽度\n            onChange: (value: number) => {\n              console.log(\"onDateChange Date: \" + value.toString()); // 设置计数器值变化时的回调函数\n            }\n          }\n        }\n      }).margin({ top: 20 }) // 设置计数器的上边距为20vp\n\n      // 日期内联型计数器组件\n      CounterComponent({\n        options: {\n          direction: this.currentDirection, // 设置计数器的布局方向\n          type: CounterType.INLINE_DATE, // 设置计数器的类型为日期内联型\n          dateOptions: {\n            year: 2024, // 设置计数器的年份\n            onDateChange: (date: DateData) => {\n              console.log(\"onDateChange Date: \" + date.toString()); // 设置计数器日期变化时的回调函数\n            }\n          }\n        }\n      }).margin({ top: 20 }) // 设置计数器的上边距为20vp\n    }\n    .width('100%') // 设置列的宽度为100%\n    .height('100%') // 设置列的高度为100%\n    .justifyContent(FlexAlign.Center) // 设置列的内容在垂直方向上居中对齐\n    .alignItems(HorizontalAlign.Center) // 设置列的内容在水平方向上居中对齐\n  }\n}"
    }
]