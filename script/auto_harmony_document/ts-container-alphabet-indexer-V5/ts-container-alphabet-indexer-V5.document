Title: AlphabetIndexer-信息展示-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-alphabet-indexer-V5

Markdown Content:
可以与容器组件联动用于按逻辑结构快速定位容器显示区域的组件。

说明

该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

接口
--

AlphabetIndexer(value: {arrayValue: Array<string\>, selected: number})

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

arrayValue

Array<string\>

是

字母索引字符串数组，不可设置为空。

selected

number

是

初始选中项索引值，若超出索引值范围，则取默认值0。

从API version 10开始，该参数支持[$$](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-two-way-sync-V5)双向绑定变量。

### color

color(value: ResourceColor)

设置文字颜色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### selectedColor

selectedColor(value: ResourceColor)

设置选中项文字颜色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

popupColor(value: ResourceColor)

设置提示弹窗文字颜色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### selectedBackgroundColor

selectedBackgroundColor(value: ResourceColor)

设置选中项背景颜色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

popupBackground(value: ResourceColor)

设置提示弹窗背景色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

是

提示弹窗背景色。

默认值：

API version 11及以前：0xFFFFFFFF。

API version 12及以后：#66808080。

usingPopup(value: boolean)

设置是否使用提示弹窗。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

boolean

是

是否使用提示弹窗。

默认值：false。

### selectedFont

selectedFont(value: Font)

设置选中项文字样式。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[Font](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#font)

是

选中项文字样式。

默认值：

API version 11及以前：

{

size:'12.0fp',

style:FontStyle.Normal,

weight:FontWeight.Normal,

family:'HarmonyOS Sans'

}

API version 12及以后：

{

size:'10.0vp',

style:FontStyle.Normal,

weight:FontWeight.Medium,

family:'HarmonyOS Sans'

}

popupFont(value: Font)

设置提示弹窗字体样式。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[Font](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#font)

是

提示弹窗字体样式。

默认值：

{

size:'24.0vp',

style:FontStyle.Normal,

weight:FontWeight.Normal,

family:'HarmonyOS Sans'

}

### font

font(value: Font)

设置字母索引条默认字体样式。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[Font](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#font)

是

字母索引条默认字体样式。

默认值：

API version 11及以前：

{

size:'12.0fp',

style:FontStyle.Normal,

weight:FontWeight.Normal,

family:'HarmonyOS Sans'

}

API version 12及以后：

{

size:'10.0vp',

style:FontStyle.Normal,

weight:FontWeight.Medium,

family:'HarmonyOS Sans'

}

### itemSize

itemSize(value: string | number)

设置字母索引条字母区域大小。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

string | number

是

字母索引条字母区域大小，字母区域为正方形，即正方形边长。不支持设置为百分比。

默认值：16.0

单位：vp

### alignStyle

alignStyle(value: IndexerAlign, offset?: Length)

设置字母索引条弹框的对齐样式。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[IndexerAlign](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-alphabet-indexer-V5#indexeralign%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

是

字母索引条弹框的对齐样式，支持弹窗显示在索引条右侧和左侧。

默认值: IndexerAlign.END。

offset10+

[Length](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#length)

否

提示弹窗与索引条之间间距，大于等于0为有效值，在不设置或设置为小于0的情况下间距与popupPosition.x相同。与popupPosition同时设置时，水平方向上offset生效，竖直方向上popupPosition.y生效。

### selected8+

selected(index: number)

设置选中项索引值。

从API version 10开始，该参数支持[$$](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-two-way-sync-V5)双向绑定变量。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

index

number

是

选中项索引值。

默认值：0

popupPosition(value: Position)

设置弹出窗口相对于索引器条上边框中点的位置。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[Position](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#position)

是

弹出窗口相对于索引器条上边框中点的位置。

默认值：{x:60.0, y:48.0}

popupSelectedColor(value: ResourceColor)

设置提示弹窗非字母部分选中文字色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

popupUnselectedColor(value: ResourceColor)

设置提示弹窗非字母部分未选中文字色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

是

提示弹窗非字母部分未选中文字色。

默认值：#FF182431

popupItemFont(value: Font)

设置提示弹窗非字母部分字体样式。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[Font](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#font)

是

提示弹窗非字母部分字体样式。

默认值：

{

size:24,

weight:FontWeight.Medium

}

popupItemBackgroundColor(value: ResourceColor)

设置提示弹窗非字母部分背景色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

是

提示弹窗非字母部分背景色。

默认值：

API version 11及以前：#FFFFFFFF。

API version 12及以后：#00000000。

### autoCollapse11+

autoCollapse(value: boolean)

设置是否使用自适应折叠模式。

如果字符串首字符为“#”，除去首字符。当剩余字符数 $\\leq$ 9时，选择全显示模式。当9 < 剩余字符数 $\\leq$ 13时，根据索引条高度自适应选择全显示模式或者短折叠模式。当剩余字符数 \> 13时，根据索引条高度自适应选择短折叠模式或者长折叠模式。

如果字符串首字符不为“#”。当所有字符数 $\\leq$ 9时，选择全显示模式。当9 < 所有字符数 $\\leq$ 13时，根据索引条高度自适应选择全显示模式或者短折叠模式。当所有字符数 \> 13时，根据索引条高度自适应选择短折叠模式或者长折叠模式。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

boolean

是

是否使用自适应折叠模式。

默认值：

API version 12之前：false。

API version 12及之后：true。

popupItemBorderRadius(value: number)

设置提示弹窗索引项背板圆角半径。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

number

是

设置提示弹窗索引项背板圆角半径。

默认值：24vp。

不支持百分比，小于0时按照0设置。

提示弹窗背板圆角自适应变化（索引项圆角半径+4vp）。

### itemBorderRadius12+

itemBorderRadius(value: number)

设置索引项背板圆角半径。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

number

是

设置索引项背板圆角半径。

默认值：8vp

不支持百分比，小于0时按照0设置。

索引条背板圆角自适应变化（索引项圆角半径+4vp）。

popupBackgroundBlurStyle(value: BlurStyle)

设置提示弹窗的背景模糊材质。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[BlurStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-background-V5#blurstyle9)

是

设置提示弹窗的背景模糊材质。

默认值：COMPONENT\_REGULAR。

popupTitleBackground(value: ResourceColor)

设置提示弹窗首个索引项背板颜色。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

是

设置提示弹窗首个索引项背板颜色。

默认值：

提示弹窗只有一个索引项：#00FFFFFF。

提示弹窗有多个索引项：#0c182431。

### enableHapticFeedback12+

enableHapticFeedback(value: boolean)

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

参数名

类型

必填

说明

value

boolean

否

支持触控反馈。

默认值：true。

IndexerAlign枚举说明
----------------

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

描述

Left

弹框显示在索引条右侧。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

Right

弹框显示在索引条左侧。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

START12+

在LTR场景下，弹框显示在索引条右侧的位置。在RTL场景下，弹框显示在索引条左侧的位置。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

END12+

在LTR场景下，弹框显示在索引条左侧的位置。在RTL场景下，弹框显示在索引条右侧的位置。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

### onSelected(deprecated)

onSelected(callback: (index: number) =\> void)

索引条选中回调，返回值为当前选中索引。

从API Version 8开始废弃，建议使用[onSelect](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-alphabet-indexer-V5#onselect8)代替。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

index

number

是

当前选中的索引。

### onSelect8+

onSelect(callback: (index: number) =\> void)

索引条选中回调，返回值为当前选中索引。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

index

number

是

当前选中的索引。

onRequestPopupData(callback: (index: number) =\> Array<string\>)

选中字母索引后，请求索引提示弹窗显示内容回调。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

index

number

是

当前选中的索引

**返回值：**

类型

说明

Array<string\>

索引对应的字符串数组，此字符串数组在弹窗中竖排显示，字符串列表最多显示5个，超出部分可以滑动显示。

onPopupSelect(callback: (index: number) =\> void)

字母索引提示弹窗字符串列表选中回调。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

index

number

是

当前选中的索引。

示例
--

### 示例1

2.  @Entry
3.  @Component
4.  struct AlphabetIndexerSample {
5.    private arrayA: string\[\] = \['安'\]
6.    private arrayB: string\[\] = \['卜', '白', '包', '毕', '丙'\]
7.    private arrayC: string\[\] = \['曹', '成', '陈', '催'\]
8.    private arrayL: string\[\] = \['刘', '李', '楼', '梁', '雷', '吕', '柳', '卢'\]
9.    private value: string\[\] = \['#', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
10.    'H', 'I', 'J', 'K', 'L', 'M', 'N',
11.    'O', 'P', 'Q', 'R', 'S', 'T', 'U',
12.    'V', 'W', 'X', 'Y', 'Z'\]

14.    build() {
15.      Stack({ alignContent: Alignment.Start }) {
16.        Row() {
17.          List({ space: 20, initialIndex: 0 }) {
18.            ForEach(this.arrayA, (item: string) =\> {
19.              ListItem() {
20.                Text(item)
21.                  .width('80%')
22.                  .height('5%')
23.                  .fontSize(30)
24.                  .textAlign(TextAlign.Center)
25.              }
26.            }, (item: string) =\> item)

28.            ForEach(this.arrayB, (item: string) =\> {
29.              ListItem() {
30.                Text(item)
31.                  .width('80%')
32.                  .height('5%')
33.                  .fontSize(30)
34.                  .textAlign(TextAlign.Center)
35.              }
36.            }, (item: string) =\> item)

38.            ForEach(this.arrayC, (item: string) =\> {
39.              ListItem() {
40.                Text(item)
41.                  .width('80%')
42.                  .height('5%')
43.                  .fontSize(30)
44.                  .textAlign(TextAlign.Center)
45.              }
46.            }, (item: string) =\> item)

48.            ForEach(this.arrayL, (item: string) =\> {
49.              ListItem() {
50.                Text(item)
51.                  .width('80%')
52.                  .height('5%')
53.                  .fontSize(30)
54.                  .textAlign(TextAlign.Center)
55.              }
56.            }, (item: string) =\> item)
57.          }
58.          .width('50%')
59.          .height('100%')

61.          AlphabetIndexer({ arrayValue: this.value, selected: 0 })
62.            .autoCollapse(false)
63.            .selectedColor(0xFFFFFF) 
64.            .popupColor(0xFFFAF0) 
65.            .selectedBackgroundColor(0xCCCCCC) 
66.            .popupBackground(0xD2B48C) 
67.            .usingPopup(true) 
68.            .selectedFont({ size: 16, weight: FontWeight.Bolder }) 
69.            .popupFont({ size: 30, weight: FontWeight.Bolder }) 
70.            .itemSize(28) 
71.            .alignStyle(IndexerAlign.Left) 
72.            .popupItemBorderRadius(24) 
73.            .itemBorderRadius(14) 
74.            .popupBackgroundBlurStyle(BlurStyle.NONE) 
75.            .popupTitleBackground(0xCCCCCC) 
76.            .popupSelectedColor(0x00FF00)
77.            .popupUnselectedColor(0x0000FF)
78.            .popupItemFont({ size: 30, style: FontStyle.Normal })
79.            .popupItemBackgroundColor(0xCCCCCC)
80.            .onSelect((index: number) =\> {
81.              console.info(this.value\[index\] + ' Selected!')
82.            })
83.            .onRequestPopupData((index: number) =\> {
84.              if (this.value\[index\] == 'A') {
85.                return this.arrayA 
86.              } else if (this.value\[index\] == 'B') {
87.                return this.arrayB
88.              } else if (this.value\[index\] == 'C') {
89.                return this.arrayC
90.              } else if (this.value\[index\] == 'L') {
91.                return this.arrayL
92.              } else {
93.                return \[\] 
94.              }
95.            })
96.            .onPopupSelect((index: number) =\> {
97.              console.info('onPopupSelected:' + index)
98.            })
99.        }
100.        .width('100%')
101.        .height('100%')
102.      }
103.    }
104.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114450.35970416311406693423421831741603:50001231000000:2800:C9ECFBEA8B5F875E11B092625B0FC8116BB30D8CDD8567779CEFE962E25A4FB9.gif?needInitFileName=true?needInitFileName=true)

### 示例2

2.  @Entry
3.  @Component
4.  struct AlphabetIndexerSample {
5.    private arrayA: string\[\] = \['安'\]
6.    private arrayB: string\[\] = \['卜', '白', '包', '毕', '丙'\]
7.    private arrayC: string\[\] = \['曹', '成', '陈', '催'\]
8.    private arrayJ: string\[\] = \['嘉', '贾'\]
9.    private value: string\[\] = \['#', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
10.      'H', 'I', 'J', 'K', 'L', 'M', 'N',
11.      'O', 'P', 'Q', 'R', 'S', 'T', 'U',
12.      'V', 'W', 'X', 'Y', 'Z'\]
13.    @State isNeedAutoCollapse: boolean = false;
14.    @State indexerHeight: string = '75%';

16.    build() {
17.      Stack({ alignContent: Alignment.Start }) {
18.        Row() {
19.          List({ space: 20, initialIndex: 0 }) {
20.            ForEach(this.arrayA, (item: string) =\> {
21.              ListItem() {
22.                Text(item)
23.                  .width('80%')
24.                  .height('5%')
25.                  .fontSize(30)
26.                  .textAlign(TextAlign.Center)
27.              }
28.            }, (item: string) =\> item)

30.            ForEach(this.arrayB, (item: string) =\> {
31.              ListItem() {
32.                Text(item)
33.                  .width('80%')
34.                  .height('5%')
35.                  .fontSize(30)
36.                  .textAlign(TextAlign.Center)
37.              }
38.            }, (item: string) =\> item)

40.            ForEach(this.arrayC, (item: string) =\> {
41.              ListItem() {
42.                Text(item)
43.                  .width('80%')
44.                  .height('5%')
45.                  .fontSize(30)
46.                  .textAlign(TextAlign.Center)
47.              }
48.            }, (item: string) =\> item)

50.            ForEach(this.arrayJ, (item: string) =\> {
51.              ListItem() {
52.                Text(item)
53.                  .width('80%')
54.                  .height('5%')
55.                  .fontSize(30)
56.                  .textAlign(TextAlign.Center)
57.              }
58.            }, (item: string) =\> item)
59.          }
60.          .width('50%')
61.          .height('100%')

63.          Column() {
64.            Column() {
65.              AlphabetIndexer({ arrayValue: this.value, selected: 0 })
66.                .autoCollapse(this.isNeedAutoCollapse)
67.                .height(this.indexerHeight)
68.                .selectedColor(0xFFFFFF)
69.                .popupColor(0xFFFAF0)
70.                .selectedBackgroundColor(0xCCCCCC)
71.                .popupBackground(0xD2B48C)
72.                .usingPopup(true)
73.                .selectedFont({ size: 16, weight: FontWeight.Bolder })
74.                .popupFont({ size: 30, weight: FontWeight.Bolder })
75.                .itemSize(28)
76.                .alignStyle(IndexerAlign.Right)
77.                .popupTitleBackground("#D2B48C") 
78.                .popupSelectedColor(0x00FF00)
79.                .popupUnselectedColor(0x0000FF)
80.                .popupItemFont({ size: 30, style: FontStyle.Normal })
81.                .popupItemBackgroundColor(0xCCCCCC)
82.                .onSelect((index: number) =\> {
83.                  console.info(this.value\[index\] + ' Selected!');
84.                })
85.                .onRequestPopupData((index: number) =\> {
86.                  if (this.value\[index\] == 'A') {
87.                    return this.arrayA;
88.                  } else if (this.value\[index\] == 'B') {
89.                    return this.arrayB;
90.                  } else if (this.value\[index\] == 'C') {
91.                    return this.arrayC;
92.                  } else if (this.value\[index\] == 'J') {
93.                    return this.arrayJ;
94.                  } else {
95.                    return \[\];
96.                  }
97.                })
98.                .onPopupSelect((index: number) =\> {
99.                  console.info('onPopupSelected:' + index);
100.                })
101.            }
102.            .height('80%')
103.            .justifyContent(FlexAlign.Center)

105.            Column() {
106.              Button('切换成折叠模式')
107.                .margin('5vp')
108.                .onClick(() =\> {
109.                  this.isNeedAutoCollapse = true;
110.                })
111.              Button('切换索引条高度到30%')
112.                .margin('5vp')
113.                .onClick(() =\> {
114.                  this.indexerHeight = '30%';
115.                })
116.              Button('切换索引条高度到70%')
117.                .margin('5vp')
118.                .onClick(() =\> {
119.                  this.indexerHeight = '70%';
120.                })
121.            }.height('20%')
122.          }
123.          .width('50%')
124.          .justifyContent(FlexAlign.Center)
125.        }
126.        .width('100%')
127.        .height('100%')
128.      }
129.    }
130.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114450.44250376571603834218354544213116:50001231000000:2800:DC7297466337A09189FC66AB4ACC23CCF722E2F4EE68E039D393EBBFC608ACA5.gif?needInitFileName=true?needInitFileName=true)

### 示例3

2.  @Entry
3.  @Component
4.  struct AlphabetIndexerSample {
5.    private arrayA: string\[\] = \['安'\]
6.    private arrayB: string\[\] = \['卜', '白', '包', '毕', '丙'\]
7.    private arrayC: string\[\] = \['曹', '成', '陈', '催'\]
8.    private arrayL: string\[\] = \['刘', '李', '楼', '梁', '雷', '吕', '柳', '卢'\]
9.    private value: string\[\] = \['#', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
10.      'H', 'I', 'J', 'K', 'L', 'M', 'N',
11.      'O', 'P', 'Q', 'R', 'S', 'T', 'U',
12.      'V', 'W', 'X', 'Y', 'Z'\]
13.    @State customBlurStyle: BlurStyle = BlurStyle.NONE;

15.    build() {
16.      Stack({ alignContent: Alignment.Start }) {
17.        Row() {
18.          List({ space: 20, initialIndex: 0 }) {
19.            ForEach(this.arrayA, (item: string) =\> {
20.              ListItem() {
21.                Text(item)
22.                  .width('80%')
23.                  .height('5%')
24.                  .fontSize(30)
25.                  .textAlign(TextAlign.Center)
26.              }
27.            }, (item: string) =\> item)

29.            ForEach(this.arrayB, (item: string) =\> {
30.              ListItem() {
31.                Text(item)
32.                  .width('80%')
33.                  .height('5%')
34.                  .fontSize(30)
35.                  .textAlign(TextAlign.Center)
36.              }
37.            }, (item: string) =\> item)

39.            ForEach(this.arrayC, (item: string) =\> {
40.              ListItem() {
41.                Text(item)
42.                  .width('80%')
43.                  .height('5%')
44.                  .fontSize(30)
45.                  .textAlign(TextAlign.Center)
46.              }
47.            }, (item: string) =\> item)

49.            ForEach(this.arrayL, (item: string) =\> {
50.              ListItem() {
51.                Text(item)
52.                  .width('80%')
53.                  .height('5%')
54.                  .fontSize(30)
55.                  .textAlign(TextAlign.Center)
56.              }
57.            }, (item: string) =\> item)
58.          }
59.          .width('30%')
60.          .height('100%')
61.          Column(){
62.            Column() {
63.              Text('切换模糊材质: ')
64.                .fontSize(24)
65.                .fontColor(0xcccccc)
66.                .width('100%')
67.              Button('COMPONENT\_REGULAR')
68.                .margin('5vp')
69.                .width(200)
70.                .onClick(() =\> {
71.                  this.customBlurStyle = BlurStyle.COMPONENT\_REGULAR;
72.                })
73.              Button('BACKGROUND\_THIN')
74.                .margin('5vp')
75.                .width(200)
76.                .onClick(() =\> {
77.                  this.customBlurStyle = BlurStyle.BACKGROUND\_THIN;
78.                })
79.            }.height('20%')

81.            Column(){
82.              AlphabetIndexer({ arrayValue: this.value, selected: 0 })
83.                .usingPopup(true) 
84.                .alignStyle(IndexerAlign.Left) 
85.                .popupItemBorderRadius(24) 
86.                .itemBorderRadius(14) 
87.                .popupBackgroundBlurStyle(this.customBlurStyle) 
88.                .popupTitleBackground(0xCCCCCC) 
89.                .onSelect((index: number) =\> {
90.                  console.info(this.value\[index\] + ' Selected!')
91.                })
92.                .onRequestPopupData((index: number) =\> {
93.                  if (this.value\[index\] == 'A') {
94.                    return this.arrayA 
95.                  } else if (this.value\[index\] == 'B') {
96.                    return this.arrayB
97.                  } else if (this.value\[index\] == 'C') {
98.                    return this.arrayC
99.                  } else if (this.value\[index\] == 'L') {
100.                    return this.arrayL
101.                  } else {
102.                    return \[\] 
103.                  }
104.                })
105.                .onPopupSelect((index: number) =\> {
106.                  console.info('onPopupSelected:' + index)
107.                })
108.            }
109.            .height('80%')
110.          }
111.          .width('70%')
112.        }
113.        .width('100%')
114.        .height('100%')
115.        .backgroundImage($r("app.media.image"))
116.      }
117.    }
118.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114450.33890560394637058347252668787311:50001231000000:2800:BDBA40155CAB1493F7705BDDD1BC5B38FB3611F9253C68F86BDC77AAE7D29099.gif?needInitFileName=true?needInitFileName=true)
