/*\n实现一个带有字母索引器的列表组件，支持通过字母索引快速定位到对应的内容。列表内容分为四个部分，分别对应字母A、B、C、L。字母索引器可以显示所有字母，并在选中特定字母时弹出对应的内容提示。\n*/\n\n@Entry\n@Component\nstruct AlphabetIndexerSample {\n  // 定义四个字符串数组，分别对应不同的字母索引内容\n  private arrayA: string[] = ['安']\n  private arrayB: string[] = ['卜', '白', '包', '毕', '丙']\n  private arrayC: string[] = ['曹', '成', '陈', '催']\n  private arrayL: string[] = ['刘', '李', '楼', '梁', '雷', '吕', '柳', '卢']\n  // 定义字母索引的值数组\n  private value: string[] = ['#', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n  'H', 'I', 'J', 'K', 'L', 'M', 'N',\n  'O', 'P', 'Q', 'R', 'S', 'T', 'U',\n  'V', 'W', 'X', 'Y', 'Z']\n\n  build() {\n    Stack({ alignContent: Alignment.Start }) {\n      Row() {\n        // 创建一个列表，显示arrayA, arrayB, arrayC, arrayL的内容\n        List({ space: 20, initialIndex: 0 }) {\n          ForEach(this.arrayA, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayB, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayC, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayL, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n        }\n        .width('50%')\n        .height('100%')\n\n        // 创建字母索引器，并设置其样式和行为\n        AlphabetIndexer({ arrayValue: this.value, selected: 0 })\n          .selectedColor(0xFFFFFF) // 选中项文本颜色\n          .popupColor(0xFFFAF0) // 弹出框文本颜色\n          .selectedBackgroundColor(0xCCCCCC) // 选中项背景颜色\n          .popupBackground(0xD2B48C) // 弹出框背景颜色\n          .usingPopup(true) // 是否显示弹出框\n          .selectedFont({ size: 16, weight: FontWeight.Bolder }) // 选中项字体样式\n          .popupFont({ size: 30, weight: FontWeight.Bolder }) // 弹出框内容的字体样式\n          .itemSize(28) // 每一项的尺寸大小\n          .alignStyle(IndexerAlign.Left) // 弹出框在索引条右侧弹出\n          .popupItemBorderRadius(24) // 设置提示弹窗索引项背板圆角半径\n          .itemBorderRadius(14) // 设置索引项背板圆角半径\n          .popupBackgroundBlurStyle(BlurStyle.NONE) // 设置提示弹窗的背景模糊材质\n          .popupTitleBackground(0xCCCCCC) // 设置提示弹窗首个索引项背板颜色\n          .popupSelectedColor(0x00FF00)\n          .popupUnselectedColor(0x0000FF)\n          .popupItemFont({ size: 30, style: FontStyle.Normal })\n          .popupItemBackgroundColor(0xCCCCCC)\n          .onSelect((index: number) => {\n            console.info(this.value[index] + ' Selected!')\n          })\n          .onRequestPopupData((index: number) => {\n            if (this.value[index] == 'A') {\n              return this.arrayA // 当选中A时，弹出框里面的提示文本列表显示A对应的列表arrayA，选中B、C、L时也同样\n            } else if (this.value[index] == 'B') {\n              return this.arrayB\n            } else if (this.value[index] == 'C') {\n              return this.arrayC\n            } else if (this.value[index] == 'L') {\n              return this.arrayL\n            } else {\n              return [] // 选中其余子母项时，提示文本列表为空\n            }\n          })\n          .onPopupSelect((index: number) => {\n            console.info('onPopupSelected:' + index)\n          })\n      }\n      .width('100%')\n      .height('100%')\n    }\n  }\n}