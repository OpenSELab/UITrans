{
    "description": "可以与容器组件联动用于按逻辑结构快速定位容器显示区域的组件。",
    "details": null,
    "interfaces": [
        {
            "description": "AlphabetIndexer(value: {arrayValue: Array<string>, selected: number})",
            "params": {
                "value": {
                    "type": {
                        "arrayValue": {
                            "type": "Array<string>",
                            "required": true,
                            "description": "字母索引字符串数组，不可设置为空。"
                        },
                        "selected": {
                            "type": "number",
                            "required": true,
                            "description": "初始选中项索引值，若超出索引值范围，则取默认值0。",
                            "default": 0
                        }
                    },
                    "required": true,
                    "description": "组件的初始化参数。"
                }
            }
        }
    ],
    "attributes": {
        "color": {
            "description": "设置文字颜色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "文字颜色。"
                }
            }
        },
        "selectedColor": {
            "description": "设置选中项文字颜色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "选中项文字颜色。"
                }
            }
        },
        "popupColor": {
            "description": "设置提示弹窗文字颜色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "提示弹窗文字颜色。"
                }
            }
        },
        "selectedBackgroundColor": {
            "description": "设置选中项背景颜色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "选中项背景颜色。"
                }
            }
        },
        "popupBackground": {
            "description": "设置提示弹窗背景色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "提示弹窗背景色。",
                    "default": "#66808080"
                }
            }
        },
        "usingPopup": {
            "description": "设置是否使用提示弹窗。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "是否使用提示弹窗。",
                    "default": false
                }
            }
        },
        "selectedFont": {
            "description": "设置选中项文字样式。",
            "params": {
                "value": {
                    "type": "Font",
                    "required": true,
                    "description": "选中项文字样式。",
                    "default": {
                        "size": "10.0vp",
                        "style": "FontStyle.Normal",
                        "weight": "FontWeight.Medium",
                        "family": "HarmonyOS Sans"
                    }
                }
            }
        },
        "popupFont": {
            "description": "设置提示弹窗字体样式。",
            "params": {
                "value": {
                    "type": "Font",
                    "required": true,
                    "description": "提示弹窗字体样式。",
                    "default": {
                        "size": "24.0vp",
                        "style": "FontStyle.Normal",
                        "weight": "FontWeight.Normal",
                        "family": "HarmonyOS Sans"
                    }
                }
            }
        },
        "font": {
            "description": "设置字母索引条默认字体样式。",
            "params": {
                "value": {
                    "type": "Font",
                    "required": true,
                    "description": "字母索引条默认字体样式。",
                    "default": {
                        "size": "10.0vp",
                        "style": "FontStyle.Normal",
                        "weight": "FontWeight.Medium",
                        "family": "HarmonyOS Sans"
                    }
                }
            }
        },
        "itemSize": {
            "description": "设置字母索引条字母区域大小。",
            "params": {
                "value": {
                    "type": [
                        "string",
                        "number"
                    ],
                    "required": true,
                    "description": "字母索引条字母区域大小，字母区域为正方形，即正方形边长。不支持设置为百分比。",
                    "default": 16.0
                }
            }
        },
        "alignStyle": {
            "description": "设置字母索引条弹框的对齐样式。",
            "params": {
                "value": {
                    "type": "IndexerAlign",
                    "required": true,
                    "description": "字母索引条弹框的对齐样式，支持弹窗显示在索引条右侧和左侧。",
                    "default": "IndexerAlign.END"
                },
                "offset": {
                    "type": "Length",
                    "required": false,
                    "description": "提示弹窗与索引条之间间距，大于等于0为有效值，在不设置或设置为小于0的情况下间距与popupPosition.x相同。与popupPosition同时设置时，水平方向上offset生效，竖直方向上popupPosition.y生效。"
                }
            }
        },
        "selected": {
            "description": "设置选中项索引值。",
            "params": {
                "index": {
                    "type": "number",
                    "required": true,
                    "description": "选中项索引值。",
                    "default": 0
                }
            }
        },
        "popupPosition": {
            "description": "设置弹出窗口相对于索引器条上边框中点的位置。",
            "params": {
                "value": {
                    "type": "Position",
                    "required": true,
                    "description": "弹出窗口相对于索引器条上边框中点的位置。",
                    "default": {
                        "x": 60.0,
                        "y": 48.0
                    }
                }
            }
        },
        "popupSelectedColor": {
            "description": "设置提示弹窗非字母部分选中文字色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "提示弹窗非字母部分选中文字色。"
                }
            }
        },
        "popupUnselectedColor": {
            "description": "设置提示弹窗非字母部分未选中文字色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "提示弹窗非字母部分未选中文字色。",
                    "default": "#FF182431"
                }
            }
        },
        "popupItemFont": {
            "description": "设置提示弹窗非字母部分字体样式。",
            "params": {
                "value": {
                    "type": "Font",
                    "required": true,
                    "description": "提示弹窗非字母部分字体样式。",
                    "default": {
                        "size": 24,
                        "weight": "FontWeight.Medium"
                    }
                }
            }
        },
        "popupItemBackgroundColor": {
            "description": "设置提示弹窗非字母部分背景色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "提示弹窗非字母部分背景色。",
                    "default": "#00000000"
                }
            }
        },
        "autoCollapse": {
            "description": "设置是否使用自适应折叠模式。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "是否使用自适应折叠模式。",
                    "default": true
                }
            }
        },
        "popupItemBorderRadius": {
            "description": "设置提示弹窗索引项背板圆角半径。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "提示弹窗索引项背板圆角半径。",
                    "default": 24
                }
            }
        },
        "itemBorderRadius": {
            "description": "设置索引项背板圆角半径。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "索引项背板圆角半径。",
                    "default": 8
                }
            }
        },
        "popupBackgroundBlurStyle": {
            "description": "设置提示弹窗的背景模糊材质。",
            "params": {
                "value": {
                    "type": "BlurStyle",
                    "required": true,
                    "description": "提示弹窗的背景模糊材质。",
                    "default": "COMPONENT_REGULAR"
                }
            }
        },
        "popupTitleBackground": {
            "description": "设置提示弹窗首个索引项背板颜色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "提示弹窗首个索引项背板颜色。",
                    "default": "#0c182431"
                }
            }
        },
        "enableHapticFeedback": {
            "description": "支持触控反馈。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": false,
                    "description": "是否支持触控反馈。",
                    "default": true
                }
            }
        }
    },
    "events": {
        "onSelected": {
            "description": "索引条选中回调，返回值为当前选中索引。",
            "params": {
                "index": {
                    "type": "number",
                    "required": true,
                    "description": "当前选中的索引。"
                }
            }
        },
        "onSelect": {
            "description": "索引条选中回调，返回值为当前选中索引。",
            "params": {
                "index": {
                    "type": "number",
                    "required": true,
                    "description": "当前选中的索引。"
                }
            }
        },
        "onRequestPopupData": {
            "description": "选中字母索引后，请求索引提示弹窗显示内容回调。",
            "params": {
                "index": {
                    "type": "number",
                    "required": true,
                    "description": "当前选中的索引。"
                }
            },
            "returns": {
                "type": "Array<string>",
                "description": "索引对应的字符串数组，此字符串数组在弹窗中竖排显示，字符串列表最多显示5个，超出部分可以滑动显示。"
            }
        },
        "onPopupSelect": {
            "description": "字母索引提示弹窗字符串列表选中回调。",
            "params": {
                "index": {
                    "type": "number",
                    "required": true,
                    "description": "当前选中的索引。"
                }
            }
        }
    },
    "rules": null,
    "examples": [
        {
            "description": "该组件通过Stack布局实现了一个包含字母索引器和列表的界面。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为两个主要部分：左侧是一个列表，右侧是一个包含字母索引器和模糊材质切换按钮的列。\n\n左侧列表部分通过List组件展示了一系列汉字，每个汉字以ListItem的形式展示，宽度为80%，高度为5%，字体大小为30，文本居中对齐。列表的宽度为30%，高度为100%。\n\n右侧列部分包含两个子列：第一个子列用于切换模糊材质，包含一个文本和两个按钮，按钮的宽度为200，点击按钮可以切换模糊材质样式。第二个子列包含一个字母索引器，字母索引器的宽度为70%，高度为80%。字母索引器支持弹出框显示，弹出框的背景模糊样式可以通过左侧按钮切换。字母索引器的事件包括选择字母和弹出框选择事件，用户可以通过点击字母索引器触发相应操作。\n\n整个布局通过Stack布局保证列表和字母索引器在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct AlphabetIndexerSample {\n  private arrayA: string[] = ['安']\n  private arrayB: string[] = ['卜', '白', '包', '毕', '丙']\n  private arrayC: string[] = ['曹', '成', '陈', '催']\n  private arrayL: string[] = ['刘', '李', '楼', '梁', '雷', '吕', '柳', '卢']\n  private value: string[] = ['#', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n    'H', 'I', 'J', 'K', 'L', 'M', 'N',\n    'O', 'P', 'Q', 'R', 'S', 'T', 'U',\n    'V', 'W', 'X', 'Y', 'Z']\n  @State customBlurStyle: BlurStyle = BlurStyle.NONE;\n\n  build() {\n    Stack({ alignContent: Alignment.Start }) {\n      Row() {\n        List({ space: 20, initialIndex: 0 }) {\n          ForEach(this.arrayA, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%') // 文本宽度为80%\n                .height('5%') // 文本高度为5%\n                .fontSize(30) // 字体大小为30\n                .textAlign(TextAlign.Center) // 文本居中对齐\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayB, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayC, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayL, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n        }\n        .width('30%') // 列表宽度为30%\n        .height('100%') // 列表高度为100%\n\n        Column() {\n          Column() {\n            Text('切换模糊材质: ')\n              .fontSize(24) // 字体大小为24\n              .fontColor(0xcccccc) // 字体颜色为0xcccccc\n              .width('100%') // 文本宽度为100%\n            Button('COMPONENT_REGULAR')\n              .margin('5vp') // 按钮外边距为5vp\n              .width(200) // 按钮宽度为200\n              .onClick(() => {\n                this.customBlurStyle = BlurStyle.COMPONENT_REGULAR; // 点击按钮切换模糊材质样式\n              })\n            Button('BACKGROUND_THIN')\n              .margin('5vp')\n              .width(200)\n              .onClick(() => {\n                this.customBlurStyle = BlurStyle.BACKGROUND_THIN; // 点击按钮切换模糊材质样式\n              })\n          }.height('20%') // 第一个子列高度为20%\n\n          Column() {\n            AlphabetIndexer({ arrayValue: this.value, selected: 0 })\n              .usingPopup(true) // 启用弹出框\n              .alignStyle(IndexerAlign.Left) // 字母索引器对齐方式为左对齐\n              .popupItemBorderRadius(24) // 弹出框项的边框圆角为24\n              .itemBorderRadius(14) // 字母索引器项的边框圆角为14\n              .popupBackgroundBlurStyle(this.customBlurStyle) // 弹出框背景模糊样式\n              .popupTitleBackground(0xCCCCCC) // 弹出框标题背景颜色为0xCCCCCC\n              .onSelect((index: number) => {\n                console.info(this.value[index] + ' Selected!') // 选择字母时触发事件\n              })\n              .onRequestPopupData((index: number) => {\n                if (this.value[index] == 'A') {\n                  return this.arrayA // 根据选择的字母返回对应的数据\n                } else if (this.value[index] == 'B') {\n                  return this.arrayB\n                } else if (this.value[index] == 'C') {\n                  return this.arrayC\n                } else if (this.value[index] == 'L') {\n                  return this.arrayL\n                } else {\n                  return []\n                }\n              })\n              .onPopupSelect((index: number) => {\n                console.info('onPopupSelected:' + index) // 弹出框选择时触发事件\n              })\n          }\n          .height('80%') // 第二个子列高度为80%\n        }\n        .width('70%') // 右侧列宽度为70%\n      }\n      .width('100%') // Row宽度为100%\n      .height('100%') // Row高度为100%\n      .backgroundImage($r(\"app.media.image\")) // 背景图片\n    }\n  }\n}"
        },
        {
            "description": "该组件通过Stack布局实现了一个包含字母索引和列表展示的界面。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为两个主要部分：左侧是一个列表，右侧是一个字母索引器。\n\n列表部分通过Row布局嵌套List组件实现，宽度占据屏幕的50%，高度为100%。列表内部通过ForEach循环遍历不同的字符串数组（如arrayA、arrayB、arrayC、arrayL），并在每个数组项上生成一个ListItem组件。每个ListItem包含一个Text组件，用于显示字符串内容。Text组件的宽度为80%，高度为5%，字体大小为30，文本居中对齐。\n\n字母索引器部分通过AlphabetIndexer组件实现，宽度占据屏幕的50%，高度为100%。字母索引器显示一个包含字母和特殊符号的数组（如value数组），并支持用户点击选择字母。字母索引器的样式包括选中颜色、弹出颜色、选中背景颜色、弹出背景颜色等。字母索引器还支持弹出窗口显示，当用户点击某个字母时，会弹出一个窗口显示该字母对应的内容。弹出窗口的样式包括背景颜色、字体大小、字体粗细等。\n\n字母索引器的功能包括点击事件和弹出窗口事件。用户可以通过点击字母索引器中的字母触发onSelect事件，并在控制台输出选中的字母。当用户点击字母时，字母索引器会根据选中的字母请求对应的弹出窗口数据，并在弹出窗口中显示对应的内容。用户还可以在弹出窗口中选择某个项目，触发onPopupSelect事件，并在控制台输出选中的项目索引。",
            "code": "@Entry\n@Component\nstruct AlphabetIndexerSample {\n  private arrayA: string[] = ['安']\n  private arrayB: string[] = ['卜', '白', '包', '毕', '丙']\n  private arrayC: string[] = ['曹', '成', '陈', '催']\n  private arrayL: string[] = ['刘', '李', '楼', '梁', '雷', '吕', '柳', '卢']\n  private value: string[] = ['#', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n    'H', 'I', 'J', 'K', 'L', 'M', 'N',\n    'O', 'P', 'Q', 'R', 'S', 'T', 'U',\n    'V', 'W', 'X', 'Y', 'Z']\n\n  build() {\n    Stack({ alignContent: Alignment.Start }) {\n      Row() {\n        List({ space: 20, initialIndex: 0 }) {\n          ForEach(this.arrayA, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%') // 设置文本宽度为80%\n                .height('5%') // 设置文本高度为5%\n                .fontSize(30) // 设置字体大小为30\n                .textAlign(TextAlign.Center) // 设置文本居中对齐\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayB, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayC, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayL, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n        }\n        .width('50%') // 设置列表宽度为50%\n        .height('100%') // 设置列表高度为100%\n\n        AlphabetIndexer({ arrayValue: this.value, selected: 0 })\n          .autoCollapse(false) // 设置字母索引器不自动折叠\n          .selectedColor(0xFFFFFF) // 设置选中字母的颜色为白色\n          .popupColor(0xFFFAF0) // 设置弹出窗口的颜色为淡黄色\n          .selectedBackgroundColor(0xCCCCCC) // 设置选中字母的背景颜色为灰色\n          .popupBackground(0xD2B48C) // 设置弹出窗口的背景颜色为棕色\n          .usingPopup(true) // 启用弹出窗口\n          .selectedFont({ size: 16, weight: FontWeight.Bolder }) // 设置选中字母的字体大小和粗细\n          .popupFont({ size: 30, weight: FontWeight.Bolder }) // 设置弹出窗口的字体大小和粗细\n          .itemSize(28) // 设置字母索引器中每个字母的大小\n          .alignStyle(IndexerAlign.Left) // 设置字母索引器对齐方式为左侧对齐\n          .popupItemBorderRadius(24) // 设置弹出窗口中每个项目的边框圆角\n          .itemBorderRadius(14) // 设置字母索引器中每个字母的边框圆角\n          .popupBackgroundBlurStyle(BlurStyle.NONE) // 设置弹出窗口背景无模糊效果\n          .popupTitleBackground(0xCCCCCC) // 设置弹出窗口标题背景颜色为灰色\n          .popupSelectedColor(0x00FF00) // 设置弹出窗口中选中项目的颜色为绿色\n          .popupUnselectedColor(0x0000FF) // 设置弹出窗口中未选中项目的颜色为蓝色\n          .popupItemFont({ size: 30, style: FontStyle.Normal }) // 设置弹出窗口中每个项目的字体大小和样式\n          .popupItemBackgroundColor(0xCCCCCC) // 设置弹出窗口中每个项目的背景颜色为灰色\n          .onSelect((index: number) => {\n            console.info(this.value[index] + ' Selected!') // 当用户点击字母索引器中的字母时，输出选中的字母\n          })\n          .onRequestPopupData((index: number) => {\n            if (this.value[index] == 'A') {\n              return this.arrayA // 当用户点击字母'A'时，返回arrayA数组\n            } else if (this.value[index] == 'B') {\n              return this.arrayB // 当用户点击字母'B'时，返回arrayB数组\n            } else if (this.value[index] == 'C') {\n              return this.arrayC // 当用户点击字母'C'时，返回arrayC数组\n            } else if (this.value[index] == 'L') {\n              return this.arrayL // 当用户点击字母'L'时，返回arrayL数组\n            } else {\n              return [] // 当用户点击其他字母时，返回空数组\n            }\n          })\n          .onPopupSelect((index: number) => {\n            console.info('onPopupSelected:' + index) // 当用户在弹出窗口中选择某个项目时，输出选中的项目索引\n          })\n      }\n      .width('100%') // 设置Row布局宽度为100%\n      .height('100%') // 设置Row布局高度为100%\n    }\n  }\n}"
        },
        {
            "description": "该组件通过 Stack 和 Row 布局实现了一个包含字母索引和列表展示的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为两个主要部分：左侧是一个列表展示区，右侧是一个字母索引区。\n\n左侧的列表展示区通过 List 组件实现，列表项通过 ForEach 循环动态生成，每个列表项包含一个 Text 组件，用于显示汉字。列表项的宽度为 80%，高度为 5%，字体大小为 30，文本居中对齐。列表的宽度为 50%，高度为 100%。\n\n右侧的字母索引区通过 AlphabetIndexer 组件实现，字母索引条的高度为 75%，可以通过按钮动态调整。字母索引条的样式包括选中颜色、弹出颜色、选中背景颜色、弹出背景颜色、弹出字体样式、弹出项字体样式等。字母索引条的功能包括点击事件、弹出数据请求事件和弹出项选中事件。用户可以通过点击字母索引条触发相应操作，字母索引条也可以在折叠模式下进行展示。\n\n底部通过 Column 布局实现了一个按钮区，包含三个按钮，分别用于切换折叠模式和调整字母索引条的高度。按钮的样式包括边距和点击事件。\n\n整个布局通过 Stack 和 Row 布局保证列表和字母索引在水平方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct AlphabetIndexerSample {\n  private arrayA: string[] = ['安']\n  private arrayB: string[] = ['卜', '白', '包', '毕', '丙']\n  private arrayC: string[] = ['曹', '成', '陈', '催']\n  private arrayJ: string[] = ['嘉', '贾']\n  private value: string[] = ['#', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n    'H', 'I', 'J', 'K', 'L', 'M', 'N',\n    'O', 'P', 'Q', 'R', 'S', 'T', 'U',\n    'V', 'W', 'X', 'Y', 'Z']\n  @State isNeedAutoCollapse: boolean = false;\n  @State indexerHeight: string = '75%';\n\n  build() {\n    Stack({ alignContent: Alignment.Start }) {\n      Row() {\n        List({ space: 20, initialIndex: 0 }) {\n          ForEach(this.arrayA, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%') // 设置文本宽度为 80%\n                .height('5%') // 设置文本高度为 5%\n                .fontSize(30) // 设置字体大小为 30\n                .textAlign(TextAlign.Center) // 设置文本居中对齐\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayB, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayC, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayJ, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n        }\n        .width('50%') // 设置列表宽度为 50%\n        .height('100%') // 设置列表高度为 100%\n\n        Column() {\n          Column() {\n            AlphabetIndexer({ arrayValue: this.value, selected: 0 })\n              .autoCollapse(this.isNeedAutoCollapse) // 设置是否自动折叠\n              .height(this.indexerHeight) // 设置字母索引条高度\n              .selectedColor(0xFFFFFF) // 设置选中颜色\n              .popupColor(0xFFFAF0) // 设置弹出颜色\n              .selectedBackgroundColor(0xCCCCCC) // 设置选中背景颜色\n              .popupBackground(0xD2B48C) // 设置弹出背景颜色\n              .usingPopup(true) // 设置是否使用弹出\n              .selectedFont({ size: 16, weight: FontWeight.Bolder }) // 设置选中字体样式\n              .popupFont({ size: 30, weight: FontWeight.Bolder }) // 设置弹出字体样式\n              .itemSize(28) // 设置项大小\n              .alignStyle(IndexerAlign.Right) // 设置对齐方式\n              .popupTitleBackground(\"#D2B48C\") // 设置弹出标题背景颜色\n              .popupSelectedColor(0x00FF00) // 设置弹出选中颜色\n              .popupUnselectedColor(0x0000FF) // 设置弹出未选中颜色\n              .popupItemFont({ size: 30, style: FontStyle.Normal }) // 设置弹出项字体样式\n              .popupItemBackgroundColor(0xCCCCCC) // 设置弹出项背景颜色\n              .onSelect((index: number) => {\n                console.info(this.value[index] + ' Selected!'); // 选中事件\n              })\n              .onRequestPopupData((index: number) => {\n                if (this.value[index] == 'A') {\n                  return this.arrayA; // 请求弹出数据\n                } else if (this.value[index] == 'B') {\n                  return this.arrayB;\n                } else if (this.value[index] == 'C') {\n                  return this.arrayC;\n                } else if (this.value[index] == 'J') {\n                  return this.arrayJ;\n                } else {\n                  return [];\n                }\n              })\n              .onPopupSelect((index: number) => {\n                console.info('onPopupSelected:' + index); // 弹出项选中事件\n              })\n          }\n          .height('80%') // 设置字母索引条高度为 80%\n          .justifyContent(FlexAlign.Center) // 设置内容居中对齐\n\n          Column() {\n            Button('切换成折叠模式')\n              .margin('5vp') // 设置按钮边距\n              .onClick(() => {\n                this.isNeedAutoCollapse = true; // 切换成折叠模式\n              })\n            Button('切换索引条高度到30%')\n              .margin('5vp')\n              .onClick(() => {\n                this.indexerHeight = '30%'; // 切换索引条高度到 30%\n              })\n            Button('切换索引条高度到70%')\n              .margin('5vp')\n              .onClick(() => {\n                this.indexerHeight = '70%'; // 切换索引条高度到 70%\n              })\n          }.height('20%') // 设置按钮区高度为 20%\n        }\n        .width('50%') // 设置右侧区域宽度为 50%\n        .justifyContent(FlexAlign.Center) // 设置内容居中对齐\n      }\n      .width('100%') // 设置整体宽度为 100%\n      .height('100%') // 设置整体高度为 100%\n    }\n  }\n}"
        }
    ],
    "is_common_attrs": true
}