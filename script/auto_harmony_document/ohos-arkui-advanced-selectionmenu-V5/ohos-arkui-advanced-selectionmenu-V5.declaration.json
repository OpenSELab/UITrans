{
    "description": "文本选择菜单，适用于富文本组件通过bindSelectionMenu绑定自定义文本选择菜单，建议绑定鼠标右键或者鼠标选中方式弹出，不支持作为普通组件单独使用。",
    "details": "该组件从API Version 11开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
    "interfaces": [
        {
            "description": "SelectionMenu(options: SelectionMenuOptions)",
            "params": {
                "options": {
                    "type": "SelectionMenuOptions",
                    "description": "SelectionMenu的可选菜单类型项及其具体配置参数。"
                }
            }
        }
    ],
    "attributes": {
        "editorMenuOptions": {
            "description": "编辑菜单。",
            "params": {
                "value": {
                    "type": "Array<EditorMenuOptions>",
                    "description": "编辑菜单选项。"
                }
            }
        },
        "expandedMenuOptions": {
            "description": "扩展下拉菜单。",
            "params": {
                "value": {
                    "type": "Array<ExpandedMenuOptions>",
                    "description": "扩展下拉菜单选项。"
                }
            }
        },
        "controller": {
            "description": "富文本控制器。",
            "params": {
                "value": {
                    "type": "RichEditorController",
                    "description": "富文本控制器。"
                }
            }
        }
    },
    "events": {
        "onCopy": {
            "description": "替代内置系统菜单复制项的事件回调。",
            "params": {
                "event": {
                    "type": "EditorEventInfo",
                    "description": "返回信息。"
                }
            }
        },
        "onPaste": {
            "description": "替代内置系统菜单粘贴项的事件回调。",
            "params": {
                "event": {
                    "type": "EditorEventInfo",
                    "description": "返回信息。"
                }
            }
        },
        "onCut": {
            "description": "替代内置系统菜单剪切项的事件回调。",
            "params": {
                "event": {
                    "type": "EditorEventInfo",
                    "description": "返回信息。"
                }
            }
        },
        "onSelectAll": {
            "description": "替代内置系统菜单全选项的事件回调。",
            "params": {
                "event": {
                    "type": "EditorEventInfo",
                    "description": "返回信息。"
                }
            }
        }
    },
    "rules": [
        "点击自定义文本选择菜单内置复制功能选项后，自定义菜单消失选中文本高亮保留。",
        "点击自定义文本选择菜单内置全选功能选项后，自定义菜单消失文本全选高亮。",
        "点击自定义文本选择菜单内置粘贴功能选项后，空白处粘贴或者选中文本替换粘贴均是保留被复制文本的样式。",
        "当富文本组件RichEditor的copyOptions属性设置为CopyOptions.None时，内置的复制剪切功能不会被限制。"
    ],
    "examples": [
        {
            "description": "该示例展示了如何在鸿蒙ArkUI中使用RichEditor组件实现一个富文本编辑器，并结合SelectionMenu组件提供丰富的文本编辑功能。布局上，整个界面由一个Column组件包裹，包含一个Button组件和一个RichEditor组件。Button组件用于设置文本选择范围，RichEditor组件用于显示和编辑富文本内容。RichEditor组件内部绑定了多个SelectionMenu组件，用于提供不同的文本编辑操作菜单。\n\n样式上，RichEditor组件设置了红色边框，宽度为200vp，高度为200vp。SelectionMenu组件的宽度为256vp，背景颜色为透明。SliderPanel组件用于调整文本大小，包含一个Slider组件和一个Flex布局，Slider组件的宽度为210vp，Flex布局的子元素包括两个Text组件和一个Slider组件，分别用于显示文本大小和调整文本大小。\n\n功能上，Button组件点击后会设置RichEditor的文本选择范围。RichEditor组件在准备好后会添加两段不同样式的文本，并在文本选择变化时更新选择范围的状态。RichEditor组件绑定了三个不同的SelectionMenu组件，分别在右键点击、文本选择和默认情况下显示不同的编辑菜单。编辑菜单提供了加粗、斜体、下划线、文本颜色和文本大小调整等功能。",
            "code": "import { SelectionMenu, EditorMenuOptions, ExpandedMenuOptions, EditorEventInfo, SelectionMenuOptions } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct Index {\n  @State select: boolean = true\n  controller: RichEditorController = new RichEditorController();\n  options: RichEditorOptions = { controller: this.controller }\n  @State message: string = 'Hello word'\n  @State textSize: number = 30\n  @State fontWeight: FontWeight = FontWeight.Normal\n  @State start: number = -1\n  @State end: number = -1\n  @State visibleValue: Visibility = Visibility.Visible\n  @State colorTransparent: Color = Color.Transparent\n  @State textStyle: RichEditorTextStyle = {}\n  private editorMenuOptions: Array<EditorMenuOptions> =\n    [\n      { icon: $r(\"app.media.ic_notepad_textbold\"), action: () => {\n        if (this.controller) {\n          let selection = this.controller.getSelection();\n          let spans = selection.spans\n          spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n            if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n              let span = item as RichEditorTextSpanResult\n              this.textStyle = span.textStyle\n              let start = span.offsetInSpan[0]\n              let end = span.offsetInSpan[1]\n              let offset = span.spanPosition.spanRange[0]\n              if (this.textStyle.fontWeight != 11) {\n                this.textStyle.fontWeight = FontWeight.Bolder\n              } else {\n                this.textStyle.fontWeight = FontWeight.Normal\n              }\n              this.controller.updateSpanStyle({\n                start: offset + start,\n                end: offset + end,\n                textStyle: this.textStyle\n              })\n            }\n          })\n        }\n      } },\n      { icon: $r(\"app.media.ic_notepad_texttilt\"), action: () => {\n        if (this.controller) {\n          let selection = this.controller.getSelection();\n          let spans = selection.spans\n          spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n            if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n              let span = item as RichEditorTextSpanResult\n              this.textStyle = span.textStyle\n              let start = span.offsetInSpan[0]\n              let end = span.offsetInSpan[1]\n              let offset = span.spanPosition.spanRange[0]\n              if (this.textStyle.fontStyle == FontStyle.Italic) {\n                this.textStyle.fontStyle = FontStyle.Normal\n              } else {\n                this.textStyle.fontStyle = FontStyle.Italic\n              }\n              this.controller.updateSpanStyle({\n                start: offset + start,\n                end: offset + end,\n                textStyle: this.textStyle\n              })\n            }\n          })\n        }\n      } },\n      { icon: $r(\"app.media.ic_notepad_underline\"),\n        action: () => {\n          if (this.controller) {\n            let selection = this.controller.getSelection();\n            let spans = selection.spans\n            spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n              if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n                let span = item as RichEditorTextSpanResult\n                this.textStyle = span.textStyle\n                let start = span.offsetInSpan[0]\n                let end = span.offsetInSpan[1]\n                let offset = span.spanPosition.spanRange[0]\n                if (this.textStyle.decoration) {\n                  if (this.textStyle.decoration.type == TextDecorationType.Underline) {\n                    this.textStyle.decoration.type = TextDecorationType.None\n                  } else {\n                    this.textStyle.decoration.type = TextDecorationType.Underline\n                  }\n                } else {\n                  this.textStyle.decoration = { type: TextDecorationType.Underline, color: Color.Black }\n                }\n                this.controller.updateSpanStyle({\n                  start: offset + start,\n                  end: offset + end,\n                  textStyle: this.textStyle\n                })\n              }\n            })\n          }\n        }\n      },\n      { icon: $r(\"app.media.app_icon\"), action: () => {\n      }, builder: (): void => this.sliderPanel() },\n      { icon: $r(\"app.media.ic_notepad_textcolor\"), action: () => {\n        if (this.controller) {\n          let selection = this.controller.getSelection();\n          let spans = selection.spans\n          spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n            if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n              let span = item as RichEditorTextSpanResult\n              this.textStyle = span.textStyle\n              let start = span.offsetInSpan[0]\n              let end = span.offsetInSpan[1]\n              let offset = span.spanPosition.spanRange[0]\n              if (this.textStyle.fontColor == Color.Orange || this.textStyle.fontColor == '#FFFFA500') {\n                this.textStyle.fontColor = Color.Black\n              } else {\n                this.textStyle.fontColor = Color.Orange\n              }\n              this.controller.updateSpanStyle({\n                start: offset + start,\n                end: offset + end,\n                textStyle: this.textStyle\n              })\n            }\n          })\n        }\n      } }]\n  private expandedMenuOptions: Array<ExpandedMenuOptions> =\n    [{ startIcon: $r(\"app.media.icon\"), content: '词典', action: () => {\n    } }, { startIcon: $r(\"app.media.icon\"), content: '翻译', action: () => {\n    } }, { startIcon: $r(\"app.media.icon\"), content: '搜索', action: () => {\n    } }]\n  private expandedMenuOptions1: Array<ExpandedMenuOptions> = []\n  private editorMenuOptions1: Array<EditorMenuOptions> = []\n  private selectionMenuOptions: SelectionMenuOptions = {\n    editorMenuOptions: this.editorMenuOptions,\n    expandedMenuOptions: this.expandedMenuOptions,\n    controller: this.controller,\n    onCut: (event?: EditorEventInfo) => {\n      if (event && event.content) {\n        event.content.spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n          if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n            let span = item as RichEditorTextSpanResult\n            console.info('test cut' + span.value)\n            console.info('test start ' + span.offsetInSpan[0] + ' end: ' + span.offsetInSpan[1])\n          }\n        })\n      }\n    },\n    onPaste: (event?: EditorEventInfo) => {\n      if (event && event.content) {\n        event.content.spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n          if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n            let span = item as RichEditorTextSpanResult\n            console.info('test onPaste' + span.value)\n            console.info('test start ' + span.offsetInSpan[0] + ' end: ' + span.offsetInSpan[1])\n          }\n        })\n      }\n    },\n    onCopy: (event?: EditorEventInfo) => {\n      if (event && event.content) {\n        event.content.spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n          if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n            let span = item as RichEditorTextSpanResult\n            console.info('test cut' + span.value)\n            console.info('test start ' + span.offsetInSpan[0] + ' end: ' + span.offsetInSpan[1])\n          }\n        })\n      }\n    },\n    onSelectAll: (event?: EditorEventInfo) => {\n      if (event && event.content) {\n        event.content.spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n          if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n            let span = item as RichEditorTextSpanResult\n            console.info('test onPaste' + span.value)\n            console.info('test start ' + span.offsetInSpan[0] + ' end: ' + span.offsetInSpan[1])\n          }\n        })\n      }\n    }\n  }\n\n  @Builder sliderPanel() {\n    Column() {\n      Flex({ justifyContent: FlexAlign.SpaceBetween, alignItems: ItemAlign.Center }) {\n        Text('A').fontSize(15)\n        Slider({ value: this.textSize, step: 10, style: SliderStyle.InSet })\n          .width(210)\n          .onChange((value: number, mode: SliderChangeMode) => {\n            if (this.controller) {\n              let selection = this.controller.getSelection();\n              if (mode == SliderChangeMode.End) {\n                if (this.textSize == undefined) {\n                  this.textSize = 0\n                }\n                let spans = selection.spans\n                spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n                  if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n                    this.textSize = Math.max(this.textSize, (item as RichEditorTextSpanResult).textStyle.fontSize)\n                  }\n                })\n              }\n              if (mode == SliderChangeMode.Moving || mode == SliderChangeMode.Click) {\n                this.start = selection.selection[0]\n                this.end = selection.selection[1]\n                this.textSize = value\n                this.controller.updateSpanStyle({\n                  start: this.start,\n                  end: this.end,\n                  textStyle: { fontSize: this.textSize }\n                })\n              }\n            }\n          })\n        Text('A').fontSize(20).fontWeight(FontWeight.Medium)\n      }.borderRadius($r('sys.float.ohos_id_corner_radius_card'))\n    }\n    .shadow(ShadowStyle.OUTER_DEFAULT_MD)\n    .backgroundColor(Color.White)\n    .borderRadius($r('sys.float.ohos_id_corner_radius_card'))\n    .padding(15)\n    .height(48)\n  }\n\n  @Builder\n  MyMenu() {\n    Column() {\n      SelectionMenu(this.selectionMenuOptions)\n    }\n    .width(256)\n    .backgroundColor(Color.Transparent)\n  }\n\n  @Builder\n  MyMenu2() {\n    Column() {\n      SelectionMenu({\n        editorMenuOptions: this.editorMenuOptions,\n        expandedMenuOptions: this.expandedMenuOptions1,\n        controller: this.controller,\n      })\n    }\n    .width(256)\n    .backgroundColor(Color.Transparent)\n  }\n\n  @Builder\n  MyMenu3() {\n    Column() {\n      SelectionMenu({\n        editorMenuOptions: this.editorMenuOptions1,\n        expandedMenuOptions: this.expandedMenuOptions,\n        controller: this.controller,\n      })\n    }\n    .width(256)\n    .backgroundColor(Color.Transparent)\n  }\n\n  build() {\n    Column() {\n      Button(\"SetSelection\")\n        .onClick((event: ClickEvent) => {\n          if (this.controller) {\n            this.controller.setSelection(0, 2)\n          }\n        })\n\n      RichEditor(this.options)\n        .onReady(() => {\n          this.controller.addTextSpan(this.message, { style: { fontColor: Color.Orange, fontSize: 30 } })\n          this.controller.addTextSpan(this.message, { style: { fontColor: Color.Black, fontSize: 25 } })\n        })\n        .onSelect((value: RichEditorSelection) => {\n          if (value.selection[0] == -1 && value.selection[1] == -1) {\n            return\n          }\n          this.start = value.selection[0]\n          this.end = value.selection[1]\n        })\n        .bindSelectionMenu(RichEditorSpanType.TEXT, this.MyMenu3(), RichEditorResponseType.RIGHT_CLICK)\n        .bindSelectionMenu(RichEditorSpanType.TEXT, this.MyMenu2(), RichEditorResponseType.SELECT)\n        .borderWidth(1)\n        .borderColor(Color.Red)\n        .width(200)\n        .height(200)\n    }\n  }\n}"
        }
    ],
    "is_common_attrs": false
}