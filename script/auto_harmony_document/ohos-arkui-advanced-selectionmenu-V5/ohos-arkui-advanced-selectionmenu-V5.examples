/*\n实现一个富文本编辑器组件，支持文本样式编辑（如加粗、斜体、下划线、字体颜色、字体大小）、剪切、复制、粘贴、全选等功能。\n编辑器支持右键菜单和选择菜单，用户可以通过菜单项对选中的文本进行样式修改。\n*/\n\nimport { SelectionMenu, EditorMenuOptions, ExpandedMenuOptions, EditorEventInfo, SelectionMenuOptions } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct Index {\n  // 控制编辑器的选择状态，true表示有选择，false表示无选择\n  @State select: boolean = true\n  \n  // 创建一个RichEditorController实例，用于控制编辑器的行为\n  controller: RichEditorController = new RichEditorController();\n  \n  // 配置RichEditor的选项，包括控制器\n  options: RichEditorOptions = { controller: this.controller }\n  \n  // 初始文本内容\n  @State message: string = 'Hello word'\n  \n  // 初始文本大小\n  @State textSize: number = 30\n  \n  // 初始字体粗细\n  @State fontWeight: FontWeight = FontWeight.Normal\n  \n  // 选择范围的起始位置，初始为-1表示未选择\n  @State start: number = -1\n  \n  // 选择范围的结束位置，初始为-1表示未选择\n  @State end: number = -1\n  \n  // 控制组件的可见性，初始为可见\n  @State visibleValue: Visibility = Visibility.Visible\n  \n  // 颜色透明度，初始为透明\n  @State colorTransparent: Color = Color.Transparent\n  \n  // 文本样式，初始为空对象\n  @State textStyle: RichEditorTextStyle = {}\n  \n  // 编辑器菜单选项，包含多个菜单项，每个菜单项有图标和对应的action\n  private editorMenuOptions: Array<EditorMenuOptions> =\n    [\n      { \n        icon: $r(\"app.media.ic_notepad_textbold\"), \n        action: () => {\n          if (this.controller) {\n            let selection = this.controller.getSelection();\n            let spans = selection.spans\n            spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n              if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n                let span = item as RichEditorTextSpanResult\n                this.textStyle = span.textStyle\n                let start = span.offsetInSpan[0]\n                let end = span.offsetInSpan[1]\n                let offset = span.spanPosition.spanRange[0]\n                if (this.textStyle.fontWeight != 11) {\n                  this.textStyle.fontWeight = FontWeight.Bolder\n                } else {\n                  this.textStyle.fontWeight = FontWeight.Normal\n                }\n                this.controller.updateSpanStyle({\n                  start: offset + start,\n                  end: offset + end,\n                  textStyle: this.textStyle\n                })\n              }\n            })\n          }\n        } \n      },\n      { \n        icon: $r(\"app.media.ic_notepad_texttilt\"), \n        action: () => {\n          if (this.controller) {\n            let selection = this.controller.getSelection();\n            let spans = selection.spans\n            spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n              if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n                let span = item as RichEditorTextSpanResult\n                this.textStyle = span.textStyle\n                let start = span.offsetInSpan[0]\n                let end = span.offsetInSpan[1]\n                let offset = span.spanPosition.spanRange[0]\n                if (this.textStyle.fontStyle == FontStyle.Italic) {\n                  this.textStyle.fontStyle = FontStyle.Normal\n                } else {\n                  this.textStyle.fontStyle = FontStyle.Italic\n                }\n                this.controller.updateSpanStyle({\n                  start: offset + start,\n                  end: offset + end,\n                  textStyle: this.textStyle\n                })\n              }\n            })\n          }\n        } \n      },\n      { \n        icon: $r(\"app.media.ic_notepad_underline\"),\n        action: () => {\n          if (this.controller) {\n            let selection = this.controller.getSelection();\n            let spans = selection.spans\n            spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n              if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n                let span = item as RichEditorTextSpanResult\n                this.textStyle = span.textStyle\n                let start = span.offsetInSpan[0]\n                let end = span.offsetInSpan[1]\n                let offset = span.spanPosition.spanRange[0]\n                if (this.textStyle.decoration) {\n                  if (this.textStyle.decoration.type == TextDecorationType.Underline) {\n                    this.textStyle.decoration.type = TextDecorationType.None\n                  } else {\n                    this.textStyle.decoration.type = TextDecorationType.Underline\n                  }\n                } else {\n                  this.textStyle.decoration = { type: TextDecorationType.Underline, color: Color.Black }\n                }\n                this.controller.updateSpanStyle({\n                  start: offset + start,\n                  end: offset + end,\n                  textStyle: this.textStyle\n                })\n              }\n            })\n          }\n        }\n      },\n      { \n        icon: $r(\"app.media.app_icon\"), \n        action: () => {\n        }, \n        builder: (): void => this.sliderPanel() \n      },\n      { \n        icon: $r(\"app.media.ic_notepad_textcolor\"), \n        action: () => {\n          if (this.controller) {\n            let selection = this.controller.getSelection();\n            let spans = selection.spans\n            spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n              if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n                let span = item as RichEditorTextSpanResult\n                this.textStyle = span.textStyle\n                let start = span.offsetInSpan[0]\n                let end = span.offsetInSpan[1]\n                let offset = span.spanPosition.spanRange[0]\n                if (this.textStyle.fontColor == Color.Orange || this.textStyle.fontColor == '#FFFFA500') {\n                  this.textStyle.fontColor = Color.Black\n                } else {\n                  this.textStyle.fontColor = Color.Orange\n                }\n                this.controller.updateSpanStyle({\n                  start: offset + start,\n                  end: offset + end,\n                  textStyle: this.textStyle\n                })\n              }\n            })\n          }\n        } \n      }\n    ]\n  \n  // 扩展菜单选项，包含多个菜单项，每个菜单项有图标、内容和对应的action\n  private expandedMenuOptions: Array<ExpandedMenuOptions> =\n    [\n      { startIcon: $r(\"app.media.icon\"), content: '词典', action: () => { } },\n      { startIcon: $r(\"app.media.icon\"), content: '翻译', action: () => { } },\n      { startIcon: $r(\"app.media.icon\"), content: '搜索', action: () => { } }\n    ]\n  \n  // 另一个扩展菜单选项，初始为空数组\n  private expandedMenuOptions1: Array<ExpandedMenuOptions> = []\n  \n  // 另一个编辑器菜单选项，初始为空数组\n  private editorMenuOptions1: Array<EditorMenuOptions> = []\n  \n  // 选择菜单选项，包含编辑器菜单选项、扩展菜单选项、控制器以及剪切、复制、粘贴、全选的回调函数\n  private selectionMenuOptions: SelectionMenuOptions = {\n    editorMenuOptions: this.editorMenuOptions,\n    expandedMenuOptions: this.expandedMenuOptions,\n    controller: this.controller,\n    onCut: (event?: EditorEventInfo) => {\n      if (event && event.content) {\n        event.content.spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n          if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n            let span = item as RichEditorTextSpanResult\n            console.info('test cut' + span.value)\n            console.info('test start ' + span.offsetInSpan[0] + ' end: ' + span.offsetInSpan[1])\n          }\n        })\n      }\n    },\n    onPaste: (event?: EditorEventInfo) => {\n      if (event && event.content) {\n        event.content.spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n          if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n            let span = item as RichEditorTextSpanResult\n            console.info('test onPaste' + span.value)\n            console.info('test start ' + span.offsetInSpan[0] + ' end: ' + span.offsetInSpan[1])\n          }\n        })\n      }\n    },\n    onCopy: (event?: EditorEventInfo) => {\n      if (event && event.content) {\n        event.content.spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n          if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n            let span = item as RichEditorTextSpanResult\n            console.info('test cut' + span.value)\n            console.info('test start ' + span.offsetInSpan[0] + ' end: ' + span.offsetInSpan[1])\n          }\n        })\n      }\n    },\n    onSelectAll: (event?: EditorEventInfo) => {\n      if (event && event.content) {\n        event.content.spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n          if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n            let span = item as RichEditorTextSpanResult\n            console.info('test onPaste' + span.value)\n            console.info('test start ' + span.offsetInSpan[0] + ' end: ' + span.offsetInSpan[1])\n          }\n        })\n      }\n    }\n  }\n\n  // 创建一个滑块面板，用于调整文本大小\n  @Builder sliderPanel() {\n    Column() {\n      Flex({ justifyContent: FlexAlign.SpaceBetween, alignItems: ItemAlign.Center }) {\n        Text('A').fontSize(15)\n        Slider({ value: this.textSize, step: 10, style: SliderStyle.InSet })\n          .width(210)\n          .onChange((value: number, mode: SliderChangeMode) => {\n            if (this.controller) {\n              let selection = this.controller.getSelection();\n              if (mode == SliderChangeMode.End) {\n                if (this.textSize == undefined) {\n                  this.textSize = 0\n                }\n                let spans = selection.spans\n                spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n                  if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n                    this.textSize = Math.max(this.textSize, (item as RichEditorTextSpanResult).textStyle.fontSize)\n                  }\n                })\n              }\n              if (mode == SliderChangeMode.Moving || mode == SliderChangeMode.Click) {\n                this.start = selection.selection[0]\n                this.end = selection.selection[1]\n                this.textSize = value\n                this.controller.updateSpanStyle({\n                  start: this.start,\n                  end: this.end,\n                  textStyle: { fontSize: this.textSize }\n                })\n              }\n            }\n          })\n        Text('A').fontSize(20).fontWeight(FontWeight.Medium)\n      }.borderRadius($r('sys.float.ohos_id_corner_radius_card'))\n    }\n    .shadow(ShadowStyle.OUTER_DEFAULT_MD)\n    .backgroundColor(Color.White)\n    .borderRadius($r('sys.float.ohos_id_corner_radius_card'))\n    .padding(15)\n    .height(48)\n  }\n\n  // 创建一个菜单组件，包含选择菜单选项\n  @Builder\n  MyMenu() {\n    Column() {\n      SelectionMenu(this.selectionMenuOptions)\n    }\n    .width(256)\n    .backgroundColor(Color.Transparent)\n  }\n\n  // 创建另一个菜单组件，包含编辑器菜单选项和空的扩展菜单选项\n  @Builder\n  MyMenu2() {\n    Column() {\n      SelectionMenu({\n        editorMenuOptions: this.editorMenuOptions,\n        expandedMenuOptions: this.expandedMenuOptions1,\n        controller: this.controller,\n      })\n    }\n    .width(256)\n    .backgroundColor(Color.Transparent)\n  }\n\n  // 创建另一个菜单组件，包含空的编辑器菜单选项和扩展菜单选项\n  @Builder\n  MyMenu3() {\n    Column() {\n      SelectionMenu({\n        editorMenuOptions: this.editorMenuOptions1,\n        expandedMenuOptions: this.expandedMenuOptions,\n        controller: this.controller,\n      })\n    }\n    .width(256)\n    .backgroundColor(Color.Transparent)\n  }\n\n  // 构建主界面，包含一个按钮和一个富文本编辑器\n  build() {\n    Column() {\n      Button(\"SetSelection\")\n        .onClick((event: ClickEvent) => {\n          if (this.controller) {\n            this.controller.setSelection(0, 2)\n          }\n        })\n\n      RichEditor(this.options)\n        .onReady(() => {\n          this.controller.addTextSpan(this.message, { style: { fontColor: Color.Orange, fontSize: 30 } })\n          this.controller.addTextSpan(this.message, { style: { fontColor: Color.Black, fontSize: 25 } })\n        })\n        .onSelect((value: RichEditorSelection) => {\n          if (value.selection[0] == -1 && value.selection[1] == -1) {\n            return\n          }\n          this.start = value.selection[0]\n          this.end = value.selection[1]\n        })\n        .bindSelectionMenu(RichEditorSpanType.TEXT, this.MyMenu3(), RichEditorResponseType.RIGHT_CLICK)\n        .bindSelectionMenu(RichEditorSpanType.TEXT, this.MyMenu2(), RichEditorResponseType.SELECT)\n        .borderWidth(1)\n        .borderColor(Color.Red)\n        .width(200)\n        .height(200)\n    }\n  }\n}