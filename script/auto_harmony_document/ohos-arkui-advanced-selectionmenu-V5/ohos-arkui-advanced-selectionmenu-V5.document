Title: SelectionMenu-文本与输入-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-arkui-advanced-selectionmenu-V5

Markdown Content:
文本选择菜单，适用于富文本组件通过[bindSelectionMenu](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#%E5%B1%9E%E6%80%A7)绑定自定义文本选择菜单，建议绑定鼠标右键或者鼠标选中方式弹出，不支持作为普通组件单独使用。

说明

该组件从API Version 11开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

导入模块
----

1.  import { SelectionMenu, EditorMenuOptions, ExpandedMenuOptions, EditorEventInfo, SelectionMenuOptions } from '@kit.ArkUI'

SelectionMenu(options: SelectionMenuOptions)

入参为空时，文本选择菜单组件SelectionMenu内容区大小及组件大小为零。表现例如，富文本组件[RichEditor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5)使用[bindSelectionMenu](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#%E5%B1%9E%E6%80%A7)接口绑定一个SelectionMenu的右键菜单，则右键富文本组件区域时无任何菜单弹出。

**装饰器类型：**@Builder

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

SelectionMenuOptions定义SelectionMenu的可选菜单类型项及其具体配置参数。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

参数类型

必填

说明

editorMenuOptions

Array<[EditorMenuOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-arkui-advanced-selectionmenu-V5#editormenuoptions)\>

否

编辑菜单。

editorMenuOptions未配置时，不显示编辑菜单。

同时配置EditorMenuOptions中action和builder时，点击图标会同时响应。

点击编辑菜单图标默认不关闭整个菜单，应用可以通过action接口配置RichEditorController的closeSelectionMenu主动关闭菜单。

expandedMenuOptions

Array<[ExpandedMenuOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-arkui-advanced-selectionmenu-V5#expandedmenuoptions)\>

否

扩展下拉菜单。

expandedMenuOptions参数为空时无更多按钮，不显示扩展下拉菜单。

expandedMenuOptions参数不为空时显示更多按钮，配置菜单项收起在更多按钮中，点击更多按钮展示。

controller

[RichEditorController](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorcontroller)

否

富文本控制器不为空时显示默认系统菜单（包含剪切复制粘贴等部分）且默认菜单功能内置。

controller为空时不显示更多按钮，expandedMenuOptions参数不为空则显示下拉菜单中。

系统默认只支持复制粘贴富文本文本内容，图文混排需要应用自定义onCopy、onPaste接口。应用自行配置onCopy | onPaste接口时，系统菜单默认复制粘贴失效，调用应用自定义函数。

**说明：**

点击自定义文本选择菜单内置复制功能选项后，自定义菜单消失选中文本高亮保留。

点击自定义文本选择菜单内置全选功能选项后，自定义菜单消失文本全选高亮。

点击自定义文本选择菜单内置粘贴功能选项后，空白处粘贴或者选中文本替换粘贴均是保留被复制文本的样式。

当富文本组件[RichEditor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5)的copyOptions属性设置为CopyOptions.None时，内置的复制剪切功能不会被限制。

onCopy

(event?: [EditorEventInfo](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-arkui-advanced-selectionmenu-V5#editoreventinfo)) =\> void

否

替代内置系统菜单复制项的事件回调。

生效前提是一定要有controller参数，有系统默认菜单才能替换内置复制功能。

**说明：**

event为返回信息。

onPaste

(event?: [EditorEventInfo](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-arkui-advanced-selectionmenu-V5#editoreventinfo)) =\> void

否

替代内置系统菜单粘贴项的事件回调。

生效前提是一定要有controller参数，有系统默认菜单才能替换内置粘贴功能。

**说明：**

event为返回信息。

onCut

(event?: [EditorEventInfo](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-arkui-advanced-selectionmenu-V5#editoreventinfo)) =\> void

否

替代内置系统菜单剪切项的事件回调。

生效前提是一定要有controller参数，有系统默认菜单才能替换内置剪切功能。

**说明：**

event为返回信息。

onSelectAll

(event?: [EditorEventInfo](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-arkui-advanced-selectionmenu-V5#editoreventinfo)) =\> void

否

替代内置系统菜单全选项的事件回调。

生效前提是一定要有controller参数，有系统默认菜单才能替换内置全选功能。

**说明：**

event为返回信息。

编辑菜单选项。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

icon

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

是

图标资源。

builder

() =\> void

否

点击时显示用户自定义组件，自定义组件在构造时结合@Builder使用。

action

() =\> void

否

点击菜单项的事件回调。

ExpandedMenuOptions
-------------------

扩展下拉菜单。

继承于[MenuItemOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-menuitem-V5#menuitemoptions%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

action

() =\> void

否

点击菜单项的事件回调。

EditorEventInfo
---------------

选中内容信息。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

属性
--

不支持[通用属性](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-size-V5)，宽度默认256vp， 高度自适应内容。

示例
--

1.  import { SelectionMenu, EditorMenuOptions, ExpandedMenuOptions, EditorEventInfo, SelectionMenuOptions } from '@kit.ArkUI'

3.  @Entry
4.  @Component
5.  struct Index {
6.    @State select: boolean = true
7.    controller: RichEditorController = new RichEditorController();
8.    options: RichEditorOptions = { controller: this.controller }
9.    @State message: string = 'Hello word'
10.    @State textSize: number = 30
11.    @State fontWeight: FontWeight = FontWeight.Normal
12.    @State start: number = -1
13.    @State end: number = -1
14.    @State visibleValue: Visibility = Visibility.Visible
15.    @State colorTransparent: Color = Color.Transparent
16.    @State textStyle: RichEditorTextStyle = {}
17.    private editorMenuOptions: Array<EditorMenuOptions\> =
18.      \[
19.        { icon: $r("app.media.ic\_notepad\_textbold"), action: () =\> {
20.          if (this.controller) {
21.            let selection = this.controller.getSelection();
22.            let spans = selection.spans
23.            spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) =\> {
24.              if (typeof (item as RichEditorTextSpanResult)\['textStyle'\] != 'undefined') {
25.                let span = item as RichEditorTextSpanResult
26.                this.textStyle = span.textStyle
27.                let start = span.offsetInSpan\[0\]
28.                let end = span.offsetInSpan\[1\]
29.                let offset = span.spanPosition.spanRange\[0\]
30.                if (this.textStyle.fontWeight != 11) {
31.                  this.textStyle.fontWeight = FontWeight.Bolder
32.                } else {
33.                  this.textStyle.fontWeight = FontWeight.Normal
34.                }
35.                this.controller.updateSpanStyle({
36.                  start: offset + start,
37.                  end: offset + end,
38.                  textStyle: this.textStyle
39.                })
40.              }
41.            })
42.          }
43.        } },
44.        { icon: $r("app.media.ic\_notepad\_texttilt"), action: () =\> {
45.          if (this.controller) {
46.            let selection = this.controller.getSelection();
47.            let spans = selection.spans
48.            spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) =\> {
49.              if (typeof (item as RichEditorTextSpanResult)\['textStyle'\] != 'undefined') {
50.                let span = item as RichEditorTextSpanResult
51.                this.textStyle = span.textStyle
52.                let start = span.offsetInSpan\[0\]
53.                let end = span.offsetInSpan\[1\]
54.                let offset = span.spanPosition.spanRange\[0\]
55.                if (this.textStyle.fontStyle == FontStyle.Italic) {
56.                  this.textStyle.fontStyle = FontStyle.Normal
57.                } else {
58.                  this.textStyle.fontStyle = FontStyle.Italic
59.                }
60.                this.controller.updateSpanStyle({
61.                  start: offset + start,
62.                  end: offset + end,
63.                  textStyle: this.textStyle
64.                })
65.              }
66.            })
67.          }
68.        } },
69.        { icon: $r("app.media.ic\_notepad\_underline"),
70.          action: () =\> {
71.            if (this.controller) {
72.              let selection = this.controller.getSelection();
73.              let spans = selection.spans
74.              spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) =\> {
75.                if (typeof (item as RichEditorTextSpanResult)\['textStyle'\] != 'undefined') {
76.                  let span = item as RichEditorTextSpanResult
77.                  this.textStyle = span.textStyle
78.                  let start = span.offsetInSpan\[0\]
79.                  let end = span.offsetInSpan\[1\]
80.                  let offset = span.spanPosition.spanRange\[0\]
81.                  if (this.textStyle.decoration) {
82.                    if (this.textStyle.decoration.type == TextDecorationType.Underline) {
83.                      this.textStyle.decoration.type = TextDecorationType.None
84.                    } else {
85.                      this.textStyle.decoration.type = TextDecorationType.Underline
86.                    }
87.                  } else {
88.                    this.textStyle.decoration = { type: TextDecorationType.Underline, color: Color.Black }
89.                  }
90.                  this.controller.updateSpanStyle({
91.                    start: offset + start,
92.                    end: offset + end,
93.                    textStyle: this.textStyle
94.                  })
95.                }
96.              })
97.            }
98.          }
99.        },
100.        { icon: $r("app.media.app\_icon"), action: () =\> {
101.        }, builder: (): void =\> this.sliderPanel() },
102.        { icon: $r("app.media.ic\_notepad\_textcolor"), action: () =\> {
103.          if (this.controller) {
104.            let selection = this.controller.getSelection();
105.            let spans = selection.spans
106.            spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) =\> {
107.              if (typeof (item as RichEditorTextSpanResult)\['textStyle'\] != 'undefined') {
108.                let span = item as RichEditorTextSpanResult
109.                this.textStyle = span.textStyle
110.                let start = span.offsetInSpan\[0\]
111.                let end = span.offsetInSpan\[1\]
112.                let offset = span.spanPosition.spanRange\[0\]
113.                if (this.textStyle.fontColor == Color.Orange || this.textStyle.fontColor == '#FFFFA500') {
114.                  this.textStyle.fontColor = Color.Black
115.                } else {
116.                  this.textStyle.fontColor = Color.Orange
117.                }
118.                this.controller.updateSpanStyle({
119.                  start: offset + start,
120.                  end: offset + end,
121.                  textStyle: this.textStyle
122.                })
123.              }
124.            })
125.          }
126.        } }\]
127.    private expandedMenuOptions: Array<ExpandedMenuOptions\> =
128.      \[{ startIcon: $r("app.media.icon"), content: '词典', action: () =\> {
129.      } }, { startIcon: $r("app.media.icon"), content: '翻译', action: () =\> {
130.      } }, { startIcon: $r("app.media.icon"), content: '搜索', action: () =\> {
131.      } }\]
132.    private expandedMenuOptions1: Array<ExpandedMenuOptions\> = \[\]
133.    private editorMenuOptions1: Array<EditorMenuOptions\> = \[\]
134.    private selectionMenuOptions: SelectionMenuOptions = {
135.      editorMenuOptions: this.editorMenuOptions,
136.      expandedMenuOptions: this.expandedMenuOptions,
137.      controller: this.controller,
138.      onCut: (event?: EditorEventInfo) =\> {
139.        if (event && event.content) {
140.          event.content.spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) =\> {
141.            if (typeof (item as RichEditorTextSpanResult)\['textStyle'\] != 'undefined') {
142.              let span = item as RichEditorTextSpanResult
143.              console.info('test cut' + span.value)
144.              console.info('test start ' + span.offsetInSpan\[0\] + ' end: ' + span.offsetInSpan\[1\])
145.            }
146.          })
147.        }
148.      },
149.      onPaste: (event?: EditorEventInfo) =\> {
150.        if (event && event.content) {
151.          event.content.spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) =\> {
152.            if (typeof (item as RichEditorTextSpanResult)\['textStyle'\] != 'undefined') {
153.              let span = item as RichEditorTextSpanResult
154.              console.info('test onPaste' + span.value)
155.              console.info('test start ' + span.offsetInSpan\[0\] + ' end: ' + span.offsetInSpan\[1\])
156.            }
157.          })
158.        }
159.      },
160.      onCopy: (event?: EditorEventInfo) =\> {
161.        if (event && event.content) {
162.          event.content.spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) =\> {
163.            if (typeof (item as RichEditorTextSpanResult)\['textStyle'\] != 'undefined') {
164.              let span = item as RichEditorTextSpanResult
165.              console.info('test cut' + span.value)
166.              console.info('test start ' + span.offsetInSpan\[0\] + ' end: ' + span.offsetInSpan\[1\])
167.            }
168.          })
169.        }
170.      },
171.      onSelectAll: (event?: EditorEventInfo) =\> {
172.        if (event && event.content) {
173.          event.content.spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) =\> {
174.            if (typeof (item as RichEditorTextSpanResult)\['textStyle'\] != 'undefined') {
175.              let span = item as RichEditorTextSpanResult
176.              console.info('test onPaste' + span.value)
177.              console.info('test start ' + span.offsetInSpan\[0\] + ' end: ' + span.offsetInSpan\[1\])
178.            }
179.          })
180.        }
181.      }
182.    }

184.    @Builder sliderPanel() {
185.      Column() {
186.        Flex({ justifyContent: FlexAlign.SpaceBetween, alignItems: ItemAlign.Center }) {
187.          Text('A').fontSize(15)
188.          Slider({ value: this.textSize, step: 10, style: SliderStyle.InSet })
189.            .width(210)
190.            .onChange((value: number, mode: SliderChangeMode) =\> {
191.              if (this.controller) {
192.                let selection = this.controller.getSelection();
193.                if (mode == SliderChangeMode.End) {
194.                  if (this.textSize == undefined) {
195.                    this.textSize = 0
196.                  }
197.                  let spans = selection.spans
198.                  spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) =\> {
199.                    if (typeof (item as RichEditorTextSpanResult)\['textStyle'\] != 'undefined') {
200.                      this.textSize = Math.max(this.textSize, (item as RichEditorTextSpanResult).textStyle.fontSize)
201.                    }
202.                  })
203.                }
204.                if (mode == SliderChangeMode.Moving || mode == SliderChangeMode.Click) {
205.                  this.start = selection.selection\[0\]
206.                  this.end = selection.selection\[1\]
207.                  this.textSize = value
208.                  this.controller.updateSpanStyle({
209.                    start: this.start,
210.                    end: this.end,
211.                    textStyle: { fontSize: this.textSize }
212.                  })
213.                }
214.              }
215.            })
216.          Text('A').fontSize(20).fontWeight(FontWeight.Medium)
217.        }.borderRadius($r('sys.float.ohos\_id\_corner\_radius\_card'))
218.      }
219.      .shadow(ShadowStyle.OUTER\_DEFAULT\_MD)
220.      .backgroundColor(Color.White)
221.      .borderRadius($r('sys.float.ohos\_id\_corner\_radius\_card'))
222.      .padding(15)
223.      .height(48)
224.    }

226.    @Builder
227.    MyMenu() {
228.      Column() {
229.        SelectionMenu(this.selectionMenuOptions)
230.      }
231.      .width(256)
232.      .backgroundColor(Color.Transparent)
233.    }

235.    @Builder
236.    MyMenu2() {
237.      Column() {
238.        SelectionMenu({
239.          editorMenuOptions: this.editorMenuOptions,
240.          expandedMenuOptions: this.expandedMenuOptions1,
241.          controller: this.controller,
242.        })
243.      }
244.      .width(256)
245.      .backgroundColor(Color.Transparent)
246.    }

248.    @Builder
249.    MyMenu3() {
250.      Column() {
251.        SelectionMenu({
252.          editorMenuOptions: this.editorMenuOptions1,
253.          expandedMenuOptions: this.expandedMenuOptions,
254.          controller: this.controller,
255.        })
256.      }
257.      .width(256)
258.      .backgroundColor(Color.Transparent)
259.    }

261.    build() {
262.      Column() {
263.        Button("SetSelection")
264.          .onClick((event: ClickEvent) =\> {
265.            if (this.controller) {
266.              this.controller.setSelection(0, 2)
267.            }
268.          })

270.        RichEditor(this.options)
271.          .onReady(() =\> {
272.            this.controller.addTextSpan(this.message, { style: { fontColor: Color.Orange, fontSize: 30 } })
273.            this.controller.addTextSpan(this.message, { style: { fontColor: Color.Black, fontSize: 25 } })
274.          })
275.          .onSelect((value: RichEditorSelection) =\> {
276.            if (value.selection\[0\] == -1 && value.selection\[1\] == -1) {
277.              return
278.            }
279.            this.start = value.selection\[0\]
280.            this.end = value.selection\[1\]
281.          })
282.          .bindSelectionMenu(RichEditorSpanType.TEXT, this.MyMenu3(), RichEditorResponseType.RIGHT\_CLICK)
283.          .bindSelectionMenu(RichEditorSpanType.TEXT, this.MyMenu2(), RichEditorResponseType.SELECT)
284.          .borderWidth(1)
285.          .borderColor(Color.Red)
286.          .width(200)
287.          .height(200)
288.      }
289.    }
290.  }

说明

系统暂未预置加粗、斜体等图标，示例代码使用本地资源图标，开发者使用时需自行替换editorMenuOptions中icon项的资源。

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114445.79724053909008666552840485770978:50001231000000:2800:D72E6E5E3ABC04C36EAD371EE80BEA8E47AAF74376D6A6428AA2BCE9C97D91B5.jpeg?needInitFileName=true?needInitFileName=true)
