Title: CheckboxGroup-按钮与选择-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-checkboxgroup-V5

Markdown Content:
多选框群组，用于控制多选框全选或者不全选状态。

说明

该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

接口
--

CheckboxGroup(options?: CheckboxGroupOptions)

创建多选框群组，可以控制群组内的Checkbox全选或者不全选，group值相同的Checkbox和CheckboxGroup为同一群组。

在结合带缓存组件使用时(如List)，未被创建的Checkbox选中状态需要应用手动控制。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

CheckboxGroupOptions对象说明
------------------------

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

group

string

否

群组名称。

**说明：**

多个相同群组名称的CheckboxGroup，仅第一个CheckboxGroup生效。

### selectAll

selectAll(value: boolean)

设置是否全选。若同组的[Checkbox](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-checkbox-V5)显式设置了select属性，则Checkbox的优先级高。

从API version 10开始，该属性支持[$$](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-two-way-sync-V5)双向绑定变量。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

boolean

是

是否全选。

默认值：false

### selectedColor

selectedColor(value: ResourceColor)

设置被选中或部分选中状态的颜色。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

是

被选中或部分选中状态的颜色。

默认值：$r('sys.color.ohos\_id\_color\_text\_primary\_activated')

异常值按照默认值处理。

### unselectedColor10+

unselectedColor(value: ResourceColor)

设置非选中状态边框颜色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

是

非选中状态边框颜色。

默认值：$r('sys.color.ohos\_id\_color\_switch\_outline\_off')。

### mark10+

mark(value: MarkStyle)

设置多选框内部图标样式。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### checkboxShape12

checkboxShape(value: CheckBoxShape)

设置CheckboxGroup组件形状， 包括圆形和圆角方形。

**卡片能力：** 从API version 12开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[CheckBoxShape](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-checkbox-V5#checkboxshape11%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B%E8%AF%B4%E6%98%8E)

是

设置CheckboxGroup组件形状， 包括圆形和圆角方形。

默认值:CheckBoxShape.CIRCLE。

**说明**：

CheckboxGroup组件形状按照设置显示。

CheckboxGroup内所有没有单独设置shape类型的Checkbox形状和CheckboxGroup的保持一致。

CheckboxGroup内有单独设置shape类型的Checkbox形状则优先于CheckboxGroup，按照设置形状显示。

### onChange

onChange(callback: (event: CheckboxGroupResult) =\> void )

CheckboxGroup的选中状态或群组内的Checkbox的选中状态发生变化时，触发回调。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

CheckboxGroupResult对象说明
-----------------------

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

只读

可选

说明

name

Array<string\>

否

否

群组内所有被选中的多选框名称。

status

[SelectStatus](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-checkboxgroup-V5#selectstatus%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

否

否

选中状态。

SelectStatus枚举说明
----------------

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

描述

All

群组多选择框全部选择。

Part

群组多选择框部分选择。

None

群组多选择框全部没有选择。

示例
--

### 示例1

2.  @Entry
3.  @Component
4.  struct CheckboxExample {
5.    build() {
6.      Scroll() {
7.        Column() {

9.          Flex({ justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {
10.            CheckboxGroup({ group: 'checkboxGroup' })
11.              .checkboxShape(CheckBoxShape.ROUNDED\_SQUARE)
12.              .selectedColor('#007DFF')
13.              .onChange((itemName: CheckboxGroupResult) =\> {
14.                console.info("checkbox group content" + JSON.stringify(itemName))
15.              })
16.            Text('Select All').fontSize(14).lineHeight(20).fontColor('#182431').fontWeight(500)
17.          }

20.          Flex({ justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {
21.            Checkbox({ name: 'checkbox1', group: 'checkboxGroup' })
22.              .selectedColor('#007DFF')
23.              .shape(CheckBoxShape.ROUNDED\_SQUARE)
24.              .onChange((value: boolean) =\> {
25.                console.info('Checkbox1 change is' + value)
26.              })
27.            Text('Checkbox1').fontSize(14).lineHeight(20).fontColor('#182431').fontWeight(500)
28.          }.margin({ left: 36 })

31.          Flex({ justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {
32.            Checkbox({ name: 'checkbox2', group: 'checkboxGroup' })
33.              .selectedColor('#007DFF')
34.              .shape(CheckBoxShape.ROUNDED\_SQUARE)
35.              .onChange((value: boolean) =\> {
36.                console.info('Checkbox2 change is' + value)
37.              })
38.            Text('Checkbox2').fontSize(14).lineHeight(20).fontColor('#182431').fontWeight(500)
39.          }.margin({ left: 36 })

42.          Flex({ justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {
43.            Checkbox({ name: 'checkbox3', group: 'checkboxGroup' })
44.              .selectedColor('#007DFF')
45.              .shape(CheckBoxShape.ROUNDED\_SQUARE)
46.              .onChange((value: boolean) =\> {
47.                console.info('Checkbox3 change is' + value)
48.              })
49.            Text('Checkbox3').fontSize(14).lineHeight(20).fontColor('#182431').fontWeight(500)
50.          }.margin({ left: 36 })
51.        }
52.      }
53.    }
54.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114426.82133242591232352972206609268881:50001231000000:2800:FA415E36CC0E19FF4B6EA9BE1E5E2439B25A071F93D9B3C9CC1982623001CF58.gif?needInitFileName=true?needInitFileName=true)

### 示例2

2.  @Entry
3.  @Component
4.  struct Index {

6.    build() {
7.      Row() {
8.        Column() {
9.          Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {
10.            CheckboxGroup({ group: 'checkboxGroup' })
11.              .checkboxShape(CheckBoxShape.ROUNDED\_SQUARE)
12.              .selectedColor(Color.Orange)
13.              .onChange((itemName: CheckboxGroupResult) =\> {
14.                console.info("checkbox group content" + JSON.stringify(itemName))
15.              })
16.              .mark({
17.                strokeColor:Color.Black,
18.                size: 40,
19.                strokeWidth: 5
20.              })
21.              .unselectedColor(Color.Red)
22.              .width(30)
23.              .height(30)
24.            Text('Select All').fontSize(20)
25.          }.margin({right:15})
26.          Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {
27.            Checkbox({ name: 'checkbox1', group: 'checkboxGroup' })
28.              .selectedColor(0x39a2db)
29.              .shape(CheckBoxShape.ROUNDED\_SQUARE)
30.              .onChange((value: boolean) =\> {
31.                console.info('Checkbox1 change is'\+ value)
32.              })
33.              .mark({
34.                strokeColor:Color.Black,
35.                size: 50,
36.                strokeWidth: 5
37.              })
38.              .unselectedColor(Color.Red)
39.              .width(30)
40.              .height(30)
41.            Text('Checkbox1').fontSize(20)
42.          }
43.          Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {
44.            Checkbox({ name: 'checkbox2', group: 'checkboxGroup' })
45.              .selectedColor(0x39a2db)
46.              .shape(CheckBoxShape.ROUNDED\_SQUARE)
47.              .onChange((value: boolean) =\> {
48.                console.info('Checkbox2 change is' + value)
49.              })
50.              .width(30)
51.              .height(30)
52.            Text('Checkbox2').fontSize(20)
53.          }
54.          Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {
55.            Checkbox({ name: 'checkbox3', group: 'checkboxGroup' })
56.              .selectedColor(0x39a2db)
57.              .shape(CheckBoxShape.ROUNDED\_SQUARE)
58.              .onChange((value: boolean) =\> {
59.                console.info('Checkbox3 change is' + value)
60.              })
61.              .width(30)
62.              .height(30)
63.            Text('Checkbox3').fontSize(20)
64.          }
65.        }
66.        .width('100%')
67.      }
68.      .height('100%')
69.    }
70.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114426.27558833670826238633421087960597:50001231000000:2800:238CD49CBBCBCBE586C8DA6A237E70C4241A7DDA980D0FD032B3D2287CA2BE27.gif?needInitFileName=true?needInitFileName=true)
