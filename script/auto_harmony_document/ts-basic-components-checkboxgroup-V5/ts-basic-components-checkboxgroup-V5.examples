/*\n实现一个包含复选框组的页面组件，支持全选功能。页面布局为一个可滚动的纵向列，包含一个全选按钮和三个独立的复选框。每个复选框都有自己的状态监听器，当状态变化时会在控制台输出相应的信息。\n*/\n\n// xxx.ets\n@Entry\n@Component\nstruct Index {\n\n  build() {\n    // 创建一个横向布局Row\n    Row() {\n      // 创建一个纵向布局Column\n      Column() {\n        // 创建一个弹性布局Flex，用于包裹复选框组\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建一个复选框组CheckboxGroup\n          CheckboxGroup({ group: 'checkboxGroup' })\n            // 设置复选框形状为圆角方形\n            .checkboxShape(CheckBoxShape.ROUNDED_SQUARE)\n            // 设置选中状态的颜色为橙色\n            .selectedColor(Color.Orange)\n            // 监听复选框组的状态变化\n            .onChange((itemName: CheckboxGroupResult) => {\n              console.info("checkbox group content" + JSON.stringify(itemName))\n            })\n            // 标记复选框组的样式\n            .mark({\n              strokeColor:Color.Black, // 设置标记的边框颜色为黑色\n              size: 40, // 设置标记的大小为40\n              strokeWidth: 5 // 设置标记的边框宽度为5\n            })\n            // 设置未选中状态的颜色为红色\n            .unselectedColor(Color.Red)\n            // 设置复选框的宽度和高度\n            .width(30)\n            .height(30)\n          // 显示文本"Select All"，设置字体大小为20\n          Text('Select All').fontSize(20)\n        }.margin({right:15}) // 设置右边距为15\n\n        // 创建一个弹性布局Flex，用于包裹复选框1\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建一个单独的复选框Checkbox1\n          Checkbox({ name: 'checkbox1', group: 'checkboxGroup' })\n            // 设置选中状态的颜色为蓝色\n            .selectedColor(0x39a2db)\n            // 设置复选框形状为圆角方形\n            .shape(CheckBoxShape.ROUNDED_SQUARE)\n            // 监听复选框状态变化\n            .onChange((value: boolean) => {\n              console.info('Checkbox1 change is'+ value)\n            })\n            // 标记复选框的样式\n            .mark({\n              strokeColor:Color.Black, // 设置标记的边框颜色为黑色\n              size: 50, // 设置标记的大小为50\n              strokeWidth: 5 // 设置标记的边框宽度为5\n            })\n            // 设置未选中状态的颜色为红色\n            .unselectedColor(Color.Red)\n            // 设置复选框的宽度和高度\n            .width(30)\n            .height(30)\n          // 显示文本"Checkbox1"，设置字体大小为20\n          Text('Checkbox1').fontSize(20)\n        }\n\n        // 创建一个弹性布局Flex，用于包裹复选框2\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建一个单独的复选框Checkbox2\n          Checkbox({ name: 'checkbox2', group: 'checkboxGroup' })\n            // 设置选中状态的颜色为蓝色\n            .selectedColor(0x39a2db)\n            // 设置复选框形状为圆角方形\n            .shape(CheckBoxShape.ROUNDED_SQUARE)\n            // 监听复选框状态变化\n            .onChange((value: boolean) => {\n              console.info('Checkbox2 change is' + value)\n            })\n            // 设置复选框的宽度和高度\n            .width(30)\n            .height(30)\n          // 显示文本"Checkbox2"，设置字体大小为20\n          Text('Checkbox2').fontSize(20)\n        }\n\n        // 创建一个弹性布局Flex，用于包裹复选框3\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建一个单独的复选框Checkbox3\n          Checkbox({ name: 'checkbox3', group: 'checkboxGroup' })\n            // 设置选中状态的颜色为蓝色\n            .selectedColor(0x39a2db)\n            // 设置复选框形状为圆角方形\n            .shape(CheckBoxShape.ROUNDED_SQUARE)\n            // 监听复选框状态变化\n            .onChange((value: boolean) => {\n              console.info('Checkbox3 change is' + value)\n            })\n            // 设置复选框的宽度和高度\n            .width(30)\n            .height(30)\n          // 显示文本"Checkbox3"，设置字体大小为20\n          Text('Checkbox3').fontSize(20)\n        }\n      }\n      // 设置Column的宽度为100%\n      .width('100%')\n    }\n    // 设置Row的高度为100%\n    .height('100%')\n  }\n}