/*\n实现一个带有刷新功能的列表组件。列表项为数字字符串，支持下拉刷新操作。刷新时，列表会显示刷新动画，并在2秒后停止刷新状态。\n*/\n\n@Entry\n@Component\nstruct RefreshExample {\n  @State isRefreshing: boolean = false // 控制刷新状态的布尔变量，初始值为false\n  @State arr: String[] = ['0', '1', '2', '3', '4','5','6','7','8','9','10'] // 列表数据源，包含数字字符串\n\n  build() {\n    Column() {\n      Refresh({ refreshing: $$this.isRefreshing}) { // 创建一个刷新组件，绑定刷新状态\n        List() {\n          ForEach(this.arr, (item: string) => { // 遍历数据源，生成列表项\n            ListItem() {\n              Text('' + item) // 显示列表项内容\n                .width('70%').height(80).fontSize(16).margin(10) // 设置文本样式\n                .textAlign(TextAlign.Center).borderRadius(10).backgroundColor(0xFFFFFF) // 设置文本对齐、圆角和背景色\n            }\n          }, (item: string) => item) // 列表项的唯一标识符\n        }\n        .onScrollIndex((first: number) => { // 监听列表滚动事件，输出当前第一个可见项的索引\n          console.info(first.toString())\n        })\n        .width('100%') // 设置列表宽度为100%\n        .height('100%') // 设置列表高度为100%\n        .alignListItem(ListItemAlign.Center) // 设置列表项居中对齐\n        .scrollBar(BarState.Off) // 隐藏滚动条\n      }\n      .onStateChange((refreshStatus: RefreshStatus) => { // 监听刷新状态变化事件，输出当前刷新状态\n        console.info('Refresh onStatueChange state is ' + refreshStatus)\n      })\n      .onOffsetChange((value: number) => { // 监听刷新偏移量变化事件，输出当前偏移量\n        console.info('Refresh onOffsetChange offset:' + value)\n      })\n      .onRefreshing(() => { // 监听刷新开始事件，2秒后停止刷新状态\n        setTimeout(() => {\n          this.isRefreshing = false\n        }, 2000)\n        console.log('onRefreshing test')\n      })\n      .backgroundColor(0x89CFF0) // 设置刷新区域的背景色\n      .refreshOffset(64) // 设置刷新触发的高度偏移量\n      .pullToRefresh(true) // 启用下拉刷新功能\n    }\n  }\n}


/*\n实现一个可刷新的列表组件，支持自定义刷新区域的显示内容。列表项为数字字符串，刷新时显示一个加载进度条和文本提示。\n*/\n\n@Entry\n@Component\nstruct RefreshExample {\n  // 控制刷新状态的布尔变量\n  @State isRefreshing: boolean = false\n  \n  // 列表数据，包含数字字符串\n  @State arr: String[] = ['0', '1', '2', '3', '4','5','6','7','8','9','10']\n\n  // 自定义刷新组件的构建器\n  @Builder\n  customRefreshComponent() {\n    Stack() {\n      Row() {\n        // 加载进度条组件\n        LoadingProgress().height(32)\n        // 刷新提示文本\n        Text("Refreshing...").fontSize(16).margin({left:20})\n      }\n      .alignItems(VerticalAlign.Center) // 垂直居中对齐\n    }\n    .align(Alignment.Center) // 水平居中对齐\n    .clip(true) // 裁剪超出部分\n    .constraintSize({minHeight:32}) // 最小高度为32\n    .width("100%") // 宽度占满父容器\n  }\n\n  build() {\n    Column() {\n      // 刷新组件，refreshing状态绑定isRefreshing，builder参数使用自定义刷新组件\n      Refresh({ refreshing: $$this.isRefreshing, builder: this.customRefreshComponent() }) {\n        List() {\n          // 遍历arr数组，生成列表项\n          ForEach(this.arr, (item: string) => {\n            ListItem() {\n              Text('' + item)\n                .width('70%').height(80).fontSize(16).margin(10)\n                .textAlign(TextAlign.Center).borderRadius(10).backgroundColor(0xFFFFFF)\n            }\n          }, (item: string) => item)\n        }\n        .onScrollIndex((first: number) => {\n          // 滚动到指定索引时触发，打印索引值\n          console.info(first.toString())\n        })\n        .width('100%') // 宽度占满父容器\n        .height('100%') // 高度占满父容器\n        .alignListItem(ListItemAlign.Center) // 列表项居中对齐\n        .scrollBar(BarState.Off) // 隐藏滚动条\n      }\n      .backgroundColor(0x89CFF0) // 背景颜色\n      .pullToRefresh(true) // 启用下拉刷新\n      .refreshOffset(64) // 刷新触发的高度偏移\n      .onStateChange((refreshStatus: RefreshStatus) => {\n        // 刷新状态改变时触发，打印状态\n        console.info('Refresh onStatueChange state is ' + refreshStatus)\n      })\n      .onRefreshing(() => {\n        // 刷新开始时触发，2秒后结束刷新\n        setTimeout(() => {\n          this.isRefreshing = false\n        }, 2000)\n        console.log('onRefreshing test')\n      })\n    }\n  }\n}


/*\n实现一个带有刷新功能的列表组件。列表项由数字0到10组成，支持下拉刷新操作。刷新时显示“Refreshing...”文本，刷新完成后文本消失。刷新状态通过@State变量isRefreshing控制，刷新区域的高度为96。\n*/\n\n@Entry\n@Component\nstruct RefreshExample {\n  // 控制刷新状态的布尔变量，初始值为false\n  @State isRefreshing: boolean = false\n  \n  // 刷新区域的提示文本，初始值为"Refreshing..."\n  @State promptText: string = "Refreshing..."\n  \n  // 列表数据，包含数字0到10的字符串数组\n  @State arr: String[] = ['0', '1', '2', '3', '4','5','6','7','8','9','10']\n\n  build() {\n    Column() {\n      // 创建一个带有刷新功能的容器，refreshing属性绑定到isRefreshing，promptText属性绑定到promptText\n      Refresh({ refreshing: $$this.isRefreshing, promptText: this.promptText}) {\n        // 创建一个列表组件\n        List() {\n          // 使用ForEach循环渲染列表项，item为数组中的每个元素\n          ForEach(this.arr, (item: string) => {\n            // 创建一个列表项\n            ListItem() {\n              // 创建一个文本组件，显示列表项的值\n              Text('' + item)\n                .width('70%').height(80).fontSize(16).margin(10)\n                .textAlign(TextAlign.Center).borderRadius(10).backgroundColor(0xFFFFFF)\n            }\n          }, (item: string) => item) // 指定ForEach的key为item本身\n        }\n        .onScrollIndex((first: number) => {\n          // 监听列表滚动到第一个可见项的索引，并打印到控制台\n          console.info(first.toString())\n        })\n        .width('100%') // 设置列表宽度为100%\n        .height('100%') // 设置列表高度为100%\n        .alignListItem(ListItemAlign.Center) // 设置列表项居中对齐\n        .scrollBar(BarState.Off) // 隐藏滚动条\n      }\n      .backgroundColor(0x89CFF0) // 设置刷新容器的背景颜色\n      .pullToRefresh(true) // 启用下拉刷新功能\n      .refreshOffset(96) // 设置刷新区域的高度为96\n      .onStateChange((refreshStatus: RefreshStatus) => {\n        // 监听刷新状态的变化，并打印到控制台\n        console.info('Refresh onStatueChange state is ' + refreshStatus)\n      })\n      .onOffsetChange((value: number) => {\n        // 监听刷新区域的偏移量变化，并打印到控制台\n        console.info('Refresh onOffsetChange offset:' + value)\n      })\n      .onRefreshing(() => {\n        // 当开始刷新时执行的回调函数\n        setTimeout(() => {\n          // 2秒后将isRefreshing设置为false，结束刷新状态\n          this.isRefreshing = false\n        }, 2000)\n        console.log('onRefreshing test') // 打印刷新开始的信息\n      })\n    }\n  }\n}


/*\n实现一个可滚动的列表组件，支持上拉加载更多功能和下拉刷新功能。列表项为数字，下拉刷新时显示一个进度环，上拉加载更多时显示一个加载中的提示。\n*/\n\n@Entry\n@Component\nstruct ListRefreshLoad {\n  @State arr: Array<number> = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // 列表数据源，初始化为一个包含11个数字的数组\n  @State refreshing: boolean = false; // 控制刷新状态的布尔值，true表示正在刷新\n  @State refreshOffset: number = 0; // 刷新时的偏移量，用于控制进度环的显示\n  @State refreshState: RefreshStatus = RefreshStatus.Inactive; // 刷新状态，初始为Inactive\n  @State canLoad: boolean = false; // 控制是否可以加载更多的布尔值，true表示可以加载更多\n  @State isLoading: boolean = false; // 控制加载状态的布尔值，true表示正在加载\n\n  @Builder\n  refreshBuilder() {\n    Stack({ alignContent: Alignment.Bottom }) {\n      // 当刷新状态不是Inactive或Done时，显示进度环\n      if (this.refreshState != RefreshStatus.Inactive && this.refreshState != RefreshStatus.Done) {\n        Progress({ value: this.refreshOffset, total: 64, type: ProgressType.Ring })\n          .width(32).height(32)\n          .style({ status: this.refreshing ? ProgressStatus.LOADING : ProgressStatus.PROGRESSING })\n          .margin(10)\n      }\n    }\n    .clip(true)\n    .height("100%")\n    .width("100%")\n  }\n\n  @Builder\n  footer() {\n    Row() {\n      LoadingProgress().height(32).width(48) // 显示加载中的进度条\n      Text("加载中") // 显示加载中的文本\n    }.width("100%")\n    .height(64)\n    .justifyContent(FlexAlign.Center)\n    .visibility(this.isLoading ? Visibility.Visible : Visibility.Hidden) // 根据isLoading状态控制显示或隐藏\n  }\n\n  build() {\n    Refresh({ refreshing: $$this.refreshing, builder: this.refreshBuilder() }) {\n      List() {\n        ForEach(this.arr, (item: number) => {\n          ListItem() {\n            Text('' + item)\n              .width('100%')\n              .height(80)\n              .fontSize(16)\n              .textAlign(TextAlign.Center)\n              .backgroundColor(0xFFFFFF)\n          }.borderWidth(1)\n        }, (item: string) => item)\n\n        ListItem() {\n          this.footer(); // 显示加载更多的提示\n        }\n      }\n      .onScrollIndex((start: number, end: number) => {\n        // 当滚动到列表末尾时，触发加载更多数据\n        if (this.canLoad && end >= this.arr.length - 1) {\n          this.canLoad = false;\n          this.isLoading = true;\n\n          setTimeout(() => {\n            for (let i = 0; i < 10; i++) {\n              this.arr.push(this.arr.length); // 添加新的数据项\n              this.isLoading = false;\n            }\n          }, 700)\n        }\n      })\n      .onScrollFrameBegin((offset: number, state: ScrollState) => {\n        // 当滚动偏移量大于5时，允许加载更多数据\n        if (offset > 5 && !this.isLoading) {\n          this.canLoad = true;\n        }\n        return { offsetRemain: offset };\n      })\n      .scrollBar(BarState.Off) // 隐藏滚动条\n      .edgeEffect(EdgeEffect.Spring, { alwaysEnabled: true }) // 启用边界回弹效果\n    }\n    .width('100%')\n    .height('100%')\n    .backgroundColor(0xDCDCDC)\n    .onOffsetChange((offset: number) => {\n      this.refreshOffset = offset; // 更新刷新偏移量\n    })\n    .onStateChange((state: RefreshStatus) => {\n      this.refreshState = state; // 更新刷新状态\n    })\n    .onRefreshing(() => {\n      // 模拟刷新操作，2秒后结束刷新\n      setTimeout(() => {\n        this.refreshing = false;\n      }, 2000)\n    })\n  }\n}