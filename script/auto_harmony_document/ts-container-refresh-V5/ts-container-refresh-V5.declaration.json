{
    "description": "可以进行页面下拉操作并显示刷新动效的容器组件。可以包含单个子组件。",
    "details": null,
    "interfaces": [
        {
            "description": "Refresh(value: RefreshOptions)",
            "params": {
                "value": {
                    "type": "RefreshOptions",
                    "required": true,
                    "description": "刷新选项对象。"
                }
            }
        }
    ],
    "attributes": {
        "refreshing": {
            "description": "当前组件是否正在刷新。",
            "params": {
                "refreshing": {
                    "type": "boolean",
                    "required": true,
                    "description": "当前组件是否正在刷新。",
                    "default": false
                }
            }
        },
        "offset": {
            "description": "下拉起点距离组件顶部的距离。",
            "params": {
                "offset": {
                    "type": [
                        "string",
                        "number"
                    ],
                    "required": false,
                    "description": "下拉起点距离组件顶部的距离。",
                    "default": 16
                }
            }
        },
        "friction": {
            "description": "下拉摩擦系数，取值范围为0到100。",
            "params": {
                "friction": {
                    "type": [
                        "number",
                        "string"
                    ],
                    "required": false,
                    "description": "下拉摩擦系数，取值范围为0到100。",
                    "default": 62
                }
            }
        },
        "builder": {
            "description": "自定义刷新区域显示内容。",
            "params": {
                "builder": {
                    "type": "CustomBuilder",
                    "required": false,
                    "description": "自定义刷新区域显示内容。"
                }
            }
        },
        "promptText": {
            "description": "设置刷新区域底部显示的自定义文本。",
            "params": {
                "promptText": {
                    "type": "ResourceStr",
                    "required": false,
                    "description": "设置刷新区域底部显示的自定义文本。"
                }
            }
        },
        "refreshOffset": {
            "description": "设置触发刷新的下拉偏移量。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "下拉偏移量，单位vp。",
                    "default": 64
                }
            }
        },
        "pullToRefresh": {
            "description": "设置当下拉距离超过refreshOffset时是否触发刷新。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "是否触发刷新。",
                    "default": true
                }
            }
        },
        "pullDownRatio": {
            "description": "设置下拉跟手系数。",
            "params": {
                "ratio": {
                    "type": "Optional<number>",
                    "required": true,
                    "description": "下拉跟手系数。",
                    "default": null
                }
            }
        }
    },
    "events": {
        "onStateChange": {
            "description": "当前刷新状态变更时，触发回调。",
            "params": {
                "state": {
                    "type": "RefreshStatus",
                    "required": true,
                    "description": "当前刷新状态。"
                }
            }
        },
        "onRefreshing": {
            "description": "进入刷新状态时触发回调。",
            "params": {}
        },
        "onOffsetChange": {
            "description": "下拉距离发生变化时触发回调。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "下拉距离。"
                }
            }
        }
    },
    "rules": null,
    "examples": [
        {
            "description": "该组件实现了一个带有下拉刷新功能的列表界面。布局宽度占据整个屏幕，高度设为 100%，背景颜色为浅蓝色（0x89CFF0）。组件的垂直方向上包含一个刷新区域和一个列表区域。刷新区域支持下拉刷新操作，当用户下拉列表时，会触发刷新状态，并在刷新完成后自动恢复。\n列表区域使用 List 组件展示数据，数据源为一个字符串数组。每个列表项包含一个居中对齐的文本组件，文本内容为数组中的元素。列表项的宽度为 70%，高度为 80vp，背景颜色为白色（0xFFFFFF），边框圆角为 10vp，字体大小为 16vp，内边距为 10vp。列表项在列表中居中对齐，列表的滚动条被隐藏。\n刷新区域的下拉刷新功能通过 Refresh 组件实现，支持下拉刷新操作，并在刷新过程中触发相应的事件回调。刷新区域的偏移量为 64vp，允许用户下拉以触发刷新操作。",
            "code": "@Entry\n@Component\nstruct RefreshExample {\n  @State isRefreshing: boolean = false // 状态变量，用于控制刷新状态\n  @State arr: String[] = ['0', '1', '2', '3', '4','5','6','7','8','9','10'] // 数据源数组，用于展示列表项\n\n  build() {\n    Column() {\n      Refresh({ refreshing: $$this.isRefreshing }) { // 创建刷新区域，绑定刷新状态\n        List() {\n          ForEach(this.arr, (item: string) => { // 遍历数据源数组，生成列表项\n            ListItem() {\n              Text('' + item) // 创建文本组件，显示数组元素\n                .width('70%') // 设置文本组件宽度为 70%\n                .height(80) // 设置文本组件高度为 80vp\n                .fontSize(16) // 设置文本字体大小为 16vp\n                .margin(10) // 设置文本组件内边距为 10vp\n                .textAlign(TextAlign.Center) // 设置文本居中对齐\n                .borderRadius(10) // 设置文本组件边框圆角为 10vp\n                .backgroundColor(0xFFFFFF) // 设置文本组件背景颜色为白色（0xFFFFFF）\n            }\n          }, (item: string) => item) // 使用数组元素作为列表项的唯一标识\n        }\n        .onScrollIndex((first: number) => { // 监听列表滚动事件，输出当前第一个可见项的索引\n          console.info(first.toString())\n        })\n        .width('100%') // 设置列表宽度为 100%\n        .height('100%') // 设置列表高度为 100%\n        .alignListItem(ListItemAlign.Center) // 设置列表项居中对齐\n        .scrollBar(BarState.Off) // 隐藏列表滚动条\n      }\n      .onStateChange((refreshStatus: RefreshStatus) => { // 监听刷新状态变化事件，输出当前刷新状态\n        console.info('Refresh onStatueChange state is ' + refreshStatus)\n      })\n      .onOffsetChange((value: number) => { // 监听刷新区域偏移量变化事件，输出当前偏移量\n        console.info('Refresh onOffsetChange offset:' + value)\n      })\n      .onRefreshing(() => { // 监听刷新事件，触发刷新操作\n        setTimeout(() => {\n          this.isRefreshing = false // 2 秒后结束刷新状态\n        }, 2000)\n        console.log('onRefreshing test') // 输出刷新测试信息\n      })\n      .backgroundColor(0x89CFF0) // 设置刷新区域背景颜色为浅蓝色（0x89CFF0）\n      .refreshOffset(64) // 设置刷新区域偏移量为 64vp\n      .pullToRefresh(true) // 启用下拉刷新功能\n    }\n  }\n}"
        },
        {
            "description": "该组件实现了一个带有自定义刷新区域的列表界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上包含一个刷新区域和一个列表区域。刷新区域通过自定义的 `customRefreshComponent` 组件实现，显示一个加载进度条和文本 \"Refreshing...\"。列表区域包含一个 `List` 组件，展示一个字符串数组 `arr` 的内容。每个列表项显示一个文本，文本内容为数组中的元素。列表项的样式包括背景颜色、边框圆角、宽度和高度等属性。列表项之间通过 `ListItem` 组件进行分隔。\n\n刷新区域的功能包括在用户下拉时显示自定义的刷新组件，并在刷新完成后隐藏。列表区域的功能包括滚动事件监听和刷新状态监听。用户可以通过下拉列表触发刷新操作，刷新操作完成后，列表会重新加载数据。\n\n整个布局通过 `Column` 布局保证刷新区域和列表区域在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct RefreshExample {\n  @State isRefreshing: boolean = false // 状态变量，用于控制刷新状态\n  @State arr: String[] = ['0', '1', '2', '3', '4','5','6','7','8','9','10'] // 数据源数组，用于列表展示\n\n  @Builder\n  customRefreshComponent() {\n    Stack() {\n      Row() {\n        LoadingProgress().height(32) // 加载进度条组件，高度为 32vp\n        Text(\"Refreshing...\").fontSize(16).margin({left:20}) // 文本组件，显示 \"Refreshing...\"，字体大小为 16，左边距为 20vp\n      }\n      .alignItems(VerticalAlign.Center) // 子组件垂直居中对齐\n    }\n    .align(Alignment.Center) // 组件整体居中对齐\n    .clip(true) // 开启裁剪，防止内容溢出\n    .constraintSize({minHeight:32}) // 最小高度为 32vp\n    .width(\"100%\") // 宽度占据父容器的 100%\n  }\n\n  build() {\n    Column() {\n      Refresh({ refreshing: $$this.isRefreshing, builder: this.customRefreshComponent() }) { // 刷新组件，绑定刷新状态和自定义刷新区域\n        List() {\n          ForEach(this.arr, (item: string) => { // 遍历数组，生成列表项\n            ListItem() {\n              Text('' + item) // 文本组件，显示数组元素\n                .width('70%').height(80).fontSize(16).margin(10) // 宽度为父容器的 70%，高度为 80vp，字体大小为 16，外边距为 10vp\n                .textAlign(TextAlign.Center).borderRadius(10).backgroundColor(0xFFFFFF) // 文本居中对齐，边框圆角为 10vp，背景颜色为白色\n            }\n          }, (item: string) => item) // 列表项的唯一标识\n        }\n        .onScrollIndex((first: number) => { // 监听列表滚动事件\n          console.info(first.toString()) // 打印当前第一个可见项的索引\n        })\n        .width('100%') // 宽度占据父容器的 100%\n        .height('100%') // 高度占据父容器的 100%\n        .alignListItem(ListItemAlign.Center) // 列表项居中对齐\n        .scrollBar(BarState.Off) // 隐藏滚动条\n      }\n      .backgroundColor(0x89CFF0) // 背景颜色为浅蓝色\n      .pullToRefresh(true) // 开启下拉刷新功能\n      .refreshOffset(64) // 刷新区域的偏移量为 64vp\n      .onStateChange((refreshStatus: RefreshStatus) => { // 监听刷新状态变化事件\n        console.info('Refresh onStatueChange state is ' + refreshStatus) // 打印当前刷新状态\n      })\n      .onRefreshing(() => { // 监听刷新事件\n        setTimeout(() => {\n          this.isRefreshing = false // 2 秒后结束刷新状态\n        }, 2000)\n        console.log('onRefreshing test') // 打印刷新事件触发日志\n      })\n    }\n  }\n}"
        },
        {
            "description": "该组件实现了一个带有下拉刷新功能的列表界面。布局宽度占据整个屏幕，高度设为 100%，背景颜色为浅蓝色（0x89CFF0）。组件的垂直方向上包含一个刷新区域和一个列表区域。\n\n刷新区域通过 `Refresh` 组件实现，支持下拉刷新功能。刷新区域的提示文本通过 `promptText` 参数设置，默认显示 \"Refreshing...\"。刷新区域的高度为 96vp，当用户下拉时，会触发 `onOffsetChange` 事件，记录下拉的偏移量。当用户完成下拉操作并触发刷新时，会触发 `onRefreshing` 事件，并在 2 秒后自动结束刷新状态。\n\n列表区域通过 `List` 组件实现，包含多个 `ListItem` 组件，每个 `ListItem` 组件显示一个数字字符串。列表的宽度占据整个屏幕，高度设为 100%，列表项的对齐方式为居中对齐，且不显示滚动条。列表项的样式包括背景颜色为白色（0xFFFFFF），边框圆角为 10vp，宽度为 70%，高度为 80vp，字体大小为 16vp，内边距为 10vp，文本居中对齐。\n\n整个布局通过 `Column` 组件实现，确保刷新区域和列表区域在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct RefreshExample {\n  @State isRefreshing: boolean = false // 控制刷新状态的布尔值，初始值为 false\n  @State promptText: string = \"Refreshing...\" // 刷新区域的提示文本，初始值为 \"Refreshing...\"\n  @State arr: String[] = ['0', '1', '2', '3', '4','5','6','7','8','9','10'] // 列表数据源，包含 11 个数字字符串\n\n  build() {\n    Column() {\n      Refresh({ refreshing: $$this.isRefreshing, promptText: this.promptText}) { // 创建刷新区域，绑定刷新状态和提示文本\n        List() {\n          ForEach(this.arr, (item: string) => { // 遍历数据源，生成列表项\n            ListItem() {\n              Text('' + item) // 显示列表项的文本内容\n                .width('70%') // 设置文本宽度为 70%\n                .height(80) // 设置文本高度为 80vp\n                .fontSize(16) // 设置字体大小为 16vp\n                .margin(10) // 设置内边距为 10vp\n                .textAlign(TextAlign.Center) // 设置文本居中对齐\n                .borderRadius(10) // 设置边框圆角为 10vp\n                .backgroundColor(0xFFFFFF) // 设置背景颜色为白色（0xFFFFFF）\n            }\n          }, (item: string) => item) // 列表项的唯一标识符为 item 本身\n        }\n        .onScrollIndex((first: number) => { // 监听列表滚动事件，输出当前第一个可见项的索引\n          console.info(first.toString())\n        })\n        .width('100%') // 设置列表宽度为 100%\n        .height('100%') // 设置列表高度为 100%\n        .alignListItem(ListItemAlign.Center) // 设置列表项居中对齐\n        .scrollBar(BarState.Off) // 隐藏滚动条\n      }\n      .backgroundColor(0x89CFF0) // 设置刷新区域的背景颜色为浅蓝色（0x89CFF0）\n      .pullToRefresh(true) // 启用下拉刷新功能\n      .refreshOffset(96) // 设置刷新区域的偏移量为 96vp\n      .onStateChange((refreshStatus: RefreshStatus) => { // 监听刷新状态变化事件，输出当前刷新状态\n        console.info('Refresh onStatueChange state is ' + refreshStatus)\n      })\n      .onOffsetChange((value: number) => { // 监听下拉偏移量变化事件，输出当前偏移量\n        console.info('Refresh onOffsetChange offset:' + value)\n      })\n      .onRefreshing(() => { // 监听刷新事件，2 秒后自动结束刷新状态\n        setTimeout(() => {\n          this.isRefreshing = false\n        }, 2000)\n        console.log('onRefreshing test')\n      })\n    }\n  }\n}"
        },
        {
            "description": "该组件实现了一个带有边界刷新回弹效果的列表界面。布局宽度占据整个屏幕，高度设为 100%，背景颜色为 0xDCDCDC。组件的垂直方向上包含一个刷新指示器和一个列表，列表中包含多个列表项和一个加载指示器。\n\n刷新指示器通过 Stack 组件实现，高度和宽度均为 100%，内容对齐方式为底部对齐。刷新指示器中包含一个 Progress 组件，用于显示刷新进度。Progress 组件的宽度为 32vp，高度为 32vp，样式根据刷新状态动态变化。\n\n列表通过 List 组件实现，包含多个 ListItem 组件，每个 ListItem 组件中包含一个 Text 组件，用于显示列表项的内容。列表项的宽度为 100%，高度为 80vp，字体大小为 16vp，文本居中对齐，背景颜色为白色，边框宽度为 1vp。\n\n加载指示器通过 Row 组件实现，宽度为 100%，高度为 64vp，内容居中对齐。加载指示器中包含一个 LoadingProgress 组件和一个 Text 组件，用于显示加载进度和加载中的文字。加载指示器的可见性根据加载状态动态变化。\n\n组件的功能包括边界刷新回弹效果、列表滚动加载数据、刷新状态的动态变化等。通过 onScrollIndex 和 onScrollFrameBegin 事件监听列表的滚动状态，实现数据的动态加载。通过 onOffsetChange 和 onStateChange 事件监听刷新状态的变化，实现刷新指示器的动态显示。",
            "code": "@Entry\n@Component\nstruct ListRefreshLoad {\n  @State arr: Array<number> = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // 列表数据\n  @State refreshing: boolean = false; // 刷新状态\n  @State refreshOffset: number = 0; // 刷新偏移量\n  @State refreshState: RefreshStatus = RefreshStatus.Inactive; // 刷新状态枚举\n  @State canLoad: boolean = false; // 是否可以加载更多数据\n  @State isLoading: boolean = false; // 是否正在加载数据\n\n  @Builder\n  refreshBuilder() {\n    Stack({ alignContent: Alignment.Bottom }) {\n      // 当刷新状态不为 Inactive 和 Done 时，显示刷新进度\n      if (this.refreshState != RefreshStatus.Inactive && this.refreshState != RefreshStatus.Done) {\n        Progress({ value: this.refreshOffset, total: 64, type: ProgressType.Ring })\n          .width(32).height(32) // 进度条的宽度和高度\n          .style({ status: this.refreshing ? ProgressStatus.LOADING : ProgressStatus.PROGRESSING }) // 进度条的样式\n          .margin(10) // 进度条的边距\n      }\n    }\n    .clip(true) // 裁剪超出部分\n    .height(\"100%\") // 高度为 100%\n    .width(\"100%\") // 宽度为 100%\n  }\n\n  @Builder\n  footer() {\n    Row() {\n      LoadingProgress().height(32).width(48) // 加载进度条的宽度和高度\n      Text(\"加载中\") // 加载中的文字\n    }.width(\"100%\") // 宽度为 100%\n    .height(64) // 高度为 64vp\n    .justifyContent(FlexAlign.Center) // 内容居中对齐\n    .visibility(this.isLoading ? Visibility.Visible : Visibility.Hidden) // 根据加载状态显示或隐藏\n  }\n\n  build() {\n    Refresh({ refreshing: $$this.refreshing, builder: this.refreshBuilder() }) {\n      List() {\n        ForEach(this.arr, (item: number) => {\n          ListItem() {\n            Text('' + item)\n              .width('100%') // 宽度为 100%\n              .height(80) // 高度为 80vp\n              .fontSize(16) // 字体大小为 16vp\n              .textAlign(TextAlign.Center) // 文本居中对齐\n              .backgroundColor(0xFFFFFF) // 背景颜色为白色\n          }.borderWidth(1) // 边框宽度为 1vp\n        }, (item: string) => item)\n\n        ListItem() {\n          this.footer(); // 加载指示器\n        }\n      }\n      .onScrollIndex((start: number, end: number) => {\n        // 当可以加载更多数据且滚动到列表末尾时，加载更多数据\n        if (this.canLoad && end >= this.arr.length - 1) {\n          this.canLoad = false;\n          this.isLoading = true;\n\n          setTimeout(() => {\n            for (let i = 0; i < 10; i++) {\n              this.arr.push(this.arr.length);\n              this.isLoading = false;\n            }\n          }, 700) // 模拟加载延迟\n        }\n      })\n      .onScrollFrameBegin((offset: number, state: ScrollState) => {\n        // 当滚动偏移量大于 5 且不在加载状态时，允许加载更多数据\n        if (offset > 5 && !this.isLoading) {\n          this.canLoad = true;\n        }\n        return { offsetRemain: offset };\n      })\n      .scrollBar(BarState.Off) // 关闭滚动条\n      .edgeEffect(EdgeEffect.Spring, { alwaysEnabled: true }) // 启用边界刷新回弹效果\n    }\n    .width('100%') // 宽度为 100%\n    .height('100%') // 高度为 100%\n    .backgroundColor(0xDCDCDC) // 背景颜色为 0xDCDCDC\n    .onOffsetChange((offset: number) => {\n      this.refreshOffset = offset; // 更新刷新偏移量\n    })\n    .onStateChange((state: RefreshStatus) => {\n      this.refreshState = state; // 更新刷新状态\n    })\n    .onRefreshing(() => {\n      setTimeout(() => {\n        this.refreshing = false; // 模拟刷新完成\n      }, 2000) // 模拟刷新延迟\n    })\n  }\n}"
        }
    ],
    "is_common_attrs": true
}