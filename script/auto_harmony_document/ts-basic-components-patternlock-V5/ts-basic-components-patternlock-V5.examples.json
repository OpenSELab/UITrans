[
    {
        "description": "该组件实现了一个图案锁（Pattern Lock）的示例应用。布局宽度占据整个屏幕，高度设为 100%，内边距为 20vp。组件的垂直方向上被分为两个主要部分：顶部是一个文本提示信息，底部是一个图案锁组件和一个重置按钮。\n\n文本提示信息用于显示用户操作的反馈，如密码输入的提示或错误信息。文本居中对齐，字体大小为 20，边距为 20vp。\n\n图案锁组件是一个自定义的组件，用于用户绘制图案密码。组件的宽度为 200vp，高度根据宽度自适应。图案锁的圆点半径为 9vp，路径宽度为 18vp。激活状态的圆点颜色为 '#B0C4DE'，选中状态的圆点颜色为 '#228B22'，路径颜色为 '#90EE90'，背景颜色为 '#F5F5F5'。激活状态的圆点样式包括颜色、半径（16vp）和波纹效果。\n\n图案锁组件支持自动重置功能，当用户完成一次图案绘制后，如果密码不符合要求，图案会自动重置。组件还支持两个主要的事件回调：`onDotConnect` 和 `onPatternComplete`。`onDotConnect` 事件在用户连接每个圆点时触发，`onPatternComplete` 事件在用户完成图案绘制时触发。\n\n重置按钮用于重置图案锁和相关状态。按钮的文本为 'Reset PatternLock'，边距为 30vp。点击按钮会重置图案锁控制器，清空密码状态，并将提示信息重置为初始状态。\n\n整个布局通过 Column 组件保证文本提示信息、图案锁组件和重置按钮在垂直方向上有序排列，确保界面整洁美观。",
        "code": "import { LengthUnit } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct PatternLockExample {\n  @State passwords: Number[] = [] // 存储用户输入的密码\n  @State message: string = 'please input password!' // 显示给用户的提示信息\n  private patternLockController: PatternLockController = new PatternLockController() // 控制图案锁的控制器\n\n  build() {\n    Column() {\n      Text(this.message) // 显示提示信息\n        .textAlign(TextAlign.Center) // 文本居中对齐\n        .margin(20) // 文本上下边距为 20vp\n        .fontSize(20) // 文本字体大小为 20\n\n      PatternLock(this.patternLockController) // 创建图案锁组件\n        .sideLength(200) // 图案锁的边长为 200vp\n        .circleRadius(9) // 圆点半径为 9vp\n        .pathStrokeWidth(18) // 路径宽度为 18vp\n        .activeColor('#B0C4DE') // 激活状态的圆点颜色\n        .selectedColor('#228B22') // 选中状态的圆点颜色\n        .pathColor('#90EE90') // 路径颜色\n        .backgroundColor('#F5F5F5') // 背景颜色\n        .autoReset(true) // 自动重置功能\n        .activateCircleStyle({\n          color: '#90EE90', // 激活状态的圆点颜色\n          radius: { value: 16, unit: LengthUnit.VP }, // 激活状态的圆点半径为 16vp\n          enableWaveEffect: true // 启用波纹效果\n        })\n        .onDotConnect((index: number) => {\n          console.log(\"onDotConnect index: \" + index) // 连接圆点时触发的事件\n        })\n        .onPatternComplete((input: Array<number>) => {\n          if (input === null || input === undefined || input.length < 5) {\n            this.message = 'The password length needs to be greater than 5, please enter again.' // 密码长度不足时的提示信息\n            return\n          }\n\n          if (this.passwords.length > 0) {\n            if (this.passwords.toString() === input.toString()) {\n              this.passwords = input // 更新密码\n              this.message = 'Set password successfully: ' + this.passwords.toString() // 设置密码成功时的提示信息\n              this.patternLockController.setChallengeResult(PatternLockChallengeResult.CORRECT) // 设置挑战结果为正确\n            } else {\n              this.message = 'Inconsistent passwords, please enter again.' // 密码不一致时的提示信息\n              this.patternLockController.setChallengeResult(PatternLockChallengeResult.WRONG) // 设置挑战结果为错误\n            }\n          } else {\n            this.passwords = input // 更新密码\n            this.message = \"Please enter again.\" // 提示用户再次输入\n          }\n        })\n\n      Button('Reset PatternLock') // 重置按钮\n        .margin(30) // 按钮上下边距为 30vp\n        .onClick(() => {\n          this.patternLockController.reset() // 重置图案锁控制器\n          this.passwords = [] // 清空密码\n          this.message = 'Please input password' // 重置提示信息\n        })\n    }.width('100%').height('100%') // 布局宽度占据整个屏幕，高度设为 100%\n  }\n}"
    }
]