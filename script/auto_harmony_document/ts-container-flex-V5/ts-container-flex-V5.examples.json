[
    {
        "description": "该组件通过 Flex 布局实现了一个展示多种对齐方式的界面。布局宽度占据整个屏幕，高度设为 80vp，内边距为 10vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一个 Flex 容器。每个 Flex 容器的子组件以水平布局方式排列，子组件之间的间距均匀分布，且对齐方式根据标题所示进行设置。\n子组件的样式包括背景颜色、宽度和高度等属性，支持不同的样式展示。子组件组之间通过 Column 组件进行分隔。子组件的功能包括根据不同的对齐方式进行展示，用户可以通过查看不同对齐方式的效果来理解其功能。\n整个布局通过 Column 布局保证子组件在垂直方向上有序排列，确保界面整洁美观。",
        "code": "@Component\nstruct AlignItemsFlex {\n  alignItems : number = 0; // 定义对齐方式的属性，默认为 0\n\n  build() {\n    Flex({ alignItems: this.alignItems }) { // 创建 Flex 容器，设置对齐方式\n      Text('1').width('33%').height(30).backgroundColor(0xF5DEB3) // 创建第一个文本组件，设置宽度、高度和背景颜色\n      Text('2').width('33%').height(40).backgroundColor(0xD2B48C) // 创建第二个文本组件，设置宽度、高度和背景颜色\n      Text('3').width('33%').height(50).backgroundColor(0xF5DEB3) // 创建第三个文本组件，设置宽度、高度和背景颜色\n    }\n    .size({width: '90%', height: 80}) // 设置 Flex 容器的尺寸\n    .padding(10) // 设置 Flex 容器的内边距\n    .backgroundColor(0xAFEEEE) // 设置 Flex 容器的背景颜色\n  }\n}\n\n@Entry\n@Component\nstruct FlexExample4 {\n  build() {\n    Column() { // 创建垂直布局容器\n      Column({ space: 5 }) { // 创建垂直布局容器，设置子组件之间的间距\n        Text('alignItems:Auto').fontSize(9).fontColor(0xCCCCCC).width('90%') // 创建文本组件，设置字体大小、颜色和宽度\n        AlignItemsFlex({ alignItems: ItemAlign.Auto }) // 创建 AlignItemsFlex 组件，设置对齐方式为自动\n\n        Text('alignItems:Start').fontSize(9).fontColor(0xCCCCCC).width('90%') // 创建文本组件，设置字体大小、颜色和宽度\n        AlignItemsFlex({ alignItems: ItemAlign.Start }) // 创建 AlignItemsFlex 组件，设置对齐方式为首部对齐\n\n        Text('alignItems:Center').fontSize(9).fontColor(0xCCCCCC).width('90%') // 创建文本组件，设置字体大小、颜色和宽度\n        AlignItemsFlex({ alignItems: ItemAlign.Center }) // 创建 AlignItemsFlex 组件，设置对齐方式为居中对齐\n\n        Text('alignItems:End').fontSize(9).fontColor(0xCCCCCC).width('90%') // 创建文本组件，设置字体大小、颜色和宽度\n        AlignItemsFlex({ alignItems: ItemAlign.End }) // 创建 AlignItemsFlex 组件，设置对齐方式为尾部对齐\n\n        Text('alignItems:Stretch').fontSize(9).fontColor(0xCCCCCC).width('90%') // 创建文本组件，设置字体大小、颜色和宽度\n        AlignItemsFlex({ alignItems: ItemAlign.Stretch }) // 创建 AlignItemsFlex 组件，设置对齐方式为拉伸填充\n\n        Text('alignItems:Baseline').fontSize(9).fontColor(0xCCCCCC).width('90%') // 创建文本组件，设置字体大小、颜色和宽度\n        AlignItemsFlex({ alignItems: ItemAlign.Baseline }) // 创建 AlignItemsFlex 组件，设置对齐方式为基线对齐\n      }.width('100%').margin({ top: 5 }) // 设置 Column 容器的宽度和顶部外边距\n    }.width('100%') // 设置 Column 容器的宽度\n  }\n}"
    },
    {
        "description": "该组件通过 Flex 布局展示了三种不同的子组件排列方式：多行布局（Wrap）、单行布局（NoWrap）和反向多行布局（WrapReverse）。布局宽度占据整个屏幕，内部包含三个子组件，每个子组件的宽度为屏幕宽度的90%，并通过 Column 组件进行垂直排列。每个子组件内部包含一个标题和一组 Text 组件，这些 Text 组件通过 Flex 布局进行排列。\n\n在多行布局（Wrap）中，子组件在宽度不足时会自动换行，形成多行排列。在单行布局（NoWrap）中，子组件不会换行，即使宽度不足也会保持在同一行。在反向多行布局（WrapReverse）中，子组件同样会在宽度不足时换行，但换行的方向是从下到上，形成反向的多行排列。\n\n每个 Text 组件的样式包括宽度为50%、高度为50vp，并设置了不同的背景颜色。Flex 组件的背景颜色为0xAFEEEE，内边距为10vp，确保子组件之间有一定的间距。整个布局通过 Column 组件保证子组件在垂直方向上有序排列，确保界面整洁美观。",
        "code": "@Entry\n@Component\nstruct FlexExample2 {\n  build() {\n    Column() {\n      Column({ space: 5 }) {\n        Text('Wrap').fontSize(9).fontColor(0xCCCCCC).width('90%') // 标题文本，字体大小为9，颜色为0xCCCCCC，宽度为90%\n        Flex({ wrap: FlexWrap.Wrap }) { // 子组件多行布局\n          Text('1').width('50%').height(50).backgroundColor(0xF5DEB3) // 文本内容为'1'，宽度为50%，高度为50vp，背景颜色为0xF5DEB3\n          Text('2').width('50%').height(50).backgroundColor(0xD2B48C) // 文本内容为'2'，宽度为50%，高度为50vp，背景颜色为0xD2B48C\n          Text('3').width('50%').height(50).backgroundColor(0xD2B48C) // 文本内容为'3'，宽度为50%，高度为50vp，背景颜色为0xD2B48C\n        }\n        .width('90%') // Flex 组件宽度为90%\n        .padding(10) // 内边距为10vp\n        .backgroundColor(0xAFEEEE) // 背景颜色为0xAFEEEE\n\n        Text('NoWrap').fontSize(9).fontColor(0xCCCCCC).width('90%') // 标题文本，字体大小为9，颜色为0xCCCCCC，宽度为90%\n        Flex({ wrap: FlexWrap.NoWrap }) { // 子组件单行布局\n          Text('1').width('50%').height(50).backgroundColor(0xF5DEB3) // 文本内容为'1'，宽度为50%，高度为50vp，背景颜色为0xF5DEB3\n          Text('2').width('50%').height(50).backgroundColor(0xD2B48C) // 文本内容为'2'，宽度为50%，高度为50vp，背景颜色为0xD2B48C\n          Text('3').width('50%').height(50).backgroundColor(0xF5DEB3) // 文本内容为'3'，宽度为50%，高度为50vp，背景颜色为0xF5DEB3\n        }\n        .width('90%') // Flex 组件宽度为90%\n        .padding(10) // 内边距为10vp\n        .backgroundColor(0xAFEEEE) // 背景颜色为0xAFEEEE\n\n        Text('WrapReverse').fontSize(9).fontColor(0xCCCCCC).width('90%') // 标题文本，字体大小为9，颜色为0xCCCCCC，宽度为90%\n        Flex({ wrap: FlexWrap.WrapReverse , direction:FlexDirection.Row }) { // 子组件反向多行布局\n          Text('1').width('50%').height(50).backgroundColor(0xF5DEB3) // 文本内容为'1'，宽度为50%，高度为50vp，背景颜色为0xF5DEB3\n          Text('2').width('50%').height(50).backgroundColor(0xD2B48C) // 文本内容为'2'，宽度为50%，高度为50vp，背景颜色为0xD2B48C\n          Text('3').width('50%').height(50).backgroundColor(0xD2B48C) // 文本内容为'3'，宽度为50%，高度为50vp，背景颜色为0xD2B48C\n        }\n        .width('90%') // Flex 组件宽度为90%\n        .height(120) // 高度为120vp\n        .padding(10) // 内边距为10vp\n        .backgroundColor(0xAFEEEE) // 背景颜色为0xAFEEEE\n      }.width('100%').margin({ top: 5 }) // Column 组件宽度为100%，顶部外边距为5vp\n    }.width('100%') // 最外层 Column 组件宽度为100%\n  }\n}"
    },
    {
        "description": "该组件通过 Flex 布局实现了一个展示多种对齐方式的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一个子组件。每个子组件通过 Flex 布局实现不同的对齐方式，子组件之间的间距均匀分布，且对齐方式为居中对齐。\n子组件的样式包括背景颜色、宽度和高度等属性，支持不同的样式展示。子组件的功能包括展示不同的对齐方式，用户可以通过查看子组件的排列方式来理解不同的对齐效果。\n整个布局通过 Flex 布局保证子组件在垂直方向上有序排列，确保界面整洁美观。",
        "code": "@Component\nstruct JustifyContentFlex {\n  // 定义一个属性 justifyContent，用于设置 Flex 布局的对齐方式\n  justifyContent : number = 0;\n\n  build() {\n    // 创建一个 Flex 布局，设置对齐方式为 justifyContent\n    Flex({ justifyContent: this.justifyContent }) {\n      // 创建一个 Text 组件，显示文本 '1'，设置宽度为 20%，高度为 50vp，背景颜色为 0xF5DEB3\n      Text('1').width('20%').height(50).backgroundColor(0xF5DEB3)\n      // 创建一个 Text 组件，显示文本 '2'，设置宽度为 20%，高度为 50vp，背景颜色为 0xD2B48C\n      Text('2').width('20%').height(50).backgroundColor(0xD2B48C)\n      // 创建一个 Text 组件，显示文本 '3'，设置宽度为 20%，高度为 50vp，背景颜色为 0xF5DEB3\n      Text('3').width('20%').height(50).backgroundColor(0xF5DEB3)\n    }\n    // 设置 Flex 布局的宽度为 90%\n    .width('90%')\n    // 设置 Flex 布局的内边距为 10vp\n    .padding(10)\n    // 设置 Flex 布局的背景颜色为 0xAFEEEE\n    .backgroundColor(0xAFEEEE)\n  }\n}\n\n@Entry\n@Component\nstruct FlexExample3 {\n  build() {\n    // 创建一个 Column 布局，用于垂直排列子组件\n    Column() {\n      // 创建一个 Column 布局，设置子组件之间的间距为 5vp\n      Column({ space: 5 }) {\n        // 创建一个 Text 组件，显示文本 'justifyContent:Start'，设置字体大小为 9，字体颜色为 0xCCCCCC，宽度为 90%\n        Text('justifyContent:Start').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个 JustifyContentFlex 组件，设置对齐方式为 FlexAlign.Start\n        JustifyContentFlex({ justifyContent: FlexAlign.Start }) // 子组件在容器主轴上首端对齐\n\n        // 创建一个 Text 组件，显示文本 'justifyContent:Center'，设置字体大小为 9，字体颜色为 0xCCCCCC，宽度为 90%\n        Text('justifyContent:Center').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个 JustifyContentFlex 组件，设置对齐方式为 FlexAlign.Center\n        JustifyContentFlex({ justifyContent: FlexAlign.Center }) // 子组件在容器主轴上居中对齐\n\n        // 创建一个 Text 组件，显示文本 'justifyContent:End'，设置字体大小为 9，字体颜色为 0xCCCCCC，宽度为 90%\n        Text('justifyContent:End').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个 JustifyContentFlex 组件，设置对齐方式为 FlexAlign.End\n        JustifyContentFlex({ justifyContent: FlexAlign.End }) // 子组件在容器主轴上尾端对齐\n\n        // 创建一个 Text 组件，显示文本 'justifyContent:SpaceBetween'，设置字体大小为 9，字体颜色为 0xCCCCCC，宽度为 90%\n        Text('justifyContent:SpaceBetween').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个 JustifyContentFlex 组件，设置对齐方式为 FlexAlign.SpaceBetween\n        JustifyContentFlex({ justifyContent: FlexAlign.SpaceBetween }) // 子组件在容器主轴上均分容器布局，第一个子组件与行首对齐，最后一个子组件与行尾对齐。\n\n        // 创建一个 Text 组件，显示文本 'justifyContent:SpaceAround'，设置字体大小为 9，字体颜色为 0xCCCCCC，宽度为 90%\n        Text('justifyContent:SpaceAround').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个 JustifyContentFlex 组件，设置对齐方式为 FlexAlign.SpaceAround\n        JustifyContentFlex({ justifyContent: FlexAlign.SpaceAround }) // 子组件在容器主轴上均分容器布局，第一个子组件到行首的距离和最后一个子组件到行尾的距离是相邻子组件之间距离的一半。\n\n        // 创建一个 Text 组件，显示文本 'justifyContent:SpaceEvenly'，设置字体大小为 9，字体颜色为 0xCCCCCC，宽度为 90%\n        Text('justifyContent:SpaceEvenly').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个 JustifyContentFlex 组件，设置对齐方式为 FlexAlign.SpaceEvenly\n        JustifyContentFlex({ justifyContent: FlexAlign.SpaceEvenly }) // 子组件在容器主轴上均分容器布局，子组件之间的距离与第一子组件到行首、最后一个子组件到行尾的距离相等\n      }\n      // 设置 Column 布局的宽度为 100%，顶部外边距为 5vp\n      .width('100%').margin({ top: 5 })\n    }\n    // 设置 Column 布局的宽度为 100%\n    .width('100%')\n  }\n}"
    },
    {
        "description": "该组件通过 Flex 布局展示了三种不同的子组件排列方式：多行布局（Wrap）、单行布局（NoWrap）和反向多行布局（WrapReverse）。布局宽度占据整个屏幕，内部包含多个子组件，每个子组件通过 Flex 组件进行排列。\n\n布局属性：\n- 整个组件的宽度占据整个屏幕（100%）。\n- 内部子组件的宽度为屏幕宽度的90%，并设置了内边距和背景颜色。\n- 子组件之间的间距为5vp。\n\n组件的样式和外观：\n- 文本组件（Text）的字体大小为9vp，颜色为0xCCCCCC，宽度为90%。\n- Flex 组件的背景颜色为0xAFEEEE，内边距为10vp。\n- 子组件（Text）的宽度为40%或50%，高度为50vp，背景颜色分别为0xF5DEB3和0xD2B48C。\n\n组件的排列和嵌套关系：\n- 整个布局通过 Column 组件进行垂直排列。\n- 每个 Flex 组件内部的子组件通过不同的 FlexWrap 属性进行排列：\n  - Wrap：子组件多行布局，子组件之间的主轴和交叉轴间距为50px。\n  - NoWrap：子组件单行布局，子组件之间的主轴和交叉轴间距为50px。\n  - WrapReverse：子组件反向多行布局，子组件之间的主轴和交叉轴间距为50px，布局方向为行方向。\n\n组件的功能和交互：\n- 该示例主要用于展示不同 FlexWrap 属性对子组件排列的影响，无交互功能。",
        "code": "import {LengthMetrics} from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct FlexExample2 {\n  build() {\n    Column() {\n      Column({ space: 5 }) { // 主列布局，子组件间距为5vp\n        Text('Wrap').fontSize(9).fontColor(0xCCCCCC).width('90%') // 文本组件，显示“Wrap”，字体大小9vp，颜色0xCCCCCC，宽度90%\n        Flex({ wrap: FlexWrap.Wrap, space: {main: LengthMetrics.px(50), cross: LengthMetrics.px(50)} }) { // 子组件多行布局，主轴和交叉轴间距为50px\n          Text('1').width('40%').height(50).backgroundColor(0xF5DEB3) // 文本组件，显示“1”，宽度40%，高度50vp，背景颜色0xF5DEB3\n          Text('2').width('40%').height(50).backgroundColor(0xD2B48C) // 文本组件，显示“2”，宽度40%，高度50vp，背景颜色0xD2B48C\n          Text('3').width('40%').height(50).backgroundColor(0xD2B48C) // 文本组件，显示“3”，宽度40%，高度50vp，背景颜色0xD2B48C\n        }\n        .width('90%')\n        .padding(10)\n        .backgroundColor(0xAFEEEE) // Flex组件，宽度90%，内边距10vp，背景颜色0xAFEEEE\n\n        Text('NoWrap').fontSize(9).fontColor(0xCCCCCC).width('90%') // 文本组件，显示“NoWrap”，字体大小9vp，颜色0xCCCCCC，宽度90%\n        Flex({ wrap: FlexWrap.NoWrap, space: {main: LengthMetrics.px(50), cross: LengthMetrics.px(50)} }) { // 子组件单行布局，主轴和交叉轴间距为50px\n          Text('1').width('50%').height(50).backgroundColor(0xF5DEB3) // 文本组件，显示“1”，宽度50%，高度50vp，背景颜色0xF5DEB3\n          Text('2').width('50%').height(50).backgroundColor(0xD2B48C) // 文本组件，显示“2”，宽度50%，高度50vp，背景颜色0xD2B48C\n          Text('3').width('50%').height(50).backgroundColor(0xF5DEB3) // 文本组件，显示“3”，宽度50%，高度50vp，背景颜色0xF5DEB3\n        }\n        .width('90%')\n        .padding(10)\n        .backgroundColor(0xAFEEEE) // Flex组件，宽度90%，内边距10vp，背景颜色0xAFEEEE\n\n        Text('WrapReverse').fontSize(9).fontColor(0xCCCCCC).width('90%') // 文本组件，显示“WrapReverse”，字体大小9vp，颜色0xCCCCCC，宽度90%\n        Flex({ wrap: FlexWrap.WrapReverse, direction:FlexDirection.Row, space: {main: LengthMetrics.px(50), cross: LengthMetrics.px(50)} }) { // 子组件反向多行布局，主轴和交叉轴间距为50px，布局方向为行方向\n          Text('1').width('40%').height(50).backgroundColor(0xF5DEB3) // 文本组件，显示“1”，宽度40%，高度50vp，背景颜色0xF5DEB3\n          Text('2').width('40%').height(50).backgroundColor(0xD2B48C) // 文本组件，显示“2”，宽度40%，高度50vp，背景颜色0xD2B48C\n          Text('3').width('40%').height(50).backgroundColor(0xD2B48C) // 文本组件，显示“3”，宽度40%，高度50vp，背景颜色0xD2B48C\n        }\n        .width('90%')\n        .height(120)\n        .padding(10)\n        .backgroundColor(0xAFEEEE) // Flex组件，宽度90%，高度120vp，内边距10vp，背景颜色0xAFEEEE\n      }.width('100%').margin({ top: 5 }) // 子列布局，宽度100%，顶部外边距5vp\n    }.width('100%') // 主列布局，宽度100%\n  }\n}"
    },
    {
        "description": "该组件通过 Flex 布局展示了四种不同的布局方向：行布局（Row）、反向行布局（RowReverse）、列布局（Column）和反向列布局（ColumnReverse）。布局宽度占据整个屏幕，内边距为顶部 5vp。组件的垂直方向上被分为四个部分，每个部分包含一个标题和一组文本框。每个文本框组的文本框以不同的布局方式排列，文本框之间的间距均匀分布，且对齐方式为居中对齐。\n文本框的样式包括背景颜色、宽度和高度等属性，支持不同的样式展示。文本框组之间通过 Flex 组件进行分隔。整个布局通过 Flex 布局保证文本框在垂直方向上有序排列，确保界面整洁美观。",
        "code": "@Entry\n@Component\nstruct FlexExample1 {\n  build() {\n    Column() {\n      Column({ space: 5 }) {\n        // 标题：行布局\n        Text('direction:Row').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // Flex 布局，方向为行布局\n        Flex({ direction: FlexDirection.Row }) { // 子组件在容器主轴上行布局\n          Text('1').width('20%').height(50).backgroundColor(0xF5DEB3) // 文本框1，宽度为20%，高度为50vp，背景颜色为浅棕色\n          Text('2').width('20%').height(50).backgroundColor(0xD2B48C) // 文本框2，宽度为20%，高度为50vp，背景颜色为棕色\n          Text('3').width('20%').height(50).backgroundColor(0xF5DEB3) // 文本框3，宽度为20%，高度为50vp，背景颜色为浅棕色\n          Text('4').width('20%').height(50).backgroundColor(0xD2B48C) // 文本框4，宽度为20%，高度为50vp，背景颜色为棕色\n        }\n        .height(70) // Flex 容器高度为70vp\n        .width('90%') // Flex 容器宽度为90%\n        .padding(10) // Flex 容器内边距为10vp\n        .backgroundColor(0xAFEEEE) // Flex 容器背景颜色为浅蓝色\n\n        // 标题：反向行布局\n        Text('direction:RowReverse').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // Flex 布局，方向为反向行布局\n        Flex({ direction: FlexDirection.RowReverse }) { // 子组件在容器主轴上反向行布局\n          Text('1').width('20%').height(50).backgroundColor(0xF5DEB3) // 文本框1，宽度为20%，高度为50vp，背景颜色为浅棕色\n          Text('2').width('20%').height(50).backgroundColor(0xD2B48C) // 文本框2，宽度为20%，高度为50vp，背景颜色为棕色\n          Text('3').width('20%').height(50).backgroundColor(0xF5DEB3) // 文本框3，宽度为20%，高度为50vp，背景颜色为浅棕色\n          Text('4').width('20%').height(50).backgroundColor(0xD2B48C) // 文本框4，宽度为20%，高度为50vp，背景颜色为棕色\n        }\n        .height(70) // Flex 容器高度为70vp\n        .width('90%') // Flex 容器宽度为90%\n        .padding(10) // Flex 容器内边距为10vp\n        .backgroundColor(0xAFEEEE) // Flex 容器背景颜色为浅蓝色\n\n        // 标题：列布局\n        Text('direction:Column').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // Flex 布局，方向为列布局\n        Flex({ direction: FlexDirection.Column }) { // 子组件在容器主轴上列布局\n          Text('1').width('100%').height(40).backgroundColor(0xF5DEB3) // 文本框1，宽度为100%，高度为40vp，背景颜色为浅棕色\n          Text('2').width('100%').height(40).backgroundColor(0xD2B48C) // 文本框2，宽度为100%，高度为40vp，背景颜色为棕色\n          Text('3').width('100%').height(40).backgroundColor(0xF5DEB3) // 文本框3，宽度为100%，高度为40vp，背景颜色为浅棕色\n          Text('4').width('100%').height(40).backgroundColor(0xD2B48C) // 文本框4，宽度为100%，高度为40vp，背景颜色为棕色\n        }\n        .height(160) // Flex 容器高度为160vp\n        .width('90%') // Flex 容器宽度为90%\n        .padding(10) // Flex 容器内边距为10vp\n        .backgroundColor(0xAFEEEE) // Flex 容器背景颜色为浅蓝色\n\n        // 标题：反向列布局\n        Text('direction:ColumnReverse').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // Flex 布局，方向为反向列布局\n        Flex({ direction: FlexDirection.ColumnReverse }) { // 子组件在容器主轴上反向列布局\n          Text('1').width('100%').height(40).backgroundColor(0xF5DEB3) // 文本框1，宽度为100%，高度为40vp，背景颜色为浅棕色\n          Text('2').width('100%').height(40).backgroundColor(0xD2B48C) // 文本框2，宽度为100%，高度为40vp，背景颜色为棕色\n          Text('3').width('100%').height(40).backgroundColor(0xF5DEB3) // 文本框3，宽度为100%，高度为40vp，背景颜色为浅棕色\n          Text('4').width('100%').height(40).backgroundColor(0xD2B48C) // 文本框4，宽度为100%，高度为40vp，背景颜色为棕色\n        }\n        .height(160) // Flex 容器高度为160vp\n        .width('90%') // Flex 容器宽度为90%\n        .padding(10) // Flex 容器内边距为10vp\n        .backgroundColor(0xAFEEEE) // Flex 容器背景颜色为浅蓝色\n      }.width('100%').margin({ top: 5 }) // 内部 Column 宽度为100%，顶部外边距为5vp\n    }.width('100%') // 外部 Column 宽度为100%\n  }\n}"
    },
    {
        "description": "该组件通过 Flex 布局实现了一个展示多种对齐方式的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一个 Flex 容器。每个 Flex 容器的子组件以多行布局方式排列，子组件之间的间距均匀分布，且对齐方式根据标题内容进行设置。\nFlex 容器的样式包括背景颜色、宽度和高度等属性，支持不同的对齐方式展示。子组件的样式包括背景颜色、宽度和高度等属性，支持不同的样式展示。子组件的功能包括展示文本内容，用户可以通过观察不同对齐方式下的子组件排列效果来理解每种对齐方式的特点。\n整个布局通过 Flex 布局保证子组件在垂直方向上有序排列，确保界面整洁美观。",
        "code": "@Component\nstruct AlignContentFlex {\n  alignContent: number = 0; // 对齐方式的属性，默认为 0\n\n  build() {\n    Flex({ wrap: FlexWrap.Wrap, alignContent: this.alignContent }) { // 创建一个 Flex 容器，设置换行方式为 Wrap，对齐方式为传入的 alignContent 值\n      Text('1').width('50%').height(20).backgroundColor(0xF5DEB3) // 创建一个文本组件，宽度为 50%，高度为 20vp，背景颜色为 0xF5DEB3\n      Text('2').width('50%').height(20).backgroundColor(0xD2B48C) // 创建一个文本组件，宽度为 50%，高度为 20vp，背景颜色为 0xD2B48C\n      Text('3').width('50%').height(20).backgroundColor(0xD2B48C) // 创建一个文本组件，宽度为 50%，高度为 20vp，背景颜色为 0xD2B48C\n    }\n    .size({ width: '90%', height: 90 }) // 设置 Flex 容器的宽度为 90%，高度为 90vp\n    .padding(10) // 设置 Flex 容器的内边距为 10vp\n    .backgroundColor(0xAFEEEE) // 设置 Flex 容器的背景颜色为 0xAFEEEE\n  }\n}\n\n@Entry\n@Component\nstruct FlexExample5 {\n  build() {\n    Column() { // 创建一个垂直布局的容器\n      Column({ space: 5 }) { // 创建一个垂直布局的容器，设置子组件之间的间距为 5vp\n        Text('alignContent:Start').fontSize(9).fontColor(0xCCCCCC).width('90%') // 创建一个文本组件，设置字体大小为 9，字体颜色为 0xCCCCCC，宽度为 90%\n        AlignContentFlex({ alignContent: FlexAlign.Start }) // 创建一个 AlignContentFlex 组件，设置对齐方式为 FlexAlign.Start，即多行布局下子组件首部对齐\n\n        Text('alignContent:Center').fontSize(9).fontColor(0xCCCCCC).width('90%') // 创建一个文本组件，设置字体大小为 9，字体颜色为 0xCCCCCC，宽度为 90%\n        AlignContentFlex({ alignContent: FlexAlign.Center }) // 创建一个 AlignContentFlex 组件，设置对齐方式为 FlexAlign.Center，即多行布局下子组件居中对齐\n\n        Text('alignContent:End').fontSize(9).fontColor(0xCCCCCC).width('90%') // 创建一个文本组件，设置字体大小为 9，字体颜色为 0xCCCCCC，宽度为 90%\n        AlignContentFlex({ alignContent: FlexAlign.End }) // 创建一个 AlignContentFlex 组件，设置对齐方式为 FlexAlign.End，即多行布局下子组件尾部对齐\n\n        Text('alignContent:SpaceBetween').fontSize(9).fontColor(0xCCCCCC).width('90%') // 创建一个文本组件，设置字体大小为 9，字体颜色为 0xCCCCCC，宽度为 90%\n        AlignContentFlex({ alignContent: FlexAlign.SpaceBetween }) // 创建一个 AlignContentFlex 组件，设置对齐方式为 FlexAlign.SpaceBetween，即多行布局下第一行子组件与列首对齐，最后一行子组件与列尾对齐\n\n        Text('alignContent:SpaceAround').fontSize(9).fontColor(0xCCCCCC).width('90%') // 创建一个文本组件，设置字体大小为 9，字体颜色为 0xCCCCCC，宽度为 90%\n        AlignContentFlex({ alignContent: FlexAlign.SpaceAround }) // 创建一个 AlignContentFlex 组件，设置对齐方式为 FlexAlign.SpaceAround，即多行布局下第一行子组件到列首的距离和最后一行子组件到列尾的距离是相邻行之间距离的一半\n\n        Text('alignContent:SpaceEvenly').fontSize(9).fontColor(0xCCCCCC).width('90%') // 创建一个文本组件，设置字体大小为 9，字体颜色为 0xCCCCCC，宽度为 90%\n        Flex({\n          wrap: FlexWrap.Wrap,\n          alignContent: FlexAlign.SpaceEvenly\n        }) { // 创建一个 Flex 容器，设置换行方式为 Wrap，对齐方式为 FlexAlign.SpaceEvenly，即多行布局下相邻行之间的距离与第一行子组件到列首的距离、最后一行子组件到列尾的距离完全一样\n          Text('1').width('50%').height(20).backgroundColor(0xF5DEB3) // 创建一个文本组件，宽度为 50%，高度为 20vp，背景颜色为 0xF5DEB3\n          Text('2').width('50%').height(20).backgroundColor(0xD2B48C) // 创建一个文本组件，宽度为 50%，高度为 20vp，背景颜色为 0xD2B48C\n          Text('3').width('50%').height(20).backgroundColor(0xF5DEB3) // 创建一个文本组件，宽度为 50%，高度为 20vp，背景颜色为 0xF5DEB3\n          Text('4').width('50%').height(20).backgroundColor(0xD2B48C) // 创建一个文本组件，宽度为 50%，高度为 20vp，背景颜色为 0xD2B48C\n          Text('5').width('50%').height(20).backgroundColor(0xF5DEB3) // 创建一个文本组件，宽度为 50%，高度为 20vp，背景颜色为 0xF5DEB3\n        }\n        .size({ width: '90%', height: 100 }) // 设置 Flex 容器的宽度为 90%，高度为 100vp\n        .padding({ left: 10, right: 10 }) // 设置 Flex 容器的左右内边距为 10vp\n        .backgroundColor(0xAFEEEE) // 设置 Flex 容器的背景颜色为 0xAFEEEE\n      }.width('100%').margin({ top: 5 }) // 设置 Column 容器的宽度为 100%，顶部外边距为 5vp\n    }.width('100%') // 设置 Column 容器的宽度为 100%\n  }\n}"
    }
]