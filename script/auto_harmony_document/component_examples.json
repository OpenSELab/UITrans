{
    "AlphabetIndexer": [
        {
            "description": "实现一个带有字母索引器的列表组件，支持通过字母索引快速定位到对应的内容。列表内容分为四个部分，分别对应字母A、B、C、L。字母索引器可以显示所有字母，并在选中特定字母时弹出对应的内容提示。",
            "code": "@Entry\n@Component\nstruct AlphabetIndexerSample {\n  // 定义四个字符串数组，分别对应不同的字母索引内容\n  private arrayA: string[] = ['安']\n  private arrayB: string[] = ['卜', '白', '包', '毕', '丙']\n  private arrayC: string[] = ['曹', '成', '陈', '催']\n  private arrayL: string[] = ['刘', '李', '楼', '梁', '雷', '吕', '柳', '卢']\n  // 定义字母索引的值数组\n  private value: string[] = ['#', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n  'H', 'I', 'J', 'K', 'L', 'M', 'N',\n  'O', 'P', 'Q', 'R', 'S', 'T', 'U',\n  'V', 'W', 'X', 'Y', 'Z']\n\n  build() {\n    Stack({ alignContent: Alignment.Start }) {\n      Row() {\n        // 创建一个列表，显示arrayA, arrayB, arrayC, arrayL的内容\n        List({ space: 20, initialIndex: 0 }) {\n          ForEach(this.arrayA, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayB, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayC, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayL, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n        }\n        .width('50%')\n        .height('100%')\n\n        // 创建字母索引器，并设置其样式和行为\n        AlphabetIndexer({ arrayValue: this.value, selected: 0 })\n          .selectedColor(0xFFFFFF) // 选中项文本颜色\n          .popupColor(0xFFFAF0) // 弹出框文本颜色\n          .selectedBackgroundColor(0xCCCCCC) // 选中项背景颜色\n          .popupBackground(0xD2B48C) // 弹出框背景颜色\n          .usingPopup(true) // 是否显示弹出框\n          .selectedFont({ size: 16, weight: FontWeight.Bolder }) // 选中项字体样式\n          .popupFont({ size: 30, weight: FontWeight.Bolder }) // 弹出框内容的字体样式\n          .itemSize(28) // 每一项的尺寸大小\n          .alignStyle(IndexerAlign.Left) // 弹出框在索引条右侧弹出\n          .popupItemBorderRadius(24) // 设置提示弹窗索引项背板圆角半径\n          .itemBorderRadius(14) // 设置索引项背板圆角半径\n          .popupBackgroundBlurStyle(BlurStyle.NONE) // 设置提示弹窗的背景模糊材质\n          .popupTitleBackground(0xCCCCCC) // 设置提示弹窗首个索引项背板颜色\n          .popupSelectedColor(0x00FF00)\n          .popupUnselectedColor(0x0000FF)\n          .popupItemFont({ size: 30, style: FontStyle.Normal })\n          .popupItemBackgroundColor(0xCCCCCC)\n          .onSelect((index: number) => {\n            console.info(this.value[index] + ' Selected!')\n          })\n          .onRequestPopupData((index: number) => {\n            if (this.value[index] == 'A') {\n              return this.arrayA // 当选中A时，弹出框里面的提示文本列表显示A对应的列表arrayA，选中B、C、L时也同样\n            } else if (this.value[index] == 'B') {\n              return this.arrayB\n            } else if (this.value[index] == 'C') {\n              return this.arrayC\n            } else if (this.value[index] == 'L') {\n              return this.arrayL\n            } else {\n              return [] // 选中其余子母项时，提示文本列表为空\n            }\n          })\n          .onPopupSelect((index: number) => {\n            console.info('onPopupSelected:' + index)\n          })\n      }\n      .width('100%')\n      .height('100%')\n    }\n  }\n}"
        }
    ],
    "Blank": [
        {
            "description": "实现一个简单的蓝牙开关界面，包含一个文本标签和一个开关控件。通过使用Blank组件在文本和开关之间创建空白间隔，以改善布局美观性。整体布局使用Column和Row组件进行嵌套，设置背景颜色、边距和圆角以增强视觉效果。",
            "code": "@Entry\n@Component\nstruct BlankExample {\n  build() {\n    Column() {\n      Row() {\n        Text('Bluetooth').fontSize(18) // 显示蓝牙文本，字体大小设置为18\n        Blank() // 使用Blank组件在文本和开关之间创建空白间隔，以改善布局美观性\n        Toggle({ type: ToggleType.Switch }).margin({ top: 14, bottom: 14, left: 6, right: 6 }) // 创建一个开关类型的Toggle控件，设置其上下左右边距以调整布局\n      }.width('100%').backgroundColor(0xFFFFFF).borderRadius(15).padding({ left: 12 }) // 设置Row组件的宽度为100%，背景颜色为白色，边框圆角为15，左侧内边距为12\n    }.backgroundColor(0xEFEFEF).padding(20) // 设置Column组件的背景颜色为浅灰色，内边距为20\n  }\n}"
        },
        {
            "description": "实现一个包含两个Row组件的Column布局，每个Row组件内包含一个Text组件、一个Blank组件和一个Toggle组件。Blank组件用于在Text和Toggle之间创建空白间隔，并可以设置最小宽度。整个Column组件的背景颜色为浅灰色，内边距为20，宽度为100%。",
            "code": "@Entry\n@Component\nstruct BlankExample {\n  build() {\n    Column({ space: 20 }) {\n      // 第一个Row组件，包含一个Text组件、一个Blank组件和一个Toggle组件\n      Row() {\n        Text('Bluetooth').fontSize(18) // 显示蓝牙文本，字体大小设置为18\n        Blank().color(Color.Yellow) // 使用Blank组件在文本和开关之间创建空白间隔，并设置颜色为黄色\n        Toggle({ type: ToggleType.Switch }).margin({ top: 14, bottom: 14, left: 6, right: 6 }) // 创建一个开关类型的Toggle控件，设置其上下左右边距以调整布局\n      }.backgroundColor(0xFFFFFF).borderRadius(15).padding({ left: 12 }) // 设置Row组件的背景颜色为白色，边框圆角为15，左侧内边距为12\n\n      // 第二个Row组件，包含一个Text组件、一个Blank组件和一个Toggle组件\n      Row() {\n        Text('Bluetooth').fontSize(18) // 显示蓝牙文本，字体大小设置为18\n        // 设置最小宽度为160\n        Blank('160').color(Color.Yellow) // 使用Blank组件在文本和开关之间创建空白间隔，并设置最小宽度为160，颜色为黄色\n        Toggle({ type: ToggleType.Switch }).margin({ top: 14, bottom: 14, left: 6, right: 6 }) // 创建一个开关类型的Toggle控件，设置其上下左右边距以调整布局\n      }.backgroundColor(0xFFFFFF).borderRadius(15).padding({ left: 12 }) // 设置Row组件的背景颜色为白色，边框圆角为15，左侧内边距为12\n\n    }.backgroundColor(0xEFEFEF).padding(20).width('100%') // 设置Column组件的背景颜色为浅灰色，内边距为20，宽度为100%\n  }\n}"
        }
    ],
    "Button": [
        {
            "description": "实现一个按钮组件，按钮显示的文本为“overflowTextOverlengthTextOverflow.Clip”，按钮的宽度为200像素，高度为100像素。按钮的文本样式设置为固定字体大小20，字体粗细为Bolder，字体家族为cursive，字体样式为斜体。按钮的文本溢出时会进行裁剪，并且最大行数为1。按钮的整体字体大小为40。",
            "code": "@Entry\n@Component\nstruct buttonTestDemo {\n  @State txt: string = 'overflowTextOverlengthTextOverflow.Clip'; // 按钮显示的文本\n  @State widthShortSize: number = 200; // 按钮的宽度\n\n  build() {\n    Row() {\n      Column() {\n        Button(this.txt)\n          .width(this.widthShortSize) // 设置按钮宽度为200像素\n          .height(100) // 设置按钮高度为100像素\n          .labelStyle({ \n            overflow: TextOverflow.Clip, // 文本溢出时裁剪\n            maxLines: 1, // 最大行数为1\n            minFontSize: 20, // 最小字体大小为20\n            maxFontSize: 20, // 最大字体大小为20\n            font: {\n              size: 20, // 字体大小为20\n              weight: FontWeight.Bolder, // 字体粗细为Bolder\n              family: 'cursive', // 字体家族为cursive\n              style: FontStyle.Italic // 字体样式为斜体\n            }\n          })\n          .fontSize(40) // 按钮的整体字体大小为40\n      }\n      .width('100%') // 设置Column的宽度为100%\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}"
        },
        {
            "description": "实现一个带有自定义样式的按钮组件，按钮的启用状态可以通过一个开关进行控制。按钮点击时会记录点击位置的坐标，并更新按钮的样式以反映点击位置。",
            "code": "// 自定义按钮样式类，实现 ContentModifier 接口\\nclass MyButtonStyle implements ContentModifier<ButtonConfiguration> {\\n  x: number = 0 // 点击位置的 x 坐标\\n  y: number = 0 // 点击位置的 y 坐标\\n  selectedColor: Color = Color.Black // 按压状态下的颜色\\n\\n  // 构造函数，初始化 x、y 坐标和按压状态下的颜色\\n  constructor(x: number, y: number, ColorType: Color) {\\n    this.x = x\\n    this.y = y\\n    this.selectedColor = ColorType\\n  }\\n\\n  // 应用内容方法，返回 WrappedBuilder\\n  applyContent(): WrappedBuilder<[ButtonConfiguration]> {\\n    return wrapBuilder(buildButton1) // 返回按钮构建器\\n  }\\n}\\n\\n// 按钮构建器函数，根据配置构建按钮内容\\n@Builder function buildButton1(config: ButtonConfiguration) {\\n  Column({ space: 30 }) { // 垂直布局，组件间距为 30vp\\n    Text(config.enabled ? \\\"enabled true\\\" : \\\"enabled false\\\") // 显示按钮启用状态\\n    Text('圆圈状态' + (config.pressed ? \\\"（ 按压 ）\\\" : \\\"（ 非按压 ）\\\")) // 显示按钮按压状态\\n    Text('点击位置x坐标：' + (config.enabled ? (config.contentModifier as MyButtonStyle).x : \\\"0\\\")) // 显示点击位置的 x 坐标\\n    Text('点击位置y坐标：' + (config.enabled ? (config.contentModifier as MyButtonStyle).y : \\\"0\\\")) // 显示点击位置的 y 坐标\\n    Circle({ width: 50, height: 50 }) // 圆形组件，宽度和高度为 50vp\\n      .fill(config.pressed ? (config.contentModifier as MyButtonStyle).selectedColor : Color.Black) // 根据按压状态设置填充颜色\\n      .gesture(\\n        TapGesture({ count: 1 }).onAction((event: GestureEvent) => { // 单击手势，触发点击事件\\n          config.triggerClick(event.fingerList[0].localX, event.fingerList[0].localY) // 触发点击事件，传递点击位置\\n        })).opacity(config.enabled ? 1 : 0.1) // 根据启用状态设置透明度\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct ButtonExample {\\n  @State buttonEnabled: boolean = true; // 按钮启用状态\\n  @State positionX: number = 0 // 点击位置的 x 坐标\\n  @State positionY: number = 0 // 点击位置的 y 坐标\\n  @State state: boolean[] = [true, false] // 按钮状态数组\\n  @State index: number = 0 // 按钮状态索引\\n\\n  build() {\\n    Column() { // 垂直布局\\n      Button('OK') // 按钮组件，显示文本 \\\"OK\\\"\\n        .contentModifier(new MyButtonStyle(this.positionX, this.positionY, Color.Red)) // 设置按钮样式\\n        .onClick((event) => { // 点击事件处理函数\\n          console.info('change' + JSON.stringify(event)) // 输出点击事件信息\\n          this.positionX = event.displayX // 更新点击位置的 x 坐标\\n          this.positionY = event.displayY // 更新点击位置的 y 坐标\\n        }).enabled(this.buttonEnabled) // 设置按钮启用状态\\n      Row() { // 水平布局\\n        Toggle({ type: ToggleType.Switch, isOn: true }) // 开关组件，初始状态为开启\\n          .onChange((value: boolean) => { // 开关状态变化事件处理函数\\n            if (value) {\\n              this.buttonEnabled = true // 启用按钮\\n            } else {\\n              this.buttonEnabled = false // 禁用按钮\\n            }\\n          }).margin({ left: -80 }) // 设置开关组件的左边距\\n      }\\n    }.height('100%').width('100%').justifyContent(FlexAlign.Center) // 设置布局的高度和宽度为 100%，并居中对齐\\n  }\\n}"
        },
        {
            "description": "实现一个展示不同样式和角色的按钮组件示例。通过Flex布局将按钮分组展示，每组按钮具有不同的样式（强调、普通、文本）和角色（正常、错误）。",
            "code": "@Entry\n@Component\nstruct ButtonExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      // 显示标题“Role is Normal button”，字体大小为9，颜色为0xCCCCCC\n      Text('Role is Normal button').fontSize(9).fontColor(0xCCCCCC)\n      // 使用Flex布局，子元素居中对齐，子元素之间有空间间隔\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        // 创建一个强调样式且角色为正常的按钮，按钮文本为“Emphasized”\n        Button('Emphasized', { buttonStyle: ButtonStyleMode.EMPHASIZED, role: ButtonRole.NORMAL });\n        // 创建一个普通样式且角色为正常的按钮，按钮文本为“Normal”\n        Button('Normal', { buttonStyle: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL });\n        // 创建一个文本样式且角色为正常的按钮，按钮文本为“Textual”\n        Button('Textual', { buttonStyle: ButtonStyleMode.TEXTUAL, role: ButtonRole.NORMAL });\n      }\n      // 显示标题“Role is Error button”，字体大小为9，颜色为0xCCCCCC\n      Text('Role is Error button').fontSize(9).fontColor(0xCCCCCC)\n      // 使用Flex布局，子元素居中对齐，子元素之间有空间间隔\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        // 创建一个强调样式且角色为错误的按钮，按钮文本为“Emphasized”\n        Button('Emphasized', { buttonStyle: ButtonStyleMode.EMPHASIZED, role: ButtonRole.ERROR});\n        // 创建一个普通样式且角色为错误的按钮，按钮文本为“Normal”\n        Button('Normal', { buttonStyle: ButtonStyleMode.NORMAL, role: ButtonRole.ERROR });\n        // 创建一个文本样式且角色为错误的按钮，按钮文本为“Textual”\n        Button('Textual', { buttonStyle: ButtonStyleMode.TEXTUAL, role: ButtonRole.ERROR });\n      }\n    }.height(200).padding({ left: 35, right: 35, top: 35 })\n  }\n}"
        },
        {
            "description": "实现一个展示不同样式和大小的按钮的示例组件。组件包含三个部分，每个部分展示一组不同样式和大小的按钮。第一部分展示正常大小的按钮，第二和第三部分展示小尺寸的按钮。每个按钮都有三种样式：强调样式、普通样式和文本样式。",
            "code": "@Entry\n@Component\nstruct ButtonExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      // 显示标题“Normal size button”\n      Text('Normal size button').fontSize(9).fontColor(0xCCCCCC)\n      \n      // 创建一个Flex布局，用于排列正常大小的按钮\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        // 创建一个强调样式按钮，显示文本“Emphasized”\n        Button('Emphasized', { buttonStyle: ButtonStyleMode.EMPHASIZED });\n        // 创建一个普通样式按钮，显示文本“Normal”\n        Button('Normal', { buttonStyle: ButtonStyleMode.NORMAL });\n        // 创建一个文本样式按钮，显示文本“Textual”\n        Button('Textual', { buttonStyle: ButtonStyleMode.TEXTUAL });\n      }\n\n      // 显示标题“Small size button”\n      Text('Small size button').fontSize(9).fontColor(0xCCCCCC)\n      \n      // 创建一个Flex布局，用于排列小尺寸的按钮\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        // 创建一个小尺寸强调样式按钮，显示文本“Emphasized”\n        Button('Emphasized', { controlSize: ControlSize.SMALL, buttonStyle: ButtonStyleMode.EMPHASIZED });\n        // 创建一个小尺寸普通样式按钮，显示文本“Normal”\n        Button('Normal', { controlSize: ControlSize.SMALL, buttonStyle: ButtonStyleMode.NORMAL });\n        // 创建一个小尺寸文本样式按钮，显示文本“Textual”\n        Button('Textual', { controlSize: ControlSize.SMALL, buttonStyle: ButtonStyleMode.TEXTUAL });\n      }\n\n      // 显示标题“Small size button”\n      Text('Small size button').fontSize(9).fontColor(0xCCCCCC)\n      \n      // 创建一个Flex布局，用于排列小尺寸的按钮\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        // 创建一个小尺寸强调样式按钮，显示文本“Emphasized”\n        Button('Emphasized').controlSize(ControlSize.SMALL).buttonStyle(ButtonStyleMode.EMPHASIZED);\n        // 创建一个小尺寸普通样式按钮，显示文本“Normal”\n        Button('Normal').controlSize(ControlSize.SMALL).buttonStyle(ButtonStyleMode.NORMAL);\n        // 创建一个小尺寸文本样式按钮，显示文本“Textual”\n        Button('Textual').controlSize(ControlSize.SMALL).buttonStyle(ButtonStyleMode.TEXTUAL);\n      }\n\n    }.height(400).padding({ left: 35, right: 35, top: 35 })\n  }\n}"
        },
        {
            "description": "实现一个包含多种按钮样式的示例组件，展示不同类型的按钮（普通按钮、胶囊按钮、圆形按钮）及其状态效果（启用、禁用、加载中）。",
            "code": "@Entry\n@Component\nstruct ButtonExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      // 显示文本“Normal button”\n      Text('Normal button').fontSize(9).fontColor(0xCCCCCC)\n      // 创建一个Flex布局，对齐方式为中心对齐，间距均匀分布\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        // 创建一个显示文本为“OK”的普通按钮，启用状态效果\n        Button('OK', { type: ButtonType.Normal, stateEffect: True })\n          .borderRadius(8) // 设置按钮的边框圆角半径为8\n          .backgroundColor(0x317aff) // 设置按钮的背景颜色为蓝色\n          .width(90) // 设置按钮的宽度为90\n          .onClick(() => {\n            console.log('ButtonType.Normal') // 点击按钮时在控制台输出信息\n          })\n        // 创建一个显示加载中的普通按钮，启用状态效果\n        Button({ type: ButtonType.Normal, stateEffect: True }) {\n          Row() {\n            LoadingProgress().width(20).height(20).margin({ left: 12 }).color(0xFFFFFF) // 加载进度条\n            Text('loading').fontSize(12).fontColor(0xffffff).margin({ left: 5, right: 12 }) // 加载文本\n          }.alignItems(VerticalAlign.Center) // 垂直居中对齐\n        }.borderRadius(8).backgroundColor(0x317aff).width(90).height(40) // 设置按钮样式\n\n        // 创建一个显示文本为“Disable”的普通按钮，禁用状态效果，设置透明度为0.4\n        Button('Disable', { type: ButtonType.Normal, stateEffect: False }).opacity(0.4)\n          .borderRadius(8).backgroundColor(0x317aff).width(90)\n      }\n\n      // 显示文本“Capsule button”\n      Text('Capsule button').fontSize(9).fontColor(0xCCCCCC)\n      // 创建一个Flex布局，对齐方式为中心对齐，间距均匀分布\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        // 创建一个显示文本为“OK”的胶囊按钮，启用状态效果\n        Button('OK', { type: ButtonType.Capsule, stateEffect: True }).backgroundColor(0x317aff).width(90)\n        // 创建一个显示加载中的胶囊按钮，启用状态效果\n        Button({ type: ButtonType.Capsule, stateEffect: True }) {\n          Row() {\n            LoadingProgress().width(20).height(20).margin({ left: 12 }).color(0xFFFFFF) // 加载进度条\n            Text('loading').fontSize(12).fontColor(0xffffff).margin({ left: 5, right: 12 }) // 加载文本\n          }.alignItems(VerticalAlign.Center).width(90).height(40) // 垂直居中对齐\n        }.backgroundColor(0x317aff)\n\n        // 创建一个显示文本为“Disable”的胶囊按钮，禁用状态效果，设置透明度为0.4\n        Button('Disable', { type: ButtonType.Capsule, stateEffect: False }).opacity(0.4)\n          .backgroundColor(0x317aff).width(90)\n      }\n\n      // 显示文本“Circle button”\n      Text('Circle button').fontSize(9).fontColor(0xCCCCCC)\n      // 创建一个Flex布局，对齐方式为中心对齐，允许换行\n      Flex({ alignItems: ItemAlign.Center, wrap: FlexWrap.Wrap }) {\n        // 创建一个显示加载中的圆形按钮，启用状态效果\n        Button({ type: ButtonType.Circle, stateEffect: True }) {\n          LoadingProgress().width(20).height(20).color(0xFFFFFF) // 加载进度条\n        }.width(55).height(55).backgroundColor(0x317aff) // 设置按钮样式\n\n        // 创建另一个显示加载中的圆形按钮，启用状态效果，设置不同的背景颜色\n        Button({ type: ButtonType.Circle, stateEffect: True }) {\n          LoadingProgress().width(20).height(20).color(0xFFFFFF) // 加载进度条\n        }.width(55).height(55).margin({ left: 20 }).backgroundColor(0xF55A42) // 设置按钮样式\n      }\n    }.height(400).padding({ left: 35, right: 35, top: 35 }) // 设置整体布局的高度和内边距\n  }\n}"
        }
    ],
    "CalendarPicker": [
        {
            "description": "实现一个月历日期选择器组件，用户可以通过该组件选择日期，并显示当前选中的日期。组件布局为垂直排列，包含一个标题文本和一个月历选择器。月历选择器位于布局的右侧，并且具有自定义的文本样式和边距。当用户选择日期时，会触发onChange事件，并在控制台输出选中的日期信息。",
            "code": "@Entry\n@Component\nstruct CalendarPickerExample {\n  // 定义一个私有变量selectedDate，用于存储当前选中的日期，初始值为2024年3月5日\n  private selectedDate: Date = new Date('2024-03-05')\n\n  build() {\n    Column() {\n      // 创建一个文本组件，显示标题“月历日期选择器”，字体大小为30\n      Text('月历日期选择器').fontSize(30)\n      Column() {\n        // 创建一个CalendarPicker组件，设置提示圆点半径为10，初始选中日期为selectedDate\n        CalendarPicker({ hintRadius: 10, selected: this.selectedDate })\n          .edgeAlign(CalendarAlign.END) // 设置月历选择器的对齐方式为右侧对齐\n          .textStyle({ color: \"  # ff182431\", font: { size: 20, weight: FontWeight.Normal } }) // 设置月历选择器的文本样式，包括颜色和字体大小\n          .margin(10) // 设置月历选择器的边距为10\n          .onChange((value) => {\n            // 当用户选择日期时，触发onChange事件，并在控制台输出选中的日期信息\n            console.info(\"CalendarPicker onChange:\" + JSON.stringify(value))\n          })\n      }.alignItems(HorizontalAlign.End).width(\"100%\") // 设置内部Column组件的子元素水平对齐方式为右侧对齐，宽度为100%\n    }.width('100%').margin({ top: 350 }) // 设置外部Column组件的宽度为100%，顶部边距为350\n  }\n}"
        }
    ],
    "Checkbox": [
        {
            "description": "实现一个带有Checkbox和Text的简单界面组件。Checkbox的选中状态与Text的点击事件相互关联，点击Text可以切换Checkbox的选中状态。",
            "code": "@Entry\n@Component\nstruct CheckedTextView {\n  // 定义一个状态变量checked，用于存储Checkbox的选中状态，初始值为false\n  @State checked: boolean = false; \n\n  build() {\n    // 使用Flex布局，设置布局方向为行（水平），对齐方式为中心对齐\n    Flex({ direction: FlexDirection.Row, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建一个Checkbox组件，绑定到状态变量checked，设置宽度和高度\n      Checkbox()\n        .select($$this.checked) // 绑定Checkbox的选中状态到状态变量checked\n        .width(30) // 设置Checkbox的宽度为30\n        .height(30) // 设置Checkbox的高度为30\n      \n      // 创建一个Text组件，显示文本\"Click to check\"，设置字体大小和文本对齐方式\n      Text('Click to check')\n        .fontSize(18) // 设置字体大小为18\n        .textAlign(TextAlign.Center) // 设置文本对齐方式为中心对齐\n        .onClick(() => {\n          // 点击Text时，切换状态变量checked的值\n          this.checked = !this.checked\n        })\n    }\n    .width('100%') // 设置Flex容器的宽度为100%\n    .height('100%') // 设置Flex容器的高度为100%\n  }\n}"
        },
        {
            "description": "实现一个包含两个复选框的界面，每个复选框旁边有一个对应的文本标签。整个界面使用Flex布局进行居中对齐，并且复选框和文本标签在水平和垂直方向上都居中显示。",
            "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column() {\n        // 创建一个Flex布局，水平和垂直居中对齐其子组件\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建第一个复选框，设置宽度和高度\n          Checkbox({ name: 'checkbox1', group: 'checkboxGroup' })\n            .width(30) // 设置复选框宽度为30\n            .height(30) // 设置复选框高度为30\n          // 创建文本标签，设置字体大小\n          Text('Checkbox1').fontSize(20)\n        }\n\n        // 创建另一个Flex布局，水平和垂直居中对齐其子组件\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建第二个复选框，设置宽度和高度\n          Checkbox({ name: 'checkbox2', group: 'checkboxGroup' })\n            .width(30) // 设置复选框宽度为30\n            .height(30) // 设置复选框高度为30\n          // 创建文本标签，设置字体大小\n          Text('Checkbox2').fontSize(20)\n        }\n      }\n      .width('100%') // 设置Column的宽度为100%\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}"
        }
    ],
    "CheckboxGroup": [
        {
            "description": "实现一个包含复选框组的页面组件，支持全选功能。页面布局为一个可滚动的纵向列，包含一个全选按钮和三个独立的复选框。每个复选框都有自己的状态监听器，当状态变化时会在控制台输出相应的信息。",
            "code": "@Entry\n@Component\nstruct Index {\n\n  build() {\n    // 创建一个横向布局Row\n    Row() {\n      // 创建一个纵向布局Column\n      Column() {\n        // 创建一个弹性布局Flex，用于包裹复选框组\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建一个复选框组CheckboxGroup\n          CheckboxGroup({ group: 'checkboxGroup' })\n            // 设置复选框形状为圆角方形\n            .checkboxShape(CheckBoxShape.ROUNDED_SQUARE)\n            // 设置选中状态的颜色为橙色\n            .selectedColor(Color.Orange)\n            // 监听复选框组的状态变化\n            .onChange((itemName: CheckboxGroupResult) => {\n              console.info(\"checkbox group content\" + JSON.stringify(itemName))\n            })\n            // 标记复选框组的样式\n            .mark({\n              strokeColor:Color.Black, // 设置标记的边框颜色为黑色\n              size: 40, // 设置标记的大小为40\n              strokeWidth: 5 // 设置标记的边框宽度为5\n            })\n            // 设置未选中状态的颜色为红色\n            .unselectedColor(Color.Red)\n            // 设置复选框的宽度和高度\n            .width(30)\n            .height(30)\n          // 显示文本\"Select All\"，设置字体大小为20\n          Text('Select All').fontSize(20)\n        }.margin({right:15}) // 设置右边距为15\n\n        // 创建一个弹性布局Flex，用于包裹复选框1\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建一个单独的复选框Checkbox1\n          Checkbox({ name: 'checkbox1', group: 'checkboxGroup' })\n            // 设置选中状态的颜色为蓝色\n            .selectedColor(0x39a2db)\n            // 设置复选框形状为圆角方形\n            .shape(CheckBoxShape.ROUNDED_SQUARE)\n            // 监听复选框状态变化\n            .onChange((value: boolean) => {\n              console.info('Checkbox1 change is'+ value)\n            })\n            // 标记复选框的样式\n            .mark({\n              strokeColor:Color.Black, // 设置标记的边框颜色为黑色\n              size: 50, // 设置标记的大小为50\n              strokeWidth: 5 // 设置标记的边框宽度为5\n            })\n            // 设置未选中状态的颜色为红色\n            .unselectedColor(Color.Red)\n            // 设置复选框的宽度和高度\n            .width(30)\n            .height(30)\n          // 显示文本\"Checkbox1\"，设置字体大小为20\n          Text('Checkbox1').fontSize(20)\n        }\n\n        // 创建一个弹性布局Flex，用于包裹复选框2\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建一个单独的复选框Checkbox2\n          Checkbox({ name: 'checkbox2', group: 'checkboxGroup' })\n            // 设置选中状态的颜色为蓝色\n            .selectedColor(0x39a2db)\n            // 设置复选框形状为圆角方形\n            .shape(CheckBoxShape.ROUNDED_SQUARE)\n            // 监听复选框状态变化\n            .onChange((value: boolean) => {\n              console.info('Checkbox2 change is' + value)\n            })\n            // 设置复选框的宽度和高度\n            .width(30)\n            .height(30)\n          // 显示文本\"Checkbox2\"，设置字体大小为20\n          Text('Checkbox2').fontSize(20)\n        }\n\n        // 创建一个弹性布局Flex，用于包裹复选框3\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建一个单独的复选框Checkbox3\n          Checkbox({ name: 'checkbox3', group: 'checkboxGroup' })\n            // 设置选中状态的颜色为蓝色\n            .selectedColor(0x39a2db)\n            // 设置复选框形状为圆角方形\n            .shape(CheckBoxShape.ROUNDED_SQUARE)\n            // 监听复选框状态变化\n            .onChange((value: boolean) => {\n              console.info('Checkbox3 change is' + value)\n            })\n            // 设置复选框的宽度和高度\n            .width(30)\n            .height(30)\n          // 显示文本\"Checkbox3\"，设置字体大小为20\n          Text('Checkbox3').fontSize(20)\n        }\n      }\n      // 设置Column的宽度为100%\n      .width('100%')\n    }\n    // 设置Row的高度为100%\n    .height('100%')\n  }\n}"
        }
    ],
    "Component3D": [
        {
            "description": "实现一个自定义渲染的3D场景组件，展示一个3D模型并应用自定义着色器和纹理。组件包含一个动画效果，用于更新渲染时间间隔，并在动画完成时触发回调。\n定义引擎时间类，用于计算总时间和每帧时间间隔\nclass EngineTime {\ntotalTimeUs = 0;  总时间，单位为微秒\ndeltaTimeUs = 0;  每帧时间间隔，单位为微秒\n};\nlet engineTime = new EngineTime();  创建引擎时间实例\nlet frameCount: number = 0;  帧计数器，用于模拟每帧更新\n模拟每帧更新\nfunction TickFrame() {\nif (frameCount == 10) {\nengineTime.totalTimeUs += 1.0;  累加总时间\nengineTime.deltaTimeUs += 1.0;  累加每帧时间间隔\nframeCount = 0;  重置帧计数器\n} else {\nframeCount++;  帧计数器递增\n}\n}",
            "code": "@Entry\n@Component\nstruct Index {\n  scene: SceneOptions = { scene: $rawfile('gltf/DamageHemlt/glTF/DamagedHelmet.gltf'), modelType: ModelType.SURFACE}; // 定义场景选项，包括加载的3D模型和模型类型\n  backAnimator: AnimatorResult = animator.create({\n    duration: 2000, // 动画持续时间，单位为毫秒\n    easing: \"ease\", // 缓动函数，控制动画的加速度\n    delay: 0, // 延迟时间，单位为毫秒\n    fill: \"none\", // 动画填充模式，none表示动画结束后不保留状态\n    direction: \"normal\", // 播放方向，normal表示正向播放\n    iterations: -1, // 播放次数，-1为无限循环\n    begin: 100, // 起始值\n    end: 200, // 结束值\n  });\n  @State timeDelta: number[] = [1.0, 2.0]; // 时间间隔数组，用于传递给着色器\n\n  // 创建函数，设置动画回调\n  create() {\n    this.backAnimator.onfinish = () => {\n      console.log('backAnimator onfinish'); // 动画播放完成回调\n    }\n    this.backAnimator.onframe = value => {\n      TickFrame(); // 模拟每帧更新\n      this.timeDelta[0] = engineTime.deltaTimeUs; // 更新时间间隔数组\n    }\n  }\n\n  // 构建函数，渲染UI组件\n  build() {\n    Row() {\n      Column() {\n        Text('custom rendering') // 显示文本\n        Component3D()\n          .shader($rawfile('assets/app/shaders/shader/London.shader')) // 设置着色器\n          .shaderImageTexture($rawfile('assets/London.jpg')) // 设置着色器纹理\n          .shaderInputBuffer(this.timeDelta) // 设置着色器输入缓冲\n          .customRender($rawfile('assets/app/rendernodegraphs/London.rng'), true) // 自定义渲染\n          .renderWidth('90%').renderHeight('90%') // 设置渲染宽度和高度\n          .onAppear(() => {\n            this.create(); // 创建动画回调\n            this.backAnimator.play(); // 播放动画\n          }).width('50%').height('50%') // 设置宽度和高度\n      }.width('100%') // 设置宽度\n    }\n    .height('100%') // 设置高度\n  }\n}"
        }
    ],
    "ContainerSpan": [
        {
            "description": "实现一个垂直布局的组件，包含一个文本组件，文本组件中嵌套了一个图片组件和一个文本Span组件。图片组件显示应用图标，文本Span组件显示\"Hello World !\"文本。整体布局宽度为100%，并且水平居中对齐。\n@Component  标记该结构体为一个组件",
            "code": "@Entry // 标记该组件为入口组件\nstruct Index {\n  build() {\n    Column() { // 创建一个垂直布局的Column组件\n      Text() { // 创建一个文本组件\n        ContainerSpan() { // 创建一个容器内的图片组件和文本Span组件\n          ImageSpan($r('app.media.app_icon')) // 创建一个图片组件，显示应用图标\n            .width('40vp') // 设置图片宽度为40vp\n            .height('40vp') // 设置图片高度为40vp\n            .verticalAlign(ImageSpanAlignment.CENTER) // 图片垂直居中显示\n          Span('   Hello World !   ') // 创建一个文本Span，显示\"Hello World !\"\n            .fontSize('16fp') // 设置字体大小为16fp\n            .fontColor(Color.White) // 设置字体颜色为白色\n        }.textBackgroundStyle({color: \"#7F007DFF\", radius: \"12vp\"}) // 设置文本背景样式为紫色圆角矩形\n      }\n    }.width('100%') // 设置Column宽度为100%\n     .alignItems(HorizontalAlign.Center) // 设置Column水平居中对齐\n  }\n}"
        }
    ],
    "DataPanel": [
        {
            "description": "实现一个数据面板示例，展示不同类型的数据面板（圆形和线形），并包含线性渐变效果的数据面板。\n布局：\n- 使用Column作为主布局，包含多个Row和Stack组件，用于排列不同类型的数据面板。\n- 每个数据面板包含一个DataPanel组件，用于展示数据。\n- 使用Text组件显示数据值和相关信息。\n样式：\n- 数据面板的宽度和高度根据类型不同而有所变化。\n- 文本的字体大小、颜色、位置等通过属性进行设置。\n功能与效果：\n- 展示圆形和线形数据面板，分别显示不同的数据值。\n- 线性渐变效果的数据面板展示多个数据值，并支持渐变颜色和阴影效果。",
            "code": "@Entry\n@Component\nstruct DataPanelExample {\n  public valueArr: number[] = [10, 10, 10, 10, 10, 10, 10, 10, 10]\n\n  build() {\n    // 创建一个包含多个数据面板的布局\n    Column({ space: 5 }) {\n      // 第一个数据面板\n      Row() {\n        Stack() {\n          // 创建一个圆形数据面板，数值为30，最大值为100\n          DataPanel({ values: [30], max: 100, type: DataPanelType.Circle }).width(168).height(168)\n          // 数值显示为30\n          Column() {\n            Text('30').fontSize(35).fontColor('#182431')\n            // 版本号显示为1.0.0\n            Text('1.0.0').fontSize(9.33).lineHeight(12.83).fontWeight(500).opacity(0.6)\n          }\n\n          // 百分号显示\n          Text('%')\n            .fontSize(9.33)\n            .lineHeight(12.83)\n            .fontWeight(500)\n            .opacity(0.6)\n            .position({ x: 104.42, y: 78.17 })\n        }.margin({ right: 44 })\n\n        Stack() {\n          // 创建另一个圆形数据面板，数值为50, 12, 8, 5，最大值为100\n          DataPanel({ values: [50, 12, 8, 5], max: 100, type: DataPanelType.Circle }).width(168).height(168)\n          // 数值显示为75\n          Column() {\n            Text('75').fontSize(35).fontColor('#182431')\n            // 已使用空间显示为98GB/128GB\n            Text('已使用98GB/128GB').fontSize(8.17).lineHeight(11.08).fontWeight(500).opacity(0.6)\n          }\n\n          // 百分号显示\n          Text('%')\n            .fontSize(9.33)\n            .lineHeight(12.83)\n            .fontWeight(500)\n            .opacity(0.6)\n            .position({ x: 104.42, y: 78.17 })\n        }\n      }.margin({ bottom: 59 })\n\n      // 创建一条线形数据面板，显示valueArr数组的数据，最大值为100\n      DataPanel({ values: this.valueArr, max: 100, type: DataPanelType.Line }).width(300).height(20)\n    }.width('100%').margin({ top: 5 })\n  }\n}\n\n// xxx.ets\n@Entry\n@Component\nstruct LinearGradientDataPanelExample {\n  public values1: number[] = [20, 20, 20, 20]\n  public color1: LinearGradient = new LinearGradient([{ color: \"#65EEC9A3\", offset: 0 }, { color: \"#FFEF629F\", offset: 1 }])\n  public color2: LinearGradient = new LinearGradient([{ color: \"#FF67F9D4\", offset: 0 }, { color: \"#FFFF9554\", offset: 1 }])\n  public colorShadow1: LinearGradient = new LinearGradient([{ color: \"#65EEC9A3\", offset: 0 }, { color: \"#65EF629F\", offset: 1 }])\n  public colorShadow2: LinearGradient = new LinearGradient([{ color: \"#65e26709\", offset: 0 }, { color: \"#65efbd08\", offset: 1 }])\n  public colorShadow3: LinearGradient = new LinearGradient([{ color: \"#6572B513\", offset: 0 }, { color: \"#6508efa6\", offset: 1 }])\n  public colorShadow4: LinearGradient = new LinearGradient([{ color: \"#65ed08f5\", offset: 0 }, { color: \"#65ef0849\", offset: 1 }])\n  @State color3: string = '#00FF00'\n  @State color4: string = '#20FF0000'\n  @State bgColor: string = '#08182431'\n  @State offsetX: number = 15\n  @State offsetY: number = 15\n  @State radius: number = 5\n  @State colorArray: Array<LinearGradient | ResourceColor> = [this.color1, this.color2, this.color3, this.color4]\n  @State shadowColorArray: Array<LinearGradient | ResourceColor> = [this.colorShadow1, this.colorShadow2, this.colorShadow3, this.colorShadow4]\n\n  // 构建线性渐变数据面板示例\n  build() {\n    Column({ space: 5 }) {\n      // 添加线性渐变文本\n      Text('LinearGradient').fontSize(9).fontColor(0xCCCCCC).textAlign(TextAlign.Start).width('100%').margin({ top: 20, left: 20})\n      // 创建数据面板，展示数据值，采用圆形展示方式\n      DataPanel({ values: this.values1, max: 100, type: DataPanelType.Circle })\n        .width(300)\n        .height(300)\n        .valueColors(this.colorArray) // 设置数据值颜色\n        .trackShadow({\n          radius: this.radius, // 设置阴影半径\n          colors: this.shadowColorArray, // 设置阴影颜色\n          offsetX: this.offsetX, // 设置阴影水平偏移量\n          offsetY: this.offsetY // 设置阴影垂直偏移量\n        })\n        .strokeWidth(30) // 设置描边宽度\n        .trackBackgroundColor(this.bgColor) // 设置背景颜色\n    }.width('100%').margin({ top: 5 }) // 设置宽度和外边距\n  }\n}\n\n// xxx.ets\n// 构建数据面板，展示数据列表及相关信息\n@Builder\nfunction buildDataPanel(config: DataPanelConfiguration) {\n  Column() {\n    // 列表展示数据项\n    Column() {\n      ForEach(config.values, (item: number, index: number) => {\n        ChildItem({ item: item, index: index, max:config.maxValue })\n      }, (item: string) => item)\n    }.padding(10)\n\n    // 分割线\n    Line().width(360).backgroundColor(\"#ff373737\").margin({bottom:5})\n\n    // 显示数据面板信息\n    Row() {\n      Text('Length=' + config.values.length + '    ').margin({ left: 10 }).align(Alignment.Start)\n      Text('Max=' + config.maxValue).margin({ left: 10 }).align(Alignment.Start)\n    }\n  }\n}\n\n// 数据面板构建器，用于应用内容修改器\nclass DataPanelBuilder implements ContentModifier<DataPanelConfiguration> {\n  constructor() {\n  }\n  applyContent () : WrappedBuilder<[DataPanelConfiguration]> {\n    return wrapBuilder(buildDataPanel)\n  }\n}\n\n// 入口组件\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column() {\n      // 标题\n      Text(\"Data panel\").margin({ top: 12 });\n\n      // 数据面板展示\n      Row() {\n        DataPanel({ values: [12.3, 21.1, 13.4, 35.2, 26.0, 32.0], max: 140, type: DataPanelType.Circle })\n          .width(400).height(260)\n          .padding({ top: 10 })\n          .contentModifier(new DataPanelBuilder())\n      }.margin(15).backgroundColor(\"#fff5f5f5\")\n    }\n  }\n}\n\n// 子项组件，展示数据子项\n@Component\nstruct ChildItem {\n  @Prop item: number;\n  @Prop index: number;\n  @Prop max: number;\n  public color1: string = \"#65ff00dd\"\n  public color2: string = \"#6500ff99\"\n  public color3: string = \"#65ffe600\"\n  public color4: string = \"#6595ff00\"\n  public color5: string = \"#65000dff\"\n  public color6: string = \"#650099ff\"\n  public colorArray: Array<string> = [this.color1, this.color2, this.color3, this.color4, this.color5, this.color6]\n\n  build() {\n    // 相对容器\n    RelativeContainer() {\n      Row() {\n        // 矩形条展示数据大小\n        Rect().height(25).width(this.item * 600 / this.max).foregroundColor(this.colorArray[this.index]).radius(5)\n          .align(Alignment.Start)\n        // 文本显示数据值\n        Text(\" \"+this.item)\n          .fontSize(17)\n      }\n    }.height(28)\n  }\n}"
        }
    ],
    "DatePicker": [
        {
            "description": "实现一个日期选择器组件，支持公历和农历的切换，并允许用户在指定的日期范围内选择日期。日期选择器具有自定义的文本样式，包括普通文本、不可见文本和选中日期的文本样式。点击按钮可以切换日期显示模式，并在日期变化时输出当前选中的日期。",
            "code": "@Entry\n@Component\nstruct DatePickerExample {\n  @State isLunar: boolean = false // 用于控制日期显示模式，初始为公历\n  private selectedDate: Date = new Date('2021-08-08') // 初始选中的日期\n\n  build() {\n    Column() {\n      Button('切换公历农历')\n        .margin({ top: 30, bottom: 30 }) // 设置按钮的上边距和下边距\n        .onClick(() => {\n          this.isLunar = !this.isLunar // 切换日期显示模式，公历和农历之间切换\n        })\n      DatePicker({\n        start: new Date('1970-1-1'), // 日期选择范围的起始日期\n        end: new Date('2100-1-1'), // 日期选择范围的结束日期\n        selected: this.selectedDate // 当前选中的日期\n      })\n        .disappearTextStyle({color: Color.Gray, font: {size: '16fp', weight: FontWeight.Bold}}) // 设置不可见文本的样式，颜色为灰色，字体大小为16fp，字体加粗\n        .textStyle({color: '#ff182431', font: {size: '18fp', weight: FontWeight.Normal}}) // 设置普通文本的样式，颜色为#ff182431，字体大小为18fp，字体正常\n        .selectedTextStyle({color: '#ff0000FF', font: {size: '26fp', weight: FontWeight.Regular}}) // 设置选中日期的文本样式，颜色为#ff0000FF，字体大小为26fp，字体常规\n        .lunar(this.isLunar) // 根据isLunar状态切换公历或农历显示\n        .onDateChange((value: Date) => {\n          this.selectedDate = value // 更新选中的日期\n          console.info('select current date is: ' + value.toString()) // 输出当前选中的日期\n        })\n\n    }.width('100%') // 设置列的宽度为100%\n  }\n}"
        }
    ],
    "Divider": [
        {
            "description": "实现一个包含横向和纵向分割线的示例组件。横向分割线用于分隔两个列表，纵向分割线用于分隔两个按钮。整体布局为一个垂直排列的列，包含两个主要部分：横向分割线场景和纵向分割线场景。",
            "code": "@Entry\n@Component\nstruct DividerExample {\n  build() {\n    Column() {\n      // 横向分割线场景\n      Text('Horizontal divider').fontSize(9).fontColor(0xCCCCCC) // 显示横向分割线的标题，字体大小为9，颜色为灰色\n      \n      // 列表1\n      List() {\n        ForEach([1, 2, 3], (item: number) => {\n          ListItem() {\n            Text('list' + item).width('100%').fontSize(14).fontColor('#182431').textAlign(TextAlign.Start) // 显示列表项的文本，宽度占满父容器，字体大小为14，颜色为深色，文本左对齐\n          }.width(244).height(48) // 设置列表项的宽度和高度\n        }, (item: number) => item.toString()) // 将列表项的索引转换为字符串作为键\n      }.padding({ left: 24, bottom: 8 }) // 设置列表的左边距和下边距\n\n      // 横向分割线\n      Divider().strokeWidth(8).color('#F1F3F5') // 创建一个横向分割线，线宽为8，颜色为浅灰色\n      \n      // 列表2\n      List() {\n        ForEach([4, 5], (item: number) => {\n          ListItem() {\n            Text('list' + item).width('100%').fontSize(14).fontColor('#182431').textAlign(TextAlign.Start) // 显示列表项的文本，宽度占满父容器，字体大小为14，颜色为深色，文本左对齐\n          }.width(244).height(48) // 设置列表项的宽度和高度\n        }, (item: number) => item.toString()) // 将列表项的索引转换为字符串作为键\n      }.padding({ left: 24, top: 8 }) // 设置列表的左边距和上边距\n\n      // 纵向分割线场景\n      Text('Vertical divider').fontSize(9).fontColor(0xCCCCCC) // 显示纵向分割线的标题，字体大小为9，颜色为灰色\n      \n      // 纵向分割线内容\n      Column() {\n        Column() {\n          // 左侧内容\n          Row().width(288).height(64).backgroundColor('#30C9F0').opacity(0.3) // 创建一个行容器，设置宽度和高度，背景颜色为浅蓝色，透明度为0.3\n          Row() {\n            // 左侧按钮\n            Button('Button')\n              .width(136)\n              .height(22)\n              .fontSize(16)\n              .fontColor('#007DFF')\n              .fontWeight(500)\n              .backgroundColor(Color.Transparent) // 创建一个按钮，设置宽度、高度、字体大小、字体颜色、字体粗细和背景透明\n            // 纵向分割线\n            Divider().vertical(true).height(22).color('#182431').opacity(0.6).margin({ left: 8, right: 8 }) // 创建一个纵向分割线，高度为22，颜色为深色，透明度为0.6，左右边距为8\n            // 右侧按钮\n            Button('Button')\n              .width(136)\n              .height(22)\n              .fontSize(16)\n              .fontColor('#007DFF')\n              .fontWeight(500)\n              .backgroundColor(Color.Transparent) // 创建一个按钮，设置宽度、高度、字体大小、字体颜色、字体粗细和背景透明\n          }.margin({ top: 17 }) // 设置行的上边距\n        }\n        .width(336)\n        .height(152)\n        .backgroundColor('#FFFFFF')\n        .borderRadius(24)\n        .padding(24) // 设置列的宽度、高度、背景颜色、圆角半径和内边距\n      }\n      .width('100%')\n      .height(168)\n      .backgroundColor('#F1F3F5')\n      .justifyContent(FlexAlign.Center)\n      .margin({ top: 8 }) // 设置列的宽度、高度、背景颜色、内容对齐方式和上边距\n    }.width('100%').padding({ top: 24 }) // 设置列的宽度并设置上边距\n  }\n}"
        }
    ],
    "Gauge": [
        {
            "description": "实现一个仪表盘组件，显示数值为50，范围从1到100。仪表盘内部包含显示当前数值和辅助文本的Text组件。通过设置value、startAngle、endAngle、colors、width、height、strokeWidth等属性来定制仪表盘的外观和行为。trackShadow方法添加了仪表盘的阴影效果。description方法将说明文本应用到仪表盘中。整体布局采用Column组件，并设置了外边距和宽高比例。",
            "code": "@Entry\n@Component\nstruct Gauge1 {\n  // 构建说明文本的样式\n  @Builder descriptionBuilder() {\n    Text('说明文本')\n      .maxFontSize('30sp') // 设置最大字体大小为30sp\n      .minFontSize(\"10.0vp\") // 设置最小字体大小为10.0vp\n      .fontColor(\"#fffa2a2d\") // 设置字体颜色为#fffa2a2d\n      .fontWeight(FontWeight.Medium) // 设置字体粗细为Medium\n      .width('100%') // 设置宽度为100%\n      .height(\"100%\") // 设置高度为100%\n      .textAlign(TextAlign.Center) // 设置文本居中对齐\n  }\n\n  build() {\n    Column() {\n      // 创建一个仪表盘组件，显示数值为50，范围从1到100\n      Gauge({ value: 50, min: 1, max: 100 }) {\n        Column() {\n          // 显示当前数值为50\n          Text('50')\n            .fontWeight(FontWeight.Medium) // 设置字体粗细为Medium\n            .width('62%') // 设置宽度为62%\n            .fontColor(\"#ff182431\") // 设置字体颜色为#ff182431\n            .maxFontSize(\"60.0vp\") // 设置最大字体大小为60.0vp\n            .minFontSize(\"30.0vp\") // 设置最小字体大小为30.0vp\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n            .margin({ top: '35%' }) // 设置上边距为35%\n            .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n            .maxLines(1) // 设置最大行数为1\n          // 显示辅助文本\n          Text('辅助文本')\n            .maxFontSize(\"16.0fp\") // 设置最大字体大小为16.0fp\n            .minFontSize(\"10.0vp\") // 设置最小字体大小为10.0vp\n            .fontColor($r('sys.color.ohos_id_color_text_secondary')) // 设置字体颜色为系统次要文本颜色\n            .fontWeight(FontWeight.Regular) // 设置字体粗细为Regular\n            .width('67.4%') // 设置宽度为67.4%\n            .height('9.5%') // 设置高度为9.5%\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n        }.width('100%').height('100%') // 设置内部Column的宽度和高度为100%\n      }\n      // 设置仪表盘的样式和属性\n      .value(50) // 设置当前值为50\n      .startAngle(210) // 设置起始角度为210度\n      .endAngle(150) // 设置结束角度为150度\n      .colors([[...]]) // 设置不同数值范围的颜色渐变\n      .width('80%') // 设置宽度为80%\n      .height('80%') // 设置高度为80%\n      .strokeWidth(18) // 设置描边宽度为18\n      .trackShadow({ radius: 7, offsetX: 7, offsetY: 7 }) // 设置轨道阴影效果\n      .description(this.descriptionBuilder) // 设置说明文本\n      .padding(18) // 设置内边距为18\n    }.margin({ top: 40 }).width('100%').height('100%') // 设置外部Column的上边距、宽度和高度为100%\n  }\n}"
        }
    ],
    "Image": [
        {
            "description": "该示例展示了如何在鸿蒙ArkUI中加载不同格式的图片，并为图片添加覆盖效果。\n每个Image组件加载不同格式的图片，并设置了不同的objectFit属性。\nobjectFit属性决定了图片在容器中的展示方式，如填充、拉伸等。\n每个Image组件还设置了边框、大小、边距等样式属性，以及覆盖层的相关配置。",
            "code": "@Entry\n@Component\nstruct ImageExample {\n  build() {\n    Column() {\n      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start }) {\n        Row() {\n          // 加载png格式图片，设置objectFit效果为TOP_START\n          Image($r('app.media.sky'))\n            .width(110).height(110).margin(15)\n            .overlay('png', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n            .border({ width: 2, color: Color.Pink })\n            .objectFit(ImageFit.TOP_START)\n          \n          // 加载gif格式图片，设置objectFit效果为BOTTOM_START\n          Image($r('app.media.loading'))\n            .width(110).height(110).margin(15)\n            .overlay('gif', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n            .border({ width: 2, color: Color.Pink })\n            .objectFit(ImageFit.BOTTOM_START)\n        }\n        \n        Row() {\n          // 加载svg格式图片，设置objectFit效果为TOP_END\n          Image($r('app.media.svg'))\n            .width(110).height(110).margin(15)\n            .overlay('svg', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n            .border({ width: 2, color: Color.Pink })\n            .objectFit(ImageFit.TOP_END)\n          \n          // 加载jpg格式图片，设置objectFit效果为CENTER\n          Image($r('app.media.jpg'))\n            .width(110).height(110).margin(15)\n            .overlay('jpg', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n            .border({ width: 2, color: Color.Pink })\n            .objectFit(ImageFit.CENTER)\n        }\n      }\n    }.height(320).width(360).padding({ right: 10, top: 10 })\n  }\n}"
        }
    ],
    "ImageAnimator": [
        {
            "description": "实现一个图片动画组件，支持通过按钮控制动画的开始、暂停、停止、反向播放、单次循环和无限循环。动画由多张图片帧组成，每帧图片按照指定的时间间隔播放，形成动画效果。",
            "code": "@Entry\n@Component\nstruct ImageAnimatorExample {\n  @State state: AnimationStatus = AnimationStatus.Initial // 动画状态，默认为初始状态\n  @State reverse: boolean = false // 是否反向播放动画\n  @State iterations: number = 1 // 动画循环次数，默认为1次\n\n  build() {\n    Column({ space: 10 }) {\n      // 创建图片动画组件，设置多张图片帧和动画属性\n      ImageAnimator()\n        .images([\n          { src: $r('app.media.img1') }, // 第一帧图片\n          { src: $r('app.media.img2') }, // 第二帧图片\n          { src: $r('app.media.img3') }, // 第三帧图片\n          { src: $r('app.media.img4') }  // 第四帧图片\n        ])\n        .duration(2000) // 设置动画持续时间为2秒\n        .state(this.state) // 设置动画状态\n        .reverse(this.reverse) // 设置是否反向播放\n        .fillMode(FillMode.None) // 设置填充模式为None\n        .iterations(this.iterations) // 设置动画循环次数\n        .width(340) // 设置动画组件宽度\n        .height(240) // 设置动画组件高度\n        .margin({ top: 100 }) // 设置顶部边距\n        .onStart(() => {\n          console.info('Start') // 动画开始时的回调\n        })\n        .onPause(() => {\n          console.info('Pause') // 动画暂停时的回调\n        })\n        .onRepeat(() => {\n          console.info('Repeat') // 动画重复播放时的回调\n        })\n        .onCancel(() => {\n          console.info('Cancel') // 动画取消时的回调\n        })\n        .onFinish(() => {\n          console.info('Finish') // 动画结束时的回调\n          this.state = AnimationStatus.Stopped // 将动画状态设置为停止\n        })\n\n      // 创建按钮行，用于控制动画的开始、暂停和停止\n      Row() {\n        Button('start').width(100).padding(5).onClick(() => {\n          this.state = AnimationStatus.Running // 开始播放动画\n        }).margin(5)\n        Button('pause').width(100).padding(5).onClick(() => {\n          this.state = AnimationStatus.Paused // 暂停动画\n        }).margin(5)\n        Button('stop').width(100).padding(5).onClick(() => {\n          this.state = AnimationStatus.Stopped // 停止动画\n        }).margin(5)\n      }\n\n      // 创建按钮行，用于控制动画的反向播放、单次循环和无限循环\n      Row() {\n        Button('reverse').width(100).padding(5).onClick(() => {\n          this.reverse = !this.reverse // 切换反向播放状态\n        }).margin(5)\n        Button('once').width(100).padding(5).onClick(() => {\n          this.iterations = 1 // 设置为单次循环\n        }).margin(5)\n        Button('infinite').width(100).padding(5).onClick(() => {\n          this.iterations = -1 // 设置为无限循环播放\n        }).margin(5)\n      }\n    }.width('100%').height('100%') // 设置容器宽度和高度\n  }\n}"
        }
    ],
    "ImageSpan": [
        {
            "description": "实现一个包含多个Text组件的页面，展示Span和ImageSpan组件的不同用法。\n第一个Text组件展示Span文本的装饰效果，第二个Text组件展示ImageSpan和Span的组合效果。",
            "code": "@Entry\n@Component\nstruct SpanExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 第一个Text组件包含一个Span文本，展示文本的装饰效果\n      Text() {\n        Span('This is the Span and ImageSpan component').fontSize(25).textCase(TextCase.Normal)\n          .decoration({ type: TextDecorationType.None, color: Color.Pink })\n      }.width('100%').textAlign(TextAlign.Center)\n\n      // 第二个Text组件展示不同的ImageSpan和Span组合效果\n      Text() {\n        // 第一个ImageSpan展示图片并设置宽高和填充方式\n        ImageSpan($r('app.media.icon'))\n          .width('200px')\n          .height('200px')\n          .objectFit(ImageFit.Fill)\n          .verticalAlign(ImageSpanAlignment.CENTER)\n        // 第一个Span展示带有删除线的文本\n        Span('I am LineThrough-span')\n          .decoration({ type: TextDecorationType.LineThrough, color: Color.Red }).fontSize(25)\n        // 第二个ImageSpan展示图片并设置垂直对齐方式\n        ImageSpan($r('app.media.icon'))\n          .width('50px')\n          .height('50px')\n          .verticalAlign(ImageSpanAlignment.TOP)\n        // 第二个Span展示带有下划线的文本\n        Span('I am Underline-span')\n          .decoration({ type: TextDecorationType.Underline, color: Color.Red }).fontSize(25)\n        // 第三个ImageSpan展示图片并设置尺寸和垂直对齐方式\n        ImageSpan($r('app.media.icon'))\n          .size({ width: '100px', height: '100px' })\n          .verticalAlign(ImageSpanAlignment.BASELINE)\n        // 第三个Span展示带有下划线的文本\n        Span('I am Underline-span')\n          .decoration({ type: TextDecorationType.Underline, color: Color.Red }).fontSize(25)\n        // 第四个ImageSpan展示图片并设置宽高和垂直对齐方式\n        ImageSpan($r('app.media.icon'))\n          .width('70px')\n          .height('70px')\n          .verticalAlign(ImageSpanAlignment.BOTTOM)\n        // 第四个Span展示带有下划线的文本，字体大小更大\n        Span('I am Underline-span')\n          .decoration({ type: TextDecorationType.Underline, color: Color.Red }).fontSize(50)\n      }\n      .width('100%')\n      .textIndent(50)\n    }.width('100%').height('100%').padding({ left: 0, right: 0, top: 0 })\n  }\n}"
        }
    ],
    "LoadingProgress": [
        {
            "description": "实现一个自定义的加载进度条组件，通过按钮切换是否显示加载进度条。点击按钮时，config.enableLoading的值会在true和false之间切换，从而控制加载进度条的显示与隐藏。\n导入性能分析工具和ArkUI组件",
            "code": "import { hilog } from '@kit.PerformanceAnalysisKit'\nimport { promptAction } from '@kit.ArkUI'\n\n// 定义MyLoadingProgressStyle类，实现LoadingProgress的自定义样式\nclass MyLoadingProgressStyle implements ContentModifier<LoadingProgressConfiguration> {\n  enableLoading: boolean = false // 控制加载进度条是否显示的标志\n\n  constructor(enableLoading: boolean) {\n    this.enableLoading = enableLoading\n  }\n\n  // 应用自定义样式到LoadingProgress\n  applyContent(): WrappedBuilder<[LoadingProgressConfiguration]> {\n    return wrapBuilder(buildLoadingProgress)\n  }\n}\n\n// 初始化两个字符串数组\nlet arr1: string[] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"]\nlet arr2: string[] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n\n// 构建LoadingProgress组件\n@Builder\nfunction buildLoadingProgress(config: LoadingProgressConfiguration) {\n  // 创建LoadingProgress的布局\n  Column({ space: 8 }) {\n    // 第一行\n    Row() {\n      // 左侧圆形\n      Column() {\n        Circle({\n          width: ((config.contentModifier as MyLoadingProgressStyle).enableLoading) ? 100 : 80, // 根据enableLoading设置圆形宽度\n          height: ((config.contentModifier as MyLoadingProgressStyle).enableLoading) ? 100 : 80 // 根据enableLoading设置圆形高度\n        })\n          .fill(((config.contentModifier as MyLoadingProgressStyle).enableLoading) ? Color.Grey : 0x2577e3) // 根据enableLoading设置圆形填充颜色\n      }.width('50%')\n\n      // 右侧按钮\n      Column() {\n        Button('' + ((config.contentModifier as MyLoadingProgressStyle).enableLoading))\n          .onClick((event: ClickEvent) => {\n            promptAction.showToast({\n              message: ((config.contentModifier as MyLoadingProgressStyle).enableLoading) + '' // 显示当前enableLoading状态\n            })\n          })\n          .fontColor(Color.White) // 设置按钮文字颜色为白色\n          .backgroundColor(((config.contentModifier as MyLoadingProgressStyle).enableLoading) ? Color.Grey : 0x2577e3) // 根据enableLoading设置按钮背景颜色\n      }.width('50%')\n\n    }\n\n    // 第二行\n    Row() {\n      // 进度条\n      Column() {\n        Gauge({\n          value: (config.contentModifier as MyLoadingProgressStyle).enableLoading ? 50 : 30, // 根据enableLoading设置进度条值\n          min: 11, // 设置进度条最小值\n          max: 100 // 设置进度条最大值\n        }) {\n          Column() {\n            Text('60')\n              .maxFontSize(\"180sp\") // 设置文字最大字体大小\n              .minFontSize(\"160.0vp\") // 设置文字最小字体大小\n              .fontWeight(FontWeight.Medium) // 设置文字字体粗细\n              .fontColor(\"#ff182431\") // 设置文字颜色\n              .width('40%') // 设置文字宽度\n              .height('30%') // 设置文字高度\n              .textAlign(TextAlign.Center) // 设置文字对齐方式\n              .margin({ top: '22.2%' }) // 设置文字上边距\n              .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文字溢出处理方式\n              .maxLines(1) // 设置文字最大行数\n          }.width('100%').height('100%')\n        }\n\n        .colors(((config.contentModifier as MyLoadingProgressStyle).enableLoading) ? Color.Grey : 0x2577e3) // 根据enableLoading设置进度条颜色\n        .width(200) // 设置进度条宽度\n        .strokeWidth(18) // 设置进度条描边宽度\n        .padding(5) // 设置进度条内边距\n        .trackShadow({ radius: 7, offsetX: 7, offsetY: 7 }) // 设置进度条阴影\n        .height(200) // 设置进度条高度\n      }.width('100%')\n\n    }\n\n    // 列表\n    Column() {\n      List({ space: 20, initialIndex: 0 }) {\n        ForEach(arr2, (item: string) => {\n          ListItem() {\n            Text((config.contentModifier as MyLoadingProgressStyle).enableLoading ? '' + item : Number(item) * 2 + '') // 根据enableLoading设置列表项文字内容\n              .width('100%') // 设置列表项文字宽度\n              .height('100%') // 设置列表项文字高度\n              .fontColor((config.contentModifier as MyLoadingProgressStyle).enableLoading ? Color.White : Color.Orange) // 根据enableLoading设置列表项文字颜色\n              .fontSize((config.contentModifier as MyLoadingProgressStyle).enableLoading ? 16 : 20) // 根据enableLoading设置列表项文字大小\n              .textAlign(TextAlign.Center) // 设置列表项文字对齐方式\n              .backgroundColor((config.contentModifier as MyLoadingProgressStyle).enableLoading ? Color.Grey : 0x2577e3) // 根据enableLoading设置列表项背景颜色\n          }\n          .height(110) // 设置列表项高度\n          .border({\n            width: 2, // 设置列表项边框宽度\n            color: Color.White // 设置列表项边框颜色\n          })\n        }, (item: string) => item)\n      }\n      .height(200) // 设置列表高度\n      .width('100%') // 设置列表宽度\n      .friction(0.6) // 设置列表摩擦系数\n\n      .lanes({ minLength: (config.contentModifier as MyLoadingProgressStyle).enableLoading ? 40 : 80, maxLength: (config.contentModifier as MyLoadingProgressStyle).enableLoading ? 40 : 80 }) // 根据enableLoading设置列表行高\n      .scrollBar(BarState.Off) // 关闭列表滚动条\n    }\n\n  }.width(\"100%\").padding(10) // 设置整体布局宽度和内边距\n}\n\n// LoadingProgressDemoExample组件\n@Entry\n@Component\nstruct LoadingProgressDemoExample {\n  @State loadingProgressList: (boolean | undefined | null)[] = [undefined, true, null, false] // 加载进度条状态列表\n  @State widthList: (number | string)[] = ['110%', 220, '40%', 80] // 宽度列表\n  @State loadingProgressIndex: number = 0 // 当前加载进度条状态索引\n  @State clickFlag: number = 0 // 点击次数标志\n  scroller: Scroller = new Scroller() // 滚动控制器\n\n  // 构建LoadingProgressDemoExample组件\n  build() {\n    Column() {\n      // 滚动视图\n      Scroll(this.scroller) {\n        Column({ space: 5 }) {\n          Column() {\n            // 创建LoadingProgress组件\n            LoadingProgress()\n              .color('#106836') // 设置加载进度条颜色\n              .size({ width: '100%' }) // 设置加载进度条宽度\n              .contentModifier(new MyLoadingProgressStyle(this.loadingProgressList[this.loadingProgressIndex])) // 应用自定义样式\n          }.width('100%').backgroundColor(0xdcdcdc) // 设置整体布局宽度和背景颜色\n        }.width('100%').margin({ top: 5 }) // 设置整体布局宽度和上边距\n      }.height('85%') // 设置滚动视图高度\n\n      // 切换按钮\n      Button('点击切换config.enableloading').onClick(() => {\n        this.clickFlag++ // 增加点击次数\n        this.loadingProgressIndex = (this.loadingProgressIndex + 1) % this.loadingProgressList.length // 更新加载进度条状态索引\n        console.log('enableLoading:' + this.loadingProgressList[this.loadingProgressIndex]) // 打印当前加载进度条状态\n      }).margin(20) // 设置按钮外边距\n    }\n\n  }\n}"
        }
    ],
    "Marquee": [
        {
            "description": "实现一个跑马灯（Marquee）示例组件，包含以下功能：\n1. 跑马灯组件：显示滚动文本，支持自定义滚动速度、循环次数、滚动方向等。\n2. 启动按钮：点击按钮启动跑马灯动画。\n3. 文本时钟组件：显示当前时间，并将其格式化为\"HH:MM:SS\"格式，动态更新跑马灯文本内容。",
            "code": "@Entry\n@Component\nstruct MarqueeExample {\n  @State start: boolean = false // 控制跑马灯动画开始或停止的状态\n  @State src: string = '' // 跑马灯文本内容的来源\n  @State marqueeText: string = 'Running Marquee' // 默认的跑马灯文本内容\n\n  private fromStart: boolean = true // 跑马灯动画是否从头开始的标识\n  private step: number = 10 // 跑马灯文本滚动的步长\n  private loop: number = Number.POSITIVE_INFINITY // 跑马灯文本滚动的循环次数\n\n  controller: TextClockController = new TextClockController() // 文本时钟控制器实例\n\n  // 将数字转换为时间格式的字符串，格式为\"HH:MM:SS\"\n  convert2time(value: number): string {\n    let date = new Date(Number(value + '000'));\n    let hours = date.getHours().toString().padStart(2, '0');\n    let minutes = date.getMinutes().toString().padStart(2, '0');\n    let seconds = date.getSeconds().toString().padStart(2, '0');\n    return hours + \":\" + minutes + \":\" + seconds;\n  }\n\n  // 构建跑马灯示例组件\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建跑马灯组件，并设置相关属性\n      Marquee({\n        start: this.start, // 控制跑马灯动画是否开始\n        step: this.step, // 跑马灯文本滚动的步长\n        loop: this.loop, // 跑马灯文本滚动的循环次数\n        fromStart: this.fromStart, // 跑马灯动画是否从头开始\n        src: this.marqueeText + this.src // 跑马灯显示的文本内容\n      })\n        .marqueeUpdateStrategy(MarqueeUpdateStrategy.PRESERVE_POSITION) // 设置跑马灯更新策略，保持当前位置\n        .width(300) // 设置跑马灯组件的宽度\n        .height(80) // 设置跑马灯组件的高度\n        .fontColor('#FFFFFF') // 设置跑马灯文本的颜色\n        .fontSize(48) // 设置跑马灯文本的字体大小\n        .fontWeight(700) // 设置跑马灯文本的字体粗细\n        .backgroundColor('#182431') // 设置跑马灯组件的背景颜色\n        .margin({ bottom: 40 }) // 设置跑马灯组件的下边距\n        .onStart(() => {\n          console.info('Marquee animation complete onStart') // 跑马灯动画开始时的回调\n        })\n        .onBounce(() => {\n          console.info('Marquee animation complete onBounce') // 跑马灯动画反弹时的回调\n        })\n        .onFinish(() => {\n          console.info('Marquee animation complete onFinish') // 跑马灯动画完成时的回调\n        })\n\n      // 创建一个按钮用于启动跑马灯动画\n      Button('Start')\n        .onClick(() => {\n          this.start = true // 启动跑马灯动画\n          // 启动文本时钟\n          this.controller.start()\n        })\n        .width(120) // 设置按钮的宽度\n        .height(40) // 设置按钮的高度\n        .fontSize(16) // 设置按钮文本的字体大小\n        .fontWeight(500) // 设置按钮文本的字体粗细\n        .backgroundColor('#007DFF') // 设置按钮的背景颜色\n\n      // 创建文本时钟组件，用于显示时间\n      TextClock({ timeZoneOffset: -8, controller: this.controller }) // 设置时区偏移量和控制器\n        .format('hms') // 设置时间格式为\"HH:MM:SS\"\n        .onDateChange((value: number) => {\n          this.src = this.convert2time(value); // 当时间变化时，更新跑马灯文本内容\n        })\n        .margin(20) // 设置文本时钟组件的外边距\n        .fontSize(30) // 设置文本时钟文本的字体大小\n    }\n    .width('100%') // 设置Flex容器的宽度为100%\n    .height('100%') // 设置Flex容器的高度为100%\n  }\n}"
        }
    ],
    "Menu": [
        {
            "description": "实现一个包含多个菜单项的菜单组件，每个菜单项包含不同的图标、文本内容和交互功能。点击按钮可以展示定义的菜单。",
            "code": "import { SymbolGlyphModifier } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  // 定义状态变量select，用于控制菜单项的选中状态，初始值为true\n  @State select: boolean = true;\n  \n  // 定义起始图标修饰符，使用系统图标$r('sys.symbol.ohos_mic')，并设置字体大小为24vp\n  @State startIconModifier: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_mic')).fontSize('24vp');\n  \n  // 定义结束图标修饰符，使用系统图标$r('sys.symbol.ohos_trash')，并设置字体大小为24vp\n  @State endIconModifier: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_trash')).fontSize('24vp');\n  \n  // 定义选中图标修饰符，使用系统图标$r('sys.symbol.checkmark')，并设置字体大小为24vp\n  @State selectIconModifier: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.checkmark')).fontSize('24vp');\n\n  // 定义子菜单组件，包含两个菜单项：\"复制\"和\"粘贴\"，并显示快捷键信息\n  @Builder\n  SubMenu() {\n    Menu() {\n      MenuItem({ content: \"复制\", labelInfo: \"Ctrl+C\" })\n      MenuItem({ content: \"粘贴\", labelInfo: \"Ctrl+V\" })\n    }\n  }\n\n  // 定义主菜单组件，包含多个菜单项，每个菜单项包含不同的图标、文本内容和交互功能\n  @Builder\n  MyMenu() {\n    Menu() {\n      // 创建带有起始图标的菜单项，内容为\"菜单选项\"\n      MenuItem({ symbolStartIcon: this.startIconModifier, content: \"菜单选项\" })\n      \n      // 创建带有起始图标的菜单项，内容为\"菜单选项\"，并设置为不可用状态\n      MenuItem({ symbolStartIcon: this.startIconModifier, content: \"菜单选项\" })\n        .enabled(false)\n      \n      // 创建带有起始和结束图标的菜单项，内容为\"菜单选项\"，并包含子菜单\n      MenuItem({\n        symbolStartIcon: this.startIconModifier,\n        content: \"菜单选项\",\n        symbolEndIcon: this.endIconModifier,\n        builder: (): void => this.SubMenu()\n      })\n      \n      // 创建带有标题的菜单项组，包含多个带有图标的菜单项和子菜单\n      MenuItemGroup({ header: '小标题' }) {\n        MenuItem({\n          symbolStartIcon: this.startIconModifier,\n          content: \"菜单选项\",\n          symbolEndIcon: this.endIconModifier,\n          builder: (): void => this.SubMenu()\n        })\n        MenuItem({\n          symbolStartIcon: this.startIconModifier,\n          content: \"菜单选项\",\n          symbolEndIcon: this.endIconModifier,\n          builder: (): void => this.SubMenu()\n        })\n      }\n      \n      // 创建带有选中状态的菜单项，内容为\"菜单选项\"，并设置选中图标\n      MenuItem({\n        content: \"菜单选项\",\n      }).selected(this.select).selectIcon(this.selectIconModifier)\n    }\n  }\n\n  // 构建页面布局，包含一个点击展示菜单的按钮\n  build() {\n    Row() {\n      Column() {\n        // 显示点击展示菜单的文本，字体大小为50，加粗\n        Text('click to show menu')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n      }\n      // 将MyMenu绑定到按钮，点击按钮展示菜单\n      .bindMenu(this.MyMenu)\n      .width('100%')\n    }\n    .height('100%')\n  }\n}"
        }
    ],
    "MenuItem": [
        {
            "description": "实现一个包含多个菜单项的菜单组件，支持图标、文本内容、子菜单、菜单项组等功能。页面布局包含一个按钮，点击按钮可以展示定义的菜单。",
            "code": "@Entry\n@Component\nstruct Index {\n  @State select: boolean = true // 定义一个状态变量select，初始值为true\n  private iconStr: ResourceStr = $r(\"app.media.view_list_filled\") // 定义私有变量iconStr，用于存储图标资源\n  private iconStr2: ResourceStr = $r(\"app.media.arrow_right_filled\") // 定义私有变量iconStr2，用于存储另一个图标资源\n\n  @Builder\n  SubMenu() {\n    Menu() {\n      MenuItem({ content: \"复制\", labelInfo: \"Ctrl+C\" }) // 创建一个菜单项\"复制\"，并显示快捷键信息\n      MenuItem({ content: \"粘贴\", labelInfo: \"Ctrl+V\" }) // 创建一个菜单项\"粘贴\"，并显示快捷键信息\n    }\n  }\n\n  @Builder\n  MyMenu(){\n    Menu() {\n      MenuItem({ startIcon: $r(\"app.media.icon\"), content: \"菜单选项\" }) // 创建一个带图标的菜单项\n      MenuItem({ startIcon: $r(\"app.media.icon\"), content: \"菜单选项\" }) // 创建另一个带图标的菜单项\n        .enabled(false) // 禁用该菜单项\n      MenuItem({\n        startIcon: this.iconStr,\n        content: \"菜单选项\",\n        endIcon: this.iconStr2,\n        builder: ():void=>this.SubMenu() // 创建一个带图标和子菜单的菜单项\n      })\n      MenuItemGroup({ header: '小标题' }) {\n        MenuItem({\n          startIcon: this.iconStr,\n          content: \"菜单选项\",\n          endIcon: this.iconStr2,\n          builder: ():void=>this.SubMenu() // 在菜单组中创建带图标和子菜单的菜单项\n        })\n        MenuItem({\n          startIcon: $r(\"app.media.app_icon\"),\n          content: \"菜单选项\",\n          endIcon: this.iconStr2,\n          builder: ():void=>this.SubMenu() // 在菜单组中创建带图标和子菜单的菜单项\n        })\n      }\n      MenuItem({\n        startIcon: this.iconStr,\n        content: \"菜单选项\",\n      })\n    }\n  }\n\n  build() {\n    Row() {\n      Column() {\n        Text('click to show menu') // 显示文本\"click to show menu\"\n          .fontSize(50) // 设置字体大小为50\n          .fontWeight(FontWeight.Bold) // 设置字体加粗\n      }\n      .bindMenu(this.MyMenu) // 绑定菜单到Column上\n      .width('100%') // 设置宽度为100%\n    }\n    .height('100%') // 设置高度为100%\n  }\n}"
        }
    ],
    "MenuItemGroup": [
        {
            "description": "实现一个包含多个菜单项的菜单组件，支持图标、文本内容、子菜单和菜单项组功能。页面布局包含一个按钮，点击按钮可以展示定义的菜单。",
            "code": "@Entry\n@Component\nstruct Index {\n  @State select: boolean = true // 定义一个状态变量select，初始值为true\n  private iconStr: ResourceStr = $r(\"app.media.view_list_filled\") // 定义私有变量iconStr，用于存储图标资源\n  private iconStr2: ResourceStr = $r(\"app.media.arrow_right_filled\") // 定义私有变量iconStr2，用于存储另一个图标资源\n\n  @Builder\n  SubMenu() {\n    Menu() {\n      MenuItem({ content: \"复制\", labelInfo: \"Ctrl+C\" }) // 创建一个菜单项\"复制\"，并显示快捷键信息\n      MenuItem({ content: \"粘贴\", labelInfo: \"Ctrl+V\" }) // 创建一个菜单项\"粘贴\"，并显示快捷键信息\n    }\n  }\n\n  @Builder\n  MyMenu(){\n    Menu() {\n      MenuItem({ startIcon: $r(\"app.media.icon\"), content: \"菜单选项\" }) // 创建一个带图标的菜单项\n      MenuItem({ startIcon: $r(\"app.media.icon\"), content: \"菜单选项\" }) // 创建另一个带图标的菜单项\n        .enabled(false) // 禁用该菜单项\n      MenuItem({\n        startIcon: this.iconStr,\n        content: \"菜单选项\",\n        endIcon: this.iconStr2,\n        builder: ():void=>this.SubMenu() // 创建一个带图标和子菜单的菜单项\n      })\n      MenuItemGroup({ header: '小标题' }) {\n        MenuItem({\n          startIcon: this.iconStr,\n          content: \"菜单选项\",\n          endIcon: this.iconStr2,\n          builder: ():void=>this.SubMenu() // 在菜单组中创建带图标和子菜单的菜单项\n        })\n        MenuItem({\n          startIcon: $r(\"app.media.app_icon\"),\n          content: \"菜单选项\",\n          endIcon: this.iconStr2,\n          builder: ():void=>this.SubMenu() // 在菜单组中创建带图标和子菜单的菜单项\n        })\n      }\n      MenuItem({\n        startIcon: this.iconStr,\n        content: \"菜单选项\",\n      })\n    }\n  }\n\n  build() {\n    Row() {\n      Column() {\n        Text('click to show menu') // 显示文本\"click to show menu\"\n          .fontSize(50) // 设置字体大小为50\n          .fontWeight(FontWeight.Bold) // 设置字体加粗\n      }\n      .bindMenu(this.MyMenu) // 绑定菜单到Column上\n      .width('100%') // 设置宽度为100%\n    }\n    .height('100%') // 设置高度为100%\n  }\n}"
        }
    ],
    "Navigation": [
        {
            "description": "该示例展示了如何在鸿蒙ArkUI中使用Navigation组件构建一个带有导航栏的应用页面。页面包含一个搜索输入框、一个列表展示区域、以及自定义的导航标题和菜单。通过点击按钮，可以切换导航标题栏的内间距，并跳转到另一个页面查看效果。",
            "code": "@Entry\n@Component\nstruct NavigationExample {\n  // 定义导航路径栈和菜单项\n  @Provide('navPathStack') navPathStack: NavPathStack = new NavPathStack();\n  // 初始化标题栏起始端内间距\n  @State paddingStart: LengthMetrics = LengthMetrics.vp(0);\n  // 初始化标题栏结束端内间距\n  @State paddingEnd: LengthMetrics = LengthMetrics.vp(0);\n  @State menuItems: Array<NavigationMenuItem> = [\n    {\n      value: 'menuItem1',\n      icon: 'resources/base/media/ic_public_ok.svg', // 图标资源路径\n      action: () => {\n      }\n    }\n  ]\n\n  // 定义路由构建器\n  @Builder\n  myRouter(name: string, param?: Object) {\n    if (name === 'NavDestinationExample') {\n      NavDestinationExample();\n    }\n  }\n\n  // 构建导航页面\n  build() {\n    Navigation(this.navPathStack) {\n      Column() {\n        // 切换标题栏内间距为16vp的按钮\n        Button('切换标题栏内间距为16vp')\n          .onClick(() => {\n            this.paddingStart = LengthMetrics.vp(16);\n            this.paddingEnd = LengthMetrics.vp(16);\n          })\n          .margin({ top: 5 })\n\n        // 切换标题栏内间距为24vp的按钮\n        Button('切换标题栏内间距为24vp')\n          .onClick(() => {\n            this.paddingStart = LengthMetrics.vp(24);\n            this.paddingEnd = LengthMetrics.vp(24);\n          })\n          .margin({ top: 5 })\n\n        // 跳转按钮\n        Button('跳转')\n          .onClick(() => {\n            this.navPathStack.pushPathByName('NavDestinationExample', null);\n          })\n          .margin({ top: 5 })\n      }\n    }\n    .titleMode(NavigationTitleMode.Mini)\n    .title('一级页面', {\n      paddingStart: this.paddingStart,\n      paddingEnd: this.paddingEnd,\n    })\n    .menus(this.menuItems)\n    .navDestination(this.myRouter)\n  }\n}\n\n// NavDestinationExample组件\n@Component\nexport struct NavDestinationExample {\n  @Consume('navPathStack') navPathStack: NavPathStack;\n  @State menuItems: Array<NavigationMenuItem> = [\n    {\n      value: 'menuItem1',\n      icon: 'resources/base/media/ic_public_ok.svg', // 图标资源路径\n      action: () => {\n      }\n    }\n  ]\n  @State paddingStart: LengthMetrics = LengthMetrics.vp(0);\n  @State paddingEnd: LengthMetrics = LengthMetrics.vp(0);\n\n  build() {\n    NavDestination() {\n      Row() {\n        Column() {\n          // 切换标题栏内间距为32vp的按钮\n          Button('切换标题栏内间距为32vp')\n            .onClick(() => {\n              this.paddingStart = LengthMetrics.vp(32);\n              this.paddingEnd = LengthMetrics.vp(32);\n            })\n            .margin({ top: 5 })\n\n          // 切换标题栏内间距为20vp的按钮\n          Button('切换标题栏内间距为20vp')\n            .onClick(() => {\n              this.paddingStart = LengthMetrics.vp(20);\n              this.paddingEnd = LengthMetrics.vp(20);\n            })\n            .margin({ top: 5 })\n        }\n        .width('100%')\n      }\n      .height('100%')\n    }\n    .hideTitleBar(false)\n    .title('NavDestination title', {\n      paddingStart: this.paddingStart,\n      paddingEnd: this.paddingEnd,\n    })\n    .menus(this.menuItems)\n  }\n}"
        }
    ],
    "NavRouter": [
        {
            "description": "实现一个导航路由示例，包含两个导航路由：WLAN和蓝牙。每个导航路由包含一个导航内容和一个导航目的地。导航内容显示一个带有图标和文本的行，导航目的地显示一个文本提示。导航路由的背景颜色会根据激活状态变化，激活时背景颜色为灰色，未激活时为白色。导航路由的模式分别为PUSH_WITH_RECREATE和REPLACE。",
            "code": "@Entry\n@Component\nstruct NavRouterExample {\n  @State isActiveWLAN: boolean = false // 用于记录WLAN导航的激活状态\n  @State isActiveBluetooth: boolean = false // 用于记录蓝牙导航的激活状态\n\n  build() {\n    Navigation() {\n      // WLAN导航路由\n      NavRouter() {\n        // WLAN导航内容\n        Row() {\n          Row()\n            .width(30) // 设置宽度为30\n            .height(30) // 设置高度为30\n            .borderRadius(30) // 设置圆角半径为30\n            .margin({ left: 3, right: 10 }) // 设置左右边距\n            .backgroundColor(Color.Pink) // 设置背景颜色为粉色\n          Text(`WLAN`)\n            .fontSize(22) // 设置字体大小为22\n            .fontWeight(500) // 设置字体粗细为500\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n        }\n        .width('90%') // 设置宽度为父容器的90%\n        .height(60) // 设置高度为60\n\n        // WLAN导航目的地\n        NavDestination() {\n          Flex({ direction: FlexDirection.Row }) {\n            Text('未找到可用WLAN').fontSize(30).padding({ left: 15 }) // 设置文本字体大小为30，左边距为15\n          }\n        }.title(\"WLAN\") // 设置导航目的地的标题为WLAN\n      }\n      .margin({ top: 10, bottom: 10 }) // 设置上下边距为10\n      .backgroundColor(this.isActiveWLAN ? '#ccc' : '#fff') // 根据激活状态改变背景颜色，激活时为灰色，未激活时为白色\n      .borderRadius(20) // 设置圆角半径为20\n      .mode(NavRouteMode.PUSH_WITH_RECREATE) // 设置路由模式为PUSH_WITH_RECREATE\n      .onStateChange((isActivated: boolean) => {\n        this.isActiveWLAN = isActivated // 监听激活状态变化，更新isActiveWLAN状态\n      })\n\n      // 蓝牙导航路由，与WLAN导航类似\n      NavRouter() {\n        Row() {\n          Row()\n            .width(30) // 设置宽度为30\n            .height(30) // 设置高度为30\n            .borderRadius(30) // 设置圆角半径为30\n            .margin({ left: 3, right: 10 }) // 设置左右边距\n            .backgroundColor(Color.Pink) // 设置背景颜色为粉色\n          Text(`蓝牙`)\n            .fontSize(22) // 设置字体大小为22\n            .fontWeight(500) // 设置字体粗细为500\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n        }\n        .width('90%') // 设置宽度为父容器的90%\n        .height(60) // 设置高度为60\n\n        NavDestination() {\n          Flex({ direction: FlexDirection.Row }) {\n            Text('未找到可用蓝牙').fontSize(30).padding({ left: 15 }) // 设置文本字体大小为30，左边距为15\n          }\n        }.title(\"蓝牙\") // 设置导航目的地的标题为蓝牙\n      }\n      .margin({ top: 10, bottom: 10 }) // 设置上下边距为10\n      .backgroundColor(this.isActiveBluetooth ? '#ccc' : '#fff') // 根据激活状态改变背景颜色，激活时为灰色，未激活时为白色\n      .borderRadius(20) // 设置圆角半径为20\n      .mode(NavRouteMode.REPLACE) // 设置路由模式为REPLACE\n      .onStateChange((isActivated: boolean) => {\n        this.isActiveBluetooth = isActivated // 监听激活状态变化，更新isActiveBluetooth状态\n      })\n    }\n    .height('100%') // 设置高度为父容器的100%\n    .width('100%') // 设置宽度为父容器的100%\n    .title('设置') // 设置导航栏标题为“设置”\n    .backgroundColor(\"#F2F3F5\") // 设置背景颜色为浅灰色\n    .titleMode(NavigationTitleMode.Free) // 设置标题模式为自由模式\n    .mode(NavigationMode.Auto) // 设置导航模式为自动模式\n  }\n}"
        }
    ],
    "NavDestination": [
        {
            "description": "该示例展示了如何在鸿蒙ArkUI中使用Navigation组件构建一个带有自定义标题和菜单的导航页面。页面包含一个搜索输入框、一个列表展示数字项，并且可以通过点击按钮跳转到另一个页面。",
            "code": "@Entry\n@Component\nstruct NavigationExample {\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] // 用于展示的数字数组\n  @State currentIndex: number = 0 // 当前选中的索引\n\n  /**\n   * NavigationTitle builder function creates the title section of the navigation.\n   * It includes a main title and a subtitle.\n   */\n  @Builder NavigationTitle() {\n    Column() {\n      Text('Title')\n        .fontColor('#182431')\n        .fontSize(30)\n        .lineHeight(41)\n        .fontWeight(700)\n      Text('subtitle')\n        .fontColor('#182431')\n        .fontSize(14)\n        .lineHeight(19)\n        .opacity(0.4)\n        .margin({ top: 2, bottom: 20 })\n    }.alignItems(HorizontalAlign.Start)\n  }\n\n  /**\n   * NavigationMenus builder function creates the menu section of the navigation.\n   * It includes three images for menu options.\n   */\n  @Builder NavigationMenus() {\n    Row() {\n      Image('resources/base/media/ic_public_add.svg')\n        .width(24)\n        .height(24)\n      Image('resources/base/media/ic_public_add.svg')\n        .width(24)\n        .height(24)\n        .margin({ left: 24 })\n      Image('common/ic_public_more.svg')\n        .width(24)\n        .height(24)\n        .margin({ left: 24 })\n    }\n  }\n\n  /**\n   * build function constructs the overall layout of the navigation page.\n   * It includes search input, list of items, toolbar configuration, and title/menus settings.\n   */\n  build() {\n    Column() {\n      Navigation() {\n        TextInput({ placeholder: 'search...' })\n          .width('90%')\n          .height(40)\n          .backgroundColor('#FFFFFF')\n          .margin({ top: 8 })\n\n        List({ space: 12, initialIndex: 0 }) {\n          ForEach(this.arr, (item: number) => {\n            ListItem() {\n              Text('' + item)\n                .width('90%')\n                .height(72)\n                .backgroundColor('#FFFFFF')\n                .borderRadius(24)\n                .fontSize(16)\n                .fontWeight(500)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: number) => item.toString())\n        }\n        .height(324)\n        .width('100%')\n        .margin({ top: 12, left: '10%' })\n      }\n      .title(this.NavigationTitle)\n      .menus(this.NavigationMenus)\n      .titleMode(NavigationTitleMode.Full)\n      .toolbarConfiguration([\n        {\n          value: $r(\"app.string.navigation_toolbar_add\"),\n          icon: $r(\"app.media.ic_public_highlightsed\")\n        },\n        {\n          value: $r(\"app.string.navigation_toolbar_app\"),\n          icon: $r(\"app.media.ic_public_highlights\")\n        },\n        {\n          value: $r(\"app.string.navigation_toolbar_collect\"),\n          icon: $r(\"app.media.ic_public_highlights\")\n        }\n      ])\n      .hideTitleBar(false)\n      .hideToolBar(false)\n      .onTitleModeChange((titleModel: NavigationTitleMode) => {\n        console.info('titleMode' + titleModel)\n      })\n    }.width('100%').height('100%').backgroundColor('#F1F3F5')\n  }\n}"
        }
    ],
    "PatternLock": [
        {
            "description": "实现一个图案锁组件，用户可以通过滑动连接圆点来设置和验证密码。组件包含一个提示信息文本、一个图案锁控件和一个重置按钮。图案锁控件支持自定义样式和行为，如圆点大小、路径颜色、自动重置等。用户输入的密码长度必须大于5，且两次输入的密码必须一致才能设置成功。",
            "code": "import { LengthUnit } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct PatternLockExample {\n  @State passwords: Number[] = [] // 用于存储用户输入的密码\n  @State message: string = 'please input password!' // 初始提示信息，提示用户输入密码\n  private patternLockController: PatternLockController = new PatternLockController() // 创建图案锁控制器实例，用于控制图案锁的行为\n\n  build() {\n    Column() {\n      Text(this.message) // 显示提示信息\n        .textAlign(TextAlign.Center) // 文本居中对齐\n        .margin(20) // 设置文本外边距\n        .fontSize(20) // 设置文本字体大小\n      \n      PatternLock(this.patternLockController) // 创建图案锁组件，并传入控制器实例\n        .sideLength(200) // 设置图案锁的边长\n        .circleRadius(9) // 设置图案锁中圆点的半径\n        .pathStrokeWidth(18) // 设置图案锁路径线的宽度\n        .activeColor('#B0C4DE') // 设置图案锁激活状态的颜色\n        .selectedColor('#228B22') // 设置图案锁选中状态的颜色\n        .pathColor('#90EE90') // 设置图案锁路径线的颜色\n        .backgroundColor('#F5F5F5') // 设置图案锁的背景颜色\n        .autoReset(true) // 设置图案锁在完成一次输入后是否自动重置\n        .activateCircleStyle({\n          color: '#90EE90', // 设置激活圆点的颜色\n          radius: { value: 16, unit: LengthUnit.VP }, // 设置激活圆点的半径，单位为视口宽度单位\n          enableWaveEffect: true // 启用激活圆点的波浪效果\n        })\n        .onDotConnect((index: number) => {\n          console.log(\"onDotConnect index: \" + index) // 当用户连接圆点时触发，打印连接的圆点索引\n        })\n        .onPatternComplete((input: Array<number>) => {\n          // 判断用户输入的密码长度是否符合要求\n          if (input === null || input === undefined || input.length < 5) {\n            this.message = 'The password length needs to be greater than 5, please enter again.' // 提示用户密码长度不足，需要重新输入\n            return\n          }\n          // 判断是否已经设置过密码\n          if (this.passwords.length > 0) {\n            // 判断两次输入的密码是否一致\n            if (this.passwords.toString() === input.toString()) {\n              this.passwords = input // 更新密码\n              this.message = 'Set password successfully: ' + this.passwords.toString() // 提示用户密码设置成功\n              this.patternLockController.setChallengeResult(PatternLockChallengeResult.CORRECT) // 设置图案锁挑战结果为正确\n            } else {\n              this.message = 'Inconsistent passwords, please enter again.' // 提示用户两次输入的密码不一致，需要重新输入\n              this.patternLockController.setChallengeResult(PatternLockChallengeResult.WRONG) // 设置图案锁挑战结果为错误\n            }\n          } else {\n            this.passwords = input // 第一次输入密码，存储密码\n            this.message = \"Please enter again.\" // 提示用户再次输入密码\n          }\n        })\n      \n      Button('Reset PatternLock') // 创建重置按钮\n        .margin(30) // 设置按钮外边距\n        .onClick(() => {\n          // 重置图案锁\n          this.patternLockController.reset() // 重置图案锁状态\n          this.passwords = [] // 清空存储的密码\n          this.message = 'Please input password' // 提示用户重新输入密码\n        })\n    }\n    .width('100%') // 设置布局宽度为100%\n    .height('100%') // 设置布局高度为100%\n  }\n}"
        }
    ],
    "Progress": [
        {
            "description": "实现一个展示多种类型进度条的示例组件，包括线性进度条、环形进度条、刻度环形进度条、环形进度条和胶囊进度条。每种进度条都有不同的样式和属性设置，用于展示不同进度条的效果。",
            "code": "@Entry\n@Component\nstruct ProgressExample {\n  build() {\n    Column({ space: 15 }) {\n      // 显示线性进度条的标题\n      Text('Linear Progress').fontSize(9).fontColor(0xCCCCCC).width('90%')\n      // 显示一个线性进度条，初始值为10，总长度为默认值100\n      Progress({ value: 10, type: ProgressType.Linear }).width(200)\n      // 显示一个线性进度条，初始值为50，总长度为150，颜色为灰色\n      Progress({ value: 20, total: 150, type: ProgressType.Linear }).color(Color.Grey).value(50).width(200)\n\n      // 显示环形进度条的标题\n      Text('Eclipse Progress').fontSize(9).fontColor(0xCCCCCC).width('90%')\n      Row({ space: 40 }) {\n        // 显示一个环形进度条，初始值为10，总长度为默认值100\n        Progress({ value: 10, type: ProgressType.Eclipse }).width(100)\n        // 显示一个环形进度条，初始值为50，总长度为150，颜色为灰色\n        Progress({ value: 20, total: 150, type: ProgressType.Eclipse }).color(Color.Grey).value(50).width(100)\n      }\n\n      // 显示刻度环形进度条的标题\n      Text('ScaleRing Progress').fontSize(9).fontColor(0xCCCCCC).width('90%')\n      Row({ space: 40 }) {\n        // 显示一个刻度环形进度条，初始值为10，总长度为默认值100\n        Progress({ value: 10, type: ProgressType.ScaleRing }).width(100)\n        // 显示一个刻度环形进度条，初始值为50，总长度为150，颜色为灰色，设置刻度和宽度\n        Progress({ value: 20, total: 150, type: ProgressType.ScaleRing })\n          .color(Color.Grey).value(50).width(100)\n          .style({ strokeWidth: 15, scaleCount: 15, scaleWidth: 5 })\n      }\n\n      // 对比不同刻度数量和宽度的效果\n      Row({ space: 40 }) {\n        // 显示一个刻度环形进度条，初始值为50，总长度为150，颜色为灰色，设置刻度和宽度\n        Progress({ value: 20, total: 150, type: ProgressType.ScaleRing })\n          .color(Color.Grey).value(50).width(100)\n          .style({ strokeWidth: 20, scaleCount: 20, scaleWidth: 5 })\n        // 显示一个刻度环形进度条，初始值为50，总长度为150，颜色为灰色，设置刻度和宽度\n        Progress({ value: 20, total: 150, type: ProgressType.ScaleRing })\n          .color(Color.Grey).value(50).width(100)\n          .style({ strokeWidth: 20, scaleCount: 30, scaleWidth: 3 })\n      }\n\n      // 显示环形进度条的标题\n      Text('Ring Progress').fontSize(9).fontColor(0xCCCCCC).width('90%')\n      Row({ space: 40 }) {\n        // 显示一个环形进度条，初始值为10，总长度为默认值100\n        Progress({ value: 10, type: ProgressType.Ring }).width(100)\n        // 显示一个环形进度条，初始值为50，总长度为150，颜色为灰色，设置宽度\n        Progress({ value: 20, total: 150, type: ProgressType.Ring })\n          .color(Color.Grey).value(50).width(100)\n          .style({ strokeWidth: 20 })\n      }\n\n      // 显示胶囊进度条的标题\n      Text('Capsule Progress').fontSize(9).fontColor(0xCCCCCC).width('90%')\n      Row({ space: 40 }) {\n        // 显示一个胶囊进度条，初始值为10，总长度为默认值100，高度为50\n        Progress({ value: 10, type: ProgressType.Capsule }).width(100).height(50)\n        // 显示一个胶囊进度条，初始值为50，总长度为150，颜色为灰色，高度为50\n        Progress({ value: 20, total: 150, type: ProgressType.Capsule })\n          .color(Color.Grey)\n          .value(50)\n          .width(100)\n          .height(50)\n      }\n    }.width('100%').margin({ top: 30 })\n  }\n}"
        }
    ],
    "QRCode": [
        {
            "description": "实现一个展示不同样式二维码的示例组件。该组件通过使用QRCode组件生成二维码，并展示不同颜色、背景色和不透明度的效果。",
            "code": "@Entry\n@Component\nstruct QRCodeExample {\n  // 定义二维码的内容，默认为'hello world'\n  private value: string = 'hello world'\n\n  build() {\n    // 创建一个列布局，元素之间的间距为5\n    Column({ space: 5 }) {\n      // 显示普通二维码的标题\n      Text('normal').fontSize(9).width('90%').fontColor(0xCCCCCC).fontSize(30)\n      // 生成并显示普通二维码，宽度为140，高度为140\n      QRCode(this.value).width(140).height(140)\n\n      // 显示设置二维码颜色的标题\n      Text('color').fontSize(9).width('90%').fontColor(0xCCCCCC).fontSize(30)\n      // 生成并显示颜色为金黄色的二维码，宽度为140，高度为140\n      QRCode(this.value).color(0xF7CE00).width(140).height(140)\n\n      // 显示设置二维码背景色的标题\n      Text('backgroundColor').fontSize(9).width('90%').fontColor(0xCCCCCC).fontSize(30)\n      // 生成并显示背景色为橙色的二维码，宽度为140，高度为140\n      QRCode(this.value).width(140).height(140).backgroundColor(Color.Orange)\n\n      // 显示设置二维码不透明度的标题\n      Text('contentOpacity').fontSize(9).width('90%').fontColor(0xCCCCCC).fontSize(30)\n      // 生成并显示不透明度为0.1的黑色二维码，宽度为140，高度为140\n      QRCode(this.value).width(140).height(140).color(Color.Black).contentOpacity(0.1)\n    }\n    // 设置列布局的宽度为100%，顶部外边距为5\n    .width('100%').margin({ top: 5 })\n  }\n}"
        }
    ],
    "Radio": [
        {
            "description": "实现一个包含两个单选按钮（Radio）的界面，每个单选按钮旁边有一个文本标签。整个界面使用Flex布局进行居中对齐，并且Row和Column组件分别占满整个屏幕的宽度和高度。",
            "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column() {\n        // 创建一个Flex布局，水平和垂直居中对齐其子组件\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建一个单选按钮，设置其值为'value1'，并将其分组为'radioGroup'\n          Radio({ value: 'value1', group: 'radioGroup' })\n            .width(30) // 设置单选按钮的宽度为30\n            .height(30) // 设置单选按钮的高度为30\n          // 创建文本标签，设置字体大小为20\n          Text('Radio1').fontSize(20)\n        }\n\n        // 创建另一个Flex布局，水平和垂直居中对齐其子组件\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建一个单选按钮，设置其值为'value2'，并将其分组为'radioGroup'\n          Radio({ value: 'value2', group: 'radioGroup' })\n            .width(30) // 设置单选按钮的宽度为30\n            .height(30) // 设置单选按钮的高度为30\n          // 创建文本标签，设置字体大小为20\n          Text('Radio2').fontSize(20)\n        }\n      }\n      .width('100%') // 设置Column的宽度为100%，占满父容器的宽度\n    }\n    .height('100%') // 设置Row的高度为100%，占满父容器的高度\n  }\n}"
        },
        {
            "description": "实现一个包含两个Radio组件的界面，用户可以通过点击选择不同的选项。每个Radio组件具有不同的初始选中状态和自定义样式。",
            "code": "@Entry\n@Component\nstruct refreshExample {\n  build() {\n    Column({ space: 50 }) { // 创建一个垂直布局，组件间距为50\n      Row() { // 创建一个水平布局\n        // 创建一个Radio组件，设置其初始选中状态和自定义样式\n        // 功能与效果描述：Radio组件用于用户选择某个选项。设置初始选中状态和自定义样式以确保其显示效果。\n        Radio({ value: 'Radio1', group: 'radioGroup' }) // 创建一个Radio组件，值为'Radio1'，属于'radioGroup'组\n          .contentModifier(new MyRadioStyle(1, Color.Red)) // 设置Radio组件的自定义样式，样式由MyRadioStyle类定义，参数为1和红色\n          .checked(false) // 设置Radio组件的初始选中状态为未选中\n          .width(300) // 设置Radio组件的宽度为300\n          .height(100) // 设置Radio组件的高度为100\n      }\n      Row() { // 创建一个水平布局\n        // 创建一个Radio组件，设置其初始选中状态和自定义样式\n        // 功能与效果描述：Radio组件用于用户选择某个选项。设置初始选中状态和自定义样式以确保其显示效果。\n        Radio({ value: 'Radio2', group: 'radioGroup' }) // 创建一个Radio组件，值为'Radio2'，属于'radioGroup'组\n          .checked(true) // 设置Radio组件的初始选中状态为选中\n          .width(300) // 设置Radio组件的宽度为300\n          .height(60) // 设置Radio组件的高度为60\n          .contentModifier(new MyRadioStyle(2, Color.Red)) // 设置Radio组件的自定义样式，样式由MyRadioStyle类定义，参数为2和红色\n      }\n    }\n  }\n}"
        },
        {
            "description": "实现一个包含三个Radio组件的示例，每个Radio组件代表一个选项。用户可以选择其中一个选项，并且每个选项的选中状态变化会被监听并输出到控制台。布局采用Flex布局，水平和垂直居中对齐其子组件。",
            "code": "@Entry\n@Component\nstruct RadioExample {\n  build() {\n    // 创建一个Flex布局，水平和垂直居中对齐其子组件\n    Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n      Column() {\n        Text('Radio1')\n        // 创建一个Radio组件，设置其初始选中状态和样式\n        // 功能与效果描述：Radio组件用于用户选择某个选项。设置初始选中状态和样式以确保其显示效果。\n        Radio({ value: 'Radio1', group: 'radioGroup' }).checked(true)\n          .radioStyle({\n            checkedBackgroundColor: Color.Pink\n          })\n          .height(50)\n          .width(50)\n          .onChange((isChecked: boolean) => {\n            // 监听Radio组件的选中状态变化，并输出到控制台\n            // 功能与效果描述：监听Radio组件的选中状态变化，以便在用户选择时进行相应的处理。\n            console.log('Radio1 status is ' + isChecked)\n          })\n      }\n      Column() {\n        Text('Radio2')\n        // 创建一个Radio组件，设置其初始选中状态和样式\n        // 功能与效果描述：Radio组件用于用户选择某个选项。设置初始选中状态和样式以确保其显示效果。\n        Radio({ value: 'Radio2', group: 'radioGroup' }).checked(false)\n          .radioStyle({\n            checkedBackgroundColor: Color.Pink\n          })\n          .height(50)\n          .width(50)\n          .onChange((isChecked: boolean) => {\n            // 监听Radio组件的选中状态变化，并输出到控制台\n            // 功能与效果描述：监听Radio组件的选中状态变化，以便在用户选择时进行相应的处理。\n            console.log('Radio2 status is ' + isChecked)\n          })\n      }\n      Column() {\n        Text('Radio3')\n        // 创建一个Radio组件，设置其初始选中状态和样式\n        // 功能与效果描述：Radio组件用于用户选择某个选项。设置初始选中状态和样式以确保其显示效果。\n        Radio({ value: 'Radio3', group: 'radioGroup' }).checked(false)\n          .radioStyle({\n            checkedBackgroundColor: Color.Pink\n          })\n          .height(50)\n          .width(50)\n          .onChange((isChecked: boolean) => {\n            // 监听Radio组件的选中状态变化，并输出到控制台\n            // 功能与效果描述：监听Radio组件的选中状态变化，以便在用户选择时进行相应的处理。\n            console.log('Radio3 status is ' + isChecked)\n          })\n      }\n    }.padding({ top: 30 })\n  }\n}"
        },
        {
            "description": "实现一个包含三个Radio组件的示例，每个Radio组件分别使用不同的指示器类型（TICK、DOT、CUSTOM），并监听其选中状态变化。\n布局：使用Flex布局，方向为行（Row），内容居中对齐。\n样式：每个Radio组件的高度为50，宽度为80，并设置初始选中状态。\n功能与效果描述：用户可以通过点击Radio组件来选择不同的选项，选中状态变化时会在控制台输出相应的信息。",
            "code": "@Entry\n@Component\nstruct RadioExample {\n  @Builder \n  indicatorBuilder() {\n    // 创建一个自定义的指示器，使用一个星形图标\n    // 功能与效果描述：自定义指示器用于在Radio组件选中时显示一个星形图标。\n    Image($r(\"app.media.star\"))\n  }\n\n  build() {\n    Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n      Column() {\n        Text('Radio1')\n        // 创建一个Radio组件，设置其初始选中状态和指示器类型\n        // 功能与效果描述：Radio组件用于用户选择某个选项。设置初始选中状态和指示器类型以确保其显示效果。\n        Radio({ value: 'Radio1', group: 'radioGroup',\n          indicatorType:RadioIndicatorType.TICK\n        }).checked(true)\n          .height(50)\n          .width(80)\n          .onChange((isChecked: boolean) => {\n            // 监听Radio组件的选中状态变化，并输出到控制台\n            // 功能与效果描述：监听Radio组件的选中状态变化，以便在用户选择时进行相应的处理。\n            console.log('Radio1 status is ' + isChecked)\n          })\n      }\n\n      Column() {\n        Text('Radio2')\n        // 创建一个Radio组件，设置其初始选中状态和指示器类型\n        // 功能与效果描述：Radio组件用于用户选择某个选项。设置初始选中状态和指示器类型以确保其显示效果。\n        Radio({ value: 'Radio2', group: 'radioGroup',\n          indicatorType:RadioIndicatorType.DOT\n        }).checked(false)\n          .height(50)\n          .width(80)\n          .onChange((isChecked: boolean) => {\n            // 监听Radio组件的选中状态变化，并输出到控制台\n            // 功能与效果描述：监听Radio组件的选中状态变化，以便在用户选择时进行相应的处理。\n            console.log('Radio2 status is ' + isChecked)\n          })\n      }\n\n      Column() {\n        Text('Radio3')\n        // 创建一个Radio组件，设置其初始选中状态和自定义指示器\n        // 功能与效果描述：Radio组件用于用户选择某个选项。设置初始选中状态和自定义指示器以确保其显示效果。\n        Radio({ value: 'Radio3', group: 'radioGroup',\n          indicatorType:RadioIndicatorType.CUSTOM,\n          indicatorBuilder:()=>{this.indicatorBuilder()}\n        }).checked(false)\n          .height(50)\n          .width(80)\n          .onChange((isChecked: boolean) => {\n            // 监听Radio组件的选中状态变化，并输出到控制台\n            // 功能与效果描述：监听Radio组件的选中状态变化，以便在用户选择时进行相应的处理。\n            console.log('Radio3 status is ' + isChecked)\n          })\n      }\n    }.padding({ top: 30 })\n  }\n}"
        }
    ],
    "Rating": [
        {
            "description": "实现一个评分示例组件，包含两个主要部分：\n1. 一个评分条组件，用户可以通过点击星星来改变评分，评分条的初始值为3.5，星星总数为5，步长为0.5。\n2. 一个显示当前评分的文本组件，评分变化时会实时更新显示的评分值。\n3. 一个包含头像、用户名、评分和日期的评论条目，评分条不可编辑。\n4. 一个自定义评分条的示例，支持动态改变评分总数、步长和是否为指示器。",
            "code": "@Entry\n@Component\nstruct RatingExample {\n  @State rating: number = 3.5; // 初始评分为3.5\n\n  build() {\n    Column() {\n      Column() {\n        // 创建一个评分组件，包括星星数量、步长、边距等设置，支持评分变化时的回调\n        Rating({ rating: this.rating, indicator: false })\n          .stars(5) // 设置星星数量为5\n          .stepSize(0.5) // 设置步长为0.5\n          .margin({ top: 24 }) // 设置边距\n          .onChange((value: number) => {\n            this.rating = value; // 当评分变化时更新当前评分值\n          });\n        Text('current score is ' + this.rating)\n          .fontSize(16) // 设置字体大小\n          .fontColor('rgba(24,36,49,0.60)') // 设置字体颜色\n          .margin({ top: 16 }); // 设置边距\n      }\n      .width(360)\n      .height(113)\n      .backgroundColor('#FFFFFF')\n      .margin({ top: 68 }); // 设置宽度、高度、背景色和边距\n\n      Row() {\n        // 创建一个圆形头像图片\n        Image('common/testImage.jpg')\n          .width(40) // 设置宽度\n          .height(40) // 设置高度\n          .borderRadius(20) // 设置圆角半径\n          .margin({ left: 24 }); // 设置边距\n        Column() {\n          Text('Yue')\n            .fontSize(16) // 设置字体大小\n            .fontColor('#182431') // 设置字体颜色\n            .fontWeight(500); // 设置字体粗细\n          Row() {\n            // 创建一个评分组件，显示日期信息\n            Rating({ rating: 3.5, indicator: false })\n              .margin({ top: 1, right: 8 }); // 设置评分和边距\n            Text('2021/06/02')\n              .fontSize(10) // 设置字体大小\n              .fontColor('#182431'); // 设置字体颜色\n          }\n        }\n        .margin({ left: 12 })\n        .alignItems(HorizontalAlign.Start); // 设置边距和对齐方式\n\n        Text('1st Floor')\n          .fontSize(10) // 设置字体大小\n          .fontColor('#182431') // 设置字体颜色\n          .position({ x: 295, y: 8 }); // 设置位置\n      }\n      .width(360)\n      .height(56)\n      .backgroundColor('#FFFFFF')\n      .margin({ top: 64 }); // 设置宽度、高度、背景色和边距\n    }\n    .width('100%')\n    .height('100%')\n    .backgroundColor('#F1F3F5'); // 设置宽度、高度和背景色\n  }\n}\n\n// 自定义评分条样式类\nclass MyRatingStyle implements ContentModifier<RatingConfiguration> {\n  name: string = \"\"; // 评分条样式名称\n  style: number = 0; // 评分条样式值\n  constructor(value1: string, value2: number) {\n    this.name = value1;\n    this.style = value2;\n  }\n  applyContent(): WrappedBuilder<[RatingConfiguration]> {\n    return wrapBuilder(buildRating);\n  }\n}\n\n// 构建评分条的UI结构\n@Builder function buildRating(config: RatingConfiguration) {\n  Column() {\n    Row() {\n      // 创建每个圆圈表示0.5分的评分点，根据评分值显示不同颜色，点击事件用于改变评分\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 0.4 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            if (config.stepSize == 0.5) {\n              config.triggerChange(0.5);\n              return;\n            }\n            if (config.stepSize == 1) {\n              config.triggerChange(1);\n              return;\n            }\n          }\n        })\n        .visibility(config.stars >= 1 ? Visibility.Visible : Visibility.Hidden);\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 0.9 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            config.triggerChange(1);\n          }\n        })\n        .visibility(config.stars >= 1 ? Visibility.Visible : Visibility.Hidden);\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 1.4 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            if (config.stepSize == 0.5) {\n              config.triggerChange(1.5);\n              return;\n            }\n            if (config.stepSize == 1) {\n              config.triggerChange(2);\n              return;\n            }\n          }\n        })\n        .visibility(config.stars >= 2 ? Visibility.Visible : Visibility.Hidden)\n        .margin({ left: 10 });\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 1.9 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            config.triggerChange(2);\n          }\n        })\n        .visibility(config.stars >= 2 ? Visibility.Visible : Visibility.Hidden);\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 2.4 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            if (config.stepSize == 0.5) {\n              config.triggerChange(2.5);\n              return;\n            }\n            if (config.stepSize == 1) {\n              config.triggerChange(3);\n              return;\n            }\n          }\n        })\n        .visibility(config.stars >= 3 ? Visibility.Visible : Visibility.Hidden)\n        .margin({ left: 10 });\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 2.9 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            config.triggerChange(3);\n          }\n        })\n        .visibility(config.stars >= 3 ? Visibility.Visible : Visibility.Hidden);\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 3.4 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            if (config.stepSize == 0.5) {\n              config.triggerChange(3.5);\n              return;\n            }\n            if (config.stepSize == 1) {\n              config.triggerChange(4);\n              return;\n            }\n          }\n        })\n        .visibility(config.stars >= 4 ? Visibility.Visible : Visibility.Hidden)\n        .margin({ left: 10 });\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 3.9 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            config.triggerChange(4);\n          }\n        })\n        .visibility(config.stars >= 4 ? Visibility.Visible : Visibility.Hidden);\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 4.4 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            if (config.stepSize == 0.5) {\n              config.triggerChange(4.5);\n              return;\n            }\n            if (config.stepSize == 1) {\n              config.triggerChange(5);\n              return;\n            }\n          }\n        })\n        .visibility(config.stars >= 5 ? Visibility.Visible : Visibility.Hidden)\n        .margin({ left: 10 });\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 4.9 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            config.triggerChange(5);\n          }\n        })\n        .visibility(config.stars >= 5 ? Visibility.Visible : Visibility.Hidden);\n    }\n    Text(\"分值：\" + config.rating);\n  }\n}\n\n@Entry\n@Component\nstruct ratingExample {\n  @State rating: number = 0; // 当前评分值\n  @State ratingIndicator: boolean = true; // 评分条是否作为指示器\n  @State ratingStars: number = 0; // 评分总数\n  @State ratingStepsize: number = 0.5; // 评分步长\n  @State ratingEnabled: boolean = true; // 评分是否可用\n\n  build() {\n    Row() {\n      Column() {\n        // 创建评分条组件，根据状态设置属性，包括评分值、指示器状态等\n        // 可根据评分变化触发onChange事件\n        // contentModifier用于应用自定义样式\n        Rating({\n          rating: 0,\n          indicator: this.ratingIndicator\n        })\n          .stepSize(this.ratingStepsize)\n          .stars(this.ratingStars)\n          .backgroundColor(Color.Transparent)\n          .width('100%')\n          .height(50)\n          .onChange((value: number) => {\n            console.info('Rating change is' + value);\n            this.rating = value;\n          })\n          .contentModifier(new MyRatingStyle(\"hello\", 3));\n\n        // 按钮用于切换评分条是否作为指示器\n        Button(this.ratingIndicator ? \"ratingIndicator : true\" : \"ratingIndicator : false\")\n          .onClick((event) => {\n            if (this.ratingIndicator) {\n              this.ratingIndicator = false;\n            } else {\n              this.ratingIndicator = true;\n            }\n          })\n          .margin({ top: 5 });\n\n        // 按钮用于增加评分总数\n        Button(this.ratingStars < 5 ? \"ratingStars + 1, ratingStars =\" + this.ratingStars : \"ratingStars最大值为5\")\n          .onClick((event) => {\n            if (this.ratingStars < 5) {\n              this.ratingStars += 1;\n            }\n          })\n          .margin({ top: 5 });\n\n        // 按钮用于减少评分总数\n        Button(this.ratingStars > 0 ? \"ratingStars - 1, ratingStars =\" + this.ratingStars : \"ratingStars小于等于0时默认等于5\")\n          .onClick((event) => {\n            if (this.ratingStars > 0) {\n              this.ratingStars -= 1;\n            }\n          })\n          .margin({ top: 5 });\n\n        // 按钮用于切换评分步长\n        Button(this.ratingStepsize == 0.5 ? \"ratingStepsize : 0.5\" : \"ratingStepsize : 1\")\n          .onClick((event) => {\n            if (this.ratingStepsize == 0.5) {\n              this.ratingStepsize = 1;\n            } else {\n              this.ratingStepsize = 0.5;\n            }\n          })\n          .margin({ top: 5 });\n      }\n      .width('100%')\n      .height('100%')\n      .justifyContent(FlexAlign.Center);\n    }\n    .height('100%');\n  }\n}"
        }
    ],
    "RichEditor": [
        {
            "description": "实现一个富文本编辑器示例，包含自定义键盘组件，点击按钮将字符插入到富文本编辑器中，并设置样式。\n富文本编辑器示例将展示一个带有自定义键盘的编辑器界面，用户可以通过点击按钮插入字符到编辑器中。",
            "code": "@Entry\n@Component\nstruct RichEditorExample {\n  controller: RichEditorController = new RichEditorController() // 创建富文本编辑器控制器\n\n  // 自定义键盘组件\n  @Builder CustomKeyboardBuilder() {\n    // 定义自定义键盘布局\n    Column() {\n      // 创建网格布局\n      Grid() {\n        // 遍历数字和特殊字符数组，生成对应按钮\n        ForEach([1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'], (item: number | string) => {\n          GridItem() {\n            // 创建按钮，点击按钮将对应字符插入到富文本编辑器中\n            Button(item + \"\")\n              .width(110).onClick(() => {\n              // 在光标位置插入字符，并设置样式\n              this.controller.addTextSpan(item + '', {\n                offset: this.controller.getCaretOffset(),\n                style:\n                {\n                  fontColor: Color.Orange, // 设置字体颜色为橙色\n                  fontSize: 30 // 设置字体大小为30\n                }\n              })\n              this.controller.setCaretOffset(this.controller.getCaretOffset() + item.toString().length) // 移动光标位置\n            })\n          }\n        })\n      }.maxCount(3).columnsGap(10).rowsGap(10).padding(5) // 设置网格布局属性\n    }.backgroundColor(Color.Gray) // 设置自定义键盘背景颜色为灰色\n  }\n\n  build() {\n    // 构建富文本编辑器示例\n    Column() {\n      RichEditor({ controller: this.controller })\n        // 绑定自定义键盘\n        .customKeyboard(this.CustomKeyboardBuilder()).margin(10).border({ width: 1 }) // 设置边距和边框\n        .height(200) // 设置高度为200\n        .borderWidth(1) // 设置边框宽度为1\n        .borderColor(Color.Red) // 设置边框颜色为红色\n        .width(\"100%\") // 设置宽度为100%\n    }\n  }\n}"
        }
    ],
    "RichText": [
        {
            "description": "实现一个包含多个RichText组件的页面，展示不同样式和布局的富文本内容。页面采用Flex布局，垂直排列三个RichText组件，每个组件具有不同的样式和布局权重。",
            "code": "@Entry\n@Component\nstruct RichTextExample {\n  // 定义一个状态变量data，存储富文本内容的HTML字符串\n  @State data: string = '<h1 style=\"text-align: center;\">h1标题</h1>' +\n    '<h1 style=\"text-align: center;\"><i>h1斜体</i></h1>' +\n    '<h1 style=\"text-align: center;\"><u>h1下划线</u></h1>' +\n    '<h2 style=\"text-align: center;\">h2标题</h2>' +\n    '<h3 style=\"text-align: center;\">h3标题</h3>' +\n    '<p style=\"text-align: center;\">p常规</p><hr/>' +\n    '<div style=\"width: 500px;height: 500px;border: 1px solid;margin: 0 auto;\">' +\n    '<p style=\"font-size: 35px;text-align: center;font-weight: bold; color: rgb(24,78,228)\">字体大小35px,行高45px</p>' +\n    '<p style=\"background-color: #e5e5e5;line-height: 45px;font-size: 35px;text-indent: 2em;\">' +\n    '<p>这是一段文字这是一段文字这是一段文字这是一段文字这是一段文字这是一段文字这是一段文字这是一段文字这是一段文字</p>';\n\n  build() {\n    // 使用Flex布局，垂直排列子组件，居中对齐\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center,\n      justifyContent: FlexAlign.Center }) {\n      // 创建第一个RichText组件，显示data中的富文本内容\n      RichText(this.data)\n        .onStart(() => {\n          // 富文本开始渲染时触发的回调\n          console.info('RichText onStart');\n        })\n        .onComplete(() => {\n          // 富文本渲染完成时触发的回调\n          console.info('RichText onComplete');\n        })\n        .width(500) // 设置宽度为500\n        .height(500) // 设置高度为500\n        .backgroundColor(0XBDDB69) // 设置背景颜色为浅绿色\n\n      // 创建第二个RichText组件，显示固定文本内容\n      RichText('layoutWeight(1)')\n        .onStart(() => {\n          // 富文本开始渲染时触发的回调\n          console.info('RichText onStart');\n        })\n        .onComplete(() => {\n          // 富文本渲染完成时触发的回调\n          console.info('RichText onComplete');\n        })\n        .size({ width: '100%', height: 110 }) // 设置宽度为100%，高度为110\n        .backgroundColor(0X92D6CC) // 设置背景颜色为浅蓝色\n        .layoutWeight(1) // 设置布局权重为1，占据剩余空间的1份\n\n      // 创建第三个RichText组件，显示固定文本内容\n      RichText('layoutWeight(2)')\n        .onStart(() => {\n          // 富文本开始渲染时触发的回调\n          console.info('RichText onStart');\n        })\n        .onComplete(() => {\n          // 富文本渲染完成时触发的回调\n          console.info('RichText onComplete');\n        })\n        .size({ width: '100%', height: 110 }) // 设置宽度为100%，高度为110\n        .backgroundColor(0X92C48D) // 设置背景颜色为深绿色\n        .layoutWeight(2) // 设置布局权重为2，占据剩余空间的2份\n    }\n  }\n}"
        }
    ],
    "ScrollBar": [
        {
            "description": "实现一个带有自定义滚动条的垂直滚动列表组件。列表中的每一项是一个带有背景色的文本框，滚动条在内容超出视口时自动显示。",
            "code": "@Entry\n@Component\nstruct ScrollBarExample {\n  // 创建一个Scroller实例，用于控制滚动行为\n  private scroller: Scroller = new Scroller()\n  \n  // 定义一个数字数组，用于生成列表项\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n  build() {\n    Column() {\n      // 使用Stack布局，将滚动内容和滚动条放在一起\n      Stack({ alignContent: Alignment.End }) {\n        // 创建一个可滚动的容器，使用scroller实例控制滚动\n        Scroll(this.scroller) {\n          // 使用Flex布局，方向为垂直排列\n          Flex({ direction: FlexDirection.Column }) {\n            // 使用ForEach循环生成列表项\n            ForEach(this.arr, (item: number) => {\n              Row() {\n                // 创建一个文本框，显示数组中的数字\n                Text(item.toString())\n                  .width('80%') // 设置文本框宽度为父容器的80%\n                  .height(60) // 设置文本框高度为60\n                  .backgroundColor('#3366CC') // 设置背景颜色\n                  .borderRadius(15) // 设置圆角边框\n                  .fontSize(16) // 设置字体大小\n                  .textAlign(TextAlign.Center) // 设置文本居中对齐\n                  .margin({ top: 5 }) // 设置顶部外边距\n              }\n            }, (item: number) => item.toString()) // 使用数字的字符串形式作为键\n          }.margin({ right: 15 }) // 设置右侧外边距\n        }\n        .width('90%') // 设置滚动容器的宽度为父容器的90%\n        .scrollBar(BarState.Off) // 关闭默认的滚动条\n        .scrollable(ScrollDirection.Vertical) // 设置滚动方向为垂直\n        \n        // 创建一个自定义的滚动条，使用scroller实例控制滚动\n        ScrollBar({ scroller: this.scroller, direction: ScrollBarDirection.Vertical, state: BarState.Auto })\n      }\n    }\n  }\n}"
        },
        {
            "description": "实现一个带有自定义滚动条的垂直滚动列表组件。列表中的每一项是一个带有背景色的文本框，滚动条位于列表的右侧，并且滚动条的样式可以自定义。",
            "code": "@Entry\n@Component\nstruct ScrollBarExample {\n  // 创建一个Scroller对象，用于控制滚动行为\n  private scroller: Scroller = new Scroller()\n  // 定义一个数字数组，用于生成列表项\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n  build() {\n    Column() {\n      // 使用Stack组件将滚动列表和滚动条叠加在一起，滚动条位于列表的右侧\n      Stack({ alignContent: Alignment.End }) {\n        // 创建一个可滚动的容器，使用scroller对象控制滚动行为\n        Scroll(this.scroller) {\n          // 使用Flex组件创建一个垂直方向的布局\n          Flex({ direction: FlexDirection.Column }) {\n            // 使用ForEach循环遍历数组，生成列表项\n            ForEach(this.arr, (item: number) => {\n              Row() {\n                // 创建一个文本框，显示数组中的数字\n                Text(item.toString())\n                  .width('80%') // 设置文本框的宽度为父容器的80%\n                  .height(60) // 设置文本框的高度为60\n                  .backgroundColor('#3366CC') // 设置文本框的背景颜色\n                  .borderRadius(15) // 设置文本框的圆角半径\n                  .fontSize(16) // 设置文本的字体大小\n                  .textAlign(TextAlign.Center) // 设置文本居中对齐\n                  .margin({ top: 5 }) // 设置文本框的上边距为5\n              }\n            }, (item: number) => item.toString()) // 使用数组中的数字作为唯一标识符\n          }.margin({ right: 15 }) // 设置Flex容器的右边距为15\n        }\n        .width('90%') // 设置滚动容器的宽度为父容器的90%\n        .scrollBar(BarState.Off) // 关闭默认的滚动条\n        .scrollable(ScrollDirection.Vertical) // 设置滚动方向为垂直方向\n\n        // 创建一个自定义的滚动条，使用scroller对象控制滚动行为\n        ScrollBar({ scroller: this.scroller, direction: ScrollBarDirection.Vertical, state: BarState.Auto }) {\n          Text()\n            .width(20) // 设置滚动条的宽度为20\n            .height(100) // 设置滚动条的高度为100\n            .borderRadius(10) // 设置滚动条的圆角半径\n            .backgroundColor('#C0C0C0') // 设置滚动条的背景颜色\n        }.width(20) // 设置滚动条容器的宽度为20\n        .backgroundColor('#ededed') // 设置滚动条容器的背景颜色\n      }\n    }\n  }\n}"
        }
    ],
    "Search": [
        {
            "description": "实现一个搜索组件，包含搜索框和搜索按钮。搜索框支持输入变化监听和提交事件处理，同时可以设置搜索框的样式和图标。",
            "code": "@Entry\n@Component\nstruct SearchExample {\n  @State changeValue: string = '' // 存储搜索框的当前输入值\n  @State submitValue: string = '' // 存储搜索框提交的值\n\n  build() {\n    Column() {\n      Text('onSubmit:' + this.submitValue).fontSize(18).margin(15) // 显示提交的搜索值\n      Search({ value: this.changeValue, placeholder: 'Type to search...' })\n        .searchButton('SEARCH') // 设置搜索按钮的文本\n        .searchIcon({\n          src: $r('app.media.search') // 设置搜索图标的资源路径\n        })\n        .cancelButton({\n          style: CancelButtonStyle.CONSTANT, // 设置取消按钮的样式为常驻显示\n          icon: {\n            src: $r('app.media.cancel') // 设置取消按钮图标的资源路径\n          }\n        })\n        .width('90%') // 设置搜索框的宽度\n        .height(40) // 设置搜索框的高度\n        .maxLength(20) // 设置输入字符的最大长度\n        .backgroundColor('#F5F5F5') // 设置搜索框的背景颜色\n        .placeholderColor(Color.Grey) // 设置占位符文本颜色\n        .placeholderFont({ size: 14, weight: 400 }) // 设置占位符文本字体样式\n        .textFont({ size: 14, weight: 400 }) // 设置输入文本字体样式\n        .onSubmit((value: string) => {\n          this.submitValue = value // 处理搜索框提交事件，更新提交值\n        })\n        .onChange((value: string) => {\n          this.changeValue = value // 处理搜索框输入变化事件，更新当前输入值\n        })\n        .margin(20) // 设置搜索框的外边距\n    }.width('100%')\n  }\n}"
        },
        {
            "description": "实现一个搜索组件示例，包含搜索框、显示当前输入值和提交值的文本、以及两个按钮用于设置光标位置和获取光标位置信息。",
            "code": "@Entry\n@Component\nstruct SearchExample {\n  @State changeValue: string = '' // 存储搜索框的当前输入值\n  @State submitValue: string = '' // 存储搜索框提交的值\n  @State positionInfo: CaretOffset = { index: 0, x: 0, y: 0 } // 存储光标位置信息\n  controller: SearchController = new SearchController() // 搜索框的控制器\n\n  build() {\n    Column({space: 10}) {\n      Text('onSubmit:' + this.submitValue).fontSize(18).margin(15) // 显示提交的搜索值\n      Text('onChange:' + this.changeValue).fontSize(18).margin(15) // 显示当前的搜索输入值\n      Search({ value: this.changeValue, placeholder: 'Type to search...', controller: this.controller })\n        .searchButton('SEARCH') // 设置搜索按钮的文本\n        .width('95%') // 设置搜索框的宽度\n        .height(40) // 设置搜索框的高度\n        .backgroundColor('#F5F5F5') // 设置搜索框的背景颜色\n        .placeholderColor(Color.Grey) // 设置占位符文本颜色\n        .placeholderFont({ size: 14, weight: 400 }) // 设置占位符文本字体样式\n        .textFont({ size: 14, weight: 400 }) // 设置输入文本字体样式\n        .onSubmit((value: string) => {\n          this.submitValue = value // 处理搜索框提交事件，更新提交值\n        })\n        .onChange((value: string) => {\n          this.changeValue = value // 处理搜索框输入变化事件，更新当前输入值\n        })\n        .margin(20) // 设置搜索框的外边距\n      Button('Set caretPosition 1')\n        .onClick(() => {\n          // 设置光标位置到输入的第一个字符后\n          this.controller.caretPosition(1)\n        })\n      Button('Get CaretOffset')\n        .onClick(() => {\n          this.positionInfo = this.controller.getCaretOffset() // 获取并更新光标位置信息\n        })\n    }.width('100%')\n  }\n}"
        }
    ],
    "Select": [
        {
            "description": "实现一个选择组件示例，包含一个自定义的菜单项内容修饰器和一个按钮构建器，用于创建带有图标和文本的菜单项。\nMyMenuItemContentModifier类用于定义菜单项内容的修饰器，包括文本内容和应用内容的方法。\nMenuItemBuilder函数用于构建菜单项，根据配置信息显示文本、图标或符号图标，并设置点击事件处理逻辑。\nSelectExample结构体作为入口组件，展示了一个选择示例，包含一个选择框和自定义菜单项内容修饰器。\n选择框的值可以通过点击选择项进行更改，同时会触发相应的选择事件并显示选择的索引和文本。",
            "code": "import { MenuItemModifier, SymbolGlyphModifier } from '@kit.ArkUI'\n\n// 定义一个自定义的菜单项内容修饰器类，用于设置菜单项的文本内容\nclass MyMenuItemContentModifier implements ContentModifier<MenuItemConfiguration> {\n  modifierText: string = \"\"\n  constructor(text: string) {\n    this.modifierText = text;\n  }\n  applyContent(): WrappedBuilder<[MenuItemConfiguration]> {\n    return wrapBuilder(MenuItemBuilder)\n  }\n}\n\n// 定义一个构建器函数，用于构建菜单项的内容\n@Builder\nfunction MenuItemBuilder(configuration: MenuItemConfiguration) {\n  Row() {\n    // 显示菜单项的文本内容\n    Text(configuration.value)\n    Blank()\n    // 如果配置了符号图标，则显示符号图标；否则显示普通图标\n    if (configuration.symbolIcon) {\n      SymbolGlyph().attributeModifier(configuration.symbolIcon).fontSize(24)\n    } else if (configuration.icon) {\n      Image(configuration.icon).size({ width: 24, height: 24 })\n    }\n    Blank(30)\n    // 显示自定义修饰器的文本内容\n    Text((configuration.contentModifier as MyMenuItemContentModifier).modifierText)\n    Blank(30)\n    // 绘制一个路径图形\n    Path()\n      .width('100px')\n      .height('150px')\n      .commands('M40 0 L80 100 L0 100 Z')\n      .fillOpacity(0)\n      .stroke(Color.Black)\n      .strokeWidth(3)\n  }\n  .onClick(() => {\n    // 点击菜单项时触发选择事件，并传递选择的索引和文本内容\n    configuration.triggerSelect(configuration.index, configuration.value.valueOf().toString())\n  })\n}\n\n// 定义一个入口组件，展示选择示例\n@Entry\n@Component\nstruct SelectExample {\n  @State text: string = \"Content Modifier Select\"\n  @State symbolModifier1: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_trash')).fontColor([Color.Gray]);\n  @State symbolModifier2: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.exposure')).fontColor([Color.Gray]);\n  build() {\n    Column() {\n      Row() {\n        // 创建一个选择组件，包含两个选项，每个选项包含一个图标和一个符号图标\n        Select([{ value: 'item1', icon: $r('app.media.icon'), symbolIcon: this.symbolModifier1 },\n          { value: 'item1', icon: $r('app.media.icon'), symbolIcon: this.symbolModifier2 }])\n          .value(this.text)\n          .onSelect((index:number, text?: string)=>{\n            // 选择事件处理逻辑，记录选择的索引和文本内容\n            console.info('Select index:' + index)\n            console.info('Select text:' + text)\n          })\n          // 应用自定义的菜单项内容修饰器\n          .menuItemContentModifier(new MyMenuItemContentModifier(\"Content Modifier\"))\n\n      }.alignItems(VerticalAlign.Center).height('50%')\n    }\n  }\n}"
        }
    ],
    "Slider": [
        {
            "description": "实现一个带有自定义样式的滑动条组件。滑动条的值、最小值、最大值、步长以及显示状态均可动态调整。滑动条的值变化时，会触发onChange事件，并输出当前值和变化模式。滑动条的样式通过自定义的ContentModifier进行定制。",
            "code": "@Entry\n@Component\nstruct SliderExample {\n  // 控制滑动条是否显示的状态变量\n  @State showSlider: boolean = true\n  \n  // 滑动条的当前值\n  @State sliderValue: number = 0\n  \n  // 滑动条的最小值\n  @State sliderMin: number = 10\n  \n  // 滑动条的最大值\n  @State sliderMax: number = 100\n  \n  // 滑动条的步长\n  @State sliderStep: number = 20\n  \n  // 滑动条变化模式的状态变量\n  @State sliderChangeMode: number = 0\n\n  build() {\n    Column({ space: 8 }) {\n      Row() {\n        // 创建一个滑动条组件，设置其初始值、最小值、最大值和步长\n        Slider({\n          value: this.sliderValue,  // 当前值\n          min: this.sliderMin,      // 最小值\n          max: this.sliderMax,      // 最大值\n          step: this.sliderStep,    // 步长\n        })\n          .showSteps(true)  // 显示步长标记\n          .onChange((value: number, mode: SliderChangeMode) => {\n            // 当滑动条值变化时，更新状态变量并输出日志\n            this.sliderValue = value\n            this.sliderChangeMode = mode\n            console.info('【SliderLog】value:' + value + 'mode:' + mode.toString())\n          })\n          .contentModifier(new MySliderStyle(this.showSlider, this.sliderChangeMode))  // 应用自定义的ContentModifier\n      }\n      .width('100%')  // 设置行宽度为100%\n    }\n    .width('100%')  // 设置列宽度为100%\n  }\n}"
        },
        {
            "description": "实现一个包含多个自定义样式的滑动条组件示例。每个滑动条展示了不同的自定义属性，如滑动块大小、边框颜色、步长标记、轨道和选中区域的边框圆角、滑动块样式以及滑动条值的提示。",
            "code": "@Entry\n@Component\nstruct SliderExample {\n  @State tipsValue: number = 40 // 初始化滑动条的值，用于显示提示\n\n  build() {\n    Column({ space: 8 }) {\n      Text('block').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%')\n      // 自定义滑动块的大小、边框颜色和宽度\n      Slider({ style: SliderStyle.OutSet, value: 40 })\n        .blockSize({ width: 40, height: 40 }) // 设置滑动块的大小\n        .blockBorderColor(Color.Red) // 设置滑动块边框颜色\n        .blockBorderWidth(5) // 设置滑动块边框宽度\n      Divider()\n      Text('step').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%')\n      // 设置滑动条的步长、步长标记的大小和颜色\n      Slider({ style: SliderStyle.InSet, value: 40, step: 10 })\n        .showSteps(true) // 显示步长标记\n        .stepSize(8) // 设置步长标记的大小\n        .stepColor(Color.Yellow) // 设置步长标记的颜色\n      Divider()\n      Text('track').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%')\n      // 自定义轨道的边框圆角\n      Slider({ style: SliderStyle.InSet, value: 40 })\n        .trackBorderRadius(2) // 设置轨道的边框圆角\n      Divider()\n      Text('selected').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%')\n      // 自定义选中区域的边框圆角\n      Slider({ style: SliderStyle.InSet, value: 40 })\n        .selectedBorderRadius(2) // 设置选中区域的边框圆角\n      Divider()\n      Text('blockStyle').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%')\n      // 设置滑动块的默认样式\n      Slider({ style: SliderStyle.OutSet, value: 40 })\n        .blockStyle({ type: SliderBlockType.DEFAULT }) // 设置滑动块为默认样式\n      // 设置滑动块为图片样式\n      Slider({ style: SliderStyle.OutSet, value: 40 })\n        .blockStyle({ type: SliderBlockType.IMAGE, image: $r('sys.media.ohos_app_icon') }) // 设置滑动块为图片样式\n      // 设置滑动块为自定义形状样式\n      Slider({ style: SliderStyle.OutSet, value: 40 })\n        .blockSize({ width: '60px', height: '60px' }) // 设置滑动块的大小\n        .blockColor(Color.Red) // 设置滑动块的颜色\n        .blockStyle({ type: SliderBlockType.SHAPE, shape: new Path({ commands: 'M60 60 M30 30 L15 56 L45 56 Z' }) }) // 设置滑动块为自定义形状样式\n      Divider()\n      Text('tips').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%')\n      // 显示滑动条的值提示，并在滑动时动态更新提示内容\n      Slider({ style: SliderStyle.InSet, value: this.tipsValue })\n        .showTips(true, this.tipsValue.toFixed()) // 显示滑动条的值提示\n        .onChange(value => {\n          this.tipsValue = value // 更新滑动条的值\n        })\n    }\n  }\n}"
        },
        {
            "description": "实现一个包含多种样式和方向的滑动条组件示例。滑动条包括水平和垂直方向，支持不同的样式（OutSet、InSet、None），并且可以显示步长标记和值提示。滑动条的值变化会通过控制台输出，并且滑动条的当前值会实时显示在界面上。",
            "code": "@Entry\n@Component\nstruct SliderExample {\n  @State outSetValueOne: number = 40 // 初始化OutSet样式滑动条的值\n  @State inSetValueOne: number = 40 // 初始化InSet样式滑动条的值\n  @State noneValueOne: number = 40 // 初始化None样式滑动条的值\n  @State outSetValueTwo: number = 40 // 初始化OutSet样式滑动条的值，带有步长\n  @State inSetValueTwo: number = 40 // 初始化InSet样式滑动条的值，带有步长\n  @State vOutSetValueOne: number = 40 // 初始化垂直OutSet样式滑动条的值\n  @State vInSetValueOne: number = 40 // 初始化垂直InSet样式滑动条的值\n  @State vOutSetValueTwo: number = 40 // 初始化垂直OutSet样式滑动条的值，带有步长\n  @State vInSetValueTwo: number = 40 // 初始化垂直InSet样式滑动条的值，带有步长\n\n  build() {\n    Column({ space: 8 }) {\n      Text('outset slider').fontSize(9).fontColor(0xCCCCCC).width('90%').margin(15) // 显示标题文本\n      Row() {\n        Slider({\n          value: this.outSetValueOne, // 滑动条的当前值\n          min: 0, // 滑动条的最小值\n          max: 100, // 滑动条的最大值\n          style: SliderStyle.OutSet // 设置滑动条的样式为OutSet\n        })\n          .showTips(true) // 显示滑动条的值提示\n          .onChange((value: number, mode: SliderChangeMode) => {\n            this.outSetValueOne = value // 更新滑动条的值\n            console.info('value:' + value + 'mode:' + mode.toString()) // 输出当前值和变化模式\n          })\n        Text(this.outSetValueOne.toFixed(0)).fontSize(12) // 显示滑动条的当前值\n      }\n      .width('80%')\n      Row() {\n        Slider({\n          value: this.outSetValueTwo, // 滑动条的当前值\n          step: 10, // 滑动条的步长\n          style: SliderStyle.OutSet // 设置滑动条的样式为OutSet\n        })\n          .showSteps(true) // 显示滑动条的步长标记\n          .onChange((value: number, mode: SliderChangeMode) => {\n            this.outSetValueTwo = value // 更新滑动条的值\n            console.info('value:' + value + 'mode:' + mode.toString()) // 输出当前值和变化模式\n          })\n        Text(this.outSetValueTwo.toFixed(0)).fontSize(12) // 显示滑动条的当前值\n      }\n      .width('80%')\n\n      Text('inset slider').fontSize(9).fontColor(0xCCCCCC).width('90%').margin(15) // 显示标题文本\n      Row() {\n        Slider({\n          value: this.inSetValueOne, // 滑动条的当前值\n          min: 0, // 滑动条的最小值\n          max: 100, // 滑动条的最大值\n          style: SliderStyle.InSet // 设置滑动条的样式为InSet\n        })\n          .blockColor('#191970') // 设置滑动块的颜色\n          .trackColor('#ADD8E6') // 设置未选中轨道颜色\n          .selectedColor('#4169E1') // 设置选中轨道颜色\n          .showTips(true) // 显示滑动条的值提示\n          .onChange((value: number, mode: SliderChangeMode) => {\n            this.inSetValueOne = value // 更新滑动条的值\n            console.info('value:' + value + 'mode:' + mode.toString()) // 输出当前值和变化模式\n          })\n        Text(this.inSetValueOne.toFixed(0)).fontSize(12) // 显示滑动条的当前值\n      }\n      .width('80%')\n      Row() {\n        Slider({\n          value: this.inSetValueTwo, // 滑动条的当前值\n          step: 10, // 滑动条的步长\n          style: SliderStyle.InSet // 设置滑动条的样式为InSet\n        })\n          .blockColor('#191970') // 设置滑动块的颜色\n          .trackColor('#ADD8E6') // 设置未选中轨道颜色\n          .selectedColor('#4169E1') // 设置选中轨道颜色\n          .showSteps(true) // 显示滑动条的步长标记\n          .onChange((value: number, mode: SliderChangeMode) => {\n            this.inSetValueTwo = value // 更新滑动条的值\n            console.info('value:' + value + 'mode:' + mode.toString()) // 输出当前值和变化模式\n          })\n        Text(this.inSetValueTwo.toFixed(0)).fontSize(12) // 显示滑动条的当前值\n      }\n      .width('80%')\n\n      Text('none slider').fontSize(9).fontColor(0xCCCCCC).width('90%').margin(15) // 显示标题文本\n      Row() {\n        Slider({\n          value: this.noneValueOne, // 滑动条的当前值\n          min: 0, // 滑动条的最小值\n          max: 100, // 滑动条的最大值\n          style: SliderStyle.NONE // 设置滑动条的样式为None\n        })\n          .blockColor('#191970') // 设置滑动块的颜色\n          .trackColor('#ADD8E6') // 设置未选中轨道颜色\n          .selectedColor('#4169E1') // 设置选中轨道颜色\n          .showTips(true) // 显示滑动条的值提示\n          .onChange((value: number, mode: SliderChangeMode) => {\n            this.noneValueOne = value // 更新滑动条的值\n            console.info('value:' + value + 'mode:' + mode.toString()) // 输出当前值和变化模式\n          })\n        Text(this.noneValueOne.toFixed(0)).fontSize(12) // 显示滑动条的当前值\n      }\n      .width('80%')\n\n      Row() {\n        Column() {\n          Text('vertical outset slider').fontSize(9).fontColor(0xCCCCCC).width('50%').margin(15) // 显示标题文本\n          Row() {\n            Text().width('10%')\n            Slider({\n              value: this.vOutSetValueOne, // 滑动条的当前值\n              style: SliderStyle.OutSet, // 设置滑动条的样式为OutSet\n              direction: Axis.Vertical // 设置滑动条的方向为垂直\n            })\n              .blockColor('#191970') // 设置滑动块的颜色\n              .trackColor('#ADD8E6') // 设置未选中轨道颜色\n              .selectedColor('#4169E1') // 设置选中轨道颜色\n              .showTips(true) // 显示滑动条的值提示\n              .onChange((value: number, mode: SliderChangeMode) => {\n                this.vOutSetValueOne = value // 更新滑动条的值\n                console.info('value:' + value + 'mode:' + mode.toString()) // 输出当前值和变化模式\n              })\n            Slider({\n              value: this.vOutSetValueTwo, // 滑动条的当前值\n              step: 10, // 滑动条的步长\n              style: SliderStyle.OutSet, // 设置滑动条的样式为OutSet\n              direction: Axis.Vertical // 设置滑动条的方向为垂直\n            })\n              .blockColor('#191970') // 设置滑动块的颜色\n              .trackColor('#ADD8E6') // 设置未选中轨道颜色\n              .selectedColor('#4169E1') // 设置选中轨道颜色\n              .showSteps(true) // 显示滑动条的步长标记\n              .onChange((value: number, mode: SliderChangeMode) => {\n                this.vOutSetValueTwo = value // 更新滑动条的值\n                console.info('value:' + value + 'mode:' + mode.toString()) // 输出当前值和变化模式\n              })\n          }\n        }.width('50%').height(300)\n\n        Column() {\n          Text('vertical inset slider').fontSize(9).fontColor(0xCCCCCC).width('50%').margin(15) // 显示标题文本\n          Row() {\n            Slider({\n              value: this.vInSetValueOne, // 滑动条的当前值\n              style: SliderStyle.InSet, // 设置滑动条的样式为InSet\n              direction: Axis.Vertical, // 设置滑动条的方向为垂直\n              reverse: true // 竖向的Slider默认是上端是min值，下端是max值，因此想要从下往上滑动，需要设置reverse为true\n            })\n              .showTips(true) // 显示滑动条的值提示\n              .onChange((value: number, mode: SliderChangeMode) => {\n                this.vInSetValueOne = value // 更新滑动条的值\n                console.info('value:' + value + 'mode:' + mode.toString()) // 输出当前值和变化模式\n              })\n            Slider({\n              value: this.vInSetValueTwo, // 滑动条的当前值\n              step: 10, // 滑动条的步长\n              style: SliderStyle.InSet, // 设置滑动条的样式为InSet\n              direction: Axis.Vertical, // 设置滑动条的方向为垂直\n              reverse: true // 竖向的Slider默认是上端是min值，下端是max值，因此想要从下往上滑动，需要设置reverse为true\n            })\n              .showSteps(true) // 显示滑动条的步长标记\n              .onChange((value: number, mode: SliderChangeMode) => {\n                this.vInSetValueTwo = value // 更新滑动条的值\n                console.info('value:' + value + 'mode:' + mode.toString()) // 输出当前值和变化模式\n              })\n          }\n        }.width('50%').height(300)\n      }\n    }.width('100%')\n  }\n}"
        }
    ],
    "Span": [
        {
            "description": "布局、样式及功能与效果描述：\n1. 创建了一个垂直方向的 Flex 布局，子元素垂直从头部对齐，间距均匀分布。\n2. 展示了 Span 组件的基本用法，包括文本的拼接、文本样式（大小写、装饰线、字符间距、文本阴影等）的设置。\n3. 通过不同的 Span 组件展示了文本的各种装饰效果，如下划线、删除线、上划线等，并设置了不同的样式（波浪线、点状、虚线）。\n4. 展示了文本字符间距的设置，通过不同的 letterSpacing 值展示了不同的字符间距效果。\n5. 展示了文本大小写的设置，通过 textCase 属性设置了文本为全小写和全大写。\n6. 展示了文本阴影的设置，通过 textShadow 属性设置了多个文本阴影效果。\n7. 展示了如何设置 Span 基线的偏移量，通过 baselineOffset 属性设置了不同的基线偏移量。",
            "code": "@Entry\n@Component\nstruct SpanExample {\n  build() {\n    // 创建一个垂直方向的 Flex 布局，子元素垂直从头部对齐，间距均匀分布\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      \n      // 基本用法示例\n      Text('Basic Usage').fontSize(9).fontColor(0xCCCCCC) // 显示标题 \"Basic Usage\"，设置字体大小和颜色\n      Text() {\n        Span('In Line') // 创建一个 Span 组件，显示文本 \"In Line\"\n        Span(' Component') // 创建一个 Span 组件，显示文本 \" Component\"\n        Span(' !') // 创建一个 Span 组件，显示文本 \" !\"\n      }\n\n      // Span 组件示例，设置文本大小写为正常，去除装饰线，字体颜色为红色\n      Text() {\n        Span('This is the Span component').fontSize(12).textCase(TextCase.Normal) // 创建一个 Span 组件，显示文本 \"This is the Span component\"，设置字体大小和文本大小写为正常\n          .decoration({ type: TextDecorationType.None, color: Color.Red }) // 设置文本装饰线为无，颜色为红色\n      }\n\n      // 文本添加下划线，样式为波浪线\n      Text('Text Decoration').fontSize(9).fontColor(0xCCCCCC) // 显示标题 \"Text Decoration\"，设置字体大小和颜色\n      Text() {\n        Span('I am Underline-WAVY-span').decoration({ type: TextDecorationType.Underline, color: Color.Red, style: TextDecorationStyle.WAVY }).fontSize(12) // 创建一个 Span 组件，显示文本 \"I am Underline-WAVY-span\"，设置下划线装饰线，颜色为红色，样式为波浪线，字体大小为12\n      }\n\n      // 文本添加删除线，样式为点状\n      Text() {\n        Span('I am LineThrough-DOTTED-span') // 创建一个 Span 组件，显示文本 \"I am LineThrough-DOTTED-span\"\n          .decoration({ type: TextDecorationType.LineThrough, color: Color.Red, style: TextDecorationStyle.DOTTED }) // 设置删除线装饰线，颜色为红色，样式为点状\n          .fontSize(12) // 设置字体大小为12\n      }\n\n      // 文本添加上划线，样式为虚线\n      Text() {\n        Span('I am Overline-DASHED-span').decoration({ type: TextDecorationType.Overline, color: Color.Red, style: TextDecorationStyle.DASHED }).fontSize(12) // 创建一个 Span 组件，显示文本 \"I am Overline-DASHED-span\"，设置上划线装饰线，颜色为红色，样式为虚线，字体大小为12\n      }\n\n      // 文本字符间距示例\n      Text('LetterSpacing').fontSize(9).fontColor(0xCCCCCC) // 显示标题 \"LetterSpacing\"，设置字体大小和颜色\n      Text() {\n        Span('span letter spacing') // 创建一个 Span 组件，显示文本 \"span letter spacing\"\n          .letterSpacing(0) // 设置字符间距为0\n          .fontSize(12) // 设置字体大小为12\n      }\n\n      Text() {\n        Span('span letter spacing') // 创建一个 Span 组件，显示文本 \"span letter spacing\"\n          .letterSpacing(-2) // 设置字符间距为-2\n          .fontSize(12) // 设置字体大小为12\n      }\n\n      Text() {\n        Span('span letter spacing') // 创建一个 Span 组件，显示文本 \"span letter spacing\"\n          .letterSpacing(3) // 设置字符间距为3\n          .fontSize(12) // 设置字体大小为12\n      }\n\n      // 文本大小写展示设置示例\n      Text('Text Case').fontSize(9).fontColor(0xCCCCCC) // 显示标题 \"Text Case\"，设置字体大小和颜色\n      Text() {\n        Span('I am Lower-span').fontSize(12) // 创建一个 Span 组件，显示文本 \"I am Lower-span\"，设置字体大小为12\n          .textCase(TextCase.LowerCase) // 设置文本大小写为全小写\n          .decoration({ type: TextDecorationType.None }) // 设置文本装饰线为无\n      }\n\n      Text() {\n        Span('I am Upper-span').fontSize(12) // 创建一个 Span 组件，显示文本 \"I am Upper-span\"，设置字体大小为12\n          .textCase(TextCase.UpperCase) // 设置文本大小写为全大写\n          .decoration({ type: TextDecorationType.None }) // 设置文本装饰线为无\n      }\n    }.width('100%').height(250).padding({ left: 35, right: 35, top: 35 }) // 设置 Flex 布局的宽度为100%，高度为250，内边距为35\n  }\n}\n\n@Entry\n@Component\nstruct TextSpanExample {\n  @State textShadows : ShadowOptions | Array<ShadowOptions> = [{ radius: 10, color: Color.Red, offsetX: 10, offsetY: 0 },{ radius: 10, color: Color.Black, offsetX: 20, offsetY: 0 },\n      { radius: 10, color: Color.Brown, offsetX: 30, offsetY: 0 },{ radius: 10, color: Color.Green, offsetX: 40, offsetY: 0 },\n      { radius: 10, color: Color.Yellow, offsetX: 100, offsetY: 0 }] // 定义一个状态变量 textShadows，存储文本阴影的配置信息\n  build() {\n    Column({ space: 8 }) {\n      Text() {\n        // 创建一个文本组件，显示文本 '123456789'，设置字体大小为50，并应用指定的文本阴影效果\n        Span('123456789').fontSize(50).textShadow(this.textShadows)\n      }\n      Text() {\n        // 创建另一个文本组件，显示文本 '123456789'，该文本继承外部文本的字体大小和文本阴影效果\n        Span('123456789') // span can inherit text shadow & font size from outer text\n      }.fontSize(50).textShadow(this.textShadows)\n    }\n  }\n}\n\n@Component\n@Entry\nstruct Index {\n  build() {\n    // 创建一个包含文本的列，文本内容为\"Hello World !\"\n    Column() {\n      // 创建一个文本组件，显示\"Hello World !\"，设置字体大小为20fp，背景颜色为紫色，圆角半径为5vp，字体颜色为白色\n      Text() {\n        Span('   Hello World !   ')\n          .fontSize('20fp')\n          .textBackgroundStyle({color: \"#7F007DFF\", radius: \"5vp\"})\n          .fontColor(Color.White)\n      }\n    }\n    // 设置列的宽度为100%，底部外边距为5vp，水平居中对齐\n    .width('100%').margin({bottom: '5vp'}).alignItems(HorizontalAlign.Center)\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n\n  build() {\n    Row() {\n      Column() {\n        Text(){\n          // 设置第一个Span的基线偏移量为20VP\n          Span('word1')\n            .baselineOffset(new LengthMetrics(20,LengthUnit.VP))\n          // 设置第二个Span的基线偏移量为0VP，即不偏移\n          Span('word2')\n            .baselineOffset(new LengthMetrics(0,LengthUnit.VP))\n          // 设置ImageSpan的基线偏移量为-20VP，向上偏移\n          ImageSpan($r(\"app.media.icon\"))\n            .width('45px')\n            .baselineOffset(new LengthMetrics(-20,LengthUnit.VP))\n        }\n        .backgroundColor(Color.Gray) // 设置Column的背景颜色为灰色\n      }\n      .width('100%') // 设置Column的宽度为100%\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}"
        }
    ],
    "Stepper": [
        {
            "description": "实现一个多步骤导航组件，支持步骤状态切换、步骤间导航、以及步骤完成和跳过事件的处理。\n每个步骤页包含一个标题和一个按钮，按钮用于切换当前步骤的状态。\n步骤导航栏支持设置下一步、上一步按钮的文本，并能根据步骤状态动态调整按钮的可用性。",
            "code": "@Entry\n@Component\nstruct StepperExample {\n  @State currentIndex: number = 0; // 当前步骤索引，用于控制显示哪个步骤页\n  @State firstState: ItemState = ItemState.Normal; // 第一个步骤的状态，初始为正常状态\n  @State secondState: ItemState = ItemState.Normal; // 第二个步骤的状态，初始为正常状态\n  @State thirdState: ItemState = ItemState.Normal; // 第三个步骤的状态，初始为正常状态\n\n  build() {\n    Stepper({\n      index: this.currentIndex // 设置当前步骤索引\n    }) {\n      // 第一个步骤页\n      StepperItem() {\n        Column() {\n          Text('Page One')\n            .itemTextStyle(); // 应用itemTextStyle样式\n          Button('change status:' + this.firstState)\n            .backgroundColor('#007dFF') // 设置背景颜色为蓝色\n            .onClick(() => {\n              // 切换第一个步骤的状态，如果当前状态是跳过，则切换为正常，否则切换为跳过\n              this.firstState = this.firstState === ItemState.Skip ? ItemState.Normal : ItemState.Skip;\n            });\n        }.itemStyle(); // 应用itemStyle样式\n      }\n      .nextLabel('Next') // 设置下一步按钮文本\n      .status(this.firstState); // 设置步骤状态\n\n      // 第二个步骤页\n      StepperItem() {\n        Column() {\n          Text('Page Two')\n            .itemTextStyle(); // 应用itemTextStyle样式\n          Button('change status:' + this.secondState)\n            .backgroundColor('#007dFF') // 设置背景颜色为蓝色\n            .onClick(() => {\n              // 切换第二个步骤的状态，如果当前状态是禁用，则切换为正常，否则切换为禁用\n              this.secondState = this.secondState === ItemState.Disabled ? ItemState.Normal : ItemState.Disabled;\n            });\n        }.itemStyle(); // 应用itemStyle样式\n      }\n      .nextLabel('Next') // 设置下一步按钮文本\n      .prevLabel('Previous') // 设置上一步按钮文本\n      .status(this.secondState); // 设置步骤状态\n\n      // 第三个步骤页\n      StepperItem() {\n        Column() {\n          Text('Page Three')\n            .itemTextStyle(); // 应用itemTextStyle样式\n          Button('change status:' + this.thirdState)\n            .backgroundColor('#007dFF') // 设置背景颜色为蓝色\n            .onClick(() => {\n              // 切换第三个步骤的状态，如果当前状态是等待，则切换为正常，否则切换为等待\n              this.thirdState = this.thirdState === ItemState.Waiting ? ItemState.Normal : ItemState.Waiting;\n            });\n        }.itemStyle(); // 应用itemStyle样式\n      }\n      .status(this.thirdState); // 设置步骤状态\n\n      // 第四个步骤页\n      StepperItem() {\n        Column() {\n          Text('Page Four')\n            .itemTextStyle(); // 应用itemTextStyle样式\n        }.itemStyle(); // 应用itemStyle样式\n      }\n    }\n    .backgroundColor('#F1F3F5') // 设置背景颜色为灰色\n    .onFinish(() => {\n      // 处理点击最后一页的Finish时的逻辑\n      console.info('onFinish');\n    })\n    .onSkip(() => {\n      // 处理点击跳过时的逻辑\n      console.info('onSkip');\n    })\n    .onChange((prevIndex?: number, index?: number) => {\n      if(index){\n        this.currentIndex = index; // 更新当前步骤索引\n      }\n    });\n  }\n}\n\n// 定义步骤页的样式\n@Styles function itemStyle () {\n  .width(336) // 设置宽度\n  .height(621) // 设置高度\n  .margin({ top: 48, left: 12 }) // 设置外边距\n  .borderRadius(24) // 设置圆角\n  .backgroundColor('#FFFFFF'); // 设置背景颜色为白色\n}\n\n// 定义文本的样式\n@Extend(Text) function itemTextStyle () {\n  .fontColor('#182431') // 设置字体颜色\n  .fontSize(36) // 设置字体大小\n  .fontWeight(500) // 设置字体粗细\n  .opacity(0.4) // 设置透明度\n  .margin({ top: 82, bottom: 40 }); // 设置外边距\n}"
        }
    ],
    "StepperItem": [
        {
            "description": "实现一个多步骤导航组件，支持步骤状态切换、步骤间导航、以及步骤完成和跳过事件的处理。\n每个步骤页包含一个标题和按钮，按钮用于切换当前步骤的状态。\n步骤页之间可以通过“上一步”和“下一步”按钮进行导航。",
            "code": "@Entry\n@Component\nstruct StepperExample {\n  @State currentIndex: number = 0 // 当前步骤索引，初始为0\n  @State firstState: ItemState = ItemState.Normal // 第一个步骤的状态，初始为Normal\n  @State secondState: ItemState = ItemState.Normal // 第二个步骤的状态，初始为Normal\n  @State thirdState: ItemState = ItemState.Normal // 第三个步骤的状态，初始为Normal\n\n  build() {\n    Stepper({\n      index: this.currentIndex // 设置当前步骤索引\n    }) {\n      // 第一个步骤页\n      StepperItem() {\n        Column() {\n          Text('Page One')\n            .itemTextStyle() // 应用itemTextStyle样式\n          Button('change status:' + this.firstState)\n            .backgroundColor('#007dFF') // 设置背景颜色为蓝色\n            .onClick(() => {\n              this.firstState = this.firstState === ItemState.Skip ? ItemState.Normal : ItemState.Skip // 切换第一个步骤的状态\n            })\n        }.itemStyle() // 应用itemStyle样式\n      }\n      .nextLabel('Next') // 设置下一步按钮文本\n      .status(this.firstState) // 设置步骤状态\n\n      // 第二个步骤页\n      StepperItem() {\n        Column() {\n          Text('Page Two')\n            .itemTextStyle() // 应用itemTextStyle样式\n          Button('change status:' + this.secondState)\n            .backgroundColor('#007dFF') // 设置背景颜色为蓝色\n            .onClick(() => {\n              this.secondState = this.secondState === ItemState.Disabled ? ItemState.Normal : ItemState.Disabled // 切换第二个步骤的状态\n            })\n        }.itemStyle() // 应用itemStyle样式\n      }\n      .nextLabel('Next') // 设置下一步按钮文本\n      .prevLabel('Previous') // 设置上一步按钮文本\n      .status(this.secondState) // 设置步骤状态\n\n      // 第三个步骤页\n      StepperItem() {\n        Column() {\n          Text('Page Three')\n            .itemTextStyle() // 应用itemTextStyle样式\n          Button('change status:' + this.thirdState)\n            .backgroundColor('#007dFF') // 设置背景颜色为蓝色\n            .onClick(() => {\n              this.thirdState = this.thirdState === ItemState.Waiting ? ItemState.Normal : ItemState.Waiting // 切换第三个步骤的状态\n            })\n        }.itemStyle() // 应用itemStyle样式\n      }\n      .status(this.thirdState) // 设置步骤状态\n\n      // 第四个步骤页\n      StepperItem() {\n        Column() {\n          Text('Page Four')\n            .itemTextStyle() // 应用itemTextStyle样式\n        }.itemStyle() // 应用itemStyle样式\n      }\n    }\n    .backgroundColor('#F1F3F5') // 设置背景颜色为灰色\n    .onFinish(() => {\n      // 处理点击最后一页的Finish时的逻辑\n      console.info('onFinish')\n    })\n    .onSkip(() => {\n      // 处理点击跳过时的逻辑\n      console.info('onSkip')\n    })\n    .onChange((prevIndex?: number, index?: number) => {\n      if(index){\n        this.currentIndex = index // 更新当前步骤索引\n      }\n    })\n  }\n}\n\n// 定义步骤页的样式\n@Styles function itemStyle () {\n  .width(336) // 设置宽度\n  .height(621) // 设置高度\n  .margin({ top: 48, left: 12 }) // 设置外边距\n  .borderRadius(24) // 设置圆角\n  .backgroundColor('#FFFFFF') // 设置背景颜色为白色\n}\n\n// 定义文本的样式\n@Extend(Text) function itemTextStyle () {\n  .fontColor('#182431') // 设置字体颜色\n  .fontSize(36) // 设置字体大小\n  .fontWeight(500) // 设置字体粗细\n  .opacity(0.4) // 设置透明度\n  .margin({ top: 82, bottom: 40 }) // 设置外边距\n}"
        }
    ],
    "SymbolSpan": [
        {
            "description": "实现一个展示不同字体权重、图标渲染策略和动效策略的界面。界面分为三行，每行展示不同的内容：\n1. 第一行展示不同字体权重的垃圾桶图标。\n2. 第二行展示不同渲染策略的文件夹加徽章图标。\n3. 第三行展示不同动效策略的Wi-Fi图标。",
            "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    // 创建一个垂直布局容器\n    Column() {\n      // 第一行展示不同字重的文字和对应的图标\n      Row() {\n        Column() {\n          // 显示\"Light\"文字\n          Text(\"Light\")\n          // 显示轻字重的垃圾桶图标\n          Text() {\n            SymbolSpan($r('sys.symbol.ohos_trash'))\n              .fontWeight(FontWeight.Lighter) // 设置字体轻字重\n              .fontSize(96) // 设置字体大小\n          }\n        }\n\n        Column() {\n          // 显示\"Normal\"文字\n          Text(\"Normal\")\n          // 显示普通字重的垃圾桶图标\n          Text() {\n            SymbolSpan($r('sys.symbol.ohos_trash'))\n              .fontWeight(FontWeight.Normal) // 设置字体普通字重\n              .fontSize(96) // 设置字体大小\n          }\n        }\n\n        Column() {\n          // 显示\"Bold\"文字\n          Text(\"Bold\")\n          // 显示粗字重的垃圾桶图标\n          Text() {\n            SymbolSpan($r('sys.symbol.ohos_trash'))\n              .fontWeight(FontWeight.Bold) // 设置字体粗字重\n              .fontSize(96) // 设置字体大小\n          }\n        }\n      }\n\n      // 第二行展示不同的图标渲染策略\n      Row() {\n        Column() {\n          // 显示\"单色\"文字\n          Text(\"单色\")\n          // 显示单色渲染策略的文件夹加徽章图标\n          Text() {\n            SymbolSpan($r('sys.symbol.ohos_folder_badge_plus'))\n              .fontSize(96) // 设置字体大小\n              .renderingStrategy(SymbolRenderingStrategy.SINGLE) // 设置单色渲染策略\n              .fontColor([Color.Black, Color.Green, Color.White]) // 设置字体颜色\n          }\n        }\n\n        Column() {\n          // 显示\"多色\"文字\n          Text(\"多色\")\n          // 显示多色渲染策略的文件夹加徽章图标\n          Text() {\n            SymbolSpan($r('sys.symbol.ohos_folder_badge_plus'))\n              .fontSize(96) // 设置字体大小\n              .renderingStrategy(SymbolRenderingStrategy.MULTIPLE_COLOR) // 设置多色渲染策略\n              .fontColor([Color.Black, Color.Green, Color.White]) // 设置字体颜色\n          }\n        }\n\n        Column() {\n          // 显示\"分层\"文字\n          Text(\"分层\")\n          // 显示分层渲染策略的文件夹加徽章图标\n          Text() {\n            SymbolSpan($r('sys.symbol.ohos_folder_badge_plus'))\n              .fontSize(96) // 设置字体大小\n              .renderingStrategy(SymbolRenderingStrategy.MULTIPLE_OPACITY) // 设置分层渲染策略\n              .fontColor([Color.Black, Color.Green, Color.White]) // 设置字体颜色\n          }\n        }\n      }\n\n      // 第三行展示不同的图标动效策略\n      Row() {\n        Column() {\n          // 显示\"无动效\"文字\n          Text(\"无动效\")\n          // 显示无动效的Wi-Fi图标\n          Text() {\n            SymbolSpan($r('sys.symbol.ohos_wifi'))\n              .fontSize(96) // 设置字体大小\n              .effectStrategy(SymbolEffectStrategy.NONE) // 设置无动效策略\n          }\n        }\n\n        Column() {\n          // 显示\"整体缩放动效\"文字\n          Text(\"整体缩放动效\")\n          // 显示整体缩放动效的Wi-Fi图标\n          Text() {\n            SymbolSpan($r('sys.symbol.ohos_wifi'))\n              .fontSize(96) // 设置字体大小\n              .effectStrategy(1) // 设置整体缩放动效策略\n          }\n        }\n\n        Column() {\n          // 显示\"层级动效\"文字\n          Text(\"层级动效\")\n          // 显示层级动效的Wi-Fi图标\n          Text() {\n            SymbolSpan($r('sys.symbol.ohos_wifi'))\n              .fontSize(96) // 设置字体大小\n              .effectStrategy(2) // 设置层级动效策略\n          }\n        }\n      }\n    }\n  }\n}"
        }
    ],
    "SymbolGlyph": [
        {
            "description": "实现一个展示不同字体粗细、渲染策略和动效策略的符号组件。\n布局分为三行：\n1. 第一行展示不同字体粗细的符号。\n2. 第二行展示不同符号渲染策略的符号。\n3. 第三行展示不同符号动效策略的符号。",
            "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Column() {\n      // 第一行展示不同字体粗细的符号\n      Row() {\n        Column() {\n          // 显示轻字体重量的文本和符号\n          Text(\"Light\")\n          SymbolGlyph($r('sys.symbol.ohos_trash'))\n            .fontWeight(FontWeight.Lighter) // 设置字体粗细为轻\n            .fontSize(96) // 设置符号字体大小为96\n        }\n\n        Column() {\n          // 显示正常字体重量的文本和符号\n          Text(\"Normal\")\n          SymbolGlyph($r('sys.symbol.ohos_trash'))\n            .fontWeight(FontWeight.Normal) // 设置字体粗细为正常\n            .fontSize(96) // 设置符号字体大小为96\n        }\n\n        Column() {\n          // 显示粗字体重量的文本和符号\n          Text(\"Bold\")\n          SymbolGlyph($r('sys.symbol.ohos_trash'))\n            .fontWeight(FontWeight.Bold) // 设置字体粗细为粗\n            .fontSize(96) // 设置符号字体大小为96\n        }\n      }\n\n      // 第二行展示不同符号渲染策略\n      Row() {\n        Column() {\n          // 单色渲染策略的符号\n          Text(\"单色\")\n          SymbolGlyph($r('sys.symbol.ohos_folder_badge_plus'))\n            .fontSize(96) // 设置符号字体大小为96\n            .renderingStrategy(SymbolRenderingStrategy.SINGLE) // 设置渲染策略为单色\n            .fontColor([Color.Black, Color.Green, Color.White]) // 设置符号颜色\n        }\n\n        Column() {\n          // 多色渲染策略的符号\n          Text(\"多色\")\n          SymbolGlyph($r('sys.symbol.ohos_folder_badge_plus'))\n            .fontSize(96) // 设置符号字体大小为96\n            .renderingStrategy(SymbolRenderingStrategy.MULTIPLE_COLOR) // 设置渲染策略为多色\n            .fontColor([Color.Black, Color.Green, Color.White]) // 设置符号颜色\n        }\n\n        Column() {\n          // 分层渲染策略的符号\n          Text(\"分层\")\n          SymbolGlyph($r('sys.symbol.ohos_folder_badge_plus'))\n            .fontSize(96) // 设置符号字体大小为96\n            .renderingStrategy(SymbolRenderingStrategy.MULTIPLE_OPACITY) // 设置渲染策略为分层\n            .fontColor([Color.Black, Color.Green, Color.White]) // 设置符号颜色\n        }\n      }\n\n      // 第三行展示不同符号动效策略\n      Row() {\n        Column() {\n          // 无动效的符号\n          Text(\"无动效\")\n          SymbolGlyph($r('sys.symbol.ohos_wifi'))\n            .fontSize(96) // 设置符号字体大小为96\n            .effectStrategy(SymbolEffectStrategy.NONE) // 设置动效策略为无动效\n        }\n\n        Column() {\n          // 整体缩放动效的符号\n          Text(\"整体缩放动效\")\n          SymbolGlyph($r('sys.symbol.ohos_wifi'))\n            .fontSize(96) // 设置符号字体大小为96\n            .effectStrategy(1) // 设置动效策略为整体缩放动效\n        }\n\n        Column() {\n          // 层级动效的符号\n          Text(\"层级动效\")\n          SymbolGlyph($r('sys.symbol.ohos_wifi'))\n            .fontSize(96) // 设置符号字体大小为96\n            .effectStrategy(2) // 设置动效策略为层级动效\n        }\n      }\n    }\n  }\n}"
        }
    ],
    "Text": [
        {
            "description": "实现一个简单的组件，展示如何配置隐私敏感信息隐藏。该组件包含一个文本组件，并通过设置`privacySensitive`属性来隐藏敏感信息。效果展示需要卡片框架支持。\n入口组件，表示该组件是应用的入口",
            "code": "@Entry\n// 声明一个组件，组件名为ImageExample\n@Component\nstruct ImageExample {\n  // 构建方法，定义组件的UI结构\n  build() {\n    // 创建一个垂直布局的容器，设置子组件之间的间距为10\n    Column({ space: 10 }) {\n      // 创建一个文本组件，显示内容为\"privacySensitive\"\n      Text(\"privacySensitive\")\n        // 设置文本组件为隐私敏感，当卡片框架支持隐私隐藏时，该文本内容将被隐藏\n        .privacySensitive(true)\n        // 设置文本组件的上边距为30\n        .margin({top :30})\n    }\n    // 设置容器的子组件水平居中对齐\n    .alignItems(HorizontalAlign.Center)\n    // 设置容器的宽度为100%\n    .width(\"100%\")\n  }\n}"
        },
        {
            "description": "实现一个可选择的文本组件，支持通过键盘框选文本功能。文本组件的宽度为300，高度为100，最多显示5行文本。文本颜色为黑色，支持在应用内复制文本，并且默认选中第3到第8个字符。",
            "code": "@Entry\n@Component\nstruct TextExample10 {\n  @State message: string = 'TextTextTextTextTextTextTextText' + 'TextTextTextTextTextTextTextTextTextTextTextTextTextTextTextText';\n\n  build() {\n    Column() {\n      Text(this.message)\n        .width(300) // 设置文本组件的宽度为300\n        .height(100) // 设置文本组件的高度为100\n        .maxLines(5) // 设置文本组件最多显示5行\n        .fontColor(Color.Black) // 设置文本颜色为黑色\n        .copyOption(CopyOptions.InApp) // 设置文本支持在应用内复制\n        .selection(3, 8) // 设置默认选中的文本范围为第3到第8个字符\n        .textSelectable(TextSelectableMode.SELECTABLE_FOCUSABLE) // 设置文本可选择，并且支持通过键盘框选文本\n    }.width('100%').margin({ top: 100 }) // 设置Column的宽度为100%，并设置顶部外边距为100\n  }\n}"
        },
        {
            "description": "实现一个展示文本组件的示例，通过设置halfLeading属性来控制文本的行间距。示例中包含两个文本组件，一个启用了halfLeading，另一个未启用，以便对比效果。",
            "code": "@Entry\n@Component\nstruct TextExample12 {\n  build() {\n    Column({ space: 10 }) {\n      // 标题文本，显示“halfLeading”，字体大小为9，颜色为灰色，上下左右边距为15，宽度为90%\n      Text('halfLeading').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%')\n      \n      // 第一个文本组件，显示“This is the text with the halfLeading set.”，行高为60，启用了halfLeading，边框宽度为1，宽度为80%\n      Text(\"This is the text with the halfLeading set.\")\n        .lineHeight(60) // 设置行高为60\n        .halfLeading(true) // 启用halfLeading，调整行间距\n        .borderWidth(1) // 设置边框宽度为1\n        .width('80%') // 设置宽度为80%\n      \n      // 第二个文本组件，显示“This is the text without the halfLeading set.”，行高为60，未启用halfLeading，边框宽度为1，宽度为80%\n      Text(\"This is the text without the halfLeading set.\")\n        .lineHeight(60) // 设置行高为60\n        .halfLeading(false) // 未启用halfLeading，不调整行间距\n        .borderWidth(1) // 设置边框宽度为1\n        .width('80%') // 设置宽度为80%\n    }\n  }\n}"
        },
        {
            "description": "实现一个文本选择和复制功能的示例。用户可以通过点击按钮设置文本的选择范围，并且可以通过复制功能将选中的文本内容复制到剪贴板。复制的文本内容会显示在界面上。",
            "code": "@Entry\n@Component\nstruct TextExample5 {\n  // 存储复制的文本内容\n  @State onCopy: string = ''\n  // 显示的文本内容\n  @State text: string = 'This is set selection to Selection text content This is set selection to Selection text content.'\n  // 文本选择的起始位置\n  @State start: number = 0\n  // 文本选择的结束位置\n  @State end: number = 20\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.Start }) {\n      // 显示文本内容，并设置字体大小、边框、行高和外边距\n      Text(this.text)\n        .fontSize(12)\n        .border({ width: 1 })\n        .lineHeight(20)\n        .margin(30)\n        // 设置文本的复制选项为仅在应用内复制\n        .copyOption(CopyOptions.InApp)\n        // 设置文本的选择范围\n        .selection(this.start, this.end)\n        // 监听复制事件，将复制的文本内容存储到onCopy状态变量中\n        .onCopy((value: string) => {\n          this.onCopy = value\n        })\n      // 按钮，点击后设置文本的选择范围\n      Button('Set text selection')\n        .margin({left:20})\n        .onClick(() => {\n          // 设置文本选择的起始位置和结束位置\n          this.start = 10\n          this.end = 30\n        })\n      // 显示复制的文本内容，并设置字体大小和外边距\n      Text(this.onCopy).fontSize(12).margin(10).key('copy')\n    }.height(600).width(335).padding({ left: 35, right: 35, top: 35 })\n  }\n}"
        },
        {
            "description": "实现一个文本组件，支持数据检测功能。文本内容包括电话号码、链接、邮箱、地址和时间。通过enableDataDetector属性控制数据检测的开启与关闭，通过dataDetectorConfig属性配置数据检测的类型和结果更新回调。",
            "code": "@Entry\n@Component\nstruct TextExample6 {\n  // 定义电话号码状态变量\n  @State phoneNumber: string = '(86) (755) ********';\n  // 定义链接状态变量\n  @State url: string = 'www.*******.com';\n  // 定义邮箱状态变量\n  @State email: string = '***@example.com';\n  // 定义地址状态变量\n  @State address: string = 'XX省XX市XX区XXXX';\n  // 定义时间状态变量\n  @State datetime: string = 'XX年XX月XX日XXXX';\n  // 定义是否启用数据检测的状态变量\n  @State enableDataDetector: boolean = true;\n  // 定义数据检测类型的状态变量\n  @State types: TextDataDetectorType[] = [];\n\n  build() {\n    Row() {\n      Column() {\n        Text(\n          '电话号码：' + this.phoneNumber + '\n' +\n          '链接：' + this.url + '\n' +\n          '邮箱：' + this.email + '\n' +\n          '地址：' + this.address + '\n' +\n          '时间：' + this.datetime\n        )\n        .fontSize(16) // 设置文本字体大小为16\n        .copyOption(CopyOptions.InApp) // 设置文本复制选项为仅在应用内复制\n        .enableDataDetector(this.enableDataDetector) // 启用或禁用数据检测功能\n        .dataDetectorConfig({\n          types: this.types, // 配置数据检测的类型\n          onDetectResultUpdate: (result: string) => {} // 配置数据检测结果更新的回调函数\n        })\n        .textAlign(TextAlign.Center) // 设置文本对齐方式为居中\n        .borderWidth(1) // 设置文本边框宽度为1\n        .padding(10) // 设置文本内边距为10\n        .width('100%') // 设置文本宽度为100%\n      }\n      .width('100%') // 设置列的宽度为100%\n    }\n    .height('100%') // 设置行的宽度为100%\n  }\n}"
        },
        {
            "description": "实现一个包含文本组件的示例，展示如何使用getLayoutManager接口获取文本布局信息。示例中包含三个主要功能：\n1. 获取文本的行数。\n2. 获取指定坐标位置的字形信息。\n3. 获取指定行的文本样式和字体属性信息。",
            "code": "@Entry\n@Component\nstruct TextExample9 {\n  // 定义状态变量，用于存储行数、字形信息和行信息\n  @State lineCount: string = \"\"\n  @State glyphPositionAtCoordinate: string = \"\"\n  @State lineMetrics: string = \"\"\n\n  // 创建TextController实例，用于控制文本组件\n  controller: TextController = new TextController()\n\n  // 定义文本内容\n  @State textStr: string = 'Hello World! 您好，世界！'\n\n  build() {\n    Scroll() {\n      Column() {\n        // 显示标题文本\n        Text('Text组件getLayoutManager接口获取段落相对组件的信息')\n          .fontSize(9)\n          .fontColor(0xCCCCCC)\n          .width('90%')\n          .padding(10)\n\n        // 显示文本内容，并绑定TextController\n        Text(this.textStr, { controller: this.controller })\n          .fontSize(25)\n          .borderWidth(1)\n          .onAreaChange(() => {\n            // 当文本区域发生变化时，获取LayoutManager实例并更新行数\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            this.lineCount = \"LineCount: \" + layoutManager.getLineCount()\n          })\n\n        // 显示行数标题\n        Text('LineCount').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 显示行数\n        Text(this.lineCount)\n\n        // 显示字形信息标题\n        Text('GlyphPositionAtCoordinate').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 按钮，点击后获取指定坐标位置的字形信息\n        Button(\"相对组件坐标[150,50]字形信息\")\n          .onClick(() => {\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            let position: PositionWithAffinity = layoutManager.getGlyphPositionAtCoordinate(150, 50)\n            this.glyphPositionAtCoordinate =\n              \"相对组件坐标[150,50] glyphPositionAtCoordinate position: \" + position.position + \" affinity: \" +\n              position.affinity\n          })\n          .margin({ bottom: 20, top: 10 })\n\n        // 显示字形信息\n        Text(this.glyphPositionAtCoordinate)\n\n        // 显示行信息标题\n        Text('LineMetrics').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 按钮，点击后获取首行的文本样式和字体属性信息\n        Button(\"首行行信息、文本样式信息、以及字体属性信息\")\n          .onClick(() => {\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            let lineMetrics: LineMetrics = layoutManager.getLineMetrics(0)\n            this.lineMetrics = \"lineMetrics is \" + JSON.stringify(lineMetrics) + '\\\n\\\n'\n            let runMetrics = lineMetrics.runMetrics\n            runMetrics.forEach((value, key) => {\n              this.lineMetrics += \"runMetrics key is \" + key + \" \" + JSON.stringify(value) + \"\\\n\\\n\"\n            });\n          })\n          .margin({ bottom: 20, top: 10 })\n\n        // 显示行信息\n        Text(this.lineMetrics)\n      }\n      .margin({ top: 100, left: 8, right: 8 })\n    }\n  }\n}"
        },
        {
            "description": "实现一个包含多种文本样式和布局策略的示例组件。该组件展示了如何使用textShadow、heightAdaptivePolicy和TextOverflow.MARQUEE等属性来控制文本的显示效果。\n自定义Text组件的样式函数，接受一个TextHeightAdaptivePolicy参数，用于设置文本的高度自适应策略\n@Extend(Text)\nfunction style(HeightAdaptivePolicy: TextHeightAdaptivePolicy) {\n.width('80%')  设置文本的宽度为父容器的80%\n.height(90)  设置文本的高度为90个单位\n.borderWidth(1)  设置文本的边框宽度为1个单位\n.minFontSize(10)  设置文本的最小字体大小为10个单位\n.maxFontSize(30)  设置文本的最大字体大小为30个单位\n.maxLines(2)  设置文本的最大行数为2行\n.textOverflow({ overflow: TextOverflow.Ellipsis })  设置文本溢出时的处理方式为省略号\n.heightAdaptivePolicy(HeightAdaptivePolicy)  设置文本的高度自适应策略\n}\n主入口组件，展示多种文本样式和布局策略",
            "code": "@Entry\n@Component\nstruct TextExample3 {\n  build() {\n    Column() {\n      // 展示textShadow效果的标题\n      Text('textShadow').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%')\n\n      // 展示textShadow效果的文本\n      Text('textShadow')\n        .width('80%') // 设置文本的宽度为父容器的80%\n        .height(55) // 设置文本的高度为55个单位\n        .fontSize(40) // 设置文本的字体大小为40个单位\n        .lineHeight(55) // 设置文本的行高为55个单位\n        .textAlign(TextAlign.Center) // 设置文本的对齐方式为居中\n        .textShadow({\n          radius: 10, // 设置阴影的模糊半径为10个单位\n          color: Color.Black, // 设置阴影的颜色为黑色\n          offsetX: 0, // 设置阴影的水平偏移量为0个单位\n          offsetY: 0 // 设置阴影的垂直偏移量为0个单位\n        })\n        .borderWidth(1) // 设置文本的边框宽度为1个单位\n      Divider() // 添加分隔线\n\n      // 展示heightAdaptivePolicy效果的标题\n      Text('heightAdaptivePolicy').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%')\n\n      // 展示不同heightAdaptivePolicy策略的文本\n      Text('This is the text with the height adaptive policy set')\n        .style(TextHeightAdaptivePolicy.MAX_LINES_FIRST) // 设置高度自适应策略为优先考虑最大行数\n      Text('This is the text with the height adaptive policy set')\n        .style(TextHeightAdaptivePolicy.MIN_FONT_SIZE_FIRST) // 设置高度自适应策略为优先考虑最小字体大小\n      Text('This is the text with the height adaptive policy set')\n        .style(TextHeightAdaptivePolicy.LAYOUT_CONSTRAINT_FIRST) // 设置高度自适应策略为优先考虑布局约束\n      Divider() // 添加分隔线\n\n      // 展示TextOverflow.MARQUEE效果的标题\n      Text('marquee').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%')\n\n      // 展示TextOverflow.MARQUEE效果的文本\n      Text('This is the text with the text overflow set marquee')\n        .width(300) // 设置文本的宽度为300个单位\n        .borderWidth(1) // 设置文本的边框宽度为1个单位\n        .textOverflow({ overflow: TextOverflow.MARQUEE }) // 设置文本溢出时的处理方式为跑马灯效果\n    }\n  }\n}"
        },
        {
            "description": "实现一个文本组件，支持自定义编辑菜单选项。通过 `editMenuOptions` 属性，可以设置自定义菜单项的文本内容、图标、回调方法。\n组件展示一段文本，并允许用户通过长按或右键点击文本区域来显示自定义的编辑菜单。菜单项包括默认的复制和全选选项，以及两个自定义选项。",
            "code": "@Entry\n@Component\nstruct TextExample11 {\n  @State text: string = 'Text editMenuOptions' // 定义一个状态变量 `text`，用于存储文本内容\n\n  // 定义一个方法 `onCreateMenu`，用于自定义编辑菜单项\n  onCreateMenu(menuItems: Array<TextMenuItem>) {\n    menuItems.forEach((value, index) => {\n      value.icon = $r('app.media.startIcon') // 为每个菜单项设置图标\n      if (value.id.equals(TextMenuItemId.COPY)) { // 如果菜单项的 ID 是 COPY\n        value.content = \"复制change\" // 修改复制菜单项的文本内容\n      }\n      if (value.id.equals(TextMenuItemId.SELECT_ALL)) { // 如果菜单项的 ID 是 SELECT_ALL\n        value.content = \"全选change\" // 修改全选菜单项的文本内容\n      }\n    })\n    let item1: TextMenuItem = {\n      content: 'custom1', // 自定义菜单项的文本内容\n      icon: $r('app.media.startIcon'), // 自定义菜单项的图标\n      id: TextMenuItemId.of('custom1'), // 自定义菜单项的 ID\n    }\n    let item2: TextMenuItem = {\n      content: 'custom2', // 自定义菜单项的文本内容\n      id: TextMenuItemId.of('custom2'), // 自定义菜单项的 ID\n      icon: $r('app.media.startIcon'), // 自定义菜单项的图标\n    }\n    menuItems.push(item1) // 将自定义菜单项 `item1` 添加到菜单项列表的末尾\n    menuItems.unshift(item2) // 将自定义菜单项 `item2` 添加到菜单项列表的开头\n    return menuItems // 返回修改后的菜单项列表\n  }\n\n  build() {\n    Column() {\n      Text(this.text) // 显示文本内容\n        .fontSize(20) // 设置文本字体大小\n        .copyOption(CopyOptions.LocalDevice) // 设置复制选项为仅本地设备\n        .editMenuOptions({\n          onCreateMenu: this.onCreateMenu, // 设置自定义菜单项的回调方法\n          onMenuItemClick: (menuItem: TextMenuItem, textRange: TextRange) => { // 设置菜单项点击的回调方法\n            if (menuItem.id.equals(TextMenuItemId.of(\"custom2\"))) { // 如果点击的是自定义菜单项 `custom2`\n              console.log(\"拦截 id: custom2 start:\" + textRange.start + \"; end:\" + textRange.end) // 输出日志，表示拦截了该菜单项的点击事件\n              return true; // 返回 true，表示拦截该菜单项的默认行为\n            }\n            if (menuItem.id.equals(TextMenuItemId.COPY)) { // 如果点击的是复制菜单项\n              console.log(\"拦截 COPY start:\" + textRange.start + \"; end:\" + textRange.end) // 输出日志，表示拦截了该菜单项的点击事件\n              return true; // 返回 true，表示拦截该菜单项的默认行为\n            }\n            if (menuItem.id.equals(TextMenuItemId.SELECT_ALL)) { // 如果点击的是全选菜单项\n              console.log(\"不拦截 SELECT_ALL start:\" + textRange.start + \"; end:\" + textRange.end) // 输出日志，表示不拦截该菜单项的点击事件\n              return false; // 返回 false，表示不拦截该菜单项的默认行为\n            }\n            return false; // 返回 false，表示不拦截其他菜单项的默认行为\n          }\n        })\n        .margin({ top: 100 }) // 设置文本组件的上边距\n    }\n    .width(\"90%\") // 设置列组件的宽度为父容器的 90%\n    .margin(\"5%\") // 设置列组件的外边距为父容器的 5%\n  }\n}"
        },
        {
            "description": "实现一个展示文本样式的示例组件，包含文本装饰、基线偏移、字符间距和文本大小写转换的功能。通过Flex布局将不同样式的文本内容垂直排列，并设置相应的样式属性。\n自定义Text组件的样式\n@Extend(Text)\nfunction style() {\n.fontSize(12)  设置字体大小为12\n.border({ width: 1 })  设置文本边框宽度为1\n.padding(10)  设置文本内边距为10\n.width('100%')  设置文本宽度为100%\n}\n主入口组件",
            "code": "@Entry\n@Component\nstruct TextExample2 {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      // 展示文本装饰属性\n      Text('decoration').fontSize(9).fontColor(0xCCCCCC) // 设置标题文本样式\n      Text('This is the text content with the decoration set to LineThrough and the color set to Red.')\n        .decoration({\n          type: TextDecorationType.LineThrough, // 设置文本装饰类型为删除线\n          color: Color.Red // 设置文本装饰颜色为红色\n        })\n        .style() // 应用自定义样式\n\n      Text('This is the text content with the decoration set to Overline and the color set to Red.')\n        .decoration({\n          type: TextDecorationType.Overline, // 设置文本装饰类型为上划线\n          color: Color.Red, // 设置文本装饰颜色为红色\n          style: TextDecorationStyle.DOTTED // 设置文本装饰样式为点状\n        })\n        .style() // 应用自定义样式\n\n      Text('This is the text content with the decoration set to Underline and the color set to Red.')\n        .decoration({\n          type: TextDecorationType.Underline, // 设置文本装饰类型为下划线\n          color: Color.Red, // 设置文本装饰颜色为红色\n          style: TextDecorationStyle.WAVY // 设置文本装饰样式为波浪线\n        })\n        .style() // 应用自定义样式\n\n      // 展示基线偏移属性\n      Text('baselineOffset').fontSize(9).fontColor(0xCCCCCC) // 设置标题文本样式\n      Text('This is the text content with baselineOffset 0.')\n        .baselineOffset(0) // 设置基线偏移为0\n        .style() // 应用自定义样式\n      Text('This is the text content with baselineOffset 30.')\n        .baselineOffset(30) // 设置基线偏移为30\n        .style() // 应用自定义样式\n      Text('This is the text content with baselineOffset -20.')\n        .baselineOffset(-20) // 设置基线偏移为-20\n        .style() // 应用自定义样式\n\n      // 展示字符间距属性\n      Text('letterSpacing').fontSize(9).fontColor(0xCCCCCC) // 设置标题文本样式\n      Text('This is the text content with letterSpacing 0.')\n        .letterSpacing(0) // 设置字符间距为0\n        .style() // 应用自定义样式\n      Text('This is the text content with letterSpacing 3.')\n        .letterSpacing(3) // 设置字符间距为3\n        .style() // 应用自定义样式\n      Text('This is the text content with letterSpacing -1.')\n        .letterSpacing(-1) // 设置字符间距为-1\n        .style() // 应用自定义样式\n\n      // 展示文本大小写转换属性\n      Text('textCase').fontSize(9).fontColor(0xCCCCCC) // 设置标题文本样式\n      Text('This is the text content with textCase set to Normal.')\n        .textCase(TextCase.Normal) // 设置文本大小写为正常\n        .style() // 应用自定义样式\n      Text('This is the text content with textCase set to LowerCase.')\n        .textCase(TextCase.LowerCase) // 设置文本大小写为小写\n        .style() // 应用自定义样式\n      Text('This is the text content with textCase set to UpperCase.')\n        .textCase(TextCase.UpperCase) // 设置文本大小写为大写\n        .style() // 应用自定义样式\n\n    }.height(700).width(350).padding({ left: 35, right: 35, top: 35 }) // 设置Flex容器的高度、宽度和内边距\n  }\n}"
        },
        {
            "description": "实现一个文本展示组件，支持动态更改省略号位置、文本换行模式以及文本裁剪功能。通过按钮交互，用户可以切换不同的省略号位置和换行模式，并查看效果。",
            "code": "@Entry\n@Component\nstruct TextExample4 {\n  // 定义文本内容\n  @State text: string =\n    'The text component is used to display a piece of textual information. Support universal attributes and universal text attributes.'\n  \n  // 定义省略号模式索引，初始值为0\n  @State ellipsisModeIndex: number = 0;\n  \n  // 定义省略号模式数组，包含三种模式：从开头省略、从中间省略、从结尾省略\n  @State ellipsisMode: EllipsisMode[] = [EllipsisMode.START, EllipsisMode.CENTER, EllipsisMode.END]\n  \n  // 定义省略号模式字符串数组，用于显示当前省略号模式\n  @State ellipsisModeStr: string[] = ['START', 'CENTER', 'END']\n  \n  // 定义换行模式索引，初始值为0\n  @State wordBreakIndex: number = 0;\n  \n  // 定义换行模式数组，包含三种模式：正常换行、强制换行、单词内换行\n  @State wordBreak: WordBreak[] = [WordBreak.NORMAL, WordBreak.BREAK_ALL, WordBreak.BREAK_WORD]\n  \n  // 定义换行模式字符串数组，用于显示当前换行模式\n  @State wordBreakStr: string[] = ['NORMAL', 'BREAK_ALL', 'BREAK_WORD']\n  \n  // 定义文本裁剪状态，初始值为false\n  @State textClip: boolean = false\n\n  build() {\n    Column({ space: 10 }) {\n      // 第一个文本组件，显示初始文本内容，设置字体大小、边框、行高、最大行数、省略号模式和宽度\n      Text(this.text)\n        .fontSize(16)\n        .border({ width: 1 })\n        .lineHeight(20)\n        .maxLines(1)\n        .textOverflow({ overflow: TextOverflow.Ellipsis })\n        .ellipsisMode(this.ellipsisMode[this.ellipsisModeIndex])\n        .width(300)\n        .margin({ left: 20, top: 20 })\n\n      // 按钮组件，点击后切换省略号模式\n      Row() {\n        Button('更改省略号位置：' + this.ellipsisModeStr[this.ellipsisModeIndex]).onClick(() => {\n          this.ellipsisModeIndex++\n          if (this.ellipsisModeIndex > (this.ellipsisModeStr.length - 1)) {\n            this.ellipsisModeIndex = 0\n          }\n        })\n      }\n\n      // 第二个文本组件，显示长文本内容，设置字体大小、边框、换行模式、行高、最大行数、裁剪状态和宽度\n      Text('This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.')\n        .fontSize(12)\n        .border({ width: 1 })\n        .wordBreak(WordBreak.NORMAL)\n        .lineHeight(20)\n        .maxLines(2)\n        .clip(this.textClip)\n        .width(260)\n      \n      // 按钮组件，点击后切换文本裁剪状态\n      Row() {\n        Button('切换clip：' + this.textClip).onClick(() => {\n          this.textClip = !this.textClip\n        })\n      }\n\n      // 第三个文本组件，显示初始文本内容，设置字体大小、边框、最大行数、省略号模式、换行模式、行高和宽度\n      Text(this.text)\n        .fontSize(12)\n        .border({ width: 1 })\n        .maxLines(2)\n        .textOverflow({ overflow: TextOverflow.Ellipsis })\n        .wordBreak(this.wordBreak[this.wordBreakIndex])\n        .lineHeight(20)\n        .width(260)\n      \n      // 按钮组件，点击后切换换行模式\n      Row() {\n        Button('更改wordBreak模式：' + this.wordBreakStr[this.wordBreakIndex]).onClick(() => {\n          this.wordBreakIndex++\n          if (this.wordBreakIndex > (this.wordBreakStr.length - 1)) {\n            this.wordBreakIndex = 0\n          }\n        })\n      }\n    }\n  }\n}"
        },
        {
            "description": "实现一个展示文本样式的示例组件，包括行间距、字体特性和换行策略的设置。通过按钮切换不同的换行策略，展示不同策略下的文本换行效果。",
            "code": "import { LengthMetrics } from '@kit.ArkUI'\n\n// 扩展Text组件，添加行间距设置功能\n@Extend(Text) function lineSpacingValue(LineSpacing: LengthMetrics|undefined) {\n  .lineSpacing(LineSpacing) // 设置行间距，参数为LengthMetrics类型或undefined\n  .fontSize(12) // 设置字体大小为12\n  .border({ width: 1 }) // 设置文本边框宽度为1\n}\n\n@Entry\n@Component\nstruct TextExample8 {\n  @State message1: string = \"They can be classified as built-in components–those directly provided by the ArkUI framework and custom components – those defined by developers\" +\n    \"The built-in components include buttons radio buttonsprogress indicators and text You can set the rendering effectof thesecomponents in method chaining mode,\" +\n    \"page components are divided into independent UI units to implementindependent creation development and reuse of different units on pages making pages more engineering-oriented.\";\n  @State lineBreakStrategyIndex: number = 0; // 当前换行策略索引\n  @State lineBreakStrategy: LineBreakStrategy[] = [LineBreakStrategy.GREEDY, LineBreakStrategy.HIGH_QUALITY, LineBreakStrategy.BALANCED] // 换行策略数组\n  @State lineBreakStrategyStr: string[] = ['GREEDY', 'HIGH_QUALITY', 'BALANCED'] // 换行策略名称数组\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      Text('lineSpacing').fontSize(9).fontColor(0xCCCCCC) // 显示标题“lineSpacing”\n      Text('This is a context with no lineSpacing set.')\n        .lineSpacingValue(undefined) // 使用扩展方法设置行间距为undefined，即不设置行间距\n      Text( 'This is a context with lineSpacing set to 20_px.')\n        .lineSpacingValue(LengthMetrics.px(20)) // 使用扩展方法设置行间距为20px\n      Text('This is the context with lineSpacing set to 20_vp.')\n        .lineSpacingValue(LengthMetrics.vp(20)) // 使用扩展方法设置行间距为20vp\n      Text('This is the context with lineSpacing set to 20_fp.')\n        .lineSpacingValue(LengthMetrics.fp(20)) // 使用扩展方法设置行间距为20fp\n      Text('This is the context with lineSpacing set to 20_lpx.')\n        .lineSpacingValue(LengthMetrics.lpx(20)) // 使用扩展方法设置行间距为20lpx\n      Text('This is the context with lineSpacing set to 100%.')\n        .lineSpacingValue(LengthMetrics.percent(1)) // 使用扩展方法设置行间距为100%\n      Text('fontFeature').fontSize(9).fontColor(0xCCCCCC) // 显示标题“fontFeature”\n      Text('This is ss01 on : 0123456789')\n        .fontSize(20) // 设置字体大小为20\n        .fontFeature(\"\\\"ss01\\\" on\") // 启用字体特性ss01\n      Text('This is ss01 off: 0123456789')\n        .fontSize(20) // 设置字体大小为20\n        .fontFeature(\"\\\"ss01\\\" off\") // 禁用字体特性ss01\n      Text('lineBreakStrategy').fontSize(9).fontColor(0xCCCCCC) // 显示标题“lineBreakStrategy”\n      Text(this.message1)\n        .fontSize(12) // 设置字体大小为12\n        .border({ width: 1 }) // 设置文本边框宽度为1\n        .padding(10) // 设置内边距为10\n        .width('100%') // 设置文本宽度为100%\n        .lineBreakStrategy(this.lineBreakStrategy[this.lineBreakStrategyIndex]) // 设置换行策略\n      Row() {\n        Button('当前lineBreakStrategy模式：' + this.lineBreakStrategyStr[this.lineBreakStrategyIndex]).onClick(() => {\n          this.lineBreakStrategyIndex++ // 切换到下一个换行策略\n          if(this.lineBreakStrategyIndex > (this.lineBreakStrategyStr.length - 1)) {\n            this.lineBreakStrategyIndex = 0 // 如果超出数组范围，重置为0\n          }\n        })\n      }\n    }.height(600).width(350).padding({ left: 35, right: 35, top: 35 }) // 设置Flex容器的高度、宽度和内边距\n  }\n}"
        },
        {
            "description": "实现一个文本展示组件，展示不同文本对齐方式、文本溢出处理、最大行数限制以及行高的效果。\n自定义样式函数，用于设置文本的对齐方式、字体大小、边框、内边距和宽度\n@Extend(Text)\nfunction style(TextAlign: TextAlign) {\n.textAlign(TextAlign)  设置文本对齐方式\n.fontSize(12)  设置字体大小为12\n.border({ width: 1 })  设置文本边框宽度为1\n.padding(10)  设置文本内边距为10\n.width('100%')  设置文本宽度为100%\n}\n入口组件，定义了一个文本展示示例",
            "code": "@Entry\n@Component\nstruct TextExample1 {\n  build() {\n    // 创建一个Flex布局，方向为列布局，子项左对齐，子项之间有间隔\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n\n      // 显示文本“textAlign”，字体大小为9，颜色为灰色\n      Text('textAlign').fontSize(9).fontColor(0xCCCCCC)\n\n      // 显示文本“TextAlign set to Center.”，并应用自定义样式，设置文本对齐方式为居中\n      Text('TextAlign set to Center.')\n        .style(TextAlign.Center)\n\n      // 显示文本“TextAlign set to Start.”，并应用自定义样式，设置文本对齐方式为左对齐\n      Text('TextAlign set to Start.')\n        .style(TextAlign.Start)\n\n      // 显示文本“TextAlign set to End.”，并应用自定义样式，设置文本对齐方式为右对齐\n      Text('TextAlign set to End.')\n        .style(TextAlign.End)\n\n      // 显示文本“This is the text content with textAlign set to Center.”，并应用自定义样式，设置文本对齐方式为居中\n      Text('This is the text content with textAlign set to Center.')\n        .style(TextAlign.Center)\n\n      // 显示文本“This is the text content with textAlign set to Start.”，并应用自定义样式，设置文本对齐方式为左对齐\n      Text('This is the text content with textAlign set to Start.')\n        .style(TextAlign.Start)\n\n      // 显示文本“This is the text content with textAlign set to End.”，并应用自定义样式，设置文本对齐方式为右对齐\n      Text('This is the text content with textAlign set to End.')\n        .style(TextAlign.End)\n\n      // 显示文本“TextOverflow+maxLines”，字体大小为9，颜色为灰色\n      Text('TextOverflow+maxLines').fontSize(9).fontColor(0xCCCCCC)\n\n      // 显示长文本，设置文本溢出处理为裁剪，最大行数为1，并应用自定义样式，设置文本对齐方式为左对齐\n      Text('This is the setting of textOverflow to Clip text content This is the setting of textOverflow to None text content. This is the setting of textOverflow to Clip text content This is the setting of textOverflow to None text content.')\n        .textOverflow({ overflow: TextOverflow.Clip }) // 设置文本溢出处理为裁剪\n        .maxLines(1) // 设置最大行数为1\n        .style(TextAlign.Start) // 应用自定义样式，设置文本对齐方式为左对齐\n\n      // 显示长文本，设置文本溢出处理为省略号，最大行数为1，并应用自定义样式，设置文本对齐方式为左对齐\n      Text('This is set textOverflow to Ellipsis text content This is set textOverflow to Ellipsis text content.')\n        .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出处理为省略号\n        .maxLines(1) // 设置最大行数为1\n        .style(TextAlign.Start) // 应用自定义样式，设置文本对齐方式为左对齐\n\n      // 显示文本“lineHeight”，字体大小为9，颜色为灰色\n      Text('lineHeight').fontSize(9).fontColor(0xCCCCCC)\n\n      // 显示文本“This is the text with the line height set. This is the text with the line height set.”，并应用自定义样式，设置文本对齐方式为左对齐\n      Text('This is the text with the line height set. This is the text with the line height set.')\n        .style(TextAlign.Start)\n\n      // 显示文本“This is the text with the line height set. This is the text with the line height set.”，并应用自定义样式，设置文本对齐方式为左对齐，行高为20\n      Text('This is the text with the line height set. This is the text with the line height set.')\n        .style(TextAlign.Start)\n        .lineHeight(20) // 设置行高为20\n\n    }.height(600).width(340).padding({ left: 35, right: 35, top: 35 }) // 设置Flex布局的高度、宽度和内边距\n  }\n}"
        },
        {
            "description": "实现一个包含文本和图像的组件，支持自定义选择菜单和文本选中区域变化的回调。组件包含三个自定义菜单，分别在长按图像、右击文本和选择混合内容时弹出。每个菜单项点击后会关闭菜单。",
            "code": "@Entry\n@Component\nstruct TextExample7 {\n  // 创建一个TextController实例，用于控制文本组件的行为\n  controller: TextController = new TextController();\n  // 创建一个TextOptions实例，用于配置文本组件的控制器\n  options: TextOptions = { controller: this.controller };\n\n  build() {\n    Column() {\n      Column() {\n        // 创建一个Text组件，包含文本和图像，并配置控制器\n        Text(undefined, this.options) {\n          Span('Hello World') // 添加文本内容\n          ImageSpan($r('app.media.icon')) // 添加图像内容\n            .width('100px') // 设置图像宽度\n            .height('100px') // 设置图像高度\n            .objectFit(ImageFit.Fill) // 设置图像填充方式\n            .verticalAlign(ImageSpanAlignment.CENTER) // 设置图像垂直对齐方式\n        }\n        .copyOption(CopyOptions.InApp) // 设置文本复制选项为仅在应用内复制\n        .bindSelectionMenu(TextSpanType.IMAGE, this.LongPressImageCustomMenu, TextResponseType.LONG_PRESS, {\n          // 绑定长按图像时的自定义菜单\n          onDisappear: () => {\n            console.info(`自定义选择菜单关闭时回调`); // 菜单关闭时的回调\n          },\n          onAppear: () => {\n            console.info(`自定义选择菜单弹出时回调`); // 菜单弹出时的回调\n          }\n        })\n        .bindSelectionMenu(TextSpanType.TEXT, this.RightClickTextCustomMenu, TextResponseType.RIGHT_CLICK)\n        // 绑定右击文本时的自定义菜单\n        .bindSelectionMenu(TextSpanType.MIXED, this.SelectMixCustomMenu, TextResponseType.SELECT)\n        // 绑定选择混合内容时的自定义菜单\n        .onTextSelectionChange((selectionStart: number, selectionEnd: number) => {\n          // 监听文本选中区域变化\n          console.info(`文本选中区域变化回调, selectionStart: ${selectionStart}, selectionEnd: ${selectionEnd}`);\n        })\n        .borderWidth(1) // 设置边框宽度\n        .borderColor(Color.Red) // 设置边框颜色\n        .width(200) // 设置组件宽度\n        .height(100) // 设置组件高度\n      }\n      .width('100%') // 设置内部列的宽度为100%\n      .backgroundColor(Color.White) // 设置背景颜色为白色\n      .alignItems(HorizontalAlign.Start) // 设置内部列的水平对齐方式为左对齐\n      .padding(25) // 设置内部列的填充\n    }\n    .height('100%') // 设置外部列的高度为100%\n  }\n\n  @Builder\n  RightClickTextCustomMenu() {\n    // 定义右击文本时的自定义菜单\n    Column() {\n      Menu() {\n        MenuItemGroup() {\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: \"Right Click Menu 1\", labelInfo: \"\" })\n            .onClick((event) => {\n              this.controller.closeSelectionMenu(); // 点击菜单项后关闭菜单\n            })\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: \"Right Click Menu 2\", labelInfo: \"\" })\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: \"Right Click Menu 3\", labelInfo: \"\" })\n        }\n      }\n      .MenuStyles() // 应用菜单样式\n    }\n  }\n\n  @Builder\n  LongPressImageCustomMenu() {\n    // 定义长按图像时的自定义菜单\n    Column() {\n      Menu() {\n        MenuItemGroup() {\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: \"Long Press Image Menu 1\", labelInfo: \"\" })\n            .onClick((event) => {\n              this.controller.closeSelectionMenu(); // 点击菜单项后关闭菜单\n            })\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: \"Long Press Image Menu 2\", labelInfo: \"\" })\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: \"Long Press Image Menu 3\", labelInfo: \"\" })\n        }\n      }\n      .MenuStyles() // 应用菜单样式\n    }\n  }\n\n  @Builder\n  SelectMixCustomMenu() {\n    // 定义选择混合内容时的自定义菜单\n    Column() {\n      Menu() {\n        MenuItemGroup() {\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: \"Select Mixed Menu 1\", labelInfo: \"\" })\n            .onClick((event) => {\n              this.controller.closeSelectionMenu(); // 点击菜单项后关闭菜单\n            })\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: \"Select Mixed Menu 2\", labelInfo: \"\" })\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: \"Select Mixed Menu 3\", labelInfo: \"\" })\n        }\n      }\n      .MenuStyles() // 应用菜单样式\n    }\n  }\n}\n\n@Extend(Menu)\nfunction MenuStyles() {\n  // 定义菜单的样式\n  .radius($r('sys.float.ohos_id_corner_radius_card')) // 设置菜单的圆角半径\n  .clip(true) // 设置菜单的裁剪方式\n  .backgroundColor('#F0F0F0') // 设置菜单的背景颜色\n}"
        }
    ],
    "TextArea": [
        {
            "description": "实现一个包含文本输入框和自定义键盘的示例。文本输入框支持自定义键盘的弹出和关闭，并且自定义键盘包含数字和符号按钮。点击数字和符号按钮会将对应的字符追加到输入框中。",
            "code": "@Entry\n@Component\nstruct TextAreaExample {\n  controller: TextAreaController = new TextAreaController() // 创建TextArea的控制器\n  @State inputValue: string = \"\" // 用于存储输入框的文本内容\n\n  // 自定义键盘组件\n  @Builder CustomKeyboardBuilder() {\n    Column() {\n      Button('x').onClick(() => {\n        // 关闭自定义键盘\n        this.controller.stopEditing()\n      })\n      Grid() {\n        ForEach([1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'], (item: number | string) => {\n          GridItem() {\n            Button(item + \"\")\n              .width(110).onClick(() => {\n              // 点击键盘按钮，更新输入值\n              this.inputValue += item\n            })\n          }\n        })\n      }.maxCount(3).columnsGap(10).rowsGap(10).padding(5)\n    }.backgroundColor(Color.Gray)\n  }\n\n  build() {\n    Column() {\n      TextArea({ controller: this.controller, text: this.inputValue})\n        // 绑定自定义键盘\n        .customKeyboard(this.CustomKeyboardBuilder()).margin(10).border({ width: 1 })\n        .height(200)\n    }\n  }\n}"
        }
    ],
    "TextClock": [
        {
            "description": "实现一个带有多个阴影效果的文本时钟组件。该组件通过@State装饰器管理状态变量textShadows，用于存储多个阴影选项。TextClock组件通过设置字体大小和应用阴影效果来展示当前时间。",
            "code": "@Entry\n@Component\nstruct TextClockExample {\n  // 使用@State装饰器定义一个状态变量textShadows，用于存储多个阴影选项\n  @State textShadows : ShadowOptions | Array<ShadowOptions> = [\n    { radius: 10, color: Color.Red, offsetX: 10, offsetY: 0 }, // 红色阴影，半径10，水平偏移10\n    { radius: 10, color: Color.Black, offsetX: 20, offsetY: 0 }, // 黑色阴影，半径10，水平偏移20\n    { radius: 10, color: Color.Brown, offsetX: 30, offsetY: 0 }, // 棕色阴影，半径10，水平偏移30\n    { radius: 10, color: Color.Green, offsetX: 40, offsetY: 0 }, // 绿色阴影，半径10，水平偏移40\n    { radius: 10, color: Color.Yellow, offsetX: 100, offsetY: 0 } // 黄色阴影，半径10，水平偏移100\n  ]\n\n  build() {\n    Column({ space: 8 }) {\n      // 创建一个TextClock组件，设置字体大小为50，并应用定义的阴影效果\n      TextClock().fontSize(50).textShadow(this.textShadows)\n    }\n  }\n}"
        },
        {
            "description": "实现一个包含两个TextClock组件的示例，分别展示24小时制和12小时制的时间显示效果。每个TextClock组件下方都有相应的描述文本，说明其显示效果。",
            "code": "@Entry\n@Component\nstruct TextClockExample {\n  build() {\n    Column({ space: 8 }) { // 创建一个垂直布局，组件间距为8\n      Row() { // 创建一个水平布局\n        // 描述文本，说明显示效果\n        Text(\"24小时制去除前导0：\")\n          .fontSize(20) // 设置文本字体大小为20\n        // TextClock组件，显示24小时制时间，去除前导0\n        TextClock()\n          .fontSize(20) // 设置时间文本字体大小为20\n          .format(\"HH:mm:ss\") // 设置时间格式为24小时制，HH表示小时，mm表示分钟，ss表示秒\n          .dateTimeOptions({hour: \"numeric\"}) // 设置小时显示为数字形式，去除前导0\n      }\n      Row() { // 创建一个水平布局\n        // 描述文本，说明显示效果\n        Text(\"12小时制增加前导0：\")\n          .fontSize(20) // 设置文本字体大小为20\n        // TextClock组件，显示12小时制时间，增加前导0\n        TextClock()\n          .fontSize(20) // 设置时间文本字体大小为20\n          .format(\"aa hh:mm:ss\") // 设置时间格式为12小时制，aa表示上午或下午，hh表示小时，mm表示分钟，ss表示秒\n          .dateTimeOptions({hour: \"2-digit\"}) // 设置小时显示为两位数字形式，增加前导0\n      }\n    }\n    .alignItems(HorizontalAlign.Start) // 设置Column组件内的子组件水平对齐方式为左对齐\n  }\n}"
        },
        {
            "description": "实现一个包含文本时钟和控制按钮的界面。文本时钟显示东八区的系统时间，精确到秒，并支持启动和停止功能。界面中心显示当前累积时间，每当时间变化时，累积时间会更新。",
            "code": "@Entry\n@Component\nstruct Second {\n  // 定义一个状态变量，用于存储累积时间\n  @State accumulateTime: number = 0\n  \n  // 创建一个TextClockController对象，用于控制文本时钟的启动和停止\n  controller: TextClockController = new TextClockController()\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 显示当前累积时间\n      Text('Current milliseconds is ' + this.accumulateTime)\n        .fontSize(20)\n      \n      // 创建一个TextClock组件，显示东八区的系统时间，精确到秒\n      TextClock({ timeZoneOffset: -8, controller: this.controller })\n        .format('aa hh:mm:ss') // 设置时间格式为12小时制，显示上午/下午\n        .onDateChange((value: number) => {\n          // 每当时间变化时，更新累积时间\n          this.accumulateTime = value\n        })\n        .margin(20) // 设置外边距\n        .fontSize(30) // 设置字体大小\n      \n      // 创建一个按钮，点击后启动文本时钟\n      Button(\"start TextClock\")\n        .margin({ bottom: 10 }) // 设置下边距\n        .onClick(() => {\n          // 启动文本时钟\n          this.controller.start()\n        })\n      \n      // 创建一个按钮，点击后停止文本时钟\n      Button(\"stop TextClock\")\n        .onClick(() => {\n          // 停止文本时钟\n          this.controller.stop()\n        })\n    }\n    .width('100%') // 设置宽度为100%\n    .height('100%') // 设置高度为100%\n  }\n}"
        },
        {
            "description": "实现一个包含两个文本时钟的界面，用户可以通过按钮控制时钟的启动和停止。时钟显示当前时间，并根据时区偏移量调整时间显示。界面还显示当前累积的毫秒数。",
            "code": "@Entry\n@Component\nstruct TextClockExample {\n  // 累积时间，单位为秒\n  @State accumulateTime1: number = 0\n  // 时区偏移量，单位为小时\n  @State timeZoneOffset: number = -8\n  // 文本时钟控制器\n  controller1: TextClockController = new TextClockController()\n  controller2: TextClockController = new TextClockController()\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 显示当前累积时间\n      Text('Current milliseconds is ' + this.accumulateTime1)\n        .fontSize(20)\n        .margin({ top: 20 })\n      // 第一个文本时钟，显示当前时间，并绑定控制器和时区偏移量\n      TextClock({ timeZoneOffset: this.timeZoneOffset, controller: this.controller1 })\n        .format('aa hh:mm:ss')\n        .onDateChange((value: number) => {\n          this.accumulateTime1 = value\n        })\n        .margin(20)\n        .fontSize(30)\n      // 第二个文本时钟，使用自定义样式，并绑定控制器和时区偏移量\n      TextClock({ timeZoneOffset: this.timeZoneOffset, controller: this.controller2 })\n        .format('aa hh:mm:ss')\n        .fontSize(30)\n        .contentModifier(new MyTextClockStyle('ContentModifier:'))\n      // 启动文本时钟的按钮\n      Button(\"start TextClock\")\n        .margin({ top: 20, bottom: 10 })\n        .onClick(() => {\n          this.controller1.start()\n          this.controller2.start()\n        })\n      // 停止文本时钟的按钮\n      Button(\"stop TextClock\")\n        .margin({ bottom: 30 })\n        .onClick(() => {\n          this.controller1.stop()\n          this.controller2.stop()\n        })\n    }\n    .width('100%')\n    .height('100%')\n  }\n}"
        }
    ],
    "TextPicker": [
        {
            "description": "实现一个包含多种类型文本选择器的示例组件。该组件展示了如何使用单列选择器、多列选择器和级联选择器，并配置了不同的文本样式和分隔线样式。",
            "code": "@Entry\n@Component\nstruct TextPickerExample {\n  // 初始化选中项为1\n  private select: number = 1\n  \n  // 定义不同种类的水果数组\n  private apfruits: string[] = ['apple1', 'apple2', 'apple3', 'apple4']\n  private orfruits: string[] = ['orange1', 'orange2', 'orange3', 'orange4']\n  private pefruits: string[] = ['peach1', 'peach2', 'peach3', 'peach4']\n  \n  // 将不同种类的水果数组组合成一个二维数组\n  private multi: string[][] = [this.apfruits, this.orfruits, this.pefruits]\n  \n  // 定义级联选择器的数据结构\n  private cascade: TextCascadePickerRangeContent[] = [\n    {\n      text: '辽宁省',\n      children: [{ text: '沈阳市', children: [{ text: '沈河区' }, { text: '和平区' }, { text: '浑南区' }] },\n        { text: '大连市', children: [{ text: '中山区' }, { text: '金州区' }, { text: '长海县' }] }]\n    },\n    {\n      text: '吉林省',\n      children: [{ text: '长春市', children: [{ text: '南关区' }, { text: '宽城区' }, { text: '朝阳区' }] },\n        { text: '四平市', children: [{ text: '铁西区' }, { text: '铁东区' }, { text: '梨树县' }] }]\n    },\n    {\n      text: '黑龙江省',\n      children: [{ text: '哈尔滨市', children: [{ text: '道里区' }, { text: '道外区' }, { text: '南岗区' }] },\n        { text: '牡丹江市', children: [{ text: '东安区' }, { text: '西安区' }, { text: '爱民区' }] }]\n    }\n  ]\n\n  // 构建函数，用于创建组件结构\n  build() {\n    Column() {\n      // 创建一个单列文本选择器，传入苹果数组和初始选中索引\n      TextPicker({ range: this.apfruits, selected: this.select })\n        .onChange((value: string | string[], index: number | number[]) => {\n          // 当选择项改变时，输出选择的值和索引\n          console.info('Picker item changed, value: ' + value + ', index: ' + index)\n        }).margin(bott) // 设置边距为bottom类的实例bott\n\n      // 创建一个多列文本选择器，传入多列数据\n      TextPicker({ range: this.multi })\n        .onChange((value: string | string[], index: number | number[]) => {\n          // 当选择项改变时，输出选择的值和索引\n          console.info('TextPicker 多列:onChange ' + JSON.stringify(value) + ', ' + 'index: ' + JSON.stringify(index))\n        }).margin(bott) // 设置边距为bottom类的实例bott\n\n      // 创建一个级联文本选择器，传入级联数据\n      TextPicker({ range: this.cascade })\n        .onChange((value: string | string[], index: number | number[]) => {\n          // 当选择项改变时，输出选择的值和索引\n          console.info('TextPicker 多列联动:onChange ' + JSON.stringify(value) + ', ' + 'index: ' + JSON.stringify(index))\n        })\n    }\n  }\n}\n\n// 定义bottom类，用于设置边距\nclass bottom {\n  bottom: number = 50\n}\n\n// 创建bottom类的实例\nlet bott: bottom = new bottom()"
        }
    ],
    "TextTimer": [
        {
            "description": "实现一个带有动态文本阴影效果的计时器组件。该组件通过定义多个阴影效果，使得文本在显示时具有多层次的阴影效果，从而增强视觉效果。",
            "code": "@Entry\n@Component\nstruct TextTimerExample {\n  // 定义一个状态变量textShadows，包含多个ShadowOptions对象，每个对象定义了一个阴影的半径、颜色和偏移量\n  @State textShadows : ShadowOptions | Array<ShadowOptions> = [{ radius: 10, color: Color.Red, offsetX: 10, offsetY: 0 },\n      { radius: 10, color: Color.Black, offsetX: 20, offsetY: 0 },\n      { radius: 10, color: Color.Brown, offsetX: 30, offsetY: 0 },\n      { radius: 10, color: Color.Green, offsetX: 40, offsetY: 0 },\n      { radius: 10, color: Color.Yellow, offsetX: 100, offsetY: 0 }]\n\n  build() {\n    Column({ space: 8 }) {\n      // 创建一个TextTimer组件，设置字体大小为50，并应用定义的文本阴影效果\n      TextTimer().fontSize(50).textShadow(this.textShadows)\n    }\n  }\n}"
        },
        {
            "description": "实现一个倒计时器组件，包含开始、暂停和重置功能。倒计时器显示格式为\"mm:ss.SS\"，即分钟、秒和毫秒。用户可以通过按钮控制倒计时的启动、暂停和重置。",
            "code": "@Entry\n@Component\nstruct TextTimerExample {\n  // 创建一个TextTimerController实例，用于控制倒计时器\n  textTimerController: TextTimerController = new TextTimerController()\n  // 定义倒计时显示的格式，初始值为\"mm:ss.SS\"\n  @State format: string = 'mm:ss.SS'\n\n  build() {\n    Column() {\n      // 创建一个TextTimer组件，设置为倒计时模式，初始倒计时时间为30000毫秒，并绑定控制器\n      TextTimer({ isCountDown: true, count: 30000, controller: this.textTimerController })\n        .format(this.format) // 设置倒计时显示的格式\n        .fontColor(Color.Black) // 设置倒计时文本颜色为黑色\n        .fontSize(50) // 设置倒计时文本字体大小为50\n        .onTimer((utc: number, elapsedTime: number) => {\n          // 当倒计时进行时，输出当前的UTC时间和已流逝的时间\n          console.info('textTimer notCountDown utc is：' + utc + ', elapsedTime: ' + elapsedTime)\n        })\n      Row() {\n        // 创建开始按钮，点击时启动倒计时\n        Button(\"start\").onClick(() => {\n          this.textTimerController.start()\n        })\n        // 创建暂停按钮，点击时暂停倒计时\n        Button(\"pause\").onClick(() => {\n          this.textTimerController.pause()\n        })\n        // 创建重置按钮，点击时重置倒计时\n        Button(\"reset\").onClick(() => {\n          this.textTimerController.reset()\n        })\n      }\n    }\n  }\n}"
        },
        {
            "description": "实现一个包含倒计时和正计时的计时器组件，支持开始、暂停和重置功能。计时器组件使用自定义修饰器进行样式和内容定制。",
            "code": "@Entry\n@Component\nstruct Index {\n  // 定义倒计时器的初始时间，单位为毫秒\n  @State count: number = 10000\n  // 创建一个自定义的TextTimer修饰器实例，用于定制计时器的显示样式\n  @State myTimerModifier: MyTextTimerModifier = new MyTextTimerModifier()\n  // 创建两个TextTimerController实例，分别用于控制倒计时器和正计时器\n  countDownTextTimerController: TextTimerController = new TextTimerController()\n  countUpTextTimerController: TextTimerController = new TextTimerController()\n\n  build() {\n    Row() {\n      Column() {\n        // 创建一个倒计时TextTimer组件，应用自定义修饰器，并绑定控制器\n        TextTimer({isCountDown: true, count: this.count, controller: this.countDownTextTimerController})\n          .contentModifier(this.myTimerModifier) // 应用自定义修饰器\n          .onTimer((utc: number, elapsedTime: number) => {\n            // 计时器触发时的回调函数，输出当前时间戳和已过去的时间\n            console.info('textTimer onTimer utc is：' + utc + ', elapsedTime: ' + elapsedTime)\n          })\n          .margin(10) // 设置组件的外边距\n        // 创建一个正计时TextTimer组件，应用自定义修饰器，并绑定控制器\n        TextTimer({isCountDown: false, controller: this.countUpTextTimerController})\n          .contentModifier(this.myTimerModifier) // 应用自定义修饰器\n          .onTimer((utc: number, elapsedTime: number) => {\n            // 计时器触发时的回调函数，输出当前时间戳和已过去的时间\n            console.info('textTimer onTimer utc is：' + utc + ', elapsedTime: ' + elapsedTime)\n          })\n        Row() {\n          // 创建开始按钮，点击时启动两个计时器\n          Button(\"start\").onClick(()=>{\n            this.countDownTextTimerController.start() // 启动倒计时器\n            this.countUpTextTimerController.start() // 启动正计时器\n          }).margin(10) // 设置按钮的外边距\n          // 创建暂停按钮，点击时暂停两个计时器\n          Button(\"pause\").onClick(()=>{\n            this.countDownTextTimerController.pause() // 暂停倒计时器\n            this.countUpTextTimerController.pause() // 暂停正计时器\n          }).margin(10) // 设置按钮的外边距\n          // 创建重置按钮，点击时重置两个计时器\n          Button(\"reset\").onClick(()=>{\n            this.countDownTextTimerController.reset() // 重置倒计时器\n            this.countUpTextTimerController.reset() // 重置正计时器\n          }).margin(10) // 设置按钮的外边距\n        }.margin(20) // 设置行组件的外边距\n      }.width('100%') // 设置列组件的宽度为100%\n    }.height('100%') // 设置行组件的高度为100%\n  }\n}"
        }
    ],
    "TimePicker": [
        {
            "description": "实现一个时间选择器组件，支持切换12小时制和24小时制显示，并能够实时更新和显示选中的时间。组件包含一个按钮用于切换时间显示模式，一个时间选择器用于选择时间，并提供了不同状态下的文本样式设置。",
            "code": "@Entry\n@Component\nstruct TimePickerExample {\n  @State isMilitaryTime: boolean = false // 用于控制时间显示模式，初始为12小时制\n  private selectedTime: Date = new Date('2022-07-22T08:00:00') // 初始选中的时间\n\n  build() {\n    Column() {\n      Button('切换12小时制/24小时制')\n        .margin(30) // 设置按钮的上下边距\n        .onClick(() => {\n          this.isMilitaryTime = !this.isMilitaryTime // 切换时间显示模式\n        })\n      TimePicker({\n        selected: this.selectedTime, // 当前选中的时间\n      })\n        .useMilitaryTime(this.isMilitaryTime) // 根据isMilitaryTime状态切换12小时制或24小时制显示\n        .onChange((value: TimePickerResult) => {\n          if(value.hour >= 0) {\n            this.selectedTime.setHours(value.hour, value.minute) // 更新选中的时间\n            console.info('select current date is: ' + JSON.stringify(value)) // 输出当前选中的时间\n          }\n        })\n        .disappearTextStyle({color: Color.Red, font: {size: 15, weight: FontWeight.Lighter}}) // 设置不可见文本的样式\n        .textStyle({color: Color.Black, font: {size: 20, weight: FontWeight.Normal}}) // 设置普通文本的样式\n        .selectedTextStyle({color: Color.Blue, font: {size: 30, weight: FontWeight.Bolder}}) // 设置选中时间的文本样式\n    }.width('100%')\n  }\n}"
        }
    ],
    "Toggle": [
        {
            "description": "实现一个包含Toggle组件的页面，Toggle组件的类型为Switch，启用状态，并应用自定义样式。当Toggle状态改变时，输出当前状态到控制台。",
            "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Column({ space: 50 }) { // 创建一个垂直布局的列，组件间距为50\n      Toggle({ type: ToggleType.Switch }) // 创建一个Switch类型的Toggle组件\n        .enabled(true) // 设置组件为启用状态\n        .contentModifier(new MySwitchStyle(Color.Yellow, '灯')) // 应用自定义样式，样式类为MySwitchStyle，颜色为黄色，内容为“灯”\n        .onChange((isOn: boolean) => {\n          console.info('Switch Log:' + isOn); // 当Toggle状态改变时，输出当前状态到控制台\n        })\n    }.height('100%').width('100%') // 设置列的高度和宽度为100%\n  }\n}"
        },
        {
            "description": "实现一个包含两个Switch类型Toggle组件的示例，展示如何使用Toggle组件及其自定义样式。组件初始状态分别为关闭和开启，当状态改变时，会在控制台输出当前状态。",
            "code": "@Entry\n@Component\nstruct ToggleExample {\n  build() {\n    Column({ space: 10 }) {\n      Text('type: Switch').fontSize(12).fontColor(0xcccccc).width('90%')\n      // 使用Flex布局，使两个Switch类型的Toggle组件在水平方向上均匀分布\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) {\n        // 第一个Switch类型的Toggle组件，初始状态为关闭\n        Toggle({ type: ToggleType.Switch, isOn: false })\n          .selectedColor('#007DFF') // 设置选中状态的颜色\n          .switchStyle({\n            pointRadius: 15, // 设置开关点的半径\n            trackBorderRadius: 10, // 设置轨道边框的半径\n            pointColor: '#D2B48C', // 设置开关点的颜色\n            unselectedColor: Color.Pink // 设置未选中状态的颜色\n          })\n          .onChange((isOn: boolean) => {\n            console.info('Component status:' + isOn) // 当状态改变时，输出当前状态\n          })\n\n        // 第二个Switch类型的Toggle组件，初始状态为开启\n        Toggle({ type: ToggleType.Switch, isOn: true })\n          .selectedColor('#007DFF') // 设置选中状态的颜色\n          .switchStyle({\n            pointRadius: 15, // 设置开关点的半径\n            trackBorderRadius: 10, // 设置轨道边框的半径\n            pointColor: '#D2B48C', // 设置开关点的颜色\n            unselectedColor: Color.Pink // 设置未选中状态的颜色\n          })\n          .onChange((isOn: boolean) => {\n            console.info('Component status:' + isOn) // 当状态改变时，输出当前状态\n          })\n      }\n    }.width('100%').padding(24) // 设置列的宽度和内边距\n  }\n}"
        },
        {
            "description": "实现一个包含三种不同类型Toggle组件的示例页面，每种类型包含两个Toggle组件，分别展示不同的初始状态。页面使用Flex布局使Toggle组件在水平方向上均匀分布。每个Toggle组件的状态改变时，会在控制台输出当前状态。",
            "code": "@Entry\n@Component\nstruct ToggleExample {\n  build() {\n    Column({ space: 10 }) {\n      // 设置文本样式，用于描述下面的Toggle组件类型\n      Text('type: Switch').fontSize(12).fontColor(0xcccccc).width('90%')\n      \n      // 使用Flex布局，使两个Switch类型的Toggle组件在水平方向上均匀分布\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) {\n        // 第一个Switch类型的Toggle组件，初始状态为关闭\n        Toggle({ type: ToggleType.Switch, isOn: false })\n          .selectedColor('#007DFF') // 设置选中状态的颜色\n          .switchPointColor('#FFFFFF') // 设置开关点颜色\n          .onChange((isOn: boolean) => {\n            console.info('Component status:' + isOn) // 当状态改变时，输出当前状态\n          })\n\n        // 第二个Switch类型的Toggle组件，初始状态为开启\n        Toggle({ type: ToggleType.Switch, isOn: true })\n          .selectedColor('#007DFF') // 设置选中状态的颜色\n          .switchPointColor('#FFFFFF') // 设置开关点颜色\n          .onChange((isOn: boolean) => {\n            console.info('Component status:' + isOn) // 当状态改变时，输出当前状态\n          })\n      }\n\n      // 设置文本样式，用于描述下面的Toggle组件类型\n      Text('type: Checkbox').fontSize(12).fontColor(0xcccccc).width('90%')\n      \n      // 使用Flex布局，使两个Checkbox类型的Toggle组件在水平方向上均匀分布\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) {\n        // 第一个Checkbox类型的Toggle组件，初始状态为关闭\n        Toggle({ type: ToggleType.Checkbox, isOn: false })\n          .size({ width: 20, height: 20 }) // 设置组件的大小\n          .selectedColor('#007DFF') // 设置选中状态的颜色\n          .onChange((isOn: boolean) => {\n            console.info('Component status:' + isOn) // 当状态改变时，输出当前状态\n          })\n\n        // 第二个Checkbox类型的Toggle组件，初始状态为开启\n        Toggle({ type: ToggleType.Checkbox, isOn: true })\n          .size({ width: 20, height: 20 }) // 设置组件的大小\n          .selectedColor('#007DFF') // 设置选中状态的颜色\n          .onChange((isOn: boolean) => {\n            console.info('Component status:' + isOn) // 当状态改变时，输出当前状态\n          })\n      }\n\n      // 设置文本样式，用于描述下面的Toggle组件类型\n      Text('type: Button').fontSize(12).fontColor(0xcccccc).width('90%')\n      \n      // 使用Flex布局，使两个Button类型的Toggle组件在水平方向上均匀分布\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) {\n        // 第一个Button类型的Toggle组件，初始状态为关闭\n        Toggle({ type: ToggleType.Button, isOn: false }) {\n          Text('status button').fontColor('#182431').fontSize(12) // 设置按钮上的文本\n        }.width(106) // 设置组件的宽度\n        .selectedColor('rgba(0,125,255,0.20)') // 设置选中状态的颜色\n        .onChange((isOn: boolean) => {\n          console.info('Component status:' + isOn) // 当状态改变时，输出当前状态\n        })\n\n        // 第二个Button类型的Toggle组件，初始状态为开启\n        Toggle({ type: ToggleType.Button, isOn: true }) {\n          Text('status button').fontColor('#182431').fontSize(12) // 设置按钮上的文本\n        }.width(106) // 设置组件的宽度\n        .selectedColor('rgba(0,125,255,0.20)') // 设置选中状态的颜色\n        .onChange((isOn: boolean) => {\n          console.info('Component status:' + isOn) // 当状态改变时，输出当前状态\n        })\n      }\n    }.width('100%').padding(24) // 设置列的宽度和内边距\n  }\n}"
        }
    ],
    "TextInput": [
        {
            "description": "实现一个包含两个TextInput组件的页面，展示如何在下划线开启时，设置下划线的颜色。第一个TextInput组件展示了如何根据不同的状态（正常、输入中、错误、禁用）设置不同的下划线颜色。第二个TextInput组件展示了如何设置单一的下划线颜色。",
            "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column() {\n        // 创建一个TextInput组件，并设置提示文本内容\n        TextInput({placeholder:'提示文本内容'})\n          // 开启下划线显示\n          .showUnderline(true)\n          // 设置下划线颜色，根据不同的状态（正常、输入中、错误、禁用）设置不同的颜色\n          .underlineColor({normal:Color.Orange, typing:Color.Green, error:Color.Red, disable:Color.Gray});\n        \n        // 创建另一个TextInput组件，并设置提示文本内容\n        TextInput({placeholder:'提示文本内容'})\n          // 开启下划线显示\n          .showUnderline(true)\n          // 设置下划线颜色为单一的灰色\n          .underlineColor(Color.Gray);\n      }\n      // 设置Column的宽度为100%\n      .width('100%')\n    }\n    // 设置Row的高度为100%\n    .height('100%')\n  }\n}"
        },
        {
            "description": "实现一个文本输入组件，对比了使用fontFeature属性ss01开启和关闭的效果。通过两个TextInput组件展示不同设置下的字体特征变化。",
            "code": "@Entry\n@Component\nstruct textInput {\n  @State text1: string = 'This is ss01 on : 0123456789' // 定义第一个文本内容，表示ss01开启\n  @State text2: string = 'This is ss01 off: 0123456789' // 定义第二个文本内容，表示ss01关闭\n\n  build() {\n    Column(){\n      TextInput({text: this.text1}) // 创建第一个文本输入组件，显示text1内容\n        .fontSize(20) // 设置字体大小为20\n        .margin({top:200}) // 设置顶部外边距为200\n        .fontFeature(\"\\\\\"ss01\\\\\" on\") // 开启ss01字体特征\n      TextInput({text : this.text2}) // 创建第二个文本输入组件，显示text2内容\n        .margin({top:10}) // 设置顶部外边距为10\n        .fontSize(20) // 设置字体大小为20\n        .fontFeature(\"\\\\\"ss01\\\\\" off\") // 关闭ss01字体特征\n    }\n    .width(\"90%\") // 设置列的宽度为90%\n    .margin(\"5%\") // 设置列的外边距为5%\n  }\n}"
        },
        {
            "description": "实现一个带有取消按钮的文本输入框组件。文本输入框支持自定义取消按钮的样式和图标，并且当用户输入内容时，输入的内容会被实时更新到状态变量中。",
            "code": "@Entry\n@Component\nstruct ClearNodeExample {\n  // 定义一个状态变量 text，用于存储用户输入的文本内容\n  @State text: string = ''\n  \n  // 创建一个 TextInputController 实例，用于控制 TextInput 组件的行为\n  controller: TextInputController = new TextInputController()\n\n  build() {\n    Column() {\n      // 创建一个 TextInput 组件，设置占位符为 'input ...'，并使用上面定义的 controller 进行控制\n      TextInput({ placeholder: 'input ...', controller: this.controller })\n        .width(380) // 设置文本输入框的宽度为 380 像素\n        .height(60) // 设置文本输入框的高度为 60 像素\n        .cancelButton({\n          // 设置取消按钮的样式为常量样式（即始终显示取消按钮）\n          style: CancelButtonStyle.CONSTANT,\n          icon: {\n            // 设置取消按钮图标的大小为 45 像素\n            size: 45,\n            // 设置取消按钮图标的来源为应用资源中的图标\n            src: $r('app.media.icon'),\n            // 设置取消按钮图标的颜色为蓝色\n            color: Color.Blue\n          }\n        })\n        // 当文本输入框的内容发生变化时，触发 onChange 事件，更新状态变量 text\n        .onChange((value: string) => {\n          this.text = value\n        })\n    }\n  }\n}"
        },
        {
            "description": "实现一个带有计数器的文本输入框组件，支持显示输入字符的计数，并在输入字符达到最大长度的一半时高亮显示计数器。",
            "code": "@Entry\n@Component\nstruct TextInputExample {\n  @State text: string = '' // 定义一个状态变量 text，用于存储用户输入的文本\n  controller: TextInputController = new TextInputController() // 创建一个 TextInputController 实例，用于控制 TextInput 组件的行为\n\n  build() {\n    Column() {\n      TextInput({ text: this.text, controller: this.controller }) // 创建一个 TextInput 组件，绑定 text 状态变量和 controller\n        .placeholderFont({ size: 16, weight: 400 }) // 设置占位符文本的字体大小和粗细\n        .width(336) // 设置 TextInput 组件的宽度为 336 像素\n        .height(56) // 设置 TextInput 组件的高度为 56 像素\n        .maxLength(6) // 设置 TextInput 组件的最大输入长度为 6 个字符\n        .showUnderline(true) // 显示 TextInput 组件的下划线\n        .showCounter(true, { thresholdPercentage: 50, highlightBorder: true }) // 显示计数器，并在输入字符达到最大长度的一半时高亮显示计数器\n\n        .onChange((value: string) => { // 监听 TextInput 的输入变化事件\n          this.text = value // 将输入的值赋给 text 状态变量\n        })\n    }.width('100%').height('100%').backgroundColor('#F1F3F5') // 设置 Column 容器的宽度、高度和背景颜色\n  }\n}"
        },
        {
            "description": "实现一个自定义键盘的TextInput组件示例。该示例展示了如何通过TextInput组件绑定自定义键盘，并通过自定义键盘输入内容到TextInput中。",
            "code": "@Entry\n@Component\nstruct TextInputExample {\n  // 创建一个TextInputController实例，用于控制TextInput的行为\n  controller: TextInputController = new TextInputController()\n  \n  // 定义一个状态变量inputValue，用于存储TextInput的输入值\n  @State inputValue: string = \"\"\n\n  // 自定义键盘的构建器，用于生成自定义键盘的UI\n  @Builder CustomKeyboardBuilder() {\n    Column() {\n      // 创建一个按钮，点击后停止编辑TextInput\n      Button('x').onClick(() => {\n        this.controller.stopEditing()\n      })\n      \n      // 创建一个Grid布局，用于放置键盘的按键\n      Grid() {\n        // 使用ForEach循环生成键盘的按键\n        ForEach([1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'], (item: number | string) => {\n          GridItem() {\n            // 创建一个按钮，按钮的文本为当前循环的item\n            Button(item + \"\")\n              .width(110) // 设置按钮的宽度\n              .onClick(() => {\n                // 点击按钮时，将item添加到inputValue中\n                this.inputValue += item\n              })\n          }\n        })\n      }\n      .maxCount(3) // 设置Grid的最大列数为3\n      .columnsGap(10) // 设置列之间的间距\n      .rowsGap(10) // 设置行之间的间距\n      .padding(5) // 设置Grid的内边距\n    }\n    .backgroundColor(Color.Gray) // 设置自定义键盘的背景颜色为灰色\n  }\n\n  build() {\n    Column() {\n      // 创建一个TextInput组件，绑定controller和inputValue\n      TextInput({ controller: this.controller, text: this.inputValue })\n        .customKeyboard(this.CustomKeyboardBuilder()) // 设置自定义键盘为CustomKeyboardBuilder生成的键盘\n        .margin(10) // 设置TextInput的外边距\n        .border({ width: 1 }) // 设置TextInput的边框宽度\n        .height('48vp') // 设置TextInput的高度\n    }\n  }\n}"
        },
        {
            "description": "实现一个包含两个TextInput组件的示例，分别展示输入框的插入和删除回调功能。\n第一个TextInput组件支持插入回调，第二个TextInput组件支持删除回调。\n通过回调函数获取插入和删除的文本内容、插入和删除的位置以及删除的方向，并将这些信息显示在界面上。",
            "code": "@Entry\n@Component\nstruct TextInputExample {\n  // 用于存储插入的文本内容\n  @State insertValue: string = \"\"\n  // 用于存储删除的文本内容\n  @State deleteValue: string = \"\"\n  // 用于存储插入的位置\n  @State insertOffset: number = 0\n  // 用于存储删除的位置\n  @State deleteOffset: number = 0\n  // 用于存储删除的方向，0表示向后删除，1表示向前删除\n  @State deleteDirection: number = 0\n\n  build() {\n    Row() {\n      Column() {\n        // 第一个TextInput组件，支持插入回调\n        TextInput({ text: \"TextInput支持插入回调文本\" })\n          .height(60)\n          // 插入前的回调函数，获取插入的文本内容\n          .onWillInsert((info: InsertValue) => {\n            this.insertValue = info.insertValue\n            return true;\n          })\n          // 插入后的回调函数，获取插入的位置\n          .onDidInsert((info: InsertValue) => {\n            this.insertOffset = info.insertOffset\n          })\n\n        // 显示插入的文本内容和插入的位置\n        Text(\"insertValue:\" + this.insertValue + \"  insertOffset:\" + this.insertOffset).height(30)\n\n        // 第二个TextInput组件，支持删除回调\n        TextInput({ text: \"TextInput支持删除回调文本b\" })\n          .height(60)\n          // 删除前的回调函数，获取删除的文本内容和删除的方向\n          .onWillDelete((info: DeleteValue) => {\n            this.deleteValue = info.deleteValue\n            info.direction\n            return true;\n          })\n          // 删除后的回调函数，获取删除的位置和删除的方向\n          .onDidDelete((info: DeleteValue) => {\n            this.deleteOffset = info.deleteOffset\n            this.deleteDirection = info.direction\n          })\n\n        // 显示删除的文本内容和删除的位置\n        Text(\"deleteValue:\" + this.deleteValue + \"  deleteOffset:\" + this.deleteOffset).height(30)\n        // 显示删除的方向，0表示向后删除，1表示向前删除\n        Text(\"deleteDirection:\" + (this.deleteDirection == 0 ? \"BACKWARD\" : \"FORWARD\")).height(30)\n\n      }.width('100%')\n    }\n    .height('100%')\n  }\n}"
        },
        {
            "description": "实现一个文本输入框组件，展示不同高度自适应策略对文本显示的影响。通过设置minFontSize、maxFontSize和heightAdaptivePolicy属性，控制文本在输入框内的自适应显示方式。",
            "code": "@Entry\n@Component\nstruct TextInputExample {\n  build() {\n    Row() {\n      Column() {\n        // 显示标题，说明当前展示的是高度自适应策略\n        Text('heightAdaptivePolicy').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 第一个文本输入框，未设置高度自适应策略\n        TextInput({text: 'This is the text without the height adaptive policy set'})\n          .width('80%').height(50).borderWidth(1).margin(1)\n        \n        // 第二个文本输入框，设置高度自适应策略为MAX_LINES_FIRST\n        TextInput({text: 'This is the text with the height adaptive policy set'})\n          .width('80%').height(50).borderWidth(1).margin(1)\n          .minFontSize(4) // 设置最小字体大小为4\n          .maxFontSize(40) // 设置最大字体大小为40\n          .maxLines(3) // 设置最大行数为3\n          .heightAdaptivePolicy(TextHeightAdaptivePolicy.MAX_LINES_FIRST) // 高度自适应策略为优先适应最大行数\n        \n        // 第三个文本输入框，设置高度自适应策略为MIN_FONT_SIZE_FIRST\n        TextInput({text: 'This is the text with the height adaptive policy set'})\n          .width('80%').height(50).borderWidth(1).margin(1)\n          .minFontSize(4) // 设置最小字体大小为4\n          .maxFontSize(40) // 设置最大字体大小为40\n          .maxLines(3) // 设置最大行数为3\n          .heightAdaptivePolicy(TextHeightAdaptivePolicy.MIN_FONT_SIZE_FIRST) // 高度自适应策略为优先适应最小字体大小\n        \n        // 第四个文本输入框，设置高度自适应策略为LAYOUT_CONSTRAINT_FIRST\n        TextInput({text: 'This is the text with the height adaptive policy set'})\n          .width('80%').height(50).borderWidth(1).margin(1)\n          .minFontSize(4) // 设置最小字体大小为4\n          .maxFontSize(40) // 设置最大字体大小为40\n          .maxLines(3) // 设置最大行数为3\n          .heightAdaptivePolicy(TextHeightAdaptivePolicy.LAYOUT_CONSTRAINT_FIRST) // 高度自适应策略为优先适应布局约束\n      }.height('90%')\n    }\n    .width('90%')\n    .margin(10)\n  }\n}"
        },
        {
            "description": "实现一个自定义键盘弹出时发生避让的示例。该示例包含一个自定义键盘，用户可以通过点击按钮来切换输入框的高度，并且键盘弹出时会自动避让输入框，避免遮挡。",
            "code": "@Entry\n@Component\nstruct Input {\n  // 创建一个TextInputController实例，用于控制TextInput组件的行为\n  controller: TextInputController = new TextInputController()\n  \n  // 定义一个状态变量inputValue，用于存储输入框的文本内容\n  @State inputValue: string = \"\"\n  \n  // 定义一个状态变量height1，用于控制输入框的高度，初始值为80%\n  @State height1: string | number = '80%'\n  \n  // 定义一个状态变量supportAvoidance，用于控制是否支持键盘避让功能，初始值为true\n  @State supportAvoidance: boolean = true;\n\n  // 自定义键盘的构建器，用于生成自定义键盘的UI\n  @Builder CustomKeyboardBuilder() {\n    Column() {\n      Row() {\n        // 创建一个按钮，点击后停止编辑\n        Button('x').onClick(() => {\n          this.controller.stopEditing()\n        }).margin(10)\n      }\n      Grid() {\n        // 使用ForEach循环生成数字和符号按钮\n        ForEach([1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'], (item: number | string) => {\n          GridItem() {\n            // 创建一个按钮，点击后将对应的数字或符号添加到输入框中\n            Button(item + \"\").width(110).onClick(() => {\n              this.inputValue += item\n            })\n          }\n        })\n      }.maxCount(3).columnsGap(10).rowsGap(10).padding(5)\n    }.backgroundColor(Color.Gray)\n  }\n\n  build() {\n    Column() {\n      Row() {\n        // 创建一个按钮，点击后将输入框高度设置为20%\n        Button(\"20%\").fontSize(24).onClick(() => {\n          this.height1 = \"20%\"\n        })\n        // 创建一个按钮，点击后将输入框高度设置为80%\n        Button(\"80%\").fontSize(24).margin({ left: 20 }).onClick(() => {\n          this.height1 = \"80%\"\n        })\n      }\n      .justifyContent(FlexAlign.Center)\n      .alignItems(VerticalAlign.Bottom)\n      .height(this.height1) // 设置Row的高度为height1\n      .width(\"100%\")\n      .padding({ bottom: 50 })\n\n      // 创建一个TextInput组件，使用自定义键盘，并支持键盘避让功能\n      TextInput({ controller: this.controller, text: this.inputValue })\n        .customKeyboard(this.CustomKeyboardBuilder(), { supportAvoidance: this.supportAvoidance })\n        .margin(10)\n        .border({ width: 1 })\n    }\n  }\n}"
        },
        {
            "description": "实现一个展示不同wordBreak属性的TextInput样式的示例。通过设置不同的wordBreak属性，展示TextInput组件在不同换行策略下的表现。",
            "code": "@Entry\n@Component\nstruct TextInputExample {\n  build() {\n    Column() {\n      // 展示TextInput为inline模式，WordBreakType属性为NORMAL的样式\n      Text(\"TextInput为inline模式，WordBreakType属性为NORMAL的样式：\").fontSize(16).fontColor(0xFF0000)\n      TextInput({\n        text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'\n      })\n        .fontSize(16) // 设置字体大小为16\n        .style(TextInputStyle.Inline) // 设置TextInput的样式为inline模式\n        .wordBreak(WordBreak.NORMAL) // 设置wordBreak属性为NORMAL，即按照正常单词边界换行\n\n      // 展示TextInput为inline模式，英文文本，WordBreakType属性为BREAK_ALL的样式\n      Text(\"TextInput为inline模式，英文文本，WordBreakType属性为BREAK_ALL的样式：\").fontSize(16).fontColor(0xFF0000)\n      TextInput({\n        text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'\n      })\n        .fontSize(16) // 设置字体大小为16\n        .style(TextInputStyle.Inline) // 设置TextInput的样式为inline模式\n        .wordBreak(WordBreak.BREAK_ALL) // 设置wordBreak属性为BREAK_ALL，即允许在单词内换行\n\n      // 展示TextInput为inline模式，中文文本，WordBreakType属性为BREAK_ALL的样式\n      Text(\"TextInput为inline模式，中文文本，WordBreakType属性为BREAK_ALL的样式：\").fontSize(16).fontColor(0xFF0000)\n      TextInput({\n        text: '多行文本输入框组件，当输入的文本内容超过组件宽度时会自动换行显示。\\\n高度未设置时，组件无默认高度，自适应内容高度。宽度未设置时，默认撑满最大宽度。'\n      })\n        .fontSize(16) // 设置字体大小为16\n        .style(TextInputStyle.Inline) // 设置TextInput的样式为inline模式\n        .wordBreak(WordBreak.BREAK_ALL) // 设置wordBreak属性为BREAK_ALL，即允许在单词内换行\n\n      // 展示TextInput为inline模式，WordBreakType属性为BREAK_WORD的样式\n      Text(\"TextInput为inline模式，WordBreakType属性为BREAK_WORD的样式：\").fontSize(16).fontColor(0xFF0000)\n      TextInput({\n        text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'\n      })\n        .fontSize(16) // 设置字体大小为16\n        .style(TextInputStyle.Inline) // 设置TextInput的样式为inline模式\n        .wordBreak(WordBreak.BREAK_WORD) // 设置wordBreak属性为BREAK_WORD，即尽量在单词边界换行，必要时在单词内换行\n    }\n  }\n}"
        },
        {
            "description": "实现一个展示不同换行策略效果的示例组件。通过设置不同的lineBreakStrategy，展示在相同文本内容和布局条件下，不同换行策略对文本显示效果的影响。",
            "code": "@Entry\n@Component\nstruct TextExample1 {\n  // 定义一个状态变量message1，用于存储示例文本内容\n  @State message1: string = \"They can be classified as built-in components–those directly provided by the ArkUI framework and custom components – those defined by developers\" +\n    \"The built-in components include buttons radio buttonsprogress indicators and text You can set the rendering effectof thesecomponents in method chaining mode,\" +\n    \"page components are divided into independent UI units to implementindependent creation development and reuse of different units on pages making pages more engineering-oriented.\";\n\n  build() {\n    // 使用Flex布局，方向为列布局，子元素左对齐\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start }) {\n      // 显示标题，说明当前展示的换行策略为GREEDY\n      Text('LineBreakStrategy.GREEDY').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n      // 创建一个TextInput组件，显示message1的内容，并设置换行策略为GREEDY\n      TextInput({text: this.message1})\n        .fontSize(12) // 设置字体大小\n        .border({ width: 1 }) // 设置边框宽度\n        .padding(10) // 设置内边距\n        .width('100%') // 设置宽度为父容器的100%\n        .maxLines(5) // 设置最大行数为5\n        .style(TextInputStyle.Inline) // 设置TextInput的样式为Inline\n        .lineBreakStrategy(LineBreakStrategy.GREEDY) // 设置换行策略为GREEDY\n\n      // 显示标题，说明当前展示的换行策略为HIGH_QUALITY\n      Text('LineBreakStrategy.HIGH_QUALITY').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n      // 创建一个TextInput组件，显示message1的内容，并设置换行策略为HIGH_QUALITY\n      TextInput({text: this.message1})\n        .fontSize(12)\n        .border({ width: 1 })\n        .padding(10)\n        .width('100%')\n        .maxLines(5)\n        .style(TextInputStyle.Inline)\n        .lineBreakStrategy(LineBreakStrategy.HIGH_QUALITY) // 设置换行策略为HIGH_QUALITY\n\n      // 显示标题，说明当前展示的换行策略为BALANCED\n      Text('LineBreakStrategy.BALANCED').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n      // 创建一个TextInput组件，显示message1的内容，并设置换行策略为BALANCED\n      TextInput({text: this.message1})\n        .fontSize(12)\n        .border({ width: 1 })\n        .padding(10)\n        .width('100%')\n        .maxLines(5)\n        .style(TextInputStyle.Inline)\n        .lineBreakStrategy(LineBreakStrategy.BALANCED) // 设置换行策略为BALANCED\n    }\n    .height(700) // 设置Flex容器的高度\n    .width(370) // 设置Flex容器的宽度\n    .padding({ left: 35, right: 35, top: 35 }) // 设置Flex容器的内边距\n  }\n}"
        },
        {
            "description": "实现一个包含多个TextInput组件的示例，展示了密码输入框的自定义图标、下划线样式、错误提示、单位选择以及用户名输入验证功能。",
            "code": "@Entry\n@Component\nstruct TextInputExample {\n  // 定义密码输入框的图标资源\n  @State PassWordSrc1: Resource = $r('app.media.onIcon') // 密码可见时的图标\n  @State PassWordSrc2: Resource = $r('app.media.offIcon') // 密码不可见时的图标\n  @State TextError: string = '' // 错误提示文本\n  @State Text: string = '' // 用户输入的文本\n  @State NameText: string = 'test' // 用户名验证的标准文本\n\n  // 定义一个Builder方法，用于生成单位选择组件\n  @Builder itemEnd() {\n    Select([{ value: 'KB' },\n      { value: 'MB' },\n      { value: 'GB' },\n      { value: 'TB', }])\n      .height(\"48vp\") // 设置高度\n      .borderRadius(0) // 设置边框圆角\n      .selected(2) // 设置默认选中项\n      .align(Alignment.Center) // 设置对齐方式\n      .value('MB') // 设置默认值\n      .font({ size: 20, weight: 500 }) // 设置字体样式\n      .fontColor('#182431') // 设置字体颜色\n      .selectedOptionFont({ size: 20, weight: 400 }) // 设置选中项字体样式\n      .optionFont({ size: 20, weight: 400 }) // 设置选项字体样式\n      .backgroundColor(Color.Transparent) // 设置背景颜色\n      .responseRegion({ height: \"40vp\", width: \"80%\", x: '10%', y: '6vp' }) // 设置响应区域\n      .onSelect((index: number) => {\n        console.info('Select:' + index) // 选择事件回调\n      })\n  }\n\n  build() {\n    Column({ space: 20 }) {\n\n      // 第一个TextInput组件，展示自定义密码图标\n      TextInput({ placeholder: 'user define password icon' })\n        .type(InputType.Password) // 设置输入类型为密码\n        .width(380) // 设置宽度\n        .height(60) // 设置高度\n        .passwordIcon({ onIconSrc: this.PassWordSrc1, offIconSrc: this.PassWordSrc2 }) // 设置密码图标\n\n      // 第二个TextInput组件，展示下划线样式、错误提示和单位选择\n      TextInput({ placeholder: 'underline style' })\n        .showUnderline(true) // 显示下划线\n        .width(380) // 设置宽度\n        .height(60) // 设置高度\n        .showError('Error') // 显示错误提示\n        .showUnit(this.itemEnd) // 显示单位选择组件\n\n      // 显示用户名输入的文本\n      Text(`用户名：${this.Text}`)\n        .width('95%') // 设置宽度\n\n      // 第三个TextInput组件，用于输入用户名，并进行验证\n      TextInput({ placeholder: '请输入用户名', text: this.Text })\n        .showUnderline(true) // 显示下划线\n        .width(380) // 设置宽度\n        .showError(this.TextError) // 显示错误提示\n        .onChange((value: string) => {\n          this.Text = value // 输入内容变化时更新状态\n        })\n        .onSubmit((enterKey: EnterKeyType, event: SubmitEvent) => {\n          if (this.Text == this.NameText) { // 验证用户名是否正确\n            this.TextError = '' // 清除错误提示\n          } else {\n            this.TextError = '用户名输入错误' // 显示错误提示\n            this.Text = '' // 清空输入内容\n            event.keepEditableState() // 保持输入框的可编辑状态\n          }\n        })\n\n    }.width('100%') // 设置Column的宽度\n  }\n}"
        },
        {
            "description": "实现一个带有自定义编辑菜单的文本输入组件。该组件允许用户自定义编辑菜单的选项，包括修改现有选项的文本内容和图标，以及添加新的自定义选项。此外，组件还支持拦截特定菜单项的点击事件，并根据需要进行处理。",
            "code": "@Entry\n@Component\nstruct TextInputExample {\n  @State text: string = 'TextInput editMenuOptions' // 初始化文本输入框的默认文本内容\n\n  // 自定义编辑菜单的创建方法\n  onCreateMenu(menuItems: Array<TextMenuItem>) {\n    menuItems.forEach((value, index) => {\n      value.icon = $r('app.media.startIcon') // 为每个菜单项设置相同的图标\n      if (value.id.equals(TextMenuItemId.COPY)) {\n        value.content = \"复制change\" // 修改“复制”菜单项的文本内容\n      }\n      if (value.id.equals(TextMenuItemId.SELECT_ALL)) {\n        value.content = \"全选change\" // 修改“全选”菜单项的文本内容\n      }\n    })\n    let item1: TextMenuItem = {\n      content: 'custom1', // 自定义菜单项1的文本内容\n      icon: $r('app.media.startIcon'), // 自定义菜单项1的图标\n      id: TextMenuItemId.of('custom1'), // 自定义菜单项1的唯一标识符\n    }\n    let item2: TextMenuItem = {\n      content: 'custom2', // 自定义菜单项2的文本内容\n      id: TextMenuItemId.of('custom2'), // 自定义菜单项2的唯一标识符\n      icon: $r('app.media.startIcon'), // 自定义菜单项2的图标\n    }\n    menuItems.push(item1) // 将自定义菜单项1添加到菜单项列表的末尾\n    menuItems.unshift(item2) // 将自定义菜单项2添加到菜单项列表的开头\n    return menuItems // 返回修改后的菜单项列表\n  }\n\n  build() {\n    Column() {\n      TextInput({ text: this.text }) // 创建一个文本输入组件，初始文本为@State变量text的值\n        .width('95%') // 设置文本输入框的宽度为父容器的95%\n        .height(50) // 设置文本输入框的高度为50像素\n        .editMenuOptions({\n          onCreateMenu: this.onCreateMenu, // 设置自定义编辑菜单的创建方法\n          onMenuItemClick: (menuItem: TextMenuItem, textRange: TextRange) => { // 设置菜单项点击事件的回调方法\n            if (menuItem.id.equals(TextMenuItemId.of(\"custom2\"))) {\n              console.log(\"拦截 id: custom2 start:\" + textRange.start + \"; end:\" + textRange.end) // 拦截并打印自定义菜单项2的点击事件\n              return true; // 返回true表示拦截该事件\n            }\n            if (menuItem.id.equals(TextMenuItemId.COPY)) {\n              console.log(\"拦截 COPY start:\" + textRange.start + \"; end:\" + textRange.end) // 拦截并打印“复制”菜单项的点击事件\n              return true; // 返回true表示拦截该事件\n            }\n            if (menuItem.id.equals(TextMenuItemId.SELECT_ALL)) {\n              console.log(\"不拦截 SELECT_ALL start:\" + textRange.start + \"; end:\" + textRange.end) // 打印“全选”菜单项的点击事件，但不拦截\n              return false; // 返回false表示不拦截该事件\n            }\n            return false; // 默认返回false，不拦截其他菜单项的点击事件\n          }\n        })\n        .margin({ top: 100 }) // 设置文本输入框的上外边距为100像素\n    }\n    .width(\"90%\") // 设置Column容器的宽度为父容器的90%\n    .margin(\"5%\") // 设置Column容器的左右外边距为父容器的5%\n  }\n}"
        },
        {
            "description": "实现一个包含多个TextInput组件的示例，展示了TextInput的基本使用方法，包括文本输入、密码输入、邮箱输入以及自定义样式和控制光标位置等功能。",
            "code": "@Entry\n@Component\nstruct TextInputExample {\n  // 定义一个状态变量text，用于存储用户输入的文本\n  @State text: string = ''\n  \n  // 定义一个状态变量positionInfo，用于存储光标的位置信息\n  @State positionInfo: CaretOffset = { index: 0, x: 0, y: 0 }\n  \n  // 定义一个状态变量passwordState，用于控制密码输入框的显示状态\n  @State passwordState: boolean = false\n  \n  // 创建一个TextInputController实例，用于控制TextInput组件的行为\n  controller: TextInputController = new TextInputController()\n\n  build() {\n    Column() {\n      // 创建一个TextInput组件，用于输入普通文本\n      TextInput({ text: this.text, placeholder: 'input your word...', controller: this.controller })\n        .placeholderColor(Color.Grey) // 设置占位符文本的颜色为灰色\n        .placeholderFont({ size: 14, weight: 400 }) // 设置占位符文本的字体大小和粗细\n        .caretColor(Color.Blue) // 设置光标的颜色为蓝色\n        .width('95%') // 设置组件的宽度为父容器的95%\n        .height(40) // 设置组件的高度为40\n        .margin(20) // 设置组件的外边距为20\n        .fontSize(14) // 设置输入文本的字体大小为14\n        .fontColor(Color.Black) // 设置输入文本的颜色为黑色\n        .inputFilter('\\[a-z\\]', (e) => { // 设置输入过滤器，只允许输入小写字母\n          console.log(JSON.stringify(e)) // 打印过滤事件的详细信息\n        })\n        .onChange((value: string) => { // 监听输入文本的变化事件\n          this.text = value // 更新状态变量text的值\n        })\n      \n      // 显示用户输入的文本\n      Text(this.text)\n      \n      // 创建一个按钮，点击后将光标移动到输入框的第一个字符位置\n      Button('Set caretPosition 1')\n        .margin(15) // 设置按钮的外边距为15\n        .onClick(() => {\n          this.controller.caretPosition(1) // 设置光标位置为1\n        })\n      \n      // 创建一个按钮，点击后获取光标的位置信息\n      Button('Get CaretOffset')\n        .margin(15) // 设置按钮的外边距为15\n        .onClick(() => {\n          this.positionInfo = this.controller.getCaretOffset() // 获取光标的位置信息并更新状态变量positionInfo\n        })\n\n      // 创建一个TextInput组件，用于输入密码\n      TextInput({ placeholder: 'input your password...' })\n        .width('95%') // 设置组件的宽度为父容器的95%\n        .height(40) // 设置组件的高度为40\n        .margin(20) // 设置组件的外边距为20\n        .type(InputType.Password) // 设置输入类型为密码\n        .maxLength(9) // 设置最大输入长度为9\n        .showPasswordIcon(true) // 显示密码可见性图标\n        .showPassword(this.passwordState) // 根据passwordState状态变量控制密码的可见性\n        .onSecurityStateChange(((isShowPassword: boolean) => { // 监听密码可见性状态的变化事件\n          console.info('isShowPassword', isShowPassword) // 打印密码可见性状态\n          this.passwordState = isShowPassword // 更新状态变量passwordState的值\n        }))\n\n      // 创建一个TextInput组件，用于输入邮箱地址\n      TextInput({ placeholder: 'input your email...' })\n        .width('95%') // 设置组件的宽度为父容器的95%\n        .height(40) // 设置组件的高度为40\n        .margin(20) // 设置组件的外边距为20\n        .contentType(ContentType.EMAIL_ADDRESS) // 设置输入内容类型为邮箱地址\n        .maxLength(9) // 设置最大输入长度为9\n\n      // 创建一个TextInput组件，用于展示内联样式\n      TextInput({ text: 'inline style' })\n        .width('95%') // 设置组件的宽度为父容器的95%\n        .height(50) // 设置组件的高度为50\n        .margin(20) // 设置组件的外边距为20\n        .borderRadius(0) // 设置边框圆角为0\n        .style(TextInputStyle.Inline) // 设置输入框样式为内联样式\n    }.width('100%') // 设置Column组件的宽度为父容器的100%\n  }\n}"
        },
        {
            "description": "实现一个文本输入框示例，展示如何使用lineHeight设置文本行高，使用letterSpacing设置文本字符间距，使用decoration设置文本装饰线样式。",
            "code": "@Entry\n@Component\nstruct TextInputExample {\n  build() {\n    Row() {\n      Column() {\n        // 显示标题 \"lineHeight\"，字体大小为9，颜色为灰色\n        Text('lineHeight').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 创建一个文本输入框，显示默认行高的文本\n        TextInput({text: 'lineHeight unset'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(10) // 设置内边距为10\n          .margin(5) // 设置外边距为5\n        \n        // 创建一个文本输入框，设置行高为15\n        TextInput({text: 'lineHeight 15'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(10) // 设置内边距为10\n          .margin(5) // 设置外边距为5\n          .lineHeight(15) // 设置行高为15\n        \n        // 创建一个文本输入框，设置行高为30\n        TextInput({text: 'lineHeight 30'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(10) // 设置内边距为10\n          .margin(5) // 设置外边距为5\n          .lineHeight(30) // 设置行高为30\n\n        // 显示标题 \"letterSpacing\"，字体大小为9，颜色为灰色\n        Text('letterSpacing').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 创建一个文本输入框，设置字符间距为0\n        TextInput({text: 'letterSpacing 0'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .letterSpacing(0) // 设置字符间距为0\n        \n        // 创建一个文本输入框，设置字符间距为3\n        TextInput({text: 'letterSpacing 3'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .letterSpacing(3) // 设置字符间距为3\n        \n        // 创建一个文本输入框，设置字符间距为-1\n        TextInput({text: 'letterSpacing -1'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .letterSpacing(-1) // 设置字符间距为-1\n\n        // 显示标题 \"decoration\"，字体大小为9，颜色为灰色\n        Text('decoration').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 创建一个文本输入框，设置装饰线为贯穿线，颜色为红色\n        TextInput({text: 'LineThrough, Red'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .decoration({type: TextDecorationType.LineThrough, color: Color.Red}) // 设置装饰线为贯穿线，颜色为红色\n        \n        // 创建一个文本输入框，设置装饰线为上划线，颜色为红色，样式为虚线\n        TextInput({text: 'Overline, Red, DASHED'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .decoration({type: TextDecorationType.Overline, color: Color.Red, style: TextDecorationStyle.DASHED}) // 设置装饰线为上划线，颜色为红色，样式为虚线\n        \n        // 创建一个文本输入框，设置装饰线为下划线，颜色为红色，样式为波浪线\n        TextInput({text: 'Underline, Red, WAVY'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .decoration({type: TextDecorationType.Underline, color: Color.Red, style: TextDecorationStyle.WAVY}) // 设置装饰线为下划线，颜色为红色，样式为波浪线\n      }\n      .height('90%') // 设置列的高度为父容器的90%\n    }\n    .width('90%') // 设置行的宽度为父容器的90%\n    .margin(10) // 设置行的外边距为10\n  }\n}"
        },
        {
            "description": "实现一个电话号码输入框，能够自动将输入的电话号码格式化为XXX XXXX XXXX的格式。\n支持光标位置的自动调整，确保用户输入体验流畅。",
            "code": "@Entry\n@Component\nstruct phone_example {\n  // 存储用户提交的电话号码\n  @State submitValue: string = ''\n  // 存储当前输入的电话号码\n  @State text: string = ''\n  // 电话号码的最大长度（包括空格）\n  public readonly NUM_TEXT_MAXSIZE_LENGTH = 13\n  // 存储去除空格后的电话号码\n  @State teleNumberNoSpace: string = \"\"\n  // 存储下一个光标位置\n  @State nextCaret: number = -1 \n  // 存储实际的字符位置\n  @State actualCh: number = -1 \n  // 存储上一次的光标起始位置\n  @State lastCaretPosition: number = 0\n  // 存储上一次的光标结束位置\n  @State lastCaretPositionEnd: number = 0\n  // 文本输入框的控制器\n  controller: TextInputController = new TextInputController()\n\n  // 检查字符串是否为空\n  isEmpty(str?: string): boolean {\n    return str == 'undefined' || !str || !new RegExp(\"[^\\s]\").test(str)\n  }\n\n  // 检查是否需要添加空格\n  checkNeedNumberSpace(numText: string) {\n    let isSpace: RegExp = new RegExp('[\\\\+;,#\\\\*]', 'g')\n    let isRule: RegExp = new RegExp('^\\\\+.*')\n\n    if (isSpace.test(numText)) {\n      if (isRule.test(numText)) {\n        return true\n      } else {\n        return false\n      }\n    }\n    return true;\n  }\n\n  // 去除字符串中的空格\n  removeSpace(str: string): string {\n    if (this.isEmpty(str)) {\n      return ''\n    }\n    return str.replace(new RegExp(\"[\\s]\", \"g\"), '')\n  }\n\n  // 设置光标位置\n  setCaret() {\n    if (this.nextCaret != -1) {\n      console.log(\"to keep caret position right, change caret to\", this.nextCaret)\n      this.controller.caretPosition(this.nextCaret)\n      this.nextCaret = -1\n    }\n  }\n\n  // 计算光标位置\n  calcCaretPosition(nextText: string) {\n    let befNumberNoSpace: string = this.removeSpace(this.text)\n    this.actualCh = 0\n    if (befNumberNoSpace.length < this.teleNumberNoSpace.length) { \n      for (let i = 0; i < this.lastCaretPosition; i++) {\n        if (this.text[i] != ' ') {\n          this.actualCh += 1\n        }\n      }\n      this.actualCh += this.teleNumberNoSpace.length - befNumberNoSpace.length\n      console.log(\"actualCh: \" + this.actualCh)\n      for (let i = 0; i < nextText.length; i++) {\n        if (nextText[i] != ' ') {\n          this.actualCh -= 1\n          if (this.actualCh <= 0) {\n            this.nextCaret = i + 1\n            break;\n          }\n        }\n      }\n    } else if (befNumberNoSpace.length > this.teleNumberNoSpace.length) { \n      if (this.lastCaretPosition === this.text.length) {\n        console.log(\"Caret at last, no need to change\")\n      } else if (this.lastCaretPosition === this.lastCaretPositionEnd) {\n        for (let i = this.lastCaretPosition; i < this.text.length; i++) {\n          if (this.text[i] != ' ') {\n            this.actualCh += 1\n          }\n        }\n        for (let i = nextText.length - 1; i >= 0; i--) {\n          if (nextText[i] != ' ') {\n            this.actualCh -= 1\n            if (this.actualCh <= 0) {\n              this.nextCaret = i\n              break;\n            }\n          }\n        }\n      } else {\n        this.nextCaret = this.lastCaretPosition \n      }\n    }\n  }\n\n  build() {\n    Column() {\n      Row() {\n        // 创建一个电话号码输入框\n        TextInput({ text: `${this.text}`, controller: this.controller }).type(InputType.PhoneNumber).height('48vp')\n          .onChange((number: string) => {\n            this.teleNumberNoSpace = this.removeSpace(number);\n            let nextText: string = \"\"\n            if (this.teleNumberNoSpace.length > this.NUM_TEXT_MAXSIZE_LENGTH - 2) {\n              nextText = this.teleNumberNoSpace\n            } else if (this.checkNeedNumberSpace(number)) {\n              if (this.teleNumberNoSpace.length <= 3) {\n                nextText = this.teleNumberNoSpace\n              } else {\n                let split1: string = this.teleNumberNoSpace.substring(0, 3)\n                let split2: string = this.teleNumberNoSpace.substring(3)\n                nextText = split1 + ' ' + split2\n                if (this.teleNumberNoSpace.length > 7) {\n                  split2 = this.teleNumberNoSpace.substring(3, 7)\n                  let split3: string = this.teleNumberNoSpace.substring(7)\n                  nextText = split1 + ' ' + split2 + ' ' + split3\n                }\n              }\n            } else {\n              nextText = number\n            }\n            console.log(\"onChange Triggered:\" + this.text + \"|\" + nextText + \"|\" + number)\n            if (this.text === nextText && nextText === number) {\n              this.setCaret()\n            } else {\n              this.calcCaretPosition(nextText)\n            }\n            this.text = nextText\n          })\n          .onTextSelectionChange((selectionStart, selectionEnd) => {\n            console.log(\"selection change: \", selectionStart, selectionEnd)\n            this.lastCaretPosition = selectionStart\n            this.lastCaretPositionEnd = selectionEnd\n          })\n      }\n    }\n    .width('100%')\n    .height(\"100%\")\n  }\n}"
        }
    ],
    "XComponent": [
        {
            "description": "实现一个包含XComponent组件的界面，支持动态改变XComponent的尺寸、启动和停止图像分析、获取支持的图像分析类型，以及在surface旋转过程中锁定功能的使用。",
            "code": "import { BusinessError } from '@kit.BasicServicesKit';\n\n// 自定义XComponentController类，继承自XComponentController\nclass CustomXComponentController extends XComponentController {\n  // surface创建时的回调函数\n  onSurfaceCreated(surfaceId: string): void {\n    console.log(`onSurfaceCreated surfaceId: ${surfaceId}`)\n  }\n\n  // surface尺寸改变时的回调函数\n  onSurfaceChanged(surfaceId: string, rect: SurfaceRect): void {\n    console.log(`onSurfaceChanged surfaceId: ${surfaceId}, rect: ${JSON.stringify(rect)}}`)\n  }\n\n  // surface销毁时的回调函数\n  onSurfaceDestroyed(surfaceId: string): void {\n    console.log(`onSurfaceDestroyed surfaceId: ${surfaceId}`)\n  }\n}\n\n@Entry\n@Component\nstruct XComponentExample {\n  // 实例化自定义XComponentController\n  xComponentController: XComponentController = new CustomXComponentController()\n\n  // 图像分析配置，包含主体和文本类型\n  private config: ImageAnalyzerConfig = {\n    types: [ImageAnalyzerType.SUBJECT, ImageAnalyzerType.TEXT]\n  }\n\n  // 图像分析控制器实例化\n  private aiController: ImageAnalyzerController = new ImageAnalyzerController()\n\n  // 图像分析选项，包含主体和文本类型，并关联图像分析控制器\n  private options: ImageAIOptions = {\n    types: [ImageAnalyzerType.SUBJECT, ImageAnalyzerType.TEXT],\n    aiController: this.aiController\n  }\n\n  // XComponent宽度状态\n  @State xcWidth: string = \"320px\"\n\n  // XComponent高度状态\n  @State xcHeight: string = \"480px\"\n\n  // 构建函数，定义XComponentExample的UI结构\n  build() {\n    Column({ space: 5 }) {\n      // 按钮：改变尺寸\n      // 点击按钮后，修改XComponent的宽度和高度\n      Button(\"change size\")\n        .onClick(() => {\n          this.xcWidth = \"640px\"\n          this.xcHeight = \"720px\"\n        })\n\n      // 按钮：启动AI分析\n      // 点击按钮后，调用XComponentController的startImageAnalyzer方法启动图像分析\n      // 输出日志记录分析完成信息或错误信息\n      Button('start AI analyze')\n        .onClick(() => {\n          this.xComponentController.startImageAnalyzer(this.config)\n            .then(() => {\n              console.log(\"analysis complete\")\n            })\n            .catch((error: BusinessError) => {\n              console.log(\"error code: \" + error.code)\n            })\n        })\n\n      // 按钮：停止AI分析\n      // 点击按钮后，调用XComponentController的stopImageAnalyzer方法停止图像分析\n      Button('stop AI analyze')\n        .onClick(() => {\n          this.xComponentController.stopImageAnalyzer()\n        })\n\n      // 按钮：获取分析器类型\n      // 点击按钮后，调用ImageAnalyzerController的getImageAnalyzerSupportTypes方法获取支持的分析器类型\n      Button('get analyzer types')\n        .onClick(() => {\n          this.aiController.getImageAnalyzerSupportTypes()\n        })\n\n      // XComponent实例化\n      // 设置类型为SURFACE，关联控制器和选项\n      // 设置宽度和高度为状态值\n      XComponent({\n        type: XComponentType.SURFACE,\n        controller: this.xComponentController,\n        imageAIOptions: this.options\n      })\n        .width(this.xcWidth)\n        .height(this.xcHeight)\n    }\n    .width(\"100%\") // 设置Column的宽度为100%\n  }\n}\n\n// xxx.ets\n@Entry\n@Component\nstruct Index{\n  // 控制是否锁定surface旋转的状态，初始值为true表示锁定\n  @State isLock: boolean = true;\n\n  // surface的宽度\n  @State xc_width: number = 500;\n\n  // surface的高度\n  @State xc_height: number = 700;\n\n  // 创建XComponentController实例\n  myXComponentController: XComponentController = new XComponentController();\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Start }) {\n      XComponent({\n        id: 'xComponentId',\n        type: XComponentType.SURFACE,\n        libraryname: 'nativerender',\n        controller: this.myXComponentController\n      })\n      .width(this.xc_width) // 设置surface的宽度\n      .height(this.xc_height) // 设置surface的高度\n      .onLoad(() => {\n        // 创建surface旋转选项对象，包括锁定状态\n        let surfaceRotation: SurfaceRotationOptions = { lock: this.isLock };\n        // 设置surface的旋转选项\n        this.myXComponentController.setXComponentSurfaceRotation(surfaceRotation);\n        // 打印当前surface的锁定状态\n        console.log(\"Surface getXComponentSurfaceRotation lock = \" +\n          this.myXComponentController.getXComponentSurfaceRotation().lock);\n      })\n    }\n    .width('100%') // 设置Flex容器的宽度为100%\n    .height('100%') // 设置Flex容器的高度为100%\n  }\n}"
        }
    ],
    "ImageBitmap": [
        {
            "description": "实现一个在Canvas上绘制图像的组件。该组件使用Flex布局，将Canvas居中显示，并在Canvas准备好后绘制一张图片。图片绘制完成后，释放图片资源。",
            "code": "@Entry // 标记该组件为入口组件\n@Component // 标记该结构体为一个组件\nstruct ImageExample {\n  private settings: RenderingContextSettings = new RenderingContextSettings(true) // 创建一个RenderingContextSettings对象，设置是否支持3D渲染\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings) // 创建一个CanvasRenderingContext2D对象，用于绘制2D图形\n  private img: ImageBitmap = new ImageBitmap(\"common/images/example.jpg\") // 创建一个ImageBitmap对象，加载指定路径的图片\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) { // 使用Flex布局，方向为列布局，居中对齐\n      Canvas(this.context) // 创建一个Canvas组件，使用之前创建的CanvasRenderingContext2D对象\n        .width('100%') // 设置Canvas宽度为父容器的100%\n        .height('100%') // 设置Canvas高度为父容器的100%\n        .backgroundColor('#ffff00') // 设置Canvas背景颜色为黄色\n        .onReady(() => { // 当Canvas准备好时执行回调函数\n          this.context.drawImage(this.img, 0, 0, 500, 500, 0, 0, 400, 200) // 在Canvas上绘制图片，图片从(0, 0)开始绘制，原始图片大小为500x500，绘制到Canvas上的大小为400x200\n          this.img.close() // 绘制完成后，释放图片资源\n        })\n    }\n    .width('100%') // 设置Flex容器的宽度为父容器的100%\n    .height('100%') // 设置Flex容器的高度为父容器的100%\n  }\n}"
        },
        {
            "description": "实现一个简单的Canvas绘图示例，展示如何在鸿蒙ArkUI中使用Canvas进行基本的图形绘制和图像处理。\n布局为一个垂直居中的Flex容器，内部包含一个Canvas组件，占据屏幕的50%高度。",
            "code": "@Entry\n@Component\nstruct Demo {\n  // 创建一个RenderingContextSettings对象，启用抗锯齿功能\n  private settings: RenderingContextSettings = new RenderingContextSettings(true)\n  \n  // 创建一个CanvasRenderingContext2D对象，用于绘制2D图形\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建一个Canvas组件，绑定到之前创建的CanvasRenderingContext2D对象\n      Canvas(this.context)\n        .width('100%') // 设置Canvas的宽度为父容器的100%\n        .height('50%') // 设置Canvas的高度为父容器的50%\n        .backgroundColor('#ffff00') // 设置Canvas的背景颜色为黄色\n        .onReady(() => {\n          // 设置填充颜色为绿色\n          this.context.fillStyle = \"#00ff00\"\n          \n          // 绘制一个绿色的矩形，位置为(0, 0)，大小为100x100\n          this.context.fillRect(0, 0, 100, 100)\n          \n          // 获取Canvas上指定区域的像素数据，生成一个PixelMap对象\n          let pixel = this.context.getPixelMap(0, 0, 100, 100)\n          \n          // 将PixelMap对象转换为ImageBitmap对象\n          let image = new ImageBitmap(pixel)\n          \n          // 在Canvas上绘制ImageBitmap对象，位置为(100, 100)\n          this.context.drawImage(image, 100, 100)\n        })\n    }\n    .width('100%') // 设置Flex容器的宽度为父容器的100%\n    .height('100%') // 设置Flex容器的高度为父容器的100%\n  }\n}"
        },
        {
            "description": "实现一个在Canvas上绘制图像的示例页面。该页面通过主线程与Worker线程的通信，将图像数据传递给Worker线程进行处理，并将处理后的图像数据返回给主线程，最终在Canvas上绘制出来。\n导入Worker模块，用于创建和管理Worker线程",
            "code": "import worker from '@ohos.worker';\n\n// 定义一个组件，作为页面的入口\n@Entry\n@Component\nstruct imageBitmapExamplePage {\n  // 创建一个RenderingContextSettings对象，用于配置Canvas的渲染上下文\n  private settings: RenderingContextSettings = new RenderingContextSettings(true);\n  \n  // 创建一个CanvasRenderingContext2D对象，用于在Canvas上进行绘图操作\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings);\n  \n  // 创建一个Worker线程，用于处理图像数据\n  private myWorker = new worker.ThreadWorker('entry/ets/workers/Worker.ts');\n  \n  // 创建一个ImageBitmap对象，用于加载图像数据\n  private img: ImageBitmap = new ImageBitmap(\"common/images/example.jpg\");\n\n  // 构建页面的UI结构\n  build() {\n    // 使用Flex布局，设置布局方向为列，居中对齐\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建一个Canvas组件，并绑定渲染上下文\n      Canvas(this.context)\n        .width('100%') // 设置Canvas宽度为100%\n        .height('100%') // 设置Canvas高度为100%\n        .backgroundColor('#ffff00') // 设置Canvas背景颜色为黄色\n        .onReady(() => {\n          // 当Canvas准备好后，向Worker线程发送图像数据\n          this.myWorker.postMessage({ myImage: this.img });\n          \n          // 监听Worker线程的消息\n          this.myWorker.onmessage = (e): void => {\n            // 如果接收到Worker线程返回的图像数据\n            if (e.data.myImage) {\n              // 获取处理后的图像数据\n              let image: ImageBitmap = e.data.myImage;\n              \n              // 将处理后的图像数据绘制到Canvas上\n              this.context.transferFromImageBitmap(image);\n            }\n          }\n        })\n    }\n    .width('100%') // 设置Flex容器的宽度为100%\n    .height('100%') // 设置Flex容器的高度为100%\n  }\n}\n\n// Worker线程的逻辑\nworkerPort.onmessage = function (e: MessageEvents) {\n  // 如果接收到主线程发送的图像数据\n  if (e.data.myImage) {\n    // 获取图像数据\n    let img = e.data.myImage;\n    \n    // 创建一个OffscreenCanvas对象，用于在Worker线程中进行图像处理\n    let offCanvas = new OffscreenCanvas(600, 600);\n    \n    // 获取OffscreenCanvas的2D渲染上下文\n    let offContext = offCanvas.getContext(\"2d\");\n    \n    // 在OffscreenCanvas上绘制图像，并进行缩放和裁剪\n    offContext.drawImage(img, 0, 0, 500, 500, 0, 0, 400, 200);\n    \n    // 将OffscreenCanvas的内容转换为ImageBitmap对象\n    let image = offCanvas.transferToImageBitmap();\n    \n    // 将处理后的图像数据发送回主线程\n    workerPort.postMessage({ myImage: image });\n  }\n}"
        }
    ],
    "Badge": [
        {
            "description": "实现一个带有徽章的图标组件，并通过按钮控制徽章的显隐效果。具体功能如下：\n- 徽章显示：在图标右上角显示一个徽章，徽章显示的内容为 badgeCount 的值。\n- 按钮控制：通过两个按钮可以控制 badgeCount 的值，当点击 \"count 0\" 按钮时，徽章隐藏；当点击 \"count 1\" 按钮时，徽章显示，且徽章内容为 1。\n- 布局：组件采用列布局，内容之间有一定的间隔，并设置了上边距。\n此示例展示了如何通过状态管理来动态控制徽章的显隐，从而实现不同的视觉效果。",
            "code": "@Entry\n@Component\nstruct Index {\n  // 定义状态变量 badgeCount，用于控制徽章的显示内容\n  @State badgeCount: number = 1\n\n  build() {\n    Column({ space: 40 }) {\n      // 使用 Badge 组件，显示徽章，并设置徽章的位置为右上角\n      Badge({\n        count: this.badgeCount, // 徽章显示的内容\n        style: {}, // 徽章的样式，此处为空\n        position: BadgePosition.RightTop, // 徽章的位置，设置为右上角\n      }) {\n        // 在徽章内部嵌套一个 Image 组件，显示图标\n        Image($r(\"app.media.icon\"))\n          .width(50) // 设置图标的宽度\n          .height(50) // 设置图标的高度\n      }\n      .width(55) // 设置 Badge 组件的宽度\n\n      // 第一个按钮，点击后将 badgeCount 设置为 0，隐藏徽章\n      Button('count 0').onClick(() => {\n        this.badgeCount = 0\n      })\n\n      // 第二个按钮，点击后将 badgeCount 设置为 1，显示徽章\n      Button('count 1').onClick(() => {\n        this.badgeCount = 1\n      })\n    }\n    .margin({top: 20}) // 设置组件的上边距\n  }\n}"
        }
    ],
    "Column": [
        {
            "description": "实现一个展示Column组件布局和样式特性的示例。通过设置子元素的间距、水平对齐方式和垂直对齐方式，展示Column组件的灵活性和多样性。",
            "code": "@Entry\n@Component\nstruct ColumnExample {\n  build() {\n    Column({ space: 5 }) { // 设置子元素垂直方向间距为5\n      Text('space').width('90%') // 显示文本“space”，宽度为父容器的90%\n\n      Column({ space: 5 }) { // 嵌套Column，设置子元素垂直方向间距为5\n        Column().width('100%').height(30).backgroundColor(0xAFEEEE) // 创建一个宽度为100%、高度为30的Column，背景色为浅蓝色\n        Column().width('100%').height(30).backgroundColor(0x00FFFF) // 创建一个宽度为100%、高度为30的Column，背景色为青色\n      }.width('90%').height(100).border({ width: 1 }) // 设置嵌套Column的宽度为父容器的90%，高度为100，并添加1像素的边框\n\n      Text('alignItems(Start)').width('90%') // 显示文本“alignItems(Start)”，宽度为父容器的90%\n      Column() {\n        Column().width('50%').height(30).backgroundColor(0xAFEEEE) // 创建一个宽度为50%、高度为30的Column，背景色为浅蓝色\n        Column().width('50%').height(30).backgroundColor(0x00FFFF) // 创建一个宽度为50%、高度为30的Column，背景色为青色\n      }.alignItems(HorizontalAlign.Start).width('90%').border({ width: 1 }) // 设置子元素水平方向对齐方式为Start，宽度为父容器的90%，并添加1像素的边框\n\n      Text('alignItems(End)').width('90%') // 显示文本“alignItems(End)”，宽度为父容器的90%\n      Column() {\n        Column().width('50%').height(30).backgroundColor(0xAFEEEE) // 创建一个宽度为50%、高度为30的Column，背景色为浅蓝色\n        Column().width('50%').height(30).backgroundColor(0x00FFFF) // 创建一个宽度为50%、高度为30的Column，背景色为青色\n      }.alignItems(HorizontalAlign.End).width('90%').border({ width: 1 }) // 设置子元素水平方向对齐方式为End，宽度为父容器的90%，并添加1像素的边框\n\n      Text('alignItems(Center)').width('90%') // 显示文本“alignItems(Center)”，宽度为父容器的90%\n      Column() {\n        Column().width('50%').height(30).backgroundColor(0xAFEEEE) // 创建一个宽度为50%、高度为30的Column，背景色为浅蓝色\n        Column().width('50%').height(30).backgroundColor(0x00FFFF) // 创建一个宽度为50%、高度为30的Column，背景色为青色\n      }.alignItems(HorizontalAlign.Center).width('90%').border({ width: 1 }) // 设置子元素水平方向对齐方式为Center，宽度为父容器的90%，并添加1像素的边框\n\n      Text('justifyContent(Center)').width('90%') // 显示文本“justifyContent(Center)”，宽度为父容器的90%\n      Column() {\n        Column().width('90%').height(30).backgroundColor(0xAFEEEE) // 创建一个宽度为90%、高度为30的Column，背景色为浅蓝色\n        Column().width('90%').height(30).backgroundColor(0x00FFFF) // 创建一个宽度为90%、高度为30的Column，背景色为青色\n      }.height(100).border({ width: 1 }).justifyContent(FlexAlign.Center) // 设置子元素垂直方向对齐方式为Center，高度为100，并添加1像素的边框\n\n      Text('justifyContent(End)').width('90%') // 显示文本“justifyContent(End)”，宽度为父容器的90%\n      Column() {\n        Column().width('90%').height(30).backgroundColor(0xAFEEEE) // 创建一个宽度为90%、高度为30的Column，背景色为浅蓝色\n        Column().width('90%').height(30).backgroundColor(0x00FFFF) // 创建一个宽度为90%、高度为30的Column，背景色为青色\n      }.height(100).border({ width: 1 }).justifyContent(FlexAlign.End) // 设置子元素垂直方向对齐方式为End，高度为100，并添加1像素的边框\n\n    }.width('100%').padding({ top: 5 }) // 设置主Column的宽度为100%，顶部内边距为5\n  }\n}"
        }
    ],
    "ColumnSplit": [
        {
            "description": "实现一个垂直分割的列布局组件，其中包含五个文本组件，每个文本组件占据一行。用户可以通过拖动分割线来调整每个文本组件的高度。",
            "code": "@Entry\n@Component\nstruct ColumnSplitExample {\n  build() {\n    Column() {\n      // 显示提示文本，说明用户可以拖动分割线\n      Text('The secant line can be dragged')\n        .fontSize(9) // 设置字体大小为9\n        .fontColor(0xCCCCCC) // 设置字体颜色为浅灰色\n        .width('90%') // 设置文本宽度为父容器的90%\n      \n      // 创建一个垂直分割的列布局\n      ColumnSplit() {\n        // 第一个文本组件，背景色为浅棕色\n        Text('1')\n          .width('100%') // 设置文本宽度为父容器的100%\n          .height(50) // 设置文本高度为50\n          .backgroundColor(0xF5DEB3) // 设置背景色为浅棕色\n          .textAlign(TextAlign.Center) // 设置文本居中对齐\n        \n        // 第二个文本组件，背景色为深棕色\n        Text('2')\n          .width('100%')\n          .height(50)\n          .backgroundColor(0xD2B48C) // 设置背景色为深棕色\n          .textAlign(TextAlign.Center)\n        \n        // 第三个文本组件，背景色为浅棕色\n        Text('3')\n          .width('100%')\n          .height(50)\n          .backgroundColor(0xF5DEB3)\n          .textAlign(TextAlign.Center)\n        \n        // 第四个文本组件，背景色为深棕色\n        Text('4')\n          .width('100%')\n          .height(50)\n          .backgroundColor(0xD2B48C)\n          .textAlign(TextAlign.Center)\n        \n        // 第五个文本组件，背景色为浅棕色\n        Text('5')\n          .width('100%')\n          .height(50)\n          .backgroundColor(0xF5DEB3)\n          .textAlign(TextAlign.Center)\n      }\n      .borderWidth(1) // 设置分割列的边框宽度为1\n      .resizeable(true) // 设置分割列可拖动调整大小\n      .width('90%') // 设置分割列的宽度为父容器的90%\n      .height('60%') // 设置分割列的高度为父容器的60%\n    }\n    .width('100%') // 设置整个列的宽度为父容器的100%\n  }\n}"
        }
    ],
    "Counter": [
        {
            "description": "",
            "code": "@Entry\n@Component\nstruct CounterExample {\n  @State value: number = 0\n\n  build() {\n    Column() {\n      Counter() {\n        Text(this.value.toString())\n      }.margin(100)\n      .onInc(() => {\n        this.value++\n      })\n      .onDec(() => {\n        this.value--\n      })\n    }.width(100%)\n  }\n}"
        }
    ],
    "EmbeddedComponent": [
        {
            "description": "实现一个嵌入式UI扩展能力（EmbeddedUIExtensionAbility）的生命周期管理和内容加载功能。具体功能如下：\n生命周期管理：\n- onCreate：在能力创建时触发，用于初始化资源或状态。\n- onForeground：当能力从后台切换到前台时触发，通常用于恢复UI状态或刷新数据。\n- onBackground：当能力切换到后台时触发，用于保存状态或释放资源。\n- onDestroy：在能力销毁时触发，进行清理工作。\n会话管理：\n- onSessionCreate：当嵌入式UI扩展会话创建时触发，接收 Want 对象和 UIExtensionContentSession 会话对象。此时，可以初始化会话并加载指定的内容页面（'pages/extension'）。\n- onSessionDestroy：当会话销毁时触发，用于清理会话相关的资源。\n内容加载：\n- 在会话创建时，通过 session.loadContent 方法加载指定路径的内容页面，同时可以传递自定义存储对象（LocalStorage），以便在页面中使用。\n此代码展示了如何在嵌入式UI扩展能力中处理生命周期事件和会话管理，以及如何加载和管理嵌入的UI内容。",
            "code": "import { EmbeddedUIExtensionAbility, UIExtensionContentSession, Want } from '@kit.AbilityKit';\n\nconst TAG: string = '[ExampleEmbeddedAbility]'\n\nexport default class ExampleEmbeddedAbility extends EmbeddedUIExtensionAbility {\n  \n  // 生命周期方法：在能力创建时触发，用于初始化资源或状态\n  onCreate() {\n    console.log(TAG, `onCreate`);\n  }\n\n  // 生命周期方法：当能力从后台切换到前台时触发，通常用于恢复UI状态或刷新数据\n  onForeground() {\n    console.log(TAG, `onForeground`);\n  }\n\n  // 生命周期方法：当能力切换到后台时触发，用于保存状态或释放资源\n  onBackground() {\n    console.log(TAG, `onBackground`);\n  }\n\n  // 生命周期方法：在能力销毁时触发，进行清理工作\n  onDestroy() {\n    console.log(TAG, `onDestroy`);\n  }\n\n  // 会话管理方法：当嵌入式UI扩展会话创建时触发，接收 Want 对象和 UIExtensionContentSession 会话对象\n  onSessionCreate(want: Want, session: UIExtensionContentSession) {\n    console.log(TAG, `onSessionCreate, want: ${JSON.stringify(want)}`);\n    let param: Record<string, UIExtensionContentSession> = {\n      'session': session\n    };\n    let storage: LocalStorage = new LocalStorage(param);\n    // 加载指定路径的内容页面，并传递自定义存储对象\n    session.loadContent('pages/extension', storage);\n  }\n\n  // 会话管理方法：当会话销毁时触发，用于清理会话相关的资源\n  onSessionDestroy(session: UIExtensionContentSession) {\n    console.log(TAG, `onSessionDestroy`);\n  }\n}"
        }
    ],
    "Flex": [
        {
            "description": "实现一个展示Flex布局不同wrap模式的示例，通过设置不同的FlexWrap属性，展示子组件在多行、单行和反向多行布局下的效果。",
            "code": "@Entry\n@Component\nstruct FlexExample2 {\n  build() {\n    Column() {\n      Column({ space: 5 }) {\n        // 显示标题“Wrap”，字体大小为9，颜色为灰色，宽度为90%\n        Text('Wrap').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 使用Flex布局，设置wrap模式为FlexWrap.Wrap，子组件将多行布局\n        Flex({ wrap: FlexWrap.Wrap }) {\n          Text('1').width('50%').height(50).backgroundColor(0xF5DEB3) // 文本“1”，宽度50%，高度50，背景色为浅棕色\n          Text('2').width('50%').height(50).backgroundColor(0xD2B48C) // 文本“2”，宽度50%，高度50，背景色为棕色\n          Text('3').width('50%').height(50).backgroundColor(0xD2B48C) // 文本“3”，宽度50%，高度50，背景色为棕色\n        }\n        .width('90%') // Flex组件宽度为90%\n        .padding(10) // 内边距为10\n        .backgroundColor(0xAFEEEE) // 背景色为浅蓝色\n\n        // 显示标题“NoWrap”，字体大小为9，颜色为灰色，宽度为90%\n        Text('NoWrap').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 使用Flex布局，设置wrap模式为FlexWrap.NoWrap，子组件将单行布局\n        Flex({ wrap: FlexWrap.NoWrap }) {\n          Text('1').width('50%').height(50).backgroundColor(0xF5DEB3) // 文本“1”，宽度50%，高度50，背景色为浅棕色\n          Text('2').width('50%').height(50).backgroundColor(0xD2B48C) // 文本“2”，宽度50%，高度50，背景色为棕色\n          Text('3').width('50%').height(50).backgroundColor(0xF5DEB3) // 文本“3”，宽度50%，高度50，背景色为浅棕色\n        }\n        .width('90%') // Flex组件宽度为90%\n        .padding(10) // 内边距为10\n        .backgroundColor(0xAFEEEE) // 背景色为浅蓝色\n\n        // 显示标题“WrapReverse”，字体大小为9，颜色为灰色，宽度为90%\n        Text('WrapReverse').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 使用Flex布局，设置wrap模式为FlexWrap.WrapReverse，子组件将反向多行布局，方向为行\n        Flex({ wrap: FlexWrap.WrapReverse , direction:FlexDirection.Row }) {\n          Text('1').width('50%').height(50).backgroundColor(0xF5DEB3) // 文本“1”，宽度50%，高度50，背景色为浅棕色\n          Text('2').width('50%').height(50).backgroundColor(0xD2B48C) // 文本“2”，宽度50%，高度50，背景色为棕色\n          Text('3').width('50%').height(50).backgroundColor(0xD2B48C) // 文本“3”，宽度50%，高度50，背景色为棕色\n        }\n        .width('90%') // Flex组件宽度为90%\n        .height(120) // 高度为120\n        .padding(10) // 内边距为10\n        .backgroundColor(0xAFEEEE) // 背景色为浅蓝色\n      }.width('100%').margin({ top: 5 }) // 内部Column组件宽度为100%，顶部外边距为5\n    }.width('100%') // 外部Column组件宽度为100%\n  }\n}"
        },
        {
            "description": "实现一个展示Flex布局不同wrap模式的示例组件。通过设置不同的FlexWrap模式（Wrap、NoWrap、WrapReverse），展示子组件在不同布局模式下的排列效果。每个Flex容器内的子组件通过设置不同的宽度和高度，以及背景颜色，来直观展示布局效果。",
            "code": "import {LengthMetrics} from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct FlexExample2 {\n  build() {\n    Column() {\n      Column({ space: 5 }) {\n        // 标题文本，显示“Wrap”，字体大小为9，颜色为灰色，宽度为90%\n        Text('Wrap').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // Flex容器，设置为多行布局（FlexWrap.Wrap），主轴和交叉轴的间距均为50px\n        Flex({ wrap: FlexWrap.Wrap, space: {main: LengthMetrics.px(50), cross: LengthMetrics.px(50)} }) { // 子组件多行布局\n          Text('1').width('40%').height(50).backgroundColor(0xF5DEB3) // 文本“1”，宽度40%，高度50，背景色为浅棕色\n          Text('2').width('40%').height(50).backgroundColor(0xD2B48C) // 文本“2”，宽度40%，高度50，背景色为棕色\n          Text('3').width('40%').height(50).backgroundColor(0xD2B48C) // 文本“3”，宽度40%，高度50，背景色为棕色\n        }\n        .width('90%') // Flex容器的宽度为90%\n        .padding(10) // 内边距为10\n        .backgroundColor(0xAFEEEE) // 背景色为浅蓝色\n\n        // 标题文本，显示“NoWrap”，字体大小为9，颜色为灰色，宽度为90%\n        Text('NoWrap').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // Flex容器，设置为单行布局（FlexWrap.NoWrap），主轴和交叉轴的间距均为50px\n        Flex({ wrap: FlexWrap.NoWrap, space: {main: LengthMetrics.px(50), cross: LengthMetrics.px(50)} }) { // 子组件单行布局\n          Text('1').width('50%').height(50).backgroundColor(0xF5DEB3) // 文本“1”，宽度50%，高度50，背景色为浅棕色\n          Text('2').width('50%').height(50).backgroundColor(0xD2B48C) // 文本“2”，宽度50%，高度50，背景色为棕色\n          Text('3').width('50%').height(50).backgroundColor(0xF5DEB3) // 文本“3”，宽度50%，高度50，背景色为浅棕色\n        }\n        .width('90%') // Flex容器的宽度为90%\n        .padding(10) // 内边距为10\n        .backgroundColor(0xAFEEEE) // 背景色为浅蓝色\n\n        // 标题文本，显示“WrapReverse”，字体大小为9，颜色为灰色，宽度为90%\n        Text('WrapReverse').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // Flex容器，设置为反向多行布局（FlexWrap.WrapReverse），主轴为行方向（FlexDirection.Row），主轴和交叉轴的间距均为50px\n        Flex({ wrap: FlexWrap.WrapReverse, direction:FlexDirection.Row, space: {main: LengthMetrics.px(50), cross: LengthMetrics.px(50)} }) { // 子组件反向多行布局\n          Text('1').width('40%').height(50).backgroundColor(0xF5DEB3) // 文本“1”，宽度40%，高度50，背景色为浅棕色\n          Text('2').width('40%').height(50).backgroundColor(0xD2B48C) // 文本“2”，宽度40%，高度50，背景色为棕色\n          Text('3').width('40%').height(50).backgroundColor(0xD2B48C) // 文本“3”，宽度40%，高度50，背景色为棕色\n        }\n        .width('90%') // Flex容器的宽度为90%\n        .height(120) // 高度为120\n        .padding(10) // 内边距为10\n        .backgroundColor(0xAFEEEE) // 背景色为浅蓝色\n      }.width('100%').margin({ top: 5 }) // 内部Column的宽度为100%，上外边距为5\n    }.width('100%') // 外部Column的宽度为100%\n  }\n}"
        },
        {
            "description": "实现一个Flex布局示例，展示不同justifyContent属性值对子组件在主轴上对齐方式的影响。\n通过设置不同的justifyContent值，子组件在Flex容器中的对齐方式会有所不同，包括首端对齐、居中对齐、尾端对齐、均分布局等。\n@Component\nstruct JustifyContentFlex {\n定义一个属性justifyContent，用于设置Flex容器的justifyContent属性\njustifyContent : number = 0;\nbuild() {\n创建一个Flex容器，并设置其justifyContent属性为传入的值\nFlex({ justifyContent: this.justifyContent }) {\n创建一个Text组件，显示数字'1'，设置宽度为20%，高度为50，背景颜色为0xF5DEB3\nText('1').width('20%').height(50).backgroundColor(0xF5DEB3)\n创建一个Text组件，显示数字'2'，设置宽度为20%，高度为50，背景颜色为0xD2B48C\nText('2').width('20%').height(50).backgroundColor(0xD2B48C)\n创建一个Text组件，显示数字'3'，设置宽度为20%，高度为50，背景颜色为0xF5DEB3\nText('3').width('20%').height(50).backgroundColor(0xF5DEB3)\n}\n设置Flex容器的宽度为90%\n.width('90%')\n设置Flex容器的内边距为10\n.padding(10)\n设置Flex容器的背景颜色为0xAFEEEE\n.backgroundColor(0xAFEEEE)\n}\n}",
            "code": "@Entry\n@Component\nstruct FlexExample3 {\n  build() {\n    // 创建一个Column容器，用于垂直排列子组件\n    Column() {\n      // 创建一个Column容器，设置子组件之间的间距为5\n      Column({ space: 5 }) {\n        // 创建一个Text组件，显示'justifyContent:Start'，设置字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('justifyContent:Start').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个JustifyContentFlex组件，设置justifyContent属性为FlexAlign.Start，子组件在容器主轴上首端对齐\n        JustifyContentFlex({ justifyContent: FlexAlign.Start })\n\n        // 创建一个Text组件，显示'justifyContent:Center'，设置字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('justifyContent:Center').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个JustifyContentFlex组件，设置justifyContent属性为FlexAlign.Center，子组件在容器主轴上居中对齐\n        JustifyContentFlex({ justifyContent: FlexAlign.Center })\n\n        // 创建一个Text组件，显示'justifyContent:End'，设置字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('justifyContent:End').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个JustifyContentFlex组件，设置justifyContent属性为FlexAlign.End，子组件在容器主轴上尾端对齐\n        JustifyContentFlex({ justifyContent: FlexAlign.End })\n\n        // 创建一个Text组件，显示'justifyContent:SpaceBetween'，设置字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('justifyContent:SpaceBetween').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个JustifyContentFlex组件，设置justifyContent属性为FlexAlign.SpaceBetween，子组件在容器主轴上均分容器布局，第一个子组件与行首对齐，最后一个子组件与行尾对齐\n        JustifyContentFlex({ justifyContent: FlexAlign.SpaceBetween })\n\n        // 创建一个Text组件，显示'justifyContent:SpaceAround'，设置字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('justifyContent:SpaceAround').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个JustifyContentFlex组件，设置justifyContent属性为FlexAlign.SpaceAround，子组件在容器主轴上均分容器布局，第一个子组件到行首的距离和最后一个子组件到行尾的距离是相邻子组件之间距离的一半\n        JustifyContentFlex({ justifyContent: FlexAlign.SpaceAround })\n\n        // 创建一个Text组件，显示'justifyContent:SpaceEvenly'，设置字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('justifyContent:SpaceEvenly').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个JustifyContentFlex组件，设置justifyContent属性为FlexAlign.SpaceEvenly，子组件在容器主轴上均分容器布局，子组件之间的距离与第一子组件到行首、最后一个子组件到行尾的距离相等\n        JustifyContentFlex({ justifyContent: FlexAlign.SpaceEvenly })\n      }\n      // 设置Column容器的宽度为100%，并设置顶部外边距为5\n      .width('100%').margin({ top: 5 })\n    }\n    // 设置Column容器的宽度为100%\n    .width('100%')\n  }\n}"
        },
        {
            "description": "实现一个Flex布局示例，展示不同alignItems属性值对子组件在交叉轴上的对齐方式的影响。通过不同的alignItems值，子组件可以在交叉轴上分别实现自动对齐、首部对齐、居中对齐、尾部对齐、拉伸填充以及基线对齐。\n定义一个名为AlignItemsFlex的组件，该组件用于展示不同alignItems属性值的效果\n@Component\nstruct AlignItemsFlex {\n定义一个alignItems属性，用于接收外部传入的对齐方式\nalignItems : number = 0;\n构建方法，用于定义组件的布局和样式\nbuild() {\n使用Flex布局，并设置alignItems属性为外部传入的值\nFlex({ alignItems: this.alignItems }) {\n第一个子组件，文本内容为'1'，宽度为33%，高度为30，背景颜色为0xF5DEB3\nText('1').width('33%').height(30).backgroundColor(0xF5DEB3)\n第二个子组件，文本内容为'2'，宽度为33%，高度为40，背景颜色为0xD2B48C\nText('2').width('33%').height(40).backgroundColor(0xD2B48C)\n第三个子组件，文本内容为'3'，宽度为33%，高度为50，背景颜色为0xF5DEB3\nText('3').width('33%').height(50).backgroundColor(0xF5DEB3)\n}\n设置Flex容器的尺寸，宽度为90%，高度为80\n.size({width: '90%', height: 80})\n设置Flex容器的内边距为10\n.padding(10)\n设置Flex容器的背景颜色为0xAFEEEE\n.backgroundColor(0xAFEEEE)\n}\n}\n定义一个名为FlexExample4的入口组件，该组件用于展示不同alignItems值的效果",
            "code": "@Entry\n@Component\nstruct FlexExample4 {\n  // 构建方法，用于定义组件的布局和样式\n  build() {\n    // 使用Column布局，用于垂直排列子组件\n    Column() {\n      // 使用Column布局，设置子组件之间的间距为5\n      Column({ space: 5 }) {\n        // 文本组件，显示'alignItems:Auto'，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('alignItems:Auto').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 使用AlignItemsFlex组件，传入alignItems值为ItemAlign.Auto，子组件在交叉轴上自动对齐\n        AlignItemsFlex({ alignItems: ItemAlign.Auto })\n\n        // 文本组件，显示'alignItems:Start'，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('alignItems:Start').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 使用AlignItemsFlex组件，传入alignItems值为ItemAlign.Start，子组件在交叉轴上首部对齐\n        AlignItemsFlex({ alignItems: ItemAlign.Start })\n\n        // 文本组件，显示'alignItems:Center'，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('alignItems:Center').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 使用AlignItemsFlex组件，传入alignItems值为ItemAlign.Center，子组件在交叉轴上居中对齐\n        AlignItemsFlex({ alignItems: ItemAlign.Center })\n\n        // 文本组件，显示'alignItems:End'，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('alignItems:End').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 使用AlignItemsFlex组件，传入alignItems值为ItemAlign.End，子组件在交叉轴上尾部对齐\n        AlignItemsFlex({ alignItems: ItemAlign.End })\n\n        // 文本组件，显示'alignItems:Stretch'，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('alignItems:Stretch').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 使用AlignItemsFlex组件，传入alignItems值为ItemAlign.Stretch，子组件在交叉轴上拉伸填充\n        AlignItemsFlex({ alignItems: ItemAlign.Stretch })\n\n        // 文本组件，显示'alignItems:Baseline'，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('alignItems:Baseline').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 使用AlignItemsFlex组件，传入alignItems值为ItemAlign.Baseline，子组件在交叉轴上与文本基线对齐\n        AlignItemsFlex({ alignItems: ItemAlign.Baseline })\n      }\n      // 设置Column容器的宽度为100%，并设置顶部外边距为5\n      .width('100%').margin({ top: 5 })\n    }\n    // 设置Column容器的宽度为100%\n    .width('100%')\n  }\n}"
        },
        {
            "description": "实现一个展示Flex布局不同方向的示例组件。通过设置Flex组件的direction属性，展示子组件在容器主轴上的不同布局方式，包括行布局、反向行布局、列布局和反向列布局。每个布局示例都包含四个文本组件，分别显示不同的背景颜色，以便直观地展示布局效果。",
            "code": "@Entry\n@Component\nstruct FlexExample1 {\n  build() {\n    Column() {\n      Column({ space: 5 }) {\n        // 显示标题文本，字体大小为9，颜色为灰色，宽度为90%\n        Text('direction:Row').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个Flex容器，设置布局方向为行布局\n        Flex({ direction: FlexDirection.Row }) { // 子组件在容器主轴上行布局\n          // 创建四个文本组件，宽度为20%，高度为50，背景颜色分别为浅棕色和深棕色\n          Text('1').width('20%').height(50).backgroundColor(0xF5DEB3)\n          Text('2').width('20%').height(50).backgroundColor(0xD2B48C)\n          Text('3').width('20%').height(50).backgroundColor(0xF5DEB3)\n          Text('4').width('20%').height(50).backgroundColor(0xD2B48C)\n        }\n        .height(70) // 设置Flex容器的高度为70\n        .width('90%') // 设置Flex容器的宽度为90%\n        .padding(10) // 设置Flex容器的内边距为10\n        .backgroundColor(0xAFEEEE) // 设置Flex容器的背景颜色为浅蓝色\n\n        // 显示标题文本，字体大小为9，颜色为灰色，宽度为90%\n        Text('direction:RowReverse').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个Flex容器，设置布局方向为反向行布局\n        Flex({ direction: FlexDirection.RowReverse }) { // 子组件在容器主轴上反向行布局\n          // 创建四个文本组件，宽度为20%，高度为50，背景颜色分别为浅棕色和深棕色\n          Text('1').width('20%').height(50).backgroundColor(0xF5DEB3)\n          Text('2').width('20%').height(50).backgroundColor(0xD2B48C)\n          Text('3').width('20%').height(50).backgroundColor(0xF5DEB3)\n          Text('4').width('20%').height(50).backgroundColor(0xD2B48C)\n        }\n        .height(70) // 设置Flex容器的高度为70\n        .width('90%') // 设置Flex容器的宽度为90%\n        .padding(10) // 设置Flex容器的内边距为10\n        .backgroundColor(0xAFEEEE) // 设置Flex容器的背景颜色为浅蓝色\n\n        // 显示标题文本，字体大小为9，颜色为灰色，宽度为90%\n        Text('direction:Column').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个Flex容器，设置布局方向为列布局\n        Flex({ direction: FlexDirection.Column }) { // 子组件在容器主轴上列布局\n          // 创建四个文本组件，宽度为100%，高度为40，背景颜色分别为浅棕色和深棕色\n          Text('1').width('100%').height(40).backgroundColor(0xF5DEB3)\n          Text('2').width('100%').height(40).backgroundColor(0xD2B48C)\n          Text('3').width('100%').height(40).backgroundColor(0xF5DEB3)\n          Text('4').width('100%').height(40).backgroundColor(0xD2B48C)\n        }\n        .height(160) // 设置Flex容器的高度为160\n        .width('90%') // 设置Flex容器的宽度为90%\n        .padding(10) // 设置Flex容器的内边距为10\n        .backgroundColor(0xAFEEEE) // 设置Flex容器的背景颜色为浅蓝色\n\n        // 显示标题文本，字体大小为9，颜色为灰色，宽度为90%\n        Text('direction:ColumnReverse').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个Flex容器，设置布局方向为反向列布局\n        Flex({ direction: FlexDirection.ColumnReverse }) { // 子组件在容器主轴上反向列布局\n          // 创建四个文本组件，宽度为100%，高度为40，背景颜色分别为浅棕色和深棕色\n          Text('1').width('100%').height(40).backgroundColor(0xF5DEB3)\n          Text('2').width('100%').height(40).backgroundColor(0xD2B48C)\n          Text('3').width('100%').height(40).backgroundColor(0xF5DEB3)\n          Text('4').width('100%').height(40).backgroundColor(0xD2B48C)\n        }\n        .height(160) // 设置Flex容器的高度为160\n        .width('90%') // 设置Flex容器的宽度为90%\n        .padding(10) // 设置Flex容器的内边距为10\n        .backgroundColor(0xAFEEEE) // 设置Flex容器的背景颜色为浅蓝色\n      }.width('100%').margin({ top: 5 }) // 设置内部Column容器的宽度为100%，顶部外边距为5\n    }.width('100%') // 设置外部Column容器的宽度为100%\n  }\n}"
        },
        {
            "description": "实现一个Flex布局示例，展示不同alignContent属性值对多行子组件布局的影响。通过设置不同的alignContent属性，可以控制多行子组件在Flex容器中的对齐方式。\n@Component\nstruct AlignContentFlex {\nalignContent: number = 0;  定义alignContent属性，用于控制多行子组件的对齐方式\nbuild() {\nFlex({ wrap: FlexWrap.Wrap, alignContent: this.alignContent }) {\n创建一个Flex容器，设置换行属性为FlexWrap.Wrap，并根据传入的alignContent属性值进行对齐\nText('1').width('50%').height(20).backgroundColor(0xF5DEB3)  创建一个宽度为50%、高度为20的文本组件，背景色为0xF5DEB3\nText('2').width('50%').height(20).backgroundColor(0xD2B48C)  创建一个宽度为50%、高度为20的文本组件，背景色为0xD2B48C\nText('3').width('50%').height(20).backgroundColor(0xD2B48C)  创建一个宽度为50%、高度为20的文本组件，背景色为0xD2B48C\n}\n.size({ width: '90%', height: 90 })  设置Flex容器的尺寸为宽度90%、高度90\n.padding(10)  设置Flex容器的内边距为10\n.backgroundColor(0xAFEEEE)  设置Flex容器的背景色为0xAFEEEE\n}\n}",
            "code": "@Entry\n@Component\nstruct FlexExample5 {\n  build() {\n    Column() {\n      Column({ space: 5 }) {\n        // 创建一个Column容器，设置子组件之间的间距为5\n        Text('alignContent:Start').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个文本组件，显示alignContent:Start，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        AlignContentFlex({ alignContent: FlexAlign.Start }) // 创建AlignContentFlex组件，设置alignContent属性为FlexAlign.Start，多行布局下子组件首部对齐\n\n        Text('alignContent:Center').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个文本组件，显示alignContent:Center，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        AlignContentFlex({ alignContent: FlexAlign.Center }) // 创建AlignContentFlex组件，设置alignContent属性为FlexAlign.Center，多行布局下子组件居中对齐\n\n        Text('alignContent:End').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个文本组件，显示alignContent:End，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        AlignContentFlex({ alignContent: FlexAlign.End }) // 创建AlignContentFlex组件，设置alignContent属性为FlexAlign.End，多行布局下子组件尾部对齐\n\n        Text('alignContent:SpaceBetween').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个文本组件，显示alignContent:SpaceBetween，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        AlignContentFlex({ alignContent: FlexAlign.SpaceBetween }) // 创建AlignContentFlex组件，设置alignContent属性为FlexAlign.SpaceBetween，多行布局下第一行子组件与列首对齐，最后一行子组件与列尾对齐\n\n        Text('alignContent:SpaceAround').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个文本组件，显示alignContent:SpaceAround，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        AlignContentFlex({ alignContent: FlexAlign.SpaceAround }) // 创建AlignContentFlex组件，设置alignContent属性为FlexAlign.SpaceAround，多行布局下第一行子组件到列首的距离和最后一行子组件到列尾的距离是相邻行之间距离的一半\n\n        Text('alignContent:SpaceEvenly').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个文本组件，显示alignContent:SpaceEvenly，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Flex({\n          wrap: FlexWrap.Wrap,\n          alignContent: FlexAlign.SpaceEvenly\n        }) { // 创建一个Flex容器，设置换行属性为FlexWrap.Wrap，alignContent属性为FlexAlign.SpaceEvenly，多行布局下相邻行之间的距离与第一行子组件到列首的距离、最后一行子组件到列尾的距离完全一样\n          Text('1').width('50%').height(20).backgroundColor(0xF5DEB3) // 创建一个宽度为50%、高度为20的文本组件，背景色为0xF5DEB3\n          Text('2').width('50%').height(20).backgroundColor(0xD2B48C) // 创建一个宽度为50%、高度为20的文本组件，背景色为0xD2B48C\n          Text('3').width('50%').height(20).backgroundColor(0xF5DEB3) // 创建一个宽度为50%、高度为20的文本组件，背景色为0xF5DEB3\n          Text('4').width('50%').height(20).backgroundColor(0xD2B48C) // 创建一个宽度为50%、高度为20的文本组件，背景色为0xD2B48C\n          Text('5').width('50%').height(20).backgroundColor(0xF5DEB3) // 创建一个宽度为50%、高度为20的文本组件，背景色为0xF5DEB3\n        }\n        .size({ width: '90%', height: 100 }) // 设置Flex容器的尺寸为宽度90%、高度100\n        .padding({ left: 10, right: 10 }) // 设置Flex容器的左右内边距为10\n        .backgroundColor(0xAFEEEE) // 设置Flex容器的背景色为0xAFEEEE\n      }.width('100%').margin({ top: 5 }) // 设置Column容器的宽度为100%，上外边距为5\n    }.width('100%') // 设置Column容器的宽度为100%\n  }\n}"
        }
    ],
    "FlowItem": [
        {
            "description": "实现一个瀑布流布局组件，支持动态加载和排列不同尺寸的子组件。瀑布流布局的特点是子组件按照列的方式排列，每列的高度会根据子组件的高度自动调整，从而形成不规则的排列效果。",
            "code": "import { WaterFlow } from '@ohos/arkui-ts';\n\n@Entry\n@Component\nstruct WaterFlowExample {\n  @State items: Array<{ width: number, height: number }> = [\n    { width: 100, height: 150 },\n    { width: 150, height: 100 },\n    { width: 200, height: 200 },\n    // 更多子组件的尺寸数据\n  ];\n\n  build() {\n    Column() {\n      WaterFlow({\n        // 设置瀑布流的列数\n        columns: 3,\n        // 设置子组件之间的间距\n        spacing: 10,\n        // 设置瀑布流容器的宽度\n        width: '100%',\n        // 设置瀑布流容器的高度\n        height: '100%'\n      }) {\n        ForEach(this.items, (item) => {\n          // 创建子组件，根据传入的宽度和高度动态设置子组件的尺寸\n          Column() {\n            Text('Item')\n              .width(item.width)\n              .height(item.height)\n              .backgroundColor(Color.Gray)\n          }\n          .width(item.width)\n          .height(item.height)\n        })\n      }\n      .width('100%')\n      .height('100%')\n    }\n  }\n}"
        }
    ],
    "FolderStack": [
        {
            "description": "实现一个具有折叠和悬停功能的界面布局。上半屏显示一个视频区域，下半屏堆叠显示视频标题和视频栏。通过FolderStack组件实现折叠和悬停效果，并监听折叠状态和悬停状态的变化。",
            "code": "@Entry\n@Component\nstruct Index {\n  @State len_wid: number = 480 // 定义一个状态变量，表示长度和宽度\n  @State w: string = \"40%\" // 定义一个状态变量，表示宽度百分比\n\n  build() {\n    Column() {\n      // 使用FolderStack组件，将指定id的组件悬停到上半屏，其余组件堆叠在下半屏\n      FolderStack({ upperItems: [\"upperitemsId\"] }) {\n        // 此Column会自动上移到上半屏\n        Column() {\n          Text(\"video zone\") // 显示文本“video zone”\n            .height(\"100%\") // 设置高度为100%\n            .width(\"100%\") // 设置宽度为100%\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n            .fontSize(25) // 设置字体大小为25\n        }\n        .backgroundColor(Color.Pink) // 设置背景颜色为粉色\n        .width(\"100%\") // 设置宽度为100%\n        .height(\"100%\") // 设置高度为100%\n        .id(\"upperitemsId\") // 设置组件的id为“upperitemsId”\n\n        // 下列两个Column堆叠在下半屏区域\n        Column() {\n          Text(\"video title\") // 显示文本“video title”\n            .width(\"100%\") // 设置宽度为100%\n            .height(50) // 设置高度为50\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n            .backgroundColor(Color.Red) // 设置背景颜色为红色\n            .fontSize(25) // 设置字体大小为25\n        }\n        .width(\"100%\") // 设置宽度为100%\n        .height(\"100%\") // 设置高度为100%\n        .justifyContent(FlexAlign.Start) // 设置内容对齐方式为顶部对齐\n\n        Column() {\n          Text(\"video bar\") // 显示文本“video bar”\n            .width(\"100%\") // 设置宽度为100%\n            .height(50) // 设置高度为50\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n            .backgroundColor(Color.Red) // 设置背景颜色为红色\n            .fontSize(25) // 设置字体大小为25\n        }\n        .width(\"100%\") // 设置宽度为100%\n        .height(\"100%\") // 设置高度为100%\n        .justifyContent(FlexAlign.End) // 设置内容对齐方式为底部对齐\n      }\n      .backgroundColor(Color.Yellow) // 设置背景颜色为黄色\n      .enableAnimation(true) // 启用动画效果\n      .autoHalfFold(true) // 启用自动半折叠功能\n      .onFolderStateChange((msg) => { // 监听折叠状态变化\n        if (msg.foldStatus === FoldStatus.FOLD_STATUS_EXPANDED) {\n          console.info(\"The device is currently in the expanded state\") // 设备处于展开状态\n        } else if (msg.foldStatus === FoldStatus.FOLD_STATUS_HALF_FOLDED) {\n          console.info(\"The device is currently in the half folded state\") // 设备处于半折叠状态\n        } else {\n          // .............\n        }\n      })\n      .onHoverStatusChange((msg) => { // 监听悬停状态变化\n        console.log('this foldStatus:' + msg.foldStatus); // 输出当前折叠状态\n        console.log('this isHoverMode:' + msg.isHoverMode); // 输出当前是否为悬停模式\n        console.log('this appRotation:' + msg.appRotation); // 输出当前应用旋转状态\n        console.log('this windowStatusType:' + msg.windowStatusType); // 输出当前窗口状态类型\n      })\n      .alignContent(Alignment.Bottom) // 设置内容对齐方式为底部对齐\n      .height(\"100%\") // 设置高度为100%\n      .width(\"100%\") // 设置宽度为100%\n      .borderWidth(1) // 设置边框宽度为1\n      .backgroundColor(Color.Yellow) // 设置背景颜色为黄色\n    }\n    .height(\"100%\") // 设置高度为100%\n    .width(\"100%\") // 设置宽度为100%\n    .borderWidth(1) // 设置边框宽度为1\n    .backgroundColor(Color.Pink) // 设置背景颜色为粉色\n    .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM]) // 扩展安全区域，包括系统底部安全区域\n  }\n}"
        }
    ],
    "GridCol": [
        {
            "description": "实现一个栅格布局容器，支持多列布局，每列宽度可自定义，支持子组件的自动排列和对齐。\n导入必要的模块",
            "code": "import { GridRow, GridCol } from '@ohos/grid';\n\n@Entry\n@Component\nstruct GridRowExample {\n  build() {\n    Column({ space: 10 }) {\n      // 创建一个GridRow容器，设置列数为3，列间距为10\n      GridRow({ columns: 3, gutter: 10 }) {\n        // 创建一个GridCol子组件，设置跨度为1，背景颜色为蓝色\n        GridCol({ span: 1 }) {\n          Text('Column 1')\n            .fontSize(20)\n            .fontColor(Color.White)\n        }\n        .backgroundColor(Color.Blue)\n\n        // 创建一个GridCol子组件，设置跨度为2，背景颜色为绿色\n        GridCol({ span: 2 }) {\n          Text('Column 2')\n            .fontSize(20)\n            .fontColor(Color.White)\n        }\n        .backgroundColor(Color.Green)\n\n        // 创建一个GridCol子组件，设置跨度为3，背景颜色为红色\n        GridCol({ span: 3 }) {\n          Text('Column 3')\n            .fontSize(20)\n            .fontColor(Color.White)\n        }\n        .backgroundColor(Color.Red)\n      }\n      .width('100%')\n      .height(200)\n      .backgroundColor(Color.Gray)\n\n      // 创建另一个GridRow容器，设置列数为2，列间距为5\n      GridRow({ columns: 2, gutter: 5 }) {\n        // 创建一个GridCol子组件，设置跨度为1，背景颜色为黄色\n        GridCol({ span: 1 }) {\n          Text('Column 4')\n            .fontSize(20)\n            .fontColor(Color.Black)\n        }\n        .backgroundColor(Color.Yellow)\n\n        // 创建一个GridCol子组件，设置跨度为1，背景颜色为紫色\n        GridCol({ span: 1 }) {\n          Text('Column 5')\n            .fontSize(20)\n            .fontColor(Color.White)\n        }\n        .backgroundColor(Color.Purple)\n      }\n      .width('100%')\n      .height(150)\n      .backgroundColor(Color.LightGray)\n    }\n    .width('100%')\n    .height('100%')\n    .padding(10)\n  }\n}"
        }
    ],
    "GridRow": [
        {
            "description": "实现一个响应式的网格布局组件，根据窗口大小动态调整列数和间距。组件包含多个颜色块，每个颜色块根据不同的屏幕尺寸调整其占用的列数。组件还监听窗口大小的变化，并显示当前的断点状态。",
            "code": "@Entry\n@Component\nstruct GridRowExample {\n  // 定义一个状态变量 bgColors，存储颜色数组，用于网格列的背景色\n  @State bgColors: Color[] = [Color.Red, Color.Orange, Color.Yellow, Color.Green, Color.Pink, Color.Grey, Color.Blue, Color.Brown]\n  // 定义一个状态变量 currentBp，用于存储当前的断点状态\n  @State currentBp: string = 'unknown'\n\n  build() {\n    Column() {\n      // 创建一个 GridRow 组件，设置列数、间距、断点等属性\n      GridRow({\n        columns: 5, // 默认列数为5\n        gutter: { x: 5, y: 10 }, // 列之间的水平间距为5，垂直间距为10\n        breakpoints: { \n          value: [\"400vp\", \"600vp\", \"800vp\"], // 定义断点值，分别为400vp、600vp、800vp\n          reference: BreakpointsReference.WindowSize // 断点参考值为窗口大小\n        },\n        direction: GridRowDirection.Row // 网格方向为行\n      }) {\n        // 使用 ForEach 循环遍历 bgColors 数组，为每个颜色创建一个 GridCol 组件\n        ForEach(this.bgColors, (color: Color) => {\n          GridCol({ \n            span: { xs: 1, sm: 2, md: 3, lg: 4 }, // 根据不同的屏幕尺寸设置列的跨度\n            offset: 0, // 列的偏移量为0\n            order: 0 // 列的顺序为0\n          }) {\n            // 创建一个 Row 组件，设置宽度和高度\n            Row().width(\"100%\").height(\"20vp\")\n          }.borderColor(color).borderWidth(2) // 设置列的边框颜色和宽度\n        })\n      }.width(\"100%\").height(\"100%\") // 设置 GridRow 的宽度和高度为100%\n      .onBreakpointChange((breakpoint) => {\n        // 监听断点变化事件，更新 currentBp 状态变量\n        this.currentBp = breakpoint\n      })\n    }.width('80%').margin({ left: 10, top: 5, bottom: 5 }).height(200) // 设置 Column 的宽度、外边距和高度\n    .border({ color: '#880606', width: 2 }) // 设置 Column 的边框颜色和宽度\n  }\n}"
        }
    ],
    "Grid": [
        {
            "description": "实现一个可滚动的网格布局组件，展示从1到30的数字。网格布局具有固定的高度和宽度，支持设置列间距、行间距、背景颜色、每行最多和最少显示的网格项数量，以及网格布局方向。",
            "code": "@Entry\n@Component\nstruct GridExample {\n  @State numbers: string[] = [] // 定义一个状态变量numbers，用于存储展示的数字字符串数组\n\n  // 组件初始化时填充数据\n  aboutToAppear() {\n    for (let i = 1; i <= 30; i++) {\n      this.numbers.push(i + '') // 将1到30的数字转换为字符串并添加到numbers数组中\n    }\n  }\n\n  build() {\n    Scroll() { // 创建一个可滚动的容器\n      Column({ space: 5 }) { // 创建一个垂直布局容器，设置子组件之间的间距为5\n        Blank() // 插入一个空白组件，用于占位\n        Text('rowsTemplate、columnsTemplate都不设置layoutDirection、maxcount、minCount、cellLength才生效')\n          .fontSize(15).fontColor(0xCCCCCC).width('90%') // 创建一个文本组件，设置字体大小、颜色和宽度\n        \n        Grid() { // 创建一个网格布局容器\n          ForEach(this.numbers, (day: string) => { // 遍历numbers数组，为每个数字创建一个网格项\n            GridItem() { // 创建一个网格项\n              Text(day).fontSize(16).backgroundColor(0xF9CF93) // 创建一个文本组件，设置字体大小和背景颜色\n            }.width(40).height(80).borderWidth(2).borderColor(Color.Red) // 设置网格项的宽度、高度、边框宽度和颜色\n          }, (day: string) => day) // 指定key生成函数，确保每个网格项的唯一性\n        }\n        .height(300) // 设置网格高度为300\n        .columnsGap(10) // 设置列间距为10\n        .rowsGap(10) // 设置行间距为10\n        .backgroundColor(0xFAEEE0) // 设置背景颜色为0xFAEEE0\n        .maxCount(6) // 设置每行最多显示6个网格项\n        .minCount(2) // 设置每行最少显示2个网格项\n        .cellLength(0) // 设置网格单元长度为0，表示不限制\n        .layoutDirection(GridDirection.Row) // 设置网格布局方向为行优先\n      }\n      .width('90%').margin({ top: 5, left: 5, right: 5 }) // 设置容器的宽度为90%，并设置上下左右的边距\n      .align(Alignment.Center) // 设置容器内容居中对齐\n    }\n  }\n}"
        },
        {
            "description": "实现一个可拖拽的网格布局组件，支持用户通过拖拽GridItem来改变其位置。组件初始化时会生成15个数字，并以3列的形式展示在Grid中。用户可以通过拖拽GridItem来交换两个数字的位置。",
            "code": "@Entry\n@Component\nstruct GridExample {\n  @State numbers: string[] = [] // 存储GridItem显示的数字\n  scroller: Scroller = new Scroller() // 用于Grid的滚动控制\n  @State text: string = 'drag' // 拖拽过程中显示的文本\n\n  // 构建拖拽过程中显示的图片\n  @Builder pixelMapBuilder() { \n    Column() {\n      Text(this.text)\n        .fontSize(16)\n        .backgroundColor(0xF9CF93)\n        .width(80)\n        .height(80)\n        .textAlign(TextAlign.Center)\n    }\n  }\n\n  // 组件初始化时填充numbers数组\n  aboutToAppear() {\n    for (let i = 1; i <= 15; i++) {\n      this.numbers.push(i + '')\n    }\n  }\n\n  // 交换数组中两个元素的位置\n  changeIndex(index1: number, index2: number) { \n    let temp: string;\n    temp = this.numbers[index1];\n    this.numbers[index1] = this.numbers[index2];\n    this.numbers[index2] = temp;\n  }\n\n  // 构建Grid组件\n  build() {\n    Column({ space: 5 }) {\n      Grid(this.scroller) {\n        ForEach(this.numbers, (day: string) => {\n          GridItem() {\n            Text(day)\n              .fontSize(16)\n              .backgroundColor(0xF9CF93)\n              .width(80)\n              .height(80)\n              .textAlign(TextAlign.Center)\n          }\n        })\n      }\n      .columnsTemplate('1fr 1fr 1fr') // 设置列模板，每列宽度相等\n      .columnsGap(10) // 设置列间距\n      .rowsGap(10) // 设置行间距\n      .width('90%') // 设置宽度\n      .backgroundColor(0xFAEEE0) // 设置背景颜色\n      .height(300) // 设置高度\n      .editMode(true) // 设置Grid进入编辑模式\n      .onItemDragStart((event: ItemDragInfo, itemIndex: number) => { \n        this.text = this.numbers[itemIndex] // 设置拖拽过程中显示的文本\n        return this.pixelMapBuilder() // 返回拖拽过程中显示的图片\n      })\n      .onItemDrop((event: ItemDragInfo, itemIndex: number, insertIndex: number, isSuccess: boolean) => { \n        if (!isSuccess || insertIndex >= this.numbers.length) {\n          return\n        }\n        console.info('beixiang' + itemIndex + '', insertIndex + '') \n        this.changeIndex(itemIndex, insertIndex) // 交换数组中两个元素的位置\n      })\n    }.width('100%').margin({ top: 5 })\n  }\n}"
        },
        {
            "description": "实现一个网格布局组件，支持通过双指缩放手势动态调整列数。组件包含一个文本提示、一个网格布局以及一个手势识别器。网格布局中的每个单元格显示一个数字，并支持通过双指缩放手势调整列数。调整后的列数会被持久化存储。",
            "code": "@Entry\n@Component\nstruct GridExample {\n  // 定义一个状态变量 numbers，用于存储显示的数字列表\n  @State numbers: String[] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19']\n  \n  // 定义一个状态变量 columns，用于存储当前的列数\n  @State columns: number = 2\n\n  // 组件即将显示时调用的方法，用于从AppStorage中读取上一次保存的列数\n  aboutToAppear() {\n    let lastCount = AppStorage.get<number>('columnsCount')\n    if (typeof lastCount != 'undefined') {\n      this.columns = lastCount\n    }\n  }\n\n  // 构建组件的UI结构\n  build() {\n    Column({ space: 5 }) {\n      // 显示一个文本提示，提示用户可以通过双指缩放改变列数\n      Row() {\n        Text('双指缩放改变列数')\n          .height('5%')\n          .margin({ top: 10, left: 20 })\n      }\n\n      // 创建一个网格布局，包含多个GridItem\n      Grid() {\n        // 使用ForEach循环生成网格中的每个单元格\n        ForEach(this.numbers, (day: string) => {\n          ForEach(this.numbers, (day: string) => {\n            GridItem() {\n              Text(day)\n                .fontSize(16)\n                .backgroundColor(0xF9CF93)\n                .width('100%')\n                .height(80)\n                .textAlign(TextAlign.Center)\n            }\n          }, (day: string) => day)\n        }, (day: string) => day)\n      }\n      .columnsTemplate('1fr '.repeat(this.columns)) // 根据columns变量动态设置列模板\n      .columnsGap(10) // 设置列之间的间距\n      .rowsGap(10) // 设置行之间的间距\n      .width('90%') // 设置网格的宽度\n      .scrollBar(BarState.Off) // 禁用滚动条\n      .backgroundColor(0xFAEEE0) // 设置网格的背景颜色\n      .height('100%') // 设置网格的高度\n      .cachedCount(3) // 设置缓存的GridItem数量\n\n      // 为网格添加动画效果\n      .animation({\n        duration: 300, // 动画持续时间\n        curve: Curve.Smooth // 动画曲线\n      })\n      // 为网格添加优先手势识别器，识别双指缩放手势\n      .priorityGesture(\n        PinchGesture()\n          .onActionEnd((event: GestureEvent) => {\n            console.info('end scale:' + event.scale)\n\n            // 根据缩放比例调整列数\n            if (event.scale > 2) {\n              this.columns--\n            } else if (event.scale < 0.6) {\n              this.columns++\n            }\n\n            // 限制列数的范围在1到4之间\n            this.columns = Math.min(4, Math.max(1, this.columns));\n            // 将调整后的列数保存到AppStorage中\n            AppStorage.setOrCreate<number>('columnsCount', this.columns)\n          })\n      )\n    }.width('100%').margin({ top: 5 }) // 设置Column的宽度和顶部外边距\n  }\n}"
        },
        {
            "description": "实现两个Grid布局组件，第一个Grid布局使用默认的行列模板，第二个Grid布局使用自定义的GridLayoutOptions来定义每个GridItem的位置和大小。",
            "code": "@Entry\n@Component\nstruct GridExample {\n  @State numbers1: String[] = ['0', '1', '2', '3', '4'] // 第一个Grid布局的数据源\n  @State numbers2: String[] = ['0', '1', '2', '3', '4', '5'] // 第二个Grid布局的数据源\n\n  // 定义GridLayoutOptions，使用onGetRectByIndex方法自定义每个GridItem的位置和大小\n  layoutOptions3: GridLayoutOptions = {\n    regularSize: [1, 1], // 默认的GridItem大小为1x1\n    onGetRectByIndex: (index: number) => {\n      if (index == 0)\n        return [0, 0, 1, 1] // 第一个GridItem的位置和大小\n      else if (index == 1)\n        return [0, 1, 2, 2] // 第二个GridItem的位置和大小\n      else if (index == 2)\n        return [0, 3, 3, 3] // 第三个GridItem的位置和大小\n      else if (index == 3)\n        return [3, 0, 3, 3] // 第四个GridItem的位置和大小\n      else if (index == 4)\n        return [4, 3, 2, 2] // 第五个GridItem的位置和大小\n      else\n        return [5, 5, 1, 1] // 第六个GridItem的位置和大小\n    }\n  }\n\n  build() {\n    Column({ space: 5 }) {\n      // 第一个Grid布局，使用默认的行列模板\n      Grid() {\n        ForEach(this.numbers1, (day: string) => {\n          ForEach(this.numbers1, (day: string) => {\n            GridItem() {\n              Text(day)\n                .fontSize(16)\n                .backgroundColor(0xF9CF93)\n                .width('100%')\n                .height('100%')\n                .textAlign(TextAlign.Center)\n            }\n          }, (day: string) => day)\n        }, (day: string) => day)\n      }\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr') // 定义列模板，每列宽度相等\n      .rowsTemplate('1fr 1fr 1fr 1fr 1fr') // 定义行模板，每行高度相等\n      .columnsGap(10) // 列间距\n      .rowsGap(10) // 行间距\n      .width('90%')\n      .backgroundColor(0xFAEEE0)\n      .height(300)\n\n      Text('GridLayoutOptions的使用：onGetRectByIndex。').fontColor(0xCCCCCC).fontSize(9).width('90%')\n\n      // 第二个Grid布局，使用自定义的GridLayoutOptions\n      Grid(undefined, this.layoutOptions3) {\n        ForEach(this.numbers2, (day: string) => {\n          GridItem() {\n            Text(day)\n              .fontSize(16)\n              .backgroundColor(0xF9CF93)\n              .width('100%')\n              .height(\"100%\")\n              .textAlign(TextAlign.Center)\n          }\n          .height(\"100%\")\n          .width('100%')\n        }, (day: string) => day)\n      }\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr 1fr') // 定义列模板，每列宽度相等\n      .rowsTemplate('1fr 1fr 1fr 1fr 1fr 1fr') // 定义行模板，每行高度相等\n      .columnsGap(10) // 列间距\n      .rowsGap(10) // 行间距\n      .width('90%')\n      .backgroundColor(0xFAEEE0)\n      .height(300)\n    }.width('100%').margin({ top: 5 })\n  }\n}"
        },
        {
            "description": "实现一个可滚动的网格组件，支持分页滚动、滚动事件监听、滚动条显示与更新等功能。网格中显示的数字通过嵌套的ForEach循环生成，每个数字占据一个GridItem。",
            "code": "@Entry\n@Component\nstruct GridExample {\n  @State numbers: String[] = ['0', '1', '2', '3', '4'] // 定义网格中显示的数字\n  scroller: Scroller = new Scroller() // 创建一个Scroller对象，用于控制滚动\n  @State gridPosition: number = 0 // 记录网格当前位置\n\n  build() {\n    Column({ space: 5 }) {\n      Text('scroll').fontColor(0xCCCCCC).fontSize(9).width('90%') // 显示一个文本标签\n\n      Grid(this.scroller) {\n        ForEach(this.numbers, (day: string) => {\n          ForEach(this.numbers, (day: string) => {\n            GridItem() {\n              Text(day)\n                .fontSize(16)\n                .backgroundColor(0xF9CF93)\n                .width('100%')\n                .height(80)\n                .textAlign(TextAlign.Center)\n            }\n          }, (day: string) => day)\n        }, (day: string) => day)\n      }\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr') // 设置网格的列模板，每列占据相等的宽度\n      .columnsGap(10) // 设置列间距\n      .rowsGap(10) // 设置行间距\n      .friction(0.6) // 设置滚动摩擦系数，影响滚动时的减速效果\n      .enableScrollInteraction(true) // 启用滚动交互\n      .supportAnimation(false) // 禁用滚动动画\n      .multiSelectable(false) // 禁用多选\n      .edgeEffect(EdgeEffect.Spring) // 设置边缘效果为弹性，当滚动到边缘时会有弹性效果\n      .scrollBar(BarState.On) // 显示滚动条\n      .scrollBarColor(Color.Grey) // 设置滚动条颜色\n      .scrollBarWidth(4) // 设置滚动条宽度\n      .width('90%') // 设置网格宽度\n      .backgroundColor(0xFAEEE0) // 设置背景颜色\n      .height(300) // 设置网格高度\n      .onScrollIndex((first: number, last: number) => {\n        console.info(first.toString()) // 打印当前可见区域的第一个元素索引\n        console.info(last.toString()) // 打印当前可见区域的最后一个元素索引\n      })\n      .onScrollBarUpdate((index: number, offset: number) => {\n        console.info(\"XXX\" + 'Grid onScrollBarUpdate,index : ' + index.toString() + \",offset\" + offset.toString()) // 打印滚动条更新时的索引和偏移量\n        return { totalOffset: (index / 5) * (80 + 10) - offset, totalLength: 80 * 5 + 10 * 4 } // 返回滚动条的总偏移量和总长度\n      })\n      .onDidScroll((scrollOffset: number, scrollState: ScrollState) => {\n        console.info(scrollOffset.toString()) // 打印当前滚动偏移量\n        console.info(scrollState.toString()) // 打印当前滚动状态\n      })\n      .onScrollStart(() => {\n        console.info(\"XXX\" + \"Grid onScrollStart\") // 打印滚动开始事件\n      })\n      .onScrollStop(() => {\n        console.info(\"XXX\" + \"Grid onScrollStop\") // 打印滚动停止事件\n      })\n      .onReachStart(() => {\n        this.gridPosition = 0 // 当滚动到顶部时，重置网格位置\n        console.info(\"XXX\" + \"Grid onReachStart\") // 打印滚动到顶部事件\n      })\n      .onReachEnd(() => {\n        this.gridPosition = 2 // 当滚动到底部时，设置网格位置\n        console.info(\"XXX\" + \"Grid onReachEnd\") // 打印滚动到底部事件\n      })\n\n      Button('next page')\n        .onClick(() => { \n          this.scroller.scrollPage({ next: true }) // 点击按钮时，滚动到下一页\n        })\n    }.width('100%').margin({ top: 5 })\n  }\n}"
        },
        {
            "description": "实现两个网格布局组件，分别使用不同的布局选项。第一个网格布局使用固定的规则大小和不规则索引，第二个网格布局使用回调函数动态计算不规则索引的大小。两个网格布局都支持多选和滚动功能。",
            "code": "@Entry\n@Component\nstruct GridExample {\n  // 定义一个状态变量，存储网格中显示的数字\n  @State numbers: String[] = ['0', '1', '2', '3', '4']\n  \n  // 创建一个Scroller对象，用于控制网格的滚动\n  scroller: Scroller = new Scroller()\n\n  // 定义第一个网格布局选项，设置规则大小为1x1，不规则索引为0和6\n  layoutOptions1: GridLayoutOptions = {\n    regularSize: [1, 1],        // 规则大小为1x1\n    irregularIndexes: [0, 6],   // 不规则索引为0和6\n  }\n\n  // 定义第二个网格布局选项，设置规则大小为1x1，不规则索引为0和7，并通过回调函数动态计算不规则索引的大小\n  layoutOptions2: GridLayoutOptions = {\n    regularSize: [1, 1],        // 规则大小为1x1\n    irregularIndexes: [0, 7],   // 不规则索引为0和7\n    onGetIrregularSizeByIndex: (index: number) => {\n      if (index === 0) {\n        return [1, 5] // 第一个不规则索引的大小为1x5\n      }\n      return [1, index % 6 + 1] // 其他不规则索引的大小为1x(index % 6 + 1)\n    }\n  }\n\n  build() {\n    Column({ space: 5 }) {\n      // 第一个Grid组件，使用layoutOptions1\n      Grid(this.scroller, this.layoutOptions1) {\n        ForEach(this.numbers, (day: string) => {\n          ForEach(this.numbers, (day: string) => {\n            GridItem() {\n              Text(day)\n                .fontSize(16)\n                .backgroundColor(0xF9CF93)\n                .width('100%')\n                .height(80)\n                .textAlign(TextAlign.Center)\n            }.selectable(false) // 设置GridItem不可选\n          }, (day: string) => day)\n        }, (day: string) => day)\n      }\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr') // 设置列模板，每列宽度相等\n      .columnsGap(10) // 设置列间距\n      .rowsGap(10) // 设置行间距\n      .multiSelectable(true) // 设置多选功能\n      .scrollBar(BarState.Off) // 隐藏滚动条\n      .width('90%') // 设置宽度为父容器的90%\n      .backgroundColor(0xFAEEE0) // 设置背景颜色\n      .height(300) // 设置高度为300\n\n      Text('scroll').fontColor(0xCCCCCC).fontSize(9).width('90%') // 显示文本“scroll”\n\n      // 第二个Grid组件，使用layoutOptions2\n      Grid(undefined, this.layoutOptions2) {\n        ForEach(this.numbers, (day: string) => {\n          ForEach(this.numbers, (day: string) => {\n            GridItem() {\n              Text(day)\n                .fontSize(16)\n                .backgroundColor(0xF9CF93)\n                .width('100%')\n                .height(80)\n                .textAlign(TextAlign.Center)\n            }\n          }, (day: string) => day)\n        }, (day: string) => day)\n      }\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr') // 设置列模板，每列宽度相等\n      .columnsGap(10) // 设置列间距\n      .rowsGap(10) // 设置行间距\n      .scrollBar(BarState.Off) // 隐藏滚动条\n      .width('90%') // 设置宽度为父容器的90%\n      .backgroundColor(0xFAEEE0) // 设置背景颜色\n      .height(300) // 设置高度为300\n    }.width('100%').margin({ top: 5 }) // 设置Column的宽度为100%，顶部外边距为5\n  }\n}"
        },
        {
            "description": "实现一个展示不同列模板模式的网格布局组件，通过三种不同的列模板模式（auto-fill, auto-fit, auto-stretch）展示数据。\n每个模式下，数据项以网格形式排列，并根据设定的列宽和模式自动调整列数和间距。",
            "code": "@Entry\n@Component\nstruct GridColumnsTemplate {\n  // 定义三个数据数组，分别用于三种不同的列模板模式\n  data: number[] = [0, 1, 2, 3, 4, 5]\n  data1: number[] = [0, 1, 2, 3, 4, 5]\n  data2: number[] = [0, 1, 2, 3, 4, 5]\n\n  build() {\n    Column({ space: 10 }) {\n      // 显示标题文本，说明auto-fill模式的功能\n      Text('auto-fill 根据设定的列宽自动计算列数').width('90%')\n      \n      // 使用auto-fill模式，根据设定的列宽自动计算列数\n      Grid() {\n        ForEach(this.data, (item: number) => {\n          GridItem() {\n            Text('N' + item).height(80) // 显示数据项的文本，高度为80\n          }\n          .backgroundColor(Color.Orange) // 设置背景颜色为橙色\n        })\n      }\n      .width('90%') // 设置网格宽度为父容器的90%\n      .border({ width: 1, color: Color.Black }) // 设置边框，宽度为1，颜色为黑色\n      .columnsTemplate('repeat(auto-fill, 70)') // 设置列模板为auto-fill，每列宽度为70\n      .columnsGap(10) // 设置列间距为10\n      .rowsGap(10) // 设置行间距为10\n      .height(150) // 设置网格高度为150\n\n      // 显示标题文本，说明auto-fit模式的功能\n      Text('auto-fit 先根据设定的列宽计算列数，余下的空间会均分到每一列中').width('90%')\n      \n      // 使用auto-fit模式，先根据设定的列宽计算列数，余下的空间会均分到每一列中\n      Grid() {\n        ForEach(this.data1, (item: number) => {\n          GridItem() {\n            Text('N' + item).height(80) // 显示数据项的文本，高度为80\n          }\n          .backgroundColor(Color.Orange) // 设置背景颜色为橙色\n        })\n      }\n      .width('90%') // 设置网格宽度为父容器的90%\n      .border({ width: 1, color: Color.Black }) // 设置边框，宽度为1，颜色为黑色\n      .columnsTemplate('repeat(auto-fit, 70)') // 设置列模板为auto-fit，每列宽度为70\n      .columnsGap(10) // 设置列间距为10\n      .rowsGap(10) // 设置行间距为10\n      .height(150) // 设置网格高度为150\n\n      // 显示标题文本，说明auto-stretch模式的功能\n      Text('auto-stretch 先根据设定的列宽计算列数，余下的空间会均分到每个列间距中').width('90%')\n      \n      // 使用auto-stretch模式，先根据设定的列宽计算列数，余下的空间会均分到每个列间距中\n      Grid() {\n        ForEach(this.data2, (item: number) => {\n          GridItem() {\n            Text('N' + item).height(80) // 显示数据项的文本，高度为80\n          }\n          .backgroundColor(Color.Orange) // 设置背景颜色为橙色\n        })\n      }\n      .width('90%') // 设置网格宽度为父容器的90%\n      .border({ width: 1, color: Color.Black }) // 设置边框，宽度为1，颜色为黑色\n      .columnsTemplate('repeat(auto-stretch, 70)') // 设置列模板为auto-stretch，每列宽度为70\n      .columnsGap(10) // 设置列间距为10\n      .rowsGap(10) // 设置行间距为10\n      .height(150) // 设置网格高度为150\n    }\n    .width('100%') // 设置列容器宽度为100%\n    .height('100%') // 设置列容器高度为100%\n  }\n}"
        },
        {
            "description": "实现一个包含多个嵌套滚动组件的复杂布局。顶层是一个Stack组件，包含一个Column组件和一个Row组件。Column组件中包含一个List组件，List组件中包含两个ListItem组件，每个ListItem组件中包含一个Grid组件。Grid组件中包含多个GridItem组件，用于展示不同类型的内容。通过触摸事件和滚动事件实现嵌套滚动效果。",
            "code": "@Entry\n@Component\nstruct GridExample {\n  // 定义颜色数组，用于设置GridItem的背景颜色\n  @State colors: number[] = [0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F]\n  \n  // 定义数字数组，用于生成GridItem的内容\n  @State numbers: number[] = []\n  \n  // 定义垂直平移的偏移量，用于控制GridItem的平移效果\n  @State translateY: number = 0\n  \n  // 定义Scroller对象，用于控制List的滚动\n  private scroller: Scroller = new Scroller()\n  \n  // 定义Scroller对象，用于控制Grid的滚动\n  private gridScroller: Scroller = new Scroller()\n  \n  // 定义布尔变量，用于记录触摸事件是否为按下状态\n  private touchDown: boolean = false\n  \n  // 定义布尔变量，用于记录List的触摸事件是否为按下状态\n  private listTouchDown: boolean = false\n  \n  // 定义布尔变量，用于记录是否正在滚动\n  private scrolling: boolean = false\n\n  // 初始化数据，生成100个数字\n  aboutToAppear() {\n    for (let i = 0; i < 100; i++) {\n      this.numbers.push(i)\n    }\n  }\n\n  build() {\n    Stack() {\n      Column() {\n        Row() {\n          Text('Head')\n        }\n\n        Column() {\n          List({ scroller: this.scroller }) {\n            ListItem() {\n              Grid() {\n                GridItem() {\n                  Text('GoodsTypeList1')\n                }\n                .backgroundColor(this.colors[0]) // 设置GridItem的背景颜色\n                .columnStart(0) // 设置GridItem的起始列\n                .columnEnd(1) // 设置GridItem的结束列\n\n                GridItem() {\n                  Text('GoodsTypeList2')\n                }\n                .backgroundColor(this.colors[1])\n                .columnStart(0)\n                .columnEnd(1)\n\n                GridItem() {\n                  Text('GoodsTypeList3')\n                }\n                .backgroundColor(this.colors[2])\n                .columnStart(0)\n                .columnEnd(1)\n\n                GridItem() {\n                  Text('GoodsTypeList4')\n                }\n                .backgroundColor(this.colors[3])\n                .columnStart(0)\n                .columnEnd(1)\n\n                GridItem() {\n                  Text('GoodsTypeList5')\n                }\n                .backgroundColor(this.colors[4])\n                .columnStart(0)\n                .columnEnd(1)\n              }\n              .scrollBar(BarState.Off) // 关闭滚动条\n              .columnsGap(15) // 设置列间距\n              .rowsGap(10) // 设置行间距\n              .rowsTemplate('1fr 1fr 1fr 1fr 1fr') // 设置行模板\n              .columnsTemplate('1fr') // 设置列模板\n              .width('100%') // 设置宽度为100%\n              .height(200) // 设置高度为200\n            }\n\n            ListItem() {\n              Grid(this.gridScroller) {\n                ForEach(this.numbers, (item: number) => {\n                  GridItem() {\n                    Text(item + '')\n                      .fontSize(16) // 设置字体大小\n                      .backgroundColor(0xF9CF93) // 设置背景颜色\n                      .width('100%') // 设置宽度为100%\n                      .height('100%') // 设置高度为100%\n                      .textAlign(TextAlign.Center) // 设置文本居中对齐\n                  }\n                  .width('100%')\n                  .height(40)\n                  .shadow({ radius: 10, color: '#909399', offsetX: 1, offsetY: 1 }) // 设置阴影效果\n                  .borderRadius(10) // 设置圆角\n                  .translate({ x: 0, y: this.translateY }) // 设置平移效果\n                }, (item: string) => item)\n              }\n              .columnsTemplate('1fr 1fr') // 设置列模板\n              .friction(0.3) // 设置摩擦系数\n              .columnsGap(15) // 设置列间距\n              .rowsGap(10) // 设置行间距\n              .scrollBar(BarState.Off) // 关闭滚动条\n              .width('100%') // 设置宽度为100%\n              .height('100%') // 设置高度为100%\n              .layoutDirection(GridDirection.Column) // 设置布局方向为列\n              .nestedScroll({\n                scrollForward: NestedScrollMode.PARENT_FIRST, // 设置向前滚动时优先滚动父组件\n                scrollBackward: NestedScrollMode.SELF_FIRST // 设置向后滚动时优先滚动自身\n              })\n              .onTouch((event: TouchEvent) => {\n                if (event.type == TouchType.Down) {\n                  this.listTouchDown = true // 记录触摸事件为按下状态\n                } else if (event.type == TouchType.Up) {\n                  this.listTouchDown = false // 记录触摸事件为抬起状态\n                }\n              })\n            }\n          }\n          .scrollBar(BarState.Off) // 关闭滚动条\n          .edgeEffect(EdgeEffect.None) // 关闭边缘效果\n          .onTouch((event: TouchEvent) => {\n            if (event.type == TouchType.Down) {\n              this.touchDown = true // 记录触摸事件为按下状态\n            } else if (event.type == TouchType.Up) {\n              this.touchDown = false // 记录触摸事件为抬起状态\n            }\n          })\n          .onScrollFrameBegin((offset: number, state: ScrollState) => {\n            if (this.scrolling && offset > 0) {\n              let newOffset = this.scroller.currentOffset().yOffset\n              if (newOffset >= 590) {\n                this.gridScroller.scrollBy(0, offset) // 滚动Grid组件\n                return { offsetRemain: 0 } // 返回剩余偏移量为0\n              } else if (newOffset + offset > 590) {\n                this.gridScroller.scrollBy(0, newOffset + offset - 590)\n                return { offsetRemain: 590 - newOffset } // 返回剩余偏移量\n              }\n            }\n            return { offsetRemain: offset } // 返回剩余偏移量\n          })\n          .onScrollStart(() => {\n            if (this.touchDown && !this.listTouchDown) {\n              this.scrolling = true // 记录正在滚动\n            }\n          })\n          .onScrollStop(() => {\n            this.scrolling = false // 记录滚动停止\n          })\n        }\n        .width('100%') // 设置宽度为100%\n        .height('100%') // 设置高度为100%\n        .padding({ left: 10, right: 10 }) // 设置左右内边距\n      }\n\n      Row() {\n        Text('Top')\n          .width(30) // 设置宽度为30\n          .height(30) // 设置高度为30\n          .borderRadius(50) // 设置圆角\n      }\n      .padding(5) // 设置内边距\n      .borderRadius(50) // 设置圆角\n      .backgroundColor('#ffffff') // 设置背景颜色\n      .shadow({ radius: 10, color: '#909399', offsetX: 1, offsetY: 1 }) // 设置阴影效果\n      .margin({ right: 22, bottom: 15 }) // 设置外边距\n      .onClick(() => {\n        this.scroller.scrollTo({ xOffset: 0, yOffset: 0 }) // 滚动到顶部\n        this.gridScroller.scrollTo({ xOffset: 0, yOffset: 0 }) // 滚动到顶部\n      })\n    }\n    .align(Alignment.BottomEnd) // 设置对齐方式为右下角\n  }\n}"
        }
    ],
    "GridItem": [
        {
            "description": "实现一个网格布局组件，展示数字和特定文本的排列。网格布局由5列和5行组成，每个单元格显示一个数字或特定文本，并具有不同的背景颜色。",
            "code": "@Entry\n@Component\nstruct GridItemExample {\n  @State numbers: string[] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\"]\n\n  build() {\n    Column() {\n      Grid() {\n        // 第一个GridItem，显示文本'4'，占据第1行第1列\n        GridItem() {\n          Text('4')\n            .fontSize(16)\n            .backgroundColor(0xFAEEE0) // 设置背景颜色\n            .width('100%')\n            .height('100%')\n            .textAlign(TextAlign.Center) // 文本居中对齐\n        }.rowStart(1).rowEnd(2).columnStart(1).columnEnd(2) \n\n        // 使用ForEach循环生成多个GridItem，每个GridItem显示一个数字\n        ForEach(this.numbers, (item: string) => {\n          GridItem() {\n            Text(item)\n              .fontSize(16)\n              .backgroundColor(0xF9CF93) // 设置背景颜色\n              .width('100%')\n              .height('100%')\n              .textAlign(TextAlign.Center) // 文本居中对齐\n          }\n        }, (item: string) => item)\n\n        // 最后一个GridItem，显示文本'5'，占据第1列到第4列\n        GridItem() {\n          Text('5')\n            .fontSize(16)\n            .backgroundColor(0xDBD0C0) // 设置背景颜色\n            .width('100%')\n            .height('100%')\n            .textAlign(TextAlign.Center) // 文本居中对齐\n        }.columnStart(1).columnEnd(4) \n      }\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr') // 设置5列，每列宽度相等\n      .rowsTemplate('1fr 1fr 1fr 1fr 1fr') // 设置5行，每行高度相等\n      .width('90%').height(300) // 设置网格的宽度和高度\n    }.width('100%').margin({ top: 5 }) // 设置Column的宽度并添加顶部外边距\n  }\n}"
        },
        {
            "description": "实现两个网格布局组件，每个网格布局包含9个网格项，每个网格项显示一个数字。第一个网格布局的网格项样式为NONE，第二个网格布局的网格项样式为PLAIN。每个网格布局的列和行都设置为1fr，列间距和行间距为4vp，宽度为60%，高度为150vp，背景颜色为0xFAEEE0，内边距为4vp。整个组件的宽度为100%，上边距为5vp。",
            "code": "@Entry\n@Component\nstruct GridItemExample {\n  @State numbers: String[] = ['0', '1', '2'] // 定义一个状态变量numbers，包含三个字符串元素'0', '1', '2'\n\n  build() {\n    Column({ space: 5 }) { // 创建一个垂直布局，子组件之间的间距为5vp\n      Grid() { // 创建第一个网格布局\n        ForEach(this.numbers, (day: string) => { // 遍历numbers数组，day为当前遍历的元素\n          ForEach(this.numbers, (day: string) => { // 再次遍历numbers数组，day为当前遍历的元素\n            GridItem({style:GridItemStyle.NONE}) { // 创建一个网格项，样式为NONE\n              Text(day) // 创建一个文本组件，显示当前遍历的元素day\n                .fontSize(16) // 设置文本字体大小为16\n                .width('100%') // 设置文本宽度为父容器的100%\n                .height('100%') // 设置文本高度为父容器的100%\n                .textAlign(TextAlign.Center) // 设置文本居中对齐\n                .focusable(true) // 设置文本可聚焦\n            }\n            .backgroundColor(0xF9CF93) // 设置网格项的背景颜色为0xF9CF93\n          }, (day: string) => day) // 第二个ForEach的key函数，返回当前遍历的元素day\n        }, (day: string) => day) // 第一个ForEach的key函数，返回当前遍历的元素day\n      }\n      .columnsTemplate('1fr 1fr 1fr') // 设置网格布局的列模板，每列宽度为1fr\n      .rowsTemplate('1fr 1fr') // 设置网格布局的行模板，每行高度为1fr\n      .columnsGap(4) // 设置列间距为4vp\n      .rowsGap(4) // 设置行间距为4vp\n      .width('60%') // 设置网格布局的宽度为60%\n      .backgroundColor(0xFAEEE0) // 设置网格布局的背景颜色为0xFAEEE0\n      .height(150) // 设置网格布局的高度为150vp\n      .padding('4vp') // 设置网格布局的内边距为4vp\n\n      Grid() { // 创建第二个网格布局\n        ForEach(this.numbers, (day: string) => { // 遍历numbers数组，day为当前遍历的元素\n          ForEach(this.numbers, (day: string) => { // 再次遍历numbers数组，day为当前遍历的元素\n            GridItem({style:GridItemStyle.PLAIN}) { // 创建一个网格项，样式为PLAIN\n              Text(day) // 创建一个文本组件，显示当前遍历的元素day\n                .fontSize(16) // 设置文本字体大小为16\n                .width('100%') // 设置文本宽度为父容器的100%\n                .height('100%') // 设置文本高度为父容器的100%\n                .textAlign(TextAlign.Center) // 设置文本居中对齐\n                .focusable(true) // 设置文本可聚焦\n            }\n            .backgroundColor(0xF9CF93) // 设置网格项的背景颜色为0xF9CF93\n          }, (day: string) => day) // 第二个ForEach的key函数，返回当前遍历的元素day\n        }, (day: string) => day) // 第一个ForEach的key函数，返回当前遍历的元素day\n      }\n      .columnsTemplate('1fr 1fr 1fr') // 设置网格布局的列模板，每列宽度为1fr\n      .rowsTemplate('1fr 1fr') // 设置网格布局的行模板，每行高度为1fr\n      .columnsGap(4) // 设置列间距为4vp\n      .rowsGap(4) // 设置行间距为4vp\n      .width('60%') // 设置网格布局的宽度为60%\n      .backgroundColor(0xFAEEE0) // 设置网格布局的背景颜色为0xFAEEE0\n      .height(150) // 设置网格布局的高度为150vp\n      .padding('4vp') // 设置网格布局的内边距为4vp\n    }\n    .width('100%') // 设置整个Column组件的宽度为100%\n    .margin({ top: 5 }) // 设置整个Column组件的上边距为5vp\n  }\n}"
        }
    ],
    "Hyperlink": [
        {
            "description": "实现一个包含两个Hyperlink组件的示例页面。第一个Hyperlink包含一个图片，点击后跳转到指定URL。第二个Hyperlink包含一个文本，点击后跳转到指定URL，并且文本颜色为蓝色。整个页面居中显示。",
            "code": "@Entry // 标记该组件为页面的入口组件\n@Component // 标记该结构体为一个自定义组件\nstruct HyperlinkExample {\n  build() {\n    Column() { // 创建一个垂直布局的容器\n      Column() { // 创建一个垂直布局的子容器\n        Hyperlink('https://example.com/') { // 创建一个Hyperlink组件，点击后跳转到'https://example.com/'\n          Image($r('app.media.bg')) // 创建一个Image组件，显示资源文件中的图片\n            .width(200) // 设置图片宽度为200像素\n            .height(100) // 设置图片高度为100像素\n        }\n      }\n\n      Column() { // 创建另一个垂直布局的子容器\n        Hyperlink('https://example.com/', 'Go to the developer website') { // 创建一个Hyperlink组件，点击后跳转到'https://example.com/'，并显示文本'Go to the developer website'\n        }\n        .color(Color.Blue) // 设置Hyperlink文本颜色为蓝色\n      }\n    }\n    .width('100%') // 设置容器的宽度为100%\n    .height('100%') // 设置容器的高度为100%\n    .justifyContent(FlexAlign.Center) // 设置容器内容居中对齐\n  }\n}"
        }
    ],
    "List": [
        {
            "description": "实现一个水平滚动的列表组件，支持弹性边缘效果和中心对齐的滚动对齐方式。列表项通过ForEach组件动态生成，每个列表项显示一个数字，并具有圆角背景和居中对齐的文本。",
            "code": "@Entry\n@Component\nstruct ListExample {\n  // 定义一个私有数组，用于存储列表项的数据\n  private arr: number[] = []\n  // 定义一个Scroller对象，用于控制列表的滚动行为\n  private scrollerForList: Scroller = new Scroller()\n\n  // 组件生命周期方法，在组件即将显示时执行\n  aboutToAppear() {\n    // 循环20次，将0到19的数字添加到数组中\n    for (let i = 0; i < 20; i++) {\n      this.arr.push(i)\n    }\n  }\n\n  // 构建组件的UI结构\n  build() {\n    Column() {\n      Row() {\n        // 创建一个List组件，设置项之间的间距为20，初始显示第3项，并绑定Scroller对象\n        List({ space: 20, initialIndex: 3, scroller: this.scrollerForList }) {\n          // 使用ForEach组件遍历数组，生成列表项\n          ForEach(this.arr, (item: number) => {\n            ListItem() {\n              // 创建一个Text组件，显示当前项的数字\n              Text('' + item)\n                .width('100%').height(100).fontSize(16)\n                .textAlign(TextAlign.Center)\n            }\n            .borderRadius(10).backgroundColor(0xFFFFFF) // 设置列表项的圆角和背景色\n            .width('60%') // 设置列表项的宽度为父容器的60%\n            .height('80%') // 设置列表项的高度为父容器的80%\n          }, (item: number) => JSON.stringify(item)) // 使用JSON.stringify生成唯一键\n        }\n        .chainAnimation(true) // 启用列表项的链式动画\n        .edgeEffect(EdgeEffect.Spring) // 设置边缘效果为弹性效果\n        .listDirection(Axis.Horizontal) // 设置列表方向为水平方向\n        .height('100%') // 设置列表高度为父容器的100%\n        .width('100%') // 设置列表宽度为父容器的100%\n        .scrollSnapAlign(ScrollSnapAlign.CENTER) // 设置滚动对齐方式为中心对齐\n        .borderRadius(10) // 设置列表的圆角\n        .backgroundColor(0xDCDCDC) // 设置列表的背景色\n      }\n      .width('100%') // 设置Row组件的宽度为父容器的100%\n      .height('100%') // 设置Row组件的高度为父容器的100%\n      .backgroundColor(0xDCDCDC) // 设置Row组件的背景色\n      .padding({ top: 10 }) // 设置顶部内边距为10\n    }\n  }\n}"
        },
        {
            "description": "实现一个纵向滚动的列表组件，列表项为数字0到9，支持滚动时回调索引、可见内容变化和滚动状态。",
            "code": "@Entry\n@Component\nstruct ListExample {\n  // 定义一个数组，包含数字0到9\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n  build() {\n    Column() {\n      // 创建一个纵向列表，设置项之间的间距为20，初始索引为0\n      List({ space: 20, initialIndex: 0 }) {\n        // 使用ForEach循环遍历数组，生成列表项\n        ForEach(this.arr, (item: number) => {\n          ListItem() {\n            // 创建一个文本组件，显示当前数组项的值\n            Text('' + item)\n              .width('100%').height(100).fontSize(16)\n              .textAlign(TextAlign.Center).borderRadius(10).backgroundColor(0xFFFFFF)\n          }\n        }, (item: string) => item) // 使用数组项的值作为唯一标识符\n      }\n      .listDirection(Axis.Vertical) // 设置列表方向为纵向\n      .scrollBar(BarState.Off) // 关闭滚动条\n      .friction(0.6) // 设置滚动摩擦系数\n      .divider({ strokeWidth: 2, color: 0xFFFFFF, startMargin: 20, endMargin: 20 }) // 设置列表项之间的分隔线\n      .edgeEffect(EdgeEffect.Spring) // 设置边缘效果为弹性回弹\n      .onScrollIndex((firstIndex: number, lastIndex: number, centerIndex: number) => {\n        // 当滚动索引发生变化时，回调当前显示的第一个、最后一个和中间项的索引\n        console.info('first' + firstIndex)\n        console.info('last' + lastIndex)\n        console.info('center' + centerIndex)\n      })\n      .onScrollVisibleContentChange((start: VisibleListContentInfo, end: VisibleListContentInfo) => {\n        // 当可见内容发生变化时，回调开始和结束的可见内容信息\n        console.log(' start index: ' + start.index +\n                    ' start item group area: ' + start.itemGroupArea +\n                    ' start index in group: ' + start.itemIndexInGroup)\n        console.log(' end index: ' + end.index +\n                    ' end item group area: ' + end.itemGroupArea +\n                    ' end index in group: ' + end.itemIndexInGroup)\n      })\n      .onDidScroll((scrollOffset: number, scrollState: ScrollState) => {\n        // 当滚动发生时，回调当前的滚动偏移量和滚动状态\n        console.info(`onScroll scrollState = ScrollState` + scrollState + `, scrollOffset = ` + scrollOffset)\n      })\n      .width('90%') // 设置列表宽度为父容器的90%\n    }\n    .width('100%') // 设置列的宽度为父容器的100%\n    .height('100%') // 设置列的高度为父容器的100%\n    .backgroundColor(0xDCDCDC) // 设置背景颜色\n    .padding({ top: 5 }) // 设置顶部内边距为5\n  }\n}"
        },
        {
            "description": "实现一个可滚动的列表组件，支持在子组件高度不一致时调用scrollTo接口也可以跳转准确。列表中的子组件高度可以通过按钮动态调整，并且可以通过按钮调用scrollTo方法跳转到指定位置。",
            "code": "@Entry\n@Component\nstruct ListExample {\n  // 定义一个数组，用于存储列表项的数据\n  private arr: number[] = []\n  \n  // 创建一个ListScroller对象，用于控制列表的滚动\n  private scroller: ListScroller = new ListScroller()\n  \n  // 定义列表项之间的间距，初始值为10\n  @State listSpace: number = 10\n  \n  // 定义列表子组件的主轴尺寸，初始值为100\n  @State listChildrenSize: ChildrenMainSize = new ChildrenMainSize(100)\n  \n  // 组件即将显示时执行的初始化操作\n  aboutToAppear(){\n    // 向数组中添加10个数字\n    for (let i = 0; i < 10; i++) {\n      this.arr.push(i)\n    }\n    \n    // 设置前5个列表项的高度为300\n    this.listChildrenSize.splice(0, 5, [300, 300, 300, 300, 300])\n  }\n  \n  build() {\n    Column() {\n      // 创建一个List组件，设置间距、初始索引、滚动控制器\n      List({ space: this.listSpace, initialIndex: 4, scroller: this.scroller }) {\n        // 使用ForEach循环遍历数组，生成列表项\n        ForEach(this.arr, (item: number) => {\n          ListItem() {\n            // 创建一个Text组件，显示列表项的内容\n            Text('item-' + item)\n              .height( item < 5 ? 300 : this.listChildrenSize.childDefaultSize) // 根据条件设置高度\n              .width('90%') // 设置宽度为90%\n              .fontSize(16) // 设置字体大小为16\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n              .borderRadius(10) // 设置边框圆角为10\n              .backgroundColor(0xFFFFFF) // 设置背景颜色为白色\n          }\n        }, (item: string) => item) // 指定键值生成函数\n      }\n      .backgroundColor(Color.Gray) // 设置列表背景颜色为灰色\n      .layoutWeight(1) // 设置布局权重为1\n      .scrollBar(BarState.On) // 显示滚动条\n      .childrenMainSize(this.listChildrenSize) // 设置子组件的主轴尺寸\n      .alignListItem(ListItemAlign.Center) // 设置列表项居中对齐\n      \n      // 创建一个Row组件，包含三个按钮\n      Row(){\n        // 第一个按钮，点击后增加列表项的高度\n        Button() { Text('item size + 50') }.onClick(()=>{\n          this.listChildrenSize.childDefaultSize += 50\n        }).height('50%').width('30%')\n        \n        // 第二个按钮，点击后减少列表项的高度\n        Button() { Text('item size - 50') }.onClick(()=>{\n          if (this.listChildrenSize.childDefaultSize === 0) {\n            return\n          }\n          this.listChildrenSize.childDefaultSize -= 50\n        }).height('50%').width('30%')\n        \n        // 第三个按钮，点击后调用scrollTo方法跳转到指定位置\n        Button() { Text('scrollTo (0, 310)') }.onClick(()=>{\n          this.scroller.scrollTo({xOffset: 0, yOffset: 310})\n        }).height('50%').width('30%')\n      }.height('20%') // 设置Row的高度为20%\n    }\n  }\n}"
        },
        {
            "description": "实现一个可滚动的列表组件，支持列表项的对齐方式切换。列表项以固定宽度和高度显示，列表本身具有固定的宽度和高度，并且具有红色边框。列表项之间有20像素的间距，列表项的边框为绿色。列表项的内容为数字字符串，居中显示。列表项的对齐方式可以通过点击按钮进行切换，支持三种对齐方式：Start、Center、End。",
            "code": "@Entry\n@Component\nstruct ListLanesExample {\n  // 定义一个状态变量arr，用于存储列表项的内容，初始值为0到19的数字字符串数组\n  @State arr: string[] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"]\n  \n  // 定义一个状态变量alignListItem，用于存储列表项的对齐方式，初始值为ListItemAlign.Start\n  @State alignListItem: ListItemAlign = ListItemAlign.Start\n\n  build() {\n    Column() {\n      // 创建一个List组件，设置列表项之间的间距为20像素，初始索引为0\n      List({ space: 20, initialIndex: 0 }) {\n        // 使用ForEach循环遍历arr数组，生成列表项\n        ForEach(this.arr, (item: string) => {\n          // 创建一个ListItem组件，包含一个Text组件，显示当前数组元素的值\n          ListItem() {\n            Text('' + item)\n              .width('100%') // 设置Text组件的宽度为100%\n              .height(100) // 设置Text组件的高度为100像素\n              .fontSize(16) // 设置Text组件的字体大小为16像素\n              .textAlign(TextAlign.Center) // 设置Text组件的文本对齐方式为居中\n              .borderRadius(10) // 设置Text组件的边框圆角为10像素\n              .backgroundColor(0xFFFFFF) // 设置Text组件的背景颜色为白色\n          }\n          .border({ width: 2, color: Color.Green }) // 设置ListItem组件的边框宽度为2像素，颜色为绿色\n        }, (item: string) => item) // 使用数组元素的值作为唯一标识符\n      }\n      .height(300) // 设置List组件的高度为300像素\n      .width(\"90%\") // 设置List组件的宽度为父容器的90%\n      .friction(0.6) // 设置List组件的摩擦系数为0.6，影响滚动时的减速效果\n      .border({ width: 3, color: Color.Red }) // 设置List组件的边框宽度为3像素，颜色为红色\n      .lanes({ minLength: 40, maxLength: 40 }) // 设置List组件的行宽为40像素，最小和最大值相同，表示固定行宽\n      .alignListItem(this.alignListItem) // 设置List组件的列表项对齐方式为当前的alignListItem值\n      .scrollBar(BarState.Off) // 设置List组件的滚动条状态为关闭\n\n      // 创建一个Button组件，显示当前的alignListItem值，并绑定点击事件\n      Button(\"点击更改alignListItem:\" + this.alignListItem).onClick(() => {\n        // 根据当前的alignListItem值切换到下一个对齐方式\n        if (this.alignListItem == ListItemAlign.Start) {\n          this.alignListItem = ListItemAlign.Center\n        } else if (this.alignListItem == ListItemAlign.Center) {\n          this.alignListItem = ListItemAlign.End\n        } else {\n          this.alignListItem = ListItemAlign.Start\n        }\n      })\n    }\n    .width('100%') // 设置Column组件的宽度为100%\n    .height('100%') // 设置Column组件的高度为100%\n    .backgroundColor(0xDCDCDC) // 设置Column组件的背景颜色为浅灰色\n    .padding({ top: 5 }) // 设置Column组件的上内边距为5像素\n  }\n}"
        },
        {
            "description": "实现一个可编辑的列表组件，支持动态添加和删除列表项。列表项由数字组成，点击“edit list”按钮可以切换编辑状态，编辑状态下每个列表项右侧会出现一个删除按钮，点击删除按钮可以删除对应的列表项。",
            "code": "@Entry\n@Component\nstruct ListExample {\n  // 定义一个状态变量 arr，用于存储列表项的数据，初始值为 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  @State arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  \n  // 定义一个状态变量 editFlag，用于控制列表的编辑状态，初始值为 false\n  @State editFlag: boolean = false\n\n  build() {\n    // 使用 Stack 布局，对齐方式为 Alignment.TopStart\n    Stack({ alignContent: Alignment.TopStart }) {\n      // 使用 Column 布局，垂直排列子组件\n      Column() {\n        // 创建一个 List 组件，设置项之间的间距为 20，初始索引为 0\n        List({ space: 20, initialIndex: 0 }) {\n          // 使用 ForEach 循环遍历 arr 数组，生成列表项\n          ForEach(this.arr, (item: number, index?: number) => {\n            // 每个列表项使用 ListItem 组件包裹\n            ListItem() {\n              // 使用 Flex 布局，方向为行（水平排列），对齐方式为居中\n              Flex({ direction: FlexDirection.Row, alignItems: ItemAlign.Center }) {\n                // 显示列表项的数字内容\n                Text('' + item)\n                  .width('100%') // 设置文本宽度为 100%\n                  .height(80) // 设置文本高度为 80\n                  .fontSize(20) // 设置字体大小为 20\n                  .textAlign(TextAlign.Center) // 设置文本居中对齐\n                  .borderRadius(10) // 设置文本框的圆角半径为 10\n                  .backgroundColor(0xFFFFFF) // 设置文本框的背景颜色为白色\n                  .flexShrink(1) // 设置文本框在 Flex 布局中的收缩比例为 1\n                \n                // 如果 editFlag 为 true，显示删除按钮\n                if (this.editFlag) {\n                  Button() {\n                    Text(\"delete\").fontSize(16) // 设置按钮文本为 \"delete\"，字体大小为 16\n                  }.width('30%').height(40) // 设置按钮宽度为 30%，高度为 40\n                  .onClick(() => {\n                    // 点击按钮时，删除对应的列表项\n                    if (index != undefined) {\n                      console.info(this.arr[index] + 'Delete') // 输出删除信息到控制台\n                      this.arr.splice(index, 1) // 从数组中删除对应项\n                      console.info(JSON.stringify(this.arr)) // 输出删除后的数组到控制台\n                      this.editFlag = false // 关闭编辑状态\n                    }\n                  }).stateEffect(true) // 设置按钮的 stateEffect 为 true，表示按钮状态变化时会触发重新渲染\n                }\n              }\n            }\n          }, (item: string) => item) // 使用 item 作为 key，确保列表项的唯一性\n        }.width('90%') // 设置 List 组件的宽度为 90%\n        .scrollBar(BarState.Off) // 关闭滚动条\n        .friction(0.6) // 设置列表的摩擦系数为 0.6\n      }.width('100%') // 设置 Column 组件的宽度为 100%\n\n      // 创建一个按钮，用于切换列表的编辑状态\n      Button('edit list')\n        .onClick(() => {\n          // 点击按钮时，切换 editFlag 的值\n          this.editFlag = !this.editFlag\n        }).margin({ top: 5, left: 20 }) // 设置按钮的上边距为 5，左边距为 20\n    }.width('100%').height('100%').backgroundColor(0xDCDCDC).padding({ top: 5 }) // 设置 Stack 组件的宽度、高度、背景颜色和上边距\n  }\n}"
        }
    ],
    "ListItem": [
        {
            "description": "实现一个可滚动的列表组件，展示一个包含数字的列表项。列表项之间有20像素的间距，初始索引为0。列表项的背景色为白色，字体大小为16，文本居中对齐，边框圆角为10像素。列表的宽度为90%，隐藏滚动条。整个组件的背景色为浅灰色，顶部有5像素的内边距。",
            "code": "@Entry\n@Component\nstruct ListItemExample {\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] // 定义一个包含数字的数组\n\n  build() {\n    Column() {\n      List({ space: 20, initialIndex: 0 }) { // 创建一个列表组件，列表项之间的间距为20像素，初始索引为0\n        ForEach(this.arr, (item: number) => { // 遍历数组中的每个元素\n          ListItem() { // 创建一个列表项\n            Text('' + item) // 创建一个文本组件，显示当前数组元素的值\n              .width('100%') // 设置文本组件的宽度为100%\n              .height(100) // 设置文本组件的高度为100像素\n              .fontSize(16) // 设置文本的字体大小为16像素\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n              .borderRadius(10) // 设置文本组件的边框圆角为10像素\n              .backgroundColor(0xFFFFFF) // 设置文本组件的背景色为白色\n          }\n        }, (item: string) => item) // 使用数组元素的值作为列表项的唯一标识\n      }.width('90%') // 设置列表的宽度为90%\n      .scrollBar(BarState.Off) // 隐藏列表的滚动条\n    }.width('100%').height('100%').backgroundColor(0xDCDCDC).padding({ top: 5 }) // 设置整个组件的宽度为100%，高度为100%，背景色为浅灰色，顶部内边距为5像素\n  }\n}"
        },
        {
            "description": "实现一个包含多个列表项的列表组件，支持多选功能。列表项分为两组，每组包含三个列表项，其中一组使用卡片样式，另一组使用默认样式。列表项之间有4vp的间距，背景颜色为浅灰色。",
            "code": "@Entry\n@Component\nstruct ListItemExample3 {\n  build() {\n    Column() {\n      List({ space: \"4vp\", initialIndex: 0 }) { // 创建一个列表组件，设置列表项之间的间距为4vp，初始选中索引为0\n        ListItemGroup({ style: ListItemGroupStyle.CARD }) { // 创建一个列表项组，设置样式为卡片样式\n          ForEach([ListItemStyle.CARD, ListItemStyle.CARD, ListItemStyle.NONE], (itemStyle: number, index?: number) => { // 遍历数组，创建三个列表项，前两个使用卡片样式，最后一个使用默认样式\n            ListItem({ style: itemStyle }) { // 创建一个列表项，样式根据itemStyle变量决定\n              Text(\"\" + index) // 创建一个文本组件，显示当前列表项的索引\n                .width(\"100%\") // 设置文本组件的宽度为100%\n                .textAlign(TextAlign.Center) // 设置文本居中对齐\n            }\n          })\n        }\n        ForEach([ListItemStyle.CARD, ListItemStyle.CARD, ListItemStyle.NONE], (itemStyle: number, index?: number) => { // 遍历数组，创建三个列表项，前两个使用卡片样式，最后一个使用默认样式\n          ListItem({ style: itemStyle }) { // 创建一个列表项，样式根据itemStyle变量决定\n            Text(\"\" + index) // 创建一个文本组件，显示当前列表项的索引\n              .width(\"100%\") // 设置文本组件的宽度为100%\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n          }\n        })\n      }\n      .width('100%') // 设置列表组件的宽度为100%\n      .multiSelectable(true) // 设置列表支持多选功能\n      .backgroundColor(0xDCDCDC) // 设置列表的背景颜色为浅灰色\n    }\n    .width('100%') // 设置Column组件的宽度为100%\n    .padding({ top: 5 }) // 设置Column组件的上内边距为5vp\n  }\n}"
        },
        {
            "description": "实现一个带有滑动删除功能的列表组件。列表项可以滑动以显示删除和设置按钮，滑动过程中会触发状态变化，并在界面上显示相应的提示信息。",
            "code": "@Entry\n@Component\nstruct ListItemExample2 {\n  // 定义一个状态变量 arr，用于存储列表项的数据\n  @State arr: number[] = [0, 1, 2, 3, 4]\n  \n  // 定义一个状态变量 enterEndDeleteAreaString，用于存储滑动进入删除区域时的提示信息\n  @State enterEndDeleteAreaString: string = \"not enterEndDeleteArea\"\n  \n  // 定义一个状态变量 exitEndDeleteAreaString，用于存储滑动退出删除区域时的提示信息\n  @State exitEndDeleteAreaString: string = \"not exitEndDeleteArea\"\n\n  // 定义一个 Builder 方法 itemEnd，用于生成列表项右侧的删除和设置按钮\n  @Builder itemEnd() {\n    Row() {\n      Button(\"Delete\").margin(\"4vp\") // 创建一个删除按钮，并设置边距\n      Button(\"Set\").margin(\"4vp\") // 创建一个设置按钮，并设置边距\n    }.padding(\"4vp\").justifyContent(FlexAlign.SpaceEvenly) // 设置按钮容器的内边距和对齐方式\n  }\n\n  // 定义组件的 build 方法，用于构建 UI 结构\n  build() {\n    Column() {\n      List({ space: 10 }) { // 创建一个列表组件，设置列表项之间的间距为 10\n        ForEach(this.arr, (item: number) => { // 遍历 arr 数组，生成列表项\n          ListItem() {\n            Text(\"item\" + item) // 创建一个文本组件，显示列表项的内容\n              .width('100%') // 设置文本组件的宽度为 100%\n              .height(100) // 设置文本组件的高度为 100\n              .fontSize(16) // 设置文本的字体大小为 16\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n              .borderRadius(10) // 设置文本组件的圆角半径为 10\n              .backgroundColor(0xFFFFFF) // 设置文本组件的背景颜色为白色\n          }\n          .transition({ type: TransitionType.Delete, opacity: 0 }) // 设置列表项删除时的过渡动画，透明度从 1 变为 0\n          .swipeAction({\n            end: {\n              builder: () => { this.itemEnd() }, // 设置滑动时显示的按钮区域\n              onAction: () => { // 定义滑动操作的回调函数\n                animateTo({ duration: 1000 }, () => { // 设置动画持续时间为 1000ms\n                  let index = this.arr.indexOf(item) // 获取当前列表项的索引\n                  this.arr.splice(index, 1) // 从数组中删除当前列表项\n                })\n              },\n              actionAreaDistance: 56, // 设置滑动操作区域的宽度为 56\n              onEnterActionArea: () => { // 定义进入滑动操作区域的回调函数\n                this.enterEndDeleteAreaString = \"enterEndDeleteArea\" // 更新进入滑动操作区域的状态提示信息\n                this.exitEndDeleteAreaString = \"not exitEndDeleteArea\" // 更新退出滑动操作区域的状态提示信息\n              },\n              onExitActionArea: () => { // 定义退出滑动操作区域的回调函数\n                this.enterEndDeleteAreaString = \"not enterEndDeleteArea\" // 更新进入滑动操作区域的状态提示信息\n                this.exitEndDeleteAreaString = \"exitEndDeleteArea\" // 更新退出滑动操作区域的状态提示信息\n              }\n            }\n          })\n        }, (item: string) => item) // 设置 ForEach 的 key 生成函数\n      }\n      Text(this.enterEndDeleteAreaString).fontSize(20) // 显示进入滑动操作区域的状态提示信息\n      Text(this.exitEndDeleteAreaString).fontSize(20) // 显示退出滑动操作区域的状态提示信息\n    }\n    .padding(10) // 设置容器的内边距为 10\n    .backgroundColor(0xDCDCDC) // 设置容器的背景颜色为浅灰色\n    .width('100%') // 设置容器的宽度为 100%\n    .height('100%') // 设置容器的高度为 100%\n  }\n}"
        }
    ],
    "ListItemGroup": [
        {
            "description": "实现一个包含多个列表项组（ListItemGroup）的列表组件，每个列表项组包含多个列表项（ListItem）。列表项组和列表项的样式可以通过配置进行设置。列表支持多选功能，并且背景颜色为灰色。",
            "code": "@Entry\n@Component\nstruct ListItemGroupExample2 {\n  // 定义一个数组，每个元素是一个对象，包含一个列表项组的样式和该组中每个列表项的样式\n  private arr: ArrObject[] = [\n    {\n      style: ListItemGroupStyle.CARD, // 列表项组的样式为CARD\n      itemStyles: [ListItemStyle.CARD, ListItemStyle.CARD, ListItemStyle.CARD] // 该组中每个列表项的样式均为CARD\n    },\n    {\n      style: ListItemGroupStyle.CARD, // 列表项组的样式为CARD\n      itemStyles: [ListItemStyle.CARD, ListItemStyle.CARD, ListItemStyle.NONE] // 该组中前两个列表项的样式为CARD，最后一个为NONE\n    },\n    {\n      style: ListItemGroupStyle.CARD, // 列表项组的样式为CARD\n      itemStyles: [ListItemStyle.CARD, ListItemStyle.NONE, ListItemStyle.CARD] // 该组中第一个和第三个列表项的样式为CARD，第二个为NONE\n    },\n    {\n      style: ListItemGroupStyle.NONE, // 列表项组的样式为NONE\n      itemStyles: [ListItemStyle.CARD, ListItemStyle.CARD, ListItemStyle.NONE] // 该组中前两个列表项的样式为CARD，最后一个为NONE\n    }\n  ]\n\n  build() {\n    Column() {\n      // 创建一个列表组件，设置列表项之间的间距为4vp，初始索引为0\n      List({ space: \"4vp\", initialIndex: 0 }) {\n        // 遍历arr数组，为每个元素创建一个列表项组\n        ForEach(this.arr, (item: ArrObject, index?: number) => {\n          // 创建一个列表项组，样式为当前元素的style属性\n          ListItemGroup({ style: item.style }) {\n            // 遍历当前元素的itemStyles数组，为每个元素创建一个列表项\n            ForEach(item.itemStyles, (itemStyle: number, itemIndex?: number) => {\n              // 创建一个列表项，样式为当前元素的itemStyle属性\n              ListItem({ style: itemStyle }) {\n                // 如果index和itemIndex都存在，则显示文本内容\n                if (index != undefined && itemIndex != undefined) {\n                  Text(\"第\" + (index + 1) + \"个Group中第\" + (itemIndex + 1) + \"个item\")\n                    .width(\"100%\") // 设置文本宽度为100%\n                    .textAlign(TextAlign.Center) // 设置文本居中对齐\n                }\n              }\n            }, (item: string) => item) // 使用item作为唯一标识符\n          }\n        })\n      }\n      .width('100%') // 设置列表宽度为100%\n      .multiSelectable(true) // 启用多选功能\n      .backgroundColor(0xDCDCDC) // 设置背景颜色为灰色\n    }\n    .width('100%') // 设置列的宽度为100%\n    .padding({ top: 5 }) // 设置顶部内边距为5vp\n  }\n}\n\n// 定义一个接口，用于描述列表项组和列表项的样式配置\ninterface ArrObject {\n  style: number; // 列表项组的样式\n  itemStyles: number[]; // 该组中每个列表项的样式\n}"
        },
        {
            "description": "实现一个课程表列表组件，展示一周的课程安排。每个列表项包含一天的课程标题和具体的课程项目。列表项组具有头部和尾部，头部显示日期，尾部显示当天的课程总数。列表项组之间有分隔线，列表整体具有粘性头部和尾部效果，且不显示滚动条。",
            "code": "@Entry\n@Component\nstruct ListItemGroupExample {\n  // 定义课程表数据结构，包含标题和项目数组\n  private timeTable: TimeTable[] = [\n    {\n      title: '星期一',\n      projects: ['语文', '数学', '英语']\n    },\n    {\n      title: '星期二',\n      projects: ['物理', '化学', '生物']\n    },\n    {\n      title: '星期三',\n      projects: ['历史', '地理', '政治']\n    },\n    {\n      title: '星期四',\n      projects: ['美术', '音乐', '体育']\n    }\n  ]\n\n  // 定义列表项头部构建器，用于生成列表项组的头部\n  @Builder\n  itemHead(text: string) {\n    Text(text) // 显示日期标题\n      .fontSize(20) // 设置字体大小\n      .backgroundColor(0xAABBCC) // 设置背景颜色\n      .width(\"100%\") // 设置宽度为100%\n      .padding(10) // 设置内边距\n  }\n\n  // 定义列表项尾部构建器，用于生成列表项组的尾部\n  @Builder\n  itemFoot(num: number) {\n    Text('共' + num + \"节课\") // 显示课程总数\n      .fontSize(16) // 设置字体大小\n      .backgroundColor(0xAABBCC) // 设置背景颜色\n      .width(\"100%\") // 设置宽度为100%\n      .padding(5) // 设置内边距\n  }\n\n  // 构建组件的主方法\n  build() {\n    Column() {\n      List({ space: 20 }) { // 创建一个列表组件，设置项之间的间距\n        ForEach(this.timeTable, (item: TimeTable) => { // 遍历课程表数据\n          ListItemGroup({ header: this.itemHead(item.title), footer: this.itemFoot(item.projects.length) }) { // 创建列表项组，设置头部和尾部\n            ForEach(item.projects, (project: string) => { // 遍历当天的课程项目\n              ListItem() {\n                Text(project) // 显示课程项目\n                  .width(\"100%\") // 设置宽度为100%\n                  .height(100) // 设置高度\n                  .fontSize(20) // 设置字体大小\n                  .textAlign(TextAlign.Center) // 设置文本居中对齐\n                  .backgroundColor(0xFFFFFF) // 设置背景颜色\n              }\n            }, (item: string) => item) // 设置列表项的唯一标识\n          }\n          .divider({ strokeWidth: 1, color: Color.Blue }) // 设置列表项组之间的分隔线\n        })\n      }\n      .width('90%') // 设置列表宽度为90%\n      .sticky(StickyStyle.Header | StickyStyle.Footer) // 设置列表项组的头部和尾部为粘性效果\n      .scrollBar(BarState.Off) // 隐藏滚动条\n    }\n    .width('100%') // 设置列宽度为100%\n    .height('100%') // 设置列高度为100%\n    .backgroundColor(0xDCDCDC) // 设置背景颜色\n    .padding({ top: 5 }) // 设置顶部内边距\n  }\n}\n\n// 定义课程表数据接口\ninterface TimeTable {\n  title: string; // 课程表标题\n  projects: string[]; // 课程项目数组\n}"
        }
    ],
    "Navigator": [
        {
            "description": "实现一个导航组件示例，包含三个页面：Navigator.ets、Detail.ets 和 Back.ets。\nNavigator.ets 页面包含两个导航按钮，一个用于跳转到 Detail 页面并传递参数，另一个用于返回上一页。\nDetail.ets 页面接收参数并显示，同时包含一个返回按钮。\nBack.ets 页面包含一个返回按钮，用于返回到 Navigator 页面。\nNavigator.ets",
            "code": "@Entry\n@Component\nstruct NavigatorExample {\n  @State active: boolean = false // 用于控制返回按钮的激活状态\n  @State name: NameObject = { name: 'news' } // 存储要传递的参数\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      Navigator({ target: 'pages/container/navigator/Detail', type: NavigationType.Push }) {\n        Text('Go to ' + this.name.name + ' page') // 显示跳转按钮文本\n          .width('100%').textAlign(TextAlign.Center)\n      }.params(new TextObject(this.name)) // 传递参数到 Detail 页面\n\n      Navigator() {\n        Text('Back to previous page').width('100%').textAlign(TextAlign.Center) // 显示返回按钮文本\n      }.active(this.active) // 设置返回按钮的激活状态\n      .onClick(() => {\n        this.active = true // 点击后激活返回按钮\n      })\n    }.height(150).width(350).padding(35)\n  }\n}\n\ninterface NameObject {\n  name: string; // 定义一个包含 name 属性的接口\n}\n\nclass TextObject {\n  text: NameObject; // 存储传递的参数\n\n  constructor(text: NameObject) {\n    this.text = text; // 构造函数，初始化 text 属性\n  }\n}\n\n// Detail.ets\nimport { router } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct DetailExample {\n  // 接收 Navigator.ets 的传参\n  params: Record<string, NameObject> = router.getParams() as Record<string, NameObject>\n  @State name: NameObject = this.params.text // 存储接收到的参数\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      Navigator({ target: 'pages/container/navigator/Back', type: NavigationType.Push }) {\n        Text('Go to back page').width('100%').height(20) // 显示跳转按钮文本\n      }\n\n      Text('This is ' + this.name.name + ' page') // 显示接收到的参数\n        .width('100%').textAlign(TextAlign.Center)\n    }\n    .width('100%').height(200).padding({ left: 35, right: 35, top: 35 })\n  }\n}\n\ninterface NameObject {\n  name: string; // 定义一个包含 name 属性的接口\n}\n\n// Back.ets\n@Entry\n@Component\nstruct BackExample {\n  build() {\n    Column() {\n      Navigator({ target: 'pages/container/navigator/Navigator', type: NavigationType.Back }) {\n        Text('Return to Navigator Page').width('100%').textAlign(TextAlign.Center) // 显示返回按钮文本\n      }\n    }.width('100%').height(200).padding({ left: 35, right: 35, top: 35 })\n  }\n}"
        }
    ],
    "Refresh": [
        {
            "description": "实现一个带有刷新功能的列表组件。列表项为数字字符串，支持下拉刷新操作。刷新时，列表会显示刷新动画，并在2秒后停止刷新状态。",
            "code": "@Entry\n@Component\nstruct RefreshExample {\n  @State isRefreshing: boolean = false // 控制刷新状态的布尔变量，初始值为false\n  @State arr: String[] = ['0', '1', '2', '3', '4','5','6','7','8','9','10'] // 列表数据源，包含数字字符串\n\n  build() {\n    Column() {\n      Refresh({ refreshing: $$this.isRefreshing}) { // 创建一个刷新组件，绑定刷新状态\n        List() {\n          ForEach(this.arr, (item: string) => { // 遍历数据源，生成列表项\n            ListItem() {\n              Text('' + item) // 显示列表项内容\n                .width('70%').height(80).fontSize(16).margin(10) // 设置文本样式\n                .textAlign(TextAlign.Center).borderRadius(10).backgroundColor(0xFFFFFF) // 设置文本对齐、圆角和背景色\n            }\n          }, (item: string) => item) // 列表项的唯一标识符\n        }\n        .onScrollIndex((first: number) => { // 监听列表滚动事件，输出当前第一个可见项的索引\n          console.info(first.toString())\n        })\n        .width('100%') // 设置列表宽度为100%\n        .height('100%') // 设置列表高度为100%\n        .alignListItem(ListItemAlign.Center) // 设置列表项居中对齐\n        .scrollBar(BarState.Off) // 隐藏滚动条\n      }\n      .onStateChange((refreshStatus: RefreshStatus) => { // 监听刷新状态变化事件，输出当前刷新状态\n        console.info('Refresh onStatueChange state is ' + refreshStatus)\n      })\n      .onOffsetChange((value: number) => { // 监听刷新偏移量变化事件，输出当前偏移量\n        console.info('Refresh onOffsetChange offset:' + value)\n      })\n      .onRefreshing(() => { // 监听刷新开始事件，2秒后停止刷新状态\n        setTimeout(() => {\n          this.isRefreshing = false\n        }, 2000)\n        console.log('onRefreshing test')\n      })\n      .backgroundColor(0x89CFF0) // 设置刷新区域的背景色\n      .refreshOffset(64) // 设置刷新触发的高度偏移量\n      .pullToRefresh(true) // 启用下拉刷新功能\n    }\n  }\n}"
        },
        {
            "description": "实现一个可刷新的列表组件，支持自定义刷新区域的显示内容。列表项为数字字符串，刷新时显示一个加载进度条和文本提示。",
            "code": "@Entry\n@Component\nstruct RefreshExample {\n  // 控制刷新状态的布尔变量\n  @State isRefreshing: boolean = false\n  \n  // 列表数据，包含数字字符串\n  @State arr: String[] = ['0', '1', '2', '3', '4','5','6','7','8','9','10']\n\n  // 自定义刷新组件的构建器\n  @Builder\n  customRefreshComponent() {\n    Stack() {\n      Row() {\n        // 加载进度条组件\n        LoadingProgress().height(32)\n        // 刷新提示文本\n        Text(\"Refreshing...\").fontSize(16).margin({left:20})\n      }\n      .alignItems(VerticalAlign.Center) // 垂直居中对齐\n    }\n    .align(Alignment.Center) // 水平居中对齐\n    .clip(true) // 裁剪超出部分\n    .constraintSize({minHeight:32}) // 最小高度为32\n    .width(\"100%\") // 宽度占满父容器\n  }\n\n  build() {\n    Column() {\n      // 刷新组件，refreshing状态绑定isRefreshing，builder参数使用自定义刷新组件\n      Refresh({ refreshing: $$this.isRefreshing, builder: this.customRefreshComponent() }) {\n        List() {\n          // 遍历arr数组，生成列表项\n          ForEach(this.arr, (item: string) => {\n            ListItem() {\n              Text('' + item)\n                .width('70%').height(80).fontSize(16).margin(10)\n                .textAlign(TextAlign.Center).borderRadius(10).backgroundColor(0xFFFFFF)\n            }\n          }, (item: string) => item)\n        }\n        .onScrollIndex((first: number) => {\n          // 滚动到指定索引时触发，打印索引值\n          console.info(first.toString())\n        })\n        .width('100%') // 宽度占满父容器\n        .height('100%') // 高度占满父容器\n        .alignListItem(ListItemAlign.Center) // 列表项居中对齐\n        .scrollBar(BarState.Off) // 隐藏滚动条\n      }\n      .backgroundColor(0x89CFF0) // 背景颜色\n      .pullToRefresh(true) // 启用下拉刷新\n      .refreshOffset(64) // 刷新触发的高度偏移\n      .onStateChange((refreshStatus: RefreshStatus) => {\n        // 刷新状态改变时触发，打印状态\n        console.info('Refresh onStatueChange state is ' + refreshStatus)\n      })\n      .onRefreshing(() => {\n        // 刷新开始时触发，2秒后结束刷新\n        setTimeout(() => {\n          this.isRefreshing = false\n        }, 2000)\n        console.log('onRefreshing test')\n      })\n    }\n  }\n}"
        },
        {
            "description": "实现一个带有刷新功能的列表组件。列表项由数字0到10组成，支持下拉刷新操作。刷新时显示“Refreshing...”文本，刷新完成后文本消失。刷新状态通过@State变量isRefreshing控制，刷新区域的高度为96。",
            "code": "@Entry\n@Component\nstruct RefreshExample {\n  // 控制刷新状态的布尔变量，初始值为false\n  @State isRefreshing: boolean = false\n  \n  // 刷新区域的提示文本，初始值为\"Refreshing...\"\n  @State promptText: string = \"Refreshing...\"\n  \n  // 列表数据，包含数字0到10的字符串数组\n  @State arr: String[] = ['0', '1', '2', '3', '4','5','6','7','8','9','10']\n\n  build() {\n    Column() {\n      // 创建一个带有刷新功能的容器，refreshing属性绑定到isRefreshing，promptText属性绑定到promptText\n      Refresh({ refreshing: $$this.isRefreshing, promptText: this.promptText}) {\n        // 创建一个列表组件\n        List() {\n          // 使用ForEach循环渲染列表项，item为数组中的每个元素\n          ForEach(this.arr, (item: string) => {\n            // 创建一个列表项\n            ListItem() {\n              // 创建一个文本组件，显示列表项的值\n              Text('' + item)\n                .width('70%').height(80).fontSize(16).margin(10)\n                .textAlign(TextAlign.Center).borderRadius(10).backgroundColor(0xFFFFFF)\n            }\n          }, (item: string) => item) // 指定ForEach的key为item本身\n        }\n        .onScrollIndex((first: number) => {\n          // 监听列表滚动到第一个可见项的索引，并打印到控制台\n          console.info(first.toString())\n        })\n        .width('100%') // 设置列表宽度为100%\n        .height('100%') // 设置列表高度为100%\n        .alignListItem(ListItemAlign.Center) // 设置列表项居中对齐\n        .scrollBar(BarState.Off) // 隐藏滚动条\n      }\n      .backgroundColor(0x89CFF0) // 设置刷新容器的背景颜色\n      .pullToRefresh(true) // 启用下拉刷新功能\n      .refreshOffset(96) // 设置刷新区域的高度为96\n      .onStateChange((refreshStatus: RefreshStatus) => {\n        // 监听刷新状态的变化，并打印到控制台\n        console.info('Refresh onStatueChange state is ' + refreshStatus)\n      })\n      .onOffsetChange((value: number) => {\n        // 监听刷新区域的偏移量变化，并打印到控制台\n        console.info('Refresh onOffsetChange offset:' + value)\n      })\n      .onRefreshing(() => {\n        // 当开始刷新时执行的回调函数\n        setTimeout(() => {\n          // 2秒后将isRefreshing设置为false，结束刷新状态\n          this.isRefreshing = false\n        }, 2000)\n        console.log('onRefreshing test') // 打印刷新开始的信息\n      })\n    }\n  }\n}"
        },
        {
            "description": "实现一个可滚动的列表组件，支持上拉加载更多功能和下拉刷新功能。列表项为数字，下拉刷新时显示一个进度环，上拉加载更多时显示一个加载中的提示。",
            "code": "@Entry\n@Component\nstruct ListRefreshLoad {\n  @State arr: Array<number> = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // 列表数据源，初始化为一个包含11个数字的数组\n  @State refreshing: boolean = false; // 控制刷新状态的布尔值，true表示正在刷新\n  @State refreshOffset: number = 0; // 刷新时的偏移量，用于控制进度环的显示\n  @State refreshState: RefreshStatus = RefreshStatus.Inactive; // 刷新状态，初始为Inactive\n  @State canLoad: boolean = false; // 控制是否可以加载更多的布尔值，true表示可以加载更多\n  @State isLoading: boolean = false; // 控制加载状态的布尔值，true表示正在加载\n\n  @Builder\n  refreshBuilder() {\n    Stack({ alignContent: Alignment.Bottom }) {\n      // 当刷新状态不是Inactive或Done时，显示进度环\n      if (this.refreshState != RefreshStatus.Inactive && this.refreshState != RefreshStatus.Done) {\n        Progress({ value: this.refreshOffset, total: 64, type: ProgressType.Ring })\n          .width(32).height(32)\n          .style({ status: this.refreshing ? ProgressStatus.LOADING : ProgressStatus.PROGRESSING })\n          .margin(10)\n      }\n    }\n    .clip(true)\n    .height(\"100%\")\n    .width(\"100%\")\n  }\n\n  @Builder\n  footer() {\n    Row() {\n      LoadingProgress().height(32).width(48) // 显示加载中的进度条\n      Text(\"加载中\") // 显示加载中的文本\n    }.width(\"100%\")\n    .height(64)\n    .justifyContent(FlexAlign.Center)\n    .visibility(this.isLoading ? Visibility.Visible : Visibility.Hidden) // 根据isLoading状态控制显示或隐藏\n  }\n\n  build() {\n    Refresh({ refreshing: $$this.refreshing, builder: this.refreshBuilder() }) {\n      List() {\n        ForEach(this.arr, (item: number) => {\n          ListItem() {\n            Text('' + item)\n              .width('100%')\n              .height(80)\n              .fontSize(16)\n              .textAlign(TextAlign.Center)\n              .backgroundColor(0xFFFFFF)\n          }.borderWidth(1)\n        }, (item: string) => item)\n\n        ListItem() {\n          this.footer(); // 显示加载更多的提示\n        }\n      }\n      .onScrollIndex((start: number, end: number) => {\n        // 当滚动到列表末尾时，触发加载更多数据\n        if (this.canLoad && end >= this.arr.length - 1) {\n          this.canLoad = false;\n          this.isLoading = true;\n\n          setTimeout(() => {\n            for (let i = 0; i < 10; i++) {\n              this.arr.push(this.arr.length); // 添加新的数据项\n              this.isLoading = false;\n            }\n          }, 700)\n        }\n      })\n      .onScrollFrameBegin((offset: number, state: ScrollState) => {\n        // 当滚动偏移量大于5时，允许加载更多数据\n        if (offset > 5 && !this.isLoading) {\n          this.canLoad = true;\n        }\n        return { offsetRemain: offset };\n      })\n      .scrollBar(BarState.Off) // 隐藏滚动条\n      .edgeEffect(EdgeEffect.Spring, { alwaysEnabled: true }) // 启用边界回弹效果\n    }\n    .width('100%')\n    .height('100%')\n    .backgroundColor(0xDCDCDC)\n    .onOffsetChange((offset: number) => {\n      this.refreshOffset = offset; // 更新刷新偏移量\n    })\n    .onStateChange((state: RefreshStatus) => {\n      this.refreshState = state; // 更新刷新状态\n    })\n    .onRefreshing(() => {\n      // 模拟刷新操作，2秒后结束刷新\n      setTimeout(() => {\n        this.refreshing = false;\n      }, 2000)\n    })\n  }\n}"
        }
    ],
    "RelativeContainer": [
        {
            "description": "实现一个包含RelativeContainer布局的组件，其中包含一个红色的Row组件，并通过Guideline进行定位。RelativeContainer具有固定的宽度和高度，并带有边框。Row组件通过alignRules属性与Guideline对齐。",
            "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 创建一个红色的Row组件，宽度为100，高度为100\n        Row().width(100).height(100)\n          .backgroundColor(\"#FF3333\")\n          // 设置Row组件的定位规则\n          .alignRules({\n            // 左边缘与guideline1的末端对齐\n            left: {anchor: \"guideline1\", align: HorizontalAlign.End},\n            // 上边缘与guideline2的顶部对齐\n            top: {anchor: \"guideline2\", align: VerticalAlign.Top}\n          })\n          .id(\"row1\")\n      }\n      // 设置RelativeContainer的宽度和高度，并添加边框\n      .width(300).height(300)\n      .margin({left: 50})\n      .border({width:2, color: \"#6699FF\"})\n      // 定义两个Guideline，一个垂直，一个水平，分别位于容器的50像素处\n      .guideLine([\n        {id:\"guideline1\", direction: Axis.Vertical, position:{start:50}},\n        {id:\"guideline2\", direction: Axis.Horizontal, position:{start:50}}\n      ])\n    }\n    .height('100%')\n  }\n}"
        },
        {
            "description": "实现一个包含RelativeContainer的Row组件，其中RelativeContainer内部包含一个红色矩形。红色矩形的顶部、底部、左侧和右侧分别与RelativeContainer的顶部、底部、左侧和右侧对齐，并通过垂直偏移使其相对于父容器的顶部和底部偏移30%。RelativeContainer的宽度为300，高度为300，左边距为50，并带有宽度为2的蓝色边框。整个Row的高度为100%。",
            "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 创建一个宽度为100，高度为100的红色矩形\n        Row().width(100).height(100)\n          .backgroundColor(\"#FF3333\")\n          .alignRules({\n            // 矩形的顶部与父容器的顶部对齐\n            top: {anchor: \"__container__\", align: VerticalAlign.Top},\n            // 矩形的底部与父容器的底部对齐\n            bottom: {anchor: \"__container__\", align: VerticalAlign.Bottom},\n            // 矩形的左侧与父容器的左侧对齐\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start},\n            // 矩形的右侧与父容器的右侧对齐\n            right: {anchor: \"__container__\", align: HorizontalAlign.End},\n            // 设置矩形的垂直偏移，使其相对于父容器的顶部和底部偏移30%\n            bias: {vertical: 0.3}\n          })\n          .id(\"row1\")\n      }\n      .width(300).height(300)\n      .margin({left: 50}) // 设置RelativeContainer的左边距为50\n      .border({width:2, color: \"#6699FF\"}) // 为RelativeContainer添加一个宽度为2的蓝色边框\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}"
        },
        {
            "description": "实现一个包含四个Row组件的布局，每个Row组件包含一个Text组件，并通过RelativeContainer进行相对定位。每个Row组件具有不同的背景颜色，并且相对于其他Row组件进行定位。整体布局具有边框和左边距，以适应内容大小。",
            "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个Row组件，包含一个Text组件，内容为'row1'，宽度为100，高度为100，背景颜色为红色，居中对齐\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF3333\")\n          .id(\"row1\") // 设置id为\"row1\"，用于后续的相对定位\n\n        // 第二个Row组件，包含一个Text组件，内容为'row2'，宽度为100，高度为100，背景颜色为黄色，相对于\"row1\"进行定位\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            left: {anchor: \"row1\", align: HorizontalAlign.End}, // 相对于\"row1\"的右边\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 相对于\"row1\"的顶部\n          })\n          .id(\"row2\") // 设置id为\"row2\"，用于后续的相对定位\n\n        // 第三个Row组件，包含一个Text组件，内容为'row3'，宽度为100，高度为100，背景颜色为橙色，相对于\"row1\"进行定位\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            left: {anchor: \"row1\", align: HorizontalAlign.Start}, // 相对于\"row1\"的左边\n            top: {anchor: \"row1\", align: VerticalAlign.Bottom} // 相对于\"row1\"的底部\n          })\n          .id(\"row3\") // 设置id为\"row3\"，用于后续的相对定位\n\n        // 第四个Row组件，包含一个Text组件，内容为'row4'，宽度为100，高度为100，背景颜色为浅橙色，相对于\"row3\"和\"row2\"进行定位\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF9966\")\n          .alignRules({\n            left: {anchor: \"row3\", align: HorizontalAlign.End}, // 相对于\"row3\"的右边\n            top: {anchor: \"row2\", align: VerticalAlign.Bottom} // 相对于\"row2\"的底部\n          })\n          .id(\"row4\") // 设置id为\"row4\"，用于后续的相对定位\n      }\n      .width(\"auto\").height(\"auto\") // 设置RelativeContainer的宽度和高度为\"auto\"，使其大小适应内容\n      .margin({left: 50}) // 设置左边距为50\n      .border({width:2, color: \"#6699FF\"}) // 设置边框宽度为2，颜色为蓝色\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}"
        },
        {
            "description": "实现一个相对布局的示例，包含四个矩形，每个矩形通过RelativeContainer进行相对定位。\n第一个矩形位于容器的左上角，第二个矩形位于第一个矩形的右侧，第三个矩形位于第一个矩形的下方，第四个矩形位于第三个矩形的右侧和第二个矩形的下方。\n每个矩形都有一个文本标签，并且通过alignRules属性进行相对定位。",
            "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个矩形，红色背景，位于容器的左上角，设置了10像素的margin\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF3333\")\n          .alignRules({\n            top: {anchor: \"__container__\", align: VerticalAlign.Top}, // 顶部对齐容器顶部\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start} // 左侧对齐容器左侧\n          })\n          .id(\"row1\")\n          .margin(10) // 设置外边距为10像素\n\n        // 第二个矩形，黄色背景，位于第一个矩形的右侧\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            left: {anchor: \"row1\", align: HorizontalAlign.End}, // 左侧对齐第一个矩形的右侧\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 顶部对齐第一个矩形的顶部\n          })\n          .id(\"row2\")\n\n        // 第三个矩形，橙色背景，位于第一个矩形的下方\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            left: {anchor: \"row1\", align: HorizontalAlign.Start}, // 左侧对齐第一个矩形的左侧\n            top: {anchor: \"row1\", align: VerticalAlign.Bottom} // 顶部对齐第一个矩形的底部\n          })\n          .id(\"row3\")\n\n        // 第四个矩形，浅橙色背景，位于第三个矩形的右侧，第二个矩形的下方，设置了10像素的margin\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF9966\")\n          .alignRules({\n            left: {anchor: \"row3\", align: HorizontalAlign.End}, // 左侧对齐第三个矩形的右侧\n            top: {anchor: \"row2\", align: VerticalAlign.Bottom} // 顶部对齐第二个矩形的底部\n          })\n          .id(\"row4\")\n          .margin(10) // 设置外边距为10像素\n      }\n      .width(300).height(300) // 设置RelativeContainer的宽度和高度\n      .margin({left: 50}) // 设置RelativeContainer的左侧外边距为50像素\n      .border({width:2, color: \"#6699FF\"}) // 设置RelativeContainer的边框\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}"
        },
        {
            "description": "实现一个相对布局的示例，包含三个Row组件，每个Row组件通过RelativeContainer进行相对定位和对齐。每个Row组件具有不同的背景色，并通过alignRules属性定义其相对位置和对齐方式。整体布局在一个Row组件内，并设置了边框和外边距。",
            "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个Row组件，包含文本'row1'，设置为居中对齐，宽度80，高度80，背景色为红色\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF3333\")\n          // 设置alignRules，定义组件的相对位置和对齐方式\n          .alignRules({\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start}, // 左对齐到容器左侧\n            right: {anchor: \"row2\", align : HorizontalAlign.Start}, // 右对齐到row2的左侧\n            center: {anchor: \"__container__\", align: VerticalAlign.Center}, // 垂直居中对齐到容器\n            bias : {horizontal : 0} // 水平方向的bias值为0\n          })\n          .id(\"row1\") // 设置组件ID为row1\n          .chainMode(Axis.Horizontal, ChainStyle.PACKED) // 设置水平方向的链模式为PACKED\n\n        // 第二个Row组件，包含文本'row2'，设置为居中对齐，宽度80，高度80，背景色为黄色\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FFCC00\")\n          // 设置alignRules，定义组件的相对位置和对齐方式\n          .alignRules({\n            left: {anchor: \"row1\", align: HorizontalAlign.End}, // 左对齐到row1的右侧\n            right: {anchor: \"row3\", align : HorizontalAlign.Start}, // 右对齐到row3的左侧\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 顶部对齐到row1的顶部\n          })\n          .id(\"row2\") // 设置组件ID为row2\n\n        // 第三个Row组件，包含文本'row3'，设置为居中对齐，宽度80，高度80，背景色为橙色\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF6633\")\n          // 设置alignRules，定义组件的相对位置和对齐方式\n          .alignRules({\n            left: {anchor: \"row2\", align: HorizontalAlign.End}, // 左对齐到row2的右侧\n            right: {anchor: \"__container__\", align : HorizontalAlign.End}, // 右对齐到容器右侧\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 顶部对齐到row1的顶部\n          })\n          .id(\"row3\") // 设置组件ID为row3\n      }\n      .width(300).height(300) // 设置RelativeContainer的宽度和高度\n      .margin({left: 50}) // 设置左侧外边距\n      .border({width:2, color: \"#6699FF\"}) // 设置边框宽度和颜色\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}"
        },
        {
            "description": "实现一个相对布局的示例，展示如何在RelativeContainer中使用Row组件，并通过alignRules和barrier进行复杂的相对定位。每个Row组件都有不同的背景色和文本内容，并通过ID进行引用。barrier用于定义虚拟的边界线，帮助组件进行更精确的定位。",
            "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个Row组件，显示文本'row1'，背景色为红色，宽度高度均为100，居中对齐\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF3333\")\n          .id(\"row1\") // 为该组件设置ID，方便后续组件引用\n\n        // 第二个Row组件，显示文本'row2'，背景色为黄色，宽度高度均为100，相对于row1进行定位\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            middle: {anchor: \"row1\", align: HorizontalAlign.End}, // 水平方向上与row1的右边缘对齐\n            top: {anchor: \"row1\", align: VerticalAlign.Bottom} // 垂直方向上与row1的底边缘对齐\n          })\n          .id(\"row2\") // 为该组件设置ID，方便后续组件引用\n\n        // 第三个Row组件，显示文本'row3'，背景色为橙色，宽度高度均为100，相对于barrier1进行定位\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            left: {anchor: \"barrier1\", align: HorizontalAlign.End}, // 水平方向上与barrier1的右边缘对齐\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 垂直方向上与row1的顶边缘对齐\n          })\n          .id(\"row3\") // 为该组件设置ID，方便后续组件引用\n\n        // 第四个Row组件，显示文本'row4'，背景色为浅橙色，宽度高度均为50，相对于row1和barrier2进行定位\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .width(50).height(50)\n          .backgroundColor(\"#FF9966\")\n          .alignRules({\n            left: {anchor: \"row1\", align: HorizontalAlign.Start}, // 水平方向上与row1的左边缘对齐\n            top: {anchor: \"barrier2\", align: VerticalAlign.Bottom} // 垂直方向上与barrier2的底边缘对齐\n          })\n          .id(\"row4\") // 为该组件设置ID，方便后续组件引用\n      }\n      .width(300).height(300) // 设置RelativeContainer的宽度和高度\n      .margin({left: 50}) // 设置左边距\n      .border({width:2, color: \"#6699FF\"}) // 设置边框\n      .barrier([\n        {id: \"barrier1\", direction: BarrierDirection.RIGHT, referencedId:[\"row1\", \"row2\"]}, // 定义barrier1，方向为右，参考row1和row2的右边缘\n        {id: \"barrier2\", direction: BarrierDirection.BOTTOM, referencedId:[\"row1\", \"row2\"]} // 定义barrier2，方向为下，参考row1和row2的底边缘\n      ])\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}"
        },
        {
            "description": "实现一个相对布局的示例，展示如何在RelativeContainer中使用Row组件，并通过alignRules和barrier实现复杂的对齐和布局效果。示例中包含四个Row组件，分别显示不同的文本和背景颜色，并通过alignRules和barrier实现它们之间的相对位置关系。",
            "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个Row组件，显示文本'row1'，并设置其宽度和高度为100，背景颜色为红色\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF3333\")\n          .id(\"row1\") // 设置组件的id为\"row1\"，用于后续的对齐规则引用\n\n        // 第二个Row组件，显示文本'row2'，并设置其宽度和高度为100，背景颜色为黄色\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            middle: {anchor: \"row1\", align: HorizontalAlign.End}, // 水平方向上，row2相对于row1的右侧对齐\n            top: {anchor: \"row1\", align: VerticalAlign.Bottom} // 垂直方向上，row2相对于row1的底部对齐\n          })\n          .id(\"row2\") // 设置组件的id为\"row2\"，用于后续的对齐规则引用\n\n        // 第三个Row组件，显示文本'row3'，并设置其宽度和高度为100，背景颜色为橙色\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            start: {anchor: \"barrier1\", align: HorizontalAlign.End}, // 水平方向上，row3相对于barrier1的右侧对齐\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 垂直方向上，row3相对于row1的顶部对齐\n          })\n          .id(\"row3\") // 设置组件的id为\"row3\"，用于后续的对齐规则引用\n\n        // 第四个Row组件，显示文本'row4'，并设置其宽度和高度为50，背景颜色为浅橙色\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .width(50).height(50)\n          .backgroundColor(\"#FF9966\")\n          .alignRules({\n            start: {anchor: \"row1\", align: HorizontalAlign.Start}, // 水平方向上，row4相对于row1的左侧对齐\n            top: {anchor: \"barrier2\", align: VerticalAlign.Bottom} // 垂直方向上，row4相对于barrier2的底部对齐\n          })\n          .id(\"row4\") // 设置组件的id为\"row4\"，用于后续的对齐规则引用\n      }\n      .direction(Direction.Rtl) // 设置RelativeContainer的方向为RTL，即从右到左布局\n      .width(300).height(300) // 设置RelativeContainer的宽度和高度为300\n      .margin({left: 50}) // 设置RelativeContainer的左边距为50\n      .border({width:2, color: \"#6699FF\"}) // 设置RelativeContainer的边框宽度和颜色\n      .barrier([\n        {id: \"barrier1\", localizedDirection: LocalizedBarrierDirection.END, referencedId:[\"row1\", \"row2\"]}, // 定义barrier1，水平方向上位于row1和row2的右侧\n        {id: \"barrier2\", localizedDirection: LocalizedBarrierDirection.BOTTOM, referencedId:[\"row1\", \"row2\"]} // 定义barrier2，垂直方向上位于row1和row2的底部\n      ])\n    }\n    .height('100%') // 设置Row组件的高度为100%\n  }\n}"
        },
        {
            "description": "实现一个复杂的布局示例，使用RelativeContainer组件来精确控制多个Row组件的位置。每个Row组件通过alignRules属性定义其相对于容器或其他Row组件的位置关系，从而实现复杂的布局效果。",
            "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个Row组件，位于容器的左上角\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF3333\")\n          .alignRules({\n            top: {anchor: \"__container__\", align: VerticalAlign.Top}, // 顶部与容器顶部对齐\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start} // 左侧与容器左侧对齐\n          })\n          .id(\"row1\") // 设置id以便在其他组件中引用\n\n        // 第二个Row组件，位于容器的右上角\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            top: {anchor: \"__container__\", align: VerticalAlign.Top}, // 顶部与容器顶部对齐\n            right: {anchor: \"__container__\", align: HorizontalAlign.End} // 右侧与容器右侧对齐\n          })\n          .id(\"row2\") // 设置id以便在其他组件中引用\n\n        // 第三个Row组件，位于row1的右下角，并且与row2的左侧对齐\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .height(100)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            top: {anchor: \"row1\", align: VerticalAlign.Bottom}, // 顶部与row1的底部对齐\n            left: {anchor: \"row1\", align: HorizontalAlign.End}, // 左侧与row1的右侧对齐\n            right: {anchor: \"row2\", align: HorizontalAlign.Start} // 右侧与row2的左侧对齐\n          })\n          .id(\"row3\") // 设置id以便在其他组件中引用\n\n        // 第四个Row组件，位于row3的下方，并且与容器的左下角和row1的右侧对齐\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .backgroundColor(\"#FF9966\")\n          .alignRules({\n            top: {anchor: \"row3\", align: VerticalAlign.Bottom}, // 顶部与row3的底部对齐\n            bottom: {anchor: \"__container__\", align: VerticalAlign.Bottom}, // 底部与容器底部对齐\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start}, // 左侧与容器左侧对齐\n            right: {anchor: \"row1\", align: HorizontalAlign.End} // 右侧与row1的右侧对齐\n          })\n          .id(\"row4\") // 设置id以便在其他组件中引用\n\n        // 第五个Row组件，位于row3的下方，并且与row2的左侧和容器的右下角对齐\n        Row(){Text('row5')}.justifyContent(FlexAlign.Center)\n          .backgroundColor(\"#FF66FF\")\n          .alignRules({\n            top: {anchor: \"row3\", align: VerticalAlign.Bottom}, // 顶部与row3的底部对齐\n            bottom: {anchor: \"__container__\", align: VerticalAlign.Bottom}, // 底部与容器底部对齐\n            left: {anchor: \"row2\", align: HorizontalAlign.Start}, // 左侧与row2的左侧对齐\n            right: {anchor: \"__container__\", align: HorizontalAlign.End} // 右侧与容器右侧对齐\n          })\n          .id(\"row5\") // 设置id以便在其他组件中引用\n      }\n      .width(300).height(300) // 设置RelativeContainer的宽度和高度\n      .margin({left: 50}) // 设置左侧外边距\n      .border({width:2, color: \"#6699FF\"}) // 设置边框\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}"
        },
        {
            "description": "实现一个包含多个链布局的相对容器组件，展示不同链布局样式（SPREAD、SPREAD_INSIDE、PACKED）的效果。每个链布局包含三个子组件，通过alignRules属性设置子组件之间的相对位置关系。",
            "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个链布局：SPREAD\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF3333\")\n          .alignRules({\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start}, // 左对齐容器\n            right: {anchor: \"row2\", align : HorizontalAlign.Start}, // 右对齐row2的左侧\n            top: {anchor: \"__container__\", align: VerticalAlign.Top} // 顶部对齐容器\n          })\n          .id(\"row1\")\n          .chainMode(Axis.Horizontal, ChainStyle.SPREAD) // 设置水平方向的SPREAD链布局\n\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            left: {anchor: \"row1\", align: HorizontalAlign.End}, // 左对齐row1的右侧\n            right: {anchor: \"row3\", align : HorizontalAlign.Start}, // 右对齐row3的左侧\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 顶部对齐row1的顶部\n          })\n          .id(\"row2\")\n\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            left: {anchor: \"row2\", align: HorizontalAlign.End}, // 左对齐row2的右侧\n            right: {anchor: \"__container__\", align : HorizontalAlign.End}, // 右对齐容器的右侧\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 顶部对齐row1的顶部\n          })\n          .id(\"row3\")\n\n        // 第二个链布局：SPREAD_INSIDE\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF3333\")\n          .alignRules({\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start}, // 左对齐容器\n            right: {anchor: \"row5\", align : HorizontalAlign.Start}, // 右对齐row5的左侧\n            center: {anchor: \"__container__\", align: VerticalAlign.Center} // 垂直居中对齐容器\n          })\n          .id(\"row4\")\n          .chainMode(Axis.Horizontal, ChainStyle.SPREAD_INSIDE) // 设置水平方向的SPREAD_INSIDE链布局\n\n        Row(){Text('row5')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            left: {anchor: \"row4\", align: HorizontalAlign.End}, // 左对齐row4的右侧\n            right: {anchor: \"row6\", align : HorizontalAlign.Start}, // 右对齐row6的左侧\n            top: {anchor: \"row4\", align: VerticalAlign.Top} // 顶部对齐row4的顶部\n          })\n          .id(\"row5\")\n\n        Row(){Text('row6')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            left: {anchor: \"row5\", align: HorizontalAlign.End}, // 左对齐row5的右侧\n            right: {anchor: \"__container__\", align : HorizontalAlign.End}, // 右对齐容器的右侧\n            top: {anchor: \"row4\", align: VerticalAlign.Top} // 顶部对齐row4的顶部\n          })\n          .id(\"row6\")\n\n        // 第三个链布局：PACKED\n        Row(){Text('row7')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF3333\")\n          .alignRules({\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start}, // 左对齐容器\n            right: {anchor: \"row8\", align : HorizontalAlign.Start}, // 右对齐row8的左侧\n            bottom: {anchor: \"__container__\", align: VerticalAlign.Bottom} // 底部对齐容器\n          })\n          .id(\"row7\")\n          .chainMode(Axis.Horizontal, ChainStyle.PACKED) // 设置水平方向的PACKED链布局\n\n        Row(){Text('row8')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            left: {anchor: \"row7\", align: HorizontalAlign.End}, // 左对齐row7的右侧\n            right: {anchor: \"row9\", align : HorizontalAlign.Start}, // 右对齐row9的左侧\n            top: {anchor: \"row7\", align: VerticalAlign.Top} // 顶部对齐row7的顶部\n          })\n          .id(\"row8\")\n\n        Row(){Text('row9')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            left: {anchor: \"row8\", align: HorizontalAlign.End}, // 左对齐row8的右侧\n            right: {anchor: \"__container__\", align : HorizontalAlign.End}, // 右对齐容器的右侧\n            top: {anchor: \"row7\", align: VerticalAlign.Top} // 顶部对齐row7的顶部\n          })\n          .id(\"row9\")\n      }\n      .width(300).height(300) // 设置RelativeContainer的宽度和高度\n      .margin({left: 50}) // 设置左侧外边距\n      .border({width:2, color: \"#6699FF\"}) // 设置边框\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}"
        }
    ],
    "Row": [
        {
            "description": "实现一个展示Row组件不同布局和对齐方式的示例。通过设置不同的属性，展示子组件在水平和垂直方向上的对齐方式，以及子组件之间的间距。",
            "code": "@Entry\n@Component\nstruct RowExample {\n  build() {\n    Column({ space: 5 }) { // 创建一个Column容器，设置子组件之间的垂直间距为5\n      // 设置子组件水平方向的间距为5\n      Text('space').width('90%') // 创建一个Text组件，显示文字“space”，宽度为父容器的90%\n      Row({ space: 5 }) { // 创建一个Row容器，设置子组件之间的水平间距为5\n        Row().width('30%').height(50).backgroundColor(0xAFEEEE) // 创建一个Row组件，宽度为父容器的30%，高度为50，背景色为浅蓝色\n        Row().width('30%').height(50).backgroundColor(0x00FFFF) // 创建一个Row组件，宽度为父容器的30%，高度为50，背景色为青色\n      }.width('90%').height(107).border({ width: 1 }) // 设置Row容器的宽度为父容器的90%，高度为107，并添加一个宽度为1的边框\n\n      // 设置子元素垂直方向对齐方式\n      Text('alignItems(Bottom)').width('90%') // 创建一个Text组件，显示文字“alignItems(Bottom)”，宽度为父容器的90%\n      Row() { // 创建一个Row容器\n        Row().width('30%').height(50).backgroundColor(0xAFEEEE) // 创建一个Row组件，宽度为父容器的30%，高度为50，背景色为浅蓝色\n        Row().width('30%').height(50).backgroundColor(0x00FFFF) // 创建一个Row组件，宽度为父容器的30%，高度为50，背景色为青色\n      }.width('90%').alignItems(VerticalAlign.Bottom).height('15%').border({ width: 1 }) // 设置Row容器的宽度为父容器的90%，子元素垂直方向对齐方式为底部对齐，高度为父容器的15%，并添加一个宽度为1的边框\n\n      Text('alignItems(Center)').width('90%') // 创建一个Text组件，显示文字“alignItems(Center)”，宽度为父容器的90%\n      Row() { // 创建一个Row容器\n        Row().width('30%').height(50).backgroundColor(0xAFEEEE) // 创建一个Row组件，宽度为父容器的30%，高度为50，背景色为浅蓝色\n        Row().width('30%').height(50).backgroundColor(0x00FFFF) // 创建一个Row组件，宽度为父容器的30%，高度为50，背景色为青色\n      }.width('90%').alignItems(VerticalAlign.Center).height('15%').border({ width: 1 }) // 设置Row容器的宽度为父容器的90%，子元素垂直方向对齐方式为居中对齐，高度为父容器的15%，并添加一个宽度为1的边框\n\n      // 设置子元素水平方向对齐方式\n      Text('justifyContent(End)').width('90%') // 创建一个Text组件，显示文字“justifyContent(End)”，宽度为父容器的90%\n      Row() { // 创建一个Row容器\n        Row().width('30%').height(50).backgroundColor(0xAFEEEE) // 创建一个Row组件，宽度为父容器的30%，高度为50，背景色为浅蓝色\n        Row().width('30%').height(50).backgroundColor(0x00FFFF) // 创建一个Row组件，宽度为父容器的30%，高度为50，背景色为青色\n      }.width('90%').border({ width: 1 }).justifyContent(FlexAlign.End) // 设置Row容器的宽度为父容器的90%，子元素水平方向对齐方式为尾部对齐，并添加一个宽度为1的边框\n\n      Text('justifyContent(Center)').width('90%') // 创建一个Text组件，显示文字“justifyContent(Center)”，宽度为父容器的90%\n      Row() { // 创建一个Row容器\n        Row().width('30%').height(50).backgroundColor(0xAFEEEE) // 创建一个Row组件，宽度为父容器的30%，高度为50，背景色为浅蓝色\n        Row().width('30%').height(50).backgroundColor(0x00FFFF) // 创建一个Row组件，宽度为父容器的30%，高度为50，背景色为青色\n      }.width('90%').border({ width: 1 }).justifyContent(FlexAlign.Center) // 设置Row容器的宽度为父容器的90%，子元素水平方向对齐方式为居中对齐，并添加一个宽度为1的边框\n    }.width('100%') // 设置Column容器的宽度为父容器的100%\n  }\n}"
        }
    ],
    "RowSplit": [
        {
            "description": "实现一个可拖动的行分割组件，其中包含五个文本组件，每个文本组件代表一行。用户可以通过拖动分割线来调整每行的高度。",
            "code": "@Entry // 标记该组件为入口组件\n@Component // 标记该结构体为一个组件\nstruct RowSplitExample {\n  build() {\n    Column() { // 创建一个垂直布局的容器\n      Text('The second line can be dragged') // 显示提示文本，说明第二行可以被拖动\n        .fontSize(9) // 设置字体大小为9\n        .fontColor(0xCCCCCC) // 设置字体颜色为浅灰色\n        .width('90%') // 设置文本宽度为父容器的90%\n      \n      RowSplit() { // 创建一个可拖动的行分割组件\n        Text('1') // 创建第一个文本组件\n          .width('10%') // 设置文本宽度为父容器的10%\n          .height(100) // 设置文本高度为100\n          .backgroundColor(0xF5DEB3) // 设置背景颜色为浅棕色\n          .textAlign(TextAlign.Center) // 设置文本居中对齐\n        \n        Text('2') // 创建第二个文本组件\n          .width('10%') // 设置文本宽度为父容器的10%\n          .height(100) // 设置文本高度为100\n          .backgroundColor(0xD2B48C) // 设置背景颜色为深棕色\n          .textAlign(TextAlign.Center) // 设置文本居中对齐\n        \n        Text('3') // 创建第三个文本组件\n          .width('10%') // 设置文本宽度为父容器的10%\n          .height(100) // 设置文本高度为100\n          .backgroundColor(0xF5DEB3) // 设置背景颜色为浅棕色\n          .textAlign(TextAlign.Center) // 设置文本居中对齐\n        \n        Text('4') // 创建第四个文本组件\n          .width('10%') // 设置文本宽度为父容器的10%\n          .height(100) // 设置文本高度为100\n          .backgroundColor(0xD2B48C) // 设置背景颜色为深棕色\n          .textAlign(TextAlign.Center) // 设置文本居中对齐\n        \n        Text('5') // 创建第五个文本组件\n          .width('10%') // 设置文本宽度为父容器的10%\n          .height(100) // 设置文本高度为100\n          .backgroundColor(0xF5DEB3) // 设置背景颜色为浅棕色\n          .textAlign(TextAlign.Center) // 设置文本居中对齐\n      }\n      .resizeable(true) // 设置RowSplit组件为可拖动，用户可以通过拖动分割线来调整每行的高度\n      .width('90%') // 设置RowSplit组件的宽度为父容器的90%\n      .height(100) // 设置RowSplit组件的高度为100\n    }\n    .width('100%') // 设置Column容器的宽度为父容器的100%\n    .margin({ top: 5 }) // 设置Column容器的上边距为5\n  }\n}"
        }
    ],
    "Scroll": [
        {
            "description": "实现一个可滚动的列表组件，支持上拉加载更多功能。列表项为数字，每个数字显示在一个带有边框和背景色的矩形框中。滚动容器具有黄色背景，并且支持弹性边缘效果和滚动对齐功能。",
            "code": "@Entry // 标记该组件为应用的入口组件\n@Component // 标记该结构体为一个自定义组件\nstruct Index {\n  scroller: Scroller = new Scroller; // 创建一个Scroller实例，用于控制滚动行为\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]; // 定义一个数字数组，作为列表的数据源\n\n  build() {\n    Scroll(this.scroller) { // 创建一个可滚动的容器，使用scroller实例来控制滚动\n      Column() { // 创建一个垂直布局的容器\n        ForEach(this.arr, (item: number) => { // 遍历数组中的每个元素，生成对应的UI组件\n          Text(item.toString()) // 将数字转换为字符串并显示在文本组件中\n            .width('90%') // 设置文本组件的宽度为父容器的90%\n            .height(200) // 设置文本组件的高度为200像素\n            .backgroundColor(0xFFFFFF) // 设置文本组件的背景色为白色\n            .borderWidth(1) // 设置文本组件的边框宽度为1像素\n            .borderColor(Color.Black) // 设置文本组件的边框颜色为黑色\n            .borderRadius(15) // 设置文本组件的边框圆角半径为15像素\n            .fontSize(16) // 设置文本组件的字体大小为16像素\n            .textAlign(TextAlign.Center) // 设置文本组件的文本对齐方式为居中\n        }, (item: string) => item) // 定义ForEach的键值生成函数，确保每个列表项的唯一性\n      }.width('100%').backgroundColor(0xDCDCDC) // 设置Column容器的宽度为100%，背景色为浅灰色\n    }\n    .backgroundColor(Color.Yellow) // 设置滚动容器的背景色为黄色\n    .height('100%') // 设置滚动容器的高度为父容器的100%\n    .edgeEffect(EdgeEffect.Spring) // 设置滚动容器的边缘效果为弹性效果\n    .scrollSnap({ // 设置滚动容器的滚动对齐属性\n      snapAlign: ScrollSnapAlign.START, // 设置滚动对齐方式为开始对齐\n      snapPagination: 400, // 设置滚动对齐的页面大小为400像素\n      enableSnapToStart: true, // 启用滚动到开始位置的对齐功能\n      enableSnapToEnd: true // 启用滚动到结束位置的对齐功能\n    })\n  }\n}"
        },
        {
            "description": "实现一个可滚动的列表组件，支持通过按钮控制以700vp/s的速度滚动到列表底部。列表项为数字，每个数字项显示在一个矩形框中，支持垂直滚动，并带有滚动条。",
            "code": "@Entry\n@Component\nstruct ScrollExample {\n  // 创建一个Scroller实例，用于控制滚动行为\n  scroller: Scroller = new Scroller()\n  // 定义一个数字数组，用于生成列表项\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n  build() {\n    Stack({ alignContent: Alignment.TopStart }) {\n      // 创建一个垂直滚动的Scroll组件，使用scroller实例进行控制\n      Scroll(this.scroller) {\n        Column() {\n          // 使用ForEach循环生成列表项，每个列表项为一个Text组件\n          ForEach(this.arr, (item: number) => {\n            Text(item.toString())\n              .width('90%') // 设置文本宽度为父容器的90%\n              .height(150) // 设置文本高度为150vp\n              .backgroundColor(0xFFFFFF) // 设置背景颜色为白色\n              .borderRadius(15) // 设置圆角边框\n              .fontSize(16) // 设置字体大小为16\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n              .margin({ top: 10 }) // 设置顶部外边距为10vp\n          }, (item: string) => item) // 使用item作为唯一标识符\n        }.width('100%') // 设置Column的宽度为100%\n      }\n      .scrollable(ScrollDirection.Vertical) // 设置Scroll组件为垂直滚动\n      .scrollBar(BarState.On) // 开启滚动条\n      .scrollBarColor(Color.Gray) // 设置滚动条颜色为灰色\n      .scrollBarWidth(10) // 设置滚动条宽度为10vp\n      .friction(0.6) // 设置滚动摩擦系数为0.6\n      .edgeEffect(EdgeEffect.None) // 禁用边缘效果\n      .onWillScroll((xOffset: number, yOffset: number, scrollState: ScrollState) => {\n        console.info(xOffset + ' ' + yOffset) // 滚动时输出当前的x和y偏移量\n      })\n      .onScrollEdge((side: Edge) => {\n        console.info('To the edge') // 滚动到边缘时输出提示信息\n      })\n      .onScrollStop(() => {\n        console.info('Scroll Stop') // 滚动停止时输出提示信息\n      })\n\n      // 创建一个按钮，点击后以700vp/s的速度滚动到列表底部\n      Button('scroll to bottom 700')\n        .height('5%') // 设置按钮高度为父容器的5%\n        .onClick(() => { \n          this.scroller.scrollEdge(Edge.Bottom, { velocity: 700 }) // 调用scroller的scrollEdge方法，滚动到列表底部\n        })\n        .margin({ top: 100, left: 20 }) // 设置按钮的顶部和左侧外边距\n    }.width('100%').height('100%').backgroundColor(0xDCDCDC) // 设置Stack的宽度、高度和背景颜色\n  }\n}"
        },
        {
            "description": "实现一个可滚动的列表组件，支持通过按钮控制列表的快速滚动（fling），列表项为数字，布局为垂直排列，无滚动条，具有弹性边缘效果。",
            "code": "@Entry // 标记该组件为入口组件，即应用启动时首先加载的组件\n@Component // 标记该结构体为一个自定义组件\nstruct ListExample {\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] // 定义一个私有数组，用于存储列表项的数据\n  scrollerForList: Scroller = new Scroller() // 创建一个Scroller实例，用于控制列表的滚动行为\n\n  build() {\n    Column() { // 创建一个垂直布局的容器\n      Button('Fling-1000') // 创建一个按钮，文本为“Fling-1000”\n        .height('5%') // 设置按钮的高度为父容器高度的5%\n        .onClick(() => { // 设置按钮的点击事件\n          this.scrollerForList.fling(-1000) // 当按钮被点击时，列表向上快速滚动1000像素\n        })\n      Button('Fling3000') // 创建另一个按钮，文本为“Fling3000”\n        .height('5%') // 设置按钮的高度为父容器高度的5%\n        .onClick(() => { // 设置按钮的点击事件\n          this.scrollerForList.fling(3000) // 当按钮被点击时，列表向下快速滚动3000像素\n        })\n      List({ space: 20, initialIndex: 0, scroller: this.scrollerForList }) { // 创建一个列表组件，设置项之间的间距为20，初始索引为0，并绑定Scroller实例\n        ForEach(this.arr, (item: number) => { // 遍历数组中的每一项\n          ListItem() { // 创建一个列表项\n            Text('' + item) // 创建一个文本组件，显示当前项的值\n              .width('100%').height(100).fontSize(16) // 设置文本组件的宽度为100%，高度为100，字体大小为16\n              .textAlign(TextAlign.Center).borderRadius(10).backgroundColor(0xFFFFFF) // 设置文本居中对齐，圆角半径为10，背景颜色为白色\n          }\n        }, (item: string) => item) // 设置列表项的唯一标识符为当前项的值\n      }\n      .listDirection(Axis.Vertical) // 设置列表的排列方向为垂直方向\n      .scrollBar(BarState.Off) // 关闭滚动条\n      .friction(0.9) // 设置列表的摩擦系数为0.9，影响滚动时的减速效果\n      .divider({ strokeWidth: 2, color: 0xFFFFFF, startMargin: 20, endMargin: 20 }) // 设置列表项之间的分隔线，宽度为2，颜色为白色，起始和结束边距为20\n      .edgeEffect(EdgeEffect.Spring) // 设置列表的边缘效果为弹性效果\n      .width('90%') // 设置列表的宽度为父容器宽度的90%\n    }\n    .width('100%') // 设置容器的宽度为父容器的100%\n    .height('100%') // 设置容器的高度为父容器的100%\n    .backgroundColor(0xDCDCDC) // 设置容器的背景颜色为浅灰色\n    .padding({ top: 5 }) // 设置容器的顶部内边距为5\n  }\n}"
        },
        {
            "description": "实现一个带有粘性嵌套滚动的组件。组件包含一个可滚动的区域，其中包含一个Tabs组件，每个TabContent中包含一个列表。列表中的每个项目都应用了自定义的卡片样式。组件在初始化时会生成30个列表项。",
            "code": "@Entry\n@Component\nstruct StickyNestedScroll {\n  @State arr: number[] = [] // 定义一个状态变量arr，用于存储列表项的数据\n\n  @Styles\n  listCard() {\n    .backgroundColor(Color.White) // 设置背景颜色为白色\n    .height(72) // 设置高度为72\n    .width(\"100%\") // 设置宽度为100%\n    .borderRadius(12) // 设置边框圆角为12\n  }\n\n  build() {\n    Scroll() { // 创建一个可滚动的容器\n      Column() { // 创建一个垂直布局的容器\n        Text(\"Scroll Area\") // 创建一个文本组件，显示\"Scroll Area\"\n          .width(\"100%\") // 设置文本组件的宽度为100%\n          .height(\"40%\") // 设置文本组件的高度为40%\n          .backgroundColor('#0080DC') // 设置背景颜色为蓝色\n          .textAlign(TextAlign.Center) // 设置文本居中对齐\n        Tabs({ barPosition: BarPosition.Start }) { // 创建一个Tabs组件，标签栏位于顶部\n          TabContent() { // 创建一个TabContent组件\n            List({ space: 10 }) { // 创建一个列表组件，项目之间的间距为10\n              ForEach(this.arr, (item: number) => { // 遍历arr数组，生成列表项\n                ListItem() { // 创建一个列表项\n                  Text(\"item\" + item) // 创建一个文本组件，显示\"item\" + 当前数组项的值\n                    .fontSize(16) // 设置字体大小为16\n                }.listCard() // 应用自定义的卡片样式\n              }, (item: string) => item) // 指定key生成函数\n            }.width(\"100%\") // 设置列表的宽度为100%\n            .edgeEffect(EdgeEffect.Spring) // 设置边缘效果为弹性回弹\n            .nestedScroll({ // 设置嵌套滚动模式\n              scrollForward: NestedScrollMode.PARENT_FIRST, // 向前滚动时，优先滚动父容器\n              scrollBackward: NestedScrollMode.SELF_FIRST // 向后滚动时，优先滚动当前容器\n            })\n          }.tabBar(\"Tab1\") // 设置Tab的标签为\"Tab1\"\n\n          TabContent() { // 创建另一个TabContent组件\n          }.tabBar(\"Tab2\") // 设置Tab的标签为\"Tab2\"\n        }\n        .vertical(false) // 设置Tabs为水平布局\n        .height(\"100%\") // 设置Tabs的高度为100%\n      }.width(\"100%\") // 设置Column的宽度为100%\n    }\n    .edgeEffect(EdgeEffect.Spring) // 设置Scroll的边缘效果为弹性回弹\n    .friction(0.6) // 设置滚动摩擦系数为0.6\n    .backgroundColor('#DCDCDC') // 设置背景颜色为灰色\n    .scrollBar(BarState.Off) // 关闭滚动条\n    .width('100%') // 设置Scroll的宽度为100%\n    .height('100%') // 设置Scroll的高度为100%\n  }\n\n  aboutToAppear() { // 组件即将显示时的生命周期方法\n    for (let i = 0; i < 30; i++) { // 循环生成30个列表项\n      this.arr.push(i) // 将生成的列表项添加到arr数组中\n    }\n  }\n}"
        },
        {
            "description": "实现一个嵌套滚动组件，包含一个可滚动的区域和一个列表。点击滚动区域的文本时，列表会滚动到指定位置。列表滚动时，会根据滚动位置触发不同的回调函数，并影响外部滚动区域的滚动行为。\n导入长度度量工具类，用于计算滚动偏移量",
            "code": "import { LengthMetrics } from '@kit.ArkUI';\n\n// 使用@Entry和@Component装饰器定义一个名为NestedScroll的组件\n@Entry\n@Component\nstruct NestedScroll {\n  // 定义一个状态变量listPosition，用于记录列表的滚动位置\n  @State listPosition: number = 0; \n\n  // 定义一个私有数组arr，用于存储列表的数据\n  private arr: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n  // 定义两个Scroller对象，分别用于控制外部滚动区域和列表的滚动\n  private scrollerForScroll: Scroller = new Scroller();\n  private scrollerForList: Scroller = new Scroller();\n\n  // 构建组件的UI结构\n  build() {\n    Flex() {\n      // 创建一个可滚动的区域，使用scrollerForScroll控制滚动\n      Scroll(this.scrollerForScroll) {\n        Column() {\n          // 创建一个文本组件，点击时触发列表滚动到指定位置\n          Text(\"Scroll Area\")\n            .width(\"100%\")\n            .height(\"40%\")\n            .backgroundColor(0X330000FF)\n            .fontSize(16)\n            .textAlign(TextAlign.Center)\n            .onClick(() => {\n              // 点击文本时，列表滚动到第5个元素，并带有额外的偏移量\n              this.scrollerForList.scrollToIndex(5, false, ScrollAlign.START, { extraOffset: LengthMetrics.vp(5) });\n            });\n\n          // 创建一个列表组件，使用scrollerForList控制滚动\n          List({ space: 20, scroller: this.scrollerForList }) {\n            // 使用ForEach循环渲染列表项\n            ForEach(this.arr, (item: number) => {\n              ListItem() {\n                Text(\"ListItem\" + item)\n                  .width(\"100%\")\n                  .height(\"100%\")\n                  .borderRadius(15)\n                  .fontSize(16)\n                  .textAlign(TextAlign.Center)\n                  .backgroundColor(Color.White);\n              }.width(\"100%\").height(100);\n            }, (item: string) => item);\n          }\n          .width(\"100%\")\n          .height(\"50%\")\n          .edgeEffect(EdgeEffect.None) // 禁用边缘效果\n          .friction(0.6) // 设置滚动摩擦系数\n          .onReachStart(() => {\n            // 当列表滚动到顶部时，设置listPosition为0\n            this.listPosition = 0;\n          })\n          .onReachEnd(() => {\n            // 当列表滚动到底部时，设置listPosition为2\n            this.listPosition = 2;\n          })\n          .onScrollFrameBegin((offset: number) => {\n            // 在列表滚动开始时，根据listPosition和offset调整外部滚动区域的滚动\n            if ((this.listPosition == 0 && offset <= 0) || (this.listPosition == 2 && offset >= 0)) {\n              this.scrollerForScroll.scrollBy(0, offset);\n              return { offsetRemain: 0 };\n            }\n            this.listPosition = 1;\n            return { offsetRemain: offset };\n          });\n\n          // 创建另一个文本组件，用于占位\n          Text(\"Scroll Area\")\n            .width(\"100%\")\n            .height(\"40%\")\n            .backgroundColor(0X330000FF)\n            .fontSize(16)\n            .textAlign(TextAlign.Center);\n        }\n      }\n      .width(\"100%\").height(\"100%\");\n    }\n    .width('100%').height('100%').backgroundColor(0xDCDCDC).padding(20);\n  }\n}"
        },
        {
            "description": "实现一个可滚动的列表组件，支持垂直滚动，并提供多个按钮用于控制滚动行为，包括滚动到指定位置、滚动到顶部、滚动到下一页等。列表项为数字，每个数字显示在一个文本框中。",
            "code": "import { curves } from '@kit.ArkUI' // 导入ArkUI的曲线动画库\n\n@Entry\n@Component\nstruct ScrollExample {\n  scroller: Scroller = new Scroller() // 创建一个Scroller实例，用于控制滚动行为\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] // 定义一个数字数组，用于生成列表项\n\n  build() {\n    Stack({ alignContent: Alignment.TopStart }) { // 使用Stack布局，内容对齐方式为左上角\n      Scroll(this.scroller) { // 创建一个可滚动的容器，使用scroller实例控制滚动\n        Column() { // 使用Column布局，垂直排列子组件\n          ForEach(this.arr, (item: number) => { // 遍历数组，生成列表项\n            Text(item.toString()) // 将数字转换为字符串并显示在文本框中\n              .width('90%') // 设置文本框宽度为父容器的90%\n              .height(150) // 设置文本框高度为150\n              .backgroundColor(0xFFFFFF) // 设置文本框背景颜色为白色\n              .borderRadius(15) // 设置文本框圆角半径为15\n              .fontSize(16) // 设置文本字体大小为16\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n              .margin({ top: 10 }) // 设置文本框上边距为10\n          }, (item: string) => item) // 指定ForEach的键值生成函数\n        }.width('100%') // 设置Column的宽度为父容器的100%\n      }\n      .scrollable(ScrollDirection.Vertical) // 设置滚动方向为垂直\n      .scrollBar(BarState.On) // 显示滚动条\n      .scrollBarColor(Color.Gray) // 设置滚动条颜色为灰色\n      .scrollBarWidth(10) // 设置滚动条宽度为10\n      .friction(0.6) // 设置滚动摩擦系数为0.6\n      .edgeEffect(EdgeEffect.None) // 禁用边缘效果\n      .onWillScroll((xOffset: number, yOffset: number, scrollState: ScrollState) => {\n        console.info(xOffset + ' ' + yOffset) // 滚动时输出当前的x和y偏移量\n      })\n      .onScrollEdge((side: Edge) => {\n        console.info('To the edge') // 滚动到边缘时输出提示信息\n      })\n      .onScrollStop(() => {\n        console.info('Scroll Stop') // 滚动停止时输出提示信息\n      })\n\n      Button('scroll 150') // 创建一个按钮，点击后滚动150像素\n        .height('5%') // 设置按钮高度为父容器的5%\n        .onClick(() => { \n          this.scroller.scrollBy(0, 150) // 滚动150像素\n        })\n        .margin({ top: 10, left: 20 }) // 设置按钮上边距为10，左边距为20\n      Button('scroll 100') // 创建一个按钮，点击后滚动100像素\n        .height('5%') // 设置按钮高度为父容器的5%\n        .onClick(() => { \n          const yOffset: number = this.scroller.currentOffset().yOffset; // 获取当前的y偏移量\n          this.scroller.scrollTo({ xOffset: 0, yOffset: yOffset + 100 }) // 滚动到当前位置+100像素\n        })\n        .margin({ top: 60, left: 20 }) // 设置按钮上边距为60，左边距为20\n      Button('scroll 100') // 创建一个按钮，点击后滚动100像素，带有动画效果\n        .height('5%') // 设置按钮高度为父容器的5%\n        .onClick(() => { \n          let curve = curves.interpolatingSpring(10, 1, 228, 30) // 创建一个弹簧动画曲线\n          const yOffset: number = this.scroller.currentOffset().yOffset; // 获取当前的y偏移量\n          this.scroller.scrollTo({ xOffset: 0, yOffset: yOffset + 100, animation: { duration: 1000, curve: curve } }) // 滚动到当前位置+100像素，动画时长1000毫秒，使用弹簧动画曲线\n        })\n        .margin({ top: 110, left: 20 }) // 设置按钮上边距为110，左边距为20\n      Button('back top') // 创建一个按钮，点击后滚动到顶部\n        .height('5%') // 设置按钮高度为父容器的5%\n        .onClick(() => { \n          this.scroller.scrollEdge(Edge.Top) // 滚动到顶部\n        })\n        .margin({ top: 160, left: 20 }) // 设置按钮上边距为160，左边距为20\n      Button('next page') // 创建一个按钮，点击后滚动到下一页\n        .height('5%') // 设置按钮高度为父容器的5%\n        .onClick(() => { \n          this.scroller.scrollPage({ next: true }) // 滚动到下一页\n        })\n        .margin({ top: 210, left: 20 }) // 设置按钮上边距为210，左边距为20\n    }.width('100%').height('100%').backgroundColor(0xDCDCDC) // 设置Stack的宽度、高度为父容器的100%，背景颜色为浅灰色\n  }\n}"
        }
    ],
    "SideBarContainer": [
        {
            "description": "实现一个嵌入式的侧边栏容器组件，侧边栏中包含一个可点击的图标和文本列表，点击图标或文本可以切换当前选中的项。侧边栏的内容区域显示两行文本。侧边栏的宽度、最小宽度和最大宽度可配置，并且可以通过控制按钮隐藏或显示侧边栏。侧边栏和内容区域之间有一个分隔线。",
            "code": "@Entry\n@Component\nstruct SideBarContainerExample {\n  // 定义普通状态下的图标资源\n  normalIcon: Resource = $r(\"app.media.icon\")\n  // 定义选中状态下的图标资源\n  selectedIcon: Resource = $r(\"app.media.icon\")\n  // 定义一个状态变量，存储侧边栏中的选项数组\n  @State arr: number[] = [1, 2, 3]\n  // 定义一个状态变量，存储当前选中的选项\n  @State current: number = 1\n\n  build() {\n    // 创建一个嵌入式的侧边栏容器\n    SideBarContainer(SideBarContainerType.Embed) {\n      // 创建一个列布局，用于放置侧边栏中的选项\n      Column() {\n        // 使用ForEach循环遍历选项数组，生成每个选项的UI\n        ForEach(this.arr, (item: number) => {\n          // 创建一个列布局，用于放置每个选项的图标和文本\n          Column({ space: 5 }) {\n            // 根据当前选中的选项，显示不同的图标\n            Image(this.current === item ? this.selectedIcon : this.normalIcon)\n              .width(64)\n              .height(64)\n            // 显示选项的文本，并根据当前选中的选项，设置不同的字体颜色\n            Text(\"Index0\" + item)\n              .fontSize(25)\n              .fontColor(this.current === item ? '#0A59F7' : '#999')\n              .fontFamily('source-sans-pro,cursive,sans-serif')\n          }\n          // 为每个选项添加点击事件，点击后更新当前选中的选项\n          .onClick(() => {\n            this.current = item\n          })\n        }, (item: string) => item) // 使用选项的值作为键\n      }\n      .width('100%') // 设置列布局的宽度为100%\n      .justifyContent(FlexAlign.SpaceEvenly) // 设置列布局的对齐方式为均匀分布\n      .backgroundColor('#19000000') // 设置列布局的背景颜色为半透明黑色\n\n      // 创建一个列布局，用于放置侧边栏的内容区域\n      Column() {\n        // 显示两行文本\n        Text('SideBarContainer content text1').fontSize(25)\n        Text('SideBarContainer content text2').fontSize(25)\n      }\n      .margin({ top: 50, left: 20, right: 30 }) // 设置内容区域的边距\n    }\n    // 配置侧边栏容器的控制按钮图标\n    .controlButton({\n      icons: {\n        hidden: $r('app.media.drawer'), // 隐藏状态下的图标\n        shown: $r('app.media.drawer'), // 显示状态下的图标\n        switching: $r('app.media.drawer') // 切换状态下的图标\n      }\n    })\n    // 设置侧边栏的宽度为150vp\n    .sideBarWidth(150)\n    // 设置侧边栏的最小宽度为50vp\n    .minSideBarWidth(50)\n    // 设置侧边栏的最大宽度为300vp\n    .maxSideBarWidth(300)\n    // 设置内容区域的最小宽度为0\n    .minContentWidth(0)\n    // 添加侧边栏状态变化的事件监听器，打印当前状态\n    .onChange((value: boolean) => {\n      console.info('status:' + value)\n    })\n    // 配置侧边栏和内容区域之间的分隔线\n    .divider({ strokeWidth: '1vp', color: Color.Gray, startMargin: '4vp', endMargin: '4vp' })\n  }\n}"
        }
    ],
    "Stack": [
        {
            "description": "实现一个堆叠布局（Stack）组件，其中包含两个文本组件（Text）。堆叠布局允许子组件重叠显示，通过设置对齐方式（alignContent）和子组件的对齐方式（align）来控制子组件的显示位置。",
            "code": "@Entry // 标记该组件为入口组件\n@Component // 标记该结构体为一个组件\nstruct StackExample {\n  build() {\n    Stack({ alignContent: Alignment.Bottom }) { // 创建一个堆叠布局，对齐内容到底部\n      Text('First child, show in bottom') // 第一个文本组件，显示在底部\n        .width('90%') // 设置宽度为父容器的90%\n        .height('100%') // 设置高度为父容器的100%\n        .backgroundColor(0xd2cab3) // 设置背景颜色为浅棕色\n        .align(Alignment.Top) // 设置文本组件在堆叠布局中的对齐方式为顶部对齐\n      \n      Text('Second child, show in top') // 第二个文本组件，显示在顶部\n        .width('70%') // 设置宽度为父容器的70%\n        .height('60%') // 设置高度为父容器的60%\n        .backgroundColor(0xc1cbac) // 设置背景颜色为浅绿色\n        .align(Alignment.Top) // 设置文本组件在堆叠布局中的对齐方式为顶部对齐\n    }\n    .width('100%') // 设置堆叠布局的宽度为父容器的100%\n    .height(150) // 设置堆叠布局的高度为150像素\n    .margin({ top: 5 }) // 设置堆叠布局的上边距为5像素\n  }\n}"
        }
    ],
    "Swiper": [
        {
            "description": "实现一个可滚动的轮播组件，支持按组翻页效果。组件包含一个Swiper组件，通过LazyForEach动态加载数据，并使用SwiperController控制轮播的前进和后退。轮播组件支持自动播放、循环播放、设置间隔时间、动画持续时间、项目间距以及自定义指示器样式。\n定义一个数据源类，实现IDataSource接口\nclass MyDataSource implements IDataSource {\nprivate list: number[] = []  存储数据的数组\n构造函数，初始化数据源\nconstructor(list: number[]) {\nthis.list = list\n}\n返回数据的总数\ntotalCount(): number {\nreturn this.list.length\n}\n根据索引获取数据\ngetData(index: number): number {\nreturn this.list[index]\n}\n注册数据变化监听器（未实现）\nregisterDataChangeListener(listener: DataChangeListener): void {\n}\n注销数据变化监听器（未实现）\nunregisterDataChangeListener() {\n}\n}\n主入口组件",
            "code": "@Entry\n@Component\nstruct SwiperExample {\n  private swiperController: SwiperController = new SwiperController() // 创建Swiper控制器\n  private data: MyDataSource = new MyDataSource([]) // 初始化数据源\n\n  // 组件即将显示时执行的逻辑\n  aboutToAppear(): void {\n    let list: number[] = []\n    for (let i = 1; i <= 10; i++) {\n      list.push(i); // 生成1到10的数字列表\n    }\n    this.data = new MyDataSource(list) // 更新数据源\n  }\n\n  // 构建组件UI\n  build() {\n    Column({ space: 5 }) { // 创建一个垂直布局，间距为5\n      Swiper(this.swiperController) { // 创建Swiper组件，并传入控制器\n        LazyForEach(this.data, (item: string) => { // 使用LazyForEach动态加载数据\n          Text(item.toString()) // 创建文本组件，显示数据项\n            .width('90%') // 设置文本宽度为90%\n            .height(160) // 设置文本高度为160\n            .backgroundColor(0xAFEEEE) // 设置背景颜色\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n            .fontSize(30) // 设置字体大小为30\n        }, (item: string) => item) // 使用数据项作为键\n      }\n      .displayCount(3, true) // 设置每页显示3个项目，并启用按组翻页\n      .autoPlay(true) // 启用自动播放\n      .interval(4000) // 设置自动播放间隔为4秒\n      .loop(true) // 启用循环播放\n      .duration(1000) // 设置动画持续时间为1秒\n      .itemSpace(10) // 设置项目间距为10\n      .indicator( \n        new DotIndicator() // 创建指示器\n          .itemWidth(15) // 设置指示器项宽度为15\n          .itemHeight(15) // 设置指示器项高度为15\n          .selectedItemWidth(15) // 设置选中项宽度为15\n          .selectedItemHeight(15) // 设置选中项高度为15\n          .color(Color.Gray) // 设置指示器颜色为灰色\n          .selectedColor(Color.Blue)) // 设置选中项颜色为蓝色\n\n      Row({ space: 12 }) { // 创建一个水平布局，间距为12\n        Button('showNext') // 创建按钮，显示“下一页”\n          .onClick(() => {\n            this.swiperController.showNext() // 点击按钮时显示下一页\n          })\n        Button('showPrevious') // 创建按钮，显示“上一页”\n          .onClick(() => {\n            this.swiperController.showPrevious() // 点击按钮时显示上一页\n          })\n      }.margin(5) // 设置按钮布局的上下外边距为5\n    }.width('100%') // 设置主布局宽度为100%\n    .margin({ top: 5 }) // 设置主布局的上外边距为5\n  }\n}"
        },
        {
            "description": "实现一个带有圆点导航指示器的轮播图组件，支持自动播放、循环播放、手动切换等功能。导航指示器通过DotIndicator接口的maxDisplayCount属性实现超长显示动画效果。\n定义一个数据源类，实现IDataSource接口，用于提供Swiper组件的数据\nclass MyDataSource implements IDataSource {\nprivate list: number[] = []  存储数据列表\n构造函数，初始化数据列表\nconstructor(list: number[]) {\nthis.list = list\n}\n返回数据的总数\ntotalCount(): number {\nreturn this.list.length\n}\n根据索引获取数据\ngetData(index: number): number {\nreturn this.list[index]\n}\n注册数据变化监听器（未实现）\nregisterDataChangeListener(listener: DataChangeListener): void {\n}\n注销数据变化监听器（未实现）\nunregisterDataChangeListener() {\n}\n}\n主入口组件",
            "code": "@Entry\n@Component\nstruct Index {\n  private swiperController: SwiperController = new SwiperController() // 创建Swiper控制器，用于手动控制Swiper的切换\n  private data: MyDataSource = new MyDataSource([]) // 初始化数据源\n\n  // 组件即将显示时执行的逻辑\n  aboutToAppear(): void {\n    let list: number[] = []\n    for (let i = 1; i <= 15; i++) { // 生成15个数字作为数据源\n      list.push(i);\n    }\n    this.data = new MyDataSource(list) // 更新数据源\n  }\n\n  // 构建组件UI\n  build() {\n    Column({ space: 5 }) { // 创建一个垂直布局，间距为5\n      Swiper(this.swiperController) { // 创建一个Swiper组件，使用swiperController进行控制\n        LazyForEach(this.data, (item: string) => { // 使用LazyForEach遍历数据源\n          Text(item.toString()) // 显示每个数据项\n            .width('90%') // 设置文本宽度为90%\n            .height(160) // 设置文本高度为160\n            .backgroundColor(0xAFEEEE) // 设置背景颜色\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n            .fontSize(30) // 设置字体大小为30\n        }, (item: string) => item) // 使用数据项作为唯一标识符\n      }\n      .cachedCount(2) // 设置缓存页数为2\n      .index(5) // 设置初始显示的索引为5\n      .autoPlay(true) // 开启自动播放\n      .interval(4000) // 设置自动播放间隔为4000毫秒\n      .loop(true) // 开启循环播放\n      .duration(1000) // 设置切换动画时长为1000毫秒\n      .itemSpace(0) // 设置页面间距为0\n      .indicator( \n        new DotIndicator() // 创建一个圆点指示器\n          .itemWidth(8) // 设置未选中圆点的宽度为8\n          .itemHeight(8) // 设置未选中圆点的高度为8\n          .selectedItemWidth(16) // 设置选中圆点的宽度为16\n          .selectedItemHeight(8) // 设置选中圆点的高度为8\n          .color(Color.Gray) // 设置未选中圆点的颜色为灰色\n          .selectedColor(Color.Blue) // 设置选中圆点的颜色为蓝色\n          .maxDisplayCount(9)) // 设置最多显示9个圆点\n      .displayArrow({ \n        showBackground: true, // 显示箭头背景\n        isSidebarMiddle: true, // 箭头位于侧边栏中间\n        backgroundSize: 24, // 设置箭头背景大小为24\n        backgroundColor: Color.White, // 设置箭头背景颜色为白色\n        arrowSize: 18, // 设置箭头大小为18\n        arrowColor: Color.Blue // 设置箭头颜色为蓝色\n      }, false) // 不显示箭头\n      .curve(Curve.Linear) // 设置动画曲线为线性\n      Row({ space: 12 }) { // 创建一个水平布局，间距为12\n        Button('showNext') // 创建一个按钮，显示“showNext”\n          .onClick(() => {\n            this.swiperController.showNext() // 点击按钮时显示下一页\n          })\n        Button('showPrevious') // 创建一个按钮，显示“showPrevious”\n          .onClick(() => {\n            this.swiperController.showPrevious() // 点击按钮时显示上一页\n          })\n      }.margin(5) // 设置按钮布局的外边距为5\n    }.width('100%') // 设置主布局的宽度为100%\n    .margin({ top: 5 }) // 设置主布局的上外边距为5\n  }\n}"
        },
        {
            "description": "实现一个自定义Swiper页面切换动画的示例。Swiper组件用于展示多个页面，并通过customContentTransition接口实现自定义的页面切换动画效果。每个页面包含一个文本和一个背景颜色，页面切换时会根据位置动态调整页面的透明度、缩放比例、平移距离和层级。",
            "code": "@Entry\n@Component\nstruct SwiperCustomAnimationExample {\n  // 定义常量，表示同时显示的页面数量\n  private DISPLAY_COUNT: number = 2\n  // 定义常量，表示页面缩放的最小比例\n  private MIN_SCALE: number = 0.75\n\n  // 定义状态变量，存储每个页面的背景颜色\n  @State backgroundColors: Color[] = [Color.Green, Color.Blue, Color.Yellow, Color.Pink, Color.Gray, Color.Orange]\n  // 定义状态变量，存储每个页面的透明度\n  @State opacityList: number[] = []\n  // 定义状态变量，存储每个页面的缩放比例\n  @State scaleList: number[] = []\n  // 定义状态变量，存储每个页面的平移距离\n  @State translateList: number[] = []\n  // 定义状态变量，存储每个页面的层级\n  @State zIndexList: number[] = []\n\n  // 组件即将显示时调用的方法，初始化每个页面的透明度、缩放比例、平移距离和层级\n  aboutToAppear(): void {\n    for (let i = 0; i < this.backgroundColors.length; i++) {\n      this.opacityList.push(1.0)\n      this.scaleList.push(1.0)\n      this.translateList.push(0.0)\n      this.zIndexList.push(0)\n    }\n  }\n\n  // 构建Swiper组件\n  build() {\n    Column() {\n      Swiper() {\n        // 使用ForEach循环遍历背景颜色数组，生成每个页面\n        ForEach(this.backgroundColors, (backgroundColor: Color, index: number) => {\n          Text(index.toString()).width('100%').height('100%').fontSize(50).textAlign(TextAlign.Center)\n            .backgroundColor(backgroundColor)\n            // 设置页面的透明度\n            .opacity(this.opacityList[index])\n            // 设置页面的缩放比例\n            .scale({ x: this.scaleList[index], y: this.scaleList[index] })\n            // 设置页面的平移距离\n            .translate({ x: this.translateList[index] })\n            // 设置页面的层级\n            .zIndex(this.zIndexList[index])\n        })\n      }\n      .height(300)\n      // 隐藏Swiper的指示器\n      .indicator(false)\n      // 设置同时显示的页面数量\n      .displayCount(this.DISPLAY_COUNT, true)\n      // 自定义页面切换动画\n      .customContentTransition({\n        timeout: 1000,\n        transition: (proxy: SwiperContentTransitionProxy) => {\n          // 根据页面的位置和索引，动态调整页面的透明度、缩放比例、平移距离和层级\n          if (proxy.position <= proxy.index % this.DISPLAY_COUNT || proxy.position >= this.DISPLAY_COUNT + proxy.index % this.DISPLAY_COUNT) {\n            this.opacityList[proxy.index] = 1.0\n            this.scaleList[proxy.index] = 1.0\n            this.translateList[proxy.index] = 0.0\n            this.zIndexList[proxy.index] = 0\n          } else {\n            if (proxy.index % this.DISPLAY_COUNT === 0) {\n              this.opacityList[proxy.index] = 1 - proxy.position / this.DISPLAY_COUNT\n              this.scaleList[proxy.index] = this.MIN_SCALE + (1 - this.MIN_SCALE) * (1 - proxy.position / this.DISPLAY_COUNT)\n              this.translateList[proxy.index] = - proxy.position * proxy.mainAxisLength + (1 - this.scaleList[proxy.index]) * proxy.mainAxisLength / 2.0\n            } else {\n              this.opacityList[proxy.index] = 1 - (proxy.position - 1) / this.DISPLAY_COUNT\n              this.scaleList[proxy.index] = this.MIN_SCALE + (1 - this.MIN_SCALE) * (1 - (proxy.position - 1) / this.DISPLAY_COUNT)\n              this.translateList[proxy.index] = - (proxy.position - 1) * proxy.mainAxisLength - (1 - this.scaleList[proxy.index]) * proxy.mainAxisLength / 2.0\n            }\n            this.zIndexList[proxy.index] = -1\n          }\n        }\n      })\n      // 监听Swiper内容滚动事件，打印当前选中的索引、页面的索引、位置和主轴长度\n      .onContentDidScroll((selectedIndex: number, index: number, position: number, mainAxisLength: number) => {\n        console.info(\"onContentDidScroll selectedIndex: \" + selectedIndex + \", index: \" + index + \", position: \" + position + \", mainAxisLength: \" + mainAxisLength)\n      })\n    }.width('100%')\n  }\n}"
        },
        {
            "description": "实现一个可滚动的轮播图组件，支持自动播放、循环播放、导航点交互、手势滑动、动画事件等功能。\n定义一个数据源类，用于提供轮播图的数据\nclass MyDataSource implements IDataSource {\nprivate list: number[] = []\n构造函数，初始化数据源\nconstructor(list: number[]) {\nthis.list = list\n}\n返回数据源的总数\ntotalCount(): number {\nreturn this.list.length\n}\n根据索引获取数据\ngetData(index: number): number {\nreturn this.list[index]\n}\n注册数据变化监听器（未实现）\nregisterDataChangeListener(listener: DataChangeListener): void {\n}\n取消注册数据变化监听器（未实现）\nunregisterDataChangeListener() {\n}\n}\n主入口组件，定义轮播图示例",
            "code": "@Entry\n@Component\nstruct SwiperExample {\n  // 轮播图控制器\n  private swiperController: SwiperController = new SwiperController()\n  // 数据源实例\n  private data: MyDataSource = new MyDataSource([])\n\n  // 组件即将显示时执行的逻辑\n  aboutToAppear(): void {\n    let list: number[] = []\n    // 生成1到10的数字列表\n    for (let i = 1; i <= 10; i++) {\n      list.push(i);\n    }\n    // 初始化数据源\n    this.data = new MyDataSource(list)\n  }\n\n  // 构建UI结构\n  build() {\n    Column({ space: 5 }) {\n      // 轮播图组件\n      Swiper(this.swiperController) {\n        // 使用LazyForEach遍历数据源并生成Text组件\n        LazyForEach(this.data, (item: string) => {\n          Text(item.toString())\n            .width('90%')\n            .height(160)\n            .backgroundColor(0xAFEEEE)\n            .textAlign(TextAlign.Center)\n            .fontSize(30)\n        }, (item: string) => item)\n      }\n      .cachedCount(2) // 设置缓存项数\n      .index(1) // 设置初始显示的索引\n      .autoPlay(true) // 开启自动播放\n      .interval(4000) // 设置自动播放间隔时间\n      .loop(true) // 开启循环播放\n      .indicatorInteractive(true) // 开启导航点交互\n      .duration(1000) // 设置动画持续时间\n      .itemSpace(0) // 设置项间距\n      .indicator( \n        new DotIndicator()\n          .itemWidth(15) // 设置导航点宽度\n          .itemHeight(15) // 设置导航点高度\n          .selectedItemWidth(15) // 设置选中导航点宽度\n          .selectedItemHeight(15) // 设置选中导航点高度\n          .color(Color.Gray) // 设置导航点颜色\n          .selectedColor(Color.Blue)) // 设置选中导航点颜色\n      .displayArrow({ \n        showBackground: true, // 显示箭头背景\n        isSidebarMiddle: true, // 箭头位于侧边栏中间\n        backgroundSize: 24, // 箭头背景大小\n        backgroundColor: Color.White, // 箭头背景颜色\n        arrowSize: 18, // 箭头大小\n        arrowColor: Color.Blue // 箭头颜色\n      }, false) // 不显示箭头\n      .curve(Curve.Linear) // 设置动画曲线\n      .onChange((index: number) => {\n        console.info(index.toString()) // 打印当前索引\n      })\n      .onGestureSwipe((index: number, extraInfo: SwiperAnimationEvent) => {\n        console.info(\"index: \" + index) // 打印当前索引\n        console.info(\"current offset: \" + extraInfo.currentOffset) // 打印当前偏移量\n      })\n      .onAnimationStart((index: number, targetIndex: number, extraInfo: SwiperAnimationEvent) => {\n        console.info(\"index: \" + index) // 打印当前索引\n        console.info(\"targetIndex: \" + targetIndex) // 打印目标索引\n        console.info(\"current offset: \" + extraInfo.currentOffset) // 打印当前偏移量\n        console.info(\"target offset: \" + extraInfo.targetOffset) // 打印目标偏移量\n        console.info(\"velocity: \" + extraInfo.velocity) // 打印速度\n      })\n      .onAnimationEnd((index: number, extraInfo: SwiperAnimationEvent) => {\n        console.info(\"index: \" + index) // 打印当前索引\n        console.info(\"current offset: \" + extraInfo.currentOffset) // 打印当前偏移量\n      })\n\n      // 按钮行，用于控制轮播图的显示\n      Row({ space: 12 }) {\n        Button('showNext')\n          .onClick(() => {\n            this.swiperController.showNext() // 显示下一项\n          })\n        Button('showPrevious')\n          .onClick(() => {\n            this.swiperController.showPrevious() // 显示上一项\n          })\n      }.margin(5)\n    }.width('100%')\n    .margin({ top: 5 })\n  }\n}"
        },
        {
            "description": "实现一个带有数字指示器的轮播图组件。轮播图可以自动播放，并且用户可以通过按钮手动切换到上一张或下一张。数字指示器显示当前页码和总页数，并支持自定义样式。\n定义一个数据源类，实现IDataSource接口，用于提供轮播图的数据\nclass MyDataSource implements IDataSource {\nprivate list: number[] = []  存储轮播图数据的数组\n构造函数，接收一个数字数组作为数据源\nconstructor(list: number[]) {\nthis.list = list\n}\n返回数据源的总数\ntotalCount(): number {\nreturn this.list.length\n}\n根据索引获取数据源中的数据\ngetData(index: number): number {\nreturn this.list[index]\n}\n注册数据变化监听器（本示例中未实现具体功能）\nregisterDataChangeListener(listener: DataChangeListener): void {\n}\n注销数据变化监听器（本示例中未实现具体功能）\nunregisterDataChangeListener() {\n}\n}\n主组件，使用",
            "code": "@Entry和@Component装饰器标记为入口组件\n@Entry\n@Component\nstruct SwiperExample {\n  private swiperController: SwiperController = new SwiperController() // 创建一个SwiperController实例，用于控制轮播图\n  private data: MyDataSource = new MyDataSource([]) // 初始化数据源，初始为空数组\n\n  // 组件即将显示时执行的逻辑\n  aboutToAppear(): void {\n    let list: number[] = [] // 创建一个空数组，用于存储轮播图数据\n    for (let i = 1; i <= 10; i++) { // 循环生成1到10的数字\n      list.push(i); // 将生成的数字添加到数组中\n    }\n    this.data = new MyDataSource(list) // 将生成的数组作为数据源\n  }\n\n  // 构建组件的UI结构\n  build() {\n    Column({ space: 5 }) { // 创建一个垂直布局，子组件之间的间距为5\n      Swiper(this.swiperController) { // 创建一个轮播图组件，使用swiperController进行控制\n        LazyForEach(this.data, (item: string) => { // 使用LazyForEach组件遍历数据源\n          Text(item.toString()) // 创建一个文本组件，显示当前数据项的值\n            .width('90%') // 设置文本组件的宽度为父容器的90%\n            .height(160) // 设置文本组件的高度为160\n            .backgroundColor(0xAFEEEE) // 设置文本组件的背景颜色为浅蓝色\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n            .fontSize(30) // 设置文本的字体大小为30\n        }, (item: string) => item) // 指定key生成函数，确保每个子组件的唯一性\n      }\n      .cachedCount(2) // 设置缓存的页面数量为2\n      .index(1) // 设置初始显示的页面索引为1\n      .autoPlay(true) // 开启自动播放\n      .interval(4000) // 设置自动播放的时间间隔为4000毫秒（4秒）\n      .indicator(Indicator.digit() // 设置数字指示器\n        .top(200) // 设置数字指示器距离顶部的距离为200\n        .fontColor(Color.Gray) // 设置数字指示器的默认字体颜色为灰色\n        .selectedFontColor(Color.Gray) // 设置当前选中的数字字体颜色为灰色\n        .digitFont({ size: 20, weight: FontWeight.Bold }) // 设置数字指示器的默认字体样式（大小为20，粗体）\n        .selectedDigitFont({ size: 20, weight: FontWeight.Normal })) // 设置当前选中的数字字体样式（大小为20，正常）\n      .loop(true) // 开启循环播放\n      .duration(1000) // 设置页面切换的动画持续时间为1000毫秒（1秒）\n      .itemSpace(0) // 设置页面之间的间距为0\n      .displayArrow(true, false) // 设置显示左右箭头，但不显示中间的指示器\n\n      Row({ space: 12 }) { // 创建一个水平布局，子组件之间的间距为12\n        Button('showNext') // 创建一个按钮，显示文本为“showNext”\n          .onClick(() => { // 按钮点击事件处理函数\n            this.swiperController.showNext() // 调用swiperController的showNext方法，显示下一张页面\n          })\n        Button('showPrevious') // 创建一个按钮，显示文本为“showPrevious”\n          .onClick(() => { // 按钮点击事件处理函数\n            this.swiperController.showPrevious() // 调用swiperController的showPrevious方法，显示上一张页面\n          })\n      }.margin(5) // 设置水平布局的外边距为5\n    }.width('100%') // 设置垂直布局的宽度为父容器的100%\n    .margin({ top: 5 }) // 设置垂直布局的上外边距为5\n  }\n}"
        }
    ],
    "Tabs": [
        {
            "description": "实现一个带有预加载功能的标签页组件。标签页包含四个子标签页，每个子标签页显示不同颜色的背景。通过点击按钮，可以预加载指定索引的标签页内容，以提高用户体验。",
            "code": "import { BusinessError } from '@kit.BasicServicesKit'\n\n@Entry\n@Component\nstruct TabsPreloadItems {\n  @State currentIndex: number = 1 // 当前选中的标签页索引，默认为1\n  private tabsController: TabsController = new TabsController() // 创建TabsController实例，用于控制标签页\n\n  build() {\n    Column() {\n      Tabs({ index: this.currentIndex, controller: this.tabsController }) {\n        TabContent() {\n          MyComponent({ color: '#00CB87' }) // 第一个标签页内容，显示绿色背景的MyComponent组件\n        }.tabBar(SubTabBarStyle.of('green')) // 设置标签页的样式为绿色\n\n        TabContent() {\n          MyComponent({ color: '#007DFF' }) // 第二个标签页内容，显示蓝色背景的MyComponent组件\n        }.tabBar(SubTabBarStyle.of('blue')) // 设置标签页的样式为蓝色\n\n        TabContent() {\n          MyComponent({ color: '#FFBF00' }) // 第三个标签页内容，显示黄色背景的MyComponent组件\n        }.tabBar(SubTabBarStyle.of('yellow')) // 设置标签页的样式为黄色\n\n        TabContent() {\n          MyComponent({ color: '#E67C92' }) // 第四个标签页内容，显示粉色背景的MyComponent组件\n        }.tabBar(SubTabBarStyle.of('pink')) // 设置标签页的样式为粉色\n      }\n      .width(360) // 设置Tabs组件的宽度\n      .height(296) // 设置Tabs组件的高度\n      .backgroundColor('#F1F3F5') // 设置Tabs组件的背景颜色\n      .onChange((index: number) => {\n        this.currentIndex = index // 当标签页切换时，更新当前选中的标签页索引\n      })\n\n      Button('preload items: [0, 2, 3]') // 创建一个按钮，点击后预加载指定索引的标签页内容\n        .margin(5) // 设置按钮的外边距\n        .onClick(() => {\n          this.tabsController.preloadItems([0, 2, 3]) // 调用preloadItems方法预加载索引为0、2、3的标签页内容\n            .then(() => {\n              console.info('preloadItems success.') // 预加载成功时在控制台输出信息\n            })\n            .catch((error: BusinessError) => {\n              console.error('preloadItems failed, error code: ' + error.code + ', error message: ' + error.message) // 预加载失败时在控制台输出错误信息\n            })\n        })\n    }\n  }\n}\n\n@Component\nstruct MyComponent {\n  private color: string = \"\" // 组件的背景颜色\n\n  aboutToAppear(): void {\n    console.info('aboutToAppear backgroundColor:' + this.color) // 组件即将显示时在控制台输出背景颜色\n  }\n\n  aboutToDisappear(): void {\n    console.info('aboutToDisappear backgroundColor:' + this.color) // 组件即将消失时在控制台输出背景颜色\n  }\n\n  build() {\n    Column()\n      .width('100%') // 设置组件的宽度为100%\n      .height('100%') // 设置组件的高度为100%\n      .backgroundColor(this.color) // 设置组件的背景颜色\n  }\n}"
        },
        {
            "description": "实现一个带有自定义TabBar的Tabs组件，支持Tab切换时的动画效果和自定义样式。TabBar位于Tabs的顶部，每个Tab的内容背景颜色不同，且TabBar的样式会根据当前选中的Tab动态变化。",
            "code": "@Entry\n@Component\nstruct TabsExample {\n  @State fontColor: string = '#182431' // 默认字体颜色\n  @State selectedFontColor: string = '#007DFF' // 选中Tab的字体颜色\n  @State currentIndex: number = 0 // 当前选中的Tab索引\n  private controller: TabsController = new TabsController() // Tabs控制器，用于控制Tabs的行为\n\n  // 自定义TabBar构建器\n  @Builder tabBuilder(index: number, name: string) {\n    Column() {\n      Text(name)\n        .fontColor(this.currentIndex === index ? this.selectedFontColor : this.fontColor) // 根据当前选中的Tab设置字体颜色\n        .fontSize(16)\n        .fontWeight(this.currentIndex === index ? 500 : 400) // 根据当前选中的Tab设置字体粗细\n        .lineHeight(22)\n        .margin({ top: 17, bottom: 7 })\n      Divider()\n        .strokeWidth(2)\n        .color('#007DFF')\n        .opacity(this.currentIndex === index ? 1 : 0) // 根据当前选中的Tab设置下划线的可见性\n    }.width('100%')\n  }\n\n  build() {\n    Column() {\n      Tabs({ barPosition: BarPosition.Start, index: this.currentIndex, controller: this.controller }) {\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#00CB87') // 第一个Tab的内容，背景颜色为绿色\n        }.tabBar(this.tabBuilder(0, 'green'))\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#007DFF') // 第二个Tab的内容，背景颜色为蓝色\n        }.tabBar(this.tabBuilder(1, 'blue'))\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#FFBF00') // 第三个Tab的内容，背景颜色为黄色\n        }.tabBar(this.tabBuilder(2, 'yellow'))\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#E67C92') // 第四个Tab的内容，背景颜色为粉色\n        }.tabBar(this.tabBuilder(3, 'pink'))\n      }\n      .vertical(false) // 设置TabBar为水平布局\n      .barMode(BarMode.Fixed) // 设置TabBar为固定模式\n      .barWidth(360) // 设置TabBar的宽度\n      .barHeight(56) // 设置TabBar的高度\n      .animationDuration(400) // 设置切换Tab时的动画持续时间\n      .onChange((index: number) => {\n        this.currentIndex = index // 更新当前选中的Tab索引\n      })\n      .width(360)\n      .height(296)\n      .margin({ top: 52 })\n      .backgroundColor('#F1F3F5') // 设置整体背景颜色\n    }.width('100%')\n  }\n}"
        },
        {
            "description": "实现一个带有Tab切换功能的组件，包含四个Tab页，每个Tab页显示不同的内容。TabBar位于底部，支持手动切换和动态修改Tab索引。",
            "code": "@Entry\n@Component\nstruct TabsExample {\n  @State currentIndex: number = 2 // 初始化当前选中的Tab索引为2\n  private controller: TabsController = new TabsController() // 创建TabsController实例，用于控制Tab的切换\n\n  // 定义一个Builder方法用于生成TabBar的内容\n  @Builder tabBuilder(title: string, targetIndex: number) {\n    Column() {\n      Text(title).fontColor(this.currentIndex === targetIndex ? '#1698CE' : '#6B6B6B') // 根据当前选中的Tab索引改变文本颜色\n    }.width('100%')\n     .height(50)\n     .justifyContent(FlexAlign.Center)\n  }\n\n  build() {\n    Column() {\n      Tabs({ barPosition: BarPosition.End, controller: this.controller, index: this.currentIndex }) {\n        TabContent() {\n          Column() {\n            Text('首页的内容')\n          }.width('100%').height('100%').backgroundColor('#00CB87').justifyContent(FlexAlign.Center)\n        }.tabBar(this.tabBuilder('首页', 0)) // 使用tabBuilder方法生成TabBar内容\n\n        TabContent() {\n          Column() {\n            Text('发现的内容')\n          }.width('100%').height('100%').backgroundColor('#007DFF').justifyContent(FlexAlign.Center)\n        }.tabBar(this.tabBuilder('发现', 1)) // 使用tabBuilder方法生成TabBar内容\n\n        TabContent() {\n          Column() {\n            Text('推荐的内容')\n          }.width('100%').height('100%').backgroundColor('#FFBF00').justifyContent(FlexAlign.Center)\n        }.tabBar(this.tabBuilder('推荐', 2)) // 使用tabBuilder方法生成TabBar内容\n\n        TabContent() {\n          Column() {\n            Text('我的内容')\n          }.width('100%').height('100%').backgroundColor('#E67C92').justifyContent(FlexAlign.Center)\n        }.tabBar(this.tabBuilder('我的', 3)) // 使用tabBuilder方法生成TabBar内容\n      }\n      .vertical(False) // 设置Tabs为水平布局\n      .barMode(BarMode.Fixed) // 设置TabBar为固定模式\n      .barWidth(360) // 设置TabBar的宽度\n      .barHeight(60) // 设置TabBar的高度\n      .animationDuration(0) // 禁用切换动画\n      .onChange((index: number) => {\n        this.currentIndex = index // 更新当前选中的Tab索引\n      })\n      .width(360) // 设置Tabs组件的宽度\n      .height(600) // 设置Tabs组件的高度\n      .backgroundColor('#F1F3F5') // 设置Tabs组件的背景颜色\n      .scrollable(True) // 设置Tabs组件可滚动\n      .onContentWillChange((currentIndex, comingIndex) => {\n        if (comingIndex == 2) {\n          return False // 拦截切换到索引为2的Tab\n        }\n        return True // 允许其他Tab的切换\n      })\n\n      Button('动态修改index').width('50%').margin({ top: 20 })\n        .onClick(() => {\n          this.currentIndex = (this.currentIndex + 1) % 4 // 动态修改当前选中的Tab索引\n        })\n\n      Button('changeIndex').width('50%').margin({ top: 20 })\n        .onClick(() => {\n          this.currentIndex = (this.currentIndex + 1) % 4 // 动态修改当前选中的Tab索引\n          this.controller.changeIndex(this.currentIndex) // 通过TabsController控制Tab索引的切换\n        })\n    }.width('100%')\n  }\n}"
        },
        {
            "description": "实现一个带有自定义动画效果的Tabs组件。每个Tab页面在切换时会有缩放和透明度变化的动画效果。动画的持续时间和延迟时间根据Tab页面的索引递增。",
            "code": "@Entry\n@Component\nstruct TabsCustomAnimationExample {\n  @State data: itemType[] = [\n    {\n      text: 'Red',\n      backgroundColor: Color.Red\n    },\n    {\n      text: 'Yellow',\n      backgroundColor: Color.Yellow\n    },\n    {\n      text: 'Blue',\n      backgroundColor: Color.Blue\n    }\n  ]\n  @State opacityList: number[] = [] // 存储每个Tab页面的透明度值\n  @State scaleList: number[] = [] // 存储每个Tab页面的缩放值\n\n  private durationList: number[] = [] // 存储每个Tab页面的动画持续时间\n  private timeoutList: number[] = [] // 存储每个Tab页面的动画延迟时间\n\n  // 定义自定义的TabContentAnimatedTransition\n  private customContentTransition: (from: number, to: number) => TabContentAnimatedTransition = (from: number, to: number) => {\n    let tabContentAnimatedTransition = {\n      timeout: this.timeoutList[from], // 设置动画延迟时间\n      transition: (proxy: TabContentTransitionProxy) => {\n        this.scaleList[from] = 1.0 // 设置起始Tab页面的初始缩放值\n        this.scaleList[to] = 0.5 // 设置目标Tab页面的初始缩放值\n        this.opacityList[from] = 1.0 // 设置起始Tab页面的初始透明度值\n        this.opacityList[to] = 0.5 // 设置目标Tab页面的初始透明度值\n        animateTo({\n          duration: this.durationList[from], // 设置动画持续时间\n          onFinish: () => {\n            proxy.finishTransition() // 动画完成后调用finishTransition方法\n          }\n        }, () => {\n          this.scaleList[from] = 0.5 // 设置起始Tab页面的最终缩放值\n          this.scaleList[to] = 1.0 // 设置目标Tab页面的最终缩放值\n          this.opacityList[from] = 0.5 // 设置起始Tab页面的最终透明度值\n          this.opacityList[to] = 1.0 // 设置目标Tab页面的最终透明度值\n        })\n      }\n    } as TabContentAnimatedTransition\n    return tabContentAnimatedTransition\n  }\n\n  // 组件初始化时设置动画参数\n  aboutToAppear(): void {\n    let duration = 1000\n    let timeout = 1000\n    for (let i = 1; i <= this.data.length; i++) {\n      this.opacityList.push(1.0) // 初始化透明度值\n      this.scaleList.push(1.0) // 初始化缩放值\n      this.durationList.push(duration * i) // 设置动画持续时间\n      this.timeoutList.push(timeout * i) // 设置动画延迟时间\n    }\n  }\n\n  build() {\n    Column() {\n      Tabs() {\n        ForEach(this.data, (item: itemType, index: number) => {\n          TabContent() {}\n            .tabBar(item.text) // 设置Tab页面的文本标签\n            .backgroundColor(item.backgroundColor) // 设置Tab页面的背景颜色\n            .opacity(this.opacityList[index]) // 设置Tab页面的透明度\n            .scale({ x: this.scaleList[index], y: this.scaleList[index] }) // 设置Tab页面的缩放\n        })\n      }\n      .backgroundColor(0xf1f3f5) // 设置Tabs组件的背景颜色\n      .width('100%') // 设置Tabs组件的宽度\n      .height(500) // 设置Tabs组件的高度\n      .customContentTransition(this.customContentTransition) // 设置自定义的TabContentAnimatedTransition\n    }\n  }\n}"
        },
        {
            "description": "实现一个带有TabBar的页面布局，TabBar的背景颜色和是否叠加在TabContent之上的状态可以动态切换。页面顶部有一个按钮，点击按钮可以切换TabBar的叠加状态。TabBar包含三个TabContent，每个TabContent显示当前的barOverlap状态和barBackgroundColor值。",
            "code": "@Entry\n@Component\nstruct barBackgroundColorTest {\n  private controller: TabsController = new TabsController() // 创建一个TabsController实例，用于管理Tabs组件的状态\n  @State barOverlap: boolean = True; // 管理TabBar是否背后变模糊并叠加在TabContent之上的状态，初始值为True\n  @State barBackgroundColor: string = '#88888888'; // 管理TabBar的背景颜色，初始值为'#88888888'\n\n  build() {\n    Column() {\n      Button(\"barOverlap变化\").width('100%').margin({ bottom: '12vp' })\n        .onClick((event?: ClickEvent) => {\n          // 点击按钮切换barOverlap的状态\n          if (this.barOverlap) {\n            this.barOverlap = False; // 如果当前barOverlap为True，则切换为False\n          } else {\n            this.barOverlap = True; // 如果当前barOverlap为False，则切换为True\n          }\n        })\n\n      Tabs({ barPosition: BarPosition.Start, index: 0, controller: this.controller }) {\n        TabContent() {\n          Column() {\n            Text(`barOverlap ${this.barOverlap}`).fontSize(16).margin({ top: this.barOverlap ? '56vp' : 0 })\n            // 显示当前的barOverlap状态，如果barOverlap为True，则顶部留出56vp的空白\n            Text(`barBackgroundColor ${this.barBackgroundColor}`).fontSize(16)\n            // 显示当前的barBackgroundColor值\n          }.width('100%').height('100%')\n          .backgroundColor(Color.Pink) // 设置TabContent的背景颜色为粉色\n        }\n        .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), \"1\"))\n        // 设置第一个Tab的TabBar样式，图标为系统图标，文本为\"1\"\n\n        TabContent() {\n          Column() {\n            Text(`barOverlap ${this.barOverlap}`).fontSize(16).margin({ top: this.barOverlap ? '56vp' : 0 })\n            // 显示当前的barOverlap状态，如果barOverlap为True，则顶部留出56vp的空白\n            Text(`barBackgroundColor ${this.barBackgroundColor}`).fontSize(16)\n            // 显示当前的barBackgroundColor值\n          }.width('100%').height('100%')\n          .backgroundColor(Color.Yellow) // 设置TabContent的背景颜色为黄色\n        }\n        .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), \"2\"))\n        // 设置第二个Tab的TabBar样式，图标为系统图标，文本为\"2\"\n\n        TabContent() {\n          Column() {\n            Text(`barOverlap ${this.barOverlap}`).fontSize(16).margin({ top: this.barOverlap ? '56vp' : 0 })\n            // 显示当前的barOverlap状态，如果barOverlap为True，则顶部留出56vp的空白\n            Text(`barBackgroundColor ${this.barBackgroundColor}`).fontSize(16)\n            // 显示当前的barBackgroundColor值\n          }.width('100%').height('100%')\n          .backgroundColor(Color.Green) // 设置TabContent的背景颜色为绿色\n        }\n        .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), \"3\"))\n        // 设置第三个Tab的TabBar样式，图标为系统图标，文本为\"3\"\n      }\n      .vertical(False) // 设置Tabs为水平布局\n      .barMode(BarMode.Fixed) // 设置TabBar为固定模式\n      .height('60%') // 设置Tabs的高度为父容器的60%\n      .barOverlap(this.barOverlap) // 根据barOverlap状态设置TabBar是否背后变模糊并叠加在TabContent之上\n      .scrollable(True) // 设置Tabs可滚动\n      .animationDuration(10) // 设置Tabs切换动画的持续时间为10毫秒\n      .barBackgroundColor(this.barBackgroundColor) // 设置TabBar的背景颜色\n    }\n    .height(500) // 设置Column的高度为500vp\n    .padding({ top: '24vp', left: '24vp', right: '24vp' }) // 设置Column的内边距\n  }\n}"
        },
        {
            "description": "实现一个带有动态调整TabBar布局参数功能的Tabs组件示例。通过按钮组可以调整TabBar的margin、gutter和栅格列数，并在点击TabBar时显示点击的索引。",
            "code": "@Entry\n@Component\nstruct TabsExample5 {\n  private controller: TabsController = new TabsController() // 创建TabsController实例，用于控制Tabs组件\n  @State gridMargin: number = 10 // 初始化TabBar的margin值\n  @State gridGutter: number = 10 // 初始化TabBar的gutter值\n  @State sm: number = -2 // 初始化TabBar的栅格列数\n  @State clickedContent: string = \"\" // 用于存储TabBar点击事件的文本内容\n\n  build() {\n    Column() {\n      // 按钮组用于调整TabBar的margin值\n      Row() {\n        Button(\"gridMargin+10 \" + this.gridMargin)\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.gridMargin += 10 // 增加TabBar的margin值\n          })\n          .margin({ right: '6%', bottom: '12vp' })\n        Button(\"gridMargin-10 \" + this.gridMargin)\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.gridMargin -= 10 // 减少TabBar的margin值\n          })\n          .margin({ bottom: '12vp' })\n      }\n\n      // 按钮组用于调整TabBar的gutter值\n      Row() {\n        Button(\"gridGutter+10 \" + this.gridGutter)\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.gridGutter += 10 // 增加TabBar的gutter值\n          })\n          .margin({ right: '6%', bottom: '12vp' })\n        Button(\"gridGutter-10 \" + this.gridGutter)\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.gridGutter -= 10 // 减少TabBar的gutter值\n          })\n          .margin({ bottom: '12vp' })\n      }\n\n      // 按钮组用于调整TabBar的栅格列数\n      Row() {\n        Button(\"sm+2 \" + this.sm)\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.sm += 2 // 增加TabBar的栅格列数\n          })\n          .margin({ right: '6%' })\n        Button(\"sm-2 \" + this.sm).width('47%').height(50).margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.sm -= 2 // 减少TabBar的栅格列数\n          })\n      }\n\n      // 显示TabBar点击事件的文本内容\n      Text(\"点击内容:\" + this.clickedContent).width('100%').height(200).margin({ top: 5 })\n\n      // Tabs组件，包含三个TabContent\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) {\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Pink)\n        }.tabBar(BottomTabBarStyle.of($r(\"sys.media.ohos_app_icon\"), \"1\"))\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar(BottomTabBarStyle.of($r(\"sys.media.ohos_app_icon\"), \"2\"))\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Blue)\n        }.tabBar(BottomTabBarStyle.of($r(\"sys.media.ohos_app_icon\"), \"3\"))\n      }\n      .width('350vp')\n      .animationDuration(300) // 设置Tabs切换动画的持续时间为300毫秒\n      .height('60%')\n      .barGridAlign({ sm: this.sm, margin: this.gridMargin, gutter: this.gridGutter }) // 设置TabBar的栅格对齐方式，包括栅格列数、margin和gutter\n      .backgroundColor(0xf1f3f5)\n      .onTabBarClick((index: number) => {\n        this.clickedContent += \"now index \" + index + \" is clicked\n\" // 响应TabBar点击事件，并更新文本内容\n      })\n    }\n    .width('100%')\n    .height(500)\n    .margin({ top: 5 })\n    .padding('10vp')\n  }\n}"
        },
        {
            "description": "实现一个包含两个Tabs组件的页面，每个Tabs组件包含多个子页签。第一个Tabs组件水平排列，第二个Tabs组件垂直排列。每个Tabs组件的页签栏可以滚动，并且可以通过按钮控制页签的渐隐效果。",
            "code": "@Entry\n@Component\nstruct TabsOpaque {\n  @State message: string = 'Hello World' // 初始化状态消息\n  private controller: TabsController = new TabsController() // 创建第一个 Tabs 控制器\n  private controller1: TabsController = new TabsController() // 创建第二个 Tabs 控制器\n  @State selfFadingFade: boolean = True; // 控制渐隐效果的状态变量\n\n  build() {\n    Column() {\n      Button('子页签设置渐隐').width('100%').margin({ bottom: '12vp' })\n        .onClick((event?: ClickEvent) => {\n          this.selfFadingFade = True; // 设置渐隐效果\n        })\n      Button('子页签设置不渐隐').width('100%').margin({ bottom: '12vp' })\n        .onClick((event?: ClickEvent) => {\n          this.selfFadingFade = False; // 取消渐隐效果\n        })\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) {\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Pink)\n        }.tabBar('pink')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Yellow)\n        }.tabBar('yellow')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Blue)\n        }.tabBar('blue')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar('green')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar('green')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar('green')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar('green')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar('green')\n      }\n      .vertical(False) // 设置 Tabs 水平方向\n      .scrollable(True) // 设置 Tabs 可滚动\n      .barMode(BarMode.Scrollable) // 设置页签栏可滚动\n      .barHeight(80) // 设置页签栏高度\n      .animationDuration(400) // 设置动画持续时间\n      .onChange((index: number) => {\n        console.info(index.toString()) // 打印当前选中的页签索引\n      })\n      .fadingEdge(this.selfFadingFade) // 设置渐隐效果\n      .height('30%') // 设置 Tabs 高度\n      .width('100%') // 设置 Tabs 宽度\n\n      Tabs({ barPosition: BarPosition.Start, controller: this.controller1 }) {\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Pink)\n        }.tabBar('pink')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Yellow)\n        }.tabBar('yellow')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Blue)\n        }.tabBar('blue')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar('green')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar('green')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar('green')\n      }\n      .vertical(True) // 设置 Tabs 垂直方向\n      .scrollable(True) // 设置 Tabs 可滚动\n      .barMode(BarMode.Scrollable) // 设置页签栏可滚动\n      .barHeight(200) // 设置页签栏高度\n      .barWidth(80) // 设置页签栏宽度\n      .animationDuration(400) // 设置动画持续时间\n      .onChange((index: number) => {\n        console.info(index.toString()) // 打印当前选中的页签索引\n      })\n      .fadingEdge(this.selfFadingFade) // 设置渐隐效果\n      .height('30%') // 设置 Tabs 高度\n      .width('100%') // 设置 Tabs 宽度\n    }\n    .padding({ top: '24vp', left: '24vp', right: '24vp' }) // 设置内边距\n  }\n}"
        },
        {
            "description": "实现一个带有多个Tab页的组件，支持动态调整滚动边距、文本内容和布局样式。每个Tab页的内容为一个带有不同背景颜色的全屏列组件。通过按钮可以动态调整滚动边距、文本内容和布局样式，从而改变Tabs组件的显示效果。",
            "code": "@Entry\n@Component\nstruct TabsExample6 {\n  private controller: TabsController = new TabsController() // 创建一个TabsController实例，用于控制Tabs组件的行为\n  @State scrollMargin: number = 0 // 定义滚动边距的初始值，用于控制Tabs组件的滚动边距\n  @State layoutStyle: LayoutStyle = LayoutStyle.ALWAYS_CENTER // 定义布局样式的初始值，用于控制Tabs组件的布局样式\n  @State text: string = \"文本\" // 定义文本内容的初始值，用于显示在TabBar上的文本\n\n  build() {\n    Column() {\n      Row() {\n        Button(\"scrollMargin+10 \" + this.scrollMargin)\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.scrollMargin += 10 // 点击按钮增加滚动边距\n          })\n          .margin({ right: '6%', bottom: '12vp' })\n        Button(\"scrollMargin-10 \" + this.scrollMargin)\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.scrollMargin -= 10 // 点击按钮减少滚动边距\n          })\n          .margin({ bottom: '12vp' })\n      }\n\n      Row() {\n        Button(\"文本增加 \")\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.text += '文本增加' // 点击按钮增加文本内容\n          })\n          .margin({ right: '6%', bottom: '12vp' })\n        Button(\"文本重置\")\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.text = \"文本\" // 点击按钮重置文本内容\n          })\n          .margin({ bottom: '12vp' })\n      }\n\n      Row() {\n        Button(\"layoutStyle.ALWAYS_CENTER\")\n          .width('100%')\n          .height(50)\n          .margin({ top: 5 })\n          .fontSize(15)\n          .onClick((event?: ClickEvent) => {\n            this.layoutStyle = LayoutStyle.ALWAYS_CENTER; // 点击按钮设置布局样式为中心对齐\n          })\n          .margin({ bottom: '12vp' })\n      }\n\n      Row() {\n        Button(\"layoutStyle.ALWAYS_AVERAGE_SPLIT\")\n          .width('100%')\n          .height(50)\n          .margin({ top: 5 })\n          .fontSize(15)\n          .onClick((event?: ClickEvent) => {\n            this.layoutStyle = LayoutStyle.ALWAYS_AVERAGE_SPLIT; // 点击按钮设置布局样式为平均分割\n          })\n          .margin({ bottom: '12vp' })\n      }\n\n      Row() {\n        Button(\"layoutStyle.SPACE_BETWEEN_OR_CENTER\")\n          .width('100%')\n          .height(50)\n          .margin({ top: 5 })\n          .fontSize(15)\n          .onClick((event?: ClickEvent) => {\n            this.layoutStyle = LayoutStyle.SPACE_BETWEEN_OR_CENTER; // 点击按钮设置布局样式为间距均匀或中心对齐\n          })\n          .margin({ bottom: '12vp' })\n      }\n\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) {\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Pink)\n        }.tabBar(SubTabBarStyle.of(this.text)) // 设置TabBar的样式，显示当前的文本内容\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar(SubTabBarStyle.of(this.text)) // 设置TabBar的样式，显示当前的文本内容\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Blue)\n        }.tabBar(SubTabBarStyle.of(this.text)) // 设置TabBar的样式，显示当前的文本内容\n      }\n      .animationDuration(300) // 设置Tabs组件的动画持续时间为300毫秒\n      .height('60%') // 设置Tabs组件的高度为父容器的60%\n      .backgroundColor(0xf1f3f5) // 设置Tabs组件的背景颜色\n      .barMode(BarMode.Scrollable, { margin: this.scrollMargin, nonScrollableLayoutStyle: this.layoutStyle })\n      // 设置Tabs组件的滚动模式，并根据当前的滚动边距和布局样式进行配置\n    }\n    .width('100%') // 设置Column组件的宽度为父容器的100%\n    .height(500) // 设置Column组件的高度为500vp\n    .margin({ top: 5 }) // 设置Column组件的上边距为5vp\n    .padding('24vp') // 设置Column组件的内边距为24vp\n  }\n}"
        },
        {
            "description": "实现一个带有分割线的Tabs组件，支持动态调整分割线的颜色、宽度、上下边距，并且可以通过按钮控制分割线的显示与隐藏。Tabs组件包含五个标签页，每个标签页有不同的背景颜色，并且标签栏支持垂直布局和滚动。",
            "code": "@Entry\n@Component\nstruct TabsDivider1 {\n  private controller1: TabsController = new TabsController() // 创建一个Tabs控制器，用于管理Tabs组件的状态\n  @State dividerColor: string = 'red' // 分割线颜色状态变量，初始为红色\n  @State strokeWidth: number = 2 // 分割线宽度状态变量，初始为2\n  @State startMargin: number = 0 // 分割线上边距状态变量，初始为0\n  @State endMargin: number = 0 // 分割线下边距状态变量，初始为0\n  @State nullFlag: boolean = False // 是否隐藏分割线的标志状态变量，初始为False\n\n  build() {\n    Column() {\n      Tabs({ controller: this.controller1 }) { // 创建一个Tabs组件，使用controller1控制\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Pink) // 创建一个粉色背景的标签页内容\n        }.tabBar('pink') // 设置标签页的标题为'pink'\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Yellow) // 创建一个黄色背景的标签页内容\n        }.tabBar('yellow') // 设置标签页的标题为'yellow'\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Blue) // 创建一个蓝色背景的标签页内容\n        }.tabBar('blue') // 设置标签页的标题为'blue'\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green) // 创建一个绿色背景的标签页内容\n        }.tabBar('green') // 设置标签页的标题为'green'\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Red) // 创建一个红色背景的标签页内容\n        }.tabBar('red') // 设置标签页的标题为'red'\n      }\n      .vertical(True) // 设置Tabs为垂直布局\n      .scrollable(True) // 设置Tabs可滚动\n      .barMode(BarMode.Fixed) // 设置标签栏模式为固定\n      .barWidth(70) // 设置标签栏宽度为70\n      .barHeight(200) // 设置标签栏高度为200\n      .animationDuration(400) // 设置切换动画时长为400毫秒\n      .onChange((index: number) => { // 监听标签页切换事件\n        console.info(index.toString()) // 打印当前选中的标签页索引\n      })\n      .height('200vp') // 设置Tabs高度为200vp\n      .margin({ bottom: '12vp' }) // 设置Tabs底部外边距为12vp\n      .divider(this.nullFlag ? null : { // 设置分割线属性，如果nullFlag为True则隐藏分割线\n        strokeWidth: this.strokeWidth, // 分割线宽度\n        color: this.dividerColor, // 分割线颜色\n        startMargin: this.startMargin, // 分割线上边距\n        endMargin: this.endMargin // 分割线下边距\n      })\n\n      Button('常规Divider').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，点击后恢复分割线的常规设置\n        .onClick(() => {\n          this.nullFlag = False; // 显示分割线\n          this.strokeWidth = 2; // 设置分割线宽度为2\n          this.dividerColor = 'red'; // 设置分割线颜色为红色\n          this.startMargin = 0; // 设置分割线上边距为0\n          this.endMargin = 0; // 设置分割线下边距为0\n        })\n      Button('空Divider').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，点击后隐藏分割线\n        .onClick(() => {\n          this.nullFlag = True // 隐藏分割线\n        })\n      Button('颜色变为蓝色').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，点击后将分割线颜色变为蓝色\n        .onClick(() => {\n          this.dividerColor = 'blue' // 设置分割线颜色为蓝色\n        })\n      Button('宽度增加').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，点击后增加分割线宽度\n        .onClick(() => {\n          this.strokeWidth += 2 // 增加分割线宽度\n        })\n      Button('宽度减小').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，点击后减少分割线宽度\n        .onClick(() => {\n          if (this.strokeWidth > 2) { // 如果分割线宽度大于2\n            this.strokeWidth -= 2 // 减少分割线宽度\n          }\n        })\n      Button('上边距增加').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，点击后增加分割线上边距\n        .onClick(() => {\n          this.startMargin += 2 // 增加分割线上边距\n        })\n      Button('上边距减少').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，点击后减少分割线上边距\n        .onClick(() => {\n          if (this.startMargin > 2) { // 如果分割线上边距大于2\n            this.startMargin -= 2 // 减少分割线上边距\n          }\n        })\n      Button('下边距增加').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，点击后增加分割线下边距\n        .onClick(() => {\n          this.endMargin += 2 // 增加分割线下边距\n        })\n      Button('下边距减少').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，点击后减少分割线下边距\n        .onClick(() => {\n          if (this.endMargin > 2) { // 如果分割线下边距大于2\n            this.endMargin -= 2 // 减少分割线下边距\n          }\n        })\n    }.padding({ top: '24vp', left: '24vp', right: '24vp' }) // 设置整体布局的内边距\n  }\n}"
        },
        {
            "description": "实现一个带有自定义TabBar和底部指示器的Tabs组件。TabBar包含四个选项卡，每个选项卡对应一个不同的背景颜色。底部指示器会根据当前选中的Tab动态调整位置和宽度，并支持滑动切换动画效果。",
            "code": "import { ComponentUtils } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct TabsExample {\n  @State currentIndex: number = 0 // 当前选中的Tab索引\n  @State animationDuration: number = 300 // 动画持续时间\n  @State indicatorLeftMargin: number = 0 // 指示器的左边距\n  @State indicatorWidth: number = 0 // 指示器的宽度\n  private tabsWidth: number = 0 // TabBar的总宽度\n  private componentUtils: ComponentUtils = this.getUIContext().getComponentUtils() // 获取组件工具实例\n\n  @Builder\n  tabBuilder(index: number, name: string) {\n    Column() {\n      Text(name)\n        .fontSize(16)\n        .fontColor(this.currentIndex === index ? '#007DFF' : '#182431') // 根据当前选中的Tab设置字体颜色\n        .fontWeight(this.currentIndex === index ? 500 : 400) // 根据当前选中的Tab设置字体粗细\n        .id(index.toString())\n        .onAreaChange((oldValue: Area,newValue: Area) => {\n          if (this.currentIndex === index && (this.indicatorLeftMargin === 0 || this.indicatorWidth === 0)){\n            if (newValue.position.x != undefined) {\n              let positionX = Number.parseFloat(newValue.position.x.toString())\n              this.indicatorLeftMargin = Number.isNaN(positionX) ? 0 : positionX // 更新指示器的左边距\n            }\n            let width = Number.parseFloat(newValue.width.toString())\n            this.indicatorWidth = Number.isNaN(width) ? 0 : width // 更新指示器的宽度\n          }\n        })\n    }.width('100%')\n  }\n\n  build() {\n    Stack({ alignContent: Alignment.TopStart }) {\n      Tabs({ barPosition: BarPosition.Start }) {\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#00CB87')\n        }.tabBar(this.tabBuilder(0, 'green'))\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#007DFF')\n        }.tabBar(this.tabBuilder(1, 'blue'))\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#FFBF00')\n        }.tabBar(this.tabBuilder(2, 'yellow'))\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#E67C92')\n        }.tabBar(this.tabBuilder(3, 'pink'))\n      }\n      .onAreaChange((oldValue: Area,newValue: Area)=> {\n        let width = Number.parseFloat(newValue.width.toString())\n        this.tabsWidth = Number.isNaN(width) ? 0 : width // 更新TabBar的总宽度\n      })\n      .barWidth('100%')\n      .barHeight(56)\n      .width('100%')\n      .height(296)\n      .backgroundColor('#F1F3F5')\n      .animationDuration(this.animationDuration)\n      .onChange((index: number) => {\n        this.currentIndex = index  // 更新当前选中的Tab索引\n      })\n      .onAnimationStart((index: number, targetIndex: number, event: TabsAnimationEvent) => {\n        this.currentIndex = targetIndex\n        let targetIndexInfo = this.getTextInfo(targetIndex)\n        this.startAnimateTo(this.animationDuration, targetIndexInfo.left, targetIndexInfo.width) // 开始动画\n      })\n      .onAnimationEnd((index: number,event: TabsAnimationEvent) => {\n        let currentIndicatorInfo = this.getCurrentIndicatorInfo(index,event)\n        this.startAnimateTo(0,currentIndicatorInfo.left,currentIndicatorInfo.width) // 动画结束\n      })\n      .onGestureSwipe((index: number,event: TabsAnimationEvent) => {\n        let currentIndicatorInfo = this.getCurrentIndicatorInfo(index,event)\n        this.currentIndex = currentIndicatorInfo.index\n        this.indicatorLeftMargin = currentIndicatorInfo.left\n        this.indicatorWidth = currentIndicatorInfo.width // 处理手势滑动\n      })\n\n      Column()\n        .height(2)\n        .width(this.indicatorWidth)\n        .margin({ left: this.indicatorLeftMargin, top:48})\n        .backgroundColor('#007DFF') // 底部指示器\n    }.width('100%')\n  }\n\n  private getTextInfo(index: number): Record<string, number> {\n    let rectangle = this.componentUtils.getRectangleById(index.toString())\n    return { 'left': px2vp(rectangle.windowOffset.x), 'width': px2vp(rectangle.size.width) } // 获取Tab文本的位置和宽度信息\n  }\n\n  private getCurrentIndicatorInfo(index: number, event: TabsAnimationEvent): Record<string, number> {\n    let nextIndex = index\n    if (index > 0 && event.currentOffset > 0) {\n      nextIndex--\n    } else if (index < 3 && event.currentOffset < 0) {\n      nextIndex++\n    }\n    let indexInfo = this.getTextInfo(index)\n    let nextIndexInfo = this.getTextInfo(nextIndex)\n    let swipeRatio = Math.abs(event.currentOffset / this.tabsWidth)\n    let currentIndex = swipeRatio > 0.5 ? nextIndex : index \n    let currentLeft = indexInfo.left + (nextIndexInfo.left - indexInfo.left) * swipeRatio\n    let currentWidth = indexInfo.width + (nextIndexInfo.width - indexInfo.width) * swipeRatio\n    return { 'index': currentIndex, 'left': currentLeft, 'width': currentWidth } // 获取当前指示器的位置和宽度信息\n  }\n\n  private startAnimateTo(duration: number, leftMargin: number, width: number) {\n    animateTo({\n      duration: duration, \n      curve: Curve.Linear, \n      iterations: 1, \n      playMode: PlayMode.Normal, \n      onFinish: () => {\n        console.info('play end')\n      }\n    }, () => {\n      this.indicatorLeftMargin = leftMargin\n      this.indicatorWidth = width // 执行动画\n    })\n  }\n}"
        }
    ],
    "TabContent": [
        {
            "description": "实现一个垂直布局的选项卡组件，支持标签栏的图标和文本颜色根据选中状态动态变化。选项卡切换时，更新当前选中的索引，并使用TabsController管理选项卡状态。",
            "code": "@Entry\n@Component\nstruct TabContentExample {\n  @State fontColor: string = '#182431' // 定义未选中标签的文本颜色\n  @State selectedFontColor: string = '#007DFF' // 定义选中标签的文本颜色\n  @State currentIndex: number = 0 // 定义当前选中的标签索引\n  private controller: TabsController = new TabsController() // 创建一个TabsController实例来管理选项卡状态\n\n  @Builder tabBuilder(index: number) {\n    Column() {\n      Image(this.currentIndex === index ? '/common/public_icon_on.svg' : '/common/public_icon_off.svg')\n        .width(24)\n        .height(24)\n        .margin({ bottom: 4 })\n        .objectFit(ImageFit.Contain)\n        // 根据当前选中的索引显示不同的图标\n      Text('Tab')\n        .fontColor(this.currentIndex === index ? this.selectedFontColor : this.fontColor)\n        .fontSize(10)\n        .fontWeight(500)\n        .lineHeight(14)\n        // 根据当前选中的索引设置文本颜色\n    }.width('100%').height('100%').justifyContent(FlexAlign.Center)\n  }\n\n  build() {\n    Column() {\n      Tabs({ barPosition: BarPosition.Start, controller: this.controller }) {\n        TabContent()\n          .tabBar(this.tabBuilder(0))\n        TabContent()\n          .tabBar(this.tabBuilder(1))\n        TabContent()\n          .tabBar(this.tabBuilder(2))\n        TabContent()\n          .tabBar(this.tabBuilder(3))\n        // 创建四个选项卡，每个选项卡使用tabBuilder方法生成标签栏内容\n      }\n      .vertical(true) // 设置选项卡为垂直布局\n      .barWidth(96) // 设置标签栏宽度\n      .barHeight(414) // 设置标签栏高度\n      .onChange((index: number) => {\n        this.currentIndex = index\n        // 当选项卡切换时，更新当前选中的索引\n      })\n      .width(96)\n      .height(414)\n      .backgroundColor('#F1F3F5')\n      .margin({ top: 52 })\n    }.width('100%')\n  }\n}"
        },
        {
            "description": "实现一个底部页签样式的标签栏组件，包含四个标签页，每个标签页使用不同的系统图标作为标签栏的图标，并且每个标签页具有不同的背景颜色。标签栏支持水平滚动，标签切换时会输出当前标签的索引。",
            "code": "import { SymbolGlyphModifier } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct Index {\n  // 定义四个状态变量，分别用于存储四个不同的系统图标\n  @State symbolModifier1: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_wifi'));\n  @State symbolModifier2: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ellipsis_bubble'));\n  @State symbolModifier3: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.dot_video'));\n  @State symbolModifier4: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.exposure'));\n\n  build() {\n    Column({space: 5}) {\n      Text(\"底部页签样式\")\n      Column(){\n        Tabs({barPosition: BarPosition.End}) {\n          // 第一个标签页，背景色为粉色\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink)\n          }.tabBar(new BottomTabBarStyle({\n            normal: this.symbolModifier1, // 使用第一个系统图标\n          }, 'Pink'))\n          .onWillShow(() => {\n            console.info(\"Pink will show\") // 标签页即将显示时输出日志\n          })\n          .onWillHide(() => {\n            console.info(\"Pink will hide\") // 标签页即将隐藏时输出日志\n          })\n\n          // 第二个标签页，背景色为橙色\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Orange)\n          }.tabBar(new BottomTabBarStyle({\n            normal: this.symbolModifier2, // 使用第二个系统图标\n          }, 'Orange'))\n          .onWillShow(() => {\n            console.info(\"Orange will show\") // 标签页即将显示时输出日志\n          })\n          .onWillHide(() => {\n            console.info(\"Orange will hide\") // 标签页即将隐藏时输出日志\n          })\n\n          // 第三个标签页，背景色为蓝色\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue)\n          }.tabBar(new BottomTabBarStyle({\n            normal: this.symbolModifier3, // 使用第三个系统图标\n          }, 'Blue'))\n          .onWillShow(() => {\n            console.info(\"Blue will show\") // 标签页即将显示时输出日志\n          })\n          .onWillHide(() => {\n            console.info(\"Blue will hide\") // 标签页即将隐藏时输出日志\n          })\n\n          // 第四个标签页，背景色为绿色\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green)\n          }.tabBar(new BottomTabBarStyle({\n            normal: this.symbolModifier4, // 使用第四个系统图标\n          }, 'Green'))\n          .onWillShow(() => {\n            console.info(\"Green will show\") // 标签页即将显示时输出日志\n          })\n          .onWillHide(() => {\n            console.info(\"Green will hide\") // 标签页即将隐藏时输出日志\n          })\n        }\n        .vertical(False) // 设置标签栏为水平布局\n        .scrollable(True) // 设置标签栏可滚动\n        .barMode(BarMode.Fixed) // 设置标签栏为固定模式\n        .onChange((index:number)=>{\n          console.info(index.toString()) // 标签切换时输出当前标签的索引\n        })\n        .width('100%')\n        .backgroundColor(0xF1F3F5)\n      }.width('100%').height(200)\n    }\n  }\n}"
        },
        {
            "description": "实现一个带有标签栏的页面组件，支持标签切换功能。标签栏位于页面底部，包含四个标签项，每个标签项包含一个图标和一个文本。点击不同的标签项，页面内容会切换到对应的标签内容。",
            "code": "@Entry\n@Component\nstruct TabContentExample {\n  @State fontColor: string = '#182431' // 默认字体颜色\n  @State selectedFontColor: string = '#007DFF' // 选中标签的字体颜色\n  @State currentIndex: number = 0 // 当前选中的标签索引\n  private controller: TabsController = new TabsController() // 标签控制器\n\n  // 构建标签栏项的Builder方法\n  @Builder tabBuilder(index: number) {\n    Column() {\n      Image(this.currentIndex === index ? '/common/public_icon_on.svg' : '/common/public_icon_off.svg')\n        .width(24)\n        .height(24)\n        .margin({ bottom: 4 })\n        .objectFit(ImageFit.Contain)\n      Text(`Tab${index + 1}`)\n        .fontColor(this.currentIndex === index ? this.selectedFontColor : this.fontColor)\n        .fontSize(10)\n        .fontWeight(500)\n        .lineHeight(14)\n    }.width('100%')\n  }\n\n  build() {\n    Column() {\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) {\n        TabContent() {\n          Column() {\n            Text('Tab1')\n              .fontSize(36)\n              .fontColor('#182431')\n              .fontWeight(500)\n              .opacity(0.4)\n              .margin({ top: 30, bottom: 56.5 })\n            Divider()\n              .strokeWidth(0.5)\n              .color('#182431')\n              .opacity(0.05)\n          }.width('100%')\n        }.tabBar(this.tabBuilder(0)) // 使用tabBuilder方法构建第一个标签项\n\n        TabContent() {\n          Column() {\n            Text('Tab2')\n              .fontSize(36)\n              .fontColor('#182431')\n              .fontWeight(500)\n              .opacity(0.4)\n              .margin({ top: 30, bottom: 56.5 })\n            Divider()\n              .strokeWidth(0.5)\n              .color('#182431')\n              .opacity(0.05)\n          }.width('100%')\n        }.tabBar(this.tabBuilder(1)) // 使用tabBuilder方法构建第二个标签项\n\n        TabContent() {\n          Column() {\n            Text('Tab3')\n              .fontSize(36)\n              .fontColor('#182431')\n              .fontWeight(500)\n              .opacity(0.4)\n              .margin({ top: 30, bottom: 56.5 })\n            Divider()\n              .strokeWidth(0.5)\n              .color('#182431')\n              .opacity(0.05)\n          }.width('100%')\n        }.tabBar(this.tabBuilder(2)) // 使用tabBuilder方法构建第三个标签项\n\n        TabContent() {\n          Column() {\n            Text('Tab4')\n              .fontSize(36)\n              .fontColor('#182431')\n              .fontWeight(500)\n              .opacity(0.4)\n              .margin({ top: 30, bottom: 56.5 })\n            Divider()\n              .strokeWidth(0.5)\n              .color('#182431')\n              .opacity(0.05)\n          }.width('100%')\n        }.tabBar(this.tabBuilder(3)) // 使用tabBuilder方法构建第四个标签项\n      }\n      .vertical(False) // 设置标签栏为水平布局\n      .barHeight(56) // 设置标签栏高度\n      .onChange((index: number) => {\n        this.currentIndex = index // 更新当前选中的标签索引\n      })\n      .width(360)\n      .height(190)\n      .backgroundColor('#F1F3F5')\n      .margin({ top: 38 })\n    }.width('100%')\n  }\n}"
        },
        {
            "description": "实现一个包含两个Tab的界面，每个Tab包含一个文本组件。通过点击按钮可以更新对应Tab中的文本内容。\n布局：使用Row和Column进行布局，包含两个按钮和一个Tabs组件。\n样式：设置文本字体大小、粗细、外边距，按钮宽度、外边距，Tabs的宽度、高度、背景颜色等。\n功能与效果：点击按钮时，更新对应Tab中的文本内容，并显示更新次数。",
            "code": "import { ComponentContent, UIContext } from \"@kit.ArkUI\"\n\n// 定义一个Params类，用于传递文本内容\nclass Params {\n  text: string = \"\"\n\n  constructor(text: string) {\n    this.text = text;\n  }\n}\n\n// 使用Builder装饰器定义一个构建文本组件的函数\n@Builder\nfunction buildText(params: Params) {\n  Column() {\n    Text(params.text)\n      .fontSize(20) // 设置文本字体大小\n      .fontWeight(FontWeight.Bold) // 设置文本字体粗细\n      .margin(20) // 设置文本外边距\n  }\n}\n\n// 主组件Index，使用@Entry和@Component装饰器\n@Entry\n@Component\nstruct Index {\n  @State message1: string = \"tabBar1\" // 定义状态变量message1，初始值为\"tabBar1\"\n  @State message2: string = \"tabBar2\" // 定义状态变量message2，初始值为\"tabBar2\"\n  context: UIContext = this.getUIContext() // 获取UI上下文\n  private count1 = 0; // 定义私有变量count1，用于记录更新次数\n  private count2 = 0; // 定义私有变量count2，用于记录更新次数\n  private controller: TabsController = new TabsController(); // 创建Tabs控制器\n  tabBar1: ComponentContent<Params> = new ComponentContent<Params>(this.context, wrapBuilder<[Params]>(buildText), new Params(this.message1)); // 创建ComponentContent实例tabBar1\n  tabBar2: ComponentContent<Params> = new ComponentContent<Params>(this.context, wrapBuilder<[Params]>(buildText), new Params(this.message2)); // 创建ComponentContent实例tabBar2\n\n  build() {\n    Row() {\n      Column() {\n        Button(\"更新tabBar1\").width('90%').margin(20) // 创建按钮，点击时更新tabBar1的内容\n          .onClick((event?: ClickEvent) => {\n            this.count1 += 1; // 更新次数加1\n            const message1 = \"Update 1_\" + this.count1.toString(); // 生成新的文本内容\n            this.tabBar1.update(new Params(message1)); // 更新tabBar1的内容\n          })\n        Button(\"更新tabBar2\").width('90%').margin(20) // 创建按钮，点击时更新tabBar2的内容\n          .onClick((event?: ClickEvent) => {\n            this.count2 += 1; // 更新次数加1\n            const message2 = \"Update 2_\" + this.count2.toString(); // 生成新的文本内容\n            this.tabBar2.update(new Params(message2)); // 更新tabBar2的内容\n          })\n        Tabs({ barPosition: BarPosition.Start, controller: this.controller }) { // 创建Tabs组件\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink).borderRadius('12vp') // 创建TabContent内容\n          }.tabBar(new SubTabBarStyle(this.tabBar1)) // 设置TabBar样式\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue).borderRadius('12vp') // 创建TabContent内容\n          }.tabBar(SubTabBarStyle.of(this.tabBar2)) // 设置TabBar样式\n        }\n        .vertical(False) // 设置Tabs为水平布局\n        .barWidth(414) // 设置TabBar宽度\n        .barHeight(96) // 设置TabBar高度\n        .width(414) // 设置Tabs宽度\n        .height(414) // 设置Tabs高度\n        .backgroundColor('#F1F3F5') // 设置Tabs背景颜色\n        .margin({ top: 20 }) // 设置Tabs外边距\n      }\n      .width('100%') // 设置Column宽度\n      .height('100%') // 设置Column高度\n    }\n    .height('100%') // 设置Row高度\n  }\n}"
        },
        {
            "description": "实现一个包含两种不同样式页签的组件：子页签样式和底部页签样式。子页签样式位于页签内容的上方，底部页签样式位于页签内容的下方。每个页签内容区域的颜色不同，并且页签的文本和图标颜色在选中与未选中状态下有所区别。页签支持水平滚动和固定模式，并监听页签变化事件。",
            "code": "@Entry\n@Component\nstruct TabBarStyleExample {\n  build() {\n    Column({ space: 5 }) {\n      Text(\"子页签样式\")\n      Column() {\n        Tabs({ barPosition: BarPosition.Start }) {\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink)\n          }.tabBar(new SubTabBarStyle('Pink')\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }))\n          // 设置子页签的文本颜色，未选中时为红色，选中时为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Yellow)\n          }.tabBar(new SubTabBarStyle('Yellow')\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }))\n          // 设置子页签的文本颜色，未选中时为红色，选中时为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue)\n          }.tabBar(new SubTabBarStyle('Blue')\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }))\n          // 设置子页签的文本颜色，未选中时为红色，选中时为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green)\n          }.tabBar(new SubTabBarStyle('Green')\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }))\n          // 设置子页签的文本颜色，未选中时为红色，选中时为绿色\n        }\n        .vertical(False)\n        .scrollable(True)\n        .barMode(BarMode.Fixed)\n        .onChange((index: number) => {\n          console.info(index.toString())\n        })\n        // 设置Tabs的垂直方向、可滚动、固定模式，并监听页签变化事件\n        .width('100%')\n        .backgroundColor(0xF1F3F5)\n      }.width('100%').height(200)\n\n      Text(\"底部页签样式\")\n      Column() {\n        Tabs({ barPosition: BarPosition.End }) {\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink)\n          }.tabBar(new BottomTabBarStyle('/common/public_icon_off.svg', 'pink')\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })\n            .iconStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }))\n          // 设置底部页签的文本和图标颜色，未选中时为红色，选中时为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Yellow)\n          }.tabBar(new BottomTabBarStyle('/common/public_icon_off.svg', 'Yellow')\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })\n            .iconStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }))\n          // 设置底部页签的文本和图标颜色，未选中时为红色，选中时为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue)\n          }.tabBar(new BottomTabBarStyle('/common/public_icon_off.svg', 'Blue')\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })\n            .iconStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }))\n          // 设置底部页签的文本和图标颜色，未选中时为红色，选中时为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green)\n          }.tabBar(new BottomTabBarStyle('/common/public_icon_off.svg', 'Green')\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })\n            .iconStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }))\n          // 设置底部页签的文本和图标颜色，未选中时为红色，选中时为绿色\n        }\n        .vertical(False)\n        .scrollable(True)\n        .barMode(BarMode.Fixed)\n        .onChange((index: number) => {\n          console.info(index.toString())\n        })\n        // 设置Tabs的垂直方向、可滚动、固定模式，并监听页签变化事件\n        .width('100%')\n        .backgroundColor(0xF1F3F5)\n      }.width('100%').height(200)\n    }\n  }\n}"
        },
        {
            "description": "实现一个带有多个Tab的界面，每个Tab的内容为一个带有背景颜色的文本列。Tab栏的标签文本根据不同的策略处理溢出情况，包括单行省略号截断、先缩小再截断、先缩小再换行再截断、以及换行。Tab栏可以垂直滚动，并且Tab切换时会输出当前Tab的索引。",
            "code": "@Entry\n@Component\nstruct TabsTextOverflow {\n  @State message: string = 'Hello World' // 初始化一个状态变量，用于显示消息\n  private controller: TabsController = new TabsController() // 创建一个Tabs控制器实例，用于管理Tab的切换\n  @State subTabOverflowOpaque: boolean = True; // 初始化一个状态变量，用于控制子Tab的溢出透明度\n\n  build() {\n    Column() {\n      Tabs({ barPosition: BarPosition.Start, controller: this.controller }) {\n        TabContent() {\n          Column() {\n            Text('单行省略号截断').fontSize(30).fontColor(0xFF000000) // 设置文本内容和样式\n          }.width('100%').height('100%').backgroundColor(Color.Pink) // 设置列的宽度和高度，并设置背景颜色\n        }\n        .tabBar(SubTabBarStyle.of('开始【单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断】结束')\n          .labelStyle({\n            overflow: TextOverflow.Ellipsis, // 设置文本溢出处理方式为省略号\n            maxLines: 1, // 设置最大行数为1\n            minFontSize: 10, // 设置最小字体大小\n            heightAdaptivePolicy: TextHeightAdaptivePolicy.MAX_LINES_FIRST, // 设置高度自适应策略\n            font: { size: 20 } // 设置字体大小\n          }))\n\n        TabContent() {\n          Column() {\n            Text('先缩小再截断').fontSize(30).fontColor(0xFF000000) // 设置文本内容和样式\n          }.width('100%').height('100%').backgroundColor(Color.Pink) // 设置列的宽度和高度，并设置背景颜色\n        }\n        .tabBar(SubTabBarStyle.of('开始【先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断】结束')\n          .labelStyle({\n            overflow: TextOverflow.Clip, // 设置文本溢出处理方式为剪切\n            maxLines: 1, // 设置最大行数为1\n            minFontSize: 15, // 设置最小字体大小\n            maxFontSize: 15, // 设置最大字体大小\n            heightAdaptivePolicy: TextHeightAdaptivePolicy.MIN_FONT_SIZE_FIRST, // 设置高度自适应策略\n            font: { size: 20 } // 设置字体大小\n          }))\n\n        TabContent() {\n          Column() {\n            Text('先缩小再换行再截断').fontSize(30).fontColor(0xFF000000) // 设置文本内容和样式\n          }.width('100%').height('100%').backgroundColor(Color.Pink) // 设置列的宽度和高度，并设置背景颜色\n        }\n        .tabBar(SubTabBarStyle.of('开始【先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断】结束')\n          .labelStyle({\n            overflow: TextOverflow.Clip, // 设置文本溢出处理方式为剪切\n            maxLines: 2, // 设置最大行数为2\n            minFontSize: 15, // 设置最小字体大小\n            maxFontSize: 15, // 设置最大字体大小\n            heightAdaptivePolicy: TextHeightAdaptivePolicy.MIN_FONT_SIZE_FIRST, // 设置高度自适应策略\n            font: { size: 20 } // 设置字体大小\n          }))\n\n        TabContent() {\n          Column() {\n            Text('换行').fontSize(30).fontColor(0xFF000000) // 设置文本内容和样式\n          }\n          .width('100%').height('100%').backgroundColor(Color.Pink) // 设置列的宽度和高度，并设置背景颜色\n        }.tabBar(SubTabBarStyle.of('开始【换行换行换行换行换行换行换行换行换行换行换行换行换行换行换行】结束')\n          .labelStyle({\n            overflow: TextOverflow.Clip, // 设置文本溢出处理方式为剪切\n            maxLines: 10, // 设置最大行数为10\n            minFontSize: 10, // 设置最小字体大小\n            heightAdaptivePolicy: TextHeightAdaptivePolicy.MAX_LINES_FIRST, // 设置高度自适应策略\n            font: { size: 20 } // 设置字体大小\n          }))\n      }\n      .vertical(True).scrollable(True) // 设置Tabs为垂直方向且可滚动\n      .barMode(BarMode.Fixed) // 设置Tab栏模式为固定\n      .barHeight(720) // 设置Tab栏高度\n      .barWidth(200).animationDuration(400) // 设置Tab栏宽度及动画持续时间\n      .onChange((index: number) => {\n        console.info(index.toString()) // 当Tab切换时，输出当前Tab的索引\n      })\n      .height('100%').width('100%') // 设置Tabs的宽度和高度\n    }\n    .height('100%') // 设置列的高度\n  }\n}"
        },
        {
            "description": "实现一个包含多个Tab的组件，每个Tab的内容和样式可以通过按钮动态调整。具体功能包括：\n1. 通过按钮调整Tab的padding值。\n2. 通过按钮增加或重置Tab的文本内容。\n3. 通过按钮切换Tab的对称扩展属性。\n4. 通过按钮切换Tab的布局模式（垂直或水平）。\n5. 通过按钮切换Tab的垂直对齐方式（朝上、居中、朝下）。\n6. 每个Tab的内容为一个全屏的背景颜色块。",
            "code": "@Entry\n@Component\nstruct TabContentExample6 {\n  private controller: TabsController = new TabsController()\n  @State text: string = \"2\"\n  @State tabPadding: number = 0;\n  @State symmetricExtensible: boolean = False;\n  @State layoutMode: LayoutMode = LayoutMode.VERTICAL;\n  @State verticalAlign: VerticalAlign = VerticalAlign.Center;\n\n  build() {\n    Column() {\n      Row() {\n        Button(\"padding+10 \" + this.tabPadding)\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.tabPadding += 10\n          })\n          .margin({ right: '6%', bottom: '12vp' })\n        // 点击按钮增加Tab的padding值\n\n        Button(\"padding-10 \" + this.tabPadding)\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.tabPadding -= 10\n          })\n          .margin({ bottom: '12vp' })\n        // 点击按钮减少Tab的padding值\n      }\n\n      Row() {\n        Button(\"文本增加 \")\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.text += '文本增加'\n          })\n          .margin({ right: '6%', bottom: '12vp' })\n        // 点击按钮增加Tab的文本内容\n\n        Button(\"文本重置\")\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.text = \"2\"\n          })\n          .margin({ bottom: '12vp' })\n        // 点击按钮重置Tab的文本内容\n      }\n\n      Row() {\n        Button(\"symmetricExtensible改变 \" + this.symmetricExtensible)\n          .width('100%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.symmetricExtensible = !this.symmetricExtensible\n          })\n          .margin({ bottom: '12vp' })\n        // 点击按钮切换Tab的对称扩展属性\n      }\n\n      Row() {\n        Button(\"layoutMode垂直 \")\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.layoutMode = LayoutMode.VERTICAL;\n          })\n          .margin({ right: '6%', bottom: '12vp' })\n        // 点击按钮将Tab的布局模式设置为垂直\n\n        Button(\"layoutMode水平 \")\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.layoutMode = LayoutMode.HORIZONTAL;\n          })\n          .margin({ bottom: '12vp' })\n        // 点击按钮将Tab的布局模式设置为水平\n      }\n\n      Row() {\n        Button(\"verticalAlign朝上\")\n          .width('100%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.verticalAlign = VerticalAlign.Top;\n          })\n          .margin({ bottom: '12vp' })\n        // 点击按钮将Tab的垂直对齐方式设置为朝上\n      }\n\n      Row() {\n        Button(\"verticalAlign居中\")\n          .width('100%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.verticalAlign = VerticalAlign.Center;\n          })\n          .margin({ bottom: '12vp' })\n        // 点击按钮将Tab的垂直对齐方式设置为居中\n      }\n\n      Row() {\n        Button(\"verticalAlign朝下\")\n          .width('100%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.verticalAlign = VerticalAlign.Bottom;\n          })\n          .margin({ bottom: '12vp' })\n        // 点击按钮将Tab的垂直对齐方式设置为朝下\n      }\n\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) {\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Pink)\n        }.tabBar(BottomTabBarStyle.of($r(\"sys.media.ohos_app_icon\"), \"1\"))\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar(BottomTabBarStyle.of($r(\"sys.media.ohos_app_icon\"), this.text)\n          .padding(this.tabPadding)\n          .verticalAlign(this.verticalAlign)\n          .layoutMode(this.layoutMode)\n          .symmetricExtensible(this.symmetricExtensible))\n        // 第二个Tab的内容和样式，根据状态变量动态调整\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Blue)\n        }.tabBar(BottomTabBarStyle.of($r(\"sys.media.ohos_app_icon\"), \"3\"))\n      }\n      .animationDuration(300)\n      .height('60%')\n      .backgroundColor(0xf1f3f5)\n      .barMode(BarMode.Fixed)\n    }\n    .width('100%')\n    .height(500)\n    .margin({ top: 5 })\n    .padding('24vp')\n  }\n}"
        },
        {
            "description": "实现一个可自定义下划线指示器样式的标签页组件，支持通过按钮动态改变下划线的颜色、高度、宽度、圆角半径和间距。标签页内容为不同颜色的矩形，标签栏位于底部，支持滚动。",
            "code": "@Entry\n@Component\nstruct TabsAttr {\n  private controller: TabsController = new TabsController() // 标签页控制器，用于控制标签页的切换\n  @State indicatorColor: Color = Color.Blue; // 下划线指示器的颜色，初始为蓝色\n  @State indicatorWidth: number = 40; // 下划线指示器的宽度，初始为40\n  @State indicatorHeight: number = 10; // 下划线指示器的高度，初始为10\n  @State indicatorBorderRadius: number = 5; // 下划线指示器的圆角半径，初始为5\n  @State indicatorSpace: number = 10; // 下划线指示器的间距，初始为10\n  @State subTabBorderRadius: number = 20; // 子标签页的圆角半径，初始为20\n  @State selectedMode: SelectedMode = SelectedMode.INDICATOR; // 选中模式，初始为下划线指示器模式\n  private colorFlag: boolean = True; // 颜色变化标志，用于切换下划线颜色\n  private widthFlag: boolean = True; // 宽度变化标志，用于切换下划线宽度\n  private heightFlag: boolean = True; // 高度变化标志，用于切换下划线高度\n  private borderFlag: boolean = True; // 圆角变化标志，用于切换下划线圆角半径\n  private spaceFlag: boolean = True; // 间距变化标志，用于切换下划线间距\n\n  build() {\n    Column() {\n      Button(\"下划线颜色变化\").width('100%').margin({ bottom: '12vp' })\n        .onClick((event?: ClickEvent) => {\n          // 点击按钮时，切换下划线指示器的颜色\n          if (this.colorFlag) {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorColor = Color.Red // 将下划线颜色变为红色\n            })\n          } else {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorColor = Color.Yellow // 将下划线颜色变为黄色\n            })\n          }\n          this.colorFlag = !this.colorFlag // 切换颜色变化标志\n        })\n      Button(\"下划线高度变化\").width('100%').margin({ bottom: '12vp' })\n        .onClick((event?: ClickEvent) => {\n          // 点击按钮时，切换下划线指示器的高度\n          if (this.heightFlag) {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorHeight = 20 // 将下划线高度变为20\n            })\n          } else {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorHeight = 10 // 将下划线高度变为10\n            })\n          }\n          this.heightFlag = !this.heightFlag // 切换高度变化标志\n        })\n      Button(\"下划线宽度变化\").width('100%').margin({ bottom: '12vp' })\n        .onClick((event?: ClickEvent) => {\n          // 点击按钮时，切换下划线指示器的宽度\n          if (this.widthFlag) {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorWidth = 30 // 将下划线宽度变为30\n            })\n          } else {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorWidth = 50 // 将下划线宽度变为50\n            })\n          }\n          this.widthFlag = !this.widthFlag // 切换宽度变化标志\n        })\n      Button(\"下划线圆角半径变化\").width('100%').margin({ bottom: '12vp' })\n        .onClick((event?: ClickEvent) => {\n          // 点击按钮时，切换下划线指示器的圆角半径\n          if (this.borderFlag) {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorBorderRadius = 0 // 将下划线圆角半径变为0\n            })\n          } else {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorBorderRadius = 5 // 将下划线圆角半径变为5\n            })\n          }\n          this.borderFlag = !this.borderFlag // 切换圆角变化标志\n        })\n      Button(\"下划线间距变化\").width('100%').margin({ bottom: '12vp' })\n        .onClick((event?: ClickEvent) => {\n          // 点击按钮时，切换下划线指示器的间距\n          if (this.spaceFlag) {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorSpace = 20 // 将下划线间距变为20\n            })\n          } else {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorSpace = 10 // 将下划线间距变为10\n            })\n          }\n          this.spaceFlag = !this.spaceFlag // 切换间距变化标志\n        })\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) {\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Pink).borderRadius('12vp')\n        }.tabBar(SubTabBarStyle.of('pink')\n          .indicator({\n            color: this.indicatorColor, \n            height: this.indicatorHeight, \n            width: this.indicatorWidth, \n            borderRadius: this.indicatorBorderRadius, \n            marginTop: this.indicatorSpace \n          })\n          .selectedMode(this.selectedMode)\n          .board({ borderRadius: this.subTabBorderRadius })\n          .labelStyle({})\n        )\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Yellow).borderRadius('12vp')\n        }.tabBar('yellow')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Blue).borderRadius('12vp')\n        }.tabBar('blue')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green).borderRadius('12vp')\n        }.tabBar('green')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Gray).borderRadius('12vp')\n        }.tabBar('gray')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Orange).borderRadius('12vp')\n        }.tabBar('orange')\n      }\n      .vertical(False) // 设置标签页为水平布局\n      .scrollable(True) // 设置标签页可滚动\n      .barMode(BarMode.Scrollable) // 设置标签栏为可滚动模式\n      .barHeight(140) // 设置标签栏高度为140\n      .animationDuration(400) // 设置标签页切换动画时长为400毫秒\n      .onChange((index: number) => {\n        console.info(index.toString()) // 当标签页切换时，输出当前选中的标签页索引\n      })\n      .backgroundColor(0xF5F5F5) // 设置标签页背景颜色为浅灰色\n      .height(320) // 设置标签页高度为320\n    }.width('100%').height(250).padding({ top: '24vp', left: '24vp', right: '24vp' }) // 设置整体布局的宽度、高度和内边距\n  }\n}"
        },
        {
            "description": "实现一个包含三种不同样式TabBar的示例组件。每种样式分别展示了子页签、底部页签和侧边页签的不同布局和交互效果。",
            "code": "@Entry\n@Component\nstruct TabBarStyleExample {\n  build() {\n    Column({ space: 5 }) {\n      // 显示“子页签样式”文本\n      Text(\"子页签样式\")\n      Column() {\n        // 创建一个Tab组件，页签位于顶部\n        Tabs({ barPosition: BarPosition.Start }) {\n          // 第一个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink)\n          }\n          .tabBar(new SubTabBarStyle('Pink')) // 设置TabBar的样式为子页签样式，显示文本“Pink”\n          .onWillShow(() => {\n            console.info(\"Pink will show\") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info(\"Pink will hide\") // 当Tab页签即将隐藏时，输出日志\n          })\n\n          // 第二个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Yellow)\n          }\n          .tabBar(new SubTabBarStyle('Yellow')) // 设置TabBar的样式为子页签样式，显示文本“Yellow”\n          .onWillShow(() => {\n            console.info(\"Yellow will show\") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info(\"Yellow will hide\") // 当Tab页签即将隐藏时，输出日志\n          })\n\n          // 第三个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue)\n          }\n          .tabBar(new SubTabBarStyle('Blue')) // 设置TabBar的样式为子页签样式，显示文本“Blue”\n          .onWillShow(() => {\n            console.info(\"Blue will show\") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info(\"Blue will hide\") // 当Tab页签即将隐藏时，输出日志\n          })\n\n          // 第四个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green)\n          }\n          .tabBar(new SubTabBarStyle('Green')) // 设置TabBar的样式为子页签样式，显示文本“Green”\n          .onWillShow(() => {\n            console.info(\"Green will show\") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info(\"Green will hide\") // 当Tab页签即将隐藏时，输出日志\n          })\n        }\n        .vertical(False) // 设置TabBar为水平布局\n        .scrollable(True) // 设置TabBar可滚动\n        .barMode(BarMode.Fixed) // 设置TabBar为固定模式\n        .onChange((index: number) => {\n          console.info(index.toString()) // 当Tab页签切换时，输出当前选中的页签索引\n        })\n        .width('100%') // 设置Tab组件的宽度为100%\n        .backgroundColor(0xF1F3F5) // 设置Tab组件的背景颜色\n      }\n      .width('100%') // 设置Column的宽度为100%\n      .height(200) // 设置Column的高度为200\n\n      // 显示“底部页签样式”文本\n      Text(\"底部页签样式\")\n      Column() {\n        // 创建一个Tab组件，页签位于底部\n        Tabs({ barPosition: BarPosition.End }) {\n          // 第一个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink)\n          }\n          .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Pink')) // 设置TabBar的样式为底部页签样式，显示图标和文本“Pink”\n          .onWillShow(() => {\n            console.info(\"Pink will show\") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info(\"Pink will hide\") // 当Tab页签即将隐藏时，输出日志\n          })\n\n          // 第二个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Yellow)\n          }\n          .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Yellow')) // 设置TabBar的样式为底部页签样式，显示图标和文本“Yellow”\n          .onWillShow(() => {\n            console.info(\"Yellow will show\") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info(\"Yellow will hide\") // 当Tab页签即将隐藏时，输出日志\n          })\n\n          // 第三个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue)\n          }\n          .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Blue')) // 设置TabBar的样式为底部页签样式，显示图标和文本“Blue”\n          .onWillShow(() => {\n            console.info(\"Blue will show\") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info(\"Blue will hide\") // 当Tab页签即将隐藏时，输出日志\n          })\n\n          // 第四个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green)\n          }\n          .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Green')) // 设置TabBar的样式为底部页签样式，显示图标和文本“Green”\n          .onWillShow(() => {\n            console.info(\"Green will show\") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info(\"Green will hide\") // 当Tab页签即将隐藏时，输出日志\n          })\n        }\n        .vertical(False) // 设置TabBar为水平布局\n        .scrollable(True) // 设置TabBar可滚动\n        .barMode(BarMode.Fixed) // 设置TabBar为固定模式\n        .onChange((index: number) => {\n          console.info(index.toString()) // 当Tab页签切换时，输出当前选中的页签索引\n        })\n        .width('100%') // 设置Tab组件的宽度为100%\n        .backgroundColor(0xF1F3F5) // 设置Tab组件的背景颜色\n      }\n      .width('100%') // 设置Column的宽度为100%\n      .height(200) // 设置Column的高度为200\n\n      // 显示“侧边页签样式”文本\n      Text(\"侧边页签样式\")\n      Column() {\n        // 创建一个Tab组件，页签位于左侧\n        Tabs({ barPosition: BarPosition.Start }) {\n          // 第一个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink)\n          }\n          .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Pink')) // 设置TabBar的样式为底部页签样式，显示图标和文本“Pink”\n          .onWillShow(() => {\n            console.info(\"Pink will show\") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info(\"Pink will hide\") // 当Tab页签即将隐藏时，输出日志\n          })\n\n          // 第二个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Yellow)\n          }\n          .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Yellow')) // 设置TabBar的样式为底部页签样式，显示图标和文本“Yellow”\n          .onWillShow(() => {\n            console.info(\"Yellow will show\") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info(\"Yellow will hide\") // 当Tab页签即将隐藏时，输出日志\n          })\n\n          // 第三个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue)\n          }\n          .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Blue')) // 设置TabBar的样式为底部页签样式，显示图标和文本“Blue”\n          .onWillShow(() => {\n            console.info(\"Blue will show\") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info(\"Blue will hide\") // 当Tab页签即将隐藏时，输出日志\n          })\n\n          // 第四个Tab页签内容\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green)\n          }\n          .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Green')) // 设置TabBar的样式为底部页签样式，显示图标和文本“Green”\n          .onWillShow(() => {\n            console.info(\"Green will show\") // 当Tab页签即将显示时，输出日志\n          })\n          .onWillHide(() => {\n            console.info(\"Green will hide\") // 当Tab页签即将隐藏时，输出日志\n          })\n        }\n        .vertical(True) // 设置TabBar为垂直布局\n        .scrollable(True) // 设置TabBar可滚动\n        .barMode(BarMode.Fixed) // 设置TabBar为固定模式\n        .onChange((index: number) => {\n          console.info(index.toString()) // 当Tab页签切换时，输出当前选中的页签索引\n        })\n        .width('100%') // 设置Tab组件的宽度为100%\n        .backgroundColor(0xF1F3F5) // 设置Tab组件的背景颜色\n      }\n      .width('100%') // 设置Column的宽度为100%\n      .height(400) // 设置Column的高度为400\n    }\n  }\n}"
        }
    ],
    "WaterFlow": [
        {
            "description": "实现一个瀑布流布局的组件，支持自动填充列数，并根据数据源动态生成不同大小和颜色的子项。\n导入自定义的WaterFlowDataSource类，用于提供数据源",
            "code": "import { WaterFlowDataSource } from './WaterFlowDataSource'\n\n// 定义入口组件WaterFlowDemo\n@Entry\n@Component\nstruct WaterFlowDemo {\n  // 定义状态变量minSize，表示子项的最小尺寸\n  @State minSize: number = 80\n  // 定义状态变量maxSize，表示子项的最大尺寸\n  @State maxSize: number = 180\n  // 定义状态变量colors，表示子项的背景颜色数组\n  @State colors: number[] = [0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F]\n  // 定义数据源对象\n  dataSource: WaterFlowDataSource = new WaterFlowDataSource()\n  // 定义私有变量itemWidthArray，用于存储子项的宽度\n  private itemWidthArray: number[] = []\n  // 定义私有变量itemHeightArray，用于存储子项的高度\n  private itemHeightArray: number[] = []\n\n  // 定义获取随机尺寸的方法\n  getSize() {\n    // 生成一个介于0和maxSize之间的随机数\n    let ret = Math.floor(Math.random() * this.maxSize)\n    // 如果随机数小于minSize，则返回minSize，否则返回随机数\n    return (ret > this.minSize ? ret : this.minSize)\n  }\n\n  // 定义设置子项尺寸数组的方法\n  setItemSizeArray() {\n    // 循环100次，生成100个子项的宽度和高度\n    for (let i = 0; i < 100; i++) {\n      this.itemWidthArray.push(this.getSize())\n      this.itemHeightArray.push(this.getSize())\n    }\n  }\n\n  // 组件即将显示时调用的方法\n  aboutToAppear() {\n    // 调用设置子项尺寸数组的方法\n    this.setItemSizeArray()\n  }\n\n  // 构建组件的方法\n  build() {\n    // 使用Column布局，设置子项之间的间距为2\n    Column({ space: 2 }) {\n      // 使用WaterFlow布局\n      WaterFlow() {\n        // 使用LazyForEach遍历数据源，生成子项\n        LazyForEach(this.dataSource, (item: number) => {\n          // 使用FlowItem组件\n          FlowItem() {\n            // 使用Column布局\n            Column() {\n              // 显示文本，内容为\"N\"加上数据源中的item值\n              Text(\"N\" + item).fontSize(12).height('16')\n              // 显示图片，图片路径为res/waterFlowTest(item % 5).jpg\n              Image('res/waterFlowTest(' + item % 5 + ').jpg')\n            }\n          }\n          // 设置子项的宽度为100%\n          .width('100%')\n          // 设置子项的高度为itemHeightArray中对应索引的值\n          .height(this.itemHeightArray[item % 100])\n          // 设置子项的背景颜色为colors数组中对应索引的值\n          .backgroundColor(this.colors[item % 5])\n        }, (item: string) => item) // 设置key值为item\n      }\n      // 设置WaterFlow的列模板为自动填充，每列宽度为80\n      .columnsTemplate('repeat(auto-fill,80)')\n      // 设置列之间的间距为10\n      .columnsGap(10)\n      // 设置行之间的间距为5\n      .rowsGap(5)\n      // 设置内边距，左边距为5\n      .padding({left:5})\n      // 设置背景颜色为0xFAEEE0\n      .backgroundColor(0xFAEEE0)\n      // 设置宽度为100%\n      .width('100%')\n      // 设置高度为100%\n      .height('100%')\n    }\n  }\n}"
        },
        {
            "description": "实现一个支持双指缩放改变列数的瀑布流布局组件。组件包含一个可复用的瀑布流项组件，通过双指缩放手势动态调整瀑布流的列数，并保存当前列数状态。\n导入自定义的瀑布流数据源",
            "code": "import { WaterFlowDataSource } from './WaterFlowDataSource'\n\n// 定义可复用的瀑布流项组件\n@Reusable\n@Component\nstruct ReusableFlowItem {\n  @State item: number = 0 // 定义状态变量，用于存储当前项的编号\n\n  // 组件复用时调用的方法，用于更新组件状态\n  aboutToReuse(params: Record<string, number>) {\n    this.item = params.item; // 更新当前项的编号\n    console.info('Reuse item:' + this.item) // 打印日志，记录复用项的编号\n  }\n\n  // 组件首次出现时调用的方法\n  aboutToAppear() {\n    console.info('item:' + this.item) // 打印日志，记录当前项的编号\n  }\n\n  // 构建组件UI\n  build() {\n    Column() {\n      Text(\"N\" + this.item).fontSize(12).height('16') // 显示当前项的编号\n      Image('res/waterFlow (' + this.item % 5 + ').JPG') // 显示当前项对应的图片\n        .objectFit(ImageFit.Fill) // 图片填充方式\n        .width('100%') // 图片宽度\n        .layoutWeight(1) // 布局权重\n    }\n  }\n}\n\n// 定义入口组件，实现瀑布流布局\n@Entry\n@Component\nstruct WaterFlowDemo {\n  minSize: number = 80 // 最小尺寸\n  maxSize: number = 180 // 最大尺寸\n  colors: number[] = [0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F] // 颜色数组\n  @State columns: number = 2 // 定义状态变量，用于存储当前列数\n  dataSource: WaterFlowDataSource = new WaterFlowDataSource() // 数据源实例\n  private itemWidthArray: number[] = [] // 存储每个项的宽度\n  private itemHeightArray: number[] = [] // 存储每个项的高度\n\n  // 获取随机尺寸\n  getSize() {\n    let ret = Math.floor(Math.random() * this.maxSize) // 生成随机尺寸\n    return (ret > this.minSize ? ret : this.minSize) // 返回随机尺寸，确保不小于最小尺寸\n  }\n\n  // 设置项的尺寸数组\n  setItemSizeArray() {\n    for (let i = 0; i < 100; i++) {\n      this.itemWidthArray.push(this.getSize()) // 添加随机宽度\n      this.itemHeightArray.push(this.getSize()) // 添加随机高度\n    }\n  }\n\n  // 组件首次出现时调用的方法\n  aboutToAppear() {\n    let lastCount = AppStorage.get<number>('columnsCount') // 获取上一次保存的列数\n    if (typeof lastCount != 'undefined') {\n      this.columns = lastCount // 恢复上一次的列数\n    }\n    this.setItemSizeArray() // 初始化项的尺寸数组\n  }\n\n  // 构建组件UI\n  build() {\n    Column({ space: 2 }) {\n      Row() {\n        Text('双指缩放改变列数') // 提示文本\n          .height('5%') // 文本高度\n          .margin({ top: 10, left: 20 }) // 文本外边距\n      }\n\n      WaterFlow() {\n        LazyForEach(this.dataSource, (item: number) => { // 遍历数据源\n          FlowItem() {\n            ReusableFlowItem({ item: item }) // 创建可复用的瀑布流项\n          }\n          .width('100%') // 项的宽度\n          .height(this.itemHeightArray[item % 100]) // 项的高度\n          .backgroundColor(this.colors[item % 5]) // 项的背景颜色\n        }, (item: string) => item) // 唯一标识符\n      }\n      .columnsTemplate('1fr '.repeat(this.columns)) // 列模板\n      .columnsGap(10) // 列间距\n      .rowsGap(5) // 行间距\n      .backgroundColor(0xFAEEE0) // 背景颜色\n      .width('100%') // 宽度\n      .height('100%') // 高度\n      .layoutWeight(1) // 布局权重\n\n      .animation({ // 动画配置\n        duration: 300, // 动画时长\n        curve: Curve.Smooth // 动画曲线\n      })\n      .priorityGesture( // 优先手势\n        PinchGesture() // 双指缩放手势\n          .onActionEnd((event: GestureEvent) => { // 手势结束时的回调\n            console.info('end scale:' + event.scale) // 打印缩放比例\n\n            if (event.scale > 2) { // 缩放比例大于2时\n              this.columns-- // 减少列数\n            } else if (event.scale < 0.6) { // 缩放比例小于0.6时\n              this.columns++ // 增加列数\n            }\n\n            this.columns = Math.min(4, Math.max(1, this.columns)); // 限制列数范围\n            AppStorage.setOrCreate<number>('columnsCount', this.columns) // 保存当前列数\n          })\n      )\n    }\n  }\n}"
        },
        {
            "description": "实现一个瀑布流布局组件，支持动态加载数据、滚动事件监听、以及数据源的管理。组件包含一个WaterFlow布局，内部使用LazyForEach组件动态加载数据项，并根据数据源的变化动态调整布局。\n定义一个数据源类，实现IDataSource接口，用于管理数据和通知数据变化\nexport class WaterFlowDataSource implements IDataSource {\nprivate dataArray: number[] = []  存储数据的数组\nprivate listeners: DataChangeListener[] = []  存储数据变化监听器的数组\n构造函数，初始化数据数组，填充100个数据项\nconstructor() {\nfor (let i = 0; i < 100; i++) {\nthis.dataArray.push(i)\n}\n}\n获取指定索引的数据项\npublic getData(index: number): number {\nreturn this.dataArray[index]\n}\n通知所有监听器数据已重新加载\nnotifyDataReload(): void {\nthis.listeners.forEach(listener => {\nlistener.onDataReloaded()\n})\n}\n通知所有监听器在指定索引处添加了数据\nnotifyDataAdd(index: number): void {\nthis.listeners.forEach(listener => {\nlistener.onDataAdd(index)\n})\n}\n通知所有监听器在指定索引处的数据已更改\nnotifyDataChange(index: number): void {\nthis.listeners.forEach(listener => {\nlistener.onDataChange(index)\n})\n}\n通知所有监听器在指定索引处的数据已删除\nnotifyDataDelete(index: number): void {\nthis.listeners.forEach(listener => {\nlistener.onDataDelete(index)\n})\n}\n通知所有监听器数据已移动\nnotifyDataMove(from: number, to: number): void {\nthis.listeners.forEach(listener => {\nlistener.onDataMove(from, to)\n})\n}\n通知所有监听器数据集已更改\nnotifyDatasetChange(operations: DataOperation[]): void {\nthis.listeners.forEach(listener => {\nlistener.onDatasetChange(operations);\n})\n}\n获取数据总数\npublic totalCount(): number {\nreturn this.dataArray.length\n}\n注册数据变化监听器\nregisterDataChangeListener(listener: DataChangeListener): void {\nif (this.listeners.indexOf(listener) < 0) {\nthis.listeners.push(listener)\n}\n}\n注销数据变化监听器\nunregisterDataChangeListener(listener: DataChangeListener): void {\nconst pos = this.listeners.indexOf(listener)\nif (pos >= 0) {\nthis.listeners.splice(pos, 1)\n}\n}\n在数据数组的开头添加一个数据项\npublic add1stItem(): void {\nthis.dataArray.splice(0, 0, this.dataArray.length)\nthis.notifyDataAdd(0)\n}\n在数据数组的末尾添加一个数据项\npublic addLastItem(): void {\nthis.dataArray.splice(this.dataArray.length, 0, this.dataArray.length)\nthis.notifyDataAdd(this.dataArray.length - 1)\n}\n在指定索引处添加一个数据项\npublic addItem(index: number): void {\nthis.dataArray.splice(index, 0, this.dataArray.length)\nthis.notifyDataAdd(index)\n}\n删除数据数组的第一个数据项\npublic delete1stItem(): void {\nthis.dataArray.splice(0, 1)\nthis.notifyDataDelete(0)\n}\n删除数据数组的第二个数据项\npublic delete2ndItem(): void {\nthis.dataArray.splice(1, 1)\nthis.notifyDataDelete(1)\n}\n删除数据数组的最后一个数据项\npublic deleteLastItem(): void {\nthis.dataArray.splice(-1, 1)\nthis.notifyDataDelete(this.dataArray.length)\n}\n删除指定索引处的数据项\npublic deleteItem(index: number): void {\nthis.dataArray.splice(index, 1)\nthis.notifyDataDelete(index)\n}\n重新加载数据，删除指定索引处的数据项\npublic reload(): void {\nthis.dataArray.splice(1, 1)\nthis.dataArray.splice(3, 2)\nthis.notifyDataReload()\n}\n}\n导入自定义的数据源类",
            "code": "import { WaterFlowDataSource } from './WaterFlowDataSource'\n\n// 定义一个组件，用于展示瀑布流布局\n@Entry\n@Component\nstruct WaterFlowDemo {\n  @State minSize: number = 80 // 最小尺寸\n  @State maxSize: number = 180 // 最大尺寸\n  @State fontSize: number = 24 // 字体大小\n  @State colors: number[] = [0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F] // 颜色数组\n  scroller: Scroller = new Scroller() // 滚动控制器\n  dataSource: WaterFlowDataSource = new WaterFlowDataSource() // 数据源实例\n  private itemWidthArray: number[] = [] // 存储每个项的宽度\n  private itemHeightArray: number[] = [] // 存储每个项的高度\n\n  // 获取随机尺寸\n  getSize() {\n    let ret = Math.floor(Math.random() * this.maxSize)\n    return (ret > this.minSize ? ret : this.minSize)\n  }\n\n  // 设置每个项的尺寸数组\n  setItemSizeArray() {\n    for (let i = 0; i < 100; i++) {\n      this.itemWidthArray.push(this.getSize())\n      this.itemHeightArray.push(this.getSize())\n    }\n  }\n\n  // 组件即将显示时调用，设置项的尺寸数组\n  aboutToAppear() {\n    this.setItemSizeArray()\n  }\n\n  // 定义一个Builder，用于生成每个项的底部内容\n  @Builder\n  itemFoot() {\n    Column() {\n      Text(`Footer`)\n        .fontSize(10)\n        .backgroundColor(Color.Red)\n        .width(50)\n        .height(50)\n        .align(Alignment.Center)\n        .margin({ top: 2 })\n    }\n  }\n\n  // 构建组件的UI\n  build() {\n    Column({ space: 2 }) {\n      WaterFlow() {\n        LazyForEach(this.dataSource, (item: number) => {\n          FlowItem() {\n            Column() {\n              Text(\"N\" + item).fontSize(12).height('16')\n\n              Image('res/waterFlowTest(' + item % 5 + ').jpg')\n                .objectFit(ImageFit.Fill)\n                .width('100%')\n                .layoutWeight(1)\n            }\n          }\n          .onAppear(() => {\n            if (item + 20 == this.dataSource.totalCount()) {\n              for (let i = 0; i < 100; i++) {\n                this.dataSource.addLastItem()\n              }\n            }\n          })\n          .width('100%')\n          .height(this.itemHeightArray[item % 100])\n          .backgroundColor(this.colors[item % 5])\n        }, (item: string) => item)\n      }\n      .columnsTemplate(\"1fr 1fr\") // 设置列模板\n      .columnsGap(10) // 设置列间距\n      .rowsGap(5) // 设置行间距\n      .backgroundColor(0xFAEEE0) // 设置背景颜色\n      .width('100%') // 设置宽度\n      .height('100%') // 设置高度\n      .onReachStart(() => {\n        console.info('waterFlow reach start')\n      })\n      .onScrollStart(() => {\n        console.info('waterFlow scroll start')\n      })\n      .onScrollStop(() => {\n        console.info('waterFlow scroll stop')\n      })\n      .onScrollFrameBegin((offset: number, state: ScrollState) => {\n        console.info('waterFlow scrollFrameBegin offset: ' + offset + ' state: ' + state.toString())\n        return { offsetRemain: offset }\n      })\n    }\n  }\n}"
        },
        {
            "description": "实现一个瀑布流布局组件，支持动态添加、删除和更新节（Section），并且支持滚动加载更多数据。\n导入自定义的WaterFlowDataSource类",
            "code": "import { WaterFlowDataSource } from './WaterFlowDataSource'\n\n// 定义一个可复用的组件ReusableFlowItem，用于显示瀑布流中的每个项目\n@Reusable\n@Component\nstruct ReusableFlowItem {\n  @State item: number = 0 // 定义一个状态变量item，用于存储当前项目的索引\n\n  // 当组件被复用时调用，更新item的值\n  aboutToReuse(params: Record<string, number>) {\n    this.item = params.item;\n    console.info('Reuse item:' + this.item)\n  }\n\n  // 当组件首次出现时调用，打印新项目的索引\n  aboutToAppear() {\n    console.info('new item:' + this.item)\n  }\n\n  // 构建组件的UI结构\n  build() {\n    Image('res/waterFlowTest(' + this.item % 5 + ').jpg') // 根据item的值加载不同的图片\n      .overlay('N' + this.item, { align: Alignment.Top }) // 在图片顶部显示项目的索引\n      .objectFit(ImageFit.Fill) // 设置图片的填充方式\n      .width('100%') // 设置图片的宽度为100%\n      .layoutWeight(1) // 设置布局权重为1\n  }\n}\n\n// 定义一个入口组件WaterFlowDemo，用于展示瀑布流布局\n@Entry\n@Component\nstruct WaterFlowDemo {\n  minSize: number = 80 // 定义项目高度的最小值\n  maxSize: number = 180 // 定义项目高度的最大值\n  fontSize: number = 24 // 定义字体大小\n  colors: number[] = [0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F] // 定义颜色数组\n  scroller: Scroller = new Scroller() // 创建一个滚动控制器\n  dataSource: WaterFlowDataSource = new WaterFlowDataSource() // 创建一个数据源实例\n  dataCount: number = this.dataSource.totalCount() // 获取数据源的总项目数\n  private itemHeightArray: number[] = [] // 定义一个数组，用于存储每个项目的高度\n  @State sections: WaterFlowSections = new WaterFlowSections() // 定义一个状态变量sections，用于存储瀑布流的节\n  sectionMargin: Margin = { top: 10, left: 5, bottom: 10, right: 5 } // 定义节的边距\n\n  // 定义一个单列节的配置\n  oneColumnSection: SectionOptions = {\n    itemsCount: 4, // 节中的项目数\n    crossCount: 1, // 节中的列数\n    columnsGap: '5vp', // 列之间的间距\n    rowsGap: 10, // 行之间的间距\n    margin: this.sectionMargin, // 节的边距\n    onGetItemMainSizeByIndex: (index: number) => { // 根据索引获取项目的主尺寸（高度）\n      return this.itemHeightArray[index % 100]\n    }\n  }\n\n  // 定义一个双列节的配置\n  twoColumnSection: SectionOptions = {\n    itemsCount: 2, // 节中的项目数\n    crossCount: 2, // 节中的列数\n    onGetItemMainSizeByIndex: (index: number) => { // 根据索引获取项目的主尺寸（高度）\n      return 100\n    }\n  }\n\n  // 定义最后一个节的配置\n  lastSection: SectionOptions = {\n    itemsCount: 20, // 节中的项目数\n    crossCount: 2, // 节中的列数\n    onGetItemMainSizeByIndex: (index: number) => { // 根据索引获取项目的主尺寸（高度）\n      return this.itemHeightArray[index % 100]\n    }\n  }\n\n  // 获取随机尺寸的方法\n  getSize() {\n    let ret = Math.floor(Math.random() * this.maxSize)\n    return (ret > this.minSize ? ret : this.minSize)\n  }\n\n  // 设置项目高度数组的方法\n  setItemSizeArray() {\n    for (let i = 0; i < 100; i++) {\n      this.itemHeightArray.push(this.getSize())\n    }\n  }\n\n  // 当组件首次出现时调用，初始化项目高度数组并设置节的配置\n  aboutToAppear() {\n    this.setItemSizeArray()\n\n    let sectionOptions: SectionOptions[] = []\n    let count = 0\n    let oneOrTwo = 0\n    while (count < this.dataCount) {\n      if (this.dataCount - count < 20) {\n        this.lastSection.itemsCount = this.dataCount - count\n        sectionOptions.push(this.lastSection)\n        break;\n      }\n      if (oneOrTwo++ % 2 == 0) {\n        sectionOptions.push(this.oneColumnSection)\n        count += this.oneColumnSection.itemsCount\n      } else {\n        sectionOptions.push(this.twoColumnSection)\n        count += this.twoColumnSection.itemsCount\n      }\n    }\n    this.sections.splice(0, 0, sectionOptions)\n  }\n\n  // 构建组件的UI结构\n  build() {\n    Column({ space: 2 }) {\n      Row() {\n        Button('splice')\n          .height('5%')\n          .onClick(() => {\n            let totalCount: number = this.dataSource.totalCount()\n            let newSection: SectionOptions = {\n              itemsCount: totalCount,\n              crossCount: 2,\n              onGetItemMainSizeByIndex: (index: number) => {\n                return this.itemHeightArray[index % 100]\n              }\n            }\n            let oldLength: number = this.sections.length()\n            this.sections.splice(0, oldLength, [newSection])\n          })\n          .margin({ top: 10, left: 20 })\n        Button('update')\n          .height('5%')\n          .onClick(() => {\n            let newSection: SectionOptions = {\n              itemsCount: 6,\n              crossCount: 3,\n              columnsGap: 5,\n              rowsGap: 10,\n              margin: this.sectionMargin,\n              onGetItemMainSizeByIndex: (index: number) => {\n                return this.itemHeightArray[index % 100]\n              }\n            }\n            this.dataSource.addItem(this.oneColumnSection.itemsCount)\n            this.dataSource.addItem(this.oneColumnSection.itemsCount + 1)\n            this.dataSource.addItem(this.oneColumnSection.itemsCount + 2)\n            this.dataSource.addItem(this.oneColumnSection.itemsCount + 3)\n            const result: boolean = this.sections.update(1, newSection)\n            console.info('update:' + result)\n          })\n          .margin({ top: 10, left: 20 })\n        Button('delete')\n          .height('5%')\n          .onClick(() => {\n            let newSection: SectionOptions = {\n              itemsCount: 2,\n              crossCount: 2,\n              columnsGap: 5,\n              rowsGap: 10,\n              margin: this.sectionMargin,\n              onGetItemMainSizeByIndex: (index: number) => {\n                return this.itemHeightArray[index % 100]\n              }\n            }\n            this.dataSource.deleteItem(this.oneColumnSection.itemsCount)\n            this.dataSource.deleteItem(this.oneColumnSection.itemsCount)\n            this.dataSource.deleteItem(this.oneColumnSection.itemsCount)\n            this.dataSource.deleteItem(this.oneColumnSection.itemsCount)\n            this.sections.update(1, newSection)\n          })\n          .margin({ top: 10, left: 20 })\n        Button('values')\n          .height('5%')\n          .onClick(() => {\n            const sections: Array<SectionOptions> = this.sections.values();\n            for (const value of sections) {\n              console.log(JSON.stringify(value));\n            }\n            console.info('count:' + this.sections.length())\n          })\n          .margin({ top: 10, left: 20 })\n      }.margin({ bottom: 20 })\n\n      WaterFlow({ scroller: this.scroller, sections: this.sections }) {\n        LazyForEach(this.dataSource, (item: number) => {\n          FlowItem() {\n            ReusableFlowItem({ item: item })\n          }\n          .width('100%')\n          .backgroundColor(this.colors[item % 5])\n        }, (item: string) => item)\n      }\n      .columnsTemplate('1fr 1fr') \n      .columnsGap(10)\n      .rowsGap(5)\n      .backgroundColor(0xFAEEE0)\n      .width('100%')\n      .height('100%')\n      .layoutWeight(1)\n      .onScrollIndex((first: number, last: number) => {\n        if (last + 20 >= this.dataSource.totalCount()) {\n          for (let i = 0; i < 100; i++) {\n            this.dataSource.addLastItem()\n          }\n          const sections: Array<SectionOptions> = this.sections.values();\n          let newSection: SectionOptions = sections[this.sections.length() - 1];\n          newSection.itemsCount += 100;\n          this.sections.update(-1, newSection);\n        }\n      })\n    }\n  }\n}"
        }
    ],
    "WithTheme": [
        {
            "description": "实现一个简单的深浅色模式切换示例。该示例包含一个文本和一个按钮，文本的颜色和背景颜色会根据深浅色模式的状态进行切换。点击按钮可以切换深浅色模式。",
            "code": "@Entry\n@Component\nstruct LocalDarkModeExample {\n  @State isDarkMode: boolean = false; // 定义一个状态变量，用于控制深浅色模式\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Text('Hello World')\n        .fontSize(50)\n        .fontColor(this.isDarkMode ? Color.White : Color.Black) // 根据深浅色模式设置文本颜色\n        .backgroundColor(this.isDarkMode ? Color.Black : Color.White) // 根据深浅色模式设置背景颜色\n\n      Button('Toggle Dark Mode')\n        .onClick(() => {\n          this.isDarkMode = !this.isDarkMode; // 切换深浅色模式\n        })\n    }\n    .width('100%')\n    .height('100%')\n  }\n}\n\n// dark.json\n{\n  \"color\": {\n    \"background\": \"#000000\", // 深色模式下的背景颜色\n    \"text\": \"#FFFFFF\" // 深色模式下的文本颜色\n  }\n}"
        }
    ],
    "Circle": [
        {
            "description": "实现一个包含两个圆形组件的界面。第一个圆形是一个实心圆，直径为150；第二个圆形是一个红色虚线的圆环，直径为150（宽高设置不一致时以短边为直径）。",
            "code": "@Entry\n@Component\nstruct CircleExample {\n  build() {\n    Column({ space: 10 }) {\n      // 绘制一个直径为150的圆\n      Circle({ width: 150, height: 150 })\n      \n      // 绘制一个直径为150、线条为红色虚线的圆环（宽高设置不一致时以短边为直径）\n      Circle()\n        .width(150) // 设置圆环的宽度为150\n        .height(200) // 设置圆环的高度为200，但由于宽高不一致，实际直径为150（短边）\n        .fillOpacity(0) // 设置填充透明度为0，使圆环内部透明\n        .strokeWidth(3) // 设置圆环的线条宽度为3\n        .stroke(Color.Red) // 设置圆环的线条颜色为红色\n        .strokeDashArray([1, 2]) // 设置圆环的线条为虚线，虚线长度为1，间隔为2\n    }.width('100%') // 设置Column的宽度为100%，使其占满父容器的宽度\n  }\n}"
        }
    ],
    "Ellipse": [
        {
            "description": "实现一个包含两个椭圆的组件，第一个椭圆是一个填充的椭圆，第二个椭圆是一个蓝色的椭圆环。",
            "code": "@Entry // 标记该组件为入口组件\n@Component // 标记该结构体为一个组件\nstruct EllipseExample {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局的容器，子组件之间有10像素的间距\n      // 绘制一个 150 * 80 的椭圆\n      Ellipse({ width: 150, height: 80 }) // 创建一个宽度为150，高度为80的椭圆\n      \n      // 绘制一个 150 * 100 、线条为蓝色的椭圆环\n      Ellipse() // 创建一个椭圆组件\n        .width(150) // 设置椭圆的宽度为150\n        .height(100) // 设置椭圆的高度为100\n        .fillOpacity(0) // 设置填充透明度为0，即不填充颜色\n        .stroke(Color.Blue) // 设置椭圆的边框颜色为蓝色\n        .strokeWidth(3) // 设置椭圆的边框宽度为3像素\n    }.width('100%') // 设置Column容器的宽度为100%\n  }\n}"
        }
    ],
    "Line": [
        {
            "description": "实现一个包含三个垂直线条的组件，每个线条的样式略有不同，展示不同的线条端点样式（LineCapStyle）。",
            "code": "@Entry\n@Component\nstruct LineExample1 {\n  build() {\n    Row({ space: 10 }) { // 创建一个水平布局的容器，子组件之间的间距为10\n\n      Line()\n        .width(100) // 设置线条的宽度为100\n        .height(200) // 设置线条的高度为200\n        .startPoint([50, 50]) // 设置线条的起始点坐标为(50, 50)\n        .endPoint([50, 200]) // 设置线条的结束点坐标为(50, 200)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(20) // 设置线条的宽度为20\n        .strokeLineCap(LineCapStyle.Butt) // 设置线条的端点样式为Butt（平头）\n        .backgroundColor('#F5F5F5') // 设置线条的背景颜色为浅灰色\n        .margin(10) // 设置线条的外边距为10\n\n      Line()\n        .width(100) // 设置线条的宽度为100\n        .height(200) // 设置线条的高度为200\n        .startPoint([50, 50]) // 设置线条的起始点坐标为(50, 50)\n        .endPoint([50, 200]) // 设置线条的结束点坐标为(50, 200)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(20) // 设置线条的宽度为20\n        .strokeLineCap(LineCapStyle.Round) // 设置线条的端点样式为Round（圆头）\n        .backgroundColor('#F5F5F5') // 设置线条的背景颜色为浅灰色\n\n      Line()\n        .width(100) // 设置线条的宽度为100\n        .height(200) // 设置线条的高度为200\n        .startPoint([50, 50]) // 设置线条的起始点坐标为(50, 50)\n        .endPoint([50, 200]) // 设置线条的结束点坐标为(50, 200)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(20) // 设置线条的宽度为20\n        .strokeLineCap(LineCapStyle.Square) // 设置线条的端点样式为Square（方头）\n        .backgroundColor('#F5F5F5') // 设置线条的背景颜色为浅灰色\n    }\n  }\n}"
        },
        {
            "description": "实现一个包含多个水平线条的组件，每个线条具有不同的虚线样式。线条的宽度和高度固定，起始点和结束点相同，但通过不同的strokeDashArray属性设置不同的虚线效果。",
            "code": "@Entry\n@Component\nstruct LineExample {\n  build() {\n    Column() {\n      // 第一条线条，实线\n      Line()\n        .width(300) // 设置线条的宽度为300\n        .height(30) // 设置线条的高度为30\n        .startPoint([50, 30]) // 设置线条的起始点为(50, 30)\n        .endPoint([300, 30]) // 设置线条的结束点为(300, 30)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(10) // 设置线条的宽度为10\n\n      // 第二条线条，虚线，虚线长度为50\n      Line()\n        .width(300) // 设置线条的宽度为300\n        .height(30) // 设置线条的高度为30\n        .startPoint([50, 20]) // 设置线条的起始点为(50, 20)\n        .endPoint([300, 20]) // 设置线条的结束点为(300, 20)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(10) // 设置线条的宽度为10\n        .strokeDashArray([50]) // 设置虚线样式，虚线长度为50\n\n      // 第三条线条，虚线，虚线长度为50，间隔为10\n      Line()\n        .width(300) // 设置线条的宽度为300\n        .height(30) // 设置线条的高度为30\n        .startPoint([50, 20]) // 设置线条的起始点为(50, 20)\n        .endPoint([300, 20]) // 设置线条的结束点为(300, 20)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(10) // 设置线条的宽度为10\n        .strokeDashArray([50, 10]) // 设置虚线样式，虚线长度为50，间隔为10\n\n      // 第四条线条，虚线，虚线长度为50，间隔为10，虚线长度为20\n      Line()\n        .width(300) // 设置线条的宽度为300\n        .height(30) // 设置线条的高度为30\n        .startPoint([50, 20]) // 设置线条的起始点为(50, 20)\n        .endPoint([300, 20]) // 设置线条的结束点为(300, 20)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(10) // 设置线条的宽度为10\n        .strokeDashArray([50, 10, 20]) // 设置虚线样式，虚线长度为50，间隔为10，虚线长度为20\n\n      // 第五条线条，虚线，虚线长度为50，间隔为10，虚线长度为20，间隔为30\n      Line()\n        .width(300) // 设置线条的宽度为300\n        .height(30) // 设置线条的高度为30\n        .startPoint([50, 20]) // 设置线条的起始点为(50, 20)\n        .endPoint([300, 20]) // 设置线条的结束点为(300, 20)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(10) // 设置线条的宽度为10\n        .strokeDashArray([50, 10, 20, 30]) // 设置虚线样式，虚线长度为50，间隔为10，虚线长度为20，间隔为30\n    }\n  }\n}"
        },
        {
            "description": "实现一个包含多个线条的示例组件，展示了不同线条的样式和属性设置。每个线条具有不同的起点、终点、颜色、宽度、透明度、背景色以及虚线样式。",
            "code": "@Entry\n@Component\nstruct LineExample {\n  build() {\n    Column({ space: 10 }) {\n      // 第一条线条，起点为(0, 0)，终点为(50, 100)，黑色实线，背景色为#F5F5F5\n      Line()\n        .width(200) // 设置线条的宽度为200\n        .height(150) // 设置线条的高度为150\n        .startPoint([0, 0]) // 设置线条的起点为(0, 0)\n        .endPoint([50, 100]) // 设置线条的终点为(50, 100)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .backgroundColor('#F5F5F5') // 设置线条的背景色为#F5F5F5\n\n      // 第二条线条，起点为(50, 50)，终点为(150, 150)，橙色虚线，宽度为5，透明度为0.5，背景色为#F5F5F5\n      Line()\n        .width(200) // 设置线条的宽度为200\n        .height(150) // 设置线条的高度为150\n        .startPoint([50, 50]) // 设置线条的起点为(50, 50)\n        .endPoint([150, 150]) // 设置线条的终点为(150, 150)\n        .strokeWidth(5) // 设置线条的宽度为5\n        .stroke(Color.Orange) // 设置线条的颜色为橙色\n        .strokeOpacity(0.5) // 设置线条的透明度为0.5\n        .backgroundColor('#F5F5F5') // 设置线条的背景色为#F5F5F5\n\n      // 第三条线条，起点为(0, 0)，终点为(100, 100)，黑色虚线，宽度为3，虚线样式为[10, 3]，虚线偏移量为5，背景色为#F5F5F5\n      Line()\n        .width(200) // 设置线条的宽度为200\n        .height(150) // 设置线条的高度为150\n        .startPoint([0, 0]) // 设置线条的起点为(0, 0)\n        .endPoint([100, 100]) // 设置线条的终点为(100, 100)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(3) // 设置线条的宽度为3\n        .strokeDashArray([10, 3]) // 设置线条的虚线样式为[10, 3]\n        .strokeDashOffset(5) // 设置线条的虚线偏移量为5\n        .backgroundColor('#F5F5F5') // 设置线条的背景色为#F5F5F5\n\n      // 第四条线条，起点为(0, 0)，终点为(100, 100)，黑色虚线，宽度为3，虚线样式为[10, 3]，背景色为#F5F5F5\n      Line()\n        .width(50) // 设置线条的宽度为50\n        .height(50) // 设置线条的高度为50\n        .startPoint([0, 0]) // 设置线条的起点为(0, 0)\n        .endPoint([100, 100]) // 设置线条的终点为(100, 100)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(3) // 设置线条的宽度为3\n        .strokeDashArray([10, 3]) // 设置线条的虚线样式为[10, 3]\n        .backgroundColor('#F5F5F5') // 设置线条的背景色为#F5F5F5\n    }\n  }\n}"
        }
    ],
    "Polyline": [
        {
            "description": "实现一个包含两个Polyline组件的示例，展示如何使用Polyline绘制折线图形。第一个Polyline使用蓝色线条绘制，第二个Polyline使用红色线条绘制，并设置了线条的连接和端点样式。",
            "code": "@Entry\n@Component\nstruct PolylineExample {\n  build() {\n    Column({ space: 10 }) {\n      // 创建一个Polyline组件，设置宽度为100，高度为100\n      Polyline({ width: 100, height: 100 })\n        // 设置折线的点坐标，绘制从(0, 0)到(20, 60)再到(100, 100)的折线\n        .points([[0, 0], [20, 60], [100, 100]])\n        // 设置填充透明度为0，即不填充\n        .fillOpacity(0)\n        // 设置线条颜色为蓝色\n        .stroke(Color.Blue)\n        // 设置线条宽度为3\n        .strokeWidth(3)\n\n      // 创建另一个Polyline组件，默认宽度和高度为0，后续通过属性设置\n      Polyline()\n        // 设置Polyline的宽度为100\n        .width(100)\n        // 设置Polyline的高度为100\n        .height(100)\n        // 设置填充透明度为0，即不填充\n        .fillOpacity(0)\n        // 设置线条颜色为红色\n        .stroke(Color.Red)\n        // 设置线条宽度为8\n        .strokeWidth(8)\n        // 设置折线的点坐标，绘制从(20, 0)到(0, 100)再到(100, 90)的折线\n        .points([[20, 0], [0, 100], [100, 90]])\n        // 设置线条连接处的样式为圆角\n        .strokeLineJoin(LineJoinStyle.Round)\n        // 设置线条端点的样式为圆角\n        .strokeLineCap(LineCapStyle.Round)\n    }\n    // 设置Column的宽度为100%，使其占据父容器的全部宽度\n    .width('100%')\n  }\n}"
        }
    ],
    "Polygon": [
        {
            "description": "实现一个展示多个多边形的组件，每个多边形具有不同的形状、填充颜色、边框样式和透明度。通过使用Polygon组件，展示了如何定义多边形的顶点、填充颜色、边框宽度和颜色等属性。",
            "code": "@Entry\n@Component\nstruct PolygonExample {\n  build() {\n    Column({ space: 10 }) {\n      // 第一个多边形：一个三角形，填充绿色\n      Polygon({ width: 100, height: 100 })\n        .points([[0, 0], [50, 100], [100, 0]]) // 定义三角形的三个顶点\n        .fill(Color.Green) // 设置填充颜色为绿色\n\n      // 第二个多边形：一个矩形，无填充颜色，边框为蓝色，宽度为5\n      Polygon().width(100).height(100)\n        .points([[0, 0], [0, 100], [100, 100], [100, 0]]) // 定义矩形的四个顶点\n        .fillOpacity(0) // 设置填充透明度为0，即无填充颜色\n        .strokeWidth(5) // 设置边框宽度为5\n        .stroke(Color.Blue) // 设置边框颜色为蓝色\n\n      // 第三个多边形：一个不规则五边形，填充红色，透明度为0.6\n      Polygon().width(100).height(100)\n        .points([[50, 0], [0, 50], [20, 100], [80, 100], [100, 50]]) // 定义五边形的五个顶点\n        .fill(Color.Red) // 设置填充颜色为红色\n        .fillOpacity(0.6) // 设置填充透明度为0.6\n    }.width('100%').margin({ top: 10 }) // 设置Column的宽度为100%，顶部外边距为10\n  }\n}"
        }
    ],
    "Path": [
        {
            "description": "实现一个展示不同路径图形的组件，包括直线、直线图形、曲线图形。通过Path组件绘制不同的路径，并使用Flex布局进行排列。",
            "code": "@Entry\n@Component\nstruct PathExample {\n  build() {\n    Column({ space: 10 }) {\n      // 显示文本“Straight line”，字体大小为11，颜色为灰色，宽度为90%\n      Text('Straight line')\n        .fontSize(11)\n        .fontColor(0xCCCCCC)\n        .width('90%')\n\n      // 绘制一条水平直线，宽度为600px，高度为10px，颜色为黑色，线宽为3\n      Path()\n        .width('600px')\n        .height('10px')\n        .commands('M0 0 L600 0') // 从(0,0)到(600,0)绘制直线\n        .stroke(Color.Black)\n        .strokeWidth(3)\n\n      // 显示文本“Straight line graph”，字体大小为11，颜色为灰色，宽度为90%\n      Text('Straight line graph')\n        .fontSize(11)\n        .fontColor(0xCCCCCC)\n        .width('90%')\n\n      // 使用Flex布局，子元素在主轴上均匀分布\n      Flex({ justifyContent: FlexAlign.SpaceBetween }) {\n        // 绘制第一个直线图形，宽度为210px，高度为310px，颜色为黑色，线宽为3\n        Path()\n          .width('210px')\n          .height('310px')\n          .commands('M100 0 L200 240 L0 240 Z') // 绘制三角形路径\n          .fillOpacity(0) // 填充透明\n          .stroke(Color.Black)\n          .strokeWidth(3)\n\n        // 绘制第二个直线图形，宽度为210px，高度为310px，颜色为黑色，线宽为3\n        Path()\n          .width('210px')\n          .height('310px')\n          .commands('M0 0 H200 V200 H0 Z') // 绘制矩形路径\n          .fillOpacity(0) // 填充透明\n          .stroke(Color.Black)\n          .strokeWidth(3)\n\n        // 绘制第三个直线图形，宽度为210px，高度为310px，颜色为黑色，线宽为3\n        Path()\n          .width('210px')\n          .height('310px')\n          .commands('M100 0 L0 100 L50 200 L150 200 L200 100 Z') // 绘制多边形路径\n          .fillOpacity(0) // 填充透明\n          .stroke(Color.Black)\n          .strokeWidth(3)\n      }.width('95%')\n\n      // 显示文本“Curve graphics”，字体大小为11，颜色为灰色，宽度为90%\n      Text('Curve graphics').fontSize(11).fontColor(0xCCCCCC).width('90%')\n\n      // 使用Flex布局，子元素在主轴上均匀分布\n      Flex({ justifyContent: FlexAlign.SpaceBetween }) {\n        // 绘制第一个曲线图形，宽度为250px，高度为310px，颜色为黑色，线宽为3\n        Path()\n          .width('250px')\n          .height('310px')\n          .commands(\"M0 300 S100 0 240 300 Z\") // 绘制贝塞尔曲线\n          .fillOpacity(0) // 填充透明\n          .stroke(Color.Black)\n          .strokeWidth(3)\n\n        // 绘制第二个曲线图形，宽度为210px，高度为310px，颜色为黑色，线宽为3\n        Path()\n          .width('210px')\n          .height('310px')\n          .commands('M0 150 C0 100 140 0 200 150 L100 300 Z') // 绘制曲线路径\n          .fillOpacity(0) // 填充透明\n          .stroke(Color.Black)\n          .strokeWidth(3)\n\n        // 绘制第三个曲线图形，宽度为210px，高度为310px，颜色为黑色，线宽为3\n        Path()\n          .width('210px')\n          .height('310px')\n          .commands('M0 100 A30 20 20 0 0 200 100 Z') // 绘制弧线路径\n          .fillOpacity(0) // 填充透明\n          .stroke(Color.Black)\n          .strokeWidth(3)\n      }.width('95%')\n    }.width('100%')\n    .margin({ top: 5 }) // 设置顶部外边距为5\n  }\n}"
        }
    ],
    "Rect": [
        {
            "description": "实现一个包含两个矩形组件的示例，第一个矩形使用线性渐变填充并应用圆角裁剪，第二个矩形使用纯色填充并应用圆角边框。",
            "code": "@Entry // 标记该组件为入口组件，即应用的入口界面\n@Component // 标记该结构体为一个自定义组件\nstruct RectExample {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局的容器，子组件之间的间距为10\n      Column() // 创建一个垂直布局的容器\n        .width(100) // 设置容器的宽度为100\n        .height(100) // 设置容器的高度为100\n        .linearGradient({ // 应用线性渐变填充\n          direction: GradientDirection.Right, // 渐变方向为从左到右\n          colors: [[0xff0000, 0.0], [0x0000ff, 0.3], [0xffff00, 1.0]] // 渐变颜色数组，从红色到蓝色再到黄色\n        })\n        .clip(new Rect({ width: 100, height: 100, radius: 40 })) // 应用圆角裁剪，裁剪成一个圆角矩形\n\n      Rect() // 创建一个矩形组件\n        .width(100) // 设置矩形的宽度为100\n        .height(100) // 设置矩形的高度为100\n        .fill(Color.Pink) // 设置矩形的填充颜色为粉色\n        .radius(40) // 设置矩形的圆角半径为40\n        .stroke(Color.Black) // 设置矩形的边框颜色为黑色\n        .linearGradient({ // 应用线性渐变填充\n          direction: GradientDirection.Right, // 渐变方向为从左到右\n          colors: [[0xff0000, 0.0], [0x0000ff, 0.3], [0xffff00, 1.0]] // 渐变颜色数组，从红色到蓝色再到黄色\n        })\n    }\n  }\n}"
        },
        {
            "description": "实现一个展示不同样式矩形的示例组件。组件包含多个矩形，每个矩形展示不同的样式，包括填充颜色、边框、圆角等。通过不同的属性和方法设置矩形的外观，展示鸿蒙ArkUI中矩形组件的灵活性和多样性。",
            "code": "@Entry\n@Component\nstruct RectExample {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局，组件间距为10\n      Text('normal').fontSize(11).fontColor(0xCCCCCC).width('90%') // 创建一个文本组件，字体大小为11，颜色为灰色，宽度为90%\n\n      Column({ space: 5 }) { // 创建一个垂直布局，组件间距为5\n        Text('normal').fontSize(9).fontColor(0xCCCCCC).width('90%') // 创建一个文本组件，字体大小为9，颜色为灰色，宽度为90%\n\n        Rect({ width: '90%', height: 50 }) // 创建一个矩形组件，宽度为90%，高度为50\n          .fill(Color.Pink) // 设置矩形的填充颜色为粉色\n\n        Rect() // 创建一个矩形组件\n          .width('90%') // 设置矩形的宽度为90%\n          .height(50) // 设置矩形的高度为50\n          .fillOpacity(0) // 设置矩形的填充透明度为0（即无填充颜色）\n          .stroke(Color.Red) // 设置矩形的边框颜色为红色\n          .strokeWidth(3) // 设置矩形的边框宽度为3\n\n        Text('with rounded corners').fontSize(11).fontColor(0xCCCCCC).width('90%') // 创建一个文本组件，字体大小为11，颜色为灰色，宽度为90%\n\n        Rect({ width: '90%', height: 80 }) // 创建一个矩形组件，宽度为90%，高度为80\n          .radiusHeight(20) // 设置矩形的圆角高度为20\n          .radiusWidth(40) // 设置矩形的圆角宽度为40\n          .fill(Color.Pink) // 设置矩形的填充颜色为粉色\n\n        Rect({ width: '90%', height: 80 }) // 创建一个矩形组件，宽度为90%，高度为80\n          .radius(20) // 设置矩形的圆角为20（等宽等高圆角）\n          .fill(Color.Pink) // 设置矩形的填充颜色为粉色\n          .stroke(Color.Transparent) // 设置矩形的边框颜色为透明（即无边框）\n      }.width('100%').margin({ top: 10 }) // 设置内部垂直布局的宽度为100%，顶部外边距为10\n\n      Rect({ width: '90%', height: 80 }) // 创建一个矩形组件，宽度为90%，高度为80\n        .radius([[40, 40], [20, 20], [40, 40], [20, 20]]) // 设置矩形的圆角，分别为左上、右上、右下、左下的圆角\n        .fill(Color.Pink) // 设置矩形的填充颜色为粉色\n    }.width('100%').margin({ top: 5 }) // 设置外部垂直布局的宽度为100%，顶部外边距为5\n  }\n}"
        }
    ],
    "Shape": [
        {
            "description": "实现一个包含多种形状和路径的示例组件，展示不同形状和路径的绘制效果，包括矩形、椭圆、路径等，并设置不同的样式属性，如填充颜色、描边颜色、描边宽度、描边虚线、描边线帽、描边线连接等。",
            "code": "@Entry\n@Component\nstruct ShapeExample {\n  build() {\n    Column({ space: 10 }) {\n      // 显示一个标题文本，字体大小为11，颜色为灰色，宽度为320\n      Text('basic').fontSize(11).fontColor(0xCCCCCC).width(320)\n\n      // 创建一个Shape组件，包含多个形状，设置形状的宽度、高度、偏移量等属性\n      Shape() {\n        Rect().width(300).height(50) // 绘制一个宽度为300，高度为50的矩形\n        Ellipse().width(300).height(50).offset({ x: 0, y: 60 }) // 绘制一个宽度为300，高度为50的椭圆，并向下偏移60\n        Path().width(300).height(10).commands('M0 0 L900 0').offset({ x: 0, y: 120 }) // 绘制一个宽度为300，高度为10的路径，路径命令为从(0,0)到(900,0)，并向下偏移120\n      }\n      .width(350) // 设置Shape组件的宽度为350\n      .height(140) // 设置Shape组件的高度为140\n      .viewPort({ x: -2, y: -2, width: 304, height: 130 }) // 设置视口位置和大小，x和y为偏移量，width和height为视口大小\n      .fill(0x317AF7) // 设置填充颜色为蓝色\n      .stroke(Color.Black) // 设置描边颜色为黑色\n      .strokeWidth(4) // 设置描边宽度为4\n      .strokeDashArray([20]) // 设置描边虚线，虚线长度为20\n      .strokeDashOffset(10) // 设置描边虚线偏移量为10\n      .strokeLineCap(LineCapStyle.Round) // 设置描边线帽为圆角\n      .strokeLineJoin(LineJoinStyle.Round) // 设置描边线连接为圆角\n      .antiAlias(true) // 开启抗锯齿\n\n      // 创建一个Shape组件，包含一个矩形，设置形状的宽度、高度、视口等属性\n      Shape() {\n        Rect().width(300).height(50) // 绘制一个宽度为300，高度为50的矩形\n      }\n      .width(350) // 设置Shape组件的宽度为350\n      .height(80) // 设置Shape组件的高度为80\n      .viewPort({ x: 0, y: 0, width: 320, height: 70 }) // 设置视口位置和大小，x和y为偏移量，width和height为视口大小\n      .fill(0x317AF7) // 设置填充颜色为蓝色\n      .stroke(Color.Black) // 设置描边颜色为黑色\n      .strokeWidth(10) // 设置描边宽度为10\n\n      // 创建一个Shape组件，包含一个矩形，设置形状的宽度、高度、视口等属性\n      Shape() {\n        Rect().width(300).height(50) // 绘制一个宽度为300，高度为50的矩形\n      }\n      .width(350) // 设置Shape组件的宽度为350\n      .height(80) // 设置Shape组件的高度为80\n      .viewPort({ x: -5, y: -5, width: 320, height: 70 }) // 设置视口位置和大小，x和y为偏移量，width和height为视口大小\n      .fill(0x317AF7) // 设置填充颜色为蓝色\n      .stroke(Color.Black) // 设置描边颜色为黑色\n      .strokeWidth(10) // 设置描边宽度为10\n\n      // 显示一个标题文本，字体大小为11，颜色为灰色，宽度为320\n      Text('path').fontSize(11).fontColor(0xCCCCCC).width(320)\n\n      // 创建一个Shape组件，包含一个路径，设置路径的宽度、高度、视口等属性\n      Shape() {\n        Path().width(300).height(10).commands('M0 0 L900 0') // 绘制一个宽度为300，高度为10的路径，路径命令为从(0,0)到(900,0)\n      }\n      .width(350) // 设置Shape组件的宽度为350\n      .height(20) // 设置Shape组件的高度为20\n      .viewPort({ x: 0, y: -5, width: 300, height: 20 }) // 设置视口位置和大小，x和y为偏移量，width和height为视口大小\n      .stroke(0xEE8443) // 设置描边颜色为橙色\n      .strokeWidth(10) // 设置描边宽度为10\n      .strokeDashArray([20]) // 设置描边虚线，虚线长度为20\n\n      // 创建一个Shape组件，包含一个路径，设置路径的宽度、高度、视口等属性\n      Shape() {\n        Path().width(300).height(10).commands('M0 0 L900 0') // 绘制一个宽度为300，高度为10的路径，路径命令为从(0,0)到(900,0)\n      }\n      .width(350) // 设置Shape组件的宽度为350\n      .height(20) // 设置Shape组件的高度为20\n      .viewPort({ x: 0, y: -5, width: 300, height: 20 }) // 设置视口位置和大小，x和y为偏移量，width和height为视口大小\n      .stroke(0xEE8443) // 设置描边颜色为橙色\n      .strokeWidth(10) // 设置描边宽度为10\n      .strokeDashArray([20]) // 设置描边虚线，虚线长度为20\n      .strokeDashOffset(10) // 设置描边虚线偏移量为10\n\n      // 创建一个Shape组件，包含一个路径，设置路径的宽度、高度、视口等属性\n      Shape() {\n        Path().width(300).height(10).commands('M0 0 L900 0') // 绘制一个宽度为300，高度为10的路径，路径命令为从(0,0)到(900,0)\n      }\n      .width(350) // 设置Shape组件的宽度为350\n      .height(20) // 设置Shape组件的高度为20\n      .viewPort({ x: 0, y: -5, width: 300, height: 20 }) // 设置视口位置和大小，x和y为偏移量，width和height为视口大小\n      .stroke(0xEE8443) // 设置描边颜色为橙色\n      .strokeWidth(10) // 设置描边宽度为10\n      .strokeOpacity(0.5) // 设置描边透明度为0.5\n\n      // 创建一个Shape组件，包含一个路径，设置路径的宽度、高度、视口等属性\n      Shape() {\n        Path().width(300).height(10).commands('M0 0 L900 0') // 绘制一个宽度为300，高度为10的路径，路径命令为从(0,0)到(900,0)\n      }\n      .width(350) // 设置Shape组件的宽度为350\n      .height(20) // 设置Shape组件的高度为20\n      .viewPort({ x: 0, y: -5, width: 300, height: 20 }) // 设置视口位置和大小，x和y为偏移量，width和height为视口大小\n      .stroke(0xEE8443) // 设置描边颜色为橙色\n      .strokeWidth(10) // 设置描边宽度为10\n      .strokeDashArray([20]) // 设置描边虚线，虚线长度为20\n      .strokeLineCap(LineCapStyle.Round) // 设置描边线帽为圆角\n\n      // 创建一个Shape组件，包含一个路径，设置路径的宽度、高度、视口等属性\n      Shape() {\n        Path().width(200).height(60).commands('M0 0 L400 0 L400 150 Z') // 绘制一个宽度为200，高度为60的路径，路径命令为从(0,0)到(400,0)再到(400,150)并闭合\n      }\n      .width(300) // 设置Shape组件的宽度为300\n      .height(200) // 设置Shape组件的高度为200\n      .viewPort({ x: -20, y: -5, width: 310, height: 90 }) // 设置视口位置和大小，x和y为偏移量，width和height为视口大小\n      .fill(0x317AF7) // 设置填充颜色为蓝色\n      .stroke(0xEE8443) // 设置描边颜色为橙色\n      .strokeWidth(10) // 设置描边宽度为10\n      .strokeLineJoin(LineJoinStyle.Miter) // 设置描边线连接为斜角\n      .strokeMiterLimit(5) // 设置描边斜角限制为5\n    }.width('100%').margin({ top: 15 }) // 设置Column组件的宽度为100%，顶部外边距为15\n  }\n}"
        }
    ],
    "AlertDialog": [
        {
            "description": "实现一个带有自定义动画效果和持续时间的AlertDialog示例。点击按钮后，显示一个AlertDialog，对话框具有自定义的显示和关闭动画效果，并且可以设置对话框的标题、消息内容、对齐方式、偏移量、网格数、确认按钮和取消按钮的回调函数。",
            "code": "import { router } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct AlertDialogExample {\n  build() {\n    Column({ space: 5 }) {\n      Button('AlertDialog Set Duration')\n        .onClick(() => {\n          // 显示AlertDialog，并设置自定义动画效果和持续时间\n          AlertDialog.show({\n            title: 'AlertDialog 1', // 对话框标题\n            message: 'Set Animation Duration open 3 second, close 100ms', // 对话框消息内容\n            autoCancel: True, // 自动取消对话框\n            alignment: DialogAlignment.Top, // 对话框对齐方式为顶部\n            offset: { dx: 0, dy: -20 }, // 对话框偏移量\n            gridCount: 3, // 对话框网格数\n            transition: TransitionEffect.asymmetric(\n              // 显示动画效果：透明度和缩放，持续3秒，曲线为Sharp\n              TransitionEffect.OPACITY.animation({ duration: 3000, curve: Curve.Sharp }).combine(\n                TransitionEffect.scale({ x: 1.5, y: 1.5 }).animation({ duration: 3000, curve: Curve.Sharp })\n              ),\n              // 退出动画效果：透明度和缩放，持续100毫秒，曲线为Smooth\n              TransitionEffect.OPACITY.animation({ duration: 100, curve: Curve.Smooth }).combine(\n                TransitionEffect.scale({ x: 0.5, y: 0.5 }).animation({ duration: 100, curve: Curve.Smooth })\n              )\n            ),\n            confirm: {\n              value: 'button', // 确认按钮文本\n              action: () => {\n                console.info('Button-clicking callback'); // 确认按钮点击回调\n              }\n            },\n            cancel: () => {\n              console.info('Closed callbacks'); // 对话框关闭回调\n            }\n          });\n        })\n        .backgroundColor(0x317aff) // 按钮背景颜色\n        .height(\"88px\") // 按钮高度\n    }\n    .width('100%') // 列宽度\n    .margin({ top: 5 }) // 列顶部外边距\n  }\n}"
        },
        {
            "description": "实现一个带有弹出对话框的按钮组件。点击按钮后，显示一个包含标题、副标题、消息内容和多个按钮的对话框。对话框支持自动取消、居中对齐、模态显示、偏移量设置、按钮布局方向、按钮点击回调、对话框关闭回调等功能。",
            "code": "@Entry\n@Component\nstruct AlertDialogExample {\n  build() {\n    Column({ space: 5 }) {\n      Button('one button dialog')\n        .onClick(() => {\n          // 显示一个弹出对话框\n          AlertDialog.show(\n            {\n              title: 'title', // 对话框标题\n              subtitle: 'subtitle', // 对话框副标题\n              message: 'text', // 对话框消息内容\n              autoCancel: True, // 自动取消对话框\n              alignment: DialogAlignment.Center, // 对话框居中对齐\n              gridCount: 4, // 对话框网格计数\n              showInSubWindow: True, // 在子窗口中显示对话框\n              isModal: True, // 模态对话框\n              offset: { dx: 0, dy: -20 }, // 对话框偏移量\n              buttonDirection: DialogButtonDirection.HORIZONTAL, // 按钮水平布局\n              buttons: [\n                {\n                  value: '按钮', // 按钮文本\n                  action: () => {\n                    console.info('Callback when button1 is clicked') // 按钮1点击回调\n                  }\n                },\n                {\n                  value: '按钮', // 按钮文本\n                  action: () => {\n                    console.info('Callback when button2 is clicked') // 按钮2点击回调\n                  }\n                },\n                {\n                  value: '按钮', // 按钮文本\n                  enabled: True, // 按钮启用\n                  defaultFocus: True, // 默认焦点按钮\n                  style: DialogButtonStyle.HIGHLIGHT, // 按钮高亮样式\n                  action: () => {\n                    console.info('Callback when button3 is clicked') // 按钮3点击回调\n                  }\n                },\n              ],\n              cancel: () => {\n                console.info('Closed callbacks') // 对话框关闭回调\n              },\n              onWillDismiss: (dismissDialogAction: DismissDialogAction) => {\n                console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 对话框即将关闭的原因\n                console.log(\"dialog onWillDismiss\")\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                  dismissDialogAction.dismiss() // 按下返回键关闭对话框\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                  dismissDialogAction.dismiss() // 点击外部区域关闭对话框\n                }\n              }\n            })\n        })\n    }.width('100%').margin({ top: 5 }).backgroundColor(0x317aff) // 设置组件的宽度、上边距和背景颜色\n  }\n}"
        },
        {
            "description": "实现一个带有自定义样式的对话框示例。点击按钮后，显示一个带有标题、消息内容、确认按钮和关闭回调的对话框。对话框具有自定义的布局、样式和功能，包括对齐方式、偏移量、宽度、高度、圆角半径、边框样式、背景颜色、阴影效果等。",
            "code": "@Entry\n@Component\nstruct AlertDialogExample {\n  build() {\n    Column({ space: 5 }) {\n      Button('one button dialog')\n        .onClick(() => {\n          // 显示一个自定义样式的对话框\n          AlertDialog.show(\n            {\n              title: 'title', // 对话框标题\n              message: 'text', // 对话框消息内容\n              autoCancel: True, // 自动关闭对话框\n              alignment: DialogAlignment.Center, // 对话框对齐方式\n              offset: { dx: 0, dy: -20 }, // 对话框偏移量\n              gridCount: 3, // 对话框网格数\n              width: 300, // 对话框宽度\n              height: 200, // 对话框高度\n              cornerRadius: 20, // 对话框圆角半径\n              borderWidth: 1, // 对话框边框宽度\n              borderStyle: BorderStyle.Dashed, // 对话框边框样式\n              borderColor: Color.Blue, // 对话框边框颜色\n              backgroundColor: Color.White, // 对话框背景颜色\n              shadow: ({ radius: 20, color: Color.Grey, offsetX: 50, offsetY: 0}), // 对话框阴影\n              textStyle: { wordBreak: WordBreak.BREAK_ALL }, // 对话框文本样式\n              confirm: {\n                value: 'button', // 确认按钮文本\n                action: () => {\n                  // 确认按钮点击回调\n                  console.info('Button-clicking callback')\n                }\n              },\n              cancel: () => {\n                // 对话框关闭回调\n                console.info('Closed callbacks')\n              },\n              onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n                // 对话框即将关闭回调\n                console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason))\n                console.log(\"dialog onWillDismiss\")\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                  // 按下返回键关闭对话框\n                  dismissDialogAction.dismiss()\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                  // 点击对话框外部关闭对话框\n                  dismissDialogAction.dismiss()\n                }\n              }\n            }\n          )\n        })\n        .backgroundColor(0x317aff) // 按钮背景颜色\n    }.width('100%').margin({ top: 5 }) // 列的宽度为100%，顶部外边距为5\n  }\n}"
        },
        {
            "description": "实现一个包含三个按钮的组件，每个按钮点击后会弹出一个不同数量的按钮的对话框。对话框支持自定义标题、副标题、消息内容、对齐方式、偏移量、按钮布局方向、按钮样式等。对话框的关闭行为可以通过回调函数进行自定义处理。",
            "code": "@Entry\n@Component\nstruct AlertDialogExample {\n  build() {\n    Column({ space: 5 }) {\n      // 按钮：触发一个按钮的弹窗\n      Button('one button dialog')\n        .onClick(() => {\n          // 显示一个按钮的弹窗\n          AlertDialog.show(\n            {\n              title: 'title', // 弹窗标题\n              message: 'text', // 弹窗消息内容\n              autoCancel: True, // 自动取消弹窗\n              alignment: DialogAlignment.Bottom, // 弹窗对齐方式\n              offset: { dx: 0, dy: -20 }, // 弹窗偏移量\n              gridCount: 3, // 弹窗按钮网格数\n              confirm: {\n                value: 'button', // 按钮文本\n                action: () => {\n                  console.info('Button-clicking callback') // 按钮点击回调\n                }\n              },\n              cancel: () => {\n                console.info('Closed callbacks') // 弹窗关闭回调\n              },\n              onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n                console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 弹窗即将关闭的原因\n                console.log(\"dialog onWillDismiss\")\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                  dismissDialogAction.dismiss() // 按下返回键关闭弹窗\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                  dismissDialogAction.dismiss() // 点击弹窗外部关闭弹窗\n                }\n              }\n            }\n          )\n        })\n        .backgroundColor(0x317aff) // 按钮背景颜色\n\n      // 按钮：触发两个按钮的弹窗\n      Button('two button dialog')\n        .onClick(() => {\n          // 显示两个按钮的弹窗\n          AlertDialog.show(\n            {\n              title: 'title', // 弹窗标题\n              subtitle: 'subtitle', // 弹窗副标题\n              message: 'text', // 弹窗消息内容\n              autoCancel: True, // 自动取消弹窗\n              alignment: DialogAlignment.Bottom, // 弹窗对齐方式\n              gridCount: 4, // 弹窗按钮网格数\n              offset: { dx: 0, dy: -20 }, // 弹窗偏移量\n              primaryButton: {\n                value: 'cancel', // 第一个按钮文本\n                action: () => {\n                  console.info('Callback when the first button is clicked') // 第一个按钮点击回调\n                }\n              },\n              secondaryButton: {\n                enabled: True, // 第二个按钮启用\n                defaultFocus: True, // 第二个按钮默认聚焦\n                style: DialogButtonStyle.HIGHLIGHT, // 第二个按钮样式\n                value: 'ok', // 第二个按钮文本\n                action: () => {\n                  console.info('Callback when the second button is clicked') // 第二个按钮点击回调\n                }\n              },\n              cancel: () => {\n                console.info('Closed callbacks') // 弹窗关闭回调\n              },\n              onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n                console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 弹窗即将关闭的原因\n                console.log(\"dialog onWillDismiss\")\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                  dismissDialogAction.dismiss() // 按下返回键关闭弹窗\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                  dismissDialogAction.dismiss() // 点击弹窗外部关闭弹窗\n                }\n              }\n            }\n          )\n        }).backgroundColor(0x317aff) // 按钮背景颜色\n\n      // 按钮：触发三个按钮的弹窗\n      Button('three button dialog')\n        .onClick(() => {\n          // 显示三个按钮的弹窗\n          AlertDialog.show(\n            {\n              title: 'title', // 弹窗标题\n              subtitle: 'subtitle', // 弹窗副标题\n              message: 'text', // 弹窗消息内容\n              autoCancel: True, // 自动取消弹窗\n              alignment: DialogAlignment.Bottom, // 弹窗对齐方式\n              gridCount: 4, // 弹窗按钮网格数\n              offset: { dx: 0, dy: -20 }, // 弹窗偏移量\n              buttonDirection: DialogButtonDirection.HORIZONTAL, // 按钮布局方向\n              buttons: [\n                {\n                  value: '按钮', // 第一个按钮文本\n                  action: () => {\n                    console.info('Callback when button1 is clicked') // 第一个按钮点击回调\n                  }\n                },\n                {\n                  value: '按钮', // 第二个按钮文本\n                  action: () => {\n                    console.info('Callback when button2 is clicked') // 第二个按钮点击回调\n                  }\n                },\n                {\n                  value: '按钮', // 第三个按钮文本\n                  enabled: True, // 第三个按钮启用\n                  defaultFocus: True, // 第三个按钮默认聚焦\n                  style: DialogButtonStyle.HIGHLIGHT, // 第三个按钮样式\n                  action: () => {\n                    console.info('Callback when button3 is clicked') // 第三个按钮点击回调\n                  }\n                },\n              ],\n              cancel: () => {\n                console.info('Closed callbacks') // 弹窗关闭回调\n              },\n              onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n                console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 弹窗即将关闭的原因\n                console.log(\"dialog onWillDismiss\")\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                  dismissDialogAction.dismiss() // 按下返回键关闭弹窗\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                  dismissDialogAction.dismiss() // 点击弹窗外部关闭弹窗\n                }\n              }\n            }\n          )\n        }).backgroundColor(0x317aff) // 按钮背景颜色\n    }.width('100%').margin({ top: 5 })\n  }\n}"
        }
    ],
    "ActionSheet": [
        {
            "description": "实现一个包含ActionSheet的示例组件，点击按钮后显示ActionSheet，并设置动画效果和持续时间。ActionSheet包含标题、消息、确认按钮、取消按钮以及多个选项。每个选项点击后会触发相应的回调函数。",
            "code": "import { router } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct ActionSheetExample {\n  build() {\n    Column({ space: 5 }) {\n      Button('ActionSheet Set Duration')\n        .onClick(() => {\n          // 显示ActionSheet，并设置动画效果和持续时间\n          ActionSheet.show({\n            title: 'ActionSheet 1', // ActionSheet的标题\n            message: 'Set Animation Duration open 3 second, close 100 ms', // ActionSheet的消息\n            autoCancel: True, // 自动取消ActionSheet\n            alignment: DialogAlignment.Top, // ActionSheet的对齐方式\n            transition: TransitionEffect.asymmetric(\n              // 显示动画效果：透明度和缩放，持续3秒\n              TransitionEffect.OPACITY.animation({ duration: 3000, curve: Curve.Sharp }).combine(\n                TransitionEffect.scale({ x: 1.5, y: 1.5 }).animation({ duration: 3000, curve: Curve.Sharp })\n              ),\n              // 退出动画效果：透明度和缩放，持续100毫秒\n              TransitionEffect.OPACITY.animation({ duration: 100, curve: Curve.Smooth }).combine(\n                TransitionEffect.scale({ x: 0.5, y: 0.5 }).animation({ duration: 100, curve: Curve.Smooth })\n              )\n            ),\n            offset: { dx: 0, dy: -20 }, // ActionSheet的偏移量\n            confirm: {\n              value: 'button', // 确认按钮的文本\n              action: () => {\n                console.info('Button-clicking callback') // 确认按钮点击回调\n              }\n            },\n            cancel: () => {\n              console.info('Closed callbacks') // 取消按钮点击回调\n            },\n            sheets: [\n              {\n                title: 'apples', // 选项1的标题\n                action: () => {\n                  console.log('apples') // 选项1点击回调\n                }\n              },\n              {\n                title: 'bananas', // 选项2的标题\n                action: () => {\n                  console.log('bananas') // 选项2点击回调\n                }\n              },\n              {\n                title: 'pears', // 选项3的标题\n                action: () => {\n                  console.log('pears') // 选项3点击回调\n                }\n              }\n            ]\n          })\n        }).backgroundColor(0x317aff).height(\"88px\") // 按钮的背景颜色和高度\n    }.width('100%').margin({ top: 5 }) // 列的宽度和小于顶部边距\n  }\n}"
        },
        {
            "description": "实现一个点击按钮后显示ActionSheet的组件。ActionSheet包含标题、副标题、消息内容、确认按钮、取消按钮以及多个选项。点击按钮后，ActionSheet会以模态对话框的形式显示在屏幕中央，并带有一定的偏移量。用户可以选择确认、取消或点击选项，每个操作都会触发相应的回调函数。",
            "code": "@Entry\n@Component\nstruct ActionSheetExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建一个按钮，点击后显示ActionSheet\n      Button('Click to Show ActionSheet')\n        .onClick(() => {\n          // 显示ActionSheet\n          ActionSheet.show({\n            title: 'ActionSheet title', // ActionSheet的标题\n            subtitle: 'ActionSheet subtitle', // ActionSheet的副标题\n            message: 'message', // ActionSheet的消息内容\n            autoCancel: True, // 是否自动取消\n            showInSubWindow: True, // 是否在子窗口中显示\n            isModal: True, // 是否为模态对话框\n            confirm: {\n              defaultFocus: True, // 确认按钮是否默认聚焦\n              value: 'Confirm button', // 确认按钮的文本\n              action: () => {\n                console.log('Get Alert Dialog handled') // 确认按钮点击后的回调\n              }\n            },\n            cancel: () => {\n              console.log('actionSheet canceled') // 取消按钮点击后的回调\n            },\n            onWillDismiss: (dismissDialogAction: DismissDialogAction) => {\n              console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 对话框即将关闭时的回调，输出关闭原因\n              console.log(\"dialog onWillDismiss\")\n              if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                dismissDialogAction.dismiss() // 如果原因是按下返回键，则关闭对话框\n              }\n              if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                dismissDialogAction.dismiss() // 如果原因是点击外部区域，则关闭对话框\n              }\n            },\n            alignment: DialogAlignment.Center, // 对话框的对齐方式\n            offset: { dx: 0, dy: -10 }, // 对话框的偏移量\n            sheets: [\n              {\n                title: 'apples', // 选项1的标题\n                action: () => {\n                  console.log('apples') // 选项1点击后的回调\n                }\n              },\n              {\n                title: 'bananas', // 选项2的标题\n                action: () => {\n                  console.log('bananas') // 选项2点击后的回调\n                }\n              },\n              {\n                title: 'pears', // 选项3的标题\n                action: () => {\n                  console.log('pears') // 选项3点击后的回调\n                }\n              }\n            ]\n          })\n        })\n    }.width('100%') // 设置Flex容器的宽度为100%\n    .height('100%') // 设置Flex容器的高度为100%\n  }\n}"
        },
        {
            "description": "实现一个动作表单（ActionSheet）示例，用户点击按钮后弹出动作表单，表单包含标题、副标题、消息内容、确认按钮、取消按钮以及多个选项。用户可以选择选项或点击确认/取消按钮来执行相应操作。动作表单支持自动取消、默认聚焦、对齐方式、偏移量等配置。",
            "code": "@Entry\n@Component\nstruct ActionSheetExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建一个按钮，点击后显示动作表单\n      Button('Click to Show ActionSheet')\n        .onClick(() => {\n          ActionSheet.show({\n            title: 'ActionSheet title', // 动作表单的标题\n            subtitle: 'ActionSheet subtitle', // 动作表单的副标题\n            message: 'message', // 动作表单的消息内容\n            autoCancel: True, // 自动取消动作表单，当用户点击外部区域或按下返回键时自动关闭\n            confirm: {\n              defaultFocus: True, // 确认按钮默认聚焦\n              value: 'Confirm button', // 确认按钮的文本\n              action: () => {\n                console.log('Get Alert Dialog handled') // 确认按钮点击后的动作，输出日志\n              }\n            },\n            cancel: () => {\n              console.log('actionSheet canceled') // 取消按钮点击后的动作，输出日志\n            },\n            onWillDismiss: (dismissDialogAction: DismissDialogAction) => {\n              console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 动作表单即将消失的原因，输出日志\n              console.log(\"dialog onWillDismiss\")\n              if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                dismissDialogAction.dismiss() // 按下返回键时关闭动作表单\n              }\n              if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                dismissDialogAction.dismiss() // 点击外部区域时关闭动作表单\n              }\n            },\n            alignment: DialogAlignment.Bottom, // 动作表单的对齐方式为底部\n            offset: { dx: 0, dy: -10 }, // 动作表单的偏移量，向上偏移10个单位\n            sheets: [\n              {\n                title: 'apples', // 第一个选项的标题\n                action: () => {\n                  console.log('apples') // 第一个选项点击后的动作，输出日志\n                }\n              },\n              {\n                title: 'bananas', // 第二个选项的标题\n                action: () => {\n                  console.log('bananas') // 第二个选项点击后的动作，输出日志\n                }\n              },\n              {\n                title: 'pears', // 第三个选项的标题\n                action: () => {\n                  console.log('pears') // 第三个选项点击后的动作，输出日志\n                }\n              }\n            ]\n          })\n        })\n    }.width('100%') // 设置Flex容器的宽度为100%\n    .height('100%') // 设置Flex容器的高度为100%\n  }\n}"
        },
        {
            "description": "实现一个按钮，点击按钮后弹出一个ActionSheet组件。ActionSheet组件包含标题、副标题、消息内容、确认按钮、取消按钮以及多个选项。每个选项点击后会执行相应的操作，并且可以设置ActionSheet的样式、对齐方式、偏移量等属性。",
            "code": "@Entry\n@Component\nstruct ActionSheetExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建一个按钮，点击按钮后显示ActionSheet\n      Button('Click to Show ActionSheet')\n        .onClick(() => {\n          ActionSheet.show({\n            title: 'ActionSheet title', // 设置ActionSheet的标题\n            subtitle: 'ActionSheet subtitle', // 设置ActionSheet的副标题\n            message: 'message', // 设置ActionSheet的消息内容\n            autoCancel: True, // 设置ActionSheet是否自动取消\n            width: 300, // 设置ActionSheet的宽度\n            height: 350, // 设置ActionSheet的高度\n            cornerRadius: 20, // 设置ActionSheet的圆角半径\n            borderWidth: 1, // 设置ActionSheet的边框宽度\n            borderStyle: BorderStyle.Solid, // 设置ActionSheet的边框样式\n            borderColor: Color.Blue, // 设置ActionSheet的边框颜色\n            backgroundColor: Color.White, // 设置ActionSheet的背景颜色\n            shadow: ({ radius: 20, color: Color.Grey, offsetX: 50, offsetY: 0}), // 设置ActionSheet的阴影效果\n            confirm: {\n              defaultFocus: True, // 设置确认按钮是否默认聚焦\n              value: 'Confirm button', // 设置确认按钮的文本\n              action: () => {\n                console.log('Get Alert Dialog handled') // 确认按钮点击后的操作\n              }\n            },\n            cancel: () => {\n              console.log('actionSheet canceled') // 取消按钮点击后的操作\n            },\n            onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n              console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 输出取消原因\n              console.log(\"dialog onWillDismiss\") // 输出对话框即将消失的日志\n              if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                dismissDialogAction.dismiss() // 处理按下返回键的取消操作\n              }\n              if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                dismissDialogAction.dismiss() // 处理点击外部区域的取消操作\n              }\n            },\n            alignment: DialogAlignment.Bottom, // 设置ActionSheet的对齐方式\n            offset: { dx: 0, dy: -10 }, // 设置ActionSheet的偏移量\n            sheets: [\n              {\n                title: 'apples', // 设置第一个选项的标题\n                action: () => {\n                  console.log('apples') // 第一个选项点击后的操作\n                }\n              },\n              {\n                title: 'bananas', // 设置第二个选项的标题\n                action: () => {\n                  console.log('bananas') // 第二个选项点击后的操作\n                }\n              },\n              {\n                title: 'pears', // 设置第三个选项的标题\n                action: () => {\n                  console.log('pears') // 第三个选项点击后的操作\n                }\n              }\n            ]\n          })\n        })\n    }.width('100%') // 设置Flex容器的宽度为100%\n    .height('100%') // 设置Flex容器的高度为100%\n  }\n}"
        }
    ],
    "CustomDialog": [
        {
            "description": "实现一个自定义对话框组件，包含一个按钮用于触发对话框的显示。对话框内包含两个按钮，分别用于取消和确认操作。对话框的显示位置、样式、以及关闭时的回调函数都可以自定义。",
            "code": "@Entry\n@Component\nstruct CustomDialogUser {\n  @State textValue: string = '' // 文本输入框的初始值\n  @State inputValue: string = 'click me' // 按钮的初始文本\n\n  // 创建一个自定义对话框控制器，用于管理对话框的显示和隐藏\n  dialogController: CustomDialogController | null = new CustomDialogController({\n    builder: CustomDialogExample({\n      cancel: ()=> { this.onCancel() }, // 取消按钮的回调函数\n      confirm: ()=> { this.onAccept() }, // 确认按钮的回调函数\n      textValue: $textValue, // 绑定文本输入框的值\n      inputValue: $inputValue // 绑定按钮的文本\n    }),\n    cancel: this.exitApp, // 点击空白区域或按下返回键时的回调函数\n    autoCancel: True, // 是否自动取消对话框\n    onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n      console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 对话框即将关闭时的回调函数，输出关闭原因\n      console.log(\"dialog onWillDismiss\")\n      if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n        dismissDialogAction.dismiss() // 按下返回键时关闭对话框\n      }\n      if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n        dismissDialogAction.dismiss() // 点击对话框外部时关闭对话框\n      }\n    },\n    alignment: DialogAlignment.Bottom, // 对话框的对齐方式，底部对齐\n    offset: { dx: 0, dy: -20 }, // 对话框的偏移量\n    gridCount: 4, // 对话框的网格数\n    customStyle: False, // 是否使用自定义样式\n    cornerRadius: 10, // 对话框的圆角半径\n  })\n\n  // 在自定义组件即将析构销毁时将dialogController置空\n  aboutToDisappear() {\n    this.dialogController = null\n  }\n\n  // 取消按钮的回调函数\n  onCancel() {\n    console.info('Callback when the first button is clicked')\n  }\n\n  // 确认按钮的回调函数\n  onAccept() {\n    console.info('Callback when the second button is clicked')\n  }\n\n  // 点击空白区域的回调函数\n  exitApp() {\n    console.info('Click the callback in the blank area')\n  }\n\n  // 构建UI界面\n  build() {\n    Column() {\n      Button(this.inputValue) // 创建一个按钮，按钮文本为inputValue\n        .onClick(() => {\n          if (this.dialogController != null) {\n            this.dialogController.open() // 点击按钮时打开对话框\n          }\n        }).backgroundColor(0x317aff) // 设置按钮的背景颜色\n    }.width('100%').margin({ top: 5 }) // 设置列的宽度为100%，顶部外边距为5\n  }\n}"
        },
        {
            "description": "实现一个自定义对话框组件，包含取消和确认按钮，支持点击空白区域和返回键关闭对话框。对话框居中显示，带有偏移量和圆角效果。主组件中包含一个按钮，点击按钮时打开对话框。",
            "code": "@Entry\n@Component\nstruct CustomDialogUser {\n  // 创建一个自定义对话框控制器实例，用于管理和控制对话框的显示和关闭\n  dialogController: CustomDialogController | null = new CustomDialogController({\n    builder: CustomDialogExample({ // 创建自定义对话框实例\n      cancel: ()=> { this.onCancel() }, // 设置取消按钮的回调函数\n      confirm: ()=> { this.onAccept() } // 设置确认按钮的回调函数\n    }),\n    cancel: this.existApp, // 设置空白区域点击的回调函数\n    autoCancel: True, // 设置是否自动取消对话框\n    onWillDismiss:(dismissDialogAction: DismissDialogAction)=> { // 设置对话框即将关闭时的回调函数\n      console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 打印关闭原因\n      console.log(\"dialog onWillDismiss\") // 打印日志\n      if (dismissDialogAction.reason == DismissReason.PRESS_BACK) { // 如果关闭原因是按下返回键\n        dismissDialogAction.dismiss() // 关闭对话框\n      }\n      if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) { // 如果关闭原因是点击外部区域\n        dismissDialogAction.dismiss() // 关闭对话框\n      }\n    },\n    alignment: DialogAlignment.Center, // 设置对话框的对齐方式\n    offset: { dx: 0, dy: -20 }, // 设置对话框的偏移量\n    gridCount: 4, // 设置对话框的网格数\n    showInSubWindow: True, // 设置是否在子窗口显示对话框\n    isModal: True, // 设置对话框是否为模态\n    customStyle: False, // 设置是否使用自定义样式\n    cornerRadius: 10, // 设置对话框的圆角半径\n  })\n\n  // 在自定义组件即将析构销毁时将dialogController置空\n  aboutToDisappear() {\n    this.dialogController = null // 将dialogController置空\n  }\n\n  // 取消按钮点击的回调函数\n  onCancel() {\n    console.info('Callback when the first button is clicked') // 打印取消按钮点击的日志\n  }\n\n  // 确认按钮点击的回调函数\n  onAccept() {\n    console.info('Callback when the second button is clicked') // 打印确认按钮点击的日志\n  }\n\n  // 空白区域点击的回调函数\n  existApp() {\n    console.info('Click the callback in the blank area') // 打印空白区域点击的日志\n  }\n\n  // 构建主组件\n  build() {\n    Column() {\n      Button('click me') // 主组件中的按钮\n        .onClick(() => { // 按钮的点击事件\n          if (this.dialogController != null) { // 检查控制器是否存在\n            this.dialogController.open() // 打开对话框\n          }\n        }).backgroundColor(0x317aff) // 设置按钮的背景颜色\n    }.width('100%').margin({ top: 5 }) // 设置列的宽度和上边距\n  }\n}"
        },
        {
            "description": "实现一个自定义对话框组件，支持通过按钮点击打开对话框，并设置对话框的各种属性，如对齐方式、偏移、样式、回调函数等。对话框包含取消和确认按钮，点击按钮时会触发相应的回调函数。对话框还支持点击空白区域关闭，并且可以在对话框即将关闭时执行自定义逻辑。",
            "code": "@Entry\n@Component\nstruct CustomDialogUser {\n  // 创建一个CustomDialogController实例，用于控制对话框的显示和隐藏\n  dialogController: CustomDialogController | null = new CustomDialogController({\n    builder: CustomDialogExample({\n      cancel: ()=> { this.onCancel() }, // 设置取消按钮的回调函数\n      confirm: ()=> { this.onAccept() } // 设置确认按钮的回调函数\n    }),\n    cancel: this.existApp, // 设置点击空白区域的回调函数\n    autoCancel: True, // 设置是否在点击空白区域时自动取消对话框\n    onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n      console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 打印对话框关闭的原因\n      console.log(\"dialog onWillDismiss\") // 打印日志\n      if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n        dismissDialogAction.dismiss() // 如果原因是按下返回键，则关闭对话框\n      }\n      if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n        dismissDialogAction.dismiss() // 如果原因是点击空白区域，则关闭对话框\n      }\n    },\n    alignment: DialogAlignment.Center, // 设置对话框的对齐方式为中心对齐\n    offset: { dx: 0, dy: -20 }, // 设置对话框的偏移量，向上偏移20个单位\n    customStyle: False, // 设置是否使用自定义样式\n    cornerRadius: 20, // 设置对话框的圆角半径为20\n    width: 300, // 设置对话框的宽度为300\n    height: 200, // 设置对话框的高度为200\n    borderWidth: 1, // 设置对话框的边框宽度为1\n    borderStyle: BorderStyle.Dashed, // 设置对话框的边框样式为虚线\n    borderColor: Color.Blue, // 设置对话框的边框颜色为蓝色\n    backgroundColor: Color.White, // 设置对话框的背景颜色为白色\n    shadow: ({ radius: 20, color: Color.Grey, offsetX: 50, offsetY: 0}) // 设置对话框的阴影效果\n  })\n\n  // 在自定义组件即将析构销毁时将dialogController置空\n  aboutToDisappear() {\n    this.dialogController = null // 将dialogController置空\n  }\n\n  // 取消按钮的回调函数\n  onCancel() {\n    console.info('Callback when the first button is clicked') // 打印取消回调日志\n  }\n\n  // 确认按钮的回调函数\n  onAccept() {\n    console.info('Callback when the second button is clicked') // 打印确认回调日志\n  }\n\n  // 点击空白区域的回调函数\n  existApp() {\n    console.info('Click the callback in the blank area') // 打印点击空白区域回调日志\n  }\n\n  // 构建UI布局\n  build() {\n    Column() {\n      Button('click me') // 显示一个按钮，点击按钮时打开对话框\n        .onClick(() => {\n          if (this.dialogController != null) {\n            this.dialogController.open() // 点击按钮打开对话框\n          }\n        }).backgroundColor(0x317aff) // 设置按钮的背景颜色为蓝色\n    }.width('100%').margin({ top: 5 }) // 设置列的宽度和上边距\n  }\n}"
        }
    ],
    "CalendarPickerDialog": [
        {
            "description": "实现一个日历选择对话框示例，用户点击按钮后弹出日历选择对话框，用户可以选择日期并确认或取消选择。对话框提供了多种回调事件，用于处理用户交互的不同阶段。",
            "code": "@Entry\n@Component\nstruct CalendarPickerDialogExample {\n  // 初始化一个默认选择的日期\n  private selectedDate: Date = new Date('2024-04-23')\n\n  build() {\n    Column() {\n      Button(\"Show CalendarPicker Dialog\")\n        .margin(20) // 设置按钮的外边距为20\n        .onClick(() => {\n          // 点击按钮时，显示日历选择对话框\n          console.info(\"CalendarDialog.show\")\n          CalendarPickerDialog.show({\n            selected: this.selectedDate, // 设置默认选择的日期\n            onAccept: (value) => {\n              // 用户确认选择日期时触发\n              console.info(\"calendar onAccept:\" + JSON.stringify(value))\n            },\n            onCancel: () => {\n              // 用户取消选择时触发\n              console.info(\"calendar onCancel\")\n            },\n            onChange: (value) => {\n              // 用户在日历中选择日期时触发\n              console.info(\"calendar onChange:\" + JSON.stringify(value))\n            },\n            onDidAppear: () => {\n              // 对话框完全显示后触发\n              console.info(\"calendar onDidAppear\")\n            },\n            onDidDisappear: () => {\n              // 对话框完全消失后触发\n              console.info(\"calendar onDidDisappear\")\n            },\n            onWillAppear: () => {\n              // 对话框即将显示时触发\n              console.info(\"calendar onWillAppear\")\n            },\n            onWillDisappear: () => {\n              // 对话框即将消失时触发\n              console.info(\"calendar onWillDisappear\")\n            }\n          })\n        })\n    }.width('100%') // 设置列的宽度为100%\n  }\n}"
        },
        {
            "description": "实现一个日历选择对话框示例，用户点击按钮后弹出日历选择对话框，用户可以选择日期，并根据选择触发相应的事件。对话框中的按钮样式可以自定义，包括字体颜色、大小、背景颜色等。",
            "code": "@Entry\n@Component\nstruct CalendarPickerDialogExample {\n  // 初始化选中的日期为当前日期\n  private selectedDate: Date = new Date()\n\n  build() {\n    Column() {\n      // 创建一个按钮，点击时显示日历选择对话框\n      Button(\"Show CalendarPicker Dialog\")\n        .margin(20) // 设置按钮的外边距\n        .onClick(() => {\n          console.info(\"CalendarDialog.show\") // 输出日志信息\n          CalendarPickerDialog.show({\n            selected: this.selectedDate, // 设置初始选中的日期\n            acceptButtonStyle: { \n              type: ButtonType.Normal, \n              style: ButtonStyleMode.NORMAL, \n              role: ButtonRole.NORMAL, \n              fontColor: Color.Red, // 设置接受按钮的字体颜色为红色\n              fontSize: '26fp', // 设置接受按钮的字体大小\n              fontWeight: FontWeight.Bolder, // 设置接受按钮的字体加粗\n              fontStyle: FontStyle.Normal, // 设置接受按钮的字体样式为正常\n              fontFamily: 'sans-serif', // 设置接受按钮的字体家族\n              backgroundColor: '#80834511', // 设置接受按钮的背景颜色\n              borderRadius: 20 // 设置接受按钮的边框圆角\n            },\n            cancelButtonStyle: { \n              type: ButtonType.Normal, \n              style: ButtonStyleMode.NORMAL, \n              role: ButtonRole.NORMAL, \n              fontColor: Color.Blue, // 设置取消按钮的字体颜色为蓝色\n              fontSize: '16fp', // 设置取消按钮的字体大小\n              fontWeight: FontWeight.Normal, // 设置取消按钮的字体为正常\n              fontStyle: FontStyle.Italic, // 设置取消按钮的字体样式为斜体\n              fontFamily: 'sans-serif', // 设置取消按钮的字体家族\n              backgroundColor: '#50182431', // 设置取消按钮的背景颜色\n              borderRadius: 10 // 设置取消按钮的边框圆角\n            },\n            onAccept: (value) => {\n              console.info(\"calendar onAccept:\" + JSON.stringify(value)) // 输出接受事件的日志信息\n            },\n            onCancel: () => {\n              console.info(\"calendar onCancel\") // 输出取消事件的日志信息\n            },\n            onChange: (value) => {\n              console.info(\"calendar onChange:\" + JSON.stringify(value)) // 输出日期变化事件的日志信息\n            },\n            onDidAppear: () => {\n              console.info(\"calendar onDidAppear\") // 输出对话框显示后的日志信息\n            },\n            onDidDisappear: () => {\n              console.info(\"calendar onDidDisappear\") // 输出对话框消失后的日志信息\n            },\n            onWillAppear: () => {\n              console.info(\"calendar onWillAppear\") // 输出对话框即将显示的日志信息\n            },\n            onWillDisappear: () => {\n              console.info(\"calendar onWillDisappear\") // 输出对话框即将消失的日志信息\n            }\n          })\n        })\n    }.width('100%') // 设置列的宽度为100%\n  }\n}"
        }
    ],
    "DatePickerDialog": [
        {
            "description": "实现一个日期选择对话框示例，用户点击按钮后弹出日期选择对话框，可以选择日期和时间，并支持自定义样式和回调函数。",
            "code": "@Entry\n@Component\nstruct DatePickerDialogExample {\n  // 初始化选中的日期\n  selectedDate: Date = new Date(\"2010-1-1\")\n\n  build() {\n    Column() {\n      // 创建一个按钮，点击时触发日期选择对话框\n      Button(\"DatePickerDialog\")\n        .margin(20) // 设置按钮的边距\n        .onClick(() => {\n          // 显示日期选择对话框\n          DatePickerDialog.show({\n            start: new Date(\"2000-1-1\"), // 设置日期选择范围的开始日期\n            end: new Date(\"2100-12-31\"), // 设置日期选择范围的结束日期\n            selected: this.selectedDate, // 设置初始选中的日期\n            showTime: true, // 显示时间选择\n            useMilitaryTime: false, // 不使用24小时制\n            // 设置对话框中未选中日期的文本样式\n            disappearTextStyle: { color: Color.Pink, font: { size: '22fp', weight: FontWeight.Bold } },\n            // 设置对话框中选中日期的文本样式\n            textStyle: { color: '#ff00ff00', font: { size: '18fp', weight: FontWeight.Normal } },\n            // 设置对话框中选中日期的文本样式\n            selectedTextStyle: { color: '#ff182431', font: { size: '14fp', weight: FontWeight.Regular } },\n            // 设置确认按钮的样式\n            acceptButtonStyle: { type: ButtonType.Normal, style: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL, fontColor: Color.Red,\n              fontSize: '26fp', fontWeight: FontWeight.Bolder, fontStyle: FontStyle.Normal, fontFamily: 'sans-serif', backgroundColor: '#80834511',\n              borderRadius: 20 },\n            // 设置取消按钮的样式\n            cancelButtonStyle: { type: ButtonType.Normal, style: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL, fontColor: Color.Blue,\n              fontSize: '16fp', fontWeight: FontWeight.Normal, fontStyle: FontStyle.Italic, fontFamily: 'sans-serif', backgroundColor: '#50182431',\n              borderRadius: 10 },\n            // 确认按钮点击时的回调函数\n            onDateAccept: (value: Date) => {\n              this.selectedDate = value // 更新选中的日期\n              console.info(\"DatePickerDialog:onDateAccept()\" + value.toString()) // 输出确认的日期\n            },\n            // 取消按钮点击时的回调函数\n            onCancel: () => {\n              console.info(\"DatePickerDialog:onCancel()\") // 输出取消操作\n            },\n            // 日期变化时的回调函数\n            onDateChange: (value: Date) => {\n              console.info(\"DatePickerDialog:onDateChange()\" + value.toString()) // 输出变化的日期\n            },\n            // 对话框显示时的回调函数\n            onDidAppear: () => {\n              console.info(\"DatePickerDialog:onDidAppear()\") // 输出对话框显示\n            },\n            // 对话框消失时的回调函数\n            onDidDisappear: () => {\n              console.info(\"DatePickerDialog:onDidDisappear()\") // 输出对话框消失\n            },\n            // 对话框即将显示时的回调函数\n            onWillAppear: () => {\n              console.info(\"DatePickerDialog:onWillAppear()\") // 输出对话框即将显示\n            },\n            // 对话框即将消失时的回调函数\n            onWillDisappear: () => {\n              console.info(\"DatePickerDialog:onWillDisappear()\") // 输出对话框即将消失\n            }\n          })\n        })\n    }.width('100%') // 设置列的宽度为100%\n  }\n}"
        },
        {
            "description": "实现两个按钮，分别用于触发标准日期选择对话框和农历日期选择对话框。用户可以通过点击按钮打开相应的日期选择对话框，并在对话框中选择日期。选择日期后，对话框会触发相应的回调函数，更新选中的日期并输出日志信息。",
            "code": "@Entry\n@Component\nstruct DatePickerDialogExample {\n  // 初始化选中的日期为2010年1月1日\n  selectedDate: Date = new Date(\"2010-1-1\")\n\n  build() {\n    Column() {\n      // 按钮用于触发标准日期选择对话框\n      Button(\"DatePickerDialog\")\n        .margin(20)\n        .onClick(() => {\n          DatePickerDialog.show({\n            // 设置日期选择范围，从2000年1月1日到2100年12月31日\n            start: new Date(\"2000-1-1\"),\n            end: new Date(\"2100-12-31\"),\n            // 初始选中的日期为2010年1月1日\n            selected: this.selectedDate,\n            // 显示时间选择\n            showTime: True,\n            // 不使用24小时制\n            useMilitaryTime: False,\n            // 对话框消失时的文本样式，颜色为粉色，字体大小为22fp，加粗\n            disappearTextStyle: { color: Color.Pink, font: { size: '22fp', weight: FontWeight.Bold } },\n            // 普通文本样式，颜色为绿色，字体大小为18fp，正常\n            textStyle: { color: '#ff00ff00', font: { size: '18fp', weight: FontWeight.Normal } },\n            // 选中日期的文本样式，颜色为蓝色，字体大小为14fp，常规\n            selectedTextStyle: { color: '#ff182431', font: { size: '14fp', weight: FontWeight.Regular } },\n            // 用户确认选择日期时的回调，更新选中的日期并输出日志\n            onDateAccept: (value: Date) => {\n              this.selectedDate = value\n              console.info(\"DatePickerDialog:onDateAccept()\" + value.toString())\n            },\n            // 用户取消选择时的回调，输出日志\n            onCancel: () => {\n              console.info(\"DatePickerDialog:onCancel()\")\n            },\n            // 日期变化时的回调，输出日志\n            onDateChange: (value: Date) => {\n              console.info(\"DatePickerDialog:onDateChange()\" + value.toString())\n            },\n            // 对话框显示时的回调，输出日志\n            onDidAppear: () => {\n              console.info(\"DatePickerDialog:onDidAppear()\")\n            },\n            // 对话框消失时的回调，输出日志\n            onDidDisappear: () => {\n              console.info(\"DatePickerDialog:onDidDisappear()\")\n            },\n            // 对话框即将显示时的回调，输出日志\n            onWillAppear: () => {\n              console.info(\"DatePickerDialog:onWillAppear()\")\n            },\n            // 对话框即将消失时的回调，输出日志\n            onWillDisappear: () => {\n              console.info(\"DatePickerDialog:onWillDisappear()\")\n            }\n          })\n        })\n\n      // 按钮用于触发农历日期选择对话框\n      Button(\"Lunar DatePickerDialog\")\n        .margin(20)\n        .onClick(() => {\n          DatePickerDialog.show({\n            // 设置日期选择范围，从2000年1月1日到2100年12月31日\n            start: new Date(\"2000-1-1\"),\n            end: new Date(\"2100-12-31\"),\n            // 初始选中的日期为2010年1月1日\n            selected: this.selectedDate,\n            // 使用农历日期选择\n            lunar: True,\n            // 对话框消失时的文本样式，颜色为粉色，字体大小为22fp，加粗\n            disappearTextStyle: { color: Color.Pink, font: { size: '22fp', weight: FontWeight.Bold } },\n            // 普通文本样式，颜色为绿色，字体大小为18fp，正常\n            textStyle: { color: '#ff00ff00', font: { size: '18fp', weight: FontWeight.Normal } },\n            // 选中日期的文本样式，颜色为蓝色，字体大小为14fp，常规\n            selectedTextStyle: { color: '#ff182431', font: { size: '14fp', weight: FontWeight.Regular } },\n            // 用户确认选择日期时的回调，更新选中的日期并输出日志\n            onDateAccept: (value: Date) => {\n              this.selectedDate = value\n              console.info(\"DatePickerDialog:onDateAccept()\" + value.toString())\n            },\n            // 用户取消选择时的回调，输出日志\n            onCancel: () => {\n              console.info(\"DatePickerDialog:onCancel()\")\n            },\n            // 日期变化时的回调，输出日志\n            onDateChange: (value: Date) => {\n              console.info(\"DatePickerDialog:onDateChange()\" + value.toString())\n            },\n            // 对话框显示时的回调，输出日志\n            onDidAppear: () => {\n              console.info(\"DatePickerDialog:onDidAppear()\")\n            },\n            // 对话框消失时的回调，输出日志\n            onDidDisappear: () => {\n              console.info(\"DatePickerDialog:onDidDisappear()\")\n            },\n            // 对话框即将显示时的回调，输出日志\n            onWillAppear: () => {\n              console.info(\"DatePickerDialog:onWillAppear()\")\n            },\n            // 对话框即将消失时的回调，输出日志\n            onWillDisappear: () => {\n              console.info(\"DatePickerDialog:onWillDisappear()\")\n            }\n          })\n        })\n    }.width('100%')\n  }\n}"
        }
    ],
    "TimePickerDialog": [
        {
            "description": "实现一个时间选择对话框示例，用户点击按钮后弹出时间选择对话框，支持24小时制，并自定义对话框的文本样式、按钮样式以及各种回调事件。",
            "code": "@Entry\n@Component\nstruct TimePickerDialogExample {\n  // 初始选择时间为2020年12月25日 08:30:00\n  private selectTime: Date = new Date('2020-12-25T08:30:00')\n\n  build() {\n    Column() {\n      // 创建一个按钮，点击后弹出时间选择对话框\n      Button(\"TimePickerDialog 24小时制\")\n        .margin(20) // 设置按钮的外边距\n        .onClick(() => {\n          // 显示时间选择对话框\n          TimePickerDialog.show({\n            selected: this.selectTime, // 初始选择的时间\n            useMilitaryTime: True, // 使用24小时制\n            disappearTextStyle: { color: Color.Red, font: { size: 15, weight: FontWeight.Lighter } }, // 对话框消失时的文本样式\n            textStyle: { color: Color.Black, font: { size: 20, weight: FontWeight.Normal } }, // 普通文本样式\n            selectedTextStyle: { color: Color.Blue, font: { size: 30, weight: FontWeight.Bolder } }, // 选中时间的文本样式\n            acceptButtonStyle: { \n              type: ButtonType.Normal, \n              style: ButtonStyleMode.NORMAL, \n              role: ButtonRole.NORMAL, \n              fontColor: Color.Red, \n              fontSize: '26fp', \n              fontWeight: FontWeight.Bolder, \n              fontStyle: FontStyle.Normal, \n              fontFamily: 'sans-serif', \n              backgroundColor: '#80834511', \n              borderRadius: 20 \n            }, // 确认按钮的样式\n            cancelButtonStyle: { \n              type: ButtonType.Normal, \n              style: ButtonStyleMode.NORMAL, \n              role: ButtonRole.NORMAL, \n              fontColor: Color.Blue, \n              fontSize: '16fp', \n              fontWeight: FontWeight.Normal, \n              fontStyle: FontStyle.Italic, \n              fontFamily: 'sans-serif', \n              backgroundColor: '#50182431', \n              borderRadius: 10 \n            }, // 取消按钮的样式\n            onAccept: (value: TimePickerResult) => {\n              // 用户确认选择的时间\n              if (value.hour != undefined && value.minute != undefined) {\n                this.selectTime.setHours(value.hour, value.minute)\n                console.info(\"TimePickerDialog:onAccept()\" + JSON.stringify(value))\n              }\n            },\n            onCancel: () => {\n              // 用户取消选择\n              console.info(\"TimePickerDialog:onCancel()\")\n            },\n            onChange: (value: TimePickerResult) => {\n              // 用户改变选择的时间\n              console.info(\"TimePickerDialog:onChange()\" + JSON.stringify(value))\n            },\n            onDidAppear: () => {\n              // 对话框已经显示\n              console.info(\"TimePickerDialog:onDidAppear()\")\n            },\n            onDidDisappear: () => {\n              // 对话框已经消失\n              console.info(\"TimePickerDialog:onDidDisappear()\")\n            },\n            onWillAppear: () => {\n              // 对话框即将显示\n              console.info(\"TimePickerDialog:onWillAppear()\")\n            },\n            onWillDisappear: () => {\n              // 对话框即将消失\n              console.info(\"TimePickerDialog:onWillDisappear()\")\n            }\n          })\n        })\n    }.width('100%') // 设置列的宽度为100%\n  }\n}"
        },
        {
            "description": "实现一个时间选择对话框示例，包含两个按钮，分别触发12小时制和24小时制的时间选择对话框。对话框支持自定义文本样式，并提供多种回调函数用于处理用户交互事件。",
            "code": "@Entry\n@Component\nstruct TimePickerDialogExample {\n  // 初始选择时间为2020年12月25日 08:30:00\n  private selectTime: Date = new Date('2020-12-25T08:30:00')\n\n  build() {\n    Column() {\n      // 按钮触发12小时制时间选择对话框\n      Button(\"TimePickerDialog 12小时制\")\n        .margin(20)\n        .onClick(() => {\n          TimePickerDialog.show({\n            selected: this.selectTime, // 初始选择时间\n            disappearTextStyle: { color: Color.Red, font: { size: 15, weight: FontWeight.Lighter } }, // 对话框消失时的文本样式\n            textStyle: { color: Color.Black, font: { size: 20, weight: FontWeight.Normal } }, // 普通文本样式\n            selectedTextStyle: { color: Color.Blue, font: { size: 30, weight: FontWeight.Bolder } }, // 选中时间的文本样式\n            onAccept: (value: TimePickerResult) => {\n              // 设置selectTime为按下确定按钮时的时间，这样当弹窗再次弹出时显示选中的为上一次确定的时间\n              if (value.hour != undefined && value.minute != undefined) {\n                this.selectTime.setHours(value.hour, value.minute)\n                console.info(\"TimePickerDialog:onAccept()\" + JSON.stringify(value))\n              }\n            },\n            onCancel: () => {\n              console.info(\"TimePickerDialog:onCancel()\")\n            },\n            onChange: (value: TimePickerResult) => {\n              console.info(\"TimePickerDialog:onChange()\" + JSON.stringify(value))\n            },\n            onDidAppear: () => {\n              console.info(\"TimePickerDialog:onDidAppear()\")\n            },\n            onDidDisappear: () => {\n              console.info(\"TimePickerDialog:onDidDisappear()\")\n            },\n            onWillAppear: () => {\n              console.info(\"TimePickerDialog:onWillAppear()\")\n            },\n            onWillDisappear: () => {\n              console.info(\"TimePickerDialog:onWillDisappear()\")\n            }\n          })\n        })\n\n      // 按钮触发24小时制时间选择对话框\n      Button(\"TimePickerDialog 24小时制\")\n        .margin(20)\n        .onClick(() => {\n          TimePickerDialog.show({\n            selected: this.selectTime, // 初始选择时间\n            useMilitaryTime: True, // 使用24小时制\n            disappearTextStyle: { color: Color.Red, font: { size: 15, weight: FontWeight.Lighter } }, // 对话框消失时的文本样式\n            textStyle: { color: Color.Black, font: { size: 20, weight: FontWeight.Normal } }, // 普通文本样式\n            selectedTextStyle: { color: Color.Blue, font: { size: 30, weight: FontWeight.Bolder } }, // 选中时间的文本样式\n            onAccept: (value: TimePickerResult) => {\n              if (value.hour != undefined && value.minute != undefined) {\n                this.selectTime.setHours(value.hour, value.minute)\n                console.info(\"TimePickerDialog:onAccept()\" + JSON.stringify(value))\n              }\n            },\n            onCancel: () => {\n              console.info(\"TimePickerDialog:onCancel()\")\n            },\n            onChange: (value: TimePickerResult) => {\n              console.info(\"TimePickerDialog:onChange()\" + JSON.stringify(value))\n            },\n            onDidAppear: () => {\n              console.info(\"TimePickerDialog:onDidAppear()\")\n            },\n            onDidDisappear: () => {\n              console.info(\"TimePickerDialog:onDidDisappear()\")\n            },\n            onWillAppear: () => {\n              console.info(\"TimePickerDialog:onWillAppear()\")\n            },\n            onWillDisappear: () => {\n              console.info(\"TimePickerDialog:onWillDisappear()\")\n            }\n          })\n        })\n    }.width('100%')\n  }\n}"
        }
    ],
    "TextPickerDialog": [
        {
            "description": "实现一个文本选择对话框示例，用户点击按钮后弹出对话框，对话框中显示一个文本选项列表。用户可以选择其中一个选项，点击确定后，选中的文本会显示在按钮上。对话框提供了多种回调函数，用于处理对话框的生命周期事件。",
            "code": "@Entry\n@Component\nstruct TextPickerDialogExample {\n  // 定义选中的索引，初始值为0\n  private select: number | number[] = 0\n  // 定义文本选项数组\n  private fruits: string[] = ['apple1', 'orange2', 'peach3', 'grape4', 'banana5']\n  // 定义状态变量，用于显示选中的文本\n  @State v: string = ''\n\n  build() {\n    Row() {\n      Column() {\n        // 创建一个按钮，按钮文本显示当前选中的文本\n        Button(\"TextPickerDialog:\" + this.v)\n          .margin(20)\n          .onClick(() => {\n            // 显示文本选择对话框\n            TextPickerDialog.show({\n              // 设置对话框的选项范围\n              range: this.fruits,\n              // 设置初始选中的索引\n              selected: this.select,\n              // 设置对话框消失时的文本样式\n              disappearTextStyle: {color: Color.Red, font: {size: 15, weight: FontWeight.Lighter}},\n              // 设置对话框中文本的默认样式\n              textStyle: {color: Color.Black, font: {size: 20, weight: FontWeight.Normal}},\n              // 设置选中项的文本样式\n              selectedTextStyle: {color: Color.Blue, font: {size: 30, weight: FontWeight.Bolder}},\n              // 点击确定按钮时的回调函数\n              onAccept: (value: TextPickerResult) => {\n                // 设置select为按下确定按钮时候的选中项index\n                this.select = value.index\n                console.log(this.select + '')\n                // 点击确定后，被选到的文本数据展示到页面\n                this.v = value.value as string\n                console.info(\"TextPickerDialog:onAccept()\" + JSON.stringify(value))\n              },\n              // 点击取消按钮时的回调函数\n              onCancel: () => {\n                console.info(\"TextPickerDialog:onCancel()\")\n              },\n              // 选项改变时的回调函数\n              onChange: (value: TextPickerResult) => {\n                console.info(\"TextPickerDialog:onChange()\" + JSON.stringify(value))\n              },\n              // 对话框出现时的回调函数\n              onDidAppear: () => {\n                console.info(\"TextPickerDialog:onDidAppear()\")\n              },\n              // 对话框消失时的回调函数\n              onDidDisappear: () => {\n                console.info(\"TextPickerDialog:onDidDisappear()\")\n              },\n              // 对话框即将出现时的回调函数\n              onWillAppear: () => {\n                console.info(\"TextPickerDialog:onWillAppear()\")\n              },\n              // 对话框即将消失时的回调函数\n              onWillDisappear: () => {\n                console.info(\"TextPickerDialog:onWillDisappear()\")\n              }\n            })\n          })\n      }.width('100%')\n    }.height('100%')\n  }\n}"
        },
        {
            "description": "实现一个文本选择对话框示例，用户可以通过点击按钮打开对话框，选择一个文本项，并在页面上显示选中的文本。对话框支持自定义样式和回调函数，用于处理用户的选择操作。",
            "code": "@Entry\n@Component\nstruct TextPickerDialogExample {\n  // 定义选择的索引或索引数组，初始值为0\n  private select: number | number[] = 0\n  // 定义文本选择列表的内容\n  private fruits: string[] = ['apple1', 'orange2', 'peach3', 'grape4', 'banana5']\n  // 定义状态变量v，用于存储选中的文本\n  @State v: string = ''\n\n  build() {\n    Row() {\n      Column() {\n        // 创建一个按钮，按钮文本显示当前选中的文本\n        Button(\"TextPickerDialog:\" + this.v)\n          .margin(20)\n          .onClick(() => {\n            // 显示文本选择对话框\n            TextPickerDialog.show({\n              // 设置文本选择列表的范围\n              range: this.fruits,\n              // 设置初始选中的项目\n              selected: this.select,\n              // 设置对话框消失时的文本样式\n              disappearTextStyle: {color: Color.Red, font: {size: 15, weight: FontWeight.Lighter}},\n              // 设置对话框中文本的默认样式\n              textStyle: {color: Color.Black, font: {size: 20, weight: FontWeight.Normal}},\n              // 设置选中项目的文本样式\n              selectedTextStyle: {color: Color.Blue, font: {size: 30, weight: FontWeight.Bolder}},\n              // 设置确定按钮的样式\n              acceptButtonStyle: { \n                type: ButtonType.Normal, \n                style: ButtonStyleMode.NORMAL, \n                role: ButtonRole.NORMAL, \n                fontColor: Color.Red,\n                fontSize: '26fp', \n                fontWeight: FontWeight.Bolder, \n                fontStyle: FontStyle.Normal, \n                fontFamily: 'sans-serif', \n                backgroundColor: '#80834511',\n                borderRadius: 20 \n              },\n              // 设置取消按钮的样式\n              cancelButtonStyle: { \n                type: ButtonType.Normal, \n                style: ButtonStyleMode.NORMAL, \n                role: ButtonRole.NORMAL, \n                fontColor: Color.Blue,\n                fontSize: '16fp', \n                fontWeight: FontWeight.Normal, \n                fontStyle: FontStyle.Italic, \n                fontFamily: 'sans-serif', \n                backgroundColor: '#50182431',\n                borderRadius: 10 \n              },\n              // 点击确定按钮时的回调函数\n              onAccept: (value: TextPickerResult) => {\n                // 设置select为按下确定按钮时候的选中项index\n                this.select = value.index\n                console.log(this.select + '')\n                // 点击确定后，被选到的文本数据展示到页面\n                this.v = value.value as string\n                console.info(\"TextPickerDialog:onAccept()\" + JSON.stringify(value))\n              },\n              // 点击取消按钮时的回调函数\n              onCancel: () => {\n                console.info(\"TextPickerDialog:onCancel()\")\n              },\n              // 选择项目改变时的回调函数\n              onChange: (value: TextPickerResult) => {\n                console.info(\"TextPickerDialog:onChange()\" + JSON.stringify(value))\n              },\n              // 对话框出现时的回调函数\n              onDidAppear: () => {\n                console.info(\"TextPickerDialog:onDidAppear()\")\n              },\n              // 对话框消失时的回调函数\n              onDidDisappear: () => {\n                console.info(\"TextPickerDialog:onDidDisappear()\")\n              },\n              // 对话框即将出现时的回调函数\n              onWillAppear: () => {\n                console.info(\"TextPickerDialog:onWillAppear()\")\n              },\n              // 对话框即将消失时的回调函数\n              onWillDisappear: () => {\n                console.info(\"TextPickerDialog:onWillDisappear()\")\n              }\n            })\n          })\n      }.width('100%')\n    }.height('100%')\n  }\n}"
        }
    ],
    "Video": [
        {
            "description": "实现一个视频播放组件，支持视频源切换、预览图切换、控制条显示/隐藏、播放速度调整、播放控制（开始、暂停、停止、重置、跳转）等功能。",
            "code": "@Entry\n@Component\nstruct VideoCreateComponent {\n  @State videoSrc: Resource = $rawfile('video1.mp4') // 视频源文件，初始为video1.mp4\n  @State previewUri: Resource = $r('app.media.poster1') // 视频预览图，初始为poster1\n  @State curRate: PlaybackSpeed = PlaybackSpeed.Speed_Forward_1_00_X // 当前播放速度，初始为1倍速\n  @State isAutoPlay: boolean = False // 是否自动播放，初始为不自动播放\n  @State showControls: boolean = True // 是否显示控制条，初始为显示\n  controller: VideoController = new VideoController() // 视频控制器，用于控制视频播放\n\n  build() {\n    Column() {\n      Video({\n        src: this.videoSrc, // 视频源\n        previewUri: this.previewUri, // 预览图\n        currentProgressRate: this.curRate, // 播放速度\n        controller: this.controller // 视频控制器\n      })\n        .width('100%')\n        .height(600)\n        .autoPlay(this.isAutoPlay) // 自动播放设置\n        .controls(this.showControls) // 控制条显示设置\n        .onStart(() => {\n          console.info('onStart') // 视频开始播放事件\n        })\n        .onPause(() => {\n          console.info('onPause') // 视频暂停事件\n        })\n        .onFinish(() => {\n          console.info('onFinish') // 视频播放完成事件\n        })\n        .onError(() => {\n          console.info('onError') // 视频播放错误事件\n        })\n        .onStop(() => {\n          console.info('onStop') // 视频停止事件\n        })\n        .onPrepared((e?: DurationObject) => {\n          if (e != undefined) {\n            console.info('onPrepared is ' + e.duration) // 视频准备完成事件，输出视频时长\n          }\n        })\n        .onSeeking((e?: TimeObject) => {\n          if (e != undefined) {\n            console.info('onSeeking is ' + e.time) // 视频跳转中事件，输出跳转时间\n          }\n        })\n        .onSeeked((e?: TimeObject) => {\n          if (e != undefined) {\n            console.info('onSeeked is ' + e.time) // 视频跳转完成事件，输出跳转时间\n          }\n        })\n        .onUpdate((e?: TimeObject) => {\n          if (e != undefined) {\n            console.info('onUpdate is ' + e.time) // 视频更新事件，输出当前播放时间\n          }\n        })\n\n      Row() {\n        Button('src').onClick(() => {\n          this.videoSrc = $rawfile('video2.mp4') // 切换视频源为video2.mp4\n        }).margin(5)\n        Button('previewUri').onClick(() => {\n          this.previewUri = $r('app.media.poster2') // 切换预览图为poster2\n        }).margin(5)\n        Button('controls').onClick(() => {\n          this.showControls = !this.showControls // 切换控制条显示状态\n        }).margin(5)\n      }\n\n      Row() {\n        Button('start').onClick(() => {\n          this.controller.start() // 开始播放\n        }).margin(2)\n        Button('pause').onClick(() => {\n          this.controller.pause() // 暂停播放\n        }).margin(2)\n        Button('stop').onClick(() => {\n          this.controller.stop() // 停止播放\n        }).margin(2)\n        Button('reset').onClick(() => {\n          this.controller.reset() // 重置播放\n        }).margin(2)\n        Button('setTime').onClick(() => {\n          this.controller.setCurrentTime(10, SeekMode.Accurate) // 设置播放时间为10秒\n        }).margin(2)\n      }\n\n      Row() {\n        Button('rate 0.75').onClick(() => {\n          this.curRate = PlaybackSpeed.Speed_Forward_0_75_X // 设置播放速度为0.75倍\n        }).margin(5)\n        Button('rate 1').onClick(() => {\n          this.curRate = PlaybackSpeed.Speed_Forward_1_00_X // 设置播放速度为1倍\n        }).margin(5)\n        Button('rate 2').onClick(() => {\n          this.curRate = PlaybackSpeed.Speed_Forward_2_00_X // 设置播放速度为2倍\n        }).margin(5)\n      }\n    }\n  }\n}\n\ninterface DurationObject {\n  duration: number; // 视频时长\n}\n\ninterface TimeObject {\n  time: number; // 时间点\n}"
        }
    ],
    "LocationButton": [
        {
            "description": "实现一个包含多个LocationButton组件的页面，每个按钮根据传入的参数显示不同的图标、文字和背景样式。点击按钮时，会在控制台输出位置信息。",
            "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column({space:10}) {\n        // 默认参数下，图标、文字、背景都存在\n        LocationButton().onClick((event: ClickEvent, result: LocationButtonOnClickResult)=>{\n          console.info(\"result \" + result) // 点击按钮时，在控制台输出位置信息\n        })\n        \n        // 传入参数即表示元素存在，不传入的参数表示元素不存在，如果不传入buttonType，会默认添加ButtonType.Capsule配置，显示图标+背景。\n        LocationButton({icon:LocationIconStyle.LINES})\n        \n        // 只显示图标+背景，如果设置背景色高八位的α值低于0x1A，则会被系统强制调整为0xFF\n        LocationButton({icon:LocationIconStyle.LINES, buttonType:ButtonType.Capsule})\n          .backgroundColor(0x10007dff) // 设置背景色，系统会强制调整透明度\n        \n        // 图标、文字、背景都存在，如果设置背景色高八位的α值低于0x1A，则会被系统强制调整为0xFF\n        LocationButton({icon:LocationIconStyle.LINES, text:LocationDescription.CURRENT_LOCATION, buttonType:ButtonType.Capsule})\n      }.width('100%')\n    }.height('100%')\n  }\n}"
        }
    ],
    "PasteButton": [
        {
            "description": "实现一个包含多个PasteButton组件的界面，每个PasteButton组件根据传入的参数显示不同的样式和功能。点击按钮时，可以输出粘贴板内容到控制台。",
            "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column({space:10}) {\n        // 默认参数下，图标、文字、背景都存在\n        PasteButton().onClick((event: ClickEvent, result: PasteButtonOnClickResult)=>{\n          console.info(\"result \" + result) // 点击按钮时，输出粘贴板内容到控制台\n        })\n        \n        // 传入参数即表示元素存在，不传入的参数表示元素不存在，如果不传入buttonType，会默认添加ButtonType.Capsule配置，显示图标+背景。\n        PasteButton({icon:PasteIconStyle.LINES})\n        \n        // 只显示图标+背景，如果设置背景色高八位的α值低于0x1A，则会被系统强制调整为0xFF\n        PasteButton({icon:PasteIconStyle.LINES, buttonType:ButtonType.Capsule})\n          .backgroundColor(0x10007dff) // 设置背景色，但α值低于0x1A会被强制调整为0xFF\n        \n        // 图标、文字、背景都存在，如果设置背景色高八位的α值低于0x1A，则会被系统强制调整为0xFF\n        PasteButton({icon:PasteIconStyle.LINES, text:PasteDescription.PASTE, buttonType:ButtonType.Capsule})\n      }.width('100%')\n    }.height('100%')\n  }\n}"
        }
    ],
    "SaveButton": [
        {
            "description": "实现一个包含保存按钮的界面，按钮点击后会创建一个图片文件并写入内容。界面中展示了不同样式的保存按钮，包括图标、文字和背景的不同组合。",
            "code": "import { photoAccessHelper } from '@kit.MediaLibraryKit'; // 导入媒体库访问助手模块\nimport { fileIo } from '@kit.CoreFileKit'; // 导入文件IO模块\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column({space:10}) {\n        // 默认参数下，图标、文字、背景都存在\n        SaveButton().onClick(async (event:ClickEvent, result:SaveButtonOnClickResult) => {\n          if (result == SaveButtonOnClickResult.SUCCESS) {\n            try {\n              const context = getContext(this); // 获取当前组件的上下文\n              let helper = photoAccessHelper.getPhotoAccessHelper(context); // 获取照片访问助手实例\n              // onClick触发后10秒内通过createAsset接口创建图片文件，10秒后createAsset权限收回。\n              let uri = await helper.createAsset(photoAccessHelper.PhotoType.IMAGE, 'png'); // 创建一个PNG格式的图片文件，并返回其URI\n              // 使用uri打开文件，可以持续写入内容，写入过程不受时间限制\n              let file = await fileIo.open(uri, fileIo.OpenMode.READ_WRITE | fileIo.OpenMode.CREATE); // 以读写模式打开文件，如果不存在则创建\n              // 写入文件\n              await fileIo.write(file.fd, \"context\"); // 向文件中写入字符串\"context\"\n              // 关闭文件\n              await fileIo.close(file.fd); // 关闭文件\n            } catch (error) {\n              console.error(\"error is \" + JSON.stringify(error)); // 捕获并打印错误信息\n            }\n          }\n        })\n        // 传入参数即表示元素存在，不传入的参数表示元素不存在，如果不传入buttonType，会默认添加ButtonType.Capsule配置，显示图标+背景。\n        SaveButton({icon:SaveIconStyle.FULL_FILLED}) // 创建一个只包含图标的保存按钮\n        // 只显示图标+背景，如果设置背景色高八位的α值低于0x1A，则会被系统强制调整为0xFF\n        SaveButton({icon:SaveIconStyle.FULL_FILLED, buttonType:ButtonType.Capsule})\n          .backgroundColor(0x10007dff) // 设置按钮背景色，高八位的α值低于0x1A，会被系统强制调整为0xFF\n        // 图标、文字、背景都存在，如果设置背景色高八位的α值低于0x1A，则会被系统强制调整为0xFF\n        SaveButton({icon:SaveIconStyle.FULL_FILLED, text:SaveDescription.DOWNLOAD, buttonType:ButtonType.Capsule})\n      }.width('100%') // 设置列的宽度为100%\n    }.height('100%') // 设置行的宽度为100%\n  }\n}"
        }
    ],
    "ChipGroup": [
        {
            "description": "实现一个ChipGroup组件，展示多个Chip（操作块），每个Chip可以包含前缀图标、标签文本和后缀图标。ChipGroup支持单选模式，并且可以设置Chip的大小、背景色、字体颜色等样式。初始状态下，部分Chip被选中，点击Chip时会输出激活的Chip索引。",
            "code": "import { ChipSize, ChipGroup } from '@kit.ArkUI' // 导入ChipGroup组件及相关样式枚举\n\n@Entry\n@Preview\n@Component\nstruct Index {\n  @State selected_index: Array<number> = [0, 1, 2, 3, 4, 5, 6] // 初始选中Chip的索引数组\n\n  build() {\n    Column() {\n      ChipGroup({\n        items: [\n          {\n            prefixIcon: { src: $r('app.media.icon') }, // 设置Chip的前缀图标\n            label: { text: \"操作块1\" }, // 设置Chip的标签文本\n            suffixIcon: { src: $r('sys.media.ohos_ic_public_cut') }, // 设置Chip的后缀图标\n            allowClose: False // 禁止关闭Chip\n          },\n          {\n            prefixIcon: { src: $r('sys.media.ohos_ic_public_copy') },\n            label: { text: \"操作块2\" },\n            allowClose: True // 允许关闭Chip\n          },\n          {\n            prefixIcon: { src: $r('sys.media.ohos_ic_public_clock') },\n            label: { text: \"操作块3\" },\n            allowClose: True\n          },\n          {\n            prefixIcon: { src: $r('sys.media.ohos_ic_public_cast_stream') },\n            label: { text: \"操作块4\" },\n            allowClose: True\n          },\n          {\n            prefixIcon: { src: $r('sys.media.ohos_ic_public_cast_mirror') },\n            label: { text: \"操作块5\" },\n            allowClose: True\n          },\n          {\n            prefixIcon: { src: $r('sys.media.ohos_ic_public_cast_stream') },\n            label: { text: \"操作块6\" },\n            allowClose: True\n          },\n        ],\n        itemStyle: {\n          size: ChipSize.SMALL, // 设置Chip的大小为小号\n          backgroundColor: $r('sys.color.ohos_id_color_button_normal'), // 设置Chip的背景色\n          fontColor: $r('sys.color.ohos_id_color_text_primary'), // 设置Chip的字体颜色\n          selectedBackgroundColor: $r('sys.color.ohos_id_color_emphasize'), // 设置选中Chip的背景色\n          selectedFontColor: $r('sys.color.ohos_id_color_text_primary_contrary'), // 设置选中Chip的字体颜色\n        },\n        selectedIndexes: this.selected_index, // 设置初始选中的Chip索引\n        multiple: False, // 设置为单选模式\n        chipGroupSpace: { itemSpace: 8, endSpace: 0 }, // 设置Chip之间的间距\n        chipGroupPadding: { top: 10, bottom: 10 }, // 设置ChipGroup的内边距\n        onChange: (activatedChipsIndex:Array<number>) => {\n          console.log('chips on clicked, activated index ' + activatedChipsIndex) // 点击Chip时输出激活的Chip索引\n        },\n      })\n    }\n  }\n}"
        },
        {
            "description": "实现一个包含多个操作块（Chip）的组件，支持多选功能，并且每个操作块可以有不同的前缀图标和后缀图标。操作块组的后缀图标组可以控制所有操作块的选中状态。",
            "code": "import { ChipSize, ChipGroup, IconGroupSuffix, SymbolGlyphModifier } from '@kit.ArkUI';\n\n@Entry\n@Preview\n@Component\nstruct Index {\n  @State selected_index: Array<number> = [0, 1, 2, 3, 4, 5, 6]; // 初始选中索引数组\n  @State selected_state: boolean = true; // 初始选中状态\n  @State prefixModifierNormal: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_star')); // 前缀图标正常状态\n  @State prefixModifierActivated: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_star')).fontColor([Color.Red]); // 前缀图标激活状态\n  @State suffixModifierNormal: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_wifi')); // 后缀图标正常状态\n  @State suffixModifierActivated: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_wifi')).fontColor([Color.Red]); // 后缀图标激活状态\n\n  @LocalBuilder\n  ChipGroupSuffix(): void {\n    IconGroupSuffix({\n      items: [\n        new SymbolGlyphModifier($r('sys.symbol.magnifyingglass'))\n          .onClick(() => {\n            if (this.selected_state == False) {\n              this.selected_index = [0, 1, 2, 3, 4, 5, 6]; // 切换选中状态，选中所有操作块\n              this.selected_state = true;\n            } else {\n              this.selected_index = []; // 切换选中状态，取消所有操作块的选中\n              this.selected_state = False;\n            }\n          })\n      ]\n    })\n  }\n\n  build() {\n    Column() {\n      ChipGroup({\n        items: [\n          {\n            prefixSymbol: { normal: this.prefixModifierNormal, activated: this.prefixModifierActivated }, // 操作块1的前缀图标\n            label: { text: \"操作块1\" }, // 操作块1的标签\n            suffixSymbol: { normal: this.suffixModifierNormal, activated: this.suffixModifierActivated }, // 操作块1的后缀图标\n            allowClose: False, // 操作块1不允许关闭\n          },\n          {\n            prefixSymbol: { normal: this.prefixModifierNormal, activated: this.prefixModifierActivated }, // 操作块2的前缀图标\n            label: { text: \"操作块2\" }, // 操作块2的标签\n            allowClose: True, // 操作块2允许关闭\n          },\n          {\n            prefixIcon: { src: $r('sys.media.ohos_ic_public_clock') }, // 操作块3的前缀图标\n            label: { text: \"操作块3\" }, // 操作块3的标签\n            allowClose: True, // 操作块3允许关闭\n          },\n          {\n            prefixIcon: { src: $r('sys.media.ohos_ic_public_cast_stream') }, // 操作块4的前缀图标\n            label: { text: \"操作块4\" }, // 操作块4的标签\n            allowClose: True, // 操作块4允许关闭\n          },\n          {\n            prefixIcon: { src: $r('sys.media.ohos_ic_public_cast_mirror') }, // 操作块5的前缀图标\n            label: { text: \"操作块5\" }, // 操作块5的标签\n            allowClose: True, // 操作块5允许关闭\n          },\n          {\n            prefixIcon: { src: $r('sys.media.ohos_ic_public_cast_stream') }, // 操作块6的前缀图标\n            label: { text: \"操作块6\" }, // 操作块6的标签\n            allowClose: True, // 操作块6允许关闭\n          },\n        ],\n        itemStyle: {\n          size: ChipSize.NORMAL, // 操作块大小\n          backgroundColor: $r('sys.color.ohos_id_color_button_normal'), // 操作块背景颜色\n          fontColor: $r('sys.color.ohos_id_color_text_primary'), // 操作块文字颜色\n          selectedBackgroundColor: $r('sys.color.ohos_id_color_emphasize'), // 选中操作块背景颜色\n          selectedFontColor: $r('sys.color.ohos_id_color_text_primary_contrary'), // 选中操作块文字颜色\n        },\n        selectedIndexes: this.selected_index, // 初始选中索引\n        multiple: True, // 支持多选\n        chipGroupSpace: { itemSpace: 8, endSpace: 0 }, // 操作块间距\n        chipGroupPadding: { top: 10, bottom: 10 }, // 操作块组内边距\n        onChange: (activatedChipsIndex: Array<number>) => {\n          console.log('chips on clicked, activated index ' + activatedChipsIndex) // 点击操作块时的回调\n        },\n        suffix: this.ChipGroupSuffix // 操作块组的后缀图标组\n      })\n    }\n  }\n}"
        }
    ],
    "Chip": [
        {
            "description": "实现一个包含Chip组件的垂直布局，Chip组件具有前缀图标、标签文本、背景颜色和边框圆角等样式属性，支持交互功能和关闭图标显示。",
            "code": "import { Chip, ChipSize } from '@kit.ArkUI'; // 导入Chip组件及其尺寸枚举\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局，组件间距为10\n      Chip({\n        prefixIcon: {\n          src: $r('app.media.chips'), // 设置前缀图标的资源路径\n          size: { width: 16, height: 16 }, // 设置前缀图标的尺寸\n          fillColor: Color.Blue // 设置前缀图标的填充颜色为蓝色\n        },\n        label: {\n          text: \"操作块\", // 设置标签文本内容\n          fontSize: 12, // 设置标签文本的字体大小\n          fontColor: Color.Blue, // 设置标签文本的颜色为蓝色\n          fontFamily: \"HarmonyOS Sans\", // 设置标签文本的字体族\n          labelMargin: { left: 20, right: 30 } // 设置标签文本的左右边距\n        },\n        size: ChipSize.NORMAL, // 设置Chip组件的尺寸为正常大小\n        allowClose: True, // 允许Chip组件显示关闭图标\n        enabled: True, // 启用Chip组件的交互功能\n        backgroundColor: $r('sys.color.ohos_id_color_button_normal'), // 设置Chip组件的背景颜色\n        borderRadius: $r('sys.float.ohos_id_corner_radius_button') // 设置Chip组件的边框圆角\n      })\n    }\n  }\n}"
        },
        {
            "description": "实现一个Chip组件，该组件包含一个前缀图标和一个标签文本。Chip的大小、颜色、边框圆角等样式属性可以自定义。Chip组件支持点击事件和关闭事件的回调处理。",
            "code": "import { Chip, ChipSize } from '@kit.ArkUI'; // 导入Chip组件及其相关属性\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局的容器，子组件之间的间距为10\n      Chip({\n        // 设置Chip的前缀图标\n        prefixIcon: {\n          src: $r('app.media.chips'), // 图标的资源路径\n          size: { width: 16, height: 16 }, // 图标的尺寸\n          fillColor: Color.Blue // 图标的填充颜色\n        },\n        // 设置Chip的标签文本\n        label: {\n          text: \"操作块\", // 标签文本内容\n          fontSize: 12, // 文本字体大小\n          fontColor: Color.Blue, // 文本颜色\n          fontFamily: \"HarmonyOS Sans\", // 文本字体\n          labelMargin: { left: 20, right: 30 } // 文本的左右边距\n        },\n        size: ChipSize.SMALL, // Chip的大小，这里设置为小尺寸\n        allowClose: False, // 不允许显示删除图标\n        enabled: True, // Chip是否启用\n        backgroundColor: $r('sys.color.ohos_id_color_button_normal'), // Chip的背景颜色\n        borderRadius: $r('sys.float.ohos_id_corner_radius_button'), // Chip的边框圆角\n        onClose:()=>{\n          console.log(\"chip on close\") // 当Chip被关闭时的回调函数\n        }\n      })\n    }\n  }\n}"
        },
        {
            "description": "实现一个自定义的操作块组件，该组件包含前缀图标、标签文本和后缀图标。组件支持配置图标的大小、颜色、文本的字体、颜色、边距等属性。组件的大小、背景颜色、边框圆角等也可以自定义。",
            "code": "import { Chip, ChipSize } from '@kit.ArkUI'; // 导入Chip组件及其相关属性\n\n@Entry // 标记该组件为入口组件\n@Component // 标记该结构体为ArkUI组件\nstruct Index {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局的容器，子组件之间的间距为10\n      Chip({\n        // 配置前缀图标\n        prefixIcon: {\n          src: $r('app.media.chips'), // 图标资源路径\n          size: { width: 16, height: 16 }, // 图标大小\n          fillColor: Color.Red // 图标填充颜色\n        },\n        // 配置标签文本\n        label: {\n          text: \"操作块\", // 标签文本内容\n          fontSize: 12, // 字体大小\n          fontColor: Color.Blue, // 字体颜色\n          fontFamily: \"HarmonyOS Sans\", // 字体家族\n          labelMargin: { left: 20, right: 30 } // 标签文本的左右边距\n        },\n        // 配置后缀图标\n        suffixIcon: {\n          src: $r('app.media.close'), // 图标资源路径\n          size: { width: 16, height: 16 }, // 图标大小\n          fillColor: Color.Red // 图标填充颜色\n        },\n        size: ChipSize.NORMAL, // 操作块的大小，NORMAL表示正常大小\n        allowClose: False, // 是否允许关闭操作块，False表示不允许关闭\n        enabled: True, // 操作块是否启用，True表示启用\n        backgroundColor: $r('sys.color.ohos_id_color_button_normal'), // 背景颜色，使用系统默认的按钮背景颜色\n        borderRadius: $r('sys.float.ohos_id_corner_radius_button') // 边框圆角，使用系统默认的按钮圆角\n      })\n    }\n  }\n}"
        },
        {
            "description": "实现一个Chip组件，该组件包含前缀图标、标签文本和后缀图标，并支持自定义布局方向、图标大小、颜色、字体样式、背景颜色、边框半径等属性。整个组件放置在一个居中对齐的Column容器中，宽度与高度均为100%。",
            "code": "import { Chip, ChipSize, LengthMetrics } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct ChipPage {\n  @State message: string = 'Hello World'; // 定义一个状态变量message，初始值为'Hello World'\n\n  build() {\n    Column() {\n      Chip({\n        direction: Direction.Rtl, // 设置Chip组件的布局方向为从右到左\n        prefixIcon: {\n          src: $r('app.media.chips'), // 设置前缀图标的资源路径\n          size: { width: 16, height: 16 }, // 设置前缀图标的大小\n          fillColor: Color.Red, // 设置前缀图标的填充颜色\n        },\n        label: {\n          text: \"操作块\", // 设置标签的文本内容\n          fontSize: 12, // 设置标签的字体大小\n          fontColor: Color.Blue, // 设置标签的字体颜色\n          fontFamily: \"HarmonyOS Sans\", // 设置标签的字体家族\n          localizedLabelMargin: { start: LengthMetrics.vp(20), end: LengthMetrics.vp(20) }, // 设置标签的边距\n        },\n        suffixIcon: {\n          src: $r('app.media.close'), // 设置后缀图标的资源路径\n          size: { width: 16, height: 16 }, // 设置后缀图标的大小\n          fillColor: Color.Red, // 设置后缀图标的填充颜色\n        },\n        size: ChipSize.NORMAL, // 设置Chip组件的大小\n        allowClose: False, // 设置是否允许关闭Chip组件\n        enabled: True, // 设置Chip组件是否启用\n        backgroundColor: $r('sys.color.ohos_id_color_button_normal'), // 设置Chip组件的背景颜色\n        borderRadius: $r('sys.float.ohos_id_corner_radius_button') // 设置Chip组件的边框半径\n      })\n    }.justifyContent(FlexAlign.Center) // 设置Column组件的内容对齐方式为居中\n    .width('100%') // 设置Column组件的宽度为100%\n    .height('100%') // 设置Column组件的高度为100%\n  }\n}"
        },
        {
            "description": "实现一个包含Chip组件的页面，Chip组件具有前缀图标、文本标签、可关闭按钮等功能。通过按钮可以切换Chip的激活状态，并在控制台输出相应的事件信息。",
            "code": "import { Chip, ChipSize } from '@kit.ArkUI'; // 导入Chip组件及其相关属性\n\n@Entry\n@Component\nstruct Index {\n  @State isActivated: boolean = False; // 定义一个状态变量，用于控制Chip的激活状态\n\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局，组件间距为10\n      Chip({\n        prefixIcon: {\n          src: $r('app.media.chips'), // 设置Chip的前缀图标资源路径\n          size: { width: 16, height: 16 }, // 设置图标的大小\n          fillColor: Color.Blue, // 设置图标的填充颜色\n          activatedFillColor: $r('sys.color.ohos_id_color_text_primary_contrary') // 设置激活状态下的图标填充颜色\n        },\n        label: {\n          text: \"操作块\", // 设置Chip的文本内容\n          fontSize: 12, // 设置文本的字体大小\n          fontColor: Color.Blue, // 设置文本的颜色\n          activatedFontColor: $r('sys.color.ohos_id_color_text_primary_contrary'), // 设置激活状态下的文本颜色\n          fontFamily: \"HarmonyOS Sans\", // 设置文本的字体家族\n          labelMargin: { left: 20, right: 30 } // 设置文本的左右边距\n        },\n        size: ChipSize.NORMAL, // 设置Chip的大小为正常尺寸\n        allowClose: True, // 允许Chip显示关闭按钮\n        enabled: True, // 启用Chip的交互功能\n        activated: this.isActivated, // 根据状态变量设置Chip的激活状态\n        backgroundColor: $r('sys.color.ohos_id_color_button_normal'), // 设置Chip的背景颜色\n        activatedBackgroundColor: $r('sys.color.ohos_id_color_emphasize'), // 设置激活状态下的背景颜色\n        borderRadius: $r('sys.float.ohos_id_corner_radius_button'), // 设置Chip的边框圆角\n        onClose:()=>{\n          console.log(\"chip on close\") // 定义Chip关闭事件的回调函数\n        },\n        onClicked:()=>{\n          console.log(\"chip on clicked\") // 定义Chip点击事件的回调函数\n        }\n      })\n\n      Button('改变激活状态').onClick(()=>{\n        this.isActivated = !this.isActivated; // 定义按钮点击事件的回调函数，切换Chip的激活状态\n      })\n    }\n  }\n}"
        },
        {
            "description": "实现一个包含Chip组件和Button组件的界面。Chip组件用于显示一个可点击的操作块，支持激活状态切换和关闭操作。Button组件用于切换Chip的激活状态。",
            "code": "import { Chip, ChipSize, SymbolGlyphModifier } from '@kit.ArkUI'; // 导入ArkUI库中的Chip组件及相关枚举和类\n\n@Entry\n@Component\nstruct Index {\n  @State isActivated: boolean = False; // 定义一个状态变量，用于控制Chip的激活状态\n\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局，组件间距为10\n      Chip({\n        prefixIcon: {\n          src: $r('app.media.chips'), // 设置前缀图标的资源路径\n          size: { width: 16, height: 16 }, // 设置前缀图标的大小\n          fillColor: Color.Blue, // 设置前缀图标的填充颜色\n          activatedFillColor: $r('sys.color.ohos_id_color_text_primary_contrary') // 设置激活状态下的前缀图标填充颜色\n        },\n        prefixSymbol: {\n          normal: new SymbolGlyphModifier($r('sys.symbol.ohos_star')).fontSize(16).fontColor([Color.Green]), // 设置前缀symbol图标在正常状态下的样式\n          activated: new SymbolGlyphModifier($r('sys.symbol.ohos_star')).fontSize(16).fontColor([Color.Red]), // 设置前缀symbol图标在激活状态下的样式\n        },\n        label: {\n          text: \"操作块\", // 设置Chip的标签文本\n          fontSize: 12, // 设置标签文本的字体大小\n          fontColor: Color.Blue, // 设置标签文本的颜色\n          activatedFontColor: $r('sys.color.ohos_id_color_text_primary_contrary'), // 设置激活状态下的标签文本颜色\n          fontFamily: \"HarmonyOS Sans\", // 设置标签文本的字体家族\n          labelMargin: { left: 20, right: 30 }, // 设置标签文本的边距\n        },\n        size: ChipSize.NORMAL, // 设置Chip的大小\n        allowClose: True, // 允许Chip关闭\n        enabled: True, // 启用Chip\n        activated: this.isActivated, // 设置Chip的激活状态\n        backgroundColor: $r('sys.color.ohos_id_color_button_normal'), // 设置Chip的背景颜色\n        activatedBackgroundColor: $r('sys.color.ohos_id_color_emphasize'), // 设置激活状态下的Chip背景颜色\n        borderRadius: $r('sys.float.ohos_id_corner_radius_button'), // 设置Chip的边框圆角\n        onClose:()=>{\n          console.log(\"chip on close\") // 定义Chip关闭事件的处理函数\n        },\n        onClicked:()=>{\n          console.log(\"chip on clicked\") // 定义Chip点击事件的处理函数\n        }\n      })\n\n      Button('改变激活状态').onClick(()=>{\n        this.isActivated = !this.isActivated; // 定义按钮点击事件，切换Chip的激活状态\n      })\n    }\n  }\n}"
        }
    ],
    "ToolBar": [
        {
            "description": "实现一个工具栏组件，支持自定义工具栏项的文本内容、图标资源、点击事件处理逻辑以及状态（启用、禁用、激活）。工具栏项列表通过状态变量进行管理，并在组件即将出现时进行初始化。工具栏组件通过Stack布局对齐到屏幕底部，并占据全屏宽度。",
            "code": "import { ToolBar, ToolBarOptions } from '@kit.ArkUI'\n\n// 定义工具栏项的状态枚举\nenum ItemState {\n  ENABLE = 1, // 启用状态\n  DISABLE = 2, // 禁用状态\n  ACTIVATE = 3 // 激活状态\n}\n\n@Entry\n@Component\nstruct Index {\n  @State toolbarList: ToolBarOptions = new ToolBarOptions() // 声明一个状态变量，用于存储工具栏项列表\n\n  // 组件即将出现时执行的初始化操作\n  aboutToAppear() {\n    // 添加第一个工具栏项\n    this.toolbarList.push({\n      content: '剪贴我是超超超超超超超超超长样式', // 工具栏项的文本内容\n      icon: $r('sys.media.ohos_ic_public_share'), // 工具栏项的图标资源\n      action: () => {\n        // 工具栏项的点击事件处理逻辑\n      },\n    })\n\n    // 添加第二个工具栏项，并设置为禁用状态\n    this.toolbarList.push({\n      content: '拷贝', // 工具栏项的文本内容\n      icon: $r('sys.media.ohos_ic_public_copy'), // 工具栏项的图标资源\n      action: () => {\n        // 工具栏项的点击事件处理逻辑\n      },\n      state: ItemState.DISABLE // 设置工具栏项的状态为禁用\n    })\n\n    // 添加第三个工具栏项，并设置为激活状态\n    this.toolbarList.push({\n      content: '粘贴', // 工具栏项的文本内容\n      icon: $r('sys.media.ohos_ic_public_paste'), // 工具栏项的图标资源\n      action: () => {\n        // 工具栏项的点击事件处理逻辑\n      },\n      state: ItemState.ACTIVATE // 设置工具栏项的状态为激活\n    })\n\n    // 添加第四个工具栏项\n    this.toolbarList.push({\n      content: '全选', // 工具栏项的文本内容\n      icon: $r('sys.media.ohos_ic_public_select_all'), // 工具栏项的图标资源\n      action: () => {\n        // 工具栏项的点击事件处理逻辑\n      },\n    })\n\n    // 添加第五个工具栏项\n    this.toolbarList.push({\n      content: '分享', // 工具栏项的文本内容\n      icon: $r('sys.media.ohos_ic_public_share'), // 工具栏项的图标资源\n      action: () => {\n        // 工具栏项的点击事件处理逻辑\n      },\n    })\n\n    // 添加第六个工具栏项\n    this.toolbarList.push({\n      content: '分享', // 工具栏项的文本内容\n      icon: $r('sys.media.ohos_ic_public_share'), // 工具栏项的图标资源\n      action: () => {\n        // 工具栏项的点击事件处理逻辑\n      },\n    })\n  }\n\n  build() {\n    Row() {\n      Stack() {\n        Column() {\n          // 创建ToolBar组件，并设置激活索引和工具栏项列表\n          ToolBar({\n            activateIndex: 2, // 设置激活的工具栏项索引\n            toolBarList: this.toolbarList, // 传递工具栏项列表\n          })\n        }\n      }.align(Alignment.Bottom) // 将Stack组件对齐到屏幕底部\n      .width('100%').height('100%') // 设置Stack组件的宽度和高度为全屏\n    }\n  }\n}"
        }
    ],
    "ComposeTitleBar": [
        {
            "description": "实现一个包含多个ComposeTitleBar组件的页面，每个ComposeTitleBar组件显示一个标题、副标题和一组菜单项。菜单项可以点击并触发相应的动作，例如显示一个Toast消息。页面布局为垂直排列的多个ComposeTitleBar组件，每个组件之间用Divider分隔。\n导入ComposeTitleBar组件和promptAction模块",
            "code": "import { ComposeTitleBar, promptAction } from '@kit.ArkUI';\n\n// 定义菜单项的接口，包含value（资源）、isEnabled（是否启用）和action（点击动作）\ninterface menuItem {\n  value: Resource; // 菜单项的图标资源\n  isEnabled?: boolean; // 菜单项是否启用，默认为true\n  action?: () => void; // 点击菜单项时触发的动作\n}\n\n// 主入口组件\n@Entry\n@Component\nstruct Index {\n  // 定义菜单项数组，包含四个菜单项，每个菜单项的图标相同，点击时显示相同的Toast消息\n  private menuItems: Array<menuItem> = [\n    {\n      value: $r('app.media.ic_public_save'), // 菜单项图标\n      isEnabled: true, // 菜单项启用\n      action: () => promptAction.showToast({ message: \"show toast index 1\" }) // 点击时显示Toast消息\n    },\n    {\n      value: $r('app.media.ic_public_save'),\n      isEnabled: true,\n      action: () => promptAction.showToast({ message: \"show toast index 1\" })\n    },\n    {\n      value: $r('app.media.ic_public_save'),\n      isEnabled: true,\n      action: () => promptAction.showToast({ message: \"show toast index 1\" })\n    },\n    {\n      value: $r('app.media.ic_public_save'),\n      isEnabled: true,\n      action: () => promptAction.showToast({ message: \"show toast index 1\" })\n    },\n  ];\n\n  // 构建页面布局\n  build() {\n    Row() {\n      Column() {\n        // 第一个Divider，高度为2，颜色为0xCCCCCC\n        Divider().height(2).color(0xCCCCCC)\n\n        // 第一个ComposeTitleBar组件，显示标题、副标题和第一个菜单项\n        ComposeTitleBar({\n          title: \"标题\", // 主标题\n          subtitle: \"副标题\", // 副标题\n          menuItems: this.menuItems.slice(0, 1), // 只显示第一个菜单项\n        })\n\n        // 第二个Divider，高度为2，颜色为0xCCCCCC\n        Divider().height(2).color(0xCCCCCC)\n\n        // 第二个ComposeTitleBar组件，显示标题、副标题和前两个菜单项\n        ComposeTitleBar({\n          title: \"标题\",\n          subtitle: \"副标题\",\n          menuItems: this.menuItems.slice(0, 2), // 显示前两个菜单项\n        })\n\n        // 第三个Divider，高度为2，颜色为0xCCCCCC\n        Divider().height(2).color(0xCCCCCC)\n\n        // 第三个ComposeTitleBar组件，显示标题、副标题和所有菜单项\n        ComposeTitleBar({\n          title: \"标题\",\n          subtitle: \"副标题\",\n          menuItems: this.menuItems, // 显示所有菜单项\n        })\n\n        // 第四个Divider，高度为2，颜色为0xCCCCCC\n        Divider().height(2).color(0xCCCCCC)\n\n        // 第四个ComposeTitleBar组件，显示标题、副标题和一个自定义的菜单项\n        ComposeTitleBar({\n          menuItems: [{ \n            isEnabled: true, // 菜单项启用\n            value: $r('app.media.ic_public_save'), // 菜单项图标\n            action: () => promptAction.showToast({ message: \"show toast index 1\" }) // 点击时显示Toast消息\n          }],\n          title: \"标题\",\n          subtitle: \"副标题\",\n          item: { isEnabled: true, value: $r('app.media.app_icon') } // 自定义的菜单项\n        })\n\n        // 第五个Divider，高度为2，颜色为0xCCCCCC\n        Divider().height(2).color(0xCCCCCC)\n      }\n      .height('100%') // 设置Column的高度为100%\n    }\n  }\n}"
        }
    ]
}