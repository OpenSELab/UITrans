/*\n实现一个日期选择对话框示例，用户点击按钮后弹出日期选择对话框，可以选择日期和时间，并支持自定义样式和回调函数。\n*/\n\n@Entry\n@Component\nstruct DatePickerDialogExample {\n  // 初始化选中的日期\n  selectedDate: Date = new Date("2010-1-1")\n\n  build() {\n    Column() {\n      // 创建一个按钮，点击时触发日期选择对话框\n      Button("DatePickerDialog")\n        .margin(20) // 设置按钮的边距\n        .onClick(() => {\n          // 显示日期选择对话框\n          DatePickerDialog.show({\n            start: new Date("2000-1-1"), // 设置日期选择范围的开始日期\n            end: new Date("2100-12-31"), // 设置日期选择范围的结束日期\n            selected: this.selectedDate, // 设置初始选中的日期\n            showTime: true, // 显示时间选择\n            useMilitaryTime: false, // 不使用24小时制\n            // 设置对话框中未选中日期的文本样式\n            disappearTextStyle: { color: Color.Pink, font: { size: '22fp', weight: FontWeight.Bold } },\n            // 设置对话框中选中日期的文本样式\n            textStyle: { color: '#ff00ff00', font: { size: '18fp', weight: FontWeight.Normal } },\n            // 设置对话框中选中日期的文本样式\n            selectedTextStyle: { color: '#ff182431', font: { size: '14fp', weight: FontWeight.Regular } },\n            // 设置确认按钮的样式\n            acceptButtonStyle: { type: ButtonType.Normal, style: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL, fontColor: Color.Red,\n              fontSize: '26fp', fontWeight: FontWeight.Bolder, fontStyle: FontStyle.Normal, fontFamily: 'sans-serif', backgroundColor: '#80834511',\n              borderRadius: 20 },\n            // 设置取消按钮的样式\n            cancelButtonStyle: { type: ButtonType.Normal, style: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL, fontColor: Color.Blue,\n              fontSize: '16fp', fontWeight: FontWeight.Normal, fontStyle: FontStyle.Italic, fontFamily: 'sans-serif', backgroundColor: '#50182431',\n              borderRadius: 10 },\n            // 确认按钮点击时的回调函数\n            onDateAccept: (value: Date) => {\n              this.selectedDate = value // 更新选中的日期\n              console.info("DatePickerDialog:onDateAccept()" + value.toString()) // 输出确认的日期\n            },\n            // 取消按钮点击时的回调函数\n            onCancel: () => {\n              console.info("DatePickerDialog:onCancel()") // 输出取消操作\n            },\n            // 日期变化时的回调函数\n            onDateChange: (value: Date) => {\n              console.info("DatePickerDialog:onDateChange()" + value.toString()) // 输出变化的日期\n            },\n            // 对话框显示时的回调函数\n            onDidAppear: () => {\n              console.info("DatePickerDialog:onDidAppear()") // 输出对话框显示\n            },\n            // 对话框消失时的回调函数\n            onDidDisappear: () => {\n              console.info("DatePickerDialog:onDidDisappear()") // 输出对话框消失\n            },\n            // 对话框即将显示时的回调函数\n            onWillAppear: () => {\n              console.info("DatePickerDialog:onWillAppear()") // 输出对话框即将显示\n            },\n            // 对话框即将消失时的回调函数\n            onWillDisappear: () => {\n              console.info("DatePickerDialog:onWillDisappear()") // 输出对话框即将消失\n            }\n          })\n        })\n    }.width('100%') // 设置列的宽度为100%\n  }\n}


/*\n实现两个按钮，分别用于触发标准日期选择对话框和农历日期选择对话框。用户可以通过点击按钮打开相应的日期选择对话框，并在对话框中选择日期。选择日期后，对话框会触发相应的回调函数，更新选中的日期并输出日志信息。\n*/\n\n@Entry\n@Component\nstruct DatePickerDialogExample {\n  // 初始化选中的日期为2010年1月1日\n  selectedDate: Date = new Date("2010-1-1")\n\n  build() {\n    Column() {\n      // 按钮用于触发标准日期选择对话框\n      Button("DatePickerDialog")\n        .margin(20)\n        .onClick(() => {\n          DatePickerDialog.show({\n            // 设置日期选择范围，从2000年1月1日到2100年12月31日\n            start: new Date("2000-1-1"),\n            end: new Date("2100-12-31"),\n            // 初始选中的日期为2010年1月1日\n            selected: this.selectedDate,\n            // 显示时间选择\n            showTime: True,\n            // 不使用24小时制\n            useMilitaryTime: False,\n            // 对话框消失时的文本样式，颜色为粉色，字体大小为22fp，加粗\n            disappearTextStyle: { color: Color.Pink, font: { size: '22fp', weight: FontWeight.Bold } },\n            // 普通文本样式，颜色为绿色，字体大小为18fp，正常\n            textStyle: { color: '#ff00ff00', font: { size: '18fp', weight: FontWeight.Normal } },\n            // 选中日期的文本样式，颜色为蓝色，字体大小为14fp，常规\n            selectedTextStyle: { color: '#ff182431', font: { size: '14fp', weight: FontWeight.Regular } },\n            // 用户确认选择日期时的回调，更新选中的日期并输出日志\n            onDateAccept: (value: Date) => {\n              this.selectedDate = value\n              console.info("DatePickerDialog:onDateAccept()" + value.toString())\n            },\n            // 用户取消选择时的回调，输出日志\n            onCancel: () => {\n              console.info("DatePickerDialog:onCancel()")\n            },\n            // 日期变化时的回调，输出日志\n            onDateChange: (value: Date) => {\n              console.info("DatePickerDialog:onDateChange()" + value.toString())\n            },\n            // 对话框显示时的回调，输出日志\n            onDidAppear: () => {\n              console.info("DatePickerDialog:onDidAppear()")\n            },\n            // 对话框消失时的回调，输出日志\n            onDidDisappear: () => {\n              console.info("DatePickerDialog:onDidDisappear()")\n            },\n            // 对话框即将显示时的回调，输出日志\n            onWillAppear: () => {\n              console.info("DatePickerDialog:onWillAppear()")\n            },\n            // 对话框即将消失时的回调，输出日志\n            onWillDisappear: () => {\n              console.info("DatePickerDialog:onWillDisappear()")\n            }\n          })\n        })\n\n      // 按钮用于触发农历日期选择对话框\n      Button("Lunar DatePickerDialog")\n        .margin(20)\n        .onClick(() => {\n          DatePickerDialog.show({\n            // 设置日期选择范围，从2000年1月1日到2100年12月31日\n            start: new Date("2000-1-1"),\n            end: new Date("2100-12-31"),\n            // 初始选中的日期为2010年1月1日\n            selected: this.selectedDate,\n            // 使用农历日期选择\n            lunar: True,\n            // 对话框消失时的文本样式，颜色为粉色，字体大小为22fp，加粗\n            disappearTextStyle: { color: Color.Pink, font: { size: '22fp', weight: FontWeight.Bold } },\n            // 普通文本样式，颜色为绿色，字体大小为18fp，正常\n            textStyle: { color: '#ff00ff00', font: { size: '18fp', weight: FontWeight.Normal } },\n            // 选中日期的文本样式，颜色为蓝色，字体大小为14fp，常规\n            selectedTextStyle: { color: '#ff182431', font: { size: '14fp', weight: FontWeight.Regular } },\n            // 用户确认选择日期时的回调，更新选中的日期并输出日志\n            onDateAccept: (value: Date) => {\n              this.selectedDate = value\n              console.info("DatePickerDialog:onDateAccept()" + value.toString())\n            },\n            // 用户取消选择时的回调，输出日志\n            onCancel: () => {\n              console.info("DatePickerDialog:onCancel()")\n            },\n            // 日期变化时的回调，输出日志\n            onDateChange: (value: Date) => {\n              console.info("DatePickerDialog:onDateChange()" + value.toString())\n            },\n            // 对话框显示时的回调，输出日志\n            onDidAppear: () => {\n              console.info("DatePickerDialog:onDidAppear()")\n            },\n            // 对话框消失时的回调，输出日志\n            onDidDisappear: () => {\n              console.info("DatePickerDialog:onDidDisappear()")\n            },\n            // 对话框即将显示时的回调，输出日志\n            onWillAppear: () => {\n              console.info("DatePickerDialog:onWillAppear()")\n            },\n            // 对话框即将消失时的回调，输出日志\n            onWillDisappear: () => {\n              console.info("DatePickerDialog:onWillDisappear()")\n            }\n          })\n        })\n    }.width('100%')\n  }\n}