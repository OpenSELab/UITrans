{
    "description": "日期滑动选择器弹窗，展示在弹窗上，允许用户选择日期。",
    "details": "该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。本模块功能依赖UI的执行上下文，不可在UI上下文不明确的地方使用，参见UIContext说明。从API version 10开始，可以通过使用UIContext中的showDatePickerDialog来明确UI的执行上下文。",
    "interfaces": [
        {
            "description": "DatePickerDialog.show(options?: DatePickerDialogOptions)",
            "params": {
                "options": {
                    "type": "DatePickerDialogOptions",
                    "required": false,
                    "description": "配置日期选择器弹窗的参数。"
                }
            }
        }
    ],
    "attributes": {
        "DatePickerDialogOptions": {
            "description": "配置日期选择器弹窗的参数。",
            "params": {
                "lunar": {
                    "type": "boolean",
                    "required": false,
                    "description": "日期是否显示为农历，true表示显示农历，false表示不显示农历。",
                    "default": false
                },
                "showTime10+": {
                    "type": "boolean",
                    "required": false,
                    "description": "是否展示时间项，true表示显示时间，false表示不显示时间。",
                    "default": false
                },
                "useMilitaryTime10+": {
                    "type": "boolean",
                    "required": false,
                    "description": "展示时间是否为24小时制，true表示显示24小时制，false表示显示12小时制。",
                    "default": false
                },
                "lunarSwitch10+": {
                    "type": "boolean",
                    "required": false,
                    "description": "是否展示切换农历的开关，true表示展示开关，false表示不展示开关。",
                    "default": false
                },
                "disappearTextStyle10+": {
                    "type": "PickerTextStyle",
                    "required": false,
                    "description": "设置所有选项中最上和最下两个选项的文本颜色、字号、字体粗细。"
                },
                "textStyle10+": {
                    "type": "PickerTextStyle",
                    "required": false,
                    "description": "设置所有选项中除了最上、最下及选中项以外的文本颜色、字号、字体粗细。"
                },
                "selectedTextStyle10+": {
                    "type": "PickerTextStyle",
                    "required": false,
                    "description": "设置选中项的文本颜色、字号、字体粗细。"
                },
                "acceptButtonStyle12+": {
                    "type": "PickerDialogButtonStyle",
                    "required": false,
                    "description": "设置确认按钮显示样式、样式和重要程度、角色、背景色、圆角、文本颜色、字号、字体粗细、字体样式、字体列表、按钮是否默认响应Enter键。"
                },
                "cancelButtonStyle12+": {
                    "type": "PickerDialogButtonStyle",
                    "required": false,
                    "description": "设置取消按钮显示样式、样式和重要程度、角色、背景色、圆角、文本颜色、字号、字体粗细、字体样式、字体列表、按钮是否默认响应Enter键。"
                },
                "alignment10+": {
                    "type": "DialogAlignment",
                    "required": false,
                    "description": "弹窗在竖直方向上的对齐方式。"
                },
                "offset10+": {
                    "type": "Offset",
                    "required": false,
                    "description": "弹窗相对alignment所在位置的偏移量。"
                },
                "maskRect10+": {
                    "type": "Rectangle",
                    "required": false,
                    "description": "弹窗遮蔽层区域，在遮蔽层区域内的事件不透传，在遮蔽层区域外的事件透传。"
                },
                "backgroundColor11+": {
                    "type": "ResourceColor",
                    "required": false,
                    "description": "弹窗背板颜色。"
                },
                "backgroundBlurStyle11+": {
                    "type": "BlurStyle",
                    "required": false,
                    "description": "弹窗背板模糊材质。"
                },
                "shadow12+": {
                    "type": [
                        "ShadowOptions",
                        "ShadowStyle"
                    ],
                    "required": false,
                    "description": "设置弹窗背板的阴影。"
                },
                "dateTimeOptions12+": {
                    "type": "DateTimeOptions",
                    "required": false,
                    "description": "设置时分是否显示前置0，目前只支持设置hour和minute参数。"
                }
            }
        }
    },
    "events": {
        "onAccept": {
            "description": "点击弹窗中的“确定”按钮时触发该回调。",
            "params": {
                "value": {
                    "type": "DatePickerResult",
                    "required": true,
                    "description": "选择的日期结果。"
                }
            }
        },
        "onCancel": {
            "description": "点击弹窗中的“取消”按钮时触发该回调。"
        },
        "onChange": {
            "description": "滑动弹窗中的滑动选择器使当前选中项改变时触发该回调。",
            "params": {
                "value": {
                    "type": "DatePickerResult",
                    "required": true,
                    "description": "当前选中的日期结果。"
                }
            }
        },
        "onDateAccept10+": {
            "description": "点击弹窗中的“确定”按钮时触发该回调。",
            "params": {
                "value": {
                    "type": "Date",
                    "required": true,
                    "description": "选择的日期结果。"
                }
            }
        },
        "onDateChange10+": {
            "description": "滑动弹窗中的滑动选择器使当前选中项改变时触发该回调。",
            "params": {
                "value": {
                    "type": "Date",
                    "required": true,
                    "description": "当前选中的日期结果。"
                }
            }
        },
        "onDidAppear12+": {
            "description": "弹窗弹出时的事件回调。"
        },
        "onDidDisappear12+": {
            "description": "弹窗消失时的事件回调。"
        },
        "onWillAppear12+": {
            "description": "弹窗显示动效前的事件回调。"
        },
        "onWillDisappear12+": {
            "description": "弹窗退出动效前的事件回调。"
        }
    },
    "rules": [
        "起始日期晚于结束日期，选中日期未设置时，起始日期、结束日期和选中日期都为默认值。",
        "起始日期晚于结束日期，选中日期早于起始日期默认值时，起始日期、结束日期都为默认值，选中日期为起始日期默认值。",
        "起始日期晚于结束日期，选中日期晚于结束日期默认值时，起始日期、结束日期都为默认值，选中日期为结束日期默认值。",
        "起始日期晚于结束日期，选中日期在起始日期与结束日期默认值范围内时，起始日期、结束日期都为默认值，选中日期为设置的值。",
        "选中日期早于起始日期时，选中日期为起始日期。",
        "选中日期晚于结束日期时，选中日期为结束日期。",
        "起始日期晚于当前系统日期，选中日期未设置时，选中日期为起始日期。",
        "结束日期早于当前系统日期，选中日期未设置时，选中日期为结束日期。",
        "日期格式不符合规范时，取默认值。",
        "起始日期或结束日期早于系统有效范围时，起始日期或结束日期取系统有效范围最早日期。",
        "起始日期或结束日期晚于系统有效范围时，起始日期或结束日期取系统有效范围最晚日期。"
    ],
    "examples": [
        {
            "description": "该组件通过Column布局实现了一个展示日期选择对话框的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个按钮，按钮的文本为\"DatePickerDialog\"，按钮的点击事件会触发日期选择对话框的显示。\n按钮的样式包括边距为20vp，点击事件通过onClick方法实现。日期选择对话框的显示通过DatePickerDialog.show方法实现，对话框的日期范围从2000年1月1日到2100年12月31日，初始选中日期为2010年1月1日，并且显示时间选择。\n对话框的文本样式包括消失文本、普通文本和选中文本的样式，分别设置了不同的颜色、字体大小和字体粗细。对话框的按钮样式包括确定按钮和取消按钮的样式，分别设置了不同的按钮类型、样式模式、角色、字体颜色、字体大小、字体粗细、字体样式、字体家族、背景颜色和边框圆角。\n对话框的事件包括日期接受事件、取消事件、日期变化事件、对话框显示事件、对话框消失事件、对话框即将显示事件和对话框即将消失事件，分别通过onDateAccept、onCancel、onDateChange、onDidAppear、onDidDisappear、onWillAppear和onWillDisappear方法实现。\n整个布局通过Column布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
            "code": "// xxx.ets\n@Entry\n@Component\nstruct DatePickerDialogExample {\n  selectedDate: Date = new Date(\"2010-1-1\") // 初始选中日期为2010年1月1日\n\n  build() {\n    Column() {\n      Button(\"DatePickerDialog\") // 创建一个按钮，文本为\"DatePickerDialog\"\n        .margin(20) // 设置按钮的边距为20vp\n        .onClick(() => { // 设置按钮的点击事件\n          DatePickerDialog.show({\n            start: new Date(\"2000-1-1\"), // 设置日期选择对话框的起始日期为2000年1月1日\n            end: new Date(\"2100-12-31\"), // 设置日期选择对话框的结束日期为2100年12月31日\n            selected: this.selectedDate, // 设置日期选择对话框的初始选中日期为selectedDate\n            showTime: true, // 设置日期选择对话框显示时间选择\n            useMilitaryTime: false, // 设置日期选择对话框不使用24小时制\n            disappearTextStyle: { color: Color.Pink, font: { size: '22fp', weight: FontWeight.Bold } }, // 设置日期选择对话框消失文本的样式，颜色为粉色，字体大小为22fp，字体粗细为粗体\n            textStyle: { color: '#ff00ff00', font: { size: '18fp', weight: FontWeight.Normal } }, // 设置日期选择对话框普通文本的样式，颜色为绿色，字体大小为18fp，字体粗细为正常\n            selectedTextStyle: { color: '#ff182431', font: { size: '14fp', weight: FontWeight.Regular } }, // 设置日期选择对话框选中文本的样式，颜色为蓝色，字体大小为14fp，字体粗细为常规\n            acceptButtonStyle: { type: ButtonType.Normal, style: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL, fontColor: Color.Red, // 设置日期选择对话框确定按钮的样式，按钮类型为普通按钮，样式模式为正常，角色为普通，字体颜色为红色\n              fontSize: '26fp', fontWeight: FontWeight.Bolder, fontStyle: FontStyle.Normal, fontFamily: 'sans-serif', backgroundColor: '#80834511', // 字体大小为26fp，字体粗细为更粗，字体样式为正常，字体家族为sans-serif，背景颜色为透明度为50%的绿色\n              borderRadius: 20 }, // 边框圆角为20vp\n            cancelButtonStyle: { type: ButtonType.Normal, style: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL, fontColor: Color.Blue, // 设置日期选择对话框取消按钮的样式，按钮类型为普通按钮，样式模式为正常，角色为普通，字体颜色为蓝色\n              fontSize: '16fp', fontWeight: FontWeight.Normal, fontStyle: FontStyle.Italic, fontFamily: 'sans-serif', backgroundColor: '#50182431', // 字体大小为16fp，字体粗细为正常，字体样式为斜体，字体家族为sans-serif，背景颜色为透明度为31%的蓝色\n              borderRadius: 10 }, // 边框圆角为10vp\n            onDateAccept: (value: Date) => { // 设置日期选择对话框的日期接受事件\n              this.selectedDate = value // 将选中的日期赋值给selectedDate\n              console.info(\"DatePickerDialog:onDateAccept()\" + value.toString()) // 在控制台输出日期接受事件的日志\n            },\n            onCancel: () => { // 设置日期选择对话框的取消事件\n              console.info(\"DatePickerDialog:onCancel()\") // 在控制台输出取消事件的日志\n            },\n            onDateChange: (value: Date) => { // 设置日期选择对话框的日期变化事件\n              console.info(\"DatePickerDialog:onDateChange()\" + value.toString()) // 在控制台输出日期变化事件的日志\n            },\n            onDidAppear: () => { // 设置日期选择对话框的显示事件\n              console.info(\"DatePickerDialog:onDidAppear()\") // 在控制台输出显示事件的日志\n            },\n            onDidDisappear: () => { // 设置日期选择对话框的消失事件\n              console.info(\"DatePickerDialog:onDidDisappear()\") // 在控制台输出消失事件的日志\n            },\n            onWillAppear: () => { // 设置日期选择对话框的即将显示事件\n              console.info(\"DatePickerDialog:onWillAppear()\") // 在控制台输出即将显示事件的日志\n            },\n            onWillDisappear: () => { // 设置日期选择对话框的即将消失事件\n              console.info(\"DatePickerDialog:onWillDisappear()\") // 在控制台输出即将消失事件的日志\n            }\n          })\n        })\n    }.width('100%') // 设置Column的宽度为100%\n  }\n}"
        },
        {
            "description": "该组件通过Column布局实现了一个展示日期选择对话框（DatePickerDialog）的界面。布局宽度占据整个屏幕，包含两个按钮，每个按钮用于触发不同类型的日期选择对话框。按钮之间的间距为20vp，按钮的排列方式为垂直排列。\n按钮的样式包括默认的背景颜色、字体颜色和大小。按钮的功能包括点击事件，用户可以通过点击按钮触发日期选择对话框的显示。\n日期选择对话框的功能包括选择日期范围、显示时间、使用24小时制、自定义文本样式等。对话框的事件包括日期接受、取消、日期变化、对话框显示和消失等。\n整个布局通过Column布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
            "code": "// xxx.ets\n@Entry\n@Component\nstruct DatePickerDialogExample {\n  // 初始化选中的日期为2010年1月1日\n  selectedDate: Date = new Date(\"2010-1-1\")\n\n  build() {\n    Column() {\n      // 创建一个按钮，点击后显示日期选择对话框\n      Button(\"DatePickerDialog\")\n        .margin(20) // 设置按钮的外边距为20vp\n        .onClick(() => {\n          DatePickerDialog.show({\n            start: new Date(\"2000-1-1\"), // 设置日期选择对话框的起始日期为2000年1月1日\n            end: new Date(\"2100-12-31\"), // 设置日期选择对话框的结束日期为2100年12月31日\n            selected: this.selectedDate, // 设置日期选择对话框的初始选中日期为当前选中的日期\n            showTime: true, // 设置日期选择对话框显示时间\n            useMilitaryTime: false, // 设置日期选择对话框不使用24小时制\n            disappearTextStyle: { color: Color.Pink, font: { size: '22fp', weight: FontWeight.Bold } }, // 设置对话框消失时的文本样式\n            textStyle: { color: '#ff00ff00', font: { size: '18fp', weight: FontWeight.Normal } }, // 设置对话框的默认文本样式\n            selectedTextStyle: { color: '#ff182431', font: { size: '14fp', weight: FontWeight.Regular } }, // 设置选中日期的文本样式\n            onDateAccept: (value: Date) => {\n              // 当用户点击确定按钮时，更新选中的日期并打印日志\n              this.selectedDate = value\n              console.info(\"DatePickerDialog:onDateAccept()\" + value.toString())\n            },\n            onCancel: () => {\n              // 当用户点击取消按钮时，打印日志\n              console.info(\"DatePickerDialog:onCancel()\")\n            },\n            onDateChange: (value: Date) => {\n              // 当用户选择日期时，打印日志\n              console.info(\"DatePickerDialog:onDateChange()\" + value.toString())\n            },\n            onDidAppear: () => {\n              // 当对话框显示时，打印日志\n              console.info(\"DatePickerDialog:onDidAppear()\")\n            },\n            onDidDisappear: () => {\n              // 当对话框消失时，打印日志\n              console.info(\"DatePickerDialog:onDidDisappear()\")\n            },\n            onWillAppear: () => {\n              // 当对话框即将显示时，打印日志\n              console.info(\"DatePickerDialog:onWillAppear()\")\n            },\n            onWillDisappear: () => {\n              // 当对话框即将消失时，打印日志\n              console.info(\"DatePickerDialog:onWillDisappear()\")\n            }\n          })\n        })\n\n      // 创建一个按钮，点击后显示农历日期选择对话框\n      Button(\"Lunar DatePickerDialog\")\n        .margin(20) // 设置按钮的外边距为20vp\n        .onClick(() => {\n          DatePickerDialog.show({\n            start: new Date(\"2000-1-1\"), // 设置日期选择对话框的起始日期为2000年1月1日\n            end: new Date(\"2100-12-31\"), // 设置日期选择对话框的结束日期为2100年12月31日\n            selected: this.selectedDate, // 设置日期选择对话框的初始选中日期为当前选中的日期\n            lunar: true, // 设置日期选择对话框显示农历日期\n            disappearTextStyle: { color: Color.Pink, font: { size: '22fp', weight: FontWeight.Bold } }, // 设置对话框消失时的文本样式\n            textStyle: { color: '#ff00ff00', font: { size: '18fp', weight: FontWeight.Normal } }, // 设置对话框的默认文本样式\n            selectedTextStyle: { color: '#ff182431', font: { size: '14fp', weight: FontWeight.Regular } }, // 设置选中日期的文本样式\n            onDateAccept: (value: Date) => {\n              // 当用户点击确定按钮时，更新选中的日期并打印日志\n              this.selectedDate = value\n              console.info(\"DatePickerDialog:onDateAccept()\" + value.toString())\n            },\n            onCancel: () => {\n              // 当用户点击取消按钮时，打印日志\n              console.info(\"DatePickerDialog:onCancel()\")\n            },\n            onDateChange: (value: Date) => {\n              // 当用户选择日期时，打印日志\n              console.info(\"DatePickerDialog:onDateChange()\" + value.toString())\n            },\n            onDidAppear: () => {\n              // 当对话框显示时，打印日志\n              console.info(\"DatePickerDialog:onDidAppear()\")\n            },\n            onDidDisappear: () => {\n              // 当对话框消失时，打印日志\n              console.info(\"DatePickerDialog:onDidDisappear()\")\n            },\n            onWillAppear: () => {\n              // 当对话框即将显示时，打印日志\n              console.info(\"DatePickerDialog:onWillAppear()\")\n            },\n            onWillDisappear: () => {\n              // 当对话框即将消失时，打印日志\n              console.info(\"DatePickerDialog:onWillDisappear()\")\n            }\n          })\n        })\n    }.width('100%') // 设置Column的宽度为100%\n  }\n}"
        }
    ],
    "is_common_attrs": true
}