/*\n实现一个带有自定义动画效果和持续时间的AlertDialog示例。点击按钮后，显示一个AlertDialog，对话框具有自定义的显示和关闭动画效果，并且可以设置对话框的标题、消息内容、对齐方式、偏移量、网格数、确认按钮和取消按钮的回调函数。\n*/\n\nimport { router } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct AlertDialogExample {\n  build() {\n    Column({ space: 5 }) {\n      Button('AlertDialog Set Duration')\n        .onClick(() => {\n          // 显示AlertDialog，并设置自定义动画效果和持续时间\n          AlertDialog.show({\n            title: 'AlertDialog 1', // 对话框标题\n            message: 'Set Animation Duration open 3 second, close 100ms', // 对话框消息内容\n            autoCancel: True, // 自动取消对话框\n            alignment: DialogAlignment.Top, // 对话框对齐方式为顶部\n            offset: { dx: 0, dy: -20 }, // 对话框偏移量\n            gridCount: 3, // 对话框网格数\n            transition: TransitionEffect.asymmetric(\n              // 显示动画效果：透明度和缩放，持续3秒，曲线为Sharp\n              TransitionEffect.OPACITY.animation({ duration: 3000, curve: Curve.Sharp }).combine(\n                TransitionEffect.scale({ x: 1.5, y: 1.5 }).animation({ duration: 3000, curve: Curve.Sharp })\n              ),\n              // 退出动画效果：透明度和缩放，持续100毫秒，曲线为Smooth\n              TransitionEffect.OPACITY.animation({ duration: 100, curve: Curve.Smooth }).combine(\n                TransitionEffect.scale({ x: 0.5, y: 0.5 }).animation({ duration: 100, curve: Curve.Smooth })\n              )\n            ),\n            confirm: {\n              value: 'button', // 确认按钮文本\n              action: () => {\n                console.info('Button-clicking callback'); // 确认按钮点击回调\n              }\n            },\n            cancel: () => {\n              console.info('Closed callbacks'); // 对话框关闭回调\n            }\n          });\n        })\n        .backgroundColor(0x317aff) // 按钮背景颜色\n        .height("88px") // 按钮高度\n    }\n    .width('100%') // 列宽度\n    .margin({ top: 5 }) // 列顶部外边距\n  }\n}


/*\n实现一个带有弹出对话框的按钮组件。点击按钮后，显示一个包含标题、副标题、消息内容和多个按钮的对话框。对话框支持自动取消、居中对齐、模态显示、偏移量设置、按钮布局方向、按钮点击回调、对话框关闭回调等功能。\n*/\n\n@Entry\n@Component\nstruct AlertDialogExample {\n  build() {\n    Column({ space: 5 }) {\n      Button('one button dialog')\n        .onClick(() => {\n          // 显示一个弹出对话框\n          AlertDialog.show(\n            {\n              title: 'title', // 对话框标题\n              subtitle: 'subtitle', // 对话框副标题\n              message: 'text', // 对话框消息内容\n              autoCancel: True, // 自动取消对话框\n              alignment: DialogAlignment.Center, // 对话框居中对齐\n              gridCount: 4, // 对话框网格计数\n              showInSubWindow: True, // 在子窗口中显示对话框\n              isModal: True, // 模态对话框\n              offset: { dx: 0, dy: -20 }, // 对话框偏移量\n              buttonDirection: DialogButtonDirection.HORIZONTAL, // 按钮水平布局\n              buttons: [\n                {\n                  value: '按钮', // 按钮文本\n                  action: () => {\n                    console.info('Callback when button1 is clicked') // 按钮1点击回调\n                  }\n                },\n                {\n                  value: '按钮', // 按钮文本\n                  action: () => {\n                    console.info('Callback when button2 is clicked') // 按钮2点击回调\n                  }\n                },\n                {\n                  value: '按钮', // 按钮文本\n                  enabled: True, // 按钮启用\n                  defaultFocus: True, // 默认焦点按钮\n                  style: DialogButtonStyle.HIGHLIGHT, // 按钮高亮样式\n                  action: () => {\n                    console.info('Callback when button3 is clicked') // 按钮3点击回调\n                  }\n                },\n              ],\n              cancel: () => {\n                console.info('Closed callbacks') // 对话框关闭回调\n              },\n              onWillDismiss: (dismissDialogAction: DismissDialogAction) => {\n                console.info("reason=" + JSON.stringify(dismissDialogAction.reason)) // 对话框即将关闭的原因\n                console.log("dialog onWillDismiss")\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                  dismissDialogAction.dismiss() // 按下返回键关闭对话框\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                  dismissDialogAction.dismiss() // 点击外部区域关闭对话框\n                }\n              }\n            })\n        })\n    }.width('100%').margin({ top: 5 }).backgroundColor(0x317aff) // 设置组件的宽度、上边距和背景颜色\n  }\n}


/*\n实现一个带有自定义样式的对话框示例。点击按钮后，显示一个带有标题、消息内容、确认按钮和关闭回调的对话框。对话框具有自定义的布局、样式和功能，包括对齐方式、偏移量、宽度、高度、圆角半径、边框样式、背景颜色、阴影效果等。\n*/\n\n@Entry\n@Component\nstruct AlertDialogExample {\n  build() {\n    Column({ space: 5 }) {\n      Button('one button dialog')\n        .onClick(() => {\n          // 显示一个自定义样式的对话框\n          AlertDialog.show(\n            {\n              title: 'title', // 对话框标题\n              message: 'text', // 对话框消息内容\n              autoCancel: True, // 自动关闭对话框\n              alignment: DialogAlignment.Center, // 对话框对齐方式\n              offset: { dx: 0, dy: -20 }, // 对话框偏移量\n              gridCount: 3, // 对话框网格数\n              width: 300, // 对话框宽度\n              height: 200, // 对话框高度\n              cornerRadius: 20, // 对话框圆角半径\n              borderWidth: 1, // 对话框边框宽度\n              borderStyle: BorderStyle.Dashed, // 对话框边框样式\n              borderColor: Color.Blue, // 对话框边框颜色\n              backgroundColor: Color.White, // 对话框背景颜色\n              shadow: ({ radius: 20, color: Color.Grey, offsetX: 50, offsetY: 0}), // 对话框阴影\n              textStyle: { wordBreak: WordBreak.BREAK_ALL }, // 对话框文本样式\n              confirm: {\n                value: 'button', // 确认按钮文本\n                action: () => {\n                  // 确认按钮点击回调\n                  console.info('Button-clicking callback')\n                }\n              },\n              cancel: () => {\n                // 对话框关闭回调\n                console.info('Closed callbacks')\n              },\n              onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n                // 对话框即将关闭回调\n                console.info("reason=" + JSON.stringify(dismissDialogAction.reason))\n                console.log("dialog onWillDismiss")\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                  // 按下返回键关闭对话框\n                  dismissDialogAction.dismiss()\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                  // 点击对话框外部关闭对话框\n                  dismissDialogAction.dismiss()\n                }\n              }\n            }\n          )\n        })\n        .backgroundColor(0x317aff) // 按钮背景颜色\n    }.width('100%').margin({ top: 5 }) // 列的宽度为100%，顶部外边距为5\n  }\n}


/*\n实现一个包含三个按钮的组件，每个按钮点击后会弹出一个不同数量的按钮的对话框。对话框支持自定义标题、副标题、消息内容、对齐方式、偏移量、按钮布局方向、按钮样式等。对话框的关闭行为可以通过回调函数进行自定义处理。\n*/\n\n@Entry\n@Component\nstruct AlertDialogExample {\n  build() {\n    Column({ space: 5 }) {\n      // 按钮：触发一个按钮的弹窗\n      Button('one button dialog')\n        .onClick(() => {\n          // 显示一个按钮的弹窗\n          AlertDialog.show(\n            {\n              title: 'title', // 弹窗标题\n              message: 'text', // 弹窗消息内容\n              autoCancel: True, // 自动取消弹窗\n              alignment: DialogAlignment.Bottom, // 弹窗对齐方式\n              offset: { dx: 0, dy: -20 }, // 弹窗偏移量\n              gridCount: 3, // 弹窗按钮网格数\n              confirm: {\n                value: 'button', // 按钮文本\n                action: () => {\n                  console.info('Button-clicking callback') // 按钮点击回调\n                }\n              },\n              cancel: () => {\n                console.info('Closed callbacks') // 弹窗关闭回调\n              },\n              onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n                console.info("reason=" + JSON.stringify(dismissDialogAction.reason)) // 弹窗即将关闭的原因\n                console.log("dialog onWillDismiss")\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                  dismissDialogAction.dismiss() // 按下返回键关闭弹窗\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                  dismissDialogAction.dismiss() // 点击弹窗外部关闭弹窗\n                }\n              }\n            }\n          )\n        })\n        .backgroundColor(0x317aff) // 按钮背景颜色\n\n      // 按钮：触发两个按钮的弹窗\n      Button('two button dialog')\n        .onClick(() => {\n          // 显示两个按钮的弹窗\n          AlertDialog.show(\n            {\n              title: 'title', // 弹窗标题\n              subtitle: 'subtitle', // 弹窗副标题\n              message: 'text', // 弹窗消息内容\n              autoCancel: True, // 自动取消弹窗\n              alignment: DialogAlignment.Bottom, // 弹窗对齐方式\n              gridCount: 4, // 弹窗按钮网格数\n              offset: { dx: 0, dy: -20 }, // 弹窗偏移量\n              primaryButton: {\n                value: 'cancel', // 第一个按钮文本\n                action: () => {\n                  console.info('Callback when the first button is clicked') // 第一个按钮点击回调\n                }\n              },\n              secondaryButton: {\n                enabled: True, // 第二个按钮启用\n                defaultFocus: True, // 第二个按钮默认聚焦\n                style: DialogButtonStyle.HIGHLIGHT, // 第二个按钮样式\n                value: 'ok', // 第二个按钮文本\n                action: () => {\n                  console.info('Callback when the second button is clicked') // 第二个按钮点击回调\n                }\n              },\n              cancel: () => {\n                console.info('Closed callbacks') // 弹窗关闭回调\n              },\n              onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n                console.info("reason=" + JSON.stringify(dismissDialogAction.reason)) // 弹窗即将关闭的原因\n                console.log("dialog onWillDismiss")\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                  dismissDialogAction.dismiss() // 按下返回键关闭弹窗\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                  dismissDialogAction.dismiss() // 点击弹窗外部关闭弹窗\n                }\n              }\n            }\n          )\n        }).backgroundColor(0x317aff) // 按钮背景颜色\n\n      // 按钮：触发三个按钮的弹窗\n      Button('three button dialog')\n        .onClick(() => {\n          // 显示三个按钮的弹窗\n          AlertDialog.show(\n            {\n              title: 'title', // 弹窗标题\n              subtitle: 'subtitle', // 弹窗副标题\n              message: 'text', // 弹窗消息内容\n              autoCancel: True, // 自动取消弹窗\n              alignment: DialogAlignment.Bottom, // 弹窗对齐方式\n              gridCount: 4, // 弹窗按钮网格数\n              offset: { dx: 0, dy: -20 }, // 弹窗偏移量\n              buttonDirection: DialogButtonDirection.HORIZONTAL, // 按钮布局方向\n              buttons: [\n                {\n                  value: '按钮', // 第一个按钮文本\n                  action: () => {\n                    console.info('Callback when button1 is clicked') // 第一个按钮点击回调\n                  }\n                },\n                {\n                  value: '按钮', // 第二个按钮文本\n                  action: () => {\n                    console.info('Callback when button2 is clicked') // 第二个按钮点击回调\n                  }\n                },\n                {\n                  value: '按钮', // 第三个按钮文本\n                  enabled: True, // 第三个按钮启用\n                  defaultFocus: True, // 第三个按钮默认聚焦\n                  style: DialogButtonStyle.HIGHLIGHT, // 第三个按钮样式\n                  action: () => {\n                    console.info('Callback when button3 is clicked') // 第三个按钮点击回调\n                  }\n                },\n              ],\n              cancel: () => {\n                console.info('Closed callbacks') // 弹窗关闭回调\n              },\n              onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n                console.info("reason=" + JSON.stringify(dismissDialogAction.reason)) // 弹窗即将关闭的原因\n                console.log("dialog onWillDismiss")\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                  dismissDialogAction.dismiss() // 按下返回键关闭弹窗\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                  dismissDialogAction.dismiss() // 点击弹窗外部关闭弹窗\n                }\n              }\n            }\n          )\n        }).backgroundColor(0x317aff) // 按钮背景颜色\n    }.width('100%').margin({ top: 5 })\n  }\n}