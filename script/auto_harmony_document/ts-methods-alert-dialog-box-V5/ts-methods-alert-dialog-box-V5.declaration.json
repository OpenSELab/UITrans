{
    "description": "显示警告弹窗组件，可设置文本内容与响应回调。",
    "details": "可以包含单个子组件。",
    "interfaces": [
        {
            "description": "AlertDialog.show(value: AlertDialogParamWithConfirm | AlertDialogParamWithButtons | AlertDialogParamWithOptions)",
            "params": {
                "value": {
                    "type": [
                        "AlertDialogParamWithConfirm",
                        "AlertDialogParamWithButtons",
                        "AlertDialogParamWithOptions"
                    ],
                    "required": true,
                    "description": "定义警告弹窗并弹出。"
                }
            }
        }
    ],
    "attributes": {
        "title": {
            "description": "弹窗标题。",
            "params": {
                "value": {
                    "type": "ResourceStr",
                    "required": false,
                    "description": "弹窗标题。"
                }
            }
        },
        "subtitle": {
            "description": "弹窗副标题。",
            "params": {
                "value": {
                    "type": "ResourceStr",
                    "required": false,
                    "description": "弹窗副标题。"
                }
            }
        },
        "message": {
            "description": "弹窗内容。",
            "params": {
                "value": {
                    "type": "ResourceStr",
                    "required": true,
                    "description": "弹窗内容。"
                }
            }
        },
        "autoCancel": {
            "description": "点击遮障层时，是否关闭弹窗。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": false,
                    "description": "点击遮障层时，是否关闭弹窗。",
                    "default": true
                }
            }
        },
        "cancel": {
            "description": "点击遮障层关闭dialog时的回调。",
            "params": {
                "value": {
                    "type": "() => void",
                    "required": false,
                    "description": "点击遮障层关闭dialog时的回调。"
                }
            }
        },
        "alignment": {
            "description": "弹窗在竖直方向上的对齐方式。",
            "params": {
                "value": {
                    "type": "DialogAlignment",
                    "required": false,
                    "description": "弹窗在竖直方向上的对齐方式。",
                    "default": "DialogAlignment.Default"
                }
            }
        },
        "offset": {
            "description": "弹窗相对alignment所在位置的偏移量。",
            "params": {
                "value": {
                    "type": "Offset",
                    "required": false,
                    "description": "弹窗相对alignment所在位置的偏移量。",
                    "default": {
                        "dx": 0,
                        "dy": 0
                    }
                }
            }
        },
        "gridCount": {
            "description": "弹窗容器宽度所占用栅格数。",
            "params": {
                "value": {
                    "type": "number",
                    "required": false,
                    "description": "弹窗容器宽度所占用栅格数。",
                    "default": 4
                }
            }
        },
        "maskRect": {
            "description": "弹窗遮蔽层区域，在遮蔽层区域内的事件不透传，在遮蔽层区域外的事件透传。",
            "params": {
                "value": {
                    "type": "Rectangle",
                    "required": false,
                    "description": "弹窗遮蔽层区域。",
                    "default": {
                        "x": 0,
                        "y": 0,
                        "width": "100%",
                        "height": "100%"
                    }
                }
            }
        },
        "showInSubWindow": {
            "description": "某弹框需要显示在主窗口之外时，是否在子窗口显示此弹窗。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": false,
                    "description": "是否在子窗口显示此弹窗。",
                    "default": false
                }
            }
        },
        "isModal": {
            "description": "弹窗是否为模态窗口，模态窗口有蒙层，非模态窗口无蒙层。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": false,
                    "description": "弹窗是否为模态窗口。",
                    "default": true
                }
            }
        },
        "backgroundColor": {
            "description": "弹窗背板颜色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": false,
                    "description": "弹窗背板颜色。",
                    "default": "Color.Transparent"
                }
            }
        },
        "backgroundBlurStyle": {
            "description": "弹窗背板模糊材质。",
            "params": {
                "value": {
                    "type": "BlurStyle",
                    "required": false,
                    "description": "弹窗背板模糊材质。",
                    "default": "BlurStyle.COMPONENT_ULTRA_THICK"
                }
            }
        },
        "onWillDismiss": {
            "description": "交互式关闭回调函数。",
            "params": {
                "value": {
                    "type": "Callback<DismissDialogAction>",
                    "required": false,
                    "description": "交互式关闭回调函数。"
                }
            }
        },
        "cornerRadius": {
            "description": "设置背板的圆角半径。",
            "params": {
                "value": {
                    "type": [
                        "BorderRadiuses",
                        "Dimension",
                        "LocalizedBorderRadiuses"
                    ],
                    "required": false,
                    "description": "背板的圆角半径。",
                    "default": {
                        "topLeft": "32vp",
                        "topRight": "32vp",
                        "bottomLeft": "32vp",
                        "bottomRight": "32vp"
                    }
                }
            }
        },
        "transition": {
            "description": "设置弹窗显示和退出的过渡效果。",
            "params": {
                "value": {
                    "type": "TransitionEffect",
                    "required": false,
                    "description": "弹窗显示和退出的过渡效果。"
                }
            }
        },
        "width": {
            "description": "设置弹窗背板的宽度。",
            "params": {
                "value": {
                    "type": "Dimension",
                    "required": false,
                    "description": "弹窗背板的宽度。"
                }
            }
        },
        "height": {
            "description": "设置弹窗背板的高度。",
            "params": {
                "value": {
                    "type": "Dimension",
                    "required": false,
                    "description": "弹窗背板的高度。"
                }
            }
        },
        "borderWidth": {
            "description": "设置弹窗背板的边框宽度。",
            "params": {
                "value": {
                    "type": [
                        "Dimension",
                        "EdgeWidths",
                        "LocalizedEdgeWidths"
                    ],
                    "required": false,
                    "description": "弹窗背板的边框宽度。",
                    "default": 0
                }
            }
        },
        "borderColor": {
            "description": "设置弹窗背板的边框颜色。",
            "params": {
                "value": {
                    "type": [
                        "ResourceColor",
                        "EdgeColors",
                        "LocalizedEdgeColors"
                    ],
                    "required": false,
                    "description": "弹窗背板的边框颜色。",
                    "default": "Color.Black"
                }
            }
        },
        "borderStyle": {
            "description": "设置弹窗背板的边框样式。",
            "params": {
                "value": {
                    "type": [
                        "BorderStyle",
                        "EdgeStyles"
                    ],
                    "required": false,
                    "description": "弹窗背板的边框样式。",
                    "default": "BorderStyle.Solid"
                }
            }
        },
        "shadow": {
            "description": "设置弹窗背板的阴影。",
            "params": {
                "value": {
                    "type": [
                        "ShadowOptions",
                        "ShadowStyle"
                    ],
                    "required": false,
                    "description": "弹窗背板的阴影。"
                }
            }
        },
        "textStyle": {
            "description": "设置弹窗message内容的文本样式。",
            "params": {
                "value": {
                    "type": "TextStyle",
                    "required": false,
                    "description": "弹窗message内容的文本样式。"
                }
            }
        }
    },
    "events": {
        "onWillDismiss": {
            "description": "交互式关闭回调函数。",
            "params": {
                "dismissDialogAction": {
                    "type": "DismissDialogAction",
                    "required": true,
                    "description": "Dialog关闭回调函数。开发者需要退出时调用，不需要退出时无需调用。"
                }
            }
        }
    },
    "rules": null,
    "examples": [
        {
            "description": "该组件定义了一个AlertDialog的样式，并通过按钮触发显示该对话框。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个按钮，按钮点击后弹出对话框。\n对话框的样式包括宽度、高度、背景色、边框样式、边框颜色、边框宽度、圆角半径、阴影效果等。对话框的内容包括标题、消息文本、确认按钮和取消按钮。确认按钮点击后会触发回调函数，取消按钮点击后也会触发回调函数。\n对话框的布局为居中对齐，且在显示时会有偏移量。对话框的文本样式支持自动换行。对话框的关闭事件包括按下返回键和点击对话框外部区域，这些事件都会触发相应的回调函数。",
            "code": "@Entry\n@Component\nstruct AlertDialogExample {\n  build() {\n    Column({ space: 5 }) {\n      Button('one button dialog')\n        .onClick(() => {\n          AlertDialog.show(\n            {\n              title: 'title', // 对话框标题\n              message: 'text', // 对话框消息文本\n              autoCancel: true, // 是否自动取消对话框\n              alignment: DialogAlignment.Center, // 对话框对齐方式，居中对齐\n              offset: { dx: 0, dy: -20 }, // 对话框显示时的偏移量\n              gridCount: 3, // 对话框的网格布局数量\n              width: 300, // 对话框宽度\n              height: 200, // 对话框高度\n              cornerRadius: 20, // 对话框圆角半径\n              borderWidth: 1, // 对话框边框宽度\n              borderStyle: BorderStyle.Dashed, // 对话框边框样式，虚线\n              borderColor: Color.Blue, // 对话框边框颜色\n              backgroundColor: Color.White, // 对话框背景颜色\n              shadow: ({ radius: 20, color: Color.Grey, offsetX: 50, offsetY: 0}), // 对话框阴影效果\n              textStyle: { wordBreak: WordBreak.BREAK_ALL }, // 对话框文本样式，支持自动换行\n              confirm: {\n                value: 'button', // 确认按钮文本\n                action: () => {\n                  console.info('Button-clicking callback') // 确认按钮点击回调函数\n                }\n              },\n              cancel: () => {\n                console.info('Closed callbacks') // 取消按钮点击回调函数\n              },\n              onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n                console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 对话框关闭前的回调函数，输出关闭原因\n                console.log(\"dialog onWillDismiss\")\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                  dismissDialogAction.dismiss() // 按下返回键时关闭对话框\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                  dismissDialogAction.dismiss() // 点击对话框外部区域时关闭对话框\n                }\n              }\n            }\n          )\n        })\n        .backgroundColor(0x317aff) // 按钮背景颜色\n    }.width('100%').margin({ top: 5 }) // 列的宽度占据整个屏幕，顶部外边距为5\n  }\n}"
        },
        {
            "description": "该组件实现了一个弹出式对话框（AlertDialog）的示例，对话框可以在主窗口之外展示。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个按钮，点击按钮后会弹出一个对话框。\n对话框的样式包括标题、副标题、消息文本、按钮布局、按钮样式等属性。对话框的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过 Column 布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct AlertDialogExample {\n  build() {\n    Column({ space: 5 }) { // 使用 Column 布局，设置组件之间的间距为 5vp\n      Button('one button dialog') // 创建一个按钮，按钮文本为 \"one button dialog\"\n        .onClick(() => { // 为按钮添加点击事件\n          AlertDialog.show( // 显示一个弹出式对话框\n            {\n              title: 'title', // 对话框的标题\n              subtitle: 'subtitle', // 对话框的副标题\n              message: 'text', // 对话框的消息文本\n              autoCancel: true, // 设置对话框是否自动取消\n              alignment: DialogAlignment.Center, // 设置对话框的对齐方式为居中\n              gridCount: 4, // 设置对话框的网格数\n              showInSubWindow: true, // 设置对话框是否在子窗口中显示\n              isModal: true, // 设置对话框是否为模态对话框\n              offset: { dx: 0, dy: -20 }, // 设置对话框的偏移量\n              buttonDirection: DialogButtonDirection.HORIZONTAL, // 设置对话框按钮的排列方向为水平\n              buttons: [ // 设置对话框的按钮\n                {\n                  value: '按钮', // 按钮的文本\n                  action: () => { // 按钮的点击事件\n                    console.info('Callback when button1 is clicked') // 点击按钮1时的回调\n                  }\n                },\n                {\n                  value: '按钮', // 按钮的文本\n                  action: () => { // 按钮的点击事件\n                    console.info('Callback when button2 is clicked') // 点击按钮2时的回调\n                  }\n                },\n                {\n                  value: '按钮', // 按钮的文本\n                  enabled: true, // 设置按钮是否启用\n                  defaultFocus: true, // 设置按钮是否默认聚焦\n                  style: DialogButtonStyle.HIGHLIGHT, // 设置按钮的样式\n                  action: () => { // 按钮的点击事件\n                    console.info('Callback when button3 is clicked') // 点击按钮3时的回调\n                  }\n                },\n              ],\n              cancel: () => { // 对话框取消时的回调\n                console.info('Closed callbacks') // 对话框关闭时的回调\n              },\n              onWillDismiss: (dismissDialogAction: DismissDialogAction) => { // 对话框即将关闭时的回调\n                console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 打印关闭原因\n                console.log(\"dialog onWillDismiss\") // 打印对话框即将关闭的日志\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) { // 如果关闭原因是按下返回键\n                  dismissDialogAction.dismiss() // 关闭对话框\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) { // 如果关闭原因是点击对话框外部\n                  dismissDialogAction.dismiss() // 关闭对话框\n                }\n              }\n            })\n        })\n    }.width('100%').margin({ top: 5 }).backgroundColor(0x317aff) // 设置 Column 的宽度为 100%，顶部外边距为 5vp，背景颜色为 0x317aff\n  }\n}"
        },
        {
            "description": "该组件通过Column布局实现了一个包含按钮的界面，按钮点击后会弹出一个自定义动画效果的AlertDialog。布局宽度占据整个屏幕，按钮的高度为88vp，内边距为顶部5vp。按钮的背景颜色为0x317aff，按钮的排列方式为垂直排列，按钮之间的间距为5vp。\n\nAlertDialog的显示动画持续3秒，退出动画持续100毫秒。动画效果包括透明度和缩放效果，显示时透明度从0到1，缩放从1倍到1.5倍；退出时透明度从1到0，缩放从1倍到0.5倍。AlertDialog的标题为“AlertDialog 1”，内容为“Set Animation Duration open 3 second, close 100ms”，对齐方式为顶部对齐，偏移量为顶部-20vp。AlertDialog包含一个确认按钮和一个取消按钮，确认按钮点击后会触发回调函数，输出“Button-clicking callback”到控制台；取消按钮点击后会触发回调函数，输出“Closed callbacks”到控制台。",
            "code": "import { router } from '@kit.ArkUI'; // 导入ArkUI的路由模块\n\n@Entry // 标记该组件为入口组件\n@Component // 标记该组件为ArkUI组件\nstruct AlertDialogExample {\n  build() {\n    Column({ space: 5 }) { // 创建一个垂直布局的Column组件，组件之间的间距为5vp\n      Button('AlertDialog Set Duration') // 创建一个按钮，按钮文本为“AlertDialog Set Duration”\n        .onClick(()=>{ // 为按钮添加点击事件\n          AlertDialog.show( // 显示一个AlertDialog\n            {\n              title: 'AlertDialog 1', // AlertDialog的标题\n              message: 'Set Animation Duration open 3 second, close 100ms', // AlertDialog的内容\n              autoCancel: true, // 设置AlertDialog自动取消\n              alignment: DialogAlignment.Top, // 设置AlertDialog的对齐方式为顶部对齐\n              offset: { dx: 0, dy: -20 }, // 设置AlertDialog的偏移量，顶部偏移-20vp\n              gridCount: 3, // 设置AlertDialog的网格数量\n              transition:TransitionEffect.asymmetric( // 设置AlertDialog的动画效果\n                TransitionEffect.OPACITY // 设置透明度动画\n                  .animation({ duration: 3000, curve: Curve.Sharp }) // 显示动画持续3秒，曲线为Sharp\n                  .combine(TransitionEffect.scale({x: 1.5, y: 1.5}) // 组合缩放动画，缩放比例为1.5倍\n                    .animation({duration: 3000, curve: Curve.Sharp})), // 显示动画持续3秒，曲线为Sharp\n                TransitionEffect.OPACITY // 设置透明度动画\n                  .animation({ duration: 100, curve: Curve.Smooth }) // 退出动画持续100毫秒，曲线为Smooth\n                  .combine(TransitionEffect.scale({x: 0.5, y: 0.5}) // 组合缩放动画，缩放比例为0.5倍\n                    .animation({duration: 100, curve: Curve.Smooth}))), // 退出动画持续100毫秒，曲线为Smooth\n              confirm: { // 设置确认按钮\n                value: 'button', // 确认按钮的文本\n                action: () => { // 确认按钮的点击事件\n                  console.info('Button-clicking callback') // 输出“Button-clicking callback”到控制台\n                }\n              },\n              cancel: () => { // 设置取消按钮的点击事件\n                console.info('Closed callbacks') // 输出“Closed callbacks”到控制台\n              }\n            }\n          )\n        })\n        .backgroundColor(0x317aff) // 设置按钮的背景颜色为0x317aff\n        .height(\"88px\") // 设置按钮的高度为88vp\n    }.width('100%').margin({ top: 5 }) // 设置Column的宽度为100%，顶部边距为5vp\n  }\n}"
        },
        {
            "description": "该组件通过Column布局实现了一个展示三种不同按钮弹窗的界面。布局宽度占据整个屏幕，内边距为顶部5vp。组件的垂直方向上被分为三个部分，每个部分包含一个按钮。每个按钮的点击事件会触发一个弹窗，弹窗的内容和按钮数量根据按钮的不同而变化。\n按钮的样式包括背景颜色为0x317aff，按钮之间的间距为5vp。弹窗的样式包括标题、副标题、消息内容、对齐方式、偏移量、按钮方向等属性，支持不同的样式展示。弹窗的功能包括点击按钮的回调事件、取消弹窗的回调事件、以及弹窗即将消失时的回调事件。\n整个布局通过Column布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct AlertDialogExample {\n  build() {\n    Column({ space: 5 }) { // 使用Column布局，设置组件之间的间距为5vp\n      Button('one button dialog') // 创建一个按钮，文本为\"one button dialog\"\n        .onClick(() => { // 设置按钮的点击事件\n          AlertDialog.show( // 显示一个弹窗\n            {\n              title: 'title', // 弹窗的标题\n              message: 'text', // 弹窗的消息内容\n              autoCancel: true, // 设置弹窗是否自动取消\n              alignment: DialogAlignment.Bottom, // 设置弹窗的对齐方式为底部\n              offset: { dx: 0, dy: -20 }, // 设置弹窗的偏移量\n              gridCount: 3, // 设置弹窗的网格数量\n              confirm: { // 设置弹窗的确认按钮\n                value: 'button', // 确认按钮的文本\n                action: () => { // 确认按钮的点击事件\n                  console.info('Button-clicking callback') // 打印日志\n                }\n              },\n              cancel: () => { // 设置弹窗的取消回调事件\n                console.info('Closed callbacks') // 打印日志\n              },\n              onWillDismiss:(dismissDialogAction: DismissDialogAction)=> { // 设置弹窗即将消失时的回调事件\n                console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 打印消失原因\n                console.log(\"dialog onWillDismiss\") // 打印日志\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) { // 如果消失原因是按下返回键\n                  dismissDialogAction.dismiss() // 取消弹窗\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) { // 如果消失原因是点击弹窗外部\n                  dismissDialogAction.dismiss() // 取消弹窗\n                }\n              }\n            }\n          )\n        })\n        .backgroundColor(0x317aff) // 设置按钮的背景颜色\n\n      Button('two button dialog') // 创建一个按钮，文本为\"two button dialog\"\n        .onClick(() => { // 设置按钮的点击事件\n          AlertDialog.show( // 显示一个弹窗\n            {\n              title: 'title', // 弹窗的标题\n              subtitle: 'subtitle', // 弹窗的副标题\n              message: 'text', // 弹窗的消息内容\n              autoCancel: true, // 设置弹窗是否自动取消\n              alignment: DialogAlignment.Bottom, // 设置弹窗的对齐方式为底部\n              gridCount: 4, // 设置弹窗的网格数量\n              offset: { dx: 0, dy: -20 }, // 设置弹窗的偏移量\n              primaryButton: { // 设置弹窗的主按钮\n                value: 'cancel', // 主按钮的文本\n                action: () => { // 主按钮的点击事件\n                  console.info('Callback when the first button is clicked') // 打印日志\n                }\n              },\n              secondaryButton: { // 设置弹窗的次按钮\n                enabled: true, // 设置次按钮是否启用\n                defaultFocus: true, // 设置次按钮是否默认聚焦\n                style: DialogButtonStyle.HIGHLIGHT, // 设置次按钮的样式\n                value: 'ok', // 次按钮的文本\n                action: () => { // 次按钮的点击事件\n                  console.info('Callback when the second button is clicked') // 打印日志\n                }\n              },\n              cancel: () => { // 设置弹窗的取消回调事件\n                console.info('Closed callbacks') // 打印日志\n              },\n              onWillDismiss:(dismissDialogAction: DismissDialogAction)=> { // 设置弹窗即将消失时的回调事件\n                console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 打印消失原因\n                console.log(\"dialog onWillDismiss\") // 打印日志\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) { // 如果消失原因是按下返回键\n                  dismissDialogAction.dismiss() // 取消弹窗\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) { // 如果消失原因是点击弹窗外部\n                  dismissDialogAction.dismiss() // 取消弹窗\n                }\n              }\n            }\n          )\n        }).backgroundColor(0x317aff) // 设置按钮的背景颜色\n\n      Button('three button dialog') // 创建一个按钮，文本为\"three button dialog\"\n        .onClick(() => { // 设置按钮的点击事件\n          AlertDialog.show( // 显示一个弹窗\n            {\n              title: 'title', // 弹窗的标题\n              subtitle: 'subtitle', // 弹窗的副标题\n              message: 'text', // 弹窗的消息内容\n              autoCancel: true, // 设置弹窗是否自动取消\n              alignment: DialogAlignment.Bottom, // 设置弹窗的对齐方式为底部\n              gridCount: 4, // 设置弹窗的网格数量\n              offset: { dx: 0, dy: -20 }, // 设置弹窗的偏移量\n              buttonDirection: DialogButtonDirection.HORIZONTAL, // 设置按钮的方向为水平\n              buttons: [ // 设置弹窗的按钮数组\n                {\n                  value: '按钮', // 按钮的文本\n                  action: () => { // 按钮的点击事件\n                    console.info('Callback when button1 is clicked') // 打印日志\n                  }\n                },\n                {\n                  value: '按钮', // 按钮的文本\n                  action: () => { // 按钮的点击事件\n                    console.info('Callback when button2 is clicked') // 打印日志\n                  }\n                },\n                {\n                  value: '按钮', // 按钮的文本\n                  enabled: true, // 设置按钮是否启用\n                  defaultFocus: true, // 设置按钮是否默认聚焦\n                  style: DialogButtonStyle.HIGHLIGHT, // 设置按钮的样式\n                  action: () => { // 按钮的点击事件\n                    console.info('Callback when button3 is clicked') // 打印日志\n                  }\n                },\n              ],\n              cancel: () => { // 设置弹窗的取消回调事件\n                console.info('Closed callbacks') // 打印日志\n              },\n              onWillDismiss:(dismissDialogAction: DismissDialogAction)=> { // 设置弹窗即将消失时的回调事件\n                console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 打印消失原因\n                console.log(\"dialog onWillDismiss\") // 打印日志\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) { // 如果消失原因是按下返回键\n                  dismissDialogAction.dismiss() // 取消弹窗\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) { // 如果消失原因是点击弹窗外部\n                  dismissDialogAction.dismiss() // 取消弹窗\n                }\n              }\n            }\n          )\n        }).backgroundColor(0x317aff) // 设置按钮的背景颜色\n    }.width('100%').margin({ top: 5 }) // 设置Column的宽度为100%，顶部边距为5vp\n  }\n}"
        }
    ],
    "is_common_attrs": true
}