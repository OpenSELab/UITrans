{
    "description": "数据量规图表组件，用于将数据展示为环形图表。",
    "details": "可以包含单个子组件。建议使用文本组件构建当前数值文本和辅助文本。若子组件宽高为百分比形式，则基准范围为以外圆环做为内切圆的矩形。",
    "interfaces": [
        {
            "description": "Gauge(options:{value: number, min?: number, max?: number})",
            "params": {
                "options": {
                    "type": {
                        "value": "number",
                        "min": "number",
                        "max": "number"
                    },
                    "required": true,
                    "description": "创建数据量规图表组件。"
                }
            }
        }
    ],
    "attributes": {
        "value": {
            "description": "设置量规图的数据值。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "量规图的数据值，可用于动态修改量规图的数据值。",
                    "default": 0
                }
            }
        },
        "startAngle": {
            "description": "设置起始角度位置。",
            "params": {
                "angle": {
                    "type": "number",
                    "required": true,
                    "description": "起始角度位置，时钟0点为0度，顺时针方向为正角度。",
                    "default": 0
                }
            }
        },
        "endAngle": {
            "description": "设置终止角度位置。",
            "params": {
                "angle": {
                    "type": "number",
                    "required": true,
                    "description": "终止角度位置，时钟0点为0度，顺时针方向为正角度。",
                    "default": 360
                }
            }
        },
        "colors": {
            "description": "设置量规图的颜色。",
            "params": {
                "colors": {
                    "type": [
                        "ResourceColor",
                        "LinearGradient",
                        {
                            "ResourceColor": "number",
                            "LinearGradient": "number"
                        }
                    ],
                    "required": true,
                    "description": "量规图的颜色。"
                }
            }
        },
        "strokeWidth": {
            "description": "设置环形量规图的环形厚度。",
            "params": {
                "length": {
                    "type": "Length",
                    "required": true,
                    "description": "环形量规图的环形厚度。",
                    "default": 4
                }
            }
        },
        "description": {
            "description": "设置说明内容。",
            "params": {
                "value": {
                    "type": "CustomBuilder",
                    "required": true,
                    "description": "说明内容。"
                }
            }
        },
        "trackShadow": {
            "description": "设置阴影样式。",
            "params": {
                "value": {
                    "type": "GaugeShadowOptions",
                    "required": true,
                    "description": "阴影样式。"
                }
            }
        },
        "indicator": {
            "description": "设置指针样式。",
            "params": {
                "value": {
                    "type": "GaugeIndicatorOptions",
                    "required": true,
                    "description": "指针样式。"
                }
            }
        },
        "privacySensitive": {
            "description": "设置隐私敏感。",
            "params": {
                "isPrivacySensitiveMode": {
                    "type": "Optional<boolean>",
                    "required": true,
                    "description": "设置隐私敏感，隐私模式下Gauge指针指向0位置，最大值最小值文本将被遮罩，量程显示灰色或者底色。"
                }
            }
        },
        "contentModifier": {
            "description": "定制Slider内容区的方法。",
            "params": {
                "modifier": {
                    "type": "ContentModifier<GaugeConfiguration>",
                    "required": true,
                    "description": "定制内容区的方法。"
                }
            }
        }
    },
    "events": {},
    "rules": null,
    "examples": [
        {
            "description": "该示例展示了如何在鸿蒙ArkUI中配置隐私隐藏功能，并使用Gauge组件展示数据。布局采用Scroll和Column嵌套，确保内容在垂直方向上可滚动，并且各组件之间有适当的间距。Gauge组件用于展示一个从1到100的数值，当前值为50。Gauge组件的外观通过设置起始角度、结束角度、颜色、宽度、高度、描边宽度、阴影等属性进行定制。Text组件嵌套在Gauge组件内部，用于显示具体的数值，并通过设置字体大小、颜色、对齐方式、溢出处理等属性进行样式定制。整个布局通过Row组件进行水平排列，确保Gauge组件在水平方向上居中显示。隐私隐藏功能通过设置privacySensitive属性为true来实现，确保在需要时隐藏敏感数据。",
            "code": "@Entry\n@Component\nstruct GaugeExample {\n  build() {\n    Scroll() { // 创建一个可滚动的容器\n      Column({ space: 15 }) { // 创建一个垂直布局的容器，组件之间间距为15vp\n        Row() { // 创建一个水平布局的容器\n          Gauge({ value: 50, min: 1, max: 100 }) { // 创建一个Gauge组件，当前值为50，最小值为1，最大值为100\n            Column() { // 创建一个垂直布局的容器\n              Text('60') // 创建一个Text组件，显示数值60\n                .maxFontSize(\"180sp\") // 设置字体最大尺寸为180sp\n                .minFontSize(\"160.0vp\") // 设置字体最小尺寸为160vp\n                .fontWeight(FontWeight.Medium) // 设置字体粗细为中等\n                .fontColor(\"#ff182431\") // 设置字体颜色为#ff182431\n                .width('40%') // 设置Text组件的宽度为父容器的40%\n                .height('30%') // 设置Text组件的高度为父容器的30%\n                .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n                .margin({ top: '22.2%' }) // 设置顶部外边距为父容器的22.2%\n                .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n                .maxLines(1) // 设置最大显示行数为1行\n            }.width('100%').height('100%') // 设置Column容器的宽度和高度为父容器的100%\n          }\n          .startAngle(225) // 设置Gauge组件的起始角度为225度\n          .endAngle(135) // 设置Gauge组件的结束角度为135度\n          .colors(Color.Red) // 设置Gauge组件的颜色为红色\n          .width('80%') // 设置Gauge组件的宽度为父容器的80%\n          .height('80%') // 设置Gauge组件的高度为父容器的80%\n          .strokeWidth(18) // 设置Gauge组件的描边宽度为18vp\n          .trackShadow({ radius: 7, offsetX: 7, offsetY: 7 }) // 设置Gauge组件的阴影效果，半径为7vp，偏移量为(7vp, 7vp)\n          .padding(18) // 设置Gauge组件的内边距为18vp\n          .privacySensitive(true) // 设置Gauge组件为隐私敏感，启用隐私隐藏功能\n        }\n      }\n    }\n  }\n}"
        },
        {
            "description": "该组件通过 Column 布局实现了一个展示当前数值的仪表盘界面。布局宽度占据整个屏幕，高度设为 100%，内边距为顶部 40vp。组件的垂直方向上被分为一个部分，包含一个 Gauge 组件和一个 Text 组件。\nGauge 组件用于展示当前数值，其宽度为 80%，高度为 80%，颜色为红色，指示器为空，线条宽度为 18vp，轨道阴影半径为 7vp，偏移量为 7vp。Gauge 组件的开始角度为 225 度，结束角度为 135 度，表示一个半圆形的仪表盘。\nText 组件用于显示当前数值，其字体大小范围为 30.0vp 到 60sp，字体颜色为 #ff182431，字体粗细为中等，宽度为 62%，文本对齐方式为居中，文本溢出时显示省略号，最大行数为 1。Text 组件的顶部边距为 35%，确保其在 Gauge 组件的中心位置显示。\n整个布局通过 Column 布局保证 Gauge 和 Text 组件在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct Gauge7 {\n  build() {\n    Column() {\n      Gauge({ value: 50, min: 1, max: 100 }) { // 创建一个 Gauge 组件，当前值为 50，最小值为 1，最大值为 100\n        Column() {\n          Text('50') // 创建一个 Text 组件，显示当前值 50\n            .maxFontSize('60sp') // 设置 Text 组件的最大字体大小为 60sp\n            .minFontSize('30.0vp') // 设置 Text 组件的最小字体大小为 30.0vp\n            .fontWeight(FontWeight.Medium) // 设置 Text 组件的字体粗细为中等\n            .fontColor(\"#ff182431\") // 设置 Text 组件的字体颜色为 #ff182431\n            .width('62%') // 设置 Text 组件的宽度为 62%\n            .textAlign(TextAlign.Center) // 设置 Text 组件的文本对齐方式为居中\n            .margin({ top: '35%' }) // 设置 Text 组件的顶部边距为 35%\n            .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置 Text 组件的文本溢出时显示省略号\n            .maxLines(1) // 设置 Text 组件的最大行数为 1\n        }.width('100%').height('100%') // 设置 Column 组件的宽度和高度为 100%\n      }\n      .startAngle(225) // 设置 Gauge 组件的开始角度为 225 度\n      .endAngle(135) // 设置 Gauge 组件的结束角度为 135 度\n      .colors(Color.Red) // 设置 Gauge 组件的颜色为红色\n      .width('80%') // 设置 Gauge 组件的宽度为 80%\n      .height('80%') // 设置 Gauge 组件的高度为 80%\n      .indicator(null) // 设置 Gauge 组件的指示器为空\n      .strokeWidth(18) // 设置 Gauge 组件的线条宽度为 18vp\n      .trackShadow({ radius: 7, offsetX: 7, offsetY: 7 }) // 设置 Gauge 组件的轨道阴影半径为 7vp，偏移量为 7vp\n      .padding(18) // 设置 Gauge 组件的内边距为 18vp\n    }.margin({ top: 40 }).width('100%').height('100%') // 设置 Column 组件的顶部边距为 40vp，宽度和高度为 100%\n  }\n}"
        },
        {
            "description": "该组件通过 Column 布局实现了一个带有图标和数值的仪表盘界面。布局宽度占据整个屏幕，高度设为 100%，内边距为顶部 40vp。组件的垂直方向上被分为两个主要部分：一个 Gauge 组件和一个 Image 组件。\n\nGauge 组件用于展示当前数值，其宽度为 80%，高度为 80%，内边距为 18vp。Gauge 组件的样式包括颜色、起始角度、结束角度、描边宽度等属性。数值文本通过 Text 组件展示，字体颜色为 #ff182431，字体大小在 30.0vp 到 60.0vp 之间动态调整，文本对齐方式为居中对齐，最大行数为 1，文本溢出时显示省略号。\n\nImage 组件用于展示图标，宽度为 72vp，高度为 72vp。图标的资源名为 $r('sys.media.ohos_ic_public_clock')。\n\n整个布局通过 Column 布局保证 Gauge 和 Image 在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct Gauge2 {\n  // 定义一个 Builder 方法，用于生成 Image 组件\n  @Builder descriptionBuilderImage() {\n    Image($r('sys.media.ohos_ic_public_clock')) // 使用系统资源中的图标\n      .width(72) // 设置图标的宽度为 72vp\n      .height(72) // 设置图标的高度为 72vp\n  }\n\n  build() {\n    Column() {\n      Gauge({ value: 50, min: 1, max: 100 }) { // 创建一个 Gauge 组件，当前值为 50，最小值为 1，最大值为 100\n        Column() {\n          Text('50') // 显示当前数值 50\n            .fontWeight(FontWeight.Medium) // 设置字体粗细为中等\n            .width('62%') // 设置文本宽度为 62%\n            .fontColor(\"#ff182431\") // 设置字体颜色为 #ff182431\n            .maxFontSize(\"60.0vp\") // 设置最大字体大小为 60.0vp\n            .minFontSize(\"30.0vp\") // 设置最小字体大小为 30.0vp\n            .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n            .margin({ top: '35%' }) // 设置顶部边距为 35%\n            .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n            .maxLines(1) // 设置最大行数为 1\n        }.width('100%').height('100%') // 设置 Column 的宽度和高度为 100%\n      }\n      .startAngle(210) // 设置 Gauge 的起始角度为 210 度\n      .endAngle(150) // 设置 Gauge 的结束角度为 150 度\n      .colors('#cca5d61d') // 设置 Gauge 的颜色为 #cca5d61d\n      .width('80%') // 设置 Gauge 的宽度为 80%\n      .height('80%') // 设置 Gauge 的高度为 80%\n      .strokeWidth(18) // 设置 Gauge 的描边宽度为 18vp\n      .description(this.descriptionBuilderImage) // 设置 Gauge 的描述为 descriptionBuilderImage 方法生成的 Image 组件\n      .padding(18) // 设置 Gauge 的内边距为 18vp\n    }.margin({ top: 40 }) // 设置 Column 的顶部边距为 40vp\n    .width('100%') // 设置 Column 的宽度为 100%\n    .height('100%') // 设置 Column 的高度为 100%\n  }\n}"
        },
        {
            "description": "该组件通过 Column 布局实现了一个展示当前数值的仪表盘界面。布局宽度占据整个屏幕，高度设为 100%，内边距为顶部 40vp。组件的垂直方向上被分为一个 Gauge 组件和一个嵌套的 Text 组件。Gauge 组件用于展示当前数值的进度条，Text 组件用于显示当前数值。\n\nGauge 组件的布局宽度为 80%，高度为 80%，内边距为 18vp。Gauge 组件的进度条从 225 度开始，到 135 度结束，形成一个半圆形的进度条。进度条的颜色通过 LinearGradient 实现，从红色（#e84026）到黄色（#f7ce00）再到绿色（#64bb5c）渐变。进度条的宽度为 18vp，并带有阴影效果，阴影半径为 7vp，偏移量为 (7vp, 7vp)。\n\nText 组件的布局宽度为 40%，高度为 30%，字体大小在 60.0vp 到 80sp 之间动态调整，字体颜色为 #ff182431，字体粗细为 Medium。文本内容居中对齐，最大显示行数为 1 行，超出部分以省略号显示。文本组件的顶部外边距为 22.2%。\n\n整个布局通过 Column 布局保证 Gauge 和 Text 组件在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct Gauge5 {\n  build() {\n    Column() {\n      Gauge({ value: 50, min: 1, max: 100 }) { // 创建一个 Gauge 组件，当前值为 50，最小值为 1，最大值为 100\n        Column() {\n          Text('50') // 创建一个 Text 组件，显示当前值 50\n            .maxFontSize(\"80sp\") // 设置 Text 组件的最大字体大小为 80sp\n            .minFontSize(\"60.0vp\") // 设置 Text 组件的最小字体大小为 60.0vp\n            .fontWeight(FontWeight.Medium) // 设置 Text 组件的字体粗细为 Medium\n            .fontColor(\"#ff182431\") // 设置 Text 组件的字体颜色为 #ff182431\n            .width('40%') // 设置 Text 组件的宽度为 40%\n            .height('30%') // 设置 Text 组件的高度为 30%\n            .textAlign(TextAlign.Center) // 设置 Text 组件的文本对齐方式为居中对齐\n            .margin({ top: '22.2%' }) // 设置 Text 组件的顶部外边距为 22.2%\n            .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置 Text 组件的文本溢出处理方式为省略号\n            .maxLines(1) // 设置 Text 组件的最大显示行数为 1 行\n        }.width('100%').height('100%') // 设置 Column 组件的宽度为 100%，高度为 100%\n      }\n      .startAngle(225) // 设置 Gauge 组件的起始角度为 225 度\n      .endAngle(135) // 设置 Gauge 组件的结束角度为 135 度\n      .colors(new LinearGradient([{ color: \"#e84026\", offset: 0 }, // 设置 Gauge 组件的颜色渐变，从红色 (#e84026) 开始\n        { color: \"#f7ce00\", offset: 0.6 }, // 到黄色 (#f7ce00)，偏移量为 0.6\n        { color: \"#64bb5c\", offset: 1 }])) // 到绿色 (#64bb5c)，偏移量为 1\n      .width('80%') // 设置 Gauge 组件的宽度为 80%\n      .height('80%') // 设置 Gauge 组件的高度为 80%\n      .strokeWidth(18) // 设置 Gauge 组件的进度条宽度为 18vp\n      .trackShadow({ radius: 7, offsetX: 7, offsetY: 7 }) // 设置 Gauge 组件的进度条阴影效果，阴影半径为 7vp，偏移量为 (7vp, 7vp)\n      .padding(18) // 设置 Gauge 组件的内边距为 18vp\n    }.margin({ top: 40 }).width('100%').height('100%') // 设置 Column 组件的顶部外边距为 40vp，宽度为 100%，高度为 100%\n  }\n}"
        },
        {
            "description": "该组件通过Column布局实现了一个包含Gauge（仪表盘）和按钮的界面。布局宽度占据整个屏幕，内边距为20vp，外边距顶部为5vp。组件的垂直方向上被分为两个主要部分：Gauge显示部分和按钮操作部分。\n\nGauge显示部分包含一个Gauge组件，其宽度为50%，显示当前值、最小值和最大值。Gauge组件的值、最小值和最大值通过@State变量动态更新。Gauge组件的样式通过自定义的MyGaugeStyle类进行修饰，该类实现了ContentModifier接口，用于在Gauge组件上应用自定义的样式和内容。\n\n按钮操作部分包含两个按钮，分别用于增加和减少Gauge的值。按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮的功能包括点击事件，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n\n整个布局通过Column布局保证Gauge和按钮在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Builder\nfunction buildGauge(config: GaugeConfiguration) {\n  Column({ space: 30 }) {\n    Row() {\n      Text('【ContentModifier】 value：' + JSON.stringify((config.contentModifier as MyGaugeStyle).value) +\n        '  min：' + JSON.stringify((config.contentModifier as MyGaugeStyle).min) +\n        '  max：' + JSON.stringify((config.contentModifier as MyGaugeStyle).max))\n        .fontSize(12) // 设置文本字体大小为12\n    }\n\n    Text('【Config】value：' + config.value + '  min：' + config.min + '  max：' + config.max).fontSize(12) // 设置文本字体大小为12\n    Gauge({\n      value: config.value, // 设置Gauge的当前值\n      min: config.min, // 设置Gauge的最小值\n      max: config.max // 设置Gauge的最大值\n    }).width(\"50%\") // 设置Gauge的宽度为50%\n  }\n  .width(\"100%\") // 设置Column的宽度为100%\n  .padding(20) // 设置Column的内边距为20vp\n  .margin({ top: 5 }) // 设置Column的上外边距为5vp\n  .alignItems(HorizontalAlign.Center) // 设置Column的子组件水平居中对齐\n}\n\nclass MyGaugeStyle implements ContentModifier<GaugeConfiguration> {\n  value: number = 0 // 初始化Gauge的当前值\n  min: number = 0 // 初始化Gauge的最小值\n  max: number = 0 // 初始化Gauge的最大值\n\n  constructor(value: number, min: number, max: number) {\n    this.value = value // 设置Gauge的当前值\n    this.min = min // 设置Gauge的最小值\n    this.max = max // 设置Gauge的最大值\n  }\n\n  applyContent(): WrappedBuilder<[GaugeConfiguration]> {\n    return wrapBuilder(buildGauge) // 返回一个包装后的buildGauge函数，用于应用自定义样式\n  }\n}\n\n@Entry\n@Component\nstruct refreshExample {\n  @State gaugeValue: number = 20 // 初始化Gauge的当前值为20\n  @State gaugeMin: number = 0 // 初始化Gauge的最小值为0\n  @State gaugeMax: number = 100 // 初始化Gauge的最大值为100\n\n  build() {\n    Column({ space: 20 }) {\n      Gauge({\n        value: this.gaugeValue, // 设置Gauge的当前值\n        min: this.gaugeMin, // 设置Gauge的最小值\n        max: this.gaugeMax // 设置Gauge的最大值\n      })\n        .contentModifier(new MyGaugeStyle(30, 10, 100)) // 应用自定义的MyGaugeStyle样式\n\n      Column({ space: 20 }) {\n        Row({ space: 20 }) {\n          Button('增加').onClick(() => {\n            if (this.gaugeValue < this.gaugeMax) {\n              this.gaugeValue += 1 // 增加Gauge的当前值\n            }\n          })\n          Button('减少').onClick(() => {\n            if (this.gaugeValue > this.gaugeMin) {\n              this.gaugeValue -= 1 // 减少Gauge的当前值\n            }\n          })\n        }\n      }.width('100%') // 设置Column的宽度为100%\n    }.width('100%').margin({ top: 5 }) // 设置Column的宽度为100%，上外边距为5vp\n  }\n}"
        },
        {
            "description": "该组件通过 Column 布局实现了一个带有刻度盘（Gauge）的界面，刻度盘用于显示当前数值，并附带辅助文本。布局宽度占据整个屏幕，高度设为 100%，内边距为顶部 40vp。组件的垂直方向上被分为一个 Gauge 组件和一个包含两个 Text 组件的 Column 组件。Gauge 组件的宽度为 80%，高度为 80%，刻度盘的起始角度为 225 度，结束角度为 135 度，颜色为红色，指示器为空，线条宽度为 18vp，轨道阴影半径为 7vp，偏移量为 (7vp, 7vp)，内边距为 18vp。\n\nGauge 组件内部嵌套了一个 Column 组件，用于显示当前数值和辅助文本。当前数值的 Text 组件字体大小范围为 30.0vp 到 60sp，字体颜色为 #ff182431，宽度为 62%，文本对齐方式为居中对齐，上边距为 35%，文本溢出时显示省略号，最大行数为 1。辅助文本的 Text 组件字体大小范围为 10.0vp 到 16sp，字体颜色为系统颜色 $r('sys.color.ohos_id_color_text_secondary')，宽度为 67.4%，高度为 9.5%，文本对齐方式为居中对齐。\n\n整个布局通过 Column 布局保证 Gauge 和 Text 组件在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct Gauge6 {\n  build() {\n    Column() {\n      Gauge({ value: 50, min: 1, max: 100 }) { // 创建一个 Gauge 组件，当前值为 50，最小值为 1，最大值为 100\n        Column() {\n          Text('50') // 显示当前数值的 Text 组件\n            .maxFontSize('60sp') // 设置最大字体大小为 60sp\n            .minFontSize('30.0vp') // 设置最小字体大小为 30.0vp\n            .fontWeight(FontWeight.Medium) // 设置字体粗细为中等\n            .fontColor(\"#ff182431\") // 设置字体颜色为 #ff182431\n            .width('62%') // 设置宽度为 62%\n            .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n            .margin({ top: '35%' }) // 设置上边距为 35%\n            .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n            .maxLines(1) // 设置最大行数为 1\n          Text('辅助文本') // 显示辅助文本的 Text 组件\n            .maxFontSize('16sp') // 设置最大字体大小为 16sp\n            .minFontSize(\"10.0vp\") // 设置最小字体大小为 10.0vp\n            .fontColor($r('sys.color.ohos_id_color_text_secondary')) // 设置字体颜色为系统次要文本颜色\n            .fontWeight(FontWeight.Regular) // 设置字体粗细为常规\n            .width('67.4%') // 设置宽度为 67.4%\n            .height('9.5%') // 设置高度为 9.5%\n            .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n        }.width('100%').height('100%') // 设置 Column 组件的宽度和高度为 100%\n      }\n      .startAngle(225) // 设置 Gauge 的起始角度为 225 度\n      .endAngle(135) // 设置 Gauge 的结束角度为 135 度\n      .colors(Color.Red) // 设置 Gauge 的颜色为红色\n      .width('80%') // 设置 Gauge 的宽度为 80%\n      .height('80%') // 设置 Gauge 的高度为 80%\n      .indicator(null) // 设置 Gauge 的指示器为空\n      .strokeWidth(18) // 设置 Gauge 的线条宽度为 18vp\n      .trackShadow({ radius: 7, offsetX: 7, offsetY: 7 }) // 设置 Gauge 的轨道阴影半径为 7vp，偏移量为 (7vp, 7vp)\n      .padding(18) // 设置 Gauge 的内边距为 18vp\n    }.margin({ top: 40 }).width('100%').height('100%') // 设置 Column 组件的上边距为 40vp，宽度和高度为 100%\n  }\n}"
        },
        {
            "description": "该组件通过Column布局实现了一个带有说明文本和当前数值的仪表盘界面。布局宽度占据整个屏幕，高度设为100%，内边距为18vp。组件的垂直方向上被分为两个部分：一个包含当前数值的仪表盘，另一个是说明文本。\n\n仪表盘部分通过Gauge组件实现，宽度为80%，高度为80%，内边距为18vp。仪表盘的样式包括渐变颜色、起始角度、结束角度、描边宽度等属性，支持不同的样式展示。仪表盘的当前数值显示在中心位置，字体颜色为深蓝色，字体大小根据屏幕大小自适应调整。\n\n说明文本部分通过Text组件实现，宽度为100%，高度为100%，字体颜色为红色，字体大小根据屏幕大小自适应调整，文本居中对齐。\n\n整个布局通过Column布局保证仪表盘和说明文本在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct Gauge3 {\n  // 定义一个Builder方法，用于生成说明文本\n  @Builder descriptionBuilder() {\n    Text('说明文本')\n      .maxFontSize('30sp') // 设置最大字体大小为30sp\n      .minFontSize(\"10.0vp\") // 设置最小字体大小为10.0vp\n      .fontColor(\"#fffa2a2d\") // 设置字体颜色为红色\n      .fontWeight(FontWeight.Medium) // 设置字体粗细为中等\n      .width('100%') // 设置宽度为100%\n      .height(\"100%\") // 设置高度为100%\n      .textAlign(TextAlign.Center) // 设置文本居中对齐\n  }\n\n  build() {\n    Column() {\n      Column() {\n        Gauge({ value: 50, min: 1, max: 100 }) {\n          Column() {\n            Text('50')\n              .fontWeight(FontWeight.Medium) // 设置字体粗细为中等\n              .width('62%') // 设置宽度为62%\n              .fontColor(\"#ff182431\") // 设置字体颜色为深蓝色\n              .maxFontSize(\"60.0vp\") // 设置最大字体大小为60.0vp\n              .minFontSize(\"30.0vp\") // 设置最小字体大小为30.0vp\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n              .margin({ top: '35%' }) // 设置上边距为35%\n              .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n              .maxLines(1) // 设置最大行数为1\n          }.width('100%').height('100%') // 设置宽度为100%，高度为100%\n        }\n        .startAngle(210) // 设置仪表盘的起始角度为210度\n        .endAngle(150) // 设置仪表盘的结束角度为150度\n        .colors([\n          [new LinearGradient([{ color: \"#deb6fb\", offset: 0 }, { color: \"#ac49f5\", offset: 1 }]), 9],\n          [new LinearGradient([{ color: \"#bbb7fc\", offset: 0 }, { color: \"#564af7\", offset: 1 }]), 8],\n          [new LinearGradient([{ color: \"#f5b5c2\", offset: 0 }, { color: \"#e64566\", offset: 1 }]), 7],\n          [new LinearGradient([{ color: \"#f8c5a6\", offset: 0 }, { color: \"#ed6f21\", offset: 1 }]), 6],\n          [new LinearGradient([{ color: \"#fceb99\", offset: 0 }, { color: \"#f7ce00\", offset: 1 }]), 5],\n          [new LinearGradient([{ color: \"#dbefa5\", offset: 0 }, { color: \"#a5d61d\", offset: 1 }]), 4],\n          [new LinearGradient([{ color: \"#c1e4be\", offset: 0 }, { color: \"#64bb5c\", offset: 1 }]), 3],\n          [new LinearGradient([{ color: \"#c0ece5\", offset: 0 }, { color: \"#61cfbe\", offset: 1 }]), 2],\n          [new LinearGradient([{ color: \"#b5e0f4\", offset: 0 }, { color: \"#46b1e3\", offset: 1 }]), 1]\n        ]) // 设置仪表盘的渐变颜色\n        .width('80%') // 设置宽度为80%\n        .height('80%') // 设置高度为80%\n        .strokeWidth(18) // 设置描边宽度为18\n        .description(this.descriptionBuilder) // 设置仪表盘的说明文本\n        .trackShadow({ radius: 7, offsetX: 7, offsetY: 7 }) // 设置仪表盘的阴影效果\n        .padding(18) // 设置内边距为18vp\n      }.margin({ top: 40 }).width('100%').height('100%') // 设置上边距为40vp，宽度为100%，高度为100%\n    }\n  }\n}"
        },
        {
            "description": "该组件通过Column布局实现了一个带有刻度盘（Gauge）和辅助文本的界面。布局宽度占据整个屏幕，高度设为100%，内边距为顶部40vp。组件的垂直方向上被分为一个Gauge组件和一个包含当前数值和辅助文本的Column组件。\n\nGauge组件的样式包括刻度盘的开始角度（startAngle）和结束角度（endAngle），刻度盘的颜色通过线性渐变（LinearGradient）实现，刻度盘的宽度（strokeWidth）为18vp，刻度盘的阴影效果通过trackShadow属性设置。Gauge组件的宽度为80%，高度为80%，内边距为18vp。\n\n当前数值和辅助文本通过Text组件展示，当前数值的文本大小范围为10.0vp到72.0vp，字体颜色为#ff182431，文本对齐方式为居中对齐，文本溢出时显示省略号，最大行数为1。辅助文本的文本大小范围为18.0vp到30.0vp，字体加粗，字体颜色为系统次要文本颜色（$r('sys.color.ohos_id_color_text_secondary')），文本对齐方式为居中对齐。\n\n整个布局通过Column布局保证Gauge和文本在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct Gauge4 {\n  build() {\n    Column() {\n      Gauge({ value: 50, min: 1, max: 100 }) { // 创建一个刻度盘组件，当前值为50，最小值为1，最大值为100\n        Column() {\n          Text('50') // 显示当前数值\n            .maxFontSize(\"72.0vp\") // 设置文本最大字体大小为72.0vp\n            .minFontSize(\"10.0vp\") // 设置文本最小字体大小为10.0vp\n            .fontColor(\"#ff182431\") // 设置文本颜色为#ff182431\n            .width('40%') // 设置文本宽度为40%\n            .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n            .margin({ top: '35%' }) // 设置文本顶部外边距为35%\n            .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n            .maxLines(1) // 设置文本最大行数为1\n          Text('辅助文本') // 显示辅助文本\n            .maxFontSize(\"30.0vp\") // 设置文本最大字体大小为30.0vp\n            .minFontSize(\"18.0vp\") // 设置文本最小字体大小为18.0vp\n            .fontWeight(FontWeight.Medium) // 设置文本字体加粗\n            .fontColor($r('sys.color.ohos_id_color_text_secondary')) // 设置文本颜色为系统次要文本颜色\n            .width('62%') // 设置文本宽度为62%\n            .height('15.9%') // 设置文本高度为15.9%\n            .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n        }.width('100%').height('100%') // 设置Column的宽度和高度为100%\n      }\n      .startAngle(210) // 设置刻度盘的开始角度为210度\n      .endAngle(150) // 设置刻度盘的结束角度为150度\n      .colors([[new LinearGradient([{ color: \"#deb6fb\", offset: 0 }, { color: \"#ac49f5\", offset: 1 }]), 9], // 设置刻度盘的颜色为线性渐变，从#deb6fb到#ac49f5，对应值为9\n               [new LinearGradient([{ color: \"#bbb7fc\", offset: 0 }, { color: \"#564af7\", offset: 1 }]), 8], // 设置刻度盘的颜色为线性渐变，从#bbb7fc到#564af7，对应值为8\n               [new LinearGradient([{ color: \"#f5b5c2\", offset: 0 }, { color: \"#e64566\", offset: 1 }]), 7], // 设置刻度盘的颜色为线性渐变，从#f5b5c2到#e64566，对应值为7\n               [new LinearGradient([{ color: \"#f8c5a6\", offset: 0 }, { color: \"#ed6f21\", offset: 1 }]), 6], // 设置刻度盘的颜色为线性渐变，从#f8c5a6到#ed6f21，对应值为6\n               [new LinearGradient([{ color: \"#fceb99\", offset: 0 }, { color: \"#f7ce00\", offset: 1 }]), 5], // 设置刻度盘的颜色为线性渐变，从#fceb99到#f7ce00，对应值为5\n               [new LinearGradient([{ color: \"#dbefa5\", offset: 0 }, { color: \"#a5d61d\", offset: 1 }]), 4], // 设置刻度盘的颜色为线性渐变，从#dbefa5到#a5d61d，对应值为4\n               [new LinearGradient([{ color: \"#c1e4be\", offset: 0 }, { color: \"#64bb5c\", offset: 1 }]), 3], // 设置刻度盘的颜色为线性渐变，从#c1e4be到#64bb5c，对应值为3\n               [new LinearGradient([{ color: \"#c0ece5\", offset: 0 }, { color: \"#61cfbe\", offset: 1 }]), 2], // 设置刻度盘的颜色为线性渐变，从#c0ece5到#61cfbe，对应值为2\n               [new LinearGradient([{ color: \"#b5e0f4\", offset: 0 }, { color: \"#46b1e3\", offset: 1 }]), 1]]) // 设置刻度盘的颜色为线性渐变，从#b5e0f4到#46b1e3，对应值为1\n      .width('80%') // 设置刻度盘的宽度为80%\n      .height('80%') // 设置刻度盘的高度为80%\n      .strokeWidth(18) // 设置刻度盘的宽度为18vp\n      .description(null) // 设置刻度盘的描述为空\n      .trackShadow({ radius: 7, offsetX: 7, offsetY: 7 }) // 设置刻度盘的阴影效果，阴影半径为7，偏移量为(7, 7)\n      .padding(18) // 设置刻度盘的内边距为18vp\n    }.margin({ top: 40 }).width('100%').height('100%') // 设置Column的顶部外边距为40vp，宽度和高度为100%\n  }\n}"
        },
        {
            "description": "该组件通过Column布局实现了一个带有刻度盘（Gauge）的界面，用于展示当前数值、说明文本和辅助文本。布局宽度占据整个屏幕，高度设为100%，内边距为顶部40vp。组件的垂直方向上被分为两个主要部分：刻度盘和说明文本。\n\n刻度盘部分使用Gauge组件，宽度为80%，高度为80%，刻度盘的刻度范围从1到100，当前值为50。刻度盘的样式包括渐变颜色、刻度宽度、刻度阴影等属性。刻度盘的刻度颜色通过多个线性渐变（LinearGradient）定义，每个渐变对应一个刻度值，颜色从浅到深变化。刻度盘的刻度宽度为18vp，刻度阴影的半径为7vp，偏移量为7vp。\n\n刻度盘内部嵌套了一个Column布局，用于展示当前数值和辅助文本。当前数值以Text组件展示，字体大小范围为30.0vp到60.0vp，字体颜色为深蓝色，字体加粗，宽度为62%，高度为100%，文本居中对齐，顶部外边距为35%。辅助文本以Text组件展示，字体大小范围为10.0vp到16.0fp，字体颜色为系统次要文本颜色，字体常规，宽度为67.4%，高度为9.5%，文本居中对齐。\n\n说明文本部分使用@Builder装饰器定义了一个descriptionBuilder方法，用于生成说明文本的Text组件。说明文本的字体大小范围为10.0vp到30sp，字体颜色为红色，字体加粗，宽度为100%，高度为100%，文本居中对齐。\n\n整个布局通过Column布局保证刻度盘和说明文本在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct Gauge1 {\n  @Builder descriptionBuilder() {\n    Text('说明文本')\n      .maxFontSize('30sp') // 设置文本最大字体大小为30sp\n      .minFontSize(\"10.0vp\") // 设置文本最小字体大小为10.0vp\n      .fontColor(\"#fffa2a2d\") // 设置文本颜色为红色\n      .fontWeight(FontWeight.Medium) // 设置文本字体加粗\n      .width('100%') // 设置文本宽度为100%\n      .height(\"100%\") // 设置文本高度为100%\n      .textAlign(TextAlign.Center) // 设置文本居中对齐\n  }\n\n  build() {\n    Column() {\n      Gauge({ value: 50, min: 1, max: 100 }) { // 创建一个刻度盘，当前值为50，最小值为1，最大值为100\n        Column() {\n          Text('50') // 展示当前数值\n            .fontWeight(FontWeight.Medium) // 设置文本字体加粗\n            .width('62%') // 设置文本宽度为62%\n            .fontColor(\"#ff182431\") // 设置文本颜色为深蓝色\n            .maxFontSize(\"60.0vp\") // 设置文本最大字体大小为60.0vp\n            .minFontSize(\"30.0vp\") // 设置文本最小字体大小为30.0vp\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n            .margin({ top: '35%' }) // 设置文本顶部外边距为35%\n            .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n            .maxLines(1) // 设置文本最大行数为1\n          Text('辅助文本') // 展示辅助文本\n            .maxFontSize(\"16.0fp\") // 设置文本最大字体大小为16.0fp\n            .minFontSize(\"10.0vp\") // 设置文本最小字体大小为10.0vp\n            .fontColor($r('sys.color.ohos_id_color_text_secondary')) // 设置文本颜色为系统次要文本颜色\n            .fontWeight(FontWeight.Regular) // 设置文本字体常规\n            .width('67.4%') // 设置文本宽度为67.4%\n            .height('9.5%') // 设置文本高度为9.5%\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n        }.width('100%').height('100%') // 设置Column的宽度和高度为100%\n      }\n      .value(50) // 设置刻度盘的当前值为50\n      .startAngle(210) // 设置刻度盘的起始角度为210度\n      .endAngle(150) // 设置刻度盘的结束角度为150度\n      .colors([ // 设置刻度盘的渐变颜色\n        [new LinearGradient([{ color: \"#deb6fb\", offset: 0 }, { color: \"#ac49f5\", offset: 1 }]), 9],\n        [new LinearGradient([{ color: \"#bbb7fc\", offset: 0 }, { color: \"#564af7\", offset: 1 }]), 8],\n        [new LinearGradient([{ color: \"#f5b5c2\", offset: 0 }, { color: \"#e64566\", offset: 1 }]), 7],\n        [new LinearGradient([{ color: \"#f8c5a6\", offset: 0 }, { color: \"#ed6f21\", offset: 1 }]), 6],\n        [new LinearGradient([{ color: \"#fceb99\", offset: 0 }, { color: \"#f7ce00\", offset: 1 }]), 5],\n        [new LinearGradient([{ color: \"#dbefa5\", offset: 0 }, { color: \"#a5d61d\", offset: 1 }]), 4],\n        [new LinearGradient([{ color: \"#c1e4be\", offset: 0 }, { color: \"#64bb5c\", offset: 1 }]), 3],\n        [new LinearGradient([{ color: \"#c0ece5\", offset: 0 }, { color: \"#61cfbe\", offset: 1 }]), 2],\n        [new LinearGradient([{ color: \"#b5e0f4\", offset: 0 }, { color: \"#46b1e3\", offset: 1 }]), 1]\n      ])\n      .width('80%') // 设置刻度盘的宽度为80%\n      .height('80%') // 设置刻度盘的高度为80%\n      .strokeWidth(18) // 设置刻度盘的刻度宽度为18vp\n      .trackShadow({ radius: 7, offsetX: 7, offsetY: 7 }) // 设置刻度盘的刻度阴影\n      .description(this.descriptionBuilder) // 设置刻度盘的说明文本\n      .padding(18) // 设置刻度盘的内边距为18vp\n    }.margin({ top: 40 }).width('100%').height('100%') // 设置Column的顶部外边距为40vp，宽度和高度为100%\n  }\n}"
        }
    ],
    "is_common_attrs": true
}