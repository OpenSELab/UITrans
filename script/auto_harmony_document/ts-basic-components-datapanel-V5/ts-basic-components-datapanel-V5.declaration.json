{
    "description": "数据面板组件，用于将多个数据占比情况使用占比图进行展示。",
    "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
    "interfaces": [
        {
            "description": "DataPanel(options: DataPanelOptions)",
            "params": {
                "options": {
                    "type": "DataPanelOptions",
                    "required": true,
                    "description": "数据面板的配置选项。"
                }
            }
        }
    ],
    "attributes": {
        "values": {
            "description": "数据值列表，最多包含9个数据，大于9个数据则取前9个数据。若数据值小于0则置为0。",
            "params": {
                "values": {
                    "type": "number[]",
                    "required": true,
                    "description": "数据值列表。"
                }
            }
        },
        "max": {
            "description": "数据的最大值。max大于0，表示数据的最大值；max小于等于0，max等于value数组各项的和，按比例显示。",
            "params": {
                "max": {
                    "type": "number",
                    "required": false,
                    "description": "数据的最大值。",
                    "default": 100
                }
            }
        },
        "type": {
            "description": "数据面板的类型（不支持动态修改）。",
            "params": {
                "type": {
                    "type": [
                        "DataPanelType.Line",
                        "DataPanelType.Circle"
                    ],
                    "required": false,
                    "description": "数据面板的类型。",
                    "default": "DataPanelType.Circle"
                }
            }
        },
        "closeEffect": {
            "description": "设置关闭数据占比图表旋转动效和投影效果。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "关闭数据占比图表旋转动效和投影效果。",
                    "default": false
                }
            }
        },
        "valueColors": {
            "description": "设置各数据段颜色。",
            "params": {
                "value": {
                    "type": [
                        "ResourceColor",
                        "LinearGradient"
                    ],
                    "required": true,
                    "description": "各数据段颜色。"
                }
            }
        },
        "trackBackgroundColor": {
            "description": "设置底板颜色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "底板颜色。",
                    "default": "#08182431"
                }
            }
        },
        "strokeWidth": {
            "description": "设置圆环粗细。数据面板的类型为DataPanelType.Line时该属性不生效。",
            "params": {
                "value": {
                    "type": "Length",
                    "required": true,
                    "description": "圆环粗细。",
                    "default": 24
                }
            }
        },
        "trackShadow": {
            "description": "设置投影样式。",
            "params": {
                "value": {
                    "type": "DataPanelShadowOptions",
                    "required": true,
                    "description": "投影样式。"
                }
            }
        },
        "contentModifier": {
            "description": "定制DataPanel内容区的方法。",
            "params": {
                "modifier": {
                    "type": "ContentModifier<DataPanelConfiguration>",
                    "required": true,
                    "description": "定制DataPanel内容区的方法。"
                }
            }
        }
    },
    "events": {},
    "rules": null,
    "examples": [
        {
            "description": "该组件通过Column和Row布局实现了一个数据面板展示界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个数据面板和相关文本信息。数据面板以圆形和线条形式展示数据，文本信息包括数值和描述。\n\n布局属性：\n- 整体布局使用Column组件，宽度为100%，顶部边距为5vp。\n- 内部包含两个Row组件，第一个Row组件包含两个Stack组件，每个Stack组件内嵌一个圆形DataPanel和相关文本信息。第二个Row组件包含一个线条DataPanel。\n- 每个Stack组件的宽度为168vp，高度为168vp，右侧边距为44vp。\n- 线条DataPanel的宽度为300vp，高度为20vp。\n\n组件的样式和外观：\n- 文本使用Text组件，字体大小、颜色、行高、字体粗细和透明度等属性根据不同文本内容进行设置。\n- 圆形DataPanel的背景颜色为透明，线条DataPanel的背景颜色为透明。\n- 文本的颜色为#182431，透明度为0.6。\n\n组件的排列和嵌套关系：\n- 整体布局使用Column组件，垂直排列。\n- 内部使用Row组件，水平排列。\n- Stack组件用于将DataPanel和文本信息叠加在一起。\n\n组件的功能和交互：\n- DataPanel组件用于展示数据，支持圆形和线条两种类型。\n- 文本信息用于描述数据面板中的数值和相关信息。",
            "code": "@Entry\n@Component\nstruct DataPanelExample {\n  public valueArr: number[] = [10, 10, 10, 10, 10, 10, 10, 10, 10]\n\n  build() {\n    Column({ space: 5 }) { // 使用Column布局，设置组件间距为5vp\n      Row() { // 使用Row布局，水平排列\n        Stack() { // 使用Stack布局，将DataPanel和文本信息叠加在一起\n          DataPanel({ values: [30], max: 100, type: DataPanelType.Circle }) // 创建一个圆形DataPanel，最大值为100，类型为圆形\n            .width(168) // 设置宽度为168vp\n            .height(168) // 设置高度为168vp\n          Column() { // 使用Column布局，垂直排列\n            Text('30') // 显示数值30\n              .fontSize(35) // 设置字体大小为35vp\n              .fontColor('#182431') // 设置字体颜色为#182431\n            Text('1.0.0') // 显示版本号1.0.0\n              .fontSize(9.33) // 设置字体大小为9.33vp\n              .lineHeight(12.83) // 设置行高为12.83vp\n              .fontWeight(500) // 设置字体粗细为500\n              .opacity(0.6) // 设置透明度为0.6\n          }\n          Text('%') // 显示百分号\n            .fontSize(9.33) // 设置字体大小为9.33vp\n            .lineHeight(12.83) // 设置行高为12.83vp\n            .fontWeight(500) // 设置字体粗细为500\n            .opacity(0.6) // 设置透明度为0.6\n            .position({ x: 104.42, y: 78.17 }) // 设置位置为(104.42, 78.17)\n        }.margin({ right: 44 }) // 设置右侧边距为44vp\n\n        Stack() { // 使用Stack布局，将DataPanel和文本信息叠加在一起\n          DataPanel({ values: [50, 12, 8, 5], max: 100, type: DataPanelType.Circle }) // 创建一个圆形DataPanel，最大值为100，类型为圆形\n            .width(168) // 设置宽度为168vp\n            .height(168) // 设置高度为168vp\n          Column() { // 使用Column布局，垂直排列\n            Text('75') // 显示数值75\n              .fontSize(35) // 设置字体大小为35vp\n              .fontColor('#182431') // 设置字体颜色为#182431\n            Text('已使用98GB/128GB') // 显示已使用空间信息\n              .fontSize(8.17) // 设置字体大小为8.17vp\n              .lineHeight(11.08) // 设置行高为11.08vp\n              .fontWeight(500) // 设置字体粗细为500\n              .opacity(0.6) // 设置透明度为0.6\n          }\n          Text('%') // 显示百分号\n            .fontSize(9.33) // 设置字体大小为9.33vp\n            .lineHeight(12.83) // 设置行高为12.83vp\n            .fontWeight(500) // 设置字体粗细为500\n            .opacity(0.6) // 设置透明度为0.6\n            .position({ x: 104.42, y: 78.17 }) // 设置位置为(104.42, 78.17)\n        }\n      }.margin({ bottom: 59 }) // 设置底部边距为59vp\n\n      DataPanel({ values: this.valueArr, max: 100, type: DataPanelType.Line }) // 创建一个线条DataPanel，最大值为100，类型为线条\n        .width(300) // 设置宽度为300vp\n        .height(20) // 设置高度为20vp\n    }.width('100%').margin({ top: 5 }) // 设置整体布局宽度为100%，顶部边距为5vp\n  }\n}"
        },
        {
            "description": "该组件通过Column布局实现了一个展示线性渐变数据面板的界面。布局宽度占据整个屏幕，内边距为顶部5vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和数据面板。\n标题部分使用Text组件展示文字“LinearGradient”，字体大小为9vp，字体颜色为0xCCCCCC，文本对齐方式为左对齐，宽度占据100%，外边距为顶部20vp、左侧20vp。\n数据面板部分使用DataPanel组件展示一组数值（values1），最大值为100，类型为圆形（DataPanelType.Circle）。数据面板的宽度为300vp，高度为300vp，使用valueColors属性设置渐变颜色数组，使用trackShadow属性设置阴影效果，包括阴影半径、阴影颜色数组、阴影偏移量X和Y。数据面板的描边宽度为30vp，背景颜色为bgColor。\n整个布局通过Column布局保证标题和数据面板在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct LinearGradientDataPanelExample {\n  // 定义一组数值，用于展示在数据面板中\n  public values1: number[] = [20, 20, 20, 20]\n  \n  // 定义第一个线性渐变颜色，从#65EEC9A3到#FFEF629F\n  public color1: LinearGradient = new LinearGradient([{ color: \"#65EEC9A3\", offset: 0 }, { color: \"#FFEF629F\", offset: 1 }])\n  \n  // 定义第二个线性渐变颜色，从#FF67F9D4到#FFFF9554\n  public color2: LinearGradient = new LinearGradient([{ color: \"#FF67F9D4\", offset: 0 }, { color: \"#FFFF9554\", offset: 1 }])\n  \n  // 定义第一个阴影的线性渐变颜色，从#65EEC9A3到#65EF629F\n  public colorShadow1: LinearGradient = new LinearGradient([{ color: \"#65EEC9A3\", offset: 0 }, { color: \"#65EF629F\", offset: 1 }])\n  \n  // 定义第二个阴影的线性渐变颜色，从#65e26709到#65efbd08\n  public colorShadow2: LinearGradient = new LinearGradient([{ color: \"#65e26709\", offset: 0 }, { color: \"#65efbd08\", offset: 1 }])\n  \n  // 定义第三个阴影的线性渐变颜色，从#6572B513到#6508efa6\n  public colorShadow3: LinearGradient = new LinearGradient([{ color: \"#6572B513\", offset: 0 }, { color: \"#6508efa6\", offset: 1 }])\n  \n  // 定义第四个阴影的线性渐变颜色，从#65ed08f5到#65ef0849\n  public colorShadow4: LinearGradient = new LinearGradient([{ color: \"#65ed08f5\", offset: 0 }, { color: \"#65ef0849\", offset: 1 }])\n  \n  // 定义一个状态变量，用于存储颜色值，初始值为#00FF00\n  @State color3: string = '#00FF00'\n  \n  // 定义一个状态变量，用于存储颜色值，初始值为#20FF0000\n  @State color4: string = '#20FF0000'\n  \n  // 定义一个状态变量，用于存储背景颜色值，初始值为#08182431\n  @State bgColor: string = '#08182431'\n  \n  // 定义一个状态变量，用于存储阴影偏移量X，初始值为15\n  @State offsetX: number = 15\n  \n  // 定义一个状态变量，用于存储阴影偏移量Y，初始值为15\n  @State offsetY: number = 15\n  \n  // 定义一个状态变量，用于存储阴影半径，初始值为5\n  @State radius: number = 5\n  \n  // 定义一个状态变量，用于存储颜色数组，包含两个线性渐变颜色和两个固定颜色\n  @State colorArray: Array<LinearGradient | ResourceColor> = [this.color1, this.color2, this.color3, this.color4]\n  \n  // 定义一个状态变量，用于存储阴影颜色数组，包含四个线性渐变颜色\n  @State shadowColorArray: Array<LinearGradient | ResourceColor> = [this.colorShadow1, this.colorShadow2, this.colorShadow3, this.colorShadow4]\n\n  build() {\n    Column({ space: 5 }) {\n      // 使用Text组件展示标题文字“LinearGradient”\n      Text('LinearGradient')\n        .fontSize(9) // 设置字体大小为9vp\n        .fontColor(0xCCCCCC) // 设置字体颜色为0xCCCCCC\n        .textAlign(TextAlign.Start) // 设置文本对齐方式为左对齐\n        .width('100%') // 设置宽度占据100%\n        .margin({ top: 20, left: 20 }) // 设置外边距为顶部20vp、左侧20vp\n      \n      // 使用DataPanel组件展示数据面板\n      DataPanel({ values: this.values1, max: 100, type: DataPanelType.Circle })\n        .width(300) // 设置宽度为300vp\n        .height(300) // 设置高度为300vp\n        .valueColors(this.colorArray) // 设置数据面板的渐变颜色数组\n        .trackShadow({\n          radius: this.radius, // 设置阴影半径\n          colors: this.shadowColorArray, // 设置阴影颜色数组\n          offsetX: this.offsetX, // 设置阴影偏移量X\n          offsetY: this.offsetY // 设置阴影偏移量Y\n        })\n        .strokeWidth(30) // 设置描边宽度为30vp\n        .trackBackgroundColor(this.bgColor) // 设置背景颜色\n    }\n    .width('100%') // 设置Column的宽度占据100%\n    .margin({ top: 5 }) // 设置Column的外边距为顶部5vp\n  }\n}"
        },
        {
            "description": "该组件实现了一个数据面板（DataPanel）的展示界面。数据面板通过垂直布局（Column）组织内容，包含多个子项（ChildItem），每个子项代表一个数据值。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为三个主要部分：数据值展示区、分隔线和数据统计信息展示区。\n\n数据值展示区通过ForEach循环遍历配置中的数据值数组（config.values），并为每个数据值生成一个ChildItem组件。每个ChildItem组件包含一个矩形条（Rect）和一个文本标签（Text），矩形条的高度和颜色根据数据值和最大值（config.maxValue）动态计算，文本标签显示数据值。\n\n分隔线部分通过Line组件绘制一条水平线，宽度为100%，颜色为深灰色（#ff373737），用于分隔数据值展示区和数据统计信息展示区。\n\n数据统计信息展示区通过Row布局展示两个文本标签，分别显示数据值数组的长度和最大值。文本标签的排列方式为水平排列，对齐方式为左对齐。\n\n整个布局通过Column布局保证内容在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Builder\nfunction buildDataPanel(config: DataPanelConfiguration) {\n  Column() {\n    // 数据值展示区\n    Column() {\n      ForEach(config.values, (item: number, index: number) => {\n        ChildItem({ item: item, index: index, max: config.maxValue })\n      }, (item: string) => item)\n    }.padding(10) // 内边距为10vp\n\n    // 分隔线\n    Column() {\n      Line().width(\"100%\").backgroundColor(\"#ff373737\").margin({ bottom: 5 })\n    }.padding({ left: 20, right: 20 }) // 左右内边距为20vp\n\n    // 数据统计信息展示区\n    Row() {\n      Text('Length=' + config.values.length + '    ').margin({ left: 10 }).align(Alignment.Start)\n      Text('Max=' + config.maxValue).margin({ left: 10 }).align(Alignment.Start)\n    }\n  }\n}\n\n/*\nDataPanelBuilder类实现了ContentModifier接口，用于将buildDataPanel函数封装为一个可复用的内容构建器。通过applyContent方法返回一个WrappedBuilder，该构建器可以接收DataPanelConfiguration配置对象，并生成对应的数据面板内容。\n*/\n\nclass DataPanelBuilder implements ContentModifier<DataPanelConfiguration> {\n  constructor() {\n  }\n  applyContent(): WrappedBuilder<[DataPanelConfiguration]> {\n    return wrapBuilder(buildDataPanel)\n  }\n}\n\n/*\nIndex组件是应用的入口组件，通过Column布局组织内容。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个标题（Text）和一个数据面板（DataPanel）。\n\n标题部分通过Text组件显示“Data panel”，内边距为顶部12vp。\n\n数据面板部分通过DataPanel组件展示一组数据值（values）和最大值（max），类型为圆形（DataPanelType.Circle）。数据面板的宽度为400vp，高度为260vp，最大宽度为100%，内边距为顶部10vp。数据面板的内容通过DataPanelBuilder构建器生成。\n\n整个布局通过Column布局保证内容在垂直方向上有序排列，确保界面整洁美观。\n*/\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column() {\n      Text(\"Data panel\").margin({ top: 12 }) // 标题，内边距为顶部12vp\n      Row() {\n        DataPanel({ values: [12.3, 21.1, 13.4, 35.2, 26.0, 32.0], max: 140, type: DataPanelType.Circle })\n          .width(400).height(260) // 数据面板的宽度为400vp，高度为260vp\n          .constraintSize({ maxWidth: \"100%\" }) // 最大宽度为100%\n          .padding({ top: 10 }) // 内边距为顶部10vp\n          .contentModifier(new DataPanelBuilder()) // 使用DataPanelBuilder构建器生成内容\n      }.margin(15).backgroundColor(\"#fff5f5f5\") // 外边距为15vp，背景颜色为浅灰色（#fff5f5f5）\n    }\n  }\n}\n\n/*\nChildItem组件是一个自定义组件，用于展示单个数据值。组件通过RelativeContainer布局组织内容，包含一个矩形条（Rect）和一个文本标签（Text）。\n\n矩形条的高度根据数据值和最大值动态计算，宽度为数据值乘以600除以最大值，颜色从预定义的颜色数组（colorArray）中选择。矩形条的圆角半径为5vp，对齐方式为左对齐。\n\n文本标签显示数据值，字体大小为17vp。\n\n整个布局通过RelativeContainer布局保证内容在垂直方向上有序排列，确保界面整洁美观。\n*/\n\n@Component\nstruct ChildItem {\n  @Prop item: number; // 数据值\n  @Prop index: number; // 数据值的索引\n  @Prop max: number; // 最大值\n  public color1: string = \"#65ff00dd\" // 颜色1\n  public color2: string = \"#6500ff99\" // 颜色2\n  public color3: string = \"#65ffe600\" // 颜色3\n  public color4: string = \"#6595ff00\" // 颜色4\n  public color5: string = \"#65000dff\" // 颜色5\n  public color6: string = \"#650099ff\" // 颜色6\n  public colorArray: Array<string> = [this.color1, this.color2, this.color3, this.color4, this.color5, this.color6] // 颜色数组\n\n  build() {\n    RelativeContainer() {\n      Row() {\n        Rect().height(25).width(this.item * 600 / this.max).foregroundColor(this.colorArray[this.index]).radius(5) // 矩形条的高度为25vp，宽度为数据值乘以600除以最大值，颜色从颜色数组中选择，圆角半径为5vp\n          .align(Alignment.Start) // 对齐方式为左对齐\n        Text(\" \" + this.item) // 文本标签显示数据值\n          .fontSize(17) // 字体大小为17vp\n      }\n    }.height(28) // 高度为28vp\n  }\n}"
        }
    ],
    "is_common_attrs": true
}