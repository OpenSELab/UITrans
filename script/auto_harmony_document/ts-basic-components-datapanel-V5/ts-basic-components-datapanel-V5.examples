/*\n实现一个数据面板示例，展示不同类型的数据面板（圆形和线形），并包含线性渐变效果的数据面板。\n布局：\n- 使用Column作为主布局，包含多个Row和Stack组件，用于排列不同类型的数据面板。\n- 每个数据面板包含一个DataPanel组件，用于展示数据。\n- 使用Text组件显示数据值和相关信息。\n样式：\n- 数据面板的宽度和高度根据类型不同而有所变化。\n- 文本的字体大小、颜色、位置等通过属性进行设置。\n功能与效果：\n- 展示圆形和线形数据面板，分别显示不同的数据值。\n- 线性渐变效果的数据面板展示多个数据值，并支持渐变颜色和阴影效果。\n*/\n\n@Entry\n@Component\nstruct DataPanelExample {\n  public valueArr: number[] = [10, 10, 10, 10, 10, 10, 10, 10, 10]\n\n  build() {\n    // 创建一个包含多个数据面板的布局\n    Column({ space: 5 }) {\n      // 第一个数据面板\n      Row() {\n        Stack() {\n          // 创建一个圆形数据面板，数值为30，最大值为100\n          DataPanel({ values: [30], max: 100, type: DataPanelType.Circle }).width(168).height(168)\n          // 数值显示为30\n          Column() {\n            Text('30').fontSize(35).fontColor('#182431')\n            // 版本号显示为1.0.0\n            Text('1.0.0').fontSize(9.33).lineHeight(12.83).fontWeight(500).opacity(0.6)\n          }\n\n          // 百分号显示\n          Text('%')\n            .fontSize(9.33)\n            .lineHeight(12.83)\n            .fontWeight(500)\n            .opacity(0.6)\n            .position({ x: 104.42, y: 78.17 })\n        }.margin({ right: 44 })\n\n        Stack() {\n          // 创建另一个圆形数据面板，数值为50, 12, 8, 5，最大值为100\n          DataPanel({ values: [50, 12, 8, 5], max: 100, type: DataPanelType.Circle }).width(168).height(168)\n          // 数值显示为75\n          Column() {\n            Text('75').fontSize(35).fontColor('#182431')\n            // 已使用空间显示为98GB/128GB\n            Text('已使用98GB/128GB').fontSize(8.17).lineHeight(11.08).fontWeight(500).opacity(0.6)\n          }\n\n          // 百分号显示\n          Text('%')\n            .fontSize(9.33)\n            .lineHeight(12.83)\n            .fontWeight(500)\n            .opacity(0.6)\n            .position({ x: 104.42, y: 78.17 })\n        }\n      }.margin({ bottom: 59 })\n\n      // 创建一条线形数据面板，显示valueArr数组的数据，最大值为100\n      DataPanel({ values: this.valueArr, max: 100, type: DataPanelType.Line }).width(300).height(20)\n    }.width('100%').margin({ top: 5 })\n  }\n}\n\n// xxx.ets\n@Entry\n@Component\nstruct LinearGradientDataPanelExample {\n  public values1: number[] = [20, 20, 20, 20]\n  public color1: LinearGradient = new LinearGradient([{ color: "#65EEC9A3", offset: 0 }, { color: "#FFEF629F", offset: 1 }])\n  public color2: LinearGradient = new LinearGradient([{ color: "#FF67F9D4", offset: 0 }, { color: "#FFFF9554", offset: 1 }])\n  public colorShadow1: LinearGradient = new LinearGradient([{ color: "#65EEC9A3", offset: 0 }, { color: "#65EF629F", offset: 1 }])\n  public colorShadow2: LinearGradient = new LinearGradient([{ color: "#65e26709", offset: 0 }, { color: "#65efbd08", offset: 1 }])\n  public colorShadow3: LinearGradient = new LinearGradient([{ color: "#6572B513", offset: 0 }, { color: "#6508efa6", offset: 1 }])\n  public colorShadow4: LinearGradient = new LinearGradient([{ color: "#65ed08f5", offset: 0 }, { color: "#65ef0849", offset: 1 }])\n  @State color3: string = '#00FF00'\n  @State color4: string = '#20FF0000'\n  @State bgColor: string = '#08182431'\n  @State offsetX: number = 15\n  @State offsetY: number = 15\n  @State radius: number = 5\n  @State colorArray: Array<LinearGradient | ResourceColor> = [this.color1, this.color2, this.color3, this.color4]\n  @State shadowColorArray: Array<LinearGradient | ResourceColor> = [this.colorShadow1, this.colorShadow2, this.colorShadow3, this.colorShadow4]\n\n  // 构建线性渐变数据面板示例\n  build() {\n    Column({ space: 5 }) {\n      // 添加线性渐变文本\n      Text('LinearGradient').fontSize(9).fontColor(0xCCCCCC).textAlign(TextAlign.Start).width('100%').margin({ top: 20, left: 20})\n      // 创建数据面板，展示数据值，采用圆形展示方式\n      DataPanel({ values: this.values1, max: 100, type: DataPanelType.Circle })\n        .width(300)\n        .height(300)\n        .valueColors(this.colorArray) // 设置数据值颜色\n        .trackShadow({\n          radius: this.radius, // 设置阴影半径\n          colors: this.shadowColorArray, // 设置阴影颜色\n          offsetX: this.offsetX, // 设置阴影水平偏移量\n          offsetY: this.offsetY // 设置阴影垂直偏移量\n        })\n        .strokeWidth(30) // 设置描边宽度\n        .trackBackgroundColor(this.bgColor) // 设置背景颜色\n    }.width('100%').margin({ top: 5 }) // 设置宽度和外边距\n  }\n}\n\n// xxx.ets\n// 构建数据面板，展示数据列表及相关信息\n@Builder\nfunction buildDataPanel(config: DataPanelConfiguration) {\n  Column() {\n    // 列表展示数据项\n    Column() {\n      ForEach(config.values, (item: number, index: number) => {\n        ChildItem({ item: item, index: index, max:config.maxValue })\n      }, (item: string) => item)\n    }.padding(10)\n\n    // 分割线\n    Line().width(360).backgroundColor("#ff373737").margin({bottom:5})\n\n    // 显示数据面板信息\n    Row() {\n      Text('Length=' + config.values.length + '    ').margin({ left: 10 }).align(Alignment.Start)\n      Text('Max=' + config.maxValue).margin({ left: 10 }).align(Alignment.Start)\n    }\n  }\n}\n\n// 数据面板构建器，用于应用内容修改器\nclass DataPanelBuilder implements ContentModifier<DataPanelConfiguration> {\n  constructor() {\n  }\n  applyContent () : WrappedBuilder<[DataPanelConfiguration]> {\n    return wrapBuilder(buildDataPanel)\n  }\n}\n\n// 入口组件\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column() {\n      // 标题\n      Text("Data panel").margin({ top: 12 });\n\n      // 数据面板展示\n      Row() {\n        DataPanel({ values: [12.3, 21.1, 13.4, 35.2, 26.0, 32.0], max: 140, type: DataPanelType.Circle })\n          .width(400).height(260)\n          .padding({ top: 10 })\n          .contentModifier(new DataPanelBuilder())\n      }.margin(15).backgroundColor("#fff5f5f5")\n    }\n  }\n}\n\n// 子项组件，展示数据子项\n@Component\nstruct ChildItem {\n  @Prop item: number;\n  @Prop index: number;\n  @Prop max: number;\n  public color1: string = "#65ff00dd"\n  public color2: string = "#6500ff99"\n  public color3: string = "#65ffe600"\n  public color4: string = "#6595ff00"\n  public color5: string = "#65000dff"\n  public color6: string = "#650099ff"\n  public colorArray: Array<string> = [this.color1, this.color2, this.color3, this.color4, this.color5, this.color6]\n\n  build() {\n    // 相对容器\n    RelativeContainer() {\n      Row() {\n        // 矩形条展示数据大小\n        Rect().height(25).width(this.item * 600 / this.max).foregroundColor(this.colorArray[this.index]).radius(5)\n          .align(Alignment.Start)\n        // 文本显示数据值\n        Text(" "+this.item)\n          .fontSize(17)\n      }\n    }.height(28)\n  }\n}