{
    "description": "ContextMenu 组件用于在页面范围内关闭通过 bindContextMenu 属性绑定的菜单。",
    "details": "从 API Version 8 开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。从 API version 12 开始，可以通过使用 UIContext 中的 getContextMenuController 来明确 UI 的执行上下文。",
    "interfaces": [
        {
            "description": "static close()",
            "params": {}
        }
    ],
    "attributes": {},
    "events": {},
    "rules": null,
    "examples": [
        {
            "description": "该组件通过 Flex 布局实现了一个展示上下文菜单的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为两个主要部分：一个包含文本的 Column 组件和一个用于显示上下文菜单的 Flex 组件。\n\n文本部分使用 Column 组件，宽度占据整个屏幕，高度为 500vp，背景颜色为浅蓝色（0xAFEEEE），文本内容为 \"Test ContextMenu\"，字体大小为 20，文本居中对齐。\n\n上下文菜单部分使用 Flex 组件，方向为垂直（FlexDirection.Column），对齐方式为居中对齐（alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center）。菜单包含三个按钮，每个按钮之间通过 Divider 组件进行分隔，Divider 的宽度为 2vp，颜色为黑色，上下边距为 5vp。菜单的宽度为 200vp，高度为 160vp。\n\n组件的功能包括长按文本区域时显示上下文菜单，拖拽文本区域时关闭菜单。菜单的显示和关闭通过 bindContextMenu 和 ContextMenu.close() 方法实现。",
            "code": "// xxx.ets\n@Entry\n@Component\nstruct Index {\n  // 定义一个 Builder 方法用于构建上下文菜单\n  @Builder MenuBuilder() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Button('Test ContextMenu1') // 第一个按钮\n      Divider().strokeWidth(2).margin(5).color(Color.Black) // 分隔线，宽度为 2vp，上下边距为 5vp，颜色为黑色\n      Button('Test ContextMenu2') // 第二个按钮\n      Divider().strokeWidth(2).margin(5).color(Color.Black) // 分隔线，宽度为 2vp，上下边距为 5vp，颜色为黑色\n      Button('Test ContextMenu3') // 第三个按钮\n    }\n    .width(200) // 菜单宽度为 200vp\n    .height(160) // 菜单高度为 160vp\n  }\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Column() {\n        Text(\"Test ContextMenu\") // 文本内容为 \"Test ContextMenu\"\n          .fontSize(20) // 字体大小为 20\n          .width('100%') // 文本宽度占据整个屏幕\n          .height(500) // 文本高度为 500vp\n          .backgroundColor(0xAFEEEE) // 背景颜色为浅蓝色（0xAFEEEE）\n          .textAlign(TextAlign.Center) // 文本居中对齐\n      }\n      .bindContextMenu(this.MenuBuilder, ResponseType.LongPress) // 长按文本区域时显示上下文菜单\n      .onDragStart(() => {\n        // 拖拽时关闭菜单\n        ContextMenu.close() // 建议使用 this.getUIContext().getContextMenuController().close()\n      })\n    }\n    .width('100%') // 布局宽度占据整个屏幕\n    .height('100%') // 布局高度占据整个屏幕\n  }\n}"
        }
    ],
    "is_common_attrs": true
}