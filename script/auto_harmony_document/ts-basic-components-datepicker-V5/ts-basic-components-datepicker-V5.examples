/*\n实现一个日期选择器组件，支持公历和农历的切换，并允许用户在指定的日期范围内选择日期。日期选择器具有自定义的文本样式，包括普通文本、不可见文本和选中日期的文本样式。点击按钮可以切换日期显示模式，并在日期变化时输出当前选中的日期。\n*/\n\n@Entry\n@Component\nstruct DatePickerExample {\n  @State isLunar: boolean = false // 用于控制日期显示模式，初始为公历\n  private selectedDate: Date = new Date('2021-08-08') // 初始选中的日期\n\n  build() {\n    Column() {\n      Button('切换公历农历')\n        .margin({ top: 30, bottom: 30 }) // 设置按钮的上边距和下边距\n        .onClick(() => {\n          this.isLunar = !this.isLunar // 切换日期显示模式，公历和农历之间切换\n        })\n      DatePicker({\n        start: new Date('1970-1-1'), // 日期选择范围的起始日期\n        end: new Date('2100-1-1'), // 日期选择范围的结束日期\n        selected: this.selectedDate // 当前选中的日期\n      })\n        .disappearTextStyle({color: Color.Gray, font: {size: '16fp', weight: FontWeight.Bold}}) // 设置不可见文本的样式，颜色为灰色，字体大小为16fp，字体加粗\n        .textStyle({color: '#ff182431', font: {size: '18fp', weight: FontWeight.Normal}}) // 设置普通文本的样式，颜色为#ff182431，字体大小为18fp，字体正常\n        .selectedTextStyle({color: '#ff0000FF', font: {size: '26fp', weight: FontWeight.Regular}}) // 设置选中日期的文本样式，颜色为#ff0000FF，字体大小为26fp，字体常规\n        .lunar(this.isLunar) // 根据isLunar状态切换公历或农历显示\n        .onDateChange((value: Date) => {\n          this.selectedDate = value // 更新选中的日期\n          console.info('select current date is: ' + value.toString()) // 输出当前选中的日期\n        })\n\n    }.width('100%') // 设置列的宽度为100%\n  }\n}