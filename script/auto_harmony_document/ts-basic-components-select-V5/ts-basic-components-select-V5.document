Title: Select-按钮与选择-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-select-V5

Markdown Content:
提供下拉选择菜单，可以让用户在多个选项之间选择。

说明

该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

接口
--

Select(options: Array<[SelectOption](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-select-V5#selectoption%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)\>)

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

SelectOption对象说明
----------------

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

value

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

是

下拉选项内容。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

icon

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

下拉选项图片。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

symbolIcon12+

[SymbolGlyphModifier](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-attribute-modifier-V5)

否

下拉选项Symbol图片。

symbolIcon优先级高于icon。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

### selected

selected(value: number | Resource)

设置下拉菜单初始选项的索引，第一项的索引为0。当不设置selected属性或设置异常值时，默认选择值为-1，菜单项不选中；当设置为undefined、null时，选中第一项。

从API version 10开始，该属性支持[$$](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-two-way-sync-V5)双向绑定变量。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

number | [Resource](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resource)11+

是

下拉菜单初始选项的索引。

### value

value(value: ResourceStr)

设置下拉按钮本身的文本内容。当菜单选中时默认会替换为菜单项文本内容。

从API version 10开始，该参数支持[$$](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-two-way-sync-V5)双向绑定变量。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### controlSize12+

controlSize(value: ControlSize)

设置Select组件的尺寸。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ControlSize](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-button-V5#controlsize11%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)11+

是

Select组件的尺寸。

默认值:ControlSize.NORMAL

controlSize、width、height接口作用优先级：

1）如果开发者只设置了width和height，当文字大小设置的是比较大的值的时候，文字超出组件大小，且以省略号方式显示；

2）如果开发者只设置了controlSize，没有设置width和height，组件宽高自适应文字，文字不超出组件，并设置最小宽度minWidth和最小高度minHeight；

3）如果controlSize、width、height接口都设置了，width和height设置的值生效，但如果width和height设置的值小于controlSize设置的最小宽度minWidth和最小高度minHeight，width和height设置的值不生效，宽高仍保持controlSize设置的最小宽度minWidth和最小高度minHeight。

### menuItemContentModifier12+

menuItemContentModifier(modifier: ContentModifier<MenuItemConfiguration\>)

定制Select下拉菜单项内容区的方法。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### divider12+

divider(options: Optional<DividerOptions\> | null)

设置分割线样式，不设置该属性则按“默认值”展示分割线。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

options

Optional<[DividerOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-textpicker-V5#divideroptions12%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)\> | null

是

1.设置DividerOptions，则按设置的样式显示分割线。

默认值：

{

strokeWidth: '1px' ,

color: '#33182431'

}

2.设置为null时，不显示分割线。

3.strokeWidth设置过宽时，会覆盖文字。分割线会从每一个Item底部开始，同时向上向下画分割线。

4.startMargin和endMargin的默认值与不设置divider属性时的分割线样式保持一致。startMargin和endMargin的和与optionWidth的值相等时，不显示分割线。 startMargin和endMargin的和超过optionWidth的值时，按照默认样式显示分割线。

### font

font(value: Font)

设置下拉按钮本身的文本样式。当size为0的时候，文本不显示，当size为负值的时候，文本的size按照默认值显示。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[Font](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#font)

是

下拉按钮本身的文本样式。

API Version 11及以前默认值：

{

size: $r('sys.float.ohos\_id\_text\_size\_button1'),

weight: FontWeight.Medium

}

API Version 12以后，如果设置controlSize的值为：controlSize.SMALL，size默认值是$r('sys.float.ohos\_id\_text\_size\_button2')，否则为$r('sys.float.ohos\_id\_text\_size\_button1')。

### fontColor

fontColor(value: ResourceColor)

设置下拉按钮本身的文本颜色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

是

下拉按钮本身的文本颜色。

默认值：$r('sys.color.ohos\_id\_color\_text\_primary')混合$r('sys.color.ohos\_id\_alpha\_content\_primary')的透明度。

### selectedOptionBgColor

selectedOptionBgColor(value: ResourceColor)

设置下拉菜单选中项的背景色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

是

下拉菜单选中项的背景色。

默认值：$r('sys.color.ohos\_id\_color\_component\_activated')混合$r('sys.color.ohos\_id\_alpha\_highlight\_bg')的透明度。

### selectedOptionFont

selectedOptionFont(value: Font)

设置下拉菜单选中项的文本样式。当size为0的时候，文本不显示，当size为负值的时候，文本的size按照默认值显示。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[Font](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#font)

是

下拉菜单选中项的文本样式。

默认值：

{

size: $r('sys.color.ohos\_id\_text\_size\_body1'),

weight: FontWeight.Regular

}

### selectedOptionFontColor

selectedOptionFontColor(value: ResourceColor)

设置下拉菜单选中项的文本颜色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

是

下拉菜单选中项的文本颜色。

默认值：$r('sys.color.ohos\_id\_color\_text\_primary\_activated')

### optionBgColor

optionBgColor(value: ResourceColor)

设置下拉菜单项的背景色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

是

下拉菜单项的背景色。

默认值：

API version 11之前，默认值为Color.White。

API version 11及之后，默认值为Color.Transparent。

### optionFont

optionFont(value: Font)

设置下拉菜单项的文本样式。当size为0的时候，文本不显示，当size为负值的时候，文本的size按照默认值显示。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[Font](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#font)

是

下拉菜单项的文本样式。

默认值：

{

size: $r('sys.float.ohos\_id\_text\_size\_body1'),

weight: FontWeight.Regular

}

### optionFontColor

optionFontColor(value: ResourceColor)

设置下拉菜单项的文本颜色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

是

下拉菜单项的文本颜色。

默认值：$r('sys.color.ohos\_id\_color\_text\_primary')

### space10+

space(value: Length)

设置下拉菜单项的文本与箭头之间的间距。不支持设置百分比。设置为null、undefined，或者小于等于8的值，取默认值。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[Length](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#length)

是

下拉菜单项的文本与箭头之间的间距。

默认值：8

### arrowPosition10+

arrowPosition(value: ArrowPosition)

设置下拉菜单项的文本与箭头之间的对齐方式。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ArrowPosition](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-select-V5#arrowposition10%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

是

下拉菜单项的文本与箭头之间的对齐方式。

默认值：ArrowPosition.END

menuAlign(alignType: MenuAlignType, offset?: Offset)

设置下拉按钮与下拉菜单间的对齐方式。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

alignType

[MenuAlignType](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-select-V5#menualigntype10%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

是

对齐方式类型。

默认值：MenuAlignType.START

offset

[Offset](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#offset)

否

按照对齐类型对齐后，下拉菜单相对下拉按钮的偏移量。

默认值：{dx: 0, dy: 0}

### optionWidth11+

optionWidth(value: Dimension | OptionWidthMode )

设置下拉菜单项的宽度，不支持设置百分比。OptionWidthMode类型为枚举类型，OptionWidthMode决定下拉菜单是否继承下拉按钮宽度。

当设置为异常值或小于最小宽度56vp时，属性不生效，菜单项宽度设为默认值，即菜单默认宽度为2栅格。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### optionHeight11+

optionHeight(value: Dimension)

设置下拉菜单显示的最大高度，不支持设置百分比。下拉菜单的默认最大高度是屏幕可用高度的80%，设置的菜单最大高度不能超过默认最大高度。

当设置为异常值或零时，属性不生效，下拉菜单最大高度设为默认值，即下拉菜单最大高度默认值为屏幕可用高度的80%。

如果下拉菜单所有选项的实际高度没有设定的高度大，下拉菜单的高度按实际高度显示。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

menuBackgroundColor(value: ResourceColor)

设置下拉菜单的背景色。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

是

下拉菜单的背景色。

默认值：

API version 11之前，默认值为$r('sys.color.ohos\_id\_color\_card\_bg')。

API version 11及之后，默认值为Color.Transparent。

menuBackgroundBlurStyle(value: BlurStyle)

设置下拉菜单的背景模糊材质。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[BlurStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-background-V5#blurstyle9)

是

下拉菜单的背景模糊材质。

默认值：BlurStyle.COMPONENT\_ULTRA\_THICK

ArrowPosition10+枚举说明
--------------------

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

描述

END10+

文字在前，箭头在后。

START10+

箭头在前，文字在后。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

描述

START

按照语言方向起始端对齐。

CENTER

居中对齐。

END

按照语言方向末端对齐。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

value

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

是

下拉菜单项的文本内容。

icon

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

下拉菜单项的图片内容。

symbolIcon12+

[SymbolGlyphModifier](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-attribute-modifier-V5)

否

下拉选项Symbol图片内容。

selected

boolean

是

下拉菜单项是否被选中。

默认值：false

index

number

是

下拉菜单项的索引。

triggerSelect

(index: number, value: string) :void

是

下拉菜单选中某一项的回调函数。

index: 选中菜单项的索引。

value: 选中菜单项的文本。

说明: index会赋值给事件[onSelect](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-select-V5#onselect)回调中的索引参数； value会返回给Select组件显示，同时会赋值给事件[onSelect](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-select-V5#onselect)回调中的文本参数。

事件
--

### onSelect

onSelect(callback: (index: number, value: string) =\> void)

下拉菜单选中某一项的回调。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

index

number

是

选中项的索引。

value

string

是

选中项的值。

示例1
---

2.  @Entry
3.  @Component
4.  struct SelectExample {
5.    @State text: string = "TTTTT"
6.    @State index: number = 2
7.    @State space: number = 8
8.    @State arrowPosition: ArrowPosition = ArrowPosition.END
9.    build() {
10.      Column() {
11.        Select(\[{ value: 'aaa', icon: $r("app.media.selection") },
12.          { value: 'bbb', icon: $r("app.media.selection") },
13.          { value: 'ccc', icon: $r("app.media.selection") },
14.          { value: 'ddd', icon: $r("app.media.selection") }\])
15.          .selected(this.index)
16.          .value(this.text)
17.          .font({ size: 16, weight: 500 })
18.          .fontColor('#182431')
19.          .selectedOptionFont({ size: 16, weight: 400 })
20.          .optionFont({ size: 16, weight: 400 })
21.          .space(this.space)
22.          .arrowPosition(this.arrowPosition)
23.          .menuAlign(MenuAlignType.START, {dx:0, dy:0})
24.          .optionWidth(200)
25.          .optionHeight(300)
26.          .onSelect((index:number, text?: string | undefined)=\>{
27.            console.info('Select:' + index)
28.            this.index = index;
29.            if(text){
30.              this.text = text;
31.            }
32.          })
33.      }.width('100%')
34.    }
35.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114428.58479985034782912276877045908607:50001231000000:2800:6D2067B28DF4BD7B6CB702C5E7EAD9AD2DA326DA6AE2BF6CFFABD32029EE083D.png?needInitFileName=true?needInitFileName=true)

示例2
---

该示例实现了一个自定义下拉菜选项的Select组件。自定义下拉菜单选项样式为“文本 + 图片 + 空白间隔 + 文本 + 绘制三角形”，点击菜单选项后Select组件显示菜单选项的文本内容。

1.  import { MenuItemModifier } from '@kit.ArkUI'

3.  class MyMenuItemContentModifier implements ContentModifier<MenuItemConfiguration\> {
4.    modifierText: string = ""
5.    constructor(text: string) {
6.      this.modifierText = text;
7.    }
8.    applyContent(): WrappedBuilder<\[MenuItemConfiguration\]\> {
9.      return wrapBuilder(MenuItemBuilder)
10.    }
11.  }

13.  @Builder
14.  function MenuItemBuilder(configuration: MenuItemConfiguration) {
15.    Row() {
16.      Text(configuration.value)
17.      Blank()
18.      Image(configuration.icon).size({ width: 40, height: 40 })
19.      Blank(30)
20.      Text((configuration.contentModifier as MyMenuItemContentModifier).modifierText)
21.      Path()
22.        .width('100px')
23.        .height('150px')
24.        .commands('M40 0 L80 100 L0 100 Z')
25.        .fillOpacity(0)
26.        .stroke(Color.Black)
27.        .strokeWidth(3)
28.    }
29.    .onClick(() =\> {
30.      configuration.triggerSelect(configuration.index, configuration.value.valueOf().toString())
31.    })
32.  }

34.  @Entry
35.  @Component
36.  struct SelectExample {
37.    @State text: string = "有modifier"
38.    build() {
39.      Column() {
40.        Row() {
41.          Select(\[{ value: 'item1', icon: $r("app.media.icon") },
42.            { value: 'item2', icon: $r("app.media.icon") }\])
43.            .value(this.text)
44.            .onSelect((index:number, text?: string)=\>{
45.              console.info('Select index:' + index)
46.              console.info('Select text:' + text)
47.            })
48.            .menuItemContentModifier(new MyMenuItemContentModifier("我来自Modifier"))

50.        }.alignItems(VerticalAlign.Center).height("50%")
51.      }
52.    }
53.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114428.20956783338062256266176782125864:50001231000000:2800:23ED7FF24C81A7FB867B9B81AA3655C351A0CF415B4709EF96CED69C096F5980.png?needInitFileName=true?needInitFileName=true)

示例3
---

该示例实现了一个下拉菜单中图片为Symbol的Select组件。

2.  import { SymbolGlyphModifier } from '@kit.ArkUI'

4.  @Entry
5.  @Component
6.  struct SelectExample {
7.    @State text: string = "TTTTT"
8.    @State index: number = 2
9.    @State space: number = 8
10.    @State arrowPosition: ArrowPosition = ArrowPosition.END
11.    @State symbolModifier1: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos\_wifi')).fontColor(\[Color.Green\]);
12.    @State symbolModifier2: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos\_star')).fontColor(\[Color.Red\]);
13.    @State symbolModifier3: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos\_trash')).fontColor(\[Color.Gray\]);
14.    @State symbolModifier4: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.exposure')).fontColor(\[Color.Gray\]);
15.    build() {
16.      Column() {
17.        Select(\[{ value: 'aaa', symbolIcon: this.symbolModifier1 },
18.          { value: 'bbb', symbolIcon: this.symbolModifier2 },
19.          { value: 'ccc', symbolIcon: this.symbolModifier3 },
20.          { value: 'ddd', symbolIcon: this.symbolModifier4 }\])
21.          .selected(this.index)
22.          .value(this.text)
23.          .font({ size: 16, weight: 500 })
24.          .fontColor('#182431')
25.          .selectedOptionFont({ size: 16, weight: 400 })
26.          .optionFont({ size: 16, weight: 400 })
27.          .space(this.space)
28.          .arrowPosition(this.arrowPosition)
29.          .menuAlign(MenuAlignType.START, {dx:0, dy:0})
30.          .onSelect((index:number, text?: string | undefined)=\>{
31.            console.info('Select:' + index)
32.            this.index = index;
33.            if(text){
34.              this.text = text;
35.            }
36.          })
37.      }.width('100%')
38.    }
39.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114429.37326243362067042435788328064900:50001231000000:2800:DC1293F52F430B193CD35867FE29363A9278C12BF55ABD7B2D48FEED605C46FB.png?needInitFileName=true?needInitFileName=true)

示例4
---

该示例实现了一个自定义下拉菜选项的Select组件。自定义下拉菜单选项样式为“文本 + Symbol图片 + 空白间隔 + 文本 + 绘制三角形”，点击菜单选项后Select组件显示菜单选项的文本内容。

1.  import { MenuItemModifier, SymbolGlyphModifier } from '@kit.ArkUI'

3.  class MyMenuItemContentModifier implements ContentModifier<MenuItemConfiguration\> {
4.    modifierText: string = ""
5.    constructor(text: string) {
6.      this.modifierText = text;
7.    }
8.    applyContent(): WrappedBuilder<\[MenuItemConfiguration\]\> {
9.      return wrapBuilder(MenuItemBuilder)
10.    }
11.  }

13.  @Builder
14.  function MenuItemBuilder(configuration: MenuItemConfiguration) {
15.    Row() {
16.      Text(configuration.value)
17.      Blank()
18.      if (configuration.symbolIcon) {
19.        SymbolGlyph().attributeModifier(configuration.symbolIcon).fontSize(24)
20.      } else if (configuration.icon) {
21.        Image(configuration.icon).size({ width: 24, height: 24 })
22.      }
23.      Blank(30)
24.      Text((configuration.contentModifier as MyMenuItemContentModifier).modifierText)
25.      Blank(30)
26.      Path()
27.        .width('100px')
28.        .height('150px')
29.        .commands('M40 0 L80 100 L0 100 Z')
30.        .fillOpacity(0)
31.        .stroke(Color.Black)
32.        .strokeWidth(3)
33.    }
34.    .onClick(() =\> {
35.      configuration.triggerSelect(configuration.index, configuration.value.valueOf().toString())
36.    })
37.  }

39.  @Entry
40.  @Component
41.  struct SelectExample {
42.    @State text: string = "Content Modifier Select"
43.    @State symbolModifier1: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos\_trash')).fontColor(\[Color.Gray\]);
44.    @State symbolModifier2: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.exposure')).fontColor(\[Color.Gray\]);
45.    build() {
46.      Column() {
47.        Row() {
48.          Select(\[{ value: 'item1', icon: $r('app.media.icon'), symbolIcon: this.symbolModifier1 },
49.            { value: 'item1', icon: $r('app.media.icon'), symbolIcon: this.symbolModifier2 }\])
50.            .value(this.text)
51.            .onSelect((index:number, text?: string)=\>{
52.              console.info('Select index:' + index)
53.              console.info('Select text:' + text)
54.            })
55.            .menuItemContentModifier(new MyMenuItemContentModifier("Content Modifier"))

57.        }.alignItems(VerticalAlign.Center).height('50%')
58.      }
59.    }
60.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114429.36894638421077026379157847979496:50001231000000:2800:F9C78C2A613F8221C336A754CDB97B09DBBF2C32221239D3C3CE4EFB0A0D9AE3.png?needInitFileName=true?needInitFileName=true)

示例5
---

该示例实现了分割线样式支持自定义。

2.  @Entry
3.  @Component
4.  struct SelectExample {
5.    @State text: string = "TTTTT"
6.    @State index: number = -1
7.    @State arrowPosition: ArrowPosition = ArrowPosition.END
8.    build() {
9.      Column() {
10.        Select(\[{ value: 'aaa', icon: $r("app.media.icon") },
11.          { value: 'bbb', icon: $r("app.media.icon") },
12.          { value: 'ccc', icon: $r("app.media.icon") },
13.          { value: 'ddd', icon: $r("app.media.icon") }\])
14.          .selected(this.index)
15.          .value(this.text)
16.          .font({ size: 16, weight: 500 })
17.          .fontColor('#182431')
18.          .selectedOptionFont({ size: 16, weight: 400 })
19.          .optionFont({ size: 16, weight: 400 })
20.          .arrowPosition(this.arrowPosition)
21.          .menuAlign(MenuAlignType.START, {dx:0, dy:0})
22.          .optionWidth(200)
23.          .optionHeight(300)
24.          .divider( { strokeWidth: 5, color: Color.Blue, startMargin: 10, endMargin: 10 })
25.          .onSelect((index:number, text?: string | undefined)=\>{
26.            console.info('Select:' + index)
27.            this.index = index;
28.            if(text){
29.              this.text = text;
30.            }
31.          })
32.      }.width('100%')
33.    }
34.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114429.53257207567451054291088325121062:50001231000000:2800:7FB0146100E026A77D67EF6A647145E0CDE3AF2A0E300FE3AAE4ECBE95E3962E.png?needInitFileName=true?needInitFileName=true)

示例6
---

该示例实现了隐藏分割线。

2.  @Entry
3.  @Component
4.  struct SelectExample {
5.    @State text: string = "TTTTT"
6.    @State index: number = -1
7.    @State arrowPosition: ArrowPosition = ArrowPosition.END
8.    build() {
9.      Column() {
10.        Select(\[{ value: 'aaa', icon: $r("app.media.icon") },
11.          { value: 'bbb', icon: $r("app.media.icon") },
12.          { value: 'ccc', icon: $r("app.media.icon") },
13.          { value: 'ddd', icon: $r("app.media.icon") }\])
14.          .selected(this.index)
15.          .value(this.text)
16.          .font({ size: 16, weight: 500 })
17.          .fontColor('#182431')
18.          .selectedOptionFont({ size: 16, weight: 400 })
19.          .optionFont({ size: 16, weight: 400 })
20.          .arrowPosition(this.arrowPosition)
21.          .menuAlign(MenuAlignType.START, {dx:0, dy:0})
22.          .optionWidth(200)
23.          .optionHeight(300)
24.          .divider( null )
25.          .onSelect((index:number, text?: string | undefined)=\>{
26.            console.info('Select:' + index)
27.            this.index = index;
28.            if(text){
29.              this.text = text;
30.            }
31.          })
32.      }.width('100%')
33.    }
34.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114429.52403205803624605333619187487209:50001231000000:2800:2F3BE111C01F7CB9CE06A21ADDB6EE9F31282AC26EC6A5843BC4C1DF1CBE966A.png?needInitFileName=true?needInitFileName=true)
