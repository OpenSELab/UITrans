{
    "description": "多行文本输入框组件，当输入的文本内容超过组件宽度时会自动换行显示。",
    "details": "高度未设置时，组件无默认高度，自适应内容高度。宽度未设置时，默认撑满最大宽度。",
    "interfaces": [
        {
            "description": "TextArea(value?: TextAreaOptions)",
            "params": {
                "value": {
                    "type": "TextAreaOptions",
                    "description": "文本输入框的配置选项。"
                }
            }
        }
    ],
    "attributes": {
        "placeholder": {
            "description": "设置无输入时的提示文本。输入内容后，提示文本不显示。",
            "params": {
                "value": {
                    "type": "ResourceStr",
                    "description": "提示文本内容。"
                }
            }
        },
        "text": {
            "description": "设置输入框当前的文本内容。",
            "params": {
                "value": {
                    "type": "ResourceStr",
                    "description": "输入框的文本内容。"
                }
            }
        },
        "controller": {
            "description": "设置TextArea控制器。",
            "params": {
                "value": {
                    "type": "TextAreaController",
                    "description": "TextArea的控制器对象。"
                }
            }
        },
        "placeholderColor": {
            "description": "设置placeholder文本颜色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "placeholder文本的颜色。"
                }
            }
        },
        "placeholderFont": {
            "description": "设置placeholder文本样式，包括字体大小，字体粗细，字体族，字体风格。",
            "params": {
                "value": {
                    "type": "Font",
                    "required": true,
                    "description": "placeholder文本的样式。"
                }
            }
        },
        "textAlign": {
            "description": "设置文本在输入框中的水平对齐方式。",
            "params": {
                "value": {
                    "type": "TextAlign",
                    "required": true,
                    "description": "文本在输入框中的水平对齐方式。",
                    "default": "TextAlign.Start"
                }
            }
        },
        "caretColor": {
            "description": "设置输入框光标颜色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "输入框光标的颜色。"
                }
            }
        },
        "fontColor": {
            "description": "设置字体颜色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "字体的颜色。"
                }
            }
        },
        "fontSize": {
            "description": "设置字体大小。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "string",
                        "Resource"
                    ],
                    "required": true,
                    "description": "字体大小。fontSize为number类型时，使用fp单位。字体默认大小16fp。不支持设置百分比字符串。"
                }
            }
        },
        "fontStyle": {
            "description": "设置字体样式。",
            "params": {
                "value": {
                    "type": "FontStyle",
                    "required": true,
                    "description": "字体样式。",
                    "default": "FontStyle.Normal"
                }
            }
        },
        "fontWeight": {
            "description": "设置文本的字体粗细，设置过大可能会在不同字体下有截断。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "FontWeight",
                        "string"
                    ],
                    "required": true,
                    "description": "文本的字体粗细，number类型取值[100, 900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如\"400\"，以及\"bold\"、\"bolder\"、\"lighter\"、\"regular\"、\"medium\"，分别对应FontWeight中相应的枚举值。",
                    "default": "FontWeight.Normal"
                }
            }
        },
        "fontFamily": {
            "description": "设置字体列表。",
            "params": {
                "value": {
                    "type": [
                        "string",
                        "Resource"
                    ],
                    "required": true,
                    "description": "字体列表。默认字体'HarmonyOS Sans'。"
                }
            }
        },
        "inputFilter": {
            "description": "通过正则表达式设置输入过滤器。匹配表达式的输入允许显示，不匹配的输入将被过滤。仅支持单个字符匹配，不支持字符串匹配。",
            "params": {
                "value": {
                    "type": "ResourceStr",
                    "required": true,
                    "description": "正则表达式。"
                },
                "error": {
                    "type": "(value: string) => void",
                    "description": "正则匹配失败时，返回被过滤的内容。"
                }
            }
        },
        "copyOption": {
            "description": "设置输入的文本是否可复制。设置CopyOptions.None时，当前TextArea中的文字无法被复制或剪切，仅支持粘贴。",
            "params": {
                "value": {
                    "type": "CopyOptions",
                    "required": true,
                    "description": "输入的文本是否可复制。",
                    "default": "CopyOptions.LocalDevice"
                }
            }
        },
        "maxLength": {
            "description": "设置文本的最大输入字符数。默认不设置最大输入字符数限制。到达文本最大字符限制，将无法继续输入字符，同时边框变为红色。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "文本的最大输入字符数。"
                }
            }
        },
        "showCounter": {
            "description": "设置当通过InputCounterOptions输入的字符数超过阈值时显示计数器。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "是否显示计数器。"
                },
                "options": {
                    "type": "InputCounterOptions",
                    "description": "计数器的配置选项。"
                }
            }
        },
        "style": {
            "description": "设置文本框多态样式，内联输入风格只支持TextAreaType.Normal类型。",
            "params": {
                "value": {
                    "type": "TextContentStyle",
                    "required": true,
                    "description": "文本框的多态样式。"
                }
            }
        },
        "enableKeyboardOnFocus": {
            "description": "设置TextArea通过点击以外的方式获焦时，是否绑定输入法。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "是否绑定输入法。",
                    "default": true
                }
            }
        },
        "selectionMenuHidden": {
            "description": "设置是否不弹出系统文本选择菜单。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "是否不弹出系统文本选择菜单。",
                    "default": false
                }
            }
        },
        "barState": {
            "description": "设置输入框编辑态时滚动条的显示模式。",
            "params": {
                "value": {
                    "type": "BarState",
                    "required": true,
                    "description": "输入框编辑态时滚动条的显示模式。",
                    "default": "BarState.Auto"
                }
            }
        },
        "maxLines": {
            "description": "配置textOverflow一起使用时，maxlines为可显示行数，超出截断；未配置textOverflow时，内联模式获焦状态下内容超出maxlines时，文本可滚动显示，内联模式非获焦状态下不生效maxlines，非内联模式按行截断。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "内联输入风格编辑态时文本可显示的最大行数。",
                    "default": 3
                }
            }
        },
        "customKeyboard": {
            "description": "设置自定义键盘。",
            "params": {
                "value": {
                    "type": "CustomBuilder",
                    "required": true,
                    "description": "自定义键盘的构建器。"
                },
                "options": {
                    "type": "KeyboardOptions",
                    "description": "自定义键盘的配置选项。"
                }
            }
        },
        "type": {
            "description": "设置输入框类型。",
            "params": {
                "value": {
                    "type": "TextAreaType",
                    "required": true,
                    "description": "输入框类型。",
                    "default": "TextAreaType.Normal"
                }
            }
        },
        "enterKeyType": {
            "description": "设置输入法回车键类型。",
            "params": {
                "value": {
                    "type": "EnterKeyType",
                    "required": true,
                    "description": "输入法回车键类型。",
                    "default": "EnterKeyType.NEW_LINE"
                }
            }
        },
        "enableAutoFill": {
            "description": "设置是否启用自动填充。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "是否启用自动填充。",
                    "default": true
                }
            }
        },
        "contentType": {
            "description": "设置自动填充类型。",
            "params": {
                "contentType": {
                    "type": "ContentType",
                    "required": true,
                    "description": "自动填充类型。"
                }
            }
        },
        "lineHeight": {
            "description": "设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小，number类型时单位为fp。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "string",
                        "Resource"
                    ],
                    "required": true,
                    "description": "文本的文本行高。"
                }
            }
        },
        "decoration": {
            "description": "设置文本装饰线类型样式及其颜色。",
            "params": {
                "value": {
                    "type": "TextDecorationOptions",
                    "required": true,
                    "description": "文本装饰线对象。",
                    "default": {
                        "type": "TextDecorationType.None",
                        "color": "Color.Black",
                        "style": "TextDecorationStyle.SOLID"
                    }
                }
            }
        },
        "letterSpacing": {
            "description": "设置文本字符间距。设置该值为百分比时，按默认值显示。设置该值为0时，按默认值显示。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "string",
                        "Resource"
                    ],
                    "required": true,
                    "description": "文本字符间距。"
                }
            }
        },
        "wordBreak": {
            "description": "设置文本断行规则。该属性对placeholder文本无效。",
            "params": {
                "value": {
                    "type": "WordBreak",
                    "required": true,
                    "description": "文本断行规则。",
                    "default": "WordBreak.BREAK_WORD"
                }
            }
        },
        "selectedBackgroundColor": {
            "description": "设置文本选中底板颜色。如果未设置不透明度，默认为20%不透明度。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "文本选中底板颜色。"
                }
            }
        },
        "caretStyle": {
            "description": "设置光标风格。",
            "params": {
                "value": {
                    "type": "CaretStyle",
                    "required": true,
                    "description": "光标风格。"
                }
            }
        },
        "textIndent": {
            "description": "设置首行文本缩进。",
            "params": {
                "value": {
                    "type": "Dimension",
                    "required": true,
                    "description": "首行文本缩进。"
                }
            }
        },
        "textOverflow": {
            "description": "设置文本超长时的显示方式。",
            "params": {
                "value": {
                    "type": "TextOverflow",
                    "required": true,
                    "description": "文本超长时的显示方式。",
                    "default": "TextOverflow.Clip"
                }
            }
        },
        "minFontSize": {
            "description": "设置文本最小显示字号。需配合maxFontSize以及maxLines或布局大小限制使用，单独设置不生效。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "string",
                        "Resource"
                    ],
                    "required": true,
                    "description": "文本最小显示字号。"
                }
            }
        },
        "maxFontSize": {
            "description": "设置文本最大显示字号。需配合minFontSize以及maxLines或布局大小限制使用，单独设置不生效。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "string",
                        "Resource"
                    ],
                    "required": true,
                    "description": "文本最大显示字号。"
                }
            }
        },
        "heightAdaptivePolicy": {
            "description": "设置文本自适应高度的方式。",
            "params": {
                "value": {
                    "type": "TextHeightAdaptivePolicy",
                    "required": true,
                    "description": "文本自适应高度的方式。"
                }
            }
        },
        "lineSpacing": {
            "description": "设置文本的行间距，设置值不大于0时，取默认值0。",
            "params": {
                "value": {
                    "type": "LengthMetrics",
                    "required": true,
                    "description": "文本的行间距。"
                }
            }
        },
        "lineBreakStrategy": {
            "description": "设置折行规则。该属性在wordBreak不等于breakAll的时候生效，不支持连词符。",
            "params": {
                "strategy": {
                    "type": "LineBreakStrategy",
                    "required": true,
                    "description": "折行规则。"
                }
            }
        },
        "editMenuOptions": {
            "description": "设置自定义菜单扩展项，允许用户设置扩展项的文本内容、图标、回调方法。",
            "params": {
                "editMenu": {
                    "type": "EditMenuOptions",
                    "required": true,
                    "description": "自定义菜单扩展项的配置。"
                }
            }
        },
        "enablePreviewText": {
            "description": "设置是否开启输入预上屏。",
            "params": {
                "enable": {
                    "type": "boolean",
                    "required": true,
                    "description": "是否开启输入预上屏。",
                    "default": true
                }
            }
        }
    },
    "events": {
        "onChange": {
            "description": "输入内容发生变化时，触发该回调。",
            "params": {
                "callback": {
                    "type": "EditableTextOnChangeCallback",
                    "required": true,
                    "description": "输入内容发生变化时的回调函数。"
                }
            }
        },
        "onEditChange": {
            "description": "输入状态变化时，触发该回调。有光标时为编辑态，无光标时为非编辑态。isEditing为true表示正在输入。",
            "params": {
                "callback": {
                    "type": "(isEditing: boolean) => void",
                    "required": true,
                    "description": "输入状态变化时的回调函数。"
                }
            }
        },
        "onCopy": {
            "description": "进行复制操作时，触发该回调。",
            "params": {
                "callback": {
                    "type": "(value: string) => void",
                    "required": true,
                    "description": "进行复制操作时的回调函数。"
                }
            }
        },
        "onCut": {
            "description": "进行剪切操作时，触发该回调。",
            "params": {
                "callback": {
                    "type": "(value: string) => void",
                    "required": true,
                    "description": "进行剪切操作时的回调函数。"
                }
            }
        },
        "onPaste": {
            "description": "进行粘贴操作时，触发该回调。",
            "params": {
                "callback": {
                    "type": "(value: string, event: PasteEvent) => void",
                    "required": true,
                    "description": "进行粘贴操作时的回调函数。"
                }
            }
        },
        "onTextSelectionChange": {
            "description": "文本选择的位置发生变化或编辑状态下光标位置发生变化时，触发该回调。",
            "params": {
                "callback": {
                    "type": "(selectionStart: number, selectionEnd: number) => void",
                    "required": true,
                    "description": "文本选择或光标位置变化时的回调函数。"
                }
            }
        },
        "onContentScroll": {
            "description": "文本内容滚动时，触发该回调。",
            "params": {
                "callback": {
                    "type": "(totalOffsetX: number, totalOffsetY: number) => void",
                    "required": true,
                    "description": "文本内容滚动时的回调函数。"
                }
            }
        },
        "onSubmit": {
            "description": "按下输入法回车键触发该回调。",
            "params": {
                "callback": {
                    "type": "(enterKey: EnterKeyType) => void",
                    "required": true,
                    "description": "按下输入法回车键时的回调函数。"
                }
            }
        },
        "onWillInsert": {
            "description": "在将要输入时，触发该回调。",
            "params": {
                "callback": {
                    "type": "Callback<InsertValue, boolean>",
                    "required": true,
                    "description": "在将要输入时的回调函数。"
                }
            }
        },
        "onDidInsert": {
            "description": "在输入完成时，触发该回调。",
            "params": {
                "callback": {
                    "type": "Callback<InsertValue>",
                    "required": true,
                    "description": "在输入完成时的回调函数。"
                }
            }
        },
        "onWillDelete": {
            "description": "在将要删除时，触发该回调。",
            "params": {
                "callback": {
                    "type": "Callback<DeleteValue, boolean>",
                    "required": true,
                    "description": "在将要删除时的回调函数。"
                }
            }
        },
        "onDidDelete": {
            "description": "在删除完成时，触发该回调。",
            "params": {
                "callback": {
                    "type": "Callback<DeleteValue>",
                    "required": true,
                    "description": "在删除完成时的回调函数。"
                }
            }
        }
    },
    "rules": [
        "组件不支持clip属性设置，设置该属性任意枚举值对组件文本截断无影响。",
        "TextArea组件不支持设置TextOverflow.MARQUEE模式,当设置为TextOverflow.MARQUEE模式时 显示为TextOverflow.Clip。"
    ],
    "examples": [
        {
            "description": "该组件实现了一个带有计数器的文本输入区域（TextArea）。布局宽度占据整个屏幕，高度设为 100%，背景颜色为 #F1F3F5。组件的垂直方向上包含一个 TextArea 组件，该组件的宽度为 336vp，高度为 56vp，最大输入长度为 6 个字符。TextArea 组件的占位符字体大小为 16，字体粗细为 400。TextArea 组件启用了计数器功能，当输入字符数超过最大长度的 50% 时，计数器会高亮显示。\n\nTextArea 组件的功能包括输入文本的实时更新，当用户输入或删除文本时，TextArea 的值会通过 onChange 事件实时更新到组件的状态变量 text 中。",
            "code": "@Entry\n@Component\nstruct TextAreaExample {\n  @State text: string = '' // 状态变量，用于存储 TextArea 的输入内容\n  controller: TextAreaController = new TextAreaController() // TextArea 的控制器，用于控制 TextArea 的行为\n\n  build() {\n    Column() {\n      TextArea({ text: this.text, controller: this.controller })\n        .placeholderFont({ size: 16, weight: 400 }) // 设置占位符字体大小和粗细\n        .width(336) // 设置 TextArea 的宽度\n        .height(56) // 设置 TextArea 的高度\n        .maxLength(6) // 设置 TextArea 的最大输入长度\n        .showCounter(true, { thresholdPercentage: 50, highlightBorder: true }) // 启用计数器功能，当输入字符数超过最大长度的 50% 时，计数器会高亮显示\n\n        .onChange((value: string) => { // 监听 TextArea 的输入变化事件\n          this.text = value // 更新状态变量 text 的值\n        })\n    }.width('100%').height('100%').backgroundColor('#F1F3F5') // 设置布局的宽度、高度和背景颜色\n  }\n}"
        },
        {
            "description": "该组件通过 Column 布局实现了一个展示文本区域（TextArea）及其字体特征（fontFeature）效果的界面。布局宽度占据整个屏幕的 90%，内边距为左右 5%。组件的垂直方向上被分为两个部分，每个部分包含一个 TextArea 组件。每个 TextArea 组件的文本内容通过 @State 变量进行管理，分别展示了使用 ss01 字体特征和不使用 ss01 字体特征的效果。\n\nTextArea 组件的样式包括字体大小、边距等属性。第一个 TextArea 组件使用了 ss01 字体特征，第二个 TextArea 组件未使用 ss01 字体特征。组件的功能主要是展示不同字体特征对文本显示效果的影响。\n\n整个布局通过 Column 布局保证 TextArea 在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct textArea {\n  @State text1: string = 'This is ss01 on : 0123456789' // 定义一个状态变量 text1，用于存储第一个 TextArea 的文本内容\n  @State text2: string = 'This is ss01 off: 0123456789' // 定义一个状态变量 text2，用于存储第二个 TextArea 的文本内容\n\n  build() {\n    Column(){\n      TextArea({text: this.text1}) // 创建一个 TextArea 组件，显示 text1 的内容\n        .fontSize(20) // 设置字体大小为 20\n        .margin({top:200}) // 设置顶部边距为 200\n        .fontFeature(\"\\\\\"ss01\\\\\" on\") // 启用 ss01 字体特征\n      TextArea({text : this.text2}) // 创建另一个 TextArea 组件，显示 text2 的内容\n        .margin({top:10}) // 设置顶部边距为 10\n        .fontSize(20) // 设置字体大小为 20\n        .fontFeature(\"\\\\\"ss01\\\\\" off\") // 禁用 ss01 字体特征\n    }\n    .width(\"90%\") // 设置布局宽度为屏幕宽度的 90%\n    .margin(\"5%\") // 设置左右边距为屏幕宽度的 5%\n  }\n}"
        },
        {
            "description": "该组件通过 Column 布局实现了一个包含两个 TextArea 输入框的界面。布局宽度占据整个屏幕，高度设为 100%，背景颜色为 #F1F3F5。组件的垂直方向上被分为两个部分，每个部分包含一个 TextArea 输入框。每个 TextArea 输入框的宽度为 95%，高度为 40vp，边距为 20vp。\nTextArea 输入框的样式包括占位符文本、内容类型、自动填充功能和最大输入长度等属性。第一个 TextArea 输入框用于输入电子邮件地址，第二个 TextArea 输入框用于输入街道地址。输入框的功能包括自动填充和输入长度限制，用户可以通过输入内容触发自动填充功能，并且输入长度不能超过 20 个字符。\n整个布局通过 Column 布局保证输入框在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TextAreaExample {\n  @State text: string = '' // 定义一个状态变量 text，用于存储输入框的文本内容\n\n  build() {\n    Column() {\n      // 第一个 TextArea 输入框，用于输入电子邮件地址\n      TextArea({ placeholder: 'input your email...' })\n        .width('95%') // 设置输入框的宽度为 95%\n        .height(40) // 设置输入框的高度为 40vp\n        .margin(20) // 设置输入框的边距为 20vp\n        .contentType(ContentType.EMAIL_ADDRESS) // 设置输入框的内容类型为电子邮件地址\n        .enableAutoFill(true) // 启用自动填充功能\n        .maxLength(20) // 设置输入框的最大输入长度为 20 个字符\n\n      // 第二个 TextArea 输入框，用于输入街道地址\n      TextArea({ placeholder: 'input your street address...' })\n        .width('95%') // 设置输入框的宽度为 95%\n        .height(40) // 设置输入框的高度为 40vp\n        .margin(20) // 设置输入框的边距为 20vp\n        .contentType(ContentType.FULL_STREET_ADDRESS) // 设置输入框的内容类型为街道地址\n        .enableAutoFill(true) // 启用自动填充功能\n        .maxLength(20) // 设置输入框的最大输入长度为 20 个字符\n    }\n    .width('100%') // 设置 Column 的宽度为 100%\n    .height('100%') // 设置 Column 的高度为 100%\n    .backgroundColor('#F1F3F5') // 设置 Column 的背景颜色为 #F1F3F5\n  }\n}"
        },
        {
            "description": "该示例展示了如何在鸿蒙ArkUI中使用TextArea组件绑定自定义键盘。布局上，TextArea组件占据垂直方向的主要空间，高度为200vp，带有1vp宽的边框。自定义键盘通过一个Column组件实现，包含一个关闭按钮和一个Grid组件，用于显示数字和符号按钮。Grid组件采用3列布局，每个按钮的宽度为110vp，按钮之间有10vp的列间距和行间距，整体背景颜色为灰色。\n\n组件的样式包括TextArea的边框样式、自定义键盘的背景颜色和按钮的宽度。组件的排列和嵌套关系为：TextArea位于Column的顶部，自定义键盘位于TextArea下方。组件的功能包括TextArea的输入控制和自定义键盘的按钮点击事件，用户可以通过点击自定义键盘的按钮来输入内容，并通过关闭按钮停止编辑。",
            "code": "@Entry\n@Component\nstruct TextAreaExample {\n  // 创建一个TextAreaController实例，用于控制TextArea的行为\n  controller: TextAreaController = new TextAreaController()\n  \n  // 定义一个状态变量inputValue，用于存储TextArea的输入内容\n  @State inputValue: string = \"\"\n\n  // 自定义键盘的构建器，返回一个包含关闭按钮和数字符号按钮的Column组件\n  @Builder CustomKeyboardBuilder() {\n    Column() {\n      // 关闭按钮，点击后调用controller的stopEditing方法停止编辑\n      Button('x').onClick(() => {\n        this.controller.stopEditing()\n      })\n      \n      // 数字符号按钮的Grid布局，包含12个按钮，每个按钮对应一个数字或符号\n      Grid() {\n        ForEach([1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'], (item: number | string) => {\n          GridItem() {\n            // 每个按钮显示对应的数字或符号，点击后将内容追加到inputValue中\n            Button(item + \"\")\n              .width(110).onClick(() => {\n                this.inputValue += item\n              })\n          }\n        })\n      }\n      .maxCount(3) // 设置Grid的最大列数为3\n      .columnsGap(10) // 设置列间距为10vp\n      .rowsGap(10) // 设置行间距为10vp\n      .padding(5) // 设置内边距为5vp\n    }\n    .backgroundColor(Color.Gray) // 设置自定义键盘的背景颜色为灰色\n  }\n\n  // 构建整个组件的UI结构\n  build() {\n    Column() {\n      // TextArea组件，绑定controller和inputValue，使用自定义键盘\n      TextArea({ controller: this.controller, text: this.inputValue})\n        .customKeyboard(this.CustomKeyboardBuilder()) // 设置自定义键盘\n        .margin(10) // 设置外边距为10vp\n        .border({ width: 1 }) // 设置边框宽度为1vp\n        .height(200) // 设置高度为200vp\n    }\n  }\n}"
        },
        {
            "description": "该组件通过 Column 布局实现了一个包含 TextArea 和 Button 的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为两个部分：一个 TextArea 和一个 Button。TextArea 用于用户输入，Button 用于切换 TextArea 的 enterKeyType 属性。\n\nTextArea 的样式包括宽度为 380vp，占位符文本为“请输入用户名”，文本内容与 @State 变量 Text 绑定。TextArea 的 enterKeyType 属性根据 @State 变量 index 动态设置，支持多种 EnterKeyType 类型。TextArea 的功能包括文本输入和提交事件，用户输入的文本会实时更新到 @State 变量 Text，当用户按下回车键时会触发 onSubmit 事件。\n\nButton 的样式包括文本为“改变EnterKeyType”，宽度根据内容自适应。Button 的功能包括点击事件，点击按钮会切换 @State 变量 index 的值，从而改变 TextArea 的 enterKeyType 属性。\n\n整个布局通过 Column 布局保证 TextArea 和 Button 在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TextInputExample {\n  @State Text: string = '' // 用于存储 TextArea 的输入文本\n  @State enterTypes: Array<EnterKeyType> = [EnterKeyType.Go, EnterKeyType.Search, EnterKeyType.Send, EnterKeyType.Done, EnterKeyType.Next, EnterKeyType.PREVIOUS, EnterKeyType.NEW_LINE] // 存储多种 EnterKeyType 类型\n  @State index: number = 0 // 用于索引当前的 EnterKeyType 类型\n\n  build() {\n    Column({ space: 20 }) { // 创建一个垂直布局，子组件之间的间距为 20vp\n      TextArea({ placeholder: '请输入用户名', text: this.Text }) // 创建一个 TextArea 组件，占位符为“请输入用户名”，文本内容与 @State 变量 Text 绑定\n        .width(380) // 设置 TextArea 的宽度为 380vp\n        .enterKeyType(this.enterTypes[this.index]) // 根据 @State 变量 index 设置 TextArea 的 enterKeyType 属性\n        .onChange((value: string) => { // 监听 TextArea 的文本变化事件\n          this.Text = value // 将输入的文本更新到 @State 变量 Text\n        })\n        .onSubmit((enterKey: EnterKeyType) => { // 监听 TextArea 的提交事件\n          console.log(\"trigger area onsubmit\" + enterKey); // 打印当前的 EnterKeyType 类型\n        })\n      Button('改变EnterKeyType').onClick(() => { // 创建一个 Button 组件，文本为“改变EnterKeyType”，点击事件用于切换 EnterKeyType 类型\n        this.index = (this.index + 1) % this.enterTypes.length; // 切换 @State 变量 index 的值，从而改变 TextArea 的 enterKeyType 属性\n      })\n    }.width('100%') // 设置 Column 的宽度为 100%\n  }\n}"
        },
        {
            "description": "该组件通过 Column 布局实现了一个文本输入区域（TextArea）的界面。布局宽度占据整个屏幕，高度设为 100%，背景颜色为 #F1F3F5。组件的垂直方向上包含一个 TextArea 组件，该组件用于用户输入文本。\n\nTextArea 组件的宽度为 336vp，高度为 56vp，内边距为 20vp。组件的样式包括背景颜色为白色（#FFFFFF），字体大小为 16vp，字体颜色为 #182431。TextArea 组件的占位符文本为 \"The text area can hold an unlimited amount of text. input your word...\"，占位符文本的字体大小为 16vp，字体粗细为 400。\n\nTextArea 组件的功能包括最大输入长度限制为 4 个字符，并且显示字符计数器。当用户输入或修改文本时，TextArea 的 onChange 事件会被触发，更新组件的 text 状态。\n\n整个布局通过 Column 布局保证 TextArea 在垂直方向上居中显示，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TextAreaExample {\n  @State text: string = 'test' // 初始化文本内容为 \"test\"\n  @State counterVisible: boolean = false // 初始化字符计数器可见性为 false\n  @State maxNumber: number = -1 // 初始化最大字符数为 -1\n  controller: TextAreaController = new TextAreaController() // 创建 TextArea 控制器实例\n\n  build() {\n    Column() {\n      TextArea({\n        text: this.text, // 绑定文本内容\n        placeholder: 'The text area can hold an unlimited amount of text. input your word...', // 设置占位符文本\n        controller: this.controller // 绑定 TextArea 控制器\n      })\n        .placeholderFont({ size: 16, weight: 400 }) // 设置占位符文本的字体大小和粗细\n        .width(336) // 设置 TextArea 的宽度为 336vp\n        .height(56) // 设置 TextArea 的高度为 56vp\n        .margin(20) // 设置 TextArea 的内边距为 20vp\n        .fontSize(16) // 设置 TextArea 的字体大小为 16vp\n        .fontColor('#182431') // 设置 TextArea 的字体颜色为 #182431\n        .maxLength(4) // 设置 TextArea 的最大输入长度为 4 个字符\n        .showCounter(true) // 显示字符计数器\n        .backgroundColor('#FFFFFF') // 设置 TextArea 的背景颜色为白色（#FFFFFF）\n        .onChange((value: string) => { // 监听 TextArea 的 onChange 事件\n          this.text = value // 更新 text 状态\n        })\n    }.width('100%').height('100%').backgroundColor('#F1F3F5') // 设置 Column 的宽度为 100%，高度为 100%，背景颜色为 #F1F3F5\n  }\n}"
        },
        {
            "description": "该组件通过 Row 和 Column 布局实现了一个展示三种不同高度自适应策略的文本区域的界面。布局宽度占据整个屏幕的 90%，高度设为 90%，内边距为 10vp。组件的垂直方向上被分为一个标题和三个文本区域。每个文本区域的宽度为 80%，高度为 90vp，边框宽度为 1vp，内边距为 1vp。\n文本区域的样式包括最小字体大小（4）、最大字体大小（40）、最大行数（3）以及三种不同的高度自适应策略（MAX_LINES_FIRST、MIN_FONT_SIZE_FIRST、LAYOUT_CONSTRAINT_FIRST）。文本区域的功能包括根据设置的策略自动调整字体大小以适应文本区域的高度，确保文本在有限的空间内显示完整。\n整个布局通过 Column 布局保证文本区域在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TextAreaExample {\n  build() {\n    Row() {\n      Column() {\n        // 标题文本，字体大小为 9，颜色为 0xCCCCCC\n        Text('heightAdaptivePolicy').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 第一个文本区域，设置高度自适应策略为 MAX_LINES_FIRST\n        TextArea({text: 'This is the text with the height adaptive policy set'})\n          .width('80%').height(90).borderWidth(1).margin(1)\n          .minFontSize(4) // 设置最小字体大小为 4\n          .maxFontSize(40) // 设置最大字体大小为 40\n          .maxLines(3) // 设置最大行数为 3\n          .heightAdaptivePolicy(TextHeightAdaptivePolicy.MAX_LINES_FIRST) // 设置高度自适应策略为 MAX_LINES_FIRST\n        \n        // 第二个文本区域，设置高度自适应策略为 MIN_FONT_SIZE_FIRST\n        TextArea({text: 'This is the text with the height adaptive policy set'})\n          .width('80%').height(90).borderWidth(1).margin(1)\n          .minFontSize(4) // 设置最小字体大小为 4\n          .maxFontSize(40) // 设置最大字体大小为 40\n          .maxLines(3) // 设置最大行数为 3\n          .heightAdaptivePolicy(TextHeightAdaptivePolicy.MIN_FONT_SIZE_FIRST) // 设置高度自适应策略为 MIN_FONT_SIZE_FIRST\n        \n        // 第三个文本区域，设置高度自适应策略为 LAYOUT_CONSTRAINT_FIRST\n        TextArea({text: 'This is the text with the height adaptive policy set'})\n          .width('80%').height(90).borderWidth(1).margin(1)\n          .minFontSize(4) // 设置最小字体大小为 4\n          .maxFontSize(40) // 设置最大字体大小为 40\n          .maxLines(3) // 设置最大行数为 3\n          .heightAdaptivePolicy(TextHeightAdaptivePolicy.LAYOUT_CONSTRAINT_FIRST) // 设置高度自适应策略为 LAYOUT_CONSTRAINT_FIRST\n      }.height('90%') // 设置 Column 的高度为 90%\n    }\n    .width('90%') // 设置 Row 的宽度为 90%\n    .margin(10) // 设置 Row 的外边距为 10vp\n  }\n}"
        },
        {
            "description": "该组件通过 Row 和 Column 布局实现了一个展示两个 TextArea 组件及其回调信息的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为多个部分，每个部分包含一个 TextArea 组件和一个显示回调信息的 Text 组件。每个 TextArea 组件的宽度为 300vp，高度为 60vp，且支持插入和删除回调。\nTextArea 组件的样式包括宽度、高度等属性，支持不同的样式展示。Text 组件用于显示插入和删除的回调信息，包括插入的文本、插入的偏移量、删除的文本、删除的偏移量以及删除的方向。\n整个布局通过 Row 和 Column 布局保证组件在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TextAreaExample {\n  // 插入的文本值\n  @State insertValue: string = \"\"\n  // 删除的文本值\n  @State deleteValue: string = \"\"\n  // 插入的偏移量\n  @State insertOffset: number = 0\n  // 删除的偏移量\n  @State deleteOffset: number = 0\n  // 删除的方向（0 表示 BACKWARD，1 表示 FORWARD）\n  @State deleteDirection: number = 0\n\n  build() {\n    Row() {\n      Column() {\n        // 第一个 TextArea 组件，支持插入回调\n        TextArea({ text: \"TextArea支持插入回调文本\" })\n          .width(300)  // 设置宽度为 300vp\n          .height(60)  // 设置高度为 60vp\n          .onWillInsert((info: InsertValue) => {\n            // 插入前的回调，设置插入的文本值\n            this.insertValue = info.insertValue\n            return true;  // 允许插入\n          })\n          .onDidInsert((info: InsertValue) => {\n            // 插入后的回调，设置插入的偏移量\n            this.insertOffset = info.insertOffset\n          })\n\n        // 显示插入的文本值和插入的偏移量\n        Text(\"insertValue:\" + this.insertValue + \"  insertOffset:\" + this.insertOffset).height(30)\n\n        // 第二个 TextArea 组件，支持删除回调\n        TextArea({ text: \"TextArea支持删除回调文本b\" })\n          .width(300)  // 设置宽度为 300vp\n          .height(60)  // 设置高度为 60vp\n          .onWillDelete((info: DeleteValue) => {\n            // 删除前的回调，设置删除的文本值和删除的方向\n            this.deleteValue = info.deleteValue\n            info.direction\n            return true;  // 允许删除\n          })\n          .onDidDelete((info: DeleteValue) => {\n            // 删除后的回调，设置删除的偏移量和删除的方向\n            this.deleteOffset = info.deleteOffset\n            this.deleteDirection = info.direction\n          })\n\n        // 显示删除的文本值和删除的偏移量\n        Text(\"deleteValue:\" + this.deleteValue + \"  deleteOffset:\" + this.deleteOffset).height(30)\n        // 显示删除的方向\n        Text(\"deleteDirection:\" + (this.deleteDirection == 0 ? \"BACKWARD\" : \"FORWARD\")).height(30)\n\n      }.width('100%')  // 设置 Column 的宽度为 100%\n    }\n    .height('100%')  // 设置 Row 的高度为 100%\n  }\n}"
        },
        {
            "description": "该组件通过 Flex 布局实现了一个展示 TextArea 组件在不同 lineSpacing 设置下的效果。布局宽度为 350vp，高度为 600vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组 TextArea。每个 TextArea 组的 TextArea 以垂直布局方式排列，TextArea 之间的间距均匀分布，且对齐方式为左对齐。\nTextArea 的样式包括字体大小、占位符文本等属性，支持不同的 lineSpacing 设置。TextArea 组之间通过 Flex 组件进行分隔。TextArea 的功能包括展示不同 lineSpacing 设置下的文本行间距效果，用户可以通过观察 TextArea 中的占位符文本在不同 lineSpacing 设置下的表现来理解 lineSpacing 的作用。\n整个布局通过 Flex 布局保证 TextArea 在垂直方向上有序排列，确保界面整洁美观。",
            "code": "import { LengthMetrics } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct LineSpacingExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      // 标题文本，字体大小为 9，颜色为 0xCCCCCC\n      Text('TextArea lineSpacing.').fontSize(9).fontColor(0xCCCCCC)\n      \n      // 第一个 TextArea，未设置 lineSpacing，字体大小为 12\n      TextArea({ placeholder: 'This is the TextArea with no lineSpacing set.' })\n        .fontSize(12)\n      \n      // 第二个 TextArea，设置 lineSpacing 为 20px，字体大小为 12\n      TextArea({ placeholder: 'This is the TextArea with lineSpacing set to 20_px.' })\n        .fontSize(12)\n        .lineSpacing(LengthMetrics.px(20))\n      \n      // 第三个 TextArea，设置 lineSpacing 为 20vp，字体大小为 12\n      TextArea({ placeholder: 'This is the TextArea with lineSpacing set to 20_vp.' })\n        .fontSize(12)\n        .lineSpacing(LengthMetrics.vp(20))\n      \n      // 第四个 TextArea，设置 lineSpacing 为 20fp，字体大小为 12\n      TextArea({ placeholder: 'This is the TextArea with lineSpacing set to 20_fp.' })\n        .fontSize(12)\n        .lineSpacing(LengthMetrics.fp(20))\n      \n      // 第五个 TextArea，设置 lineSpacing 为 20lpx，字体大小为 12\n      TextArea({ placeholder: 'This is the TextArea with lineSpacing set to 20_lpx.' })\n        .fontSize(12)\n        .lineSpacing(LengthMetrics.lpx(20))\n      \n      // 第六个 TextArea，设置 lineSpacing 为 100%，字体大小为 12\n      TextArea({ placeholder: 'This is the TextArea with lineSpacing set to 100%.' })\n        .fontSize(12)\n        .lineSpacing(LengthMetrics.percent(1))\n    }\n    .height(600) // 设置 Flex 容器的高度为 600vp\n    .width(350) // 设置 Flex 容器的宽度为 350vp\n    .padding({ left: 35, right: 35, top: 35 }) // 设置 Flex 容器的内边距为左右 35vp、顶部 35vp\n  }\n}"
        },
        {
            "description": "该组件通过 Flex 布局实现了一个展示不同 `lineBreakStrategy` 设置对文本换行效果影响的界面。布局宽度为 370vp，高度为 700vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为三个部分，每个部分包含一个标题和一个 `TextArea` 组件。每个 `TextArea` 组件的宽度占据整个父容器的宽度，高度根据内容自适应。\n\n`TextArea` 组件的样式包括字体大小为 12vp，边框宽度为 1vp，内边距为 10vp。每个 `TextArea` 组件的文本内容相同，但通过不同的 `lineBreakStrategy` 设置（`GREEDY`、`HIGH_QUALITY`、`BALANCED`）来展示不同的换行效果。标题部分的文本字体大小为 9vp，颜色为 0xCCCCCC，宽度为 90%，内边距为 10vp。\n\n整个布局通过 Flex 布局保证 `TextArea` 组件在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TextExample1 {\n  @State message1: string = \"They can be classified as built-in components–those directly provided by the ArkUI framework and custom components – those defined by developers\" +\n    \"The built-in components include buttons radio buttonsprogress indicators and text You can set the rendering effectof thesecomponents in method chaining mode,\" +\n    \"page components are divided into independent UI units to implementindependent creation development and reuse of different units on pages making pages more engineering-oriented.\";\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start }) {\n      // 标题：显示 `lineBreakStrategy` 设置为 `GREEDY` 的效果\n      Text('LineBreakStrategy.GREEDY').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n      // `TextArea` 组件，显示文本内容，`lineBreakStrategy` 设置为 `GREEDY`\n      TextArea({text: this.message1})\n        .fontSize(12)\n        .border({ width: 1 })\n        .padding(10)\n        .width('100%')\n        .lineBreakStrategy(LineBreakStrategy.GREEDY)\n\n      // 标题：显示 `lineBreakStrategy` 设置为 `HIGH_QUALITY` 的效果\n      Text('LineBreakStrategy.HIGH_QUALITY').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n      // `TextArea` 组件，显示文本内容，`lineBreakStrategy` 设置为 `HIGH_QUALITY`\n      TextArea({text: this.message1})\n        .fontSize(12)\n        .border({ width: 1 })\n        .padding(10)\n        .width('100%')\n        .lineBreakStrategy(LineBreakStrategy.HIGH_QUALITY)\n\n      // 标题：显示 `lineBreakStrategy` 设置为 `BALANCED` 的效果\n      Text('LineBreakStrategy.BALANCED').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n      // `TextArea` 组件，显示文本内容，`lineBreakStrategy` 设置为 `BALANCED`\n      TextArea({text: this.message1})\n        .fontSize(12)\n        .border({ width: 1 })\n        .padding(10)\n        .width('100%')\n        .lineBreakStrategy(LineBreakStrategy.BALANCED)\n    }.height(700).width(370).padding({ left: 35, right: 35, top: 35 })\n  }\n}"
        },
        {
            "description": "该组件通过 Column 布局实现了一个包含 TextArea 和两个按钮的界面。布局宽度占据整个屏幕，高度设为 100%，背景颜色为 #F1F3F5。组件的垂直方向上被分为多个部分，每个部分包含一个 TextArea 和两个按钮。TextArea 用于输入文本，按钮用于设置光标位置和获取光标偏移信息。\n\nTextArea 的样式包括宽度为 336vp，高度为 56vp，内边距为 20vp，字体大小为 16vp，字体颜色为 #182431，背景颜色为 #FFFFFF。TextArea 的占位符字体大小为 16vp，字体粗细为 400。TextArea 的占位符文本为 \"The text area can hold an unlimited amount of text. input your word...\"。\n\n按钮的样式包括背景颜色为 #007DFF，内边距为 15vp。按钮的功能包括点击事件，用户可以通过点击按钮设置 TextArea 的光标位置或获取光标偏移信息。\n\n整个布局通过 Column 布局保证 TextArea 和按钮在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TextAreaExample {\n  @State text: string = '' // 用于存储 TextArea 中的文本内容\n  @State positionInfo: CaretOffset = { index: 0, x: 0, y: 0 } // 用于存储光标偏移信息\n  controller: TextAreaController = new TextAreaController() // 用于控制 TextArea 的控制器\n\n  build() {\n    Column() {\n      TextArea({\n        text: this.text, // 绑定 TextArea 的文本内容\n        placeholder: 'The text area can hold an unlimited amount of text. input your word...', // 设置 TextArea 的占位符文本\n        controller: this.controller // 绑定 TextArea 的控制器\n      })\n        .placeholderFont({ size: 16, weight: 400 }) // 设置占位符字体大小和粗细\n        .width(336) // 设置 TextArea 的宽度\n        .height(56) // 设置 TextArea 的高度\n        .margin(20) // 设置 TextArea 的内边距\n        .fontSize(16) // 设置 TextArea 的字体大小\n        .fontColor('#182431') // 设置 TextArea 的字体颜色\n        .backgroundColor('#FFFFFF') // 设置 TextArea 的背景颜色\n        .onChange((value: string) => { // 监听 TextArea 的文本变化事件\n          this.text = value // 更新文本内容\n        })\n      Text(this.text) // 显示 TextArea 中的文本内容\n      Button('Set caretPosition 1') // 创建一个按钮，用于设置光标位置\n        .backgroundColor('#007DFF') // 设置按钮的背景颜色\n        .margin(15) // 设置按钮的内边距\n        .onClick(() => { // 监听按钮的点击事件\n          this.controller.caretPosition(1) // 设置 TextArea 的光标位置为 1\n        })\n      Button('Get CaretOffset') // 创建一个按钮，用于获取光标偏移信息\n        .backgroundColor('#007DFF') // 设置按钮的背景颜色\n        .margin(15) // 设置按钮的内边距\n        .onClick(() => { // 监听按钮的点击事件\n          this.positionInfo = this.controller.getCaretOffset() // 获取 TextArea 的光标偏移信息并更新状态\n        })\n    }.width('100%').height('100%').backgroundColor('#F1F3F5') // 设置 Column 的宽度、高度和背景颜色\n  }\n}"
        },
        {
            "description": "该组件展示了不同wordBreak属性的TextArea样式。布局采用垂直排列（Column），包含多个TextArea实例，每个实例展示不同的wordBreak属性效果。布局宽度未明确设置，默认撑满最大宽度；高度未设置，自适应内容高度。每个TextArea实例的文本内容较长，用于展示wordBreak属性对文本换行的影响。\n\n组件的样式包括字体大小、边框样式和颜色。字体大小统一设置为16，边框宽度为1，颜色未明确设置，使用默认颜色。每个TextArea实例上方都有一个Text组件，用于描述当前TextArea的wordBreak属性类型，字体大小为16，颜色为红色（0xFF0000）。\n\n组件的排列和嵌套关系如下：整个布局通过Column组件实现垂直排列，每个TextArea实例及其上方的Text组件依次排列。Text组件用于描述，TextArea组件用于展示实际效果。\n\n组件的功能和交互主要体现在TextArea的wordBreak属性上，该属性控制文本在超出宽度时的换行方式。通过设置不同的wordBreak属性，可以观察到文本在不同换行方式下的表现。",
            "code": "@Entry\n@Component\nstruct TextAreaExample {\n  build() {\n    Column() {\n      // 描述属性WordBreakType为NORMAL的样式\n      Text(\"属性WordBreakType为NORMAL的样式：\").fontSize(16).fontColor(0xFF0000)\n      TextArea({\n        text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'\n      })\n        .fontSize(16) // 设置字体大小为16\n        .border({ width: 1 }) // 设置边框宽度为1\n        .wordBreak(WordBreak.NORMAL) // 设置wordBreak属性为NORMAL\n\n      // 描述英文文本，属性WordBreakType为BREAK_ALL的样式\n      Text(\"英文文本，属性WordBreakType为BREAK_ALL的样式：\").fontSize(16).fontColor(0xFF0000)\n      TextArea({\n        text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'\n      })\n        .fontSize(16) // 设置字体大小为16\n        .border({ width: 1 }) // 设置边框宽度为1\n        .wordBreak(WordBreak.BREAK_ALL) // 设置wordBreak属性为BREAK_ALL\n\n      // 描述中文文本，属性WordBreakType为BREAK_ALL的样式\n      Text(\"中文文本，属性WordBreakType为BREAK_ALL的样式：\").fontSize(16).fontColor(0xFF0000)\n      TextArea({\n        text: '多行文本输入框组件，当输入的文本内容超过组件宽度时会自动换行显示。\\\\n高度未设置时，组件无默认高度，自适应内容高度。宽度未设置时，默认撑满最大宽度。'\n      })\n        .fontSize(16) // 设置字体大小为16\n        .border({ width: 1 }) // 设置边框宽度为1\n        .wordBreak(WordBreak.BREAK_ALL) // 设置wordBreak属性为BREAK_ALL\n\n      // 描述属性WordBreakType为BREAK_WORD的样式\n      Text(\"属性WordBreakType为BREAK_WORD的样式：\").fontSize(16).fontColor(0xFF0000)\n      TextArea({\n        text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'\n      })\n        .fontSize(16) // 设置字体大小为16\n        .border({ width: 1 }) // 设置边框宽度为1\n        .wordBreak(WordBreak.BREAK_WORD) // 设置wordBreak属性为BREAK_WORD\n    }\n  }\n}"
        },
        {
            "description": "该组件通过 Column 布局实现了一个包含 TextArea 组件的界面。布局宽度占据整个屏幕的 90%，高度根据内容自适应，内边距为左右 5%。组件的垂直方向上包含一个 TextArea 组件，其宽度为 95%，高度为 56vp，顶部外边距为 100vp。\nTextArea 组件的样式包括默认文本内容、宽度和高度等属性。TextArea 组件的功能包括自定义编辑菜单选项，用户可以通过长按或右键点击 TextArea 触发编辑菜单，菜单项包括复制、全选以及两个自定义菜单项。每个菜单项可以设置自定义文本内容、图标和点击回调方法。\n整个布局通过 Column 布局保证 TextArea 在垂直方向上居中显示，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TextAreaExample {\n  @State text: string = 'TextArea editMenuOptions' // 初始化 TextArea 的文本内容\n\n  // 自定义编辑菜单项的创建方法\n  onCreateMenu(menuItems: Array<TextMenuItem>) {\n    menuItems.forEach((value, index) => {\n      value.icon = $r('app.media.startIcon') // 设置菜单项的图标\n      if (value.id.equals(TextMenuItemId.COPY)) {\n        value.content = \"复制change\" // 修改复制菜单项的文本内容\n      }\n      if (value.id.equals(TextMenuItemId.SELECT_ALL)) {\n        value.content = \"全选change\" // 修改全选菜单项的文本内容\n      }\n    })\n    let item1: TextMenuItem = {\n      content: 'custom1', // 自定义菜单项1的文本内容\n      icon: $r('app.media.startIcon'), // 自定义菜单项1的图标\n      id: TextMenuItemId.of('custom1'), // 自定义菜单项1的唯一标识\n    }\n    let item2: TextMenuItem = {\n      content: 'custom2', // 自定义菜单项2的文本内容\n      id: TextMenuItemId.of('custom2'), // 自定义菜单项2的唯一标识\n      icon: $r('app.media.startIcon'), // 自定义菜单项2的图标\n    }\n    menuItems.push(item1) // 将自定义菜单项1添加到菜单项列表的末尾\n    menuItems.unshift(item2) // 将自定义菜单项2添加到菜单项列表的开头\n    return menuItems // 返回修改后的菜单项列表\n  }\n\n  build() {\n    Column() {\n      TextArea({ text: this.text }) // 创建 TextArea 组件，并设置初始文本内容\n        .width('95%') // 设置 TextArea 的宽度为 95%\n        .height(56) // 设置 TextArea 的高度为 56vp\n        .editMenuOptions({\n          onCreateMenu: this.onCreateMenu, // 设置自定义编辑菜单项的创建方法\n          onMenuItemClick: (menuItem: TextMenuItem, textRange: TextRange) => { // 设置菜单项点击回调方法\n            if (menuItem.id.equals(TextMenuItemId.of(\"custom2\"))) {\n              console.log(\"拦截 id: custom2 start:\" + textRange.start + \"; end:\" + textRange.end) // 拦截自定义菜单项2的点击事件\n              return true; // 返回 true 表示拦截该事件\n            }\n            if (menuItem.id.equals(TextMenuItemId.COPY)) {\n              console.log(\"拦截 COPY start:\" + textRange.start + \"; end:\" + textRange.end) // 拦截复制菜单项的点击事件\n              return true; // 返回 true 表示拦截该事件\n            }\n            if (menuItem.id.equals(TextMenuItemId.SELECT_ALL)) {\n              console.log(\"不拦截 SELECT_ALL start:\" + textRange.start + \"; end:\" + textRange.end) // 不拦截全选菜单项的点击事件\n              return false; // 返回 false 表示不拦截该事件\n            }\n            return false; // 默认返回 false 表示不拦截事件\n          }\n        })\n        .margin({ top: 100 }) // 设置 TextArea 的顶部外边距为 100vp\n    }\n    .width(\"90%\") // 设置 Column 的宽度为 90%\n    .margin(\"5%\") // 设置 Column 的左右外边距为 5%\n  }\n}"
        },
        {
            "description": "该组件通过 Flex 布局实现了一个展示文本行高、字符间距和文本装饰线样式的界面。布局宽度占据整个屏幕的 90%，高度设为 90%，内边距为 10vp。组件的垂直方向上被分为三个部分，每个部分包含一个标题和一组 TextArea 组件。每个 TextArea 组件以垂直布局方式排列，TextArea 之间的间距均匀分布，且对齐方式为居中对齐。\nTextArea 的样式包括边框宽度、内边距、外边距等属性，支持不同的文本行高、字符间距和文本装饰线样式展示。每个 TextArea 组件的功能包括展示不同的文本行高、字符间距和文本装饰线样式，用户可以通过观察 TextArea 组件的变化来理解这些属性的效果。\n整个布局通过 Flex 布局保证 TextArea 在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct TextAreaExample {\n  build() {\n    Row() {\n      Column() {\n        // 展示文本行高的标题\n        Text('lineHeight').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 未设置文本行高的 TextArea\n        TextArea({text: 'lineHeight unset'})\n          .border({ width: 1 }) // 设置边框宽度\n          .padding(10) // 设置内边距\n          .margin(5) // 设置外边距\n        \n        // 设置文本行高为 15 的 TextArea\n        TextArea({text: 'lineHeight 15'})\n          .border({ width: 1 }) // 设置边框宽度\n          .padding(10) // 设置内边距\n          .margin(5) // 设置外边距\n          .lineHeight(15) // 设置文本行高\n        \n        // 设置文本行高为 30 的 TextArea\n        TextArea({text: 'lineHeight 30'})\n          .border({ width: 1 }) // 设置边框宽度\n          .padding(10) // 设置内边距\n          .margin(5) // 设置外边距\n          .lineHeight(30) // 设置文本行高\n\n        // 展示字符间距的标题\n        Text('letterSpacing').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 设置字符间距为 0 的 TextArea\n        TextArea({text: 'letterSpacing 0'})\n          .border({ width: 1 }) // 设置边框宽度\n          .padding(5) // 设置内边距\n          .margin(5) // 设置外边距\n          .letterSpacing(0) // 设置字符间距\n        \n        // 设置字符间距为 3 的 TextArea\n        TextArea({text: 'letterSpacing 3'})\n          .border({ width: 1 }) // 设置边框宽度\n          .padding(5) // 设置内边距\n          .margin(5) // 设置外边距\n          .letterSpacing(3) // 设置字符间距\n        \n        // 设置字符间距为 -1 的 TextArea\n        TextArea({text: 'letterSpacing -1'})\n          .border({ width: 1 }) // 设置边框宽度\n          .padding(5) // 设置内边距\n          .margin(5) // 设置外边距\n          .letterSpacing(-1) // 设置字符间距\n\n        // 展示文本装饰线样式的标题\n        Text('decoration').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 设置文本装饰线为删除线、红色\n        TextArea({text: 'LineThrough, Red\\\\nsecond line'})\n          .border({ width: 1 }) // 设置边框宽度\n          .padding(5) // 设置内边距\n          .margin(5) // 设置外边距\n          .decoration({type: TextDecorationType.LineThrough, color: Color.Red}) // 设置文本装饰线\n        \n        // 设置文本装饰线为上划线、红色、点状\n        TextArea({text: 'Overline, Red, DOTTED\\\\nsecond line'})\n          .border({ width: 1 }) // 设置边框宽度\n          .padding(5) // 设置内边距\n          .margin(5) // 设置外边距\n          .decoration({type: TextDecorationType.Overline, color: Color.Red, style: TextDecorationStyle.DOTTED}) // 设置文本装饰线\n        \n        // 设置文本装饰线为下划线、红色、波浪状\n        TextArea({text: 'Underline, Red, WAVY\\\\nsecond line'})\n          .border({ width: 1 }) // 设置边框宽度\n          .padding(5) // 设置内边距\n          .margin(5) // 设置外边距\n          .decoration({type: TextDecorationType.Underline, color: Color.Red, style: TextDecorationStyle.WAVY}) // 设置文本装饰线\n      }.height('90%') // 设置 Column 的高度\n    }\n    .width('90%') // 设置 Row 的宽度\n    .margin(10) // 设置 Row 的外边距\n  }\n}"
        },
        {
            "description": "该组件实现了一个自定义键盘弹出时发生避让的示例。布局宽度占据整个屏幕，主要分为两个部分：顶部是一个按钮组，用于调整文本区域的高度；底部是一个文本输入区域，支持自定义键盘的弹出和避让功能。\n\n布局属性：\n- 按钮组的高度通过 `@State` 变量 `height1` 控制，初始值为 '80%'。\n- 文本输入区域的高度固定为 100vp。\n- 按钮组和文本输入区域之间有 50vp 的底部内边距。\n\n组件的样式和外观：\n- 按钮组的按钮字体大小为 24，点击时可以切换文本区域的高度。\n- 自定义键盘的背景颜色为灰色。\n- 文本输入区域的边框宽度为 1vp。\n\n组件的排列和嵌套关系：\n- 按钮组和文本输入区域都嵌套在 `Column` 布局中，垂直排列。\n- 按钮组内部的按钮通过 `Row` 布局水平排列，对齐方式为居中对齐。\n- 自定义键盘通过 `Grid` 布局实现，每行最多显示 3 个按钮，按钮之间有 10vp 的列间距和行间距。\n\n组件的功能和交互：\n- 点击按钮组中的按钮可以动态调整文本区域的高度。\n- 文本输入区域支持自定义键盘的弹出，键盘弹出时会根据 `supportAvoidance` 属性决定是否发生避让。\n- 自定义键盘的按钮点击事件会将对应的字符添加到文本输入区域中。\n- 点击自定义键盘的关闭按钮会停止编辑。",
            "code": "@Entry\n@Component\nstruct TextAreaExample {\n  controller: TextAreaController = new TextAreaController() // 创建一个 TextAreaController 实例，用于控制文本输入区域的行为\n  @State inputValue: string = \"\" // 定义一个状态变量，用于存储文本输入区域的值\n  @State height1: string | number = '80%' // 定义一个状态变量，用于控制按钮组的高度，初始值为 '80%'\n  @State height2: number = 100 // 定义一个状态变量，用于控制文本输入区域的高度，初始值为 100vp\n  @State supportAvoidance: boolean = true // 定义一个状态变量，用于控制自定义键盘弹出时是否发生避让，初始值为 true\n\n  @Builder CustomKeyboardBuilder() { // 定义一个自定义键盘的构建器\n    Column() {\n      Row() {\n        Button('x').onClick(() => { // 创建一个关闭按钮，点击时停止编辑\n          this.controller.stopEditing() // 调用 TextAreaController 的 stopEditing 方法停止编辑\n        }).margin(10) // 设置按钮的外边距为 10vp\n      }\n      Grid() {\n        ForEach([1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'], (item: number | string) => { // 遍历数字和符号数组，创建键盘按钮\n          GridItem() {\n            Button(item + \"\") // 创建一个按钮，显示当前遍历的数字或符号\n              .width(110).onClick(() => { // 设置按钮的宽度为 110vp，并绑定点击事件\n                this.inputValue += item // 点击按钮时，将对应的字符添加到文本输入区域中\n              })\n          }\n        })\n      }.maxCount(3).columnsGap(10).rowsGap(10).padding(5) // 设置 Grid 布局的属性：每行最多显示 3 个按钮，按钮之间的列间距和行间距为 10vp，内边距为 5vp\n    }.backgroundColor(Color.Gray) // 设置自定义键盘的背景颜色为灰色\n  }\n\n  build() {\n    Column() {\n      Row() {\n        Button(\"20%\") // 创建一个按钮，显示 \"20%\"\n          .fontSize(24) // 设置按钮的字体大小为 24\n          .onClick(() => { // 绑定点击事件\n            this.height1 = \"20%\" // 点击按钮时，将按钮组的高度设置为 \"20%\"\n          })\n        Button(\"80%\") // 创建一个按钮，显示 \"80%\"\n          .fontSize(24) // 设置按钮的字体大小为 24\n          .margin({ left: 20 }) // 设置按钮的左边距为 20vp\n          .onClick(() => { // 绑定点击事件\n            this.height1 = \"80%\" // 点击按钮时，将按钮组的高度设置为 \"80%\"\n          })\n      }\n      .justifyContent(FlexAlign.Center) // 设置按钮组的对齐方式为居中对齐\n      .alignItems(VerticalAlign.Bottom) // 设置按钮组的垂直对齐方式为底部对齐\n      .height(this.height1) // 设置按钮组的高度为 `height1` 的值\n      .width(\"100%\") // 设置按钮组的宽度为 100%\n      .padding({ bottom: 50 }) // 设置按钮组的底部内边距为 50vp\n      TextArea({ controller: this.controller, text: this.inputValue }) // 创建一个文本输入区域，绑定 TextAreaController 和输入值\n        .height(100) // 设置文本输入区域的高度为 100vp\n        .customKeyboard(this.CustomKeyboardBuilder(), { supportAvoidance: this.supportAvoidance }) // 设置自定义键盘，并根据 `supportAvoidance` 属性决定是否发生避让\n        .margin(10) // 设置文本输入区域的外边距为 10vp\n        .border({ width: 1 }) // 设置文本输入区域的边框宽度为 1vp\n    }\n  }\n}"
        }
    ],
    "is_common_attrs": true
}