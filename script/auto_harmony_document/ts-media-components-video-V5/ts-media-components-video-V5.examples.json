[
    {
        "description": "示例1的功能是创建一个视频播放组件，并提供了多种控制视频播放的功能。布局上，组件主要由一个垂直排列的Column组件构成，其中包含一个Video组件和多个Row组件。Video组件用于播放视频，Row组件用于放置控制视频播放的按钮。\n\nVideo组件的宽度设置为100%，高度为600vp，占据整个父容器的宽度，并具有固定的高度。视频的自动播放状态由isAutoPlay控制，控制条的显示由showControls控制。视频播放过程中会触发多个事件，如开始播放、暂停、完成、错误等，这些事件会在控制台输出相应的信息。\n\nRow组件中的按钮用于控制视频的源、预览图、控制条显示状态，以及视频的播放、暂停、停止、重置和设置播放时间等功能。按钮的排列方式为水平排列，按钮之间的间距通过margin属性设置为5vp。\n\n布局的样式和外观方面，Video组件的宽度和高度固定，按钮的样式通过margin属性设置间距，确保按钮在水平方向上有适当的间隔。按钮的功能包括点击事件，用户可以通过点击按钮触发相应的视频控制操作。",
        "code": "@Entry\n@Component\nstruct VideoCreateComponent {\n  @State videoSrc: Resource = $rawfile('video1.mp4') // 视频源文件路径\n  @State previewUri: Resource = $r('app.media.poster1') // 视频预览图路径\n  @State curRate: PlaybackSpeed = PlaybackSpeed.Speed_Forward_1_00_X // 当前播放速度\n  @State isAutoPlay: boolean = false // 是否自动播放\n  @State showControls: boolean = true // 是否显示控制条\n  controller: VideoController = new VideoController() // 视频控制器实例\n\n  build() {\n    Column() {\n      Video({\n        src: this.videoSrc, // 视频源\n        previewUri: this.previewUri, // 视频预览图\n        currentProgressRate: this.curRate, // 当前播放速度\n        controller: this.controller // 视频控制器\n      })\n        .width('100%') // 视频宽度占满父容器\n        .height(600) // 视频高度固定为600vp\n        .autoPlay(this.isAutoPlay) // 是否自动播放\n        .controls(this.showControls) // 是否显示控制条\n        .onStart(() => {\n          console.info('onStart') // 视频开始播放时触发\n        })\n        .onPause(() => {\n          console.info('onPause') // 视频暂停时触发\n        })\n        .onFinish(() => {\n          console.info('onFinish') // 视频播放完成时触发\n        })\n        .onError(() => {\n          console.info('onError') // 视频播放出错时触发\n        })\n        .onStop(() => {\n          console.info('onStop') // 视频停止时触发\n        })\n        .onPrepared((e?: DurationObject) => {\n          if (e != undefined) {\n            console.info('onPrepared is ' + e.duration) // 视频准备完成时触发，输出视频时长\n          }\n        })\n        .onSeeking((e?: TimeObject) => {\n          if (e != undefined) {\n            console.info('onSeeking is ' + e.time) // 视频跳转时触发，输出跳转时间\n          }\n        })\n        .onSeeked((e?: TimeObject) => {\n          if (e != undefined) {\n            console.info('onSeeked is ' + e.time) // 视频跳转完成时触发，输出跳转时间\n          }\n        })\n        .onUpdate((e?: TimeObject) => {\n          if (e != undefined) {\n            console.info('onUpdate is ' + e.time) // 视频更新时触发，输出当前时间\n          }\n        })\n\n      Row() {\n        Button('src').onClick(() => {\n          this.videoSrc = $rawfile('video2.mp4') // 切换视频源\n        }).margin(5) // 按钮间距为5vp\n        Button('previewUri').onClick(() => {\n          this.previewUri = $r('app.media.poster2') // 切换预览图\n        }).margin(5) // 按钮间距为5vp\n        Button('controls').onClick(() => {\n          this.showControls = !this.showControls // 切换控制条显示状态\n        }).margin(5) // 按钮间距为5vp\n      }\n\n      Row() {\n        Button('start').onClick(() => {\n          this.controller.start() // 开始播放视频\n        }).margin(2) // 按钮间距为2vp\n        Button('pause').onClick(() => {\n          this.controller.pause() // 暂停播放视频\n        }).margin(2) // 按钮间距为2vp\n        Button('stop').onClick(() => {\n          this.controller.stop() // 停止播放视频\n        }).margin(2) // 按钮间距为2vp\n        Button('reset').onClick(() => {\n          this.controller.reset() // 重置视频播放状态\n        }).margin(2) // 按钮间距为2vp\n        Button('setTime').onClick(() => {\n          this.controller.setCurrentTime(10, SeekMode.Accurate) // 设置视频播放时间为10秒\n        }).margin(2) // 按钮间距为2vp\n      }\n\n      Row() {\n        Button('rate 0.75').onClick(() => {\n          this.curRate = PlaybackSpeed.Speed_Forward_0_75_X // 设置播放速度为0.75倍\n        }).margin(5) // 按钮间距为5vp\n        Button('rate 1').onClick(() => {\n          this.curRate = PlaybackSpeed.Speed_Forward_1_00_X // 设置播放速度为1倍\n        }).margin(5) // 按钮间距为5vp\n        Button('rate 2').onClick(() => {\n          this.curRate = PlaybackSpeed.Speed_Forward_2_00_X // 设置播放速度为2倍\n        }).margin(5) // 按钮间距为5vp\n      }\n    }\n  }\n}\n\ninterface DurationObject {\n  duration: number; // 视频时长\n}\n\ninterface TimeObject {\n  time: number; // 时间点\n}\n\n/*\n示例2的功能是创建一个带有图像分析功能的视频播放组件。布局上，组件主要由一个垂直排列的Column组件构成，其中包含一个Video组件和一个Row组件。Video组件用于播放视频，Row组件用于放置控制视频播放的按钮。\n\nVideo组件的宽度设置为100%，高度为600vp，占据整个父容器的宽度，并具有固定的高度。视频的控制条默认不显示，图像分析功能通过enableAnalyzer和analyzerConfig属性开启，并配置了图像分析的类型。\n\nRow组件中的按钮用于控制视频的播放、暂停，以及获取图像分析支持的类型。按钮的排列方式为水平排列，按钮之间的间距通过margin属性设置为5vp。\n\n布局的样式和外观方面，Video组件的宽度和高度固定，按钮的样式通过margin属性设置间距，确保按钮在水平方向上有适当的间隔。按钮的功能包括点击事件，用户可以通过点击按钮触发相应的视频控制操作。\n*/\n\n@Entry\n@Component\nstruct ImageAnalyzerExample {\n  @State videoSrc: Resource = $rawfile('video1.mp4') // 视频源文件路径\n  @State previewUri: Resource = $r('app.media.poster1') // 视频预览图路径\n  @State showControls: boolean = true // 是否显示控制条\n  controller: VideoController = new VideoController() // 视频控制器实例\n  config: ImageAnalyzerConfig = {\n    types: [ImageAnalyzerType.SUBJECT, ImageAnalyzerType.TEXT] // 图像分析类型配置\n  }\n  private aiController: ImageAnalyzerController = new ImageAnalyzerController() // 图像分析控制器实例\n  private options: ImageAIOptions = {\n    types: [ImageAnalyzerType.SUBJECT, ImageAnalyzerType.TEXT], // 图像分析类型\n    aiController: this.aiController // 图像分析控制器\n  }\n\n  build() {\n    Column() {\n      Video({\n        src: this.videoSrc, // 视频源\n        previewUri: this.previewUri, // 视频预览图\n        controller: this.controller, // 视频控制器\n        imageAIOptions: this.options // 图像分析选项\n      })\n        .width('100%') // 视频宽度占满父容器\n        .height(600) // 视频高度固定为600vp\n        .controls(false) // 不显示控制条\n        .enableAnalyzer(true) // 开启图像分析功能\n        .analyzerConfig(this.config) // 配置图像分析\n        .onStart(() => {\n          console.info('onStart') // 视频开始播放时触发\n        })\n        .onPause(() => {\n          console.info('onPause') // 视频暂停时触发\n        })\n\n      Row() {\n        Button('start').onClick(() => {\n          this.controller.start() // 开始播放视频\n        }).margin(5) // 按钮间距为5vp\n        Button('pause').onClick(() => {\n          this.controller.pause() // 暂停播放视频\n        }).margin(5) // 按钮间距为5vp\n        Button('getTypes').onClick(() => {\n          this.aiController.getImageAnalyzerSupportTypes() // 获取图像分析支持的类型\n        }).margin(5) // 按钮间距为5vp\n      }\n    }\n  }\n}"
    }
]