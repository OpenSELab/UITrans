{
    "description": "页签型标题栏，用于页面之间的切换。仅一级页面适用。",
    "details": "该组件从API Version 10开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
    "interfaces": [
        {
            "description": "TabTitleBar({tabItems: Array<TabTitleBarTabItem>, menuItems?: Array<TabTitleBarMenuItem>, swiperContent: () => void})",
            "params": {
                "tabItems": {
                    "type": "Array<TabTitleBarTabItem>",
                    "required": true,
                    "description": "左侧页签项目列表，定义标题栏左侧的页签项目。"
                },
                "menuItems": {
                    "type": "Array<TabTitleBarMenuItem>",
                    "required": false,
                    "description": "右侧菜单项目列表，定义标题栏右侧的菜单项目。"
                },
                "swiperContent": {
                    "type": "() => void",
                    "required": true,
                    "description": "页签列表关联的页面内容构造器。"
                }
            }
        }
    ],
    "attributes": {
        "TabTitleBarMenuItem": {
            "description": "右侧菜单项目列表中的单个菜单项。",
            "params": {
                "value": {
                    "type": "ResourceStr",
                    "required": true,
                    "description": "图标资源。"
                },
                "isEnabled": {
                    "type": "boolean",
                    "required": false,
                    "description": "是否启用。默认启用。true：启用，false：禁用。",
                    "default": true
                },
                "action": {
                    "type": "() => void",
                    "required": false,
                    "description": "触发时的动作闭包。"
                }
            }
        },
        "TabTitleBarTabItem": {
            "description": "左侧页签项目列表中的单个页签项。",
            "params": {
                "title": {
                    "type": "ResourceStr",
                    "required": true,
                    "description": "文字页签。"
                },
                "icon": {
                    "type": "ResourceStr",
                    "required": false,
                    "description": "图片页签资源。"
                }
            }
        }
    },
    "events": {},
    "rules": null,
    "examples": [
        {
            "description": "该示例展示了如何在鸿蒙ArkUI中使用TabTitleBar组件来创建一个带有标签页和菜单的界面。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为两个部分：顶部是TabTitleBar组件，底部是内容区域。TabTitleBar组件包含标签页和菜单项，标签页用于切换不同的内容区域，菜单项用于触发特定的操作。\n\nTabTitleBar组件的样式包括标签页的标题和图标，以及菜单项的图标和点击事件。标签页的标题和图标通过tabItem类定义，菜单项的图标和点击事件通过menuItem接口定义。标签页和菜单项的排列方式为水平布局，标签页和菜单项之间的间距均匀分布，且对齐方式为居中对齐。\n\n内容区域的样式包括文本的背景颜色、字体颜色、字体大小、字体粗细和对齐方式。文本的背景颜色通过资源名定义，字体颜色为白色，字体大小为14，字体粗细为粗体，对齐方式为居中对齐。\n\n整个布局通过Row和Column组件进行嵌套，确保TabTitleBar和内容区域在垂直方向上有序排列，确保界面整洁美观。",
            "code": "// 导入TabTitleBar和promptAction组件\nimport { TabTitleBar, promptAction } from '@kit.ArkUI';\n\n// 定义tabItem类，用于存储标签页的标题和图标\nclass tabItem {\n  title: ResourceStr; // 标签页的标题\n  icon?: ResourceStr; // 标签页的图标，可选\n  constructor(title: ResourceStr, icon?: ResourceStr) {\n    this.title = title;\n    this.icon = icon;\n  }\n}\n\n// 定义menuItem接口，用于存储菜单项的图标、是否启用和点击事件\ninterface menuItem {\n  value: ResourceStr; // 菜单项的图标\n  isEnabled?: boolean; // 菜单项是否启用，可选，默认为true\n  action?: () => void; // 菜单项的点击事件，可选\n}\n\n// 定义Index组件，作为页面的入口组件\n@Entry\n@Component\nstruct Index {\n  // 定义componentBuilder方法，用于生成内容区域的组件\n  @Builder\n  componentBuilder() {\n    // 创建第一个文本组件，设置背景颜色、字体颜色、字体大小、字体粗细和对齐方式\n    Text(\"#1ABC9C\\nTURQUOISE\")\n      .fontWeight(FontWeight.Bold) // 设置字体粗细为粗体\n      .fontSize(14) // 设置字体大小为14\n      .width(\"100%\") // 设置宽度为100%\n      .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n      .fontColor(\"#CCFFFFFF\") // 设置字体颜色为白色\n      .backgroundColor(\"#1ABC9C\"); // 设置背景颜色为#1ABC9C\n\n    // 创建第二个文本组件，设置背景颜色、字体颜色、字体大小、字体粗细和对齐方式\n    Text(\"#16A085\\nGREEN SEA\")\n      .fontWeight(FontWeight.Bold) // 设置字体粗细为粗体\n      .fontSize(14) // 设置字体大小为14\n      .width(\"100%\") // 设置宽度为100%\n      .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n      .fontColor(\"#CCFFFFFF\") // 设置字体颜色为白色\n      .backgroundColor(\"#16A085\"); // 设置背景颜色为#16A085\n\n    // 创建第三个文本组件，设置背景颜色、字体颜色、字体大小、字体粗细和对齐方式\n    Text(\"#2ECC71\\nEMERALD\")\n      .fontWeight(FontWeight.Bold) // 设置字体粗细为粗体\n      .fontSize(14) // 设置字体大小为14\n      .width(\"100%\") // 设置宽度为100%\n      .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n      .fontColor(\"#CCFFFFFF\") // 设置字体颜色为白色\n      .backgroundColor(\"#2ECC71\"); // 设置背景颜色为#2ECC71\n\n    // 创建第四个文本组件，设置背景颜色、字体颜色、字体大小、字体粗细和对齐方式\n    Text(\"#27AE60\\nNEPHRITIS\")\n      .fontWeight(FontWeight.Bold) // 设置字体粗细为粗体\n      .fontSize(14) // 设置字体大小为14\n      .width(\"100%\") // 设置宽度为100%\n      .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n      .fontColor(\"#CCFFFFFF\") // 设置字体颜色为白色\n      .backgroundColor(\"#27AE60\"); // 设置背景颜色为#27AE60\n\n    // 创建第五个文本组件，设置背景颜色、字体颜色、字体大小、字体粗细和对齐方式\n    Text(\"#3498DB\\nPETER RIVER\")\n      .fontWeight(FontWeight.Bold) // 设置字体粗细为粗体\n      .fontSize(14) // 设置字体大小为14\n      .width(\"100%\") // 设置宽度为100%\n      .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n      .fontColor(\"#CCFFFFFF\") // 设置字体颜色为白色\n      .backgroundColor(\"#3498DB\"); // 设置背景颜色为#3498DB\n  }\n\n  // 定义标签页的数组，包含多个tabItem对象\n  private readonly tabItems: Array<tabItem> = [\n    new tabItem('页签1'),\n    new tabItem('页签2'),\n    new tabItem('页签3'),\n    new tabItem(\"Happy\", $r('app.media.emoji_happy')), // 包含图标的标签页\n    new tabItem('页签4')\n  ];\n\n  // 定义菜单项的数组，包含多个menuItem对象\n  private readonly menuItems: Array<menuItem> = [\n    {\n      value: $r('app.media.ic_public_reduce'), // 菜单项的图标\n      isEnabled: true, // 菜单项是否启用\n      action: () => promptAction.showToast({ message: \"on item click! index 0\" }) // 菜单项的点击事件\n    },\n    {\n      value: $r('app.media.ic_public_edit'), // 菜单项的图标\n      isEnabled: true, // 菜单项是否启用\n      action: () => promptAction.showToast({ message: \"on item click! index 1\" }) // 菜单项的点击事件\n    },\n    {\n      value: $r('app.media.ic_public_save'), // 菜单项的图标\n      isEnabled: true, // 菜单项是否启用\n      action: () => promptAction.showToast({ message: \"on item click! index 2\" }) // 菜单项的点击事件\n    },\n  ];\n\n  // 定义build方法，用于生成页面的布局\n  build() {\n    // 创建Row组件，设置高度为100%\n    Row() {\n      // 创建Column组件，设置宽度为100%\n      Column() {\n        // 创建TabTitleBar组件，设置swiperContent、tabItems和menuItems属性\n        TabTitleBar({\n          swiperContent: this.componentBuilder, // 内容区域的组件生成方法\n          tabItems: this.tabItems, // 标签页的数组\n          menuItems: this.menuItems, // 菜单项的数组\n        })\n      }.width('100%') // 设置Column组件的宽度为100%\n    }.height('100%') // 设置Row组件的高度为100%\n  }\n}"
        }
    ],
    "is_common_attrs": false
}