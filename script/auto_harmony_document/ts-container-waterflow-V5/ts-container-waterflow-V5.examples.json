[
    {
        "description": "该组件实现了一个瀑布流布局的展示界面。布局宽度占据整个屏幕，高度设为 100%，内边距为左侧 5vp。组件的垂直方向上包含一个 WaterFlow 组件，用于展示瀑布流布局。WaterFlow 组件内部通过 LazyForEach 循环渲染多个 FlowItem 组件，每个 FlowItem 组件包含一个 Column 组件，用于展示文本和图片。\n\nWaterFlow 组件的列模板设置为 'repeat(auto-fill,80)'，表示列宽为 80vp，自动填充容器宽度。列间距为 10vp，行间距为 5vp。WaterFlow 组件的背景颜色为 0xFAEEE0。\n\n每个 FlowItem 组件的宽度为 100%，高度根据 itemHeightArray 数组中的随机值动态设置。FlowItem 组件的背景颜色从 colors 数组中随机选择。\n\n组件的功能包括动态生成随机大小的宽度和高度数组，并在页面加载时设置这些数组。通过 LazyForEach 循环渲染 FlowItem 组件，展示瀑布流布局效果。",
        "code": "import { WaterFlowDataSource } from './WaterFlowDataSource'\n\n@Entry\n@Component\nstruct WaterFlowDemo {\n  @State minSize: number = 80 // 最小尺寸，用于生成随机尺寸\n  @State maxSize: number = 180 // 最大尺寸，用于生成随机尺寸\n  @State colors: number[] = [0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F] // 颜色数组，用于随机选择背景颜色\n  dataSource: WaterFlowDataSource = new WaterFlowDataSource() // 数据源，用于 LazyForEach 循环\n  private itemWidthArray: number[] = [] // 宽度数组，用于存储随机生成的宽度\n  private itemHeightArray: number[] = [] // 高度数组，用于存储随机生成的高度\n\n  // 生成随机尺寸的方法\n  getSize() {\n    let ret = Math.floor(Math.random() * this.maxSize)\n    return (ret > this.minSize ? ret : this.minSize)\n  }\n\n  // 设置宽度和高度数组的方法\n  setItemSizeArray() {\n    for (let i = 0; i < 100; i++) {\n      this.itemWidthArray.push(this.getSize())\n      this.itemHeightArray.push(this.getSize())\n    }\n  }\n\n  // 页面加载时调用的方法，用于设置宽度和高度数组\n  aboutToAppear() {\n    this.setItemSizeArray()\n  }\n\n  // 构建页面布局的方法\n  build() {\n    Column({ space: 2 }) {\n      WaterFlow() {\n        LazyForEach(this.dataSource, (item: number) => {\n          FlowItem() {\n            Column() {\n              Text(\"N\" + item).fontSize(12).height('16') // 显示文本，字体大小为 12vp，高度为 16vp\n              Image('res/waterFlowTest(' + item % 5 + ').jpg') // 显示图片，图片资源名为 waterFlowTest(0-4).jpg\n            }\n          }\n          .width('100%') // FlowItem 宽度为 100%\n          .height(this.itemHeightArray[item % 100]) // FlowItem 高度为 itemHeightArray 数组中的随机值\n          .backgroundColor(this.colors[item % 5]) // FlowItem 背景颜色为 colors 数组中的随机颜色\n        }, (item: string) => item)\n      }\n      .columnsTemplate('repeat(auto-fill,80)') // 列模板为 'repeat(auto-fill,80)'，表示列宽为 80vp，自动填充容器宽度\n      .columnsGap(10) // 列间距为 10vp\n      .rowsGap(5) // 行间距为 5vp\n      .padding({left:5}) // 左侧内边距为 5vp\n      .backgroundColor(0xFAEEE0) // 背景颜色为 0xFAEEE0\n      .width('100%') // 宽度为 100%\n      .height('100%') // 高度为 100%\n    }\n  }\n}"
    },
    {
        "description": "该示例展示了一个基于鸿蒙ArkUI的水流布局（WaterFlow）组件，支持通过双指缩放手势动态调整列数。布局宽度占据整个屏幕，高度设为100%，内边距为左右20vp、顶部10vp。组件的垂直方向上被分为两个部分：顶部是一个提示文本，底部是一个水流布局。\n\n水流布局中的每个项目（FlowItem）通过LazyForEach组件动态加载，项目的高度和背景颜色随机生成，宽度固定为100%。项目的排列方式通过columnsTemplate属性动态调整，列数根据双指缩放手势的结果进行变化。项目的排列间距通过columnsGap和rowsGap属性设置，分别为10vp和5vp。\n\n项目的样式包括背景颜色、字体大小、图片填充方式等属性，支持不同的样式展示。项目的功能包括双指缩放手势事件，用户可以通过双指缩放调整列数，列数的变化会通过AppStorage进行持久化存储。\n\n整个布局通过Column和Row组件进行嵌套，确保界面整洁美观。",
        "code": "// 导入WaterFlowDataSource类\nimport { WaterFlowDataSource } from './WaterFlowDataSource'\n\n// 定义可复用的FlowItem组件\n@Reusable\n@Component\nstruct ReusableFlowItem {\n  @State item: number = 0 // 定义一个状态变量item，用于存储当前项目的编号\n\n  // 组件复用时的回调函数，用于更新item的值\n  aboutToReuse(params: Record<string, number>) {\n    this.item = params.item;\n    console.info('Reuse item:' + this.item)\n  }\n\n  // 组件首次出现时的回调函数，用于输出item的值\n  aboutToAppear() {\n    console.info('item:' + this.item)\n  }\n\n  // 构建组件的UI结构\n  build() {\n    Column() {\n      Text(\"N\" + this.item).fontSize(12).height('16') // 显示项目的编号，字体大小为12vp，高度为16vp\n      Image('res/waterFlow (' + this.item % 5 + ').JPG') // 显示项目的图片，图片路径根据item的值动态生成\n        .objectFit(ImageFit.Fill) // 图片填充方式为填充\n        .width('100%') // 图片宽度为100%\n        .layoutWeight(1) // 图片占据剩余空间\n    }\n  }\n}\n\n// 定义入口组件WaterFlowDemo\n@Entry\n@Component\nstruct WaterFlowDemo {\n  minSize: number = 80 // 定义项目最小尺寸\n  maxSize: number = 180 // 定义项目最大尺寸\n  colors: number[] = [0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F] // 定义项目背景颜色数组\n  @State columns: number = 2 // 定义状态变量columns，用于存储当前列数\n  dataSource: WaterFlowDataSource = new WaterFlowDataSource() // 创建WaterFlowDataSource实例\n  private itemWidthArray: number[] = [] // 定义项目宽度数组\n  private itemHeightArray: number[] = [] // 定义项目高度数组\n\n  // 获取随机尺寸的方法\n  getSize() {\n    let ret = Math.floor(Math.random() * this.maxSize)\n    return (ret > this.minSize ? ret : this.minSize)\n  }\n\n  // 设置项目尺寸数组的方法\n  setItemSizeArray() {\n    for (let i = 0; i < 100; i++) {\n      this.itemWidthArray.push(this.getSize())\n      this.itemHeightArray.push(this.getSize())\n    }\n  }\n\n  // 组件首次出现时的回调函数，用于初始化列数和项目尺寸数组\n  aboutToAppear() {\n    let lastCount = AppStorage.get<number>('columnsCount')\n    if (typeof lastCount != 'undefined') {\n      this.columns = lastCount\n    }\n    this.setItemSizeArray()\n  }\n\n  // 构建组件的UI结构\n  build() {\n    Column({ space: 2 }) {\n      Row() {\n        Text('双指缩放改变列数') // 显示提示文本\n          .height('5%') // 文本高度为5%\n          .margin({ top: 10, left: 20 }) // 文本上边距为10vp，左边距为20vp\n      }\n\n      WaterFlow() {\n        LazyForEach(this.dataSource, (item: number) => {\n          FlowItem() {\n            ReusableFlowItem({ item: item }) // 使用ReusableFlowItem组件，传入当前项目编号\n          }\n          .width('100%') // 项目宽度为100%\n          .height(this.itemHeightArray[item % 100]) // 项目高度从数组中随机获取\n          .backgroundColor(this.colors[item % 5]) // 项目背景颜色从数组中随机获取\n        }, (item: string) => item)\n      }\n      .columnsTemplate('1fr '.repeat(this.columns)) // 设置列模板，列数根据columns的值动态调整\n      .columnsGap(10) // 列间距为10vp\n      .rowsGap(5) // 行间距为5vp\n      .backgroundColor(0xFAEEE0) // 水流布局背景颜色为0xFAEEE0\n      .width('100%') // 水流布局宽度为100%\n      .height('100%') // 水流布局高度为100%\n      .layoutWeight(1) // 水流布局占据剩余空间\n\n      .animation({\n        duration: 300, // 动画持续时间为300毫秒\n        curve: Curve.Smooth // 动画曲线为平滑曲线\n      })\n      .priorityGesture(\n        PinchGesture() // 设置双指缩放手势\n          .onActionEnd((event: GestureEvent) => {\n            console.info('end scale:' + event.scale)\n\n            if (event.scale > 2) { // 如果缩放比例大于2，减少列数\n              this.columns--\n            } else if (event.scale < 0.6) { // 如果缩放比例小于0.6，增加列数\n              this.columns++\n            }\n\n            this.columns = Math.min(4, Math.max(1, this.columns)); // 列数限制在1到4之间\n            AppStorage.setOrCreate<number>('columnsCount', this.columns) // 将列数存储到AppStorage中\n          })\n      )\n    }\n  }\n}"
    },
    {
        "description": "该示例展示了如何在鸿蒙ArkUI中使用WaterFlow组件实现瀑布流布局。WaterFlow组件用于展示多列的流式布局，适用于图片、卡片等内容的展示。布局宽度占据整个屏幕，高度设为100%，内边距为左右10vp、上下5vp。组件的垂直方向上被分为多个部分，每个部分包含一个FlowItem。每个FlowItem以水平布局方式排列，FlowItem之间的间距均匀分布，且对齐方式为居中对齐。\n\nFlowItem的样式包括背景颜色、宽度和高度等属性，支持不同的样式展示。FlowItem组之间通过WaterFlow组件进行分隔。FlowItem的功能包括点击事件和状态效果，用户可以通过点击FlowItem触发相应操作，FlowItem也可以在启用或禁用状态下进行展示。\n\n整个布局通过WaterFlow布局保证FlowItem在垂直方向上有序排列，确保界面整洁美观。",
        "code": "// 定义WaterFlowDataSource类，实现IDataSource接口\nexport class WaterFlowDataSource implements IDataSource {\n  // 数据数组，用于存储数据\n  private dataArray: number[] = []\n  // 数据变化监听器数组，用于存储监听器\n  private listeners: DataChangeListener[] = []\n\n  // 构造函数，初始化数据数组\n  constructor() {\n    for (let i = 0; i < 100; i++) {\n      this.dataArray.push(i)\n    }\n  }\n\n  // 获取指定索引的数据\n  public getData(index: number): number {\n    return this.dataArray[index]\n  }\n\n  // 通知所有监听器数据已重新加载\n  notifyDataReload(): void {\n    this.listeners.forEach(listener => {\n      listener.onDataReloaded()\n    })\n  }\n\n  // 通知所有监听器数据已添加\n  notifyDataAdd(index: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataAdd(index)\n    })\n  }\n\n  // 通知所有监听器数据已更改\n  notifyDataChange(index: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataChange(index)\n    })\n  }\n\n  // 通知所有监听器数据已删除\n  notifyDataDelete(index: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataDelete(index)\n    })\n  }\n\n  // 通知所有监听器数据已移动\n  notifyDataMove(from: number, to: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataMove(from, to)\n    })\n  }\n\n  // 通知所有监听器数据集已更改\n  notifyDatasetChange(operations: DataOperation[]): void {\n    this.listeners.forEach(listener => {\n      listener.onDatasetChange(operations);\n    })\n  }\n\n  // 获取数据总数\n  public totalCount(): number {\n    return this.dataArray.length\n  }\n\n  // 注册数据变化监听器\n  registerDataChangeListener(listener: DataChangeListener): void {\n    if (this.listeners.indexOf(listener) < 0) {\n      this.listeners.push(listener)\n    }\n  }\n\n  // 注销数据变化监听器\n  unregisterDataChangeListener(listener: DataChangeListener): void {\n    const pos = this.listeners.indexOf(listener)\n    if (pos >= 0) {\n      this.listeners.splice(pos, 1)\n    }\n  }\n\n  // 在数据数组开头添加一个数据\n  public add1stItem(): void {\n    this.dataArray.splice(0, 0, this.dataArray.length)\n    this.notifyDataAdd(0)\n  }\n\n  // 在数据数组末尾添加一个数据\n  public addLastItem(): void {\n    this.dataArray.splice(this.dataArray.length, 0, this.dataArray.length)\n    this.notifyDataAdd(this.dataArray.length - 1)\n  }\n\n  // 在指定索引处添加一个数据\n  public addItem(index: number): void {\n    this.dataArray.splice(index, 0, this.dataArray.length)\n    this.notifyDataAdd(index)\n  }\n\n  // 删除数据数组开头的数据\n  public delete1stItem(): void {\n    this.dataArray.splice(0, 1)\n    this.notifyDataDelete(0)\n  }\n\n  // 删除数据数组第二个数据\n  public delete2ndItem(): void {\n    this.dataArray.splice(1, 1)\n    this.notifyDataDelete(1)\n  }\n\n  // 删除数据数组末尾的数据\n  public deleteLastItem(): void {\n    this.dataArray.splice(-1, 1)\n    this.notifyDataDelete(this.dataArray.length)\n  }\n\n  // 删除指定索引处的数据\n  public deleteItem(index: number): void {\n    this.dataArray.splice(index, 1)\n    this.notifyDataDelete(index)\n  }\n\n  // 重新加载数据\n  public reload(): void {\n    this.dataArray.splice(1, 1)\n    this.dataArray.splice(3, 2)\n    this.notifyDataReload()\n  }\n}\n\n// 导入WaterFlowDataSource类\nimport { WaterFlowDataSource } from './WaterFlowDataSource'\n\n// 定义WaterFlowDemo组件\n@Entry\n@Component\nstruct WaterFlowDemo {\n  // 最小尺寸状态变量\n  @State minSize: number = 80\n  // 最大尺寸状态变量\n  @State maxSize: number = 180\n  // 字体大小状态变量\n  @State fontSize: number = 24\n  // 颜色数组状态变量\n  @State colors: number[] = [0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F]\n  // 滚动控制器\n  scroller: Scroller = new Scroller()\n  // 数据源\n  dataSource: WaterFlowDataSource = new WaterFlowDataSource()\n  // 项目宽度数组\n  private itemWidthArray: number[] = []\n  // 项目高度数组\n  private itemHeightArray: number[] = []\n\n  // 获取随机尺寸\n  getSize() {\n    let ret = Math.floor(Math.random() * this.maxSize)\n    return (ret > this.minSize ? ret : this.minSize)\n  }\n\n  // 设置项目尺寸数组\n  setItemSizeArray() {\n    for (let i = 0; i < 100; i++) {\n      this.itemWidthArray.push(this.getSize())\n      this.itemHeightArray.push(this.getSize())\n    }\n  }\n\n  // 组件即将显示时调用\n  aboutToAppear() {\n    this.setItemSizeArray()\n  }\n\n  // 定义项目底部组件\n  @Builder\n  itemFoot() {\n    Column() {\n      Text(`Footer`)\n        .fontSize(10)\n        .backgroundColor(Color.Red)\n        .width(50)\n        .height(50)\n        .align(Alignment.Center)\n        .margin({ top: 2 })\n    }\n  }\n\n  // 构建组件\n  build() {\n    Column({ space: 2 }) {\n      WaterFlow() {\n        LazyForEach(this.dataSource, (item: number) => {\n          FlowItem() {\n            Column() {\n              Text(\"N\" + item).fontSize(12).height('16')\n\n              Image('res/waterFlowTest(' + item % 5 + ').jpg')\n                .objectFit(ImageFit.Fill)\n                .width('100%')\n                .layoutWeight(1)\n            }\n          }\n          .onAppear(() => {\n            if (item + 20 == this.dataSource.totalCount()) {\n              for (let i = 0; i < 100; i++) {\n                this.dataSource.addLastItem()\n              }\n            }\n          })\n          .width('100%')\n          .height(this.itemHeightArray[item % 100])\n          .backgroundColor(this.colors[item % 5])\n        }, (item: string) => item)\n      }\n      .columnsTemplate(\"1fr 1fr\")\n      .columnsGap(10)\n      .rowsGap(5)\n      .backgroundColor(0xFAEEE0)\n      .width('100%')\n      .height('100%')\n      .onReachStart(() => {\n        console.info('waterFlow reach start')\n      })\n      .onScrollStart(() => {\n        console.info('waterFlow scroll start')\n      })\n      .onScrollStop(() => {\n        console.info('waterFlow scroll stop')\n      })\n      .onScrollFrameBegin((offset: number, state: ScrollState) => {\n        console.info('waterFlow scrollFrameBegin offset: ' + offset + ' state: ' + state.toString())\n        return { offsetRemain: offset }\n      })\n    }\n  }\n}"
    },
    {
        "description": "该组件通过 WaterFlow 布局实现了一个瀑布流展示界面。布局宽度占据整个屏幕，高度设为 100%，内边距为左右 5vp、顶部和底部 10vp。组件的垂直方向上被分为多个部分，每个部分包含一组图片和文本。每个部分的图片以瀑布流布局方式排列，图片之间的间距均匀分布，且对齐方式为居中对齐。\n图片的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。图片组之间通过 WaterFlow 组件进行分隔。图片的功能包括点击事件和状态效果，用户可以通过点击图片触发相应操作，图片也可以在启用或禁用状态下进行展示。\n整个布局通过 WaterFlow 布局保证图片在垂直方向上有序排列，确保界面整洁美观。",
        "code": "// 导入 WaterFlowDataSource 模块\nimport { WaterFlowDataSource } from './WaterFlowDataSource'\n\n// 定义可复用的 WaterFlow 项组件\n@Reusable\n@Component\nstruct ReusableFlowItem {\n  // 定义状态变量 item，用于存储当前项的编号\n  @State item: number = 0\n\n  // 组件即将被复用时调用的方法，用于更新 item 的值\n  aboutToReuse(params: Record<string, number>) {\n    this.item = params.item;\n    console.info('Reuse item:' + this.item)\n  }\n\n  // 组件即将显示时调用的方法，用于记录新项的编号\n  aboutToAppear() {\n    console.info('new item:' + this.item)\n  }\n\n  // 构建组件的 UI 结构\n  build() {\n    // 创建一个 Image 组件，显示指定路径的图片\n    Image('res/waterFlowTest(' + this.item % 5 + ').jpg')\n      // 在图片上方叠加显示文本 'N' + item\n      .overlay('N' + this.item, { align: Alignment.Top })\n      // 设置图片的适应方式为填充\n      .objectFit(ImageFit.Fill)\n      // 设置图片的宽度为 100%\n      .width('100%')\n      // 设置图片的布局权重为 1\n      .layoutWeight(1)\n  }\n}\n\n// 定义入口组件 WaterFlowDemo\n@Entry\n@Component\nstruct WaterFlowDemo {\n  // 定义最小尺寸和最大尺寸\n  minSize: number = 80\n  maxSize: number = 180\n  // 定义字体大小\n  fontSize: number = 24\n  // 定义颜色数组\n  colors: number[] = [0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F]\n  // 定义滚动控制器\n  scroller: Scroller = new Scroller()\n  // 定义数据源\n  dataSource: WaterFlowDataSource = new WaterFlowDataSource()\n  // 获取数据源的总项数\n  dataCount: number = this.dataSource.totalCount()\n  // 定义项高度数组\n  private itemHeightArray: number[] = []\n  // 定义状态变量 sections，用于存储 WaterFlow 的各个部分\n  @State sections: WaterFlowSections = new WaterFlowSections()\n  // 定义部分的外边距\n  sectionMargin: Margin = { top: 10, left: 5, bottom: 10, right: 5 }\n  // 定义单列部分的选项\n  oneColumnSection: SectionOptions = {\n    itemsCount: 4,\n    crossCount: 1,\n    columnsGap: '5vp',\n    rowsGap: 10,\n    margin: this.sectionMargin,\n    onGetItemMainSizeByIndex: (index: number) => {\n      return this.itemHeightArray[index % 100]\n    }\n  }\n  // 定义双列部分的选项\n  twoColumnSection: SectionOptions = {\n    itemsCount: 2,\n    crossCount: 2,\n    onGetItemMainSizeByIndex: (index: number) => {\n      return 100\n    }\n  }\n  // 定义最后一个部分的选项\n  lastSection: SectionOptions = {\n    itemsCount: 20,\n    crossCount: 2,\n    onGetItemMainSizeByIndex: (index: number) => {\n      return this.itemHeightArray[index % 100]\n    }\n  }\n\n  // 获取随机尺寸的方法\n  getSize() {\n    let ret = Math.floor(Math.random() * this.maxSize)\n    return (ret > this.minSize ? ret : this.minSize)\n  }\n\n  // 设置项高度数组的方法\n  setItemSizeArray() {\n    for (let i = 0; i < 100; i++) {\n      this.itemHeightArray.push(this.getSize())\n    }\n  }\n\n  // 组件即将显示时调用的方法\n  aboutToAppear() {\n    // 设置项高度数组\n    this.setItemSizeArray()\n\n    // 定义部分选项数组\n    let sectionOptions: SectionOptions[] = []\n    let count = 0\n    let oneOrTwo = 0\n    // 根据数据源的总项数生成部分选项\n    while (count < this.dataCount) {\n      if (this.dataCount - count < 20) {\n        this.lastSection.itemsCount = this.dataCount - count\n        sectionOptions.push(this.lastSection)\n        break;\n      }\n      if (oneOrTwo++ % 2 == 0) {\n        sectionOptions.push(this.oneColumnSection)\n        count += this.oneColumnSection.itemsCount\n      } else {\n        sectionOptions.push(this.twoColumnSection)\n        count += this.twoColumnSection.itemsCount\n      }\n    }\n    // 将部分选项插入到 sections 中\n    this.sections.splice(0, 0, sectionOptions)\n  }\n\n  // 构建组件的 UI 结构\n  build() {\n    Column({ space: 2 }) {\n      Row() {\n        // 创建一个按钮，点击后更新 sections\n        Button('splice')\n          .height('5%')\n          .onClick(() => {\n            let totalCount: number = this.dataSource.totalCount()\n            let newSection: SectionOptions = {\n              itemsCount: totalCount,\n              crossCount: 2,\n              onGetItemMainSizeByIndex: (index: number) => {\n                return this.itemHeightArray[index % 100]\n              }\n            }\n            let oldLength: number = this.sections.length()\n            this.sections.splice(0, oldLength, [newSection])\n          })\n          .margin({ top: 10, left: 20 })\n        // 创建一个按钮，点击后更新 sections\n        Button('update')\n          .height('5%')\n          .onClick(() => {\n            let newSection: SectionOptions = {\n              itemsCount: 6,\n              crossCount: 3,\n              columnsGap: 5,\n              rowsGap: 10,\n              margin: this.sectionMargin,\n              onGetItemMainSizeByIndex: (index: number) => {\n                return this.itemHeightArray[index % 100]\n              }\n            }\n            this.dataSource.addItem(this.oneColumnSection.itemsCount)\n            this.dataSource.addItem(this.oneColumnSection.itemsCount + 1)\n            this.dataSource.addItem(this.oneColumnSection.itemsCount + 2)\n            this.dataSource.addItem(this.oneColumnSection.itemsCount + 3)\n            const result: boolean = this.sections.update(1, newSection)\n            console.info('update:' + result)\n          })\n          .margin({ top: 10, left: 20 })\n        // 创建一个按钮，点击后删除 sections\n        Button('delete')\n          .height('5%')\n          .onClick(() => {\n            let newSection: SectionOptions = {\n              itemsCount: 2,\n              crossCount: 2,\n              columnsGap: 5,\n              rowsGap: 10,\n              margin: this.sectionMargin,\n              onGetItemMainSizeByIndex: (index: number) => {\n                return this.itemHeightArray[index % 100]\n              }\n            }\n            this.dataSource.deleteItem(this.oneColumnSection.itemsCount)\n            this.dataSource.deleteItem(this.oneColumnSection.itemsCount)\n            this.dataSource.deleteItem(this.oneColumnSection.itemsCount)\n            this.dataSource.deleteItem(this.oneColumnSection.itemsCount)\n            this.sections.update(1, newSection)\n          })\n          .margin({ top: 10, left: 20 })\n        // 创建一个按钮，点击后获取 sections 的值\n        Button('values')\n          .height('5%')\n          .onClick(() => {\n            const sections: Array<SectionOptions> = this.sections.values();\n            for (const value of sections) {\n              console.log(JSON.stringify(value));\n            }\n            console.info('count:' + this.sections.length())\n          })\n          .margin({ top: 10, left: 20 })\n      }.margin({ bottom: 20 })\n\n      // 创建 WaterFlow 组件\n      WaterFlow({ scroller: this.scroller, sections: this.sections }) {\n        // 使用 LazyForEach 遍历数据源\n        LazyForEach(this.dataSource, (item: number) => {\n          FlowItem() {\n            ReusableFlowItem({ item: item })\n          }\n          .width('100%')\n          .backgroundColor(this.colors[item % 5])\n        }, (item: string) => item)\n      }\n      .columnsTemplate('1fr 1fr') \n      .columnsGap(10)\n      .rowsGap(5)\n      .backgroundColor(0xFAEEE0)\n      .width('100%')\n      .height('100%')\n      .layoutWeight(1)\n      .onScrollIndex((first: number, last: number) => {\n        if (last + 20 >= this.dataSource.totalCount()) {\n          for (let i = 0; i < 100; i++) {\n            this.dataSource.addLastItem()\n          }\n          const sections: Array<SectionOptions> = this.sections.values();\n          let newSection: SectionOptions = sections[this.sections.length() - 1];\n          newSection.itemsCount += 100;\n          this.sections.update(-1, newSection);\n        }\n      })\n    }\n  }\n}"
    }
]