/*\n实现一个包含多个按钮的SegmentButton组件，支持单选模式。组件下方有一系列按钮，用于动态修改SegmentButton中的按钮内容和数量。\n*/\n\nimport {\n  SegmentButton, // 导入SegmentButton组件\n  SegmentButtonOptions, // 导入SegmentButton的配置选项\n  SegmentButtonItemOptionsArray, // 导入SegmentButtonItemOptions数组\n  SegmentButtonItemTuple, // 导入SegmentButtonItemTuple类型\n  SegmentButtonItemOptions // 导入SegmentButtonItemOptions类型\n} from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  @State singleSelectCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [{ text: '1' }, { text: '2' }, { text: '3' },\n      { text: '4' }, { text: '5' }] as SegmentButtonItemTuple, // 定义SegmentButton的按钮选项，初始有5个按钮，文本分别为'1'到'5'\n    multiply: false, // 设置为单选模式\n    backgroundBlurStyle: BlurStyle.BACKGROUND_THICK // 设置背景模糊样式为厚模糊\n  })\n  @State capsuleSelectedIndexes: number[] = [0] // 初始选中第一个按钮\n\n  build() {\n    Row() {\n      Column() {\n        Column({ space: 10 }) {\n          SegmentButton({ options: this.singleSelectCapsuleOptions,\n            selectedIndexes: $capsuleSelectedIndexes }) // 创建SegmentButton组件，绑定选项和选中状态\n          Button("删除第一个按钮")\n            .onClick(() => {\n              this.singleSelectCapsuleOptions.buttons.shift() // 点击按钮时删除第一个按钮\n            })\n          Button("删除最后一个按钮")\n            .onClick(() => {\n              this.singleSelectCapsuleOptions.buttons.pop() // 点击按钮时删除最后一个按钮\n            })\n          Button("末尾增加一个按钮push")\n            .onClick(() => {\n              this.singleSelectCapsuleOptions.buttons.push({ text: 'push' }) // 点击按钮时在末尾增加一个文本为'push'的按钮\n            })\n          Button("开头增加一个按钮unshift")\n            .onClick(() => {\n              this.singleSelectCapsuleOptions.buttons.unshift(({ text: 'unshift' })) // 点击按钮时在开头增加一个文本为'unshift'的按钮\n            })\n          Button("将按钮2、3替换为splice1、splice2")\n            .onClick(() => {\n              this.singleSelectCapsuleOptions.buttons.splice(1, 2, new SegmentButtonItemOptions({\n                text: 'splice1'\n              }), new SegmentButtonItemOptions({ text: 'splice2' })) // 点击按钮时将第2、3个按钮替换为文本为'splice1'和'splice2'的按钮\n            })\n          Button("更改所有按钮文字")\n            .onClick(() => {\n              this.singleSelectCapsuleOptions.buttons =\n                SegmentButtonItemOptionsArray.create([{ text: 'a' }, { text: 'b' },\n                  { text: 'c' }, { text: 'd' }, { text: 'e' }]) // 点击按钮时将所有按钮的文本更改为'a'到'e'\n            })\n        }.width('90%')\n      }.width('100%')\n    }.height('100%')\n  }\n}


/*\n实现一个包含多种类型SegmentButton的页面布局。页面中包含五个不同类型的SegmentButton组件，分别用于展示不同类型的按钮选择效果。\n布局采用Row和Column嵌套，确保所有SegmentButton组件在页面中垂直排列，并且每个SegmentButton组件占据一定的宽度。\n*/\n\n// 导入必要的组件和类型\nimport {\n  ItemRestriction,\n  SegmentButton,\n  SegmentButtonItemTuple,\n  SegmentButtonOptions,\n  SegmentButtonTextItem\n} from '@kit.ArkUI';\n\n// 主入口组件\n@Entry\n@Component\nstruct Index {\n  // 定义页签按钮选项，包含三个文本按钮，背景模糊样式为BACKGROUND_THICK\n  @State tabOptions: SegmentButtonOptions = SegmentButtonOptions.tab({\n    buttons: [{ text: '页签按钮1' }, { text: '页签按钮2' }, { text: '页签按钮3' }] as ItemRestriction<SegmentButtonTextItem>,\n    backgroundBlurStyle: BlurStyle.BACKGROUND_THICK\n  })\n\n  // 定义单选胶囊按钮选项，包含三个文本按钮，背景模糊样式为BACKGROUND_THICK，单选模式\n  @State singleSelectCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [{ text: '单选按钮1' }, { text: '单选按钮2' }, { text: '单选按钮3' }] as SegmentButtonItemTuple,\n    multiply: false,\n    backgroundBlurStyle: BlurStyle.BACKGROUND_THICK\n  })\n\n  // 定义多选胶囊按钮选项，包含三个文本按钮，多选模式\n  @State multiplySelectCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [{ text: '多选按钮1' }, { text: '多选按钮2' }, { text: '多选按钮3' }] as SegmentButtonItemTuple,\n    multiply: true\n  })\n\n  // 定义单选图标胶囊按钮选项，包含四个图标按钮，背景模糊样式为BACKGROUND_THICK，单选模式\n  @State iconCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') }\n    ] as SegmentButtonItemTuple,\n    multiply: false,\n    backgroundBlurStyle: BlurStyle.BACKGROUND_THICK\n  })\n\n  // 定义多选图标文本胶囊按钮选项，包含五个图标文本按钮，多选模式\n  @State iconTextCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [\n      { text: '图标1', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标2', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标3', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标4', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标5', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') }\n    ] as SegmentButtonItemTuple,\n    multiply: true\n  })\n\n  // 定义页签按钮的选中索引，默认选中第二个按钮\n  @State tabSelectedIndexes: number[] = [1]\n\n  // 定义单选胶囊按钮的选中索引，默认选中第一个按钮\n  @State singleSelectCapsuleSelectedIndexes: number[] = [0]\n\n  // 定义多选胶囊按钮的选中索引，默认选中第一个和第二个按钮\n  @State multiplySelectCapsuleSelectedIndexes: number[] = [0, 1]\n\n  // 定义单选图标胶囊按钮的选中索引，默认选中第四个按钮\n  @State singleSelectIconCapsuleSelectedIndexes: number[] = [3]\n\n  // 定义多选图标文本胶囊按钮的选中索引，默认选中第二个和第三个按钮\n  @State multiplySelectIconTextCapsuleSelectedIndexes: number[] = [1, 2]\n\n  // 构建页面布局\n  build() {\n    Row() {\n      Column() {\n        Column({ space: 25 }) {\n          // 创建页签按钮组件，绑定选项和选中索引\n          SegmentButton({ options: this.tabOptions, selectedIndexes: $tabSelectedIndexes })\n\n          // 创建单选胶囊按钮组件，绑定选项和选中索引\n          SegmentButton({ options: this.singleSelectCapsuleOptions, selectedIndexes: $singleSelectCapsuleSelectedIndexes })\n\n          // 创建多选胶囊按钮组件，绑定选项和选中索引\n          SegmentButton({ options: this.multiplySelectCapsuleOptions, selectedIndexes: $multiplySelectCapsuleSelectedIndexes })\n\n          // 创建单选图标胶囊按钮组件，绑定选项和选中索引\n          SegmentButton({ options: this.iconCapsuleOptions, selectedIndexes: $singleSelectIconCapsuleSelectedIndexes })\n\n          // 创建多选图标文本胶囊按钮组件，绑定选项和选中索引\n          SegmentButton({ options: this.iconTextCapsuleOptions, selectedIndexes: $multiplySelectIconTextCapsuleSelectedIndexes })\n        }.width('90%') // 设置Column的宽度为90%\n      }.width('100%') // 设置Column的宽度为100%\n    }.height('100%') // 设置Row的高度为100%\n  }\n}


/*\n实现一个包含多种SegmentButton布局的页面，展示不同类型的SegmentButton组件，包括单选、多选、带图标、带图标和文本的SegmentButton。每个SegmentButton组件的样式和行为都可以通过SegmentButtonOptions进行自定义。\n*/\n\nimport { LengthMetrics, SegmentButton, SegmentButtonOptions } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct Index {\n  // 定义一个状态变量，用于存储页签按钮的选项\n  @State tabOptions: SegmentButtonOptions = SegmentButtonOptions.tab({\n    buttons: [{ text: '页签按钮1' }, { text: '页签按钮2' }, { text: '页签按钮3' }], // 按钮文本\n    direction: Direction.Rtl, // 布局方向，从右到左\n    backgroundColor: Color.Green, // 背景颜色\n    selectedBackgroundColor: Color.Orange, // 选中时的背景颜色\n    localizedTextPadding: { // 文本的内边距\n      end: LengthMetrics.vp(10), // 结束位置的内边距\n      start: LengthMetrics.vp(10) // 开始位置的内边距\n    },\n  })\n\n  // 定义一个状态变量，用于存储单选按钮的选项\n  @State singleSelectCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [{ text: '单选按钮1' }, { text: '单选按钮2' }, { text: '单选按钮3' }], // 按钮文本\n    multiply: false, // 是否允许多选，false表示单选\n    direction: Direction.Rtl, // 布局方向，从右到左\n    fontColor: Color.Black, // 字体颜色\n    selectedFontColor: Color.Yellow, // 选中时的字体颜色\n    backgroundBlurStyle: BlurStyle.BACKGROUND_THICK // 背景模糊样式\n  })\n\n  // 定义一个状态变量，用于存储多选按钮的选项\n  @State multiplySelectCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [{ text: '多选按钮1' }, { text: '多选按钮2' }, { text: '多选按钮3' }], // 按钮文本\n    multiply: true, // 是否允许多选，true表示多选\n    direction: Direction.Rtl, // 布局方向，从右到左\n    fontSize: 18, // 字体大小\n    selectedFontSize: 18, // 选中时的字体大小\n    fontWeight: FontWeight.Bolder, // 字体粗细\n    selectedFontWeight: FontWeight.Lighter, // 选中时的字体粗细\n  })\n\n  // 定义一个状态变量，用于存储带图标的单选按钮的选项\n  @State iconCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') }, // 按钮图标\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') }\n    ],\n    multiply: false, // 是否允许多选，false表示单选\n    direction: Direction.Rtl, // 布局方向，从右到左\n    imageSize: { width: 40, height: 40 }, // 图标大小\n    localizedButtonPadding: { // 按钮的内边距\n      end: LengthMetrics.vp(10), // 结束位置的内边距\n      start: LengthMetrics.vp(10) // 开始位置的内边距\n    },\n    backgroundBlurStyle: BlurStyle.BACKGROUND_THICK // 背景模糊样式\n  })\n\n  // 定义一个状态变量，用于存储带图标和文本的多选按钮的选项\n  @State iconTextCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [\n      { text: '图标1', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') }, // 按钮文本和图标\n      { text: '图标2', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标3', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标4', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标5', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') }\n    ],\n    multiply: true, // 是否允许多选，true表示多选\n    direction: Direction.Rtl, // 布局方向，从右到左\n    imageSize: { width: 10, height: 10 }, // 图标大小\n  })\n\n  // 定义一个状态变量，用于存储页签按钮的选中索引\n  @State tabSelectedIndexes: number[] = [0]\n\n  // 定义一个状态变量，用于存储单选按钮的选中索引\n  @State singleSelectCapsuleSelectedIndexes: number[] = [0]\n\n  // 定义一个状态变量，用于存储多选按钮的选中索引\n  @State multiplySelectCapsuleSelectedIndexes: number[] = [0, 1]\n\n  // 定义一个状态变量，用于存储带图标的单选按钮的选中索引\n  @State singleSelectIconCapsuleSelectedIndexes: number[] = [3]\n\n  // 定义一个状态变量，用于存储带图标和文本的多选按钮的选中索引\n  @State multiplySelectIconTextCapsuleSelectedIndexes: number[] = [1, 2]\n\n  build() {\n    Row() {\n      Column() {\n        Column({ space: 20 }) {\n          // 创建一个SegmentButton组件，使用tabOptions配置，并绑定选中索引\n          SegmentButton({ options: this.tabOptions, selectedIndexes: $tabSelectedIndexes })\n\n          // 创建一个SegmentButton组件，使用singleSelectCapsuleOptions配置，并绑定选中索引\n          SegmentButton({\n            options: this.singleSelectCapsuleOptions,\n            selectedIndexes: $singleSelectCapsuleSelectedIndexes\n          })\n\n          // 创建一个SegmentButton组件，使用multiplySelectCapsuleOptions配置，并绑定选中索引\n          SegmentButton({\n            options: this.multiplySelectCapsuleOptions,\n            selectedIndexes: $multiplySelectCapsuleSelectedIndexes\n          })\n\n          // 创建一个SegmentButton组件，使用iconCapsuleOptions配置，并绑定选中索引\n          SegmentButton({\n            options: this.iconCapsuleOptions,\n            selectedIndexes: $singleSelectIconCapsuleSelectedIndexes\n          })\n\n          // 创建一个SegmentButton组件，使用iconTextCapsuleOptions配置，并绑定选中索引\n          SegmentButton({\n            options: this.iconTextCapsuleOptions,\n            selectedIndexes: $multiplySelectIconTextCapsuleSelectedIndexes\n          })\n        }.width('90%') // 设置Column的宽度为90%\n      }.width('100%') // 设置Column的宽度为100%\n    }.height('100%') // 设置Row的高度为100%\n  }\n}


/*\n实现一个包含多种类型的SegmentButton组件的页面，支持单选、多选、图标按钮、图标文本按钮等多种样式和功能。页面布局为一个Row容器，内部包含一个Column容器，Column容器中包含多个SegmentButton组件，每个SegmentButton组件根据不同的配置展示不同的样式和功能。\n*/\n\n// 导入SegmentButton相关的组件和类型\nimport {\n  ItemRestriction,\n  SegmentButton,\n  SegmentButtonItemTuple,\n  SegmentButtonOptions,\n  SegmentButtonTextItem\n} from '@kit.ArkUI';\n\n// 定义一个名为Index的组件，作为页面的入口组件\n@Entry\n@Component\nstruct Index {\n  // 定义一个状态变量tabOptions，用于配置页签按钮的样式和功能\n  @State tabOptions: SegmentButtonOptions = SegmentButtonOptions.tab({\n    buttons: [\n      { text: '页签按钮1' }, \n      { text: '页签按钮2' }, \n      { text: '页签按钮3' }\n    ] as ItemRestriction<SegmentButtonTextItem>, // 按钮文本项的限制类型\n    backgroundColor: Color.Green, // 按钮背景颜色\n    selectedBackgroundColor: Color.Orange, // 选中按钮的背景颜色\n    textPadding: { top: 10, right: 10, bottom: 10, left: 10 }, // 文本内边距\n  })\n\n  // 定义一个状态变量singleSelectCapsuleOptions，用于配置单选按钮的样式和功能\n  @State singleSelectCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [\n      { text: '单选按钮1' }, \n      { text: '单选按钮2' }, \n      { text: '单选按钮3' }\n    ] as SegmentButtonItemTuple, // 按钮项的元组类型\n    multiply: false, // 是否允许多选，false表示单选\n    fontColor: Color.Black, // 按钮文本颜色\n    selectedFontColor: Color.Yellow, // 选中按钮的文本颜色\n    backgroundBlurStyle: BlurStyle.BACKGROUND_THICK // 背景模糊样式\n  })\n\n  // 定义一个状态变量multiplySelectCapsuleOptions，用于配置多选按钮的样式和功能\n  @State multiplySelectCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [\n      { text: '多选按钮1' }, \n      { text: '多选按钮2' }, \n      { text: '多选按钮3' }\n    ] as SegmentButtonItemTuple, // 按钮项的元组类型\n    multiply: true, // 是否允许多选，true表示多选\n    fontSize: 18, // 按钮文本字体大小\n    selectedFontSize: 18, // 选中按钮的文本字体大小\n    fontWeight: FontWeight.Bolder, // 按钮文本字体粗细\n    selectedFontWeight: FontWeight.Lighter, // 选中按钮的文本字体粗细\n  })\n\n  // 定义一个状态变量iconCapsuleOptions，用于配置图标按钮的样式和功能\n  @State iconCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') }\n    ] as SegmentButtonItemTuple, // 按钮项的元组类型\n    multiply: false, // 是否允许多选，false表示单选\n    imageSize: { width: 40, height: 40 }, // 图标尺寸\n    buttonPadding: { top: 6, right: 10, bottom: 6, left: 10 }, // 按钮内边距\n    backgroundBlurStyle: BlurStyle.BACKGROUND_THICK // 背景模糊样式\n  })\n\n  // 定义一个状态变量iconTextCapsuleOptions，用于配置图标文本按钮的样式和功能\n  @State iconTextCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [\n      { text: '图标1', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标2', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标3', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标4', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标5', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') }\n    ] as SegmentButtonItemTuple, // 按钮项的元组类型\n    multiply: true, // 是否允许多选，true表示多选\n    imageSize: { width: 10, height: 10 }, // 图标尺寸\n  })\n\n  // 定义一个状态变量tabSelectedIndexes，用于存储页签按钮的选中索引\n  @State tabSelectedIndexes: number[] = [0]\n\n  // 定义一个状态变量singleSelectCapsuleSelectedIndexes，用于存储单选按钮的选中索引\n  @State singleSelectCapsuleSelectedIndexes: number[] = [0]\n\n  // 定义一个状态变量multiplySelectCapsuleSelectedIndexes，用于存储多选按钮的选中索引\n  @State multiplySelectCapsuleSelectedIndexes: number[] = [0, 1]\n\n  // 定义一个状态变量singleSelectIconCapsuleSelectedIndexes，用于存储单选图标按钮的选中索引\n  @State singleSelectIconCapsuleSelectedIndexes: number[] = [3]\n\n  // 定义一个状态变量multiplySelectIconTextCapsuleSelectedIndexes，用于存储多选图标文本按钮的选中索引\n  @State multiplySelectIconTextCapsuleSelectedIndexes: number[] = [1, 2]\n\n  // 构建页面的布局\n  build() {\n    Row() {\n      Column() {\n        Column({ space: 20 }) {\n          // 创建一个SegmentButton组件，配置为页签按钮样式，绑定选中索引状态\n          SegmentButton({ options: this.tabOptions, selectedIndexes: $tabSelectedIndexes })\n\n          // 创建一个SegmentButton组件，配置为单选按钮样式，绑定选中索引状态\n          SegmentButton({ options: this.singleSelectCapsuleOptions,\n            selectedIndexes: $singleSelectCapsuleSelectedIndexes })\n\n          // 创建一个SegmentButton组件，配置为多选按钮样式，绑定选中索引状态\n          SegmentButton({ options: this.multiplySelectCapsuleOptions,\n            selectedIndexes: $multiplySelectCapsuleSelectedIndexes })\n\n          // 创建一个SegmentButton组件，配置为单选图标按钮样式，绑定选中索引状态\n          SegmentButton({ options: this.iconCapsuleOptions,\n            selectedIndexes: $singleSelectIconCapsuleSelectedIndexes })\n\n          // 创建一个SegmentButton组件，配置为多选图标文本按钮样式，绑定选中索引状态\n          SegmentButton({ options: this.iconTextCapsuleOptions,\n            selectedIndexes: $multiplySelectIconTextCapsuleSelectedIndexes })\n        }.width('90%') // 设置Column的宽度为父容器的90%\n      }.width('100%') // 设置Column的宽度为父容器的100%\n    }.height('100%') // 设置Row的高度为父容器的100%\n  }\n}