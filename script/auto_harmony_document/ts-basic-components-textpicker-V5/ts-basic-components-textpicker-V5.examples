/*\n实现一个包含多种类型文本选择器的示例组件。该组件展示了如何使用单列选择器、多列选择器和级联选择器，并配置了不同的文本样式和分隔线样式。\n*/\n\n@Entry\n@Component\nstruct TextPickerExample {\n  // 初始化选中项为1\n  private select: number = 1\n  \n  // 定义不同种类的水果数组\n  private apfruits: string[] = ['apple1', 'apple2', 'apple3', 'apple4']\n  private orfruits: string[] = ['orange1', 'orange2', 'orange3', 'orange4']\n  private pefruits: string[] = ['peach1', 'peach2', 'peach3', 'peach4']\n  \n  // 将不同种类的水果数组组合成一个二维数组\n  private multi: string[][] = [this.apfruits, this.orfruits, this.pefruits]\n  \n  // 定义级联选择器的数据结构\n  private cascade: TextCascadePickerRangeContent[] = [\n    {\n      text: '辽宁省',\n      children: [{ text: '沈阳市', children: [{ text: '沈河区' }, { text: '和平区' }, { text: '浑南区' }] },\n        { text: '大连市', children: [{ text: '中山区' }, { text: '金州区' }, { text: '长海县' }] }]\n    },\n    {\n      text: '吉林省',\n      children: [{ text: '长春市', children: [{ text: '南关区' }, { text: '宽城区' }, { text: '朝阳区' }] },\n        { text: '四平市', children: [{ text: '铁西区' }, { text: '铁东区' }, { text: '梨树县' }] }]\n    },\n    {\n      text: '黑龙江省',\n      children: [{ text: '哈尔滨市', children: [{ text: '道里区' }, { text: '道外区' }, { text: '南岗区' }] },\n        { text: '牡丹江市', children: [{ text: '东安区' }, { text: '西安区' }, { text: '爱民区' }] }]\n    }\n  ]\n\n  // 构建函数，用于创建组件结构\n  build() {\n    Column() {\n      // 创建一个单列文本选择器，传入苹果数组和初始选中索引\n      TextPicker({ range: this.apfruits, selected: this.select })\n        .onChange((value: string | string[], index: number | number[]) => {\n          // 当选择项改变时，输出选择的值和索引\n          console.info('Picker item changed, value: ' + value + ', index: ' + index)\n        }).margin(bott) // 设置边距为bottom类的实例bott\n\n      // 创建一个多列文本选择器，传入多列数据\n      TextPicker({ range: this.multi })\n        .onChange((value: string | string[], index: number | number[]) => {\n          // 当选择项改变时，输出选择的值和索引\n          console.info('TextPicker 多列:onChange ' + JSON.stringify(value) + ', ' + 'index: ' + JSON.stringify(index))\n        }).margin(bott) // 设置边距为bottom类的实例bott\n\n      // 创建一个级联文本选择器，传入级联数据\n      TextPicker({ range: this.cascade })\n        .onChange((value: string | string[], index: number | number[]) => {\n          // 当选择项改变时，输出选择的值和索引\n          console.info('TextPicker 多列联动:onChange ' + JSON.stringify(value) + ', ' + 'index: ' + JSON.stringify(index))\n        })\n    }\n  }\n}\n\n// 定义bottom类，用于设置边距\nclass bottom {\n  bottom: number = 50\n}\n\n// 创建bottom类的实例\nlet bott: bottom = new bottom()