{
    "description": "为开发者提供满足定制化诉求的Web高阶组件，屏蔽原生Web组件中无需关注的接口，并提供JS扩展能力。",
    "details": null,
    "interfaces": [
        {
            "description": "AtomicServiceWeb({ src: ResourceStr, controller: AtomicServiceWebController, navPathStack?: NavPathStack, mixedMode?: MixedMode, darkMode?: WebDarkMode, forceDarkAccess?: boolean, onMessage?: Callback<OnMessageEvent>, onErrorReceive?: Callback<OnErrorReceiveEvent>, onHttpErrorReceive?: Callback<OnHttpErrorReceiveEvent>, onPageBegin?: Callback<OnPageBeginEvent>, onPageEnd?: Callback<OnPageEndEvent>, onControllerAttached?: Callback<void>, onLoadIntercept?: Callback<OnLoadInterceptEvent, boolean>, onProgressChange?: Callback<OnProgressChangeEvent> })",
            "params": {
                "src": {
                    "type": "ResourceStr",
                    "required": true,
                    "description": "网页资源地址，访问网络资源需要在AGC配置业务域名，访问本地资源仅支持包内文件（$rawfile）。不支持通过状态变量（例如@State）动态更新地址。加载的网页中支持通过JS SDK提供的接口调用系统能力，具体以JS SDK为准。"
                },
                "controller": {
                    "type": "AtomicServiceWebController",
                    "required": true,
                    "description": "通过AtomicServiceWebController可以控制AtomicServiceWeb组件各种行为。"
                },
                "navPathStack": {
                    "type": "NavPathStack",
                    "required": false,
                    "description": "路由栈信息。当使用NavDestination作为页面的根容器时，需传入NavDestination容器对应的NavPathStack处理页面路由。"
                },
                "mixedMode": {
                    "type": "MixedMode",
                    "required": false,
                    "description": "设置是否允许加载超文本传输协议（HTTP）和超文本传输安全协议（HTTPS）混合内容，默认不允许加载HTTP和HTTPS混合内容。"
                },
                "darkMode": {
                    "type": "WebDarkMode",
                    "required": false,
                    "description": "设置Web深色模式，默认关闭。"
                },
                "forceDarkAccess": {
                    "type": "boolean",
                    "required": false,
                    "description": "设置网页是否开启强制深色模式。默认关闭。该属性仅在darkMode开启深色模式时生效。"
                },
                "onMessage": {
                    "type": "Callback<OnMessageEvent>",
                    "required": false,
                    "description": "H5页面通过JS SDK的postMessage()发送消息后，Web组件对应的页面返回或销毁时，触发该回调。"
                },
                "onErrorReceive": {
                    "type": "Callback<OnErrorReceiveEvent>",
                    "required": false,
                    "description": "网页加载遇到错误时触发该回调。出于性能考虑，建议此回调中尽量执行简单逻辑。在无网络的情况下，触发此回调。"
                },
                "onHttpErrorReceive": {
                    "type": "Callback<OnHttpErrorReceiveEvent>",
                    "required": false,
                    "description": "网页加载资源遇到的HTTP错误（响应码>=400)时触发该回调。"
                },
                "onPageBegin": {
                    "type": "Callback<OnPageBeginEvent>",
                    "required": false,
                    "description": "网页开始加载时触发该回调，且只在主frame触发，iframe或者frameset的内容加载时不会触发此回调。"
                },
                "onPageEnd": {
                    "type": "Callback<OnPageEndEvent>",
                    "required": false,
                    "description": "网页加载完成时触发该回调，且只在主frame触发。"
                },
                "onControllerAttached": {
                    "type": "Callback<void>",
                    "required": false,
                    "description": "当Controller成功绑定到Web组件时触发该回调。"
                },
                "onLoadIntercept": {
                    "type": "Callback<OnLoadInterceptEvent, boolean>",
                    "required": false,
                    "description": "当Web组件加载url之前触发该回调，用于判断是否阻止此次访问。默认允许加载。"
                },
                "onProgressChange": {
                    "type": "Callback<OnProgressChangeEvent>",
                    "required": false,
                    "description": "网页加载进度变化时触发该回调。"
                }
            }
        }
    ],
    "attributes": {
        "src": {
            "description": "网页资源地址，访问网络资源需要在AGC配置业务域名，访问本地资源仅支持包内文件（$rawfile）。不支持通过状态变量（例如@State）动态更新地址。加载的网页中支持通过JS SDK提供的接口调用系统能力，具体以JS SDK为准。",
            "params": {
                "value": {
                    "type": "ResourceStr",
                    "required": true,
                    "description": "网页资源地址。"
                }
            }
        },
        "controller": {
            "description": "通过AtomicServiceWebController可以控制AtomicServiceWeb组件各种行为。",
            "params": {
                "value": {
                    "type": "AtomicServiceWebController",
                    "required": true,
                    "description": "AtomicServiceWebController对象。"
                }
            }
        },
        "navPathStack": {
            "description": "路由栈信息。当使用NavDestination作为页面的根容器时，需传入NavDestination容器对应的NavPathStack处理页面路由。",
            "params": {
                "value": {
                    "type": "NavPathStack",
                    "required": false,
                    "description": "路由栈信息。"
                }
            }
        },
        "mixedMode": {
            "description": "设置是否允许加载超文本传输协议（HTTP）和超文本传输安全协议（HTTPS）混合内容，默认不允许加载HTTP和HTTPS混合内容。",
            "params": {
                "value": {
                    "type": "MixedMode",
                    "required": false,
                    "description": "混合内容模式。"
                }
            }
        },
        "darkMode": {
            "description": "设置Web深色模式，默认关闭。",
            "params": {
                "value": {
                    "type": "WebDarkMode",
                    "required": false,
                    "description": "深色模式。"
                }
            }
        },
        "forceDarkAccess": {
            "description": "设置网页是否开启强制深色模式。默认关闭。该属性仅在darkMode开启深色模式时生效。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": false,
                    "description": "是否开启强制深色模式。"
                }
            }
        }
    },
    "events": {
        "onMessage": {
            "description": "H5页面通过JS SDK的postMessage()发送消息后，Web组件对应的页面返回或销毁时，触发该回调。",
            "params": {
                "event": {
                    "type": "OnMessageEvent",
                    "required": true,
                    "description": "消息事件。"
                }
            }
        },
        "onErrorReceive": {
            "description": "网页加载遇到错误时触发该回调。出于性能考虑，建议此回调中尽量执行简单逻辑。在无网络的情况下，触发此回调。",
            "params": {
                "event": {
                    "type": "OnErrorReceiveEvent",
                    "required": true,
                    "description": "错误接收事件。"
                }
            }
        },
        "onHttpErrorReceive": {
            "description": "网页加载资源遇到的HTTP错误（响应码>=400)时触发该回调。",
            "params": {
                "event": {
                    "type": "OnHttpErrorReceiveEvent",
                    "required": true,
                    "description": "HTTP错误接收事件。"
                }
            }
        },
        "onPageBegin": {
            "description": "网页开始加载时触发该回调，且只在主frame触发，iframe或者frameset的内容加载时不会触发此回调。",
            "params": {
                "event": {
                    "type": "OnPageBeginEvent",
                    "required": true,
                    "description": "页面开始加载事件。"
                }
            }
        },
        "onPageEnd": {
            "description": "网页加载完成时触发该回调，且只在主frame触发。",
            "params": {
                "event": {
                    "type": "OnPageEndEvent",
                    "required": true,
                    "description": "页面加载完成事件。"
                }
            }
        },
        "onControllerAttached": {
            "description": "当Controller成功绑定到Web组件时触发该回调。",
            "params": {}
        },
        "onLoadIntercept": {
            "description": "当Web组件加载url之前触发该回调，用于判断是否阻止此次访问。默认允许加载。",
            "params": {
                "event": {
                    "type": "OnLoadInterceptEvent",
                    "required": true,
                    "description": "加载拦截事件。"
                }
            },
            "returns": {
                "type": "boolean",
                "description": "是否阻止此次访问。"
            }
        },
        "onProgressChange": {
            "description": "网页加载进度变化时触发该回调。",
            "params": {
                "event": {
                    "type": "OnProgressChangeEvent",
                    "required": true,
                    "description": "进度变化事件。"
                }
            }
        }
    },
    "rules": null,
    "examples": [
        {
            "description": "示例1：加载本地网页\n\n该组件通过 `AtomicServiceWeb` 组件实现了一个加载本地网页的功能。布局采用 `Column` 组件，宽度占据整个屏幕，高度根据内容自适应。`AtomicServiceWeb` 组件用于加载本地 HTML 文件，通过 `src` 属性指定本地文件路径，使用 `$rawfile` 方法引用资源文件。`controller` 属性用于控制网页的加载和交互，通过 `@State` 装饰器绑定到组件的状态中。\n\n组件的样式和外观简洁，没有额外的装饰。组件的功能主要是加载并显示本地网页内容，用户可以在应用中浏览本地网页。",
            "code": "import { AtomicServiceWeb, AtomicServiceWebController } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct WebComponent {\n  @State controller: AtomicServiceWebController = new AtomicServiceWebController();\n\n  build() {\n    Column() {\n      AtomicServiceWeb({ src: $rawfile(\"index.html\"), controller: this.controller })\n    }\n  }\n}\n\n/*\n示例2：加载在线网页\n\n该组件通过 `AtomicServiceWeb` 组件实现了一个加载在线网页的功能。布局采用 `Column` 组件，宽度占据整个屏幕，高度根据内容自适应。`AtomicServiceWeb` 组件用于加载在线网页，通过 `src` 属性指定在线网页的 URL。`controller` 属性用于控制网页的加载和交互，通过 `@State` 装饰器绑定到组件的状态中。\n\n组件的样式和外观简洁，没有额外的装饰。组件的功能主要是加载并显示在线网页内容，用户可以在应用中浏览在线网页。\n*/\n\nimport { AtomicServiceWeb, AtomicServiceWebController } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct WebComponent {\n  @State controller: AtomicServiceWebController = new AtomicServiceWebController();\n\n  build() {\n    Column() {\n      AtomicServiceWeb({ src: 'https://www.example.com', controller: this.controller })\n    }\n  }\n}\n\n/*\n示例3：NavDestination容器中加载网页\n\n该组件通过 `NavDestination` 组件和 `AtomicServiceWeb` 组件实现了一个在导航目的地中加载网页的功能。布局采用 `NavDestination` 组件，宽度占据整个屏幕，高度根据内容自适应。`AtomicServiceWeb` 组件用于加载本地 HTML 文件，通过 `src` 属性指定本地文件路径，使用 `$rawfile` 方法引用资源文件。`controller` 属性用于控制网页的加载和交互，通过 `@State` 装饰器绑定到组件的状态中。`navPathStack` 属性用于管理导航路径栈。\n\n组件的样式和外观简洁，没有额外的装饰。组件的功能主要是加载并显示本地网页内容，并在导航目的地中进行展示。用户可以在应用中浏览本地网页，并通过导航进行页面切换。\n*/\n\nimport { AtomicServiceWeb, AtomicServiceWebController } from '@kit.ArkUI';\n\n@Builder\nexport function WebComponentBuilder(name: string, param: Object) {\n  WebComponent()\n}\n\n@Component\nstruct WebComponent {\n  navPathStack: NavPathStack = new NavPathStack();\n  @State controller: AtomicServiceWebController = new AtomicServiceWebController();\n\n  build() {\n    NavDestination() {\n      AtomicServiceWeb({ src: $rawfile(\"index.html\"), controller: this.controller, navPathStack: this.navPathStack })\n    }\n    .onReady((context: NavDestinationContext) => {\n      this.navPathStack = context.pathStack;\n    })\n  }\n}\n\n/*\n示例4：设置onMessage()事件回调\n\n该组件通过 `AtomicServiceWeb` 组件实现了一个加载本地网页并设置消息回调的功能。布局采用 `Column` 组件，宽度占据整个屏幕，高度根据内容自适应。`AtomicServiceWeb` 组件用于加载本地 HTML 文件，通过 `src` 属性指定本地文件路径，使用 `$rawfile` 方法引用资源文件。`controller` 属性用于控制网页的加载和交互，通过 `@State` 装饰器绑定到组件的状态中。`onMessage` 事件回调用于处理从网页发送的消息。\n\n组件的样式和外观简洁，没有额外的装饰。组件的功能主要是加载并显示本地网页内容，并在接收到网页发送的消息时触发回调函数，将消息内容打印到控制台。\n*/\n\nimport { AtomicServiceWeb, AtomicServiceWebController, OnMessageEvent } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct WebComponent {\n  @State controller: AtomicServiceWebController = new AtomicServiceWebController();\n\n  build() {\n    Column() {\n      AtomicServiceWeb({\n        src: $rawfile(\"index.html\"),\n        controller: this.controller,\n        onMessage: (event: OnMessageEvent) => {\n          console.log(`[AtomicServiceWebLog] onMessage data=${JSON.stringify(event.data)}`);\n        }\n      })\n    }\n  }\n}\n\n/*\n示例5：设置网页加载事件回调\n\n该组件通过 `AtomicServiceWeb` 组件实现了一个加载本地网页并设置多个加载事件回调的功能。布局采用 `Column` 组件，宽度占据整个屏幕，高度根据内容自适应。`AtomicServiceWeb` 组件用于加载本地 HTML 文件，通过 `src` 属性指定本地文件路径，使用 `$rawfile` 方法引用资源文件。`controller` 属性用于控制网页的加载和交互，通过 `@State` 装饰器绑定到组件的状态中。`onErrorReceive`、`onHttpErrorReceive`、`onPageBegin` 和 `onPageEnd` 事件回调用于处理网页加载过程中的各种事件。\n\n组件的样式和外观简洁，没有额外的装饰。组件的功能主要是加载并显示本地网页内容，并在网页加载过程中触发相应的事件回调，将事件信息打印到控制台。\n*/\n\nimport {\n  AtomicServiceWeb,\n  AtomicServiceWebController,\n  OnErrorReceiveEvent,\n  OnHttpErrorReceiveEvent,\n  OnPageBeginEvent,\n  OnPageEndEvent\n} from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct WebComponent {\n  @State controller: AtomicServiceWebController = new AtomicServiceWebController();\n\n  build() {\n    Column() {\n      AtomicServiceWeb({\n        src: $rawfile('index.html'),\n        controller: this.controller,\n        onErrorReceive: (event: OnErrorReceiveEvent) => {\n          console.log(`AtomicServiceWebLog onErrorReceive event=${JSON.stringify({\n            requestUrl: event.request?.getRequestUrl(),\n            requestMethod: event.request?.getRequestMethod(),\n            errorCode: event.error?.getErrorCode(),\n            errorInfo: event.error?.getErrorInfo()\n          })}`);\n        },\n        onHttpErrorReceive: (event: OnHttpErrorReceiveEvent) => {\n          console.log(`AtomicServiceWebLog onHttpErrorReceive event=${JSON.stringify({\n            requestUrl: event.request?.getRequestUrl(),\n            requestMethod: event.request?.getRequestMethod(),\n            responseCode: event.response?.getResponseCode(),\n            responseData: event.response?.getResponseData(),\n          })}`);\n        },\n        onPageBegin: (event: OnPageBeginEvent) => {\n          console.log(`AtomicServiceWebLog onPageBegin event=${JSON.stringify({\n            url: event.url\n          })}`);\n        },\n        onPageEnd: (event: OnPageEndEvent) => {\n          console.log(`AtomicServiceWebLog onPageEnd event=${JSON.stringify({\n            url: event.url\n          })}`);\n        }\n      })\n    }\n  }\n}\n\n/*\n示例6：AtomicServiceWeb跟AtomicServiceWebController的使用示例\n\n该组件通过 `AtomicServiceWeb` 组件和 `AtomicServiceWebController` 实现了一个复杂的网页加载和控制功能。布局采用 `Column` 组件，宽度占据整个屏幕，高度根据内容自适应。`AtomicServiceWeb` 组件用于加载在线网页，通过 `src` 属性指定在线网页的 URL。`controller` 属性用于控制网页的加载和交互，通过 `@State` 装饰器绑定到组件的状态中。`onControllerAttached`、`onLoadIntercept`、`onProgressChange`、`onMessage`、`onPageBegin`、`onPageEnd`、`onHttpErrorReceive` 和 `onErrorReceive` 事件回调用于处理网页加载过程中的各种事件。\n\n组件的样式和外观简洁，没有额外的装饰。组件的功能主要是加载并显示在线网页内容，并在网页加载过程中触发相应的事件回调，将事件信息打印到控制台。此外，组件还提供了多个按钮，用于控制网页的前进、后退、刷新、加载新 URL 等操作。\n*/\n\nimport {\n  AtomicServiceWeb,\n  AtomicServiceWebController,\n  OnErrorReceiveEvent,\n  OnHttpErrorReceiveEvent,\n  OnPageBeginEvent,\n  OnPageEndEvent,\n  OnMessageEvent,\n  OnLoadInterceptEvent,\n  OnProgressChangeEvent\n} from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct WebComponent {\n  @State darkMode: WebDarkMode = WebDarkMode.On;\n  @State forceDarkAccess: boolean = true;\n  @State mixedMode: MixedMode = MixedMode.None;\n  @State controller: AtomicServiceWebController = new AtomicServiceWebController();\n  @State num: number = 1;\n\n  build() {\n    Column() {\n      Button('accessForward').onClick(() => {\n        console.log(`AtomicServiceWebLog accessForward = ${this.controller.accessForward()}`);\n      })\n      Button('accessBackward').onClick(() => {\n        console.log(`AtomicServiceWebLog accessBackward = ${this.controller.accessBackward()}`);\n      })\n      Button('accessStep').onClick(() => {\n        console.log(`AtomicServiceWebLog accessStep = ${this.controller.accessStep(1)}`);\n      })\n      Button('forward').onClick(() => {\n        console.log(`AtomicServiceWebLog forward = ${this.controller.forward()}`);\n      })\n      Button('backward').onClick(() => {\n        console.log(`AtomicServiceWebLog backward = ${this.controller.backward()}`);\n      })\n      Button('refresh').onClick(() => {\n        console.log(`AtomicServiceWebLog refresh = ${this.controller.refresh()}`);\n      })\n      Button('loadUrl').onClick(() => {\n        console.log(`AtomicServiceWebLog loadUrl = ${this.controller.loadUrl('https://www.baidu.com/')}`);\n      })\n      Button('深色模式').onClick(() => {\n        this.forceDarkAccess = !this.forceDarkAccess;\n      })\n      Button('mixedMode').onClick(() => {\n        this.mixedMode = this.mixedMode == MixedMode.None ? MixedMode.All : MixedMode.None;\n      })\n      Button('点击').onClick(() => {\n        console.log(`AtomicServiceWebLog getUserAgent = ${this.controller.getUserAgent()}`);\n        console.log(`AtomicServiceWebLog getCustomUserAgent = ${this.controller.getCustomUserAgent()}`);\n        this.controller.setCustomUserAgent('test' + this.num++);\n        console.log(`AtomicServiceWebLog getUserAgent after set = ${this.controller.getUserAgent()}`);\n        console.log(`AtomicServiceWebLog getCustomUserAgent after set = ${this.controller.getCustomUserAgent()}`);\n      })\n      AtomicServiceWeb({\n        src: 'https://www.example.com',\n        mixedMode: this.mixedMode,\n        darkMode: this.darkMode,\n        forceDarkAccess: this.forceDarkAccess,\n        controller: this.controller,\n        onControllerAttached: () => {\n          console.log(\"AtomicServiceWebLog onControllerAttached call back success\");\n        },\n        onLoadIntercept: (event: OnLoadInterceptEvent) => {\n          console.log(\"AtomicServiceWebLog onLoadIntercept call back success \" + JSON.stringify({\n            getRequestUrl: event.data.getRequestUrl(),\n            getRequestMethod: event.data.getRequestMethod(),\n            getRequestHeader: event.data.getRequestHeader(),\n            isRequestGesture: event.data.isRequestGesture(),\n            isMainFrame: event.data.isMainFrame(),\n            isRedirect: event.data.isRedirect(),\n          }))\n          return false;\n        },\n        onProgressChange: (event: OnProgressChangeEvent) => {\n          console.log(\"AtomicServiceWebLog onProgressChange call back success \" + JSON.stringify(event));\n        },\n        onMessage: (event: OnMessageEvent) => {\n          console.log(\"onMessage call back success \" + JSON.stringify(event));\n        },\n        onPageBegin: (event: OnPageBeginEvent) => {\n          console.log(\"onPageBegin call back success \" + JSON.stringify(event));\n        },\n        onPageEnd: (event: OnPageEndEvent) => {\n          console.log(\"onPageEnd call back success \" + JSON.stringify(event));\n        },\n        onHttpErrorReceive: (event: OnHttpErrorReceiveEvent) => {\n          console.log(\"onHttpErrorReceive call back success \" + JSON.stringify(event));\n        },\n        onErrorReceive: (event: OnErrorReceiveEvent) => {\n          console.log(\"onErrorReceive call back success \" + JSON.stringify(event));\n        }\n      })\n    }\n  }\n}"
        }
    ],
    "is_common_attrs": true
}