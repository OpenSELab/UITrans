{
    "description": "可滚动的容器组件，当子组件的布局尺寸超过父组件的尺寸时，内容可以滚动，支持单个子组件。",
    "interfaces": [
        {
            "description": "Scroll(scroller?: Scroller)",
            "params": {
                "scroller": {
                    "type": "Scroller",
                    "description": "可滚动组件的控制器。用于与可滚动组件进行绑定。"
                }
            }
        }
    ],
    "attributes": {
        "scrollable": {
            "description": "设置滚动方向。",
            "params": {
                "value": {
                    "type": "ScrollDirection",
                    "required": true,
                    "description": "滚动方向。",
                    "default": "ScrollDirection.Vertical"
                }
            }
        },
        "scrollBar": {
            "description": "设置滚动条状态。如果容器组件无法滚动，则滚动条不显示。如果容器组件的子组件大小为无穷大，则滚动条不支持拖动和伴随滚动。",
            "params": {
                "barState": {
                    "type": "BarState",
                    "required": true,
                    "description": "滚动条状态。",
                    "default": "BarState.Auto"
                }
            }
        },
        "scrollBarColor": {
            "description": "设置滚动条的颜色。",
            "params": {
                "color": {
                    "type": [
                        "Color",
                        "number",
                        "string"
                    ],
                    "required": true,
                    "description": "滚动条的颜色。",
                    "default": "'#182431'（40%不透明度）"
                }
            }
        },
        "scrollBarWidth": {
            "description": "设置滚动条的宽度，不支持百分比设置。宽度设置后，滚动条正常状态和按压状态宽度均为滚动条的宽度值。如果滚动条的宽度超过Scroll组件主轴方向的高度，则滚动条的宽度会变为默认值。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "string"
                    ],
                    "required": true,
                    "description": "滚动条的宽度。",
                    "default": "4",
                    "unit": "vp"
                }
            }
        },
        "scrollSnap": {
            "description": "设置Scroll组件的限位滚动模式。",
            "params": {
                "value": {
                    "type": "ScrollSnapOptions",
                    "required": true,
                    "description": "限位滚动选项。"
                }
            }
        },
        "edgeEffect": {
            "description": "设置边缘滑动效果。",
            "params": {
                "edgeEffect": {
                    "type": "EdgeEffect",
                    "required": true,
                    "description": "Scroll组件的边缘滑动效果，支持弹簧效果和阴影效果。",
                    "default": "EdgeEffect.None"
                },
                "options": {
                    "type": "EdgeEffectOptions",
                    "description": "组件内容大小小于组件自身时，是否开启滑动效果。设置为{ alwaysEnabled: true }会开启滑动效果，{ alwaysEnabled: false }不开启。",
                    "default": "{ alwaysEnabled: true }"
                }
            }
        },
        "enableScrollInteraction": {
            "description": "设置是否支持滚动手势，当设置为false时，无法通过手指或者鼠标滚动，但不影响控制器的滚动接口。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "是否支持滚动手势。",
                    "default": "true"
                }
            }
        },
        "nestedScroll": {
            "description": "设置向前向后两个方向上的嵌套滚动模式，实现与父组件的滚动联动。",
            "params": {
                "value": {
                    "type": "NestedScrollOptions",
                    "required": true,
                    "description": "嵌套滚动选项。",
                    "default": "{ scrollForward: NestedScrollMode.SELF_ONLY, scrollBackward: NestedScrollMode.SELF_ONLY }"
                }
            }
        },
        "friction": {
            "description": "设置摩擦系数，手动划动滚动区域时生效，只对惯性滚动过程有影响，对惯性滚动过程中的链式效果有间接影响。设置为小于等于0的值时，按默认值处理。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "Resource"
                    ],
                    "required": true,
                    "description": "摩擦系数。",
                    "default": "非可穿戴设备为0.6，可穿戴设备为0.9。从API version 11开始，非可穿戴设备默认值为0.7。从API version 12开始，非可穿戴设备默认值为0.75。"
                }
            }
        },
        "enablePaging": {
            "description": "设置是否支持划动翻页。如果同时设置了划动翻页enablePaging和限位滚动scrollSnap，则scrollSnap优先生效，enablePaging不生效。",
            "params": {
                "value": {
                    "type": "boolean",
                    "required": true,
                    "description": "是否支持划动翻页。设置为true支持滑动翻页，false不支持。",
                    "default": "false"
                }
            }
        },
        "initialOffset": {
            "description": "设置初始滚动偏移量。只在首次布局时生效，后续动态修改该属性值不生效。",
            "params": {
                "value": {
                    "type": "OffsetOptions",
                    "required": true,
                    "description": "当输入的大小为百分比时，初始滚动偏移量为Scroll组件主轴方向大小与百分比数值之积。"
                }
            }
        }
    },
    "events": {
        "onScrollFrameBegin": {
            "description": "每帧开始滚动时触发，事件参数传入即将发生的滚动量，事件处理函数中可根据应用场景计算实际需要的滚动量并作为事件处理函数的返回值返回，Scroll将按照返回值的实际滚动量进行滚动。支持offsetRemain为负值。若通过onScrollFrameBegin事件和scrollBy方法实现容器嵌套滚动，需设置子滚动节点的EdgeEffect为None。如Scroll嵌套List滚动时，List组件的edgeEffect属性需设置为EdgeEffect.None。触发该事件的条件：1、滚动组件触发滚动时触发，包括键鼠操作等其他触发滚动的输入设置。2、调用控制器接口时不触发。3、越界回弹不触发。4、拖动滚动条不触发。",
            "params": {
                "offset": {
                    "type": "number",
                    "required": true,
                    "description": "即将发生的滑动量，单位vp。"
                },
                "state": {
                    "type": "ScrollState",
                    "required": true,
                    "description": "当前滑动状态。"
                }
            },
            "returns": {
                "type": "{ offsetRemain: number }",
                "description": "实际滑动量，单位vp。"
            }
        },
        "onScroll": {
            "description": "滚动事件回调，返回滚动时水平、竖直方向偏移量，单位vp。触发该事件的条件：1、滚动组件触发滚动时触发，支持键鼠操作等其他触发滚动的输入设置。2、通过滚动控制器API接口调用。3、越界回弹。",
            "params": {
                "xOffset": {
                    "type": "number",
                    "required": true,
                    "description": "每帧滚动时水平方向的偏移量，Scroll的内容向左滚动时偏移量为正，向右滚动时偏移量为负。单位vp。"
                },
                "yOffset": {
                    "type": "number",
                    "required": true,
                    "description": "每帧滚动时竖直方向的偏移量，Scroll的内容向上滚动时偏移量为正，向下滚动时偏移量为负。单位vp。"
                }
            }
        },
        "onWillScroll": {
            "description": "滚动事件回调，Scroll滚动前触发。回调当前帧将要滚动的偏移量和当前滚动状态和滚动操作来源，其中回调的偏移量为计算得到的将要滚动的偏移量值，并非最终实际滚动偏移。可以通过该回调返回值指定Scroll将要滚动的偏移。触发该事件的条件：1、滚动组件触发滚动时触发，支持键鼠操作等其他触发滚动的输入设置。2、通过滚动控制器API接口调用。3、越界回弹。",
            "params": {
                "xOffset": {
                    "type": "number",
                    "required": true,
                    "description": "每帧滚动时水平方向的偏移量，Scroll中的内容向左滚动时偏移量为正，向右滚动时偏移量为负。单位vp。"
                },
                "yOffset": {
                    "type": "number",
                    "required": true,
                    "description": "每帧滚动时竖直方向的偏移量，Scroll中的内容向上滚动时偏移量为正，向下滚动时偏移量为负。单位vp。"
                },
                "scrollState": {
                    "type": "ScrollState",
                    "required": true,
                    "description": "当前滚动状态。"
                },
                "scrollSource": {
                    "type": "ScrollSource",
                    "required": true,
                    "description": "当前滚动操作的来源。"
                }
            },
            "returns": {
                "type": "void | OffsetResult",
                "description": "返回OffsetResult时按照开发者指定的偏移量滚动；不返回时按回调参数(xOffset，yOffset)滚动。"
            }
        },
        "onDidScroll": {
            "description": "滚动事件回调，Scroll滚动时触发。返回当前帧滚动的偏移量和当前滚动状态。触发该事件的条件：1、滚动组件触发滚动时触发，支持键鼠操作等其他触发滚动的输入设置。2、通过滚动控制器API接口调用。3、越界回弹。",
            "params": {
                "xOffset": {
                    "type": "number",
                    "required": true,
                    "description": "每帧滚动时水平方向的偏移量，Scroll中的内容向左滚动时偏移量为正，向右滚动时偏移量为负。单位vp。"
                },
                "yOffset": {
                    "type": "number",
                    "required": true,
                    "description": "每帧滚动时竖直方向的偏移量，Scroll中的内容向上滚动时偏移量为正，向下滚动时偏移量为负。单位vp。"
                },
                "scrollState": {
                    "type": "ScrollState",
                    "required": true,
                    "description": "当前滚动状态。"
                }
            }
        },
        "onScrollEdge": {
            "description": "滚动到边缘事件回调。触发该事件的条件：1、滚动组件滚动到边缘时触发，支持键鼠操作等其他触发滚动的输入设置。2、通过滚动控制器API接口调用。3、越界回弹。",
            "params": {
                "side": {
                    "type": "Edge",
                    "required": true,
                    "description": "滚动到的边缘位置。"
                }
            }
        },
        "onScrollEnd": {
            "description": "滚动停止事件回调。触发该事件的条件：1、滚动组件触发滚动后停止，支持键鼠操作等其他触发滚动的输入设置。2、通过滚动控制器API接口调用后停止，带过渡动效。"
        },
        "onScrollStart": {
            "description": "滚动开始时触发。手指拖动Scroll或拖动Scroll的滚动条触发的滚动开始时，会触发该事件。使用Scroller滚动控制器触发的带动画的滚动，动画开始时会触发该事件。触发该事件的条件：1、滚动组件开始滚动时触发，支持键鼠操作等其他触发滚动的输入设置。2、通过滚动控制器API接口调用后开始，带过渡动效。"
        },
        "onScrollStop": {
            "description": "滚动停止时触发。手拖动Scroll或拖动Scroll的滚动条触发的滚动，手离开屏幕并且滚动停止时会触发该事件。使用Scroller滚动控制器触发的带动画的滚动，动画停止时会触发该事件。触发该事件的条件：1、滚动组件触发滚动后停止，支持键鼠操作等其他触发滚动的输入设置。2、通过滚动控制器API接口调用后开始，带过渡动效。"
        }
    },
    "examples": [
        {
            "description": "该组件实现了一个可滚动的列表界面，展示了从0到15的数字。布局宽度占据整个屏幕，高度设为100%，背景颜色为黄色。组件的垂直方向上被分为多个部分，每个部分包含一个数字文本。每个数字文本以垂直布局方式排列，文本之间的间距均匀分布，且对齐方式为居中对齐。\n数字文本的样式包括背景颜色、边框宽度、边框颜色、边框圆角、字体大小、文本对齐方式等属性，支持不同的样式展示。数字文本组之间通过 Column 组件进行分隔。数字文本的功能包括展示数字和滚动效果，用户可以通过滚动屏幕查看所有数字，滚动效果支持弹性效果和滚动对齐。\n整个布局通过 Scroll 组件保证数字文本在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct Index {\n  // 创建一个 Scroller 实例，用于控制滚动行为\n  scroller: Scroller = new Scroller;\n  \n  // 定义一个数组，包含从0到15的数字\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  \n  build() {\n    // 创建一个可滚动的容器，使用 Scroller 实例控制滚动\n    Scroll(this.scroller) {\n      // 创建一个垂直布局的容器\n      Column() {\n        // 使用 ForEach 循环遍历数组中的每个数字\n        ForEach(this.arr, (item: number) => {\n          // 创建一个 Text 组件，显示当前数字\n          Text(item.toString())\n            .width('90%') // 设置文本宽度为父容器的90%\n            .height(200) // 设置文本高度为200vp\n            .backgroundColor(0xFFFFFF) // 设置文本背景颜色为白色\n            .borderWidth(1) // 设置文本边框宽度为1vp\n            .borderColor(Color.Black) // 设置文本边框颜色为黑色\n            .borderRadius(15) // 设置文本边框圆角为15vp\n            .fontSize(16) // 设置文本字体大小为16vp\n            .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n        }, (item: string) => item) // 使用数字作为键值\n      }\n      .width('100%') // 设置 Column 容器的宽度为父容器的100%\n      .backgroundColor(0xDCDCDC) // 设置 Column 容器的背景颜色为浅灰色\n    }\n    .backgroundColor(Color.Yellow) // 设置 Scroll 容器的背景颜色为黄色\n    .height('100%') // 设置 Scroll 容器的高度为父容器的100%\n    .edgeEffect(EdgeEffect.Spring) // 设置滚动边缘效果为弹性效果\n    .scrollSnap({\n      snapAlign: ScrollSnapAlign.START, // 设置滚动对齐方式为开始对齐\n      snapPagination: 400, // 设置滚动分页大小为400vp\n      enableSnapToStart: true, // 启用滚动到开始位置的对齐\n      enableSnapToEnd: true // 启用滚动到结束位置的对齐\n    })\n  }\n}"
        },
        {
            "description": "该组件通过Column布局实现了一个包含两个按钮和一个列表的界面。布局宽度占据整个屏幕，高度设为100%，背景颜色为0xDCDCDC，顶部内边距为5vp。\n\n组件的垂直方向上被分为三个部分：\n1. 第一个部分包含一个按钮，按钮文本为'Fling-1000'，高度为5%，点击该按钮会触发列表的fling滚动效果，滚动距离为-1000。\n2. 第二个部分包含另一个按钮，按钮文本为'Fling3000'，高度为5%，点击该按钮会触发列表的fling滚动效果，滚动距离为3000。\n3. 第三个部分是一个列表，列表项通过ForEach组件动态生成，每个列表项包含一个文本组件，文本内容为数组中的数字。列表的布局方向为垂直，不显示滚动条，摩擦系数为0.9，列表项之间有20vp的间距，列表项的背景颜色为白色，边框圆角为10vp，文本居中对齐。列表的边缘效果为弹性效果，宽度为90%。\n\n按钮的功能包括点击事件，用户可以通过点击按钮触发列表的滚动操作。列表的功能包括展示数据项，支持垂直滚动，并且具有弹性边缘效果。",
            "code": "@Entry\n@Component\nstruct ListExample {\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] // 定义一个包含数字的数组\n  scrollerForList: Scroller = new Scroller() // 创建一个Scroller对象，用于控制列表的滚动\n\n  build() {\n    Column() {\n      Button('Fling-1000') // 创建一个按钮，文本为'Fling-1000'\n        .height('5%') // 设置按钮高度为5%\n        .onClick(() => { // 设置按钮点击事件\n          this.scrollerForList.fling(-1000) // 点击按钮时，列表向上滚动1000单位\n        })\n\n      Button('Fling3000') // 创建另一个按钮，文本为'Fling3000'\n        .height('5%') // 设置按钮高度为5%\n        .onClick(() => { // 设置按钮点击事件\n          this.scrollerForList.fling(3000) // 点击按钮时，列表向下滚动3000单位\n        })\n\n      List({ space: 20, initialIndex: 0, scroller: this.scrollerForList }) { // 创建一个列表，设置间距为20vp，初始索引为0，使用scrollerForList控制滚动\n        ForEach(this.arr, (item: number) => { // 遍历数组中的每个元素\n          ListItem() { // 创建一个列表项\n            Text('' + item) // 创建一个文本组件，显示数组中的数字\n              .width('100%') // 设置文本宽度为100%\n              .height(100) // 设置文本高度为100vp\n              .fontSize(16) // 设置文本字体大小为16\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n              .borderRadius(10) // 设置文本背景的边框圆角为10vp\n              .backgroundColor(0xFFFFFF) // 设置文本背景颜色为白色\n          }\n        }, (item: string) => item) // 设置列表项的唯一标识符\n      }\n      .listDirection(Axis.Vertical) // 设置列表的布局方向为垂直\n      .scrollBar(BarState.Off) // 设置列表不显示滚动条\n      .friction(0.9) // 设置列表的摩擦系数为0.9\n      .divider({ strokeWidth: 2, color: 0xFFFFFF, startMargin: 20, endMargin: 20 }) // 设置列表项之间的分隔线，宽度为2vp，颜色为白色，起始和结束边距为20vp\n      .edgeEffect(EdgeEffect.Spring) // 设置列表的边缘效果为弹性效果\n      .width('90%') // 设置列表宽度为90%\n    }\n    .width('100%') // 设置Column的宽度为100%\n    .height('100%') // 设置Column的高度为100%\n    .backgroundColor(0xDCDCDC) // 设置Column的背景颜色为0xDCDCDC\n    .padding({ top: 5 }) // 设置Column的顶部内边距为5vp\n  }\n}"
        },
        {
            "description": "该组件实现了一个带有粘性嵌套滚动的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上包含一个滚动区域，滚动区域内包含一个文本区域和一个选项卡组件。文本区域显示“Scroll Area”，背景颜色为蓝色，宽度占据整个屏幕，高度为 40%，文本居中对齐。\n\n选项卡组件包含两个标签页，每个标签页的内容通过 TabContent 组件定义。第一个标签页包含一个列表组件，列表项通过 ForEach 循环生成，每个列表项显示一个数字项，背景颜色为白色，高度为 72vp，宽度占据整个屏幕，边框圆角为 12vp。列表项的排列方式为垂直排列，列表项之间的间距为 10vp。列表组件支持嵌套滚动，滚动方向为水平方向，滚动效果为弹性滚动。\n\n第二个标签页为空，仅显示标签名“Tab2”。选项卡组件的标签栏位于内容区域的上方，标签页的排列方式为水平排列，高度占据整个屏幕。\n\n整个滚动区域的背景颜色为浅灰色，滚动效果为弹性滚动，滚动摩擦系数为 0.6，滚动条状态为关闭。",
            "code": "@Entry\n@Component\nstruct StickyNestedScroll {\n  @State arr: number[] = [] // 定义一个状态变量 arr，用于存储列表项的数据\n\n  @Styles\n  listCard() {\n    .backgroundColor(Color.White) // 设置背景颜色为白色\n    .height(72) // 设置高度为 72vp\n    .width(\"100%\") // 设置宽度占据整个屏幕\n    .borderRadius(12) // 设置边框圆角为 12vp\n  }\n\n  build() {\n    Scroll() { // 创建一个滚动区域\n      Column() { // 创建一个垂直布局的容器\n        Text(\"Scroll Area\") // 创建一个文本组件，显示“Scroll Area”\n          .width(\"100%\") // 设置宽度占据整个屏幕\n          .height(\"40%\") // 设置高度为 40%\n          .backgroundColor('#0080DC') // 设置背景颜色为蓝色\n          .textAlign(TextAlign.Center) // 设置文本居中对齐\n        Tabs({ barPosition: BarPosition.Start }) { // 创建一个选项卡组件，标签栏位于内容区域的上方\n          TabContent() { // 创建第一个标签页的内容区域\n            List({ space: 10 }) { // 创建一个列表组件，列表项之间的间距为 10vp\n              ForEach(this.arr, (item: number) => { // 通过 ForEach 循环生成列表项\n                ListItem() { // 创建一个列表项\n                  Text(\"item\" + item) // 创建一个文本组件，显示列表项的内容\n                    .fontSize(16) // 设置字体大小为 16\n                }.listCard() // 应用 listCard 样式\n              }, (item: string) => item) // 定义列表项的唯一标识符\n            }.width(\"100%\") // 设置列表组件的宽度占据整个屏幕\n            .edgeEffect(EdgeEffect.Spring) // 设置列表组件的滚动效果为弹性滚动\n            .nestedScroll({ // 设置列表组件的嵌套滚动模式\n              scrollForward: NestedScrollMode.PARENT_FIRST, // 向前滚动时，优先滚动父容器\n              scrollBackward: NestedScrollMode.SELF_FIRST // 向后滚动时，优先滚动自身\n            })\n          }.tabBar(\"Tab1\") // 设置第一个标签页的标签名为“Tab1”\n\n          TabContent() { // 创建第二个标签页的内容区域\n          }.tabBar(\"Tab2\") // 设置第二个标签页的标签名为“Tab2”\n        }\n        .vertical(false) // 设置选项卡组件的排列方式为水平排列\n        .height(\"100%\") // 设置选项卡组件的高度占据整个屏幕\n      }.width(\"100%\") // 设置垂直布局容器的宽度占据整个屏幕\n    }\n    .edgeEffect(EdgeEffect.Spring) // 设置滚动区域的滚动效果为弹性滚动\n    .friction(0.6) // 设置滚动区域的滚动摩擦系数为 0.6\n    .backgroundColor('#DCDCDC') // 设置滚动区域的背景颜色为浅灰色\n    .scrollBar(BarState.Off) // 设置滚动区域的滚动条状态为关闭\n    .width('100%') // 设置滚动区域的宽度占据整个屏幕\n    .height('100%') // 设置滚动区域的高度占据整个屏幕\n  }\n\n  aboutToAppear() { // 组件即将显示时执行的回调函数\n    for (let i = 0; i < 30; i++) { // 循环生成 30 个列表项的数据\n      this.arr.push(i) // 将生成的数据添加到 arr 数组中\n    }\n  }\n}"
        },
        {
            "description": "该组件实现了一个垂直滚动的列表，并通过按钮控制列表滚动到最底部。布局宽度占据整个屏幕，高度设为 100%，背景颜色为浅灰色（0xDCDCDC）。组件的垂直方向上包含一个 Scroll 组件和一个 Button 组件。\n\nScroll 组件内部包含一个 Column 组件，用于展示一个数字列表。每个数字项以 Text 组件的形式展示，宽度为 90%，高度为 150vp，背景颜色为白色（0xFFFFFF），边框圆角为 15vp，字体大小为 16，文本居中对齐，顶部外边距为 10vp。数字列表通过 ForEach 组件动态生成，根据 arr 数组的内容进行渲染。\n\nScroll 组件的滚动方向为垂直（ScrollDirection.Vertical），滚动条状态为始终显示（BarState.On），滚动条颜色为灰色（Color.Gray），滚动条宽度为 10vp，摩擦系数为 0.6，边缘效果为无（EdgeEffect.None）。Scroll 组件还绑定了多个事件回调函数，用于在滚动开始、滚动到边缘、滚动停止时输出日志信息。\n\nButton 组件位于 Scroll 组件的上方，高度为 5%，文本内容为 \"scroll to bottom 700\"，点击事件触发时，Scroll 组件将以 700vp/s 的速度滚动到最底部。Button 组件的顶部外边距为 100vp，左侧外边距为 20vp。\n\n整个布局通过 Stack 组件实现，确保 Button 和 Scroll 组件在垂直方向上依次排列，且 Scroll 组件占据剩余的全部空间。",
            "code": "@Entry\n@Component\nstruct ScrollExample {\n  scroller: Scroller = new Scroller() // 创建一个 Scroller 实例，用于控制 Scroll 组件的滚动行为\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] // 定义一个数字数组，用于生成滚动列表的内容\n\n  build() {\n    Stack({ alignContent: Alignment.TopStart }) { // 使用 Stack 布局，对齐方式为左上角对齐\n      Scroll(this.scroller) { // 创建一个 Scroll 组件，并绑定 Scroller 实例\n        Column() { // 使用 Column 布局，垂直排列子组件\n          ForEach(this.arr, (item: number) => { // 遍历 arr 数组，生成 Text 组件\n            Text(item.toString()) // 将数字转换为字符串并显示\n              .width('90%') // 设置 Text 组件的宽度为父容器的 90%\n              .height(150) // 设置 Text 组件的高度为 150vp\n              .backgroundColor(0xFFFFFF) // 设置背景颜色为白色\n              .borderRadius(15) // 设置边框圆角为 15vp\n              .fontSize(16) // 设置字体大小为 16\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n              .margin({ top: 10 }) // 设置顶部外边距为 10vp\n          }, (item: string) => item) // 使用数字的字符串形式作为键值\n        }.width('100%') // 设置 Column 组件的宽度为父容器的 100%\n      }\n      .scrollable(ScrollDirection.Vertical) // 设置 Scroll 组件的滚动方向为垂直\n      .scrollBar(BarState.On) // 设置滚动条始终显示\n      .scrollBarColor(Color.Gray) // 设置滚动条颜色为灰色\n      .scrollBarWidth(10) // 设置滚动条宽度为 10vp\n      .friction(0.6) // 设置滚动摩擦系数为 0.6\n      .edgeEffect(EdgeEffect.None) // 设置边缘效果为无\n      .onWillScroll((xOffset: number, yOffset: number, scrollState: ScrollState) => {\n        console.info(xOffset + ' ' + yOffset) // 在滚动开始时输出当前的 x 和 y 偏移量\n      })\n      .onScrollEdge((side: Edge) => {\n        console.info('To the edge') // 在滚动到边缘时输出日志信息\n      })\n      .onScrollStop(() => {\n        console.info('Scroll Stop') // 在滚动停止时输出日志信息\n      })\n\n      Button('scroll to bottom 700') // 创建一个 Button 组件，文本内容为 \"scroll to bottom 700\"\n        .height('5%') // 设置 Button 组件的高度为父容器的 5%\n        .onClick(() => { \n          this.scroller.scrollEdge(Edge.Bottom, { velocity: 700 }) // 点击按钮时，Scroll 组件将以 700vp/s 的速度滚动到最底部\n        })\n        .margin({ top: 100, left: 20 }) // 设置 Button 组件的顶部外边距为 100vp，左侧外边距为 20vp\n    }.width('100%').height('100%').backgroundColor(0xDCDCDC) // 设置 Stack 组件的宽度、高度为父容器的 100%，背景颜色为浅灰色\n  }\n}"
        },
        {
            "description": "该组件通过 Flex 布局实现了一个嵌套滚动区域。布局宽度占据整个屏幕，高度设为 100%，内边距为 20vp。组件的垂直方向上被分为三个部分：顶部和底部的固定高度文本区域，以及中间的可滚动列表区域。\n顶部和底部的文本区域高度为 40%，背景颜色为半透明的蓝色（0X330000FF），文本内容居中对齐，字体大小为 16vp。\n中间的列表区域高度为 50%，包含一个可滚动的列表组件（List），列表项之间有 20vp 的间距。列表项的高度为 100vp，宽度为 100%，背景颜色为白色，边框圆角为 15vp，字体大小为 16vp，文本内容居中对齐。\n列表组件的滚动效果通过 Scroller 对象控制，支持在滚动到列表的开始和结束位置时触发相应的事件处理函数。列表的滚动行为可以通过摩擦系数（friction）进行调整，当前设置为 0.6。\n整个布局通过 Flex 布局保证各部分在垂直方向上有序排列，确保界面整洁美观。",
            "code": "import { LengthMetrics } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct NestedScroll {\n  @State listPosition: number = 0; // 用于记录列表的当前位置状态，0 表示列表在顶部，1 表示列表在中间，2 表示列表在底部\n  private arr: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] // 列表数据源\n  private scrollerForScroll: Scroller = new Scroller() // 用于控制外部滚动区域的 Scroller 对象\n  private scrollerForList: Scroller = new Scroller() // 用于控制列表滚动区域的 Scroller 对象\n\n  build() {\n    Flex() {\n      Scroll(this.scrollerForScroll) { // 外部滚动区域，使用 scrollerForScroll 控制滚动行为\n        Column() {\n          Text(\"Scroll Area\")\n            .width(\"100%\") // 文本区域的宽度为 100%\n            .height(\"40%\") // 文本区域的高度为 40%\n            .backgroundColor(0X330000FF) // 文本区域的背景颜色为半透明的蓝色\n            .fontSize(16) // 文本字体大小为 16vp\n            .textAlign(TextAlign.Center) // 文本内容居中对齐\n            .onClick(() => {\n              this.scrollerForList.scrollToIndex(5, false, ScrollAlign.START, { extraOffset: LengthMetrics.vp(5) }) // 点击文本区域时，列表滚动到第 5 个列表项，并额外偏移 5vp\n            })\n\n          List({ space: 20, scroller: this.scrollerForList }) { // 列表组件，使用 scrollerForList 控制滚动行为，列表项之间的间距为 20vp\n            ForEach(this.arr, (item: number) => {\n              ListItem() {\n                Text(\"ListItem\" + item)\n                  .width(\"100%\") // 列表项的宽度为 100%\n                  .height(\"100%\") // 列表项的高度为 100%\n                  .borderRadius(15) // 列表项的边框圆角为 15vp\n                  .fontSize(16) // 列表项的文本字体大小为 16vp\n                  .textAlign(TextAlign.Center) // 列表项的文本内容居中对齐\n                  .backgroundColor(Color.White) // 列表项的背景颜色为白色\n              }.width(\"100%\").height(100) // 列表项的宽度为 100%，高度为 100vp\n            }, (item: string) => item)\n          }\n          .width(\"100%\") // 列表组件的宽度为 100%\n          .height(\"50%\") // 列表组件的高度为 50%\n          .edgeEffect(EdgeEffect.None) // 列表组件的边缘效果为无\n          .friction(0.6) // 列表组件的摩擦系数为 0.6\n          .onReachStart(() => {\n            this.listPosition = 0 // 当列表滚动到顶部时，设置列表位置状态为 0\n          })\n          .onReachEnd(() => {\n            this.listPosition = 2 // 当列表滚动到底部时，设置列表位置状态为 2\n          })\n          .onScrollFrameBegin((offset: number) => {\n            if ((this.listPosition == 0 && offset <= 0) || (this.listPosition == 2 && offset >= 0)) {\n              this.scrollerForScroll.scrollBy(0, offset) // 当列表在顶部或底部时，外部滚动区域跟随列表滚动\n              return { offsetRemain: 0 } // 返回剩余偏移量为 0\n            }\n            this.listPosition = 1 // 当列表在中间时，设置列表位置状态为 1\n            return { offsetRemain: offset }; // 返回剩余偏移量\n          })\n\n          Text(\"Scroll Area\")\n            .width(\"100%\") // 文本区域的宽度为 100%\n            .height(\"40%\") // 文本区域的高度为 40%\n            .backgroundColor(0X330000FF) // 文本区域的背景颜色为半透明的蓝色\n            .fontSize(16) // 文本字体大小为 16vp\n            .textAlign(TextAlign.Center) // 文本内容居中对齐\n        }\n      }\n      .width(\"100%\").height(\"100%\") // 外部滚动区域的宽度为 100%，高度为 100%\n    }.width('100%').height('100%').backgroundColor(0xDCDCDC).padding(20) // 整个布局的宽度为 100%，高度为 100%，背景颜色为浅灰色，内边距为 20vp\n  }\n}"
        },
        {
            "description": "该示例展示了一个垂直滚动的列表，列表项由数字组成。布局宽度占据整个屏幕，高度设为 100%，背景颜色为浅灰色（0xDCDCDC）。组件的垂直方向上包含一个滚动视图（Scroll），滚动视图内部是一个列布局（Column），列布局中包含多个文本组件（Text），每个文本组件显示一个数字。文本组件的样式包括宽度为 90%、高度为 150vp、背景颜色为白色（0xFFFFFF）、边框圆角为 15vp、字体大小为 16vp、文本居中对齐，并且每个文本组件之间有 10vp 的顶部边距。\n\n滚动视图的滚动方向为垂直方向，滚动条始终显示，颜色为灰色，宽度为 10vp，滚动摩擦系数为 0.6，边缘效果为无。滚动视图还绑定了多个滚动事件，包括滚动开始时的事件（onWillScroll）、滚动到边缘时的事件（onScrollEdge）和滚动停止时的事件（onScrollStop）。\n\n此外，布局中还包含多个按钮，用于控制滚动视图的滚动行为。按钮的样式包括高度为 5%，点击事件分别用于滚动 150vp、滚动 100vp、滚动 100vp（带有动画效果）、滚动到顶部和滚动到下一页。按钮的排列方式为垂直排列，每个按钮之间有不同的顶部边距。",
            "code": "import { curves } from '@kit.ArkUI' // 导入曲线动画库\n\n@Entry\n@Component\nstruct ScrollExample {\n  scroller: Scroller = new Scroller() // 创建一个 Scroller 实例，用于控制滚动视图的滚动行为\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] // 定义一个数字数组，用于生成滚动视图中的文本组件\n\n  build() {\n    Stack({ alignContent: Alignment.TopStart }) { // 使用 Stack 布局，对齐方式为顶部开始\n      Scroll(this.scroller) { // 创建一个滚动视图，使用 scroller 实例控制滚动行为\n        Column() { // 创建一个列布局，用于垂直排列文本组件\n          ForEach(this.arr, (item: number) => { // 遍历数字数组，生成文本组件\n            Text(item.toString()) // 创建文本组件，显示当前数字\n              .width('90%') // 设置文本组件的宽度为 90%\n              .height(150) // 设置文本组件的高度为 150vp\n              .backgroundColor(0xFFFFFF) // 设置文本组件的背景颜色为白色\n              .borderRadius(15) // 设置文本组件的边框圆角为 15vp\n              .fontSize(16) // 设置文本组件的字体大小为 16vp\n              .textAlign(TextAlign.Center) // 设置文本组件的文本居中对齐\n              .margin({ top: 10 }) // 设置文本组件的顶部边距为 10vp\n          }, (item: string) => item) // 使用数字作为键值\n        }.width('100%') // 设置列布局的宽度为 100%\n      }\n      .scrollable(ScrollDirection.Vertical) // 设置滚动视图的滚动方向为垂直方向\n      .scrollBar(BarState.On) // 设置滚动条始终显示\n      .scrollBarColor(Color.Gray) // 设置滚动条的颜色为灰色\n      .scrollBarWidth(10) // 设置滚动条的宽度为 10vp\n      .friction(0.6) // 设置滚动摩擦系数为 0.6\n      .edgeEffect(EdgeEffect.None) // 设置边缘效果为无\n      .onWillScroll((xOffset: number, yOffset: number, scrollState: ScrollState) => { // 绑定滚动开始时的事件\n        console.info(xOffset + ' ' + yOffset) // 输出当前的 x 和 y 偏移量\n      })\n      .onScrollEdge((side: Edge) => { // 绑定滚动到边缘时的事件\n        console.info('To the edge') // 输出滚动到边缘的提示信息\n      })\n      .onScrollStop(() => { // 绑定滚动停止时的事件\n        console.info('Scroll Stop') // 输出滚动停止的提示信息\n      })\n\n      Button('scroll 150') // 创建一个按钮，文本为 \"scroll 150\"\n        .height('5%') // 设置按钮的高度为 5%\n        .onClick(() => { // 绑定点击事件\n          this.scroller.scrollBy(0, 150) // 滚动 150vp\n        })\n        .margin({ top: 10, left: 20 }) // 设置按钮的顶部和左边距\n      Button('scroll 100') // 创建一个按钮，文本为 \"scroll 100\"\n        .height('5%') // 设置按钮的高度为 5%\n        .onClick(() => { // 绑定点击事件\n          const yOffset: number = this.scroller.currentOffset().yOffset; // 获取当前的 y 偏移量\n          this.scroller.scrollTo({ xOffset: 0, yOffset: yOffset + 100 }) // 滚动到当前 y 偏移量 + 100vp\n        })\n        .margin({ top: 60, left: 20 }) // 设置按钮的顶部和左边距\n      Button('scroll 100') // 创建一个按钮，文本为 \"scroll 100\"\n        .height('5%') // 设置按钮的高度为 5%\n        .onClick(() => { // 绑定点击事件\n          let curve = curves.interpolatingSpring(10, 1, 228, 30) // 创建一个弹簧动画曲线\n          const yOffset: number = this.scroller.currentOffset().yOffset; // 获取当前的 y 偏移量\n          this.scroller.scrollTo({ xOffset: 0, yOffset: yOffset + 100, animation: { duration: 1000, curve: curve } }) // 滚动到当前 y 偏移量 + 100vp，并应用动画效果\n        })\n        .margin({ top: 110, left: 20 }) // 设置按钮的顶部和左边距\n      Button('back top') // 创建一个按钮，文本为 \"back top\"\n        .height('5%') // 设置按钮的高度为 5%\n        .onClick(() => { // 绑定点击事件\n          this.scroller.scrollEdge(Edge.Top) // 滚动到顶部\n        })\n        .margin({ top: 160, left: 20 }) // 设置按钮的顶部和左边距\n      Button('next page') // 创建一个按钮，文本为 \"next page\"\n        .height('5%') // 设置按钮的高度为 5%\n        .onClick(() => { // 绑定点击事件\n          this.scroller.scrollPage({ next: true }) // 滚动到下一页\n        })\n        .margin({ top: 210, left: 20 }) // 设置按钮的顶部和左边距\n    }.width('100%').height('100%').backgroundColor(0xDCDCDC) // 设置 Stack 布局的宽度、高度和背景颜色\n  }\n}"
        }
    ]
}