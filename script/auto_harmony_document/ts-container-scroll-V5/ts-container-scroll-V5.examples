/*\n实现一个可滚动的列表组件，支持上拉加载更多功能。列表项为数字，每个数字显示在一个带有边框和背景色的矩形框中。滚动容器具有黄色背景，并且支持弹性边缘效果和滚动对齐功能。\n*/\n\n@Entry // 标记该组件为应用的入口组件\n@Component // 标记该结构体为一个自定义组件\nstruct Index {\n  scroller: Scroller = new Scroller; // 创建一个Scroller实例，用于控制滚动行为\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]; // 定义一个数字数组，作为列表的数据源\n\n  build() {\n    Scroll(this.scroller) { // 创建一个可滚动的容器，使用scroller实例来控制滚动\n      Column() { // 创建一个垂直布局的容器\n        ForEach(this.arr, (item: number) => { // 遍历数组中的每个元素，生成对应的UI组件\n          Text(item.toString()) // 将数字转换为字符串并显示在文本组件中\n            .width('90%') // 设置文本组件的宽度为父容器的90%\n            .height(200) // 设置文本组件的高度为200像素\n            .backgroundColor(0xFFFFFF) // 设置文本组件的背景色为白色\n            .borderWidth(1) // 设置文本组件的边框宽度为1像素\n            .borderColor(Color.Black) // 设置文本组件的边框颜色为黑色\n            .borderRadius(15) // 设置文本组件的边框圆角半径为15像素\n            .fontSize(16) // 设置文本组件的字体大小为16像素\n            .textAlign(TextAlign.Center) // 设置文本组件的文本对齐方式为居中\n        }, (item: string) => item) // 定义ForEach的键值生成函数，确保每个列表项的唯一性\n      }.width('100%').backgroundColor(0xDCDCDC) // 设置Column容器的宽度为100%，背景色为浅灰色\n    }\n    .backgroundColor(Color.Yellow) // 设置滚动容器的背景色为黄色\n    .height('100%') // 设置滚动容器的高度为父容器的100%\n    .edgeEffect(EdgeEffect.Spring) // 设置滚动容器的边缘效果为弹性效果\n    .scrollSnap({ // 设置滚动容器的滚动对齐属性\n      snapAlign: ScrollSnapAlign.START, // 设置滚动对齐方式为开始对齐\n      snapPagination: 400, // 设置滚动对齐的页面大小为400像素\n      enableSnapToStart: true, // 启用滚动到开始位置的对齐功能\n      enableSnapToEnd: true // 启用滚动到结束位置的对齐功能\n    })\n  }\n}


/*\n实现一个可滚动的列表组件，支持通过按钮控制以700vp/s的速度滚动到列表底部。列表项为数字，每个数字项显示在一个矩形框中，支持垂直滚动，并带有滚动条。\n*/\n\n@Entry\n@Component\nstruct ScrollExample {\n  // 创建一个Scroller实例，用于控制滚动行为\n  scroller: Scroller = new Scroller()\n  // 定义一个数字数组，用于生成列表项\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n  build() {\n    Stack({ alignContent: Alignment.TopStart }) {\n      // 创建一个垂直滚动的Scroll组件，使用scroller实例进行控制\n      Scroll(this.scroller) {\n        Column() {\n          // 使用ForEach循环生成列表项，每个列表项为一个Text组件\n          ForEach(this.arr, (item: number) => {\n            Text(item.toString())\n              .width('90%') // 设置文本宽度为父容器的90%\n              .height(150) // 设置文本高度为150vp\n              .backgroundColor(0xFFFFFF) // 设置背景颜色为白色\n              .borderRadius(15) // 设置圆角边框\n              .fontSize(16) // 设置字体大小为16\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n              .margin({ top: 10 }) // 设置顶部外边距为10vp\n          }, (item: string) => item) // 使用item作为唯一标识符\n        }.width('100%') // 设置Column的宽度为100%\n      }\n      .scrollable(ScrollDirection.Vertical) // 设置Scroll组件为垂直滚动\n      .scrollBar(BarState.On) // 开启滚动条\n      .scrollBarColor(Color.Gray) // 设置滚动条颜色为灰色\n      .scrollBarWidth(10) // 设置滚动条宽度为10vp\n      .friction(0.6) // 设置滚动摩擦系数为0.6\n      .edgeEffect(EdgeEffect.None) // 禁用边缘效果\n      .onWillScroll((xOffset: number, yOffset: number, scrollState: ScrollState) => {\n        console.info(xOffset + ' ' + yOffset) // 滚动时输出当前的x和y偏移量\n      })\n      .onScrollEdge((side: Edge) => {\n        console.info('To the edge') // 滚动到边缘时输出提示信息\n      })\n      .onScrollStop(() => {\n        console.info('Scroll Stop') // 滚动停止时输出提示信息\n      })\n\n      // 创建一个按钮，点击后以700vp/s的速度滚动到列表底部\n      Button('scroll to bottom 700')\n        .height('5%') // 设置按钮高度为父容器的5%\n        .onClick(() => { \n          this.scroller.scrollEdge(Edge.Bottom, { velocity: 700 }) // 调用scroller的scrollEdge方法，滚动到列表底部\n        })\n        .margin({ top: 100, left: 20 }) // 设置按钮的顶部和左侧外边距\n    }.width('100%').height('100%').backgroundColor(0xDCDCDC) // 设置Stack的宽度、高度和背景颜色\n  }\n}


/*\n实现一个可滚动的列表组件，支持通过按钮控制列表的快速滚动（fling），列表项为数字，布局为垂直排列，无滚动条，具有弹性边缘效果。\n*/\n\n@Entry // 标记该组件为入口组件，即应用启动时首先加载的组件\n@Component // 标记该结构体为一个自定义组件\nstruct ListExample {\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] // 定义一个私有数组，用于存储列表项的数据\n  scrollerForList: Scroller = new Scroller() // 创建一个Scroller实例，用于控制列表的滚动行为\n\n  build() {\n    Column() { // 创建一个垂直布局的容器\n      Button('Fling-1000') // 创建一个按钮，文本为“Fling-1000”\n        .height('5%') // 设置按钮的高度为父容器高度的5%\n        .onClick(() => { // 设置按钮的点击事件\n          this.scrollerForList.fling(-1000) // 当按钮被点击时，列表向上快速滚动1000像素\n        })\n      Button('Fling3000') // 创建另一个按钮，文本为“Fling3000”\n        .height('5%') // 设置按钮的高度为父容器高度的5%\n        .onClick(() => { // 设置按钮的点击事件\n          this.scrollerForList.fling(3000) // 当按钮被点击时，列表向下快速滚动3000像素\n        })\n      List({ space: 20, initialIndex: 0, scroller: this.scrollerForList }) { // 创建一个列表组件，设置项之间的间距为20，初始索引为0，并绑定Scroller实例\n        ForEach(this.arr, (item: number) => { // 遍历数组中的每一项\n          ListItem() { // 创建一个列表项\n            Text('' + item) // 创建一个文本组件，显示当前项的值\n              .width('100%').height(100).fontSize(16) // 设置文本组件的宽度为100%，高度为100，字体大小为16\n              .textAlign(TextAlign.Center).borderRadius(10).backgroundColor(0xFFFFFF) // 设置文本居中对齐，圆角半径为10，背景颜色为白色\n          }\n        }, (item: string) => item) // 设置列表项的唯一标识符为当前项的值\n      }\n      .listDirection(Axis.Vertical) // 设置列表的排列方向为垂直方向\n      .scrollBar(BarState.Off) // 关闭滚动条\n      .friction(0.9) // 设置列表的摩擦系数为0.9，影响滚动时的减速效果\n      .divider({ strokeWidth: 2, color: 0xFFFFFF, startMargin: 20, endMargin: 20 }) // 设置列表项之间的分隔线，宽度为2，颜色为白色，起始和结束边距为20\n      .edgeEffect(EdgeEffect.Spring) // 设置列表的边缘效果为弹性效果\n      .width('90%') // 设置列表的宽度为父容器宽度的90%\n    }\n    .width('100%') // 设置容器的宽度为父容器的100%\n    .height('100%') // 设置容器的高度为父容器的100%\n    .backgroundColor(0xDCDCDC) // 设置容器的背景颜色为浅灰色\n    .padding({ top: 5 }) // 设置容器的顶部内边距为5\n  }\n}


/*\n实现一个带有粘性嵌套滚动的组件。组件包含一个可滚动的区域，其中包含一个Tabs组件，每个TabContent中包含一个列表。列表中的每个项目都应用了自定义的卡片样式。组件在初始化时会生成30个列表项。\n*/\n\n@Entry\n@Component\nstruct StickyNestedScroll {\n  @State arr: number[] = [] // 定义一个状态变量arr，用于存储列表项的数据\n\n  @Styles\n  listCard() {\n    .backgroundColor(Color.White) // 设置背景颜色为白色\n    .height(72) // 设置高度为72\n    .width("100%") // 设置宽度为100%\n    .borderRadius(12) // 设置边框圆角为12\n  }\n\n  build() {\n    Scroll() { // 创建一个可滚动的容器\n      Column() { // 创建一个垂直布局的容器\n        Text("Scroll Area") // 创建一个文本组件，显示"Scroll Area"\n          .width("100%") // 设置文本组件的宽度为100%\n          .height("40%") // 设置文本组件的高度为40%\n          .backgroundColor('#0080DC') // 设置背景颜色为蓝色\n          .textAlign(TextAlign.Center) // 设置文本居中对齐\n        Tabs({ barPosition: BarPosition.Start }) { // 创建一个Tabs组件，标签栏位于顶部\n          TabContent() { // 创建一个TabContent组件\n            List({ space: 10 }) { // 创建一个列表组件，项目之间的间距为10\n              ForEach(this.arr, (item: number) => { // 遍历arr数组，生成列表项\n                ListItem() { // 创建一个列表项\n                  Text("item" + item) // 创建一个文本组件，显示"item" + 当前数组项的值\n                    .fontSize(16) // 设置字体大小为16\n                }.listCard() // 应用自定义的卡片样式\n              }, (item: string) => item) // 指定key生成函数\n            }.width("100%") // 设置列表的宽度为100%\n            .edgeEffect(EdgeEffect.Spring) // 设置边缘效果为弹性回弹\n            .nestedScroll({ // 设置嵌套滚动模式\n              scrollForward: NestedScrollMode.PARENT_FIRST, // 向前滚动时，优先滚动父容器\n              scrollBackward: NestedScrollMode.SELF_FIRST // 向后滚动时，优先滚动当前容器\n            })\n          }.tabBar("Tab1") // 设置Tab的标签为"Tab1"\n\n          TabContent() { // 创建另一个TabContent组件\n          }.tabBar("Tab2") // 设置Tab的标签为"Tab2"\n        }\n        .vertical(false) // 设置Tabs为水平布局\n        .height("100%") // 设置Tabs的高度为100%\n      }.width("100%") // 设置Column的宽度为100%\n    }\n    .edgeEffect(EdgeEffect.Spring) // 设置Scroll的边缘效果为弹性回弹\n    .friction(0.6) // 设置滚动摩擦系数为0.6\n    .backgroundColor('#DCDCDC') // 设置背景颜色为灰色\n    .scrollBar(BarState.Off) // 关闭滚动条\n    .width('100%') // 设置Scroll的宽度为100%\n    .height('100%') // 设置Scroll的高度为100%\n  }\n\n  aboutToAppear() { // 组件即将显示时的生命周期方法\n    for (let i = 0; i < 30; i++) { // 循环生成30个列表项\n      this.arr.push(i) // 将生成的列表项添加到arr数组中\n    }\n  }\n}


/*\n实现一个嵌套滚动组件，包含一个可滚动的区域和一个列表。点击滚动区域的文本时，列表会滚动到指定位置。列表滚动时，会根据滚动位置触发不同的回调函数，并影响外部滚动区域的滚动行为。\n*/\n\n// 导入长度度量工具类，用于计算滚动偏移量\nimport { LengthMetrics } from '@kit.ArkUI';\n\n// 使用@Entry和@Component装饰器定义一个名为NestedScroll的组件\n@Entry\n@Component\nstruct NestedScroll {\n  // 定义一个状态变量listPosition，用于记录列表的滚动位置\n  @State listPosition: number = 0; \n\n  // 定义一个私有数组arr，用于存储列表的数据\n  private arr: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n  // 定义两个Scroller对象，分别用于控制外部滚动区域和列表的滚动\n  private scrollerForScroll: Scroller = new Scroller();\n  private scrollerForList: Scroller = new Scroller();\n\n  // 构建组件的UI结构\n  build() {\n    Flex() {\n      // 创建一个可滚动的区域，使用scrollerForScroll控制滚动\n      Scroll(this.scrollerForScroll) {\n        Column() {\n          // 创建一个文本组件，点击时触发列表滚动到指定位置\n          Text("Scroll Area")\n            .width("100%")\n            .height("40%")\n            .backgroundColor(0X330000FF)\n            .fontSize(16)\n            .textAlign(TextAlign.Center)\n            .onClick(() => {\n              // 点击文本时，列表滚动到第5个元素，并带有额外的偏移量\n              this.scrollerForList.scrollToIndex(5, false, ScrollAlign.START, { extraOffset: LengthMetrics.vp(5) });\n            });\n\n          // 创建一个列表组件，使用scrollerForList控制滚动\n          List({ space: 20, scroller: this.scrollerForList }) {\n            // 使用ForEach循环渲染列表项\n            ForEach(this.arr, (item: number) => {\n              ListItem() {\n                Text("ListItem" + item)\n                  .width("100%")\n                  .height("100%")\n                  .borderRadius(15)\n                  .fontSize(16)\n                  .textAlign(TextAlign.Center)\n                  .backgroundColor(Color.White);\n              }.width("100%").height(100);\n            }, (item: string) => item);\n          }\n          .width("100%")\n          .height("50%")\n          .edgeEffect(EdgeEffect.None) // 禁用边缘效果\n          .friction(0.6) // 设置滚动摩擦系数\n          .onReachStart(() => {\n            // 当列表滚动到顶部时，设置listPosition为0\n            this.listPosition = 0;\n          })\n          .onReachEnd(() => {\n            // 当列表滚动到底部时，设置listPosition为2\n            this.listPosition = 2;\n          })\n          .onScrollFrameBegin((offset: number) => {\n            // 在列表滚动开始时，根据listPosition和offset调整外部滚动区域的滚动\n            if ((this.listPosition == 0 && offset <= 0) || (this.listPosition == 2 && offset >= 0)) {\n              this.scrollerForScroll.scrollBy(0, offset);\n              return { offsetRemain: 0 };\n            }\n            this.listPosition = 1;\n            return { offsetRemain: offset };\n          });\n\n          // 创建另一个文本组件，用于占位\n          Text("Scroll Area")\n            .width("100%")\n            .height("40%")\n            .backgroundColor(0X330000FF)\n            .fontSize(16)\n            .textAlign(TextAlign.Center);\n        }\n      }\n      .width("100%").height("100%");\n    }\n    .width('100%').height('100%').backgroundColor(0xDCDCDC).padding(20);\n  }\n}


/*\n实现一个可滚动的列表组件，支持垂直滚动，并提供多个按钮用于控制滚动行为，包括滚动到指定位置、滚动到顶部、滚动到下一页等。列表项为数字，每个数字显示在一个文本框中。\n*/\n\nimport { curves } from '@kit.ArkUI' // 导入ArkUI的曲线动画库\n\n@Entry\n@Component\nstruct ScrollExample {\n  scroller: Scroller = new Scroller() // 创建一个Scroller实例，用于控制滚动行为\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] // 定义一个数字数组，用于生成列表项\n\n  build() {\n    Stack({ alignContent: Alignment.TopStart }) { // 使用Stack布局，内容对齐方式为左上角\n      Scroll(this.scroller) { // 创建一个可滚动的容器，使用scroller实例控制滚动\n        Column() { // 使用Column布局，垂直排列子组件\n          ForEach(this.arr, (item: number) => { // 遍历数组，生成列表项\n            Text(item.toString()) // 将数字转换为字符串并显示在文本框中\n              .width('90%') // 设置文本框宽度为父容器的90%\n              .height(150) // 设置文本框高度为150\n              .backgroundColor(0xFFFFFF) // 设置文本框背景颜色为白色\n              .borderRadius(15) // 设置文本框圆角半径为15\n              .fontSize(16) // 设置文本字体大小为16\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n              .margin({ top: 10 }) // 设置文本框上边距为10\n          }, (item: string) => item) // 指定ForEach的键值生成函数\n        }.width('100%') // 设置Column的宽度为父容器的100%\n      }\n      .scrollable(ScrollDirection.Vertical) // 设置滚动方向为垂直\n      .scrollBar(BarState.On) // 显示滚动条\n      .scrollBarColor(Color.Gray) // 设置滚动条颜色为灰色\n      .scrollBarWidth(10) // 设置滚动条宽度为10\n      .friction(0.6) // 设置滚动摩擦系数为0.6\n      .edgeEffect(EdgeEffect.None) // 禁用边缘效果\n      .onWillScroll((xOffset: number, yOffset: number, scrollState: ScrollState) => {\n        console.info(xOffset + ' ' + yOffset) // 滚动时输出当前的x和y偏移量\n      })\n      .onScrollEdge((side: Edge) => {\n        console.info('To the edge') // 滚动到边缘时输出提示信息\n      })\n      .onScrollStop(() => {\n        console.info('Scroll Stop') // 滚动停止时输出提示信息\n      })\n\n      Button('scroll 150') // 创建一个按钮，点击后滚动150像素\n        .height('5%') // 设置按钮高度为父容器的5%\n        .onClick(() => { \n          this.scroller.scrollBy(0, 150) // 滚动150像素\n        })\n        .margin({ top: 10, left: 20 }) // 设置按钮上边距为10，左边距为20\n      Button('scroll 100') // 创建一个按钮，点击后滚动100像素\n        .height('5%') // 设置按钮高度为父容器的5%\n        .onClick(() => { \n          const yOffset: number = this.scroller.currentOffset().yOffset; // 获取当前的y偏移量\n          this.scroller.scrollTo({ xOffset: 0, yOffset: yOffset + 100 }) // 滚动到当前位置+100像素\n        })\n        .margin({ top: 60, left: 20 }) // 设置按钮上边距为60，左边距为20\n      Button('scroll 100') // 创建一个按钮，点击后滚动100像素，带有动画效果\n        .height('5%') // 设置按钮高度为父容器的5%\n        .onClick(() => { \n          let curve = curves.interpolatingSpring(10, 1, 228, 30) // 创建一个弹簧动画曲线\n          const yOffset: number = this.scroller.currentOffset().yOffset; // 获取当前的y偏移量\n          this.scroller.scrollTo({ xOffset: 0, yOffset: yOffset + 100, animation: { duration: 1000, curve: curve } }) // 滚动到当前位置+100像素，动画时长1000毫秒，使用弹簧动画曲线\n        })\n        .margin({ top: 110, left: 20 }) // 设置按钮上边距为110，左边距为20\n      Button('back top') // 创建一个按钮，点击后滚动到顶部\n        .height('5%') // 设置按钮高度为父容器的5%\n        .onClick(() => { \n          this.scroller.scrollEdge(Edge.Top) // 滚动到顶部\n        })\n        .margin({ top: 160, left: 20 }) // 设置按钮上边距为160，左边距为20\n      Button('next page') // 创建一个按钮，点击后滚动到下一页\n        .height('5%') // 设置按钮高度为父容器的5%\n        .onClick(() => { \n          this.scroller.scrollPage({ next: true }) // 滚动到下一页\n        })\n        .margin({ top: 210, left: 20 }) // 设置按钮上边距为210，左边距为20\n    }.width('100%').height('100%').backgroundColor(0xDCDCDC) // 设置Stack的宽度、高度为父容器的100%，背景颜色为浅灰色\n  }\n}