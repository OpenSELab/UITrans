[
    {
        "description": "该组件通过 GridRow 布局实现了一个栅格系统，用于在水平方向上排列多个子组件。布局宽度占据整个屏幕，高度根据内容自适应。GridRow 组件的子组件通过 GridCol 进行定义，每个 GridCol 占据一定的列数，从而实现灵活的栅格布局。\n\n布局属性：\n- GridRow 的宽度占据整个屏幕，高度根据内容自适应。\n- GridCol 的宽度根据其占据的列数动态计算，高度自适应内容。\n\n组件的样式和外观：\n- GridRow 和 GridCol 的背景颜色为透明，边框为无。\n- GridCol 的内容可以根据需要设置不同的背景颜色、边框、内边距等样式。\n\n组件的排列和嵌套关系：\n- GridRow 作为父容器，水平排列多个 GridCol 子组件。\n- GridCol 可以根据需要嵌套其他组件，如文本、图片等。\n\n组件的功能和交互：\n- GridRow 和 GridCol 本身不提供交互功能，但可以通过嵌套其他交互组件（如按钮、输入框等）来实现交互功能。\n- GridCol 的列数可以通过属性进行动态调整，以适应不同的屏幕尺寸和布局需求。",
        "code": "@Entry\n@Component\nstruct GridRowExample {\n  build() {\n    Column() {\n      // 创建一个 GridRow 容器，用于水平排列子组件\n      GridRow() {\n        // 创建一个 GridCol，占据 4 列\n        GridCol({ span: 4 }) {\n          Text('Column 1')\n            .fontSize(20)\n            .fontColor(Color.White)\n            .width('100%')\n            .height('100%')\n            .textAlign(TextAlign.Center)\n            .backgroundColor(Color.Blue)\n        }\n        // 创建一个 GridCol，占据 4 列\n        GridCol({ span: 4 }) {\n          Text('Column 2')\n            .fontSize(20)\n            .fontColor(Color.White)\n            .width('100%')\n            .height('100%')\n            .textAlign(TextAlign.Center)\n            .backgroundColor(Color.Green)\n        }\n        // 创建一个 GridCol，占据 4 列\n        GridCol({ span: 4 }) {\n          Text('Column 3')\n            .fontSize(20)\n            .fontColor(Color.White)\n            .width('100%')\n            .height('100%')\n            .textAlign(TextAlign.Center)\n            .backgroundColor(Color.Red)\n        }\n      }\n      .width('100%') // GridRow 宽度占据整个屏幕\n      .height('auto') // GridRow 高度自适应内容\n    }\n  }\n}"
    }
]