{
    "description": "提供在给定范围内选择评分的组件。",
    "details": null,
    "interfaces": [
        {
            "description": "Rating(options?: { rating: number, indicator?: boolean })",
            "params": {
                "options": {
                    "type": {
                        "rating": "number",
                        "indicator": "boolean"
                    },
                    "required": false,
                    "description": "评分组件的配置选项。",
                    "default": {
                        "rating": 0,
                        "indicator": false
                    }
                }
            }
        }
    ],
    "attributes": {
        "stars": {
            "description": "设置评分总数。设置为小于等于0的值时，按默认值显示。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "评分总数。",
                    "default": 5
                }
            }
        },
        "stepSize": {
            "description": "设置操作评级的步长。设置为小于0.1的值时，按默认值显示。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "操作评级的步长。",
                    "default": 0.5
                }
            }
        },
        "starStyle": {
            "description": "设置评分的样式。该属性所支持的图片类型能力参考Image组件。",
            "params": {
                "value": {
                    "type": {
                        "backgroundUri": "string",
                        "foregroundUri": "string",
                        "secondaryUri": "string"
                    },
                    "required": true,
                    "description": "评分的样式配置。"
                }
            }
        },
        "contentModifier": {
            "description": "定制Rating内容区的方法。",
            "params": {
                "modifier": {
                    "type": "ContentModifier<RatingConfiguration>",
                    "required": true,
                    "description": "定制内容区的修饰器。"
                }
            }
        }
    },
    "events": {
        "onChange": {
            "description": "操作评分条的评星发生改变时触发该回调。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "评分条的评分。"
                }
            }
        }
    },
    "rules": null,
    "examples": [
        {
            "description": "该组件通过Column布局实现了一个评分展示和交互界面。布局宽度占据整个屏幕，高度设为100%，背景颜色为#F1F3F5。组件的垂直方向上被分为两个部分：评分组件和文本显示组件。评分组件包含一个Rating组件，用于展示和调整评分，评分范围为0到5，步长为0.5。评分组件的星星样式通过自定义背景图片实现，背景图片分别为/common/imag1.png、/common/imag2.png和/common/imag3.png。评分组件的顶部边距为24vp。文本显示组件用于显示当前评分值，字体大小为16vp，字体颜色为rgba(24,36,49,0.60)，顶部边距为16vp。\n评分组件支持用户通过点击或滑动来调整评分，评分值的变化会实时更新到文本显示组件中。整个布局通过Column布局保证评分组件和文本显示组件在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct RatingExample {\n  @State rating: number = 3.5 // 定义一个状态变量rating，初始值为3.5，用于存储当前评分值\n\n  build() {\n    Column() {\n      Rating({ rating: this.rating, indicator: false }) // 创建一个Rating组件，初始评分值为当前rating值，indicator属性为false表示评分组件可交互\n        .stars(5) // 设置评分组件的总星星数为5\n        .stepSize(0.5) // 设置评分组件的步长为0.5，即每次评分变化的最小单位为0.5\n        .starStyle({\n          backgroundUri: '/common/imag1.png', // 设置评分组件的背景星星图片为/common/imag1.png\n          foregroundUri: '/common/imag2.png', // 设置评分组件的前景星星图片为/common/imag2.png\n          secondaryUri: '/common/imag3.png' // 设置评分组件的次级星星图片为/common/imag3.png\n        })\n        .margin({ top: 24 }) // 设置评分组件的顶部边距为24vp\n        .onChange((value: number) => { // 监听评分组件的评分变化事件\n          this.rating = value // 当评分变化时，更新rating状态变量的值为新的评分值\n        })\n      Text('current score is ' + this.rating) // 创建一个Text组件，显示当前评分值\n        .fontSize(16) // 设置文本字体大小为16vp\n        .fontColor('rgba(24,36,49,0.60)') // 设置文本字体颜色为rgba(24,36,49,0.60)\n        .margin({ top: 16 }) // 设置文本组件的顶部边距为16vp\n    }.width('100%').height('100%').backgroundColor('#F1F3F5') // 设置Column组件的宽度为100%，高度为100%，背景颜色为#F1F3F5\n  }\n}"
        },
        {
            "description": "该组件通过Column和Row布局实现了一个评分示例界面。布局宽度占据整个屏幕，高度设为100%，背景颜色为#F1F3F5。组件的垂直方向上被分为两个主要部分：评分输入部分和用户评论部分。\n\n评分输入部分包含一个Rating组件和一个Text组件，Rating组件用于用户输入评分，Text组件用于显示当前评分值。Rating组件的宽度为360vp，高度为113vp，背景颜色为#FFFFFF，顶部外边距为68vp。Rating组件的星星数量为5，步长为0.5，顶部外边距为24vp。当评分值改变时，会触发onChange事件，更新@State变量rating的值，并更新Text组件的显示内容。Text组件的字体大小为16，字体颜色为rgba(24,36,49,0.60)，顶部外边距为16vp。\n\n用户评论部分包含一个Row布局，其中包含一个Image组件、一个Column布局和一个Text组件。Image组件显示用户头像，宽度为40vp，高度为40vp，边框半径为20vp，左侧外边距为24vp。Column布局包含用户名和评分信息，用户名的字体大小为16，字体颜色为#182431，字体粗细为500。评分信息包含一个Rating组件和一个Text组件，Rating组件的评分值为3.5，不可编辑，顶部外边距为1vp，右侧外边距为8vp。Text组件显示评论日期，字体大小为10，字体颜色为#182431。Text组件显示评论楼层，字体大小为10，字体颜色为#182431，位置为(295, 8)。\n\n整个布局通过Column和Row布局保证组件在垂直和水平方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct RatingExample {\n  @State rating: number = 3.5 // 初始化评分值为3.5\n\n  build() {\n    Column() {\n      Column() {\n        Rating({ rating: this.rating, indicator: false }) // 创建一个可编辑的Rating组件，初始评分值为this.rating\n          .stars(5) // 设置Rating组件的星星数量为5\n          .stepSize(0.5) // 设置Rating组件的步长为0.5\n          .margin({ top: 24 }) // 设置Rating组件的顶部外边距为24vp\n          .onChange((value: number) => { // 当评分值改变时，触发onChange事件\n            this.rating = value // 更新@State变量rating的值\n          })\n        Text('current score is ' + this.rating) // 显示当前评分值\n          .fontSize(16) // 设置字体大小为16\n          .fontColor('rgba(24,36,49,0.60)') // 设置字体颜色为rgba(24,36,49,0.60)\n          .margin({ top: 16 }) // 设置顶部外边距为16vp\n      }.width(360).height(113).backgroundColor('#FFFFFF').margin({ top: 68 }) // 设置评分输入部分的宽度为360vp，高度为113vp，背景颜色为#FFFFFF，顶部外边距为68vp\n\n      Row() {\n        Image('common/testImage.jpg') // 显示用户头像\n          .width(40) // 设置宽度为40vp\n          .height(40) // 设置高度为40vp\n          .borderRadius(20) // 设置边框半径为20vp\n          .margin({ left: 24 }) // 设置左侧外边距为24vp\n        Column() {\n          Text('Yue') // 显示用户名\n            .fontSize(16) // 设置字体大小为16\n            .fontColor('#182431') // 设置字体颜色为#182431\n            .fontWeight(500) // 设置字体粗细为500\n          Row() {\n            Rating({ rating: 3.5, indicator: false }).margin({ top: 1, right: 8 }) // 显示用户评分，评分值为3.5，不可编辑，顶部外边距为1vp，右侧外边距为8vp\n            Text('2021/06/02') // 显示评论日期\n              .fontSize(10) // 设置字体大小为10\n              .fontColor('#182431') // 设置字体颜色为#182431\n          }\n        }.margin({ left: 12 }).alignItems(HorizontalAlign.Start) // 设置左侧外边距为12vp，对齐方式为左对齐\n\n        Text('1st Floor') // 显示评论楼层\n          .fontSize(10) // 设置字体大小为10\n          .fontColor('#182431') // 设置字体颜色为#182431\n          .position({ x: 295, y: 8 }) // 设置位置为(295, 8)\n      }.width(360).height(56).backgroundColor('#FFFFFF').margin({ top: 64 }) // 设置用户评论部分的宽度为360vp，高度为56vp，背景颜色为#FFFFFF，顶部外边距为64vp\n    }.width('100%').height('100%').backgroundColor('#F1F3F5') // 设置整个布局的宽度为100%，高度为100%，背景颜色为#F1F3F5\n  }\n}"
        },
        {
            "description": "该组件实现了一个自定义评分条的功能，每个圆圈表示0.5分。评分条的布局宽度占据整个屏幕，高度设为50vp。评分条的垂直方向上被分为两个部分：评分圆圈和分值显示。评分圆圈以水平布局方式排列，圆圈之间的间距均匀分布，且对齐方式为居中对齐。\n评分圆圈的样式包括背景颜色、宽度和高度等属性，支持不同的样式展示。评分圆圈的功能包括点击事件和状态效果，用户可以通过点击评分圆圈触发相应操作，评分圆圈也可以在启用或禁用状态下进行展示。\n评分条的样式和外观通过自定义的 `MyRatingStyle` 类进行配置，支持不同的样式展示。评分条的功能包括评分指示器、评分总数和评分步长等属性的配置，用户可以通过按钮点击事件改变这些属性。\n整个布局通过 Flex 布局保证评分圆圈在水平方向上有序排列，确保界面整洁美观。",
            "code": "// 定义一个自定义评分样式类，实现 `ContentModifier` 接口\nclass MyRatingStyle implements ContentModifier<RatingConfiguration> {\n  name: string = \"\" // 样式名称\n  style: number = 0 // 样式编号\n\n  // 构造函数，初始化样式名称和编号\n  constructor(value1: string, value2: number) {\n    this.name = value1\n    this.style = value2\n  }\n\n  // 应用内容样式，返回一个 `WrappedBuilder`\n  applyContent(): WrappedBuilder<[RatingConfiguration]> {\n    return wrapBuilder(buildRating)\n  }\n}\n\n// 定义一个构建评分的函数，接收 `RatingConfiguration` 配置对象\n@Builder function buildRating(config: RatingConfiguration) {\n  Column() {\n    Row() {\n      // 第一个评分圆圈\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 0.4 ? Color.Black : Color.Red) // 根据评分设置圆圈颜色\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) { // 如果评分条可改变评分\n            if (config.stepSize == 0.5) { // 如果评分步长为0.5\n              config.triggerChange(0.5); // 触发评分改变事件，评分增加0.5\n              return\n            }\n            if (config.stepSize == 1) { // 如果评分步长为1\n              config.triggerChange(1); // 触发评分改变事件，评分增加1\n              return\n            }\n          }\n        }).visibility(config.stars >= 1 ? Visibility.Visible : Visibility.Hidden) // 根据评分总数设置圆圈可见性\n\n      // 第二个评分圆圈\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 0.9 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            config.triggerChange(1);\n          }\n        }).visibility(config.stars >= 1 ? Visibility.Visible : Visibility.Hidden)\n\n      // 第三个评分圆圈\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 1.4 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            if (config.stepSize == 0.5) {\n              config.triggerChange(1.5);\n              return\n            }\n            if (config.stepSize == 1) {\n              config.triggerChange(2);\n              return\n            }\n          }\n        }).visibility(config.stars >= 2 ? Visibility.Visible : Visibility.Hidden).margin({left:10})\n\n      // 第四个评分圆圈\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 1.9 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            config.triggerChange(2);\n          }\n        }).visibility(config.stars >= 2 ? Visibility.Visible : Visibility.Hidden)\n\n      // 第五个评分圆圈\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 2.4 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            if (config.stepSize == 0.5) {\n              config.triggerChange(2.5);\n              return\n            }\n            if (config.stepSize == 1) {\n              config.triggerChange(3);\n              return\n            }\n          }\n        }).visibility(config.stars >= 3 ? Visibility.Visible : Visibility.Hidden).margin({left:10})\n\n      // 第六个评分圆圈\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 2.9 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            config.triggerChange(3);\n          }\n        }).visibility(config.stars >= 3 ? Visibility.Visible : Visibility.Hidden)\n\n      // 第七个评分圆圈\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 3.4 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            if (config.stepSize == 0.5) {\n              config.triggerChange(3.5);\n              return\n            }\n            if (config.stepSize == 1) {\n              config.triggerChange(4);\n              return\n            }\n          }\n        }).visibility(config.stars >= 4 ? Visibility.Visible : Visibility.Hidden).margin({left:10})\n\n      // 第八个评分圆圈\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 3.9 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            config.triggerChange(4);\n          }\n        }).visibility(config.stars >= 4 ? Visibility.Visible : Visibility.Hidden)\n\n      // 第九个评分圆圈\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 4.4 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            if (config.stepSize == 0.5) {\n              config.triggerChange(4.5);\n              return\n            }\n            if (config.stepSize == 1) {\n              config.triggerChange(5);\n              return\n            }\n          }\n        }).visibility(config.stars >= 5 ? Visibility.Visible : Visibility.Hidden).margin({left:10})\n\n      // 第十个评分圆圈\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 4.9 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            config.triggerChange(5);\n          }\n        }).visibility(config.stars >= 5 ? Visibility.Visible : Visibility.Hidden)\n    }\n    // 显示当前评分值\n    Text(\"分值：\" + config.rating)\n  }\n}\n\n// 定义评分条示例组件\n@Entry\n@Component\nstruct ratingExample {\n  @State rating: number = 0; // 当前评分值\n  @State ratingIndicator: boolean = true; // 评分指示器状态，true表示不可改变评分\n  @State ratingStars: number = 0; // 评分总数\n  @State ratingStepsize: number = 0.5; // 评分步长\n  @State ratingEnabled: boolean = true; // 评分条是否启用\n\n  build() {\n    Row() {\n      Column() {\n        // 创建评分条组件\n        Rating({\n          rating: 0, // 初始评分值\n          indicator: this.ratingIndicator // 评分指示器状态\n        })\n          .stepSize(this.ratingStepsize) // 设置评分步长\n          .stars(this.ratingStars) // 设置评分总数\n          .backgroundColor(Color.Transparent) // 设置背景颜色为透明\n          .width('100%') // 设置宽度为100%\n          .height(50) // 设置高度为50vp\n          .onChange((value: number) => { // 评分改变事件\n            console.info('Rating change is' + value);\n            this.rating = value // 更新当前评分值\n          })\n          .contentModifier(new MyRatingStyle(\"hello\", 3)) // 应用自定义评分样式\n\n        // 切换评分指示器状态的按钮\n        Button(this.ratingIndicator ? \"ratingIndicator : true\" : \"ratingIndicator : false\")\n          .onClick((event) => {\n            if (this.ratingIndicator) {\n              this.ratingIndicator = false\n            } else {\n              this.ratingIndicator = true\n            }\n          }).margin({top: 5})\n\n        // 增加评分总数的按钮\n        Button(this.ratingStars < 5 ? \"ratingStars + 1, ratingStars =\" + this.ratingStars : \"ratingStars最大值为5\")\n          .onClick((event) => {\n            if (this.ratingStars < 5) {\n              this.ratingStars += 1\n            }\n          }).margin({top: 5})\n\n        // 减少评分总数的按钮\n        Button(this.ratingStars > 0 ? \"ratingStars - 1, ratingStars =\" + this.ratingStars : \"ratingStars小于等于0时默认等于5\")\n          .onClick((event) => {\n            if (this.ratingStars > 0) {\n              this.ratingStars -= 1\n            }\n          }).margin({top: 5})\n\n        // 切换评分步长的按钮\n        Button(this.ratingStepsize == 0.5 ? \"ratingStepsize : 0.5\" : \"ratingStepsize : 1\")\n          .onClick((event) => {\n            if (this.ratingStepsize == 0.5) {\n              this.ratingStepsize = 1\n            } else {\n              this.ratingStepsize = 0.5\n            }\n          }).margin({top: 5})\n      }\n      .width('100%') // 设置宽度为100%\n      .height('100%') // 设置高度为100%\n      .justifyContent(FlexAlign.Center) // 设置内容居中对齐\n    }\n    .height('100%') // 设置高度为100%\n  }\n}"
        }
    ],
    "is_common_attrs": true
}