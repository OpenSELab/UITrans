/*\n实现一个水平滚动的列表组件，支持弹性边缘效果和中心对齐的滚动对齐方式。列表项通过ForEach组件动态生成，每个列表项显示一个数字，并具有圆角背景和居中对齐的文本。\n*/\n\n@Entry\n@Component\nstruct ListExample {\n  // 定义一个私有数组，用于存储列表项的数据\n  private arr: number[] = []\n  // 定义一个Scroller对象，用于控制列表的滚动行为\n  private scrollerForList: Scroller = new Scroller()\n\n  // 组件生命周期方法，在组件即将显示时执行\n  aboutToAppear() {\n    // 循环20次，将0到19的数字添加到数组中\n    for (let i = 0; i < 20; i++) {\n      this.arr.push(i)\n    }\n  }\n\n  // 构建组件的UI结构\n  build() {\n    Column() {\n      Row() {\n        // 创建一个List组件，设置项之间的间距为20，初始显示第3项，并绑定Scroller对象\n        List({ space: 20, initialIndex: 3, scroller: this.scrollerForList }) {\n          // 使用ForEach组件遍历数组，生成列表项\n          ForEach(this.arr, (item: number) => {\n            ListItem() {\n              // 创建一个Text组件，显示当前项的数字\n              Text('' + item)\n                .width('100%').height(100).fontSize(16)\n                .textAlign(TextAlign.Center)\n            }\n            .borderRadius(10).backgroundColor(0xFFFFFF) // 设置列表项的圆角和背景色\n            .width('60%') // 设置列表项的宽度为父容器的60%\n            .height('80%') // 设置列表项的高度为父容器的80%\n          }, (item: number) => JSON.stringify(item)) // 使用JSON.stringify生成唯一键\n        }\n        .chainAnimation(true) // 启用列表项的链式动画\n        .edgeEffect(EdgeEffect.Spring) // 设置边缘效果为弹性效果\n        .listDirection(Axis.Horizontal) // 设置列表方向为水平方向\n        .height('100%') // 设置列表高度为父容器的100%\n        .width('100%') // 设置列表宽度为父容器的100%\n        .scrollSnapAlign(ScrollSnapAlign.CENTER) // 设置滚动对齐方式为中心对齐\n        .borderRadius(10) // 设置列表的圆角\n        .backgroundColor(0xDCDCDC) // 设置列表的背景色\n      }\n      .width('100%') // 设置Row组件的宽度为父容器的100%\n      .height('100%') // 设置Row组件的高度为父容器的100%\n      .backgroundColor(0xDCDCDC) // 设置Row组件的背景色\n      .padding({ top: 10 }) // 设置顶部内边距为10\n    }\n  }\n}


/*\n实现一个纵向滚动的列表组件，列表项为数字0到9，支持滚动时回调索引、可见内容变化和滚动状态。\n*/\n\n@Entry\n@Component\nstruct ListExample {\n  // 定义一个数组，包含数字0到9\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n  build() {\n    Column() {\n      // 创建一个纵向列表，设置项之间的间距为20，初始索引为0\n      List({ space: 20, initialIndex: 0 }) {\n        // 使用ForEach循环遍历数组，生成列表项\n        ForEach(this.arr, (item: number) => {\n          ListItem() {\n            // 创建一个文本组件，显示当前数组项的值\n            Text('' + item)\n              .width('100%').height(100).fontSize(16)\n              .textAlign(TextAlign.Center).borderRadius(10).backgroundColor(0xFFFFFF)\n          }\n        }, (item: string) => item) // 使用数组项的值作为唯一标识符\n      }\n      .listDirection(Axis.Vertical) // 设置列表方向为纵向\n      .scrollBar(BarState.Off) // 关闭滚动条\n      .friction(0.6) // 设置滚动摩擦系数\n      .divider({ strokeWidth: 2, color: 0xFFFFFF, startMargin: 20, endMargin: 20 }) // 设置列表项之间的分隔线\n      .edgeEffect(EdgeEffect.Spring) // 设置边缘效果为弹性回弹\n      .onScrollIndex((firstIndex: number, lastIndex: number, centerIndex: number) => {\n        // 当滚动索引发生变化时，回调当前显示的第一个、最后一个和中间项的索引\n        console.info('first' + firstIndex)\n        console.info('last' + lastIndex)\n        console.info('center' + centerIndex)\n      })\n      .onScrollVisibleContentChange((start: VisibleListContentInfo, end: VisibleListContentInfo) => {\n        // 当可见内容发生变化时，回调开始和结束的可见内容信息\n        console.log(' start index: ' + start.index +\n                    ' start item group area: ' + start.itemGroupArea +\n                    ' start index in group: ' + start.itemIndexInGroup)\n        console.log(' end index: ' + end.index +\n                    ' end item group area: ' + end.itemGroupArea +\n                    ' end index in group: ' + end.itemIndexInGroup)\n      })\n      .onDidScroll((scrollOffset: number, scrollState: ScrollState) => {\n        // 当滚动发生时，回调当前的滚动偏移量和滚动状态\n        console.info(`onScroll scrollState = ScrollState` + scrollState + `, scrollOffset = ` + scrollOffset)\n      })\n      .width('90%') // 设置列表宽度为父容器的90%\n    }\n    .width('100%') // 设置列的宽度为父容器的100%\n    .height('100%') // 设置列的高度为父容器的100%\n    .backgroundColor(0xDCDCDC) // 设置背景颜色\n    .padding({ top: 5 }) // 设置顶部内边距为5\n  }\n}


/*\n实现一个可滚动的列表组件，支持在子组件高度不一致时调用scrollTo接口也可以跳转准确。列表中的子组件高度可以通过按钮动态调整，并且可以通过按钮调用scrollTo方法跳转到指定位置。\n*/\n\n@Entry\n@Component\nstruct ListExample {\n  // 定义一个数组，用于存储列表项的数据\n  private arr: number[] = []\n  \n  // 创建一个ListScroller对象，用于控制列表的滚动\n  private scroller: ListScroller = new ListScroller()\n  \n  // 定义列表项之间的间距，初始值为10\n  @State listSpace: number = 10\n  \n  // 定义列表子组件的主轴尺寸，初始值为100\n  @State listChildrenSize: ChildrenMainSize = new ChildrenMainSize(100)\n  \n  // 组件即将显示时执行的初始化操作\n  aboutToAppear(){\n    // 向数组中添加10个数字\n    for (let i = 0; i < 10; i++) {\n      this.arr.push(i)\n    }\n    \n    // 设置前5个列表项的高度为300\n    this.listChildrenSize.splice(0, 5, [300, 300, 300, 300, 300])\n  }\n  \n  build() {\n    Column() {\n      // 创建一个List组件，设置间距、初始索引、滚动控制器\n      List({ space: this.listSpace, initialIndex: 4, scroller: this.scroller }) {\n        // 使用ForEach循环遍历数组，生成列表项\n        ForEach(this.arr, (item: number) => {\n          ListItem() {\n            // 创建一个Text组件，显示列表项的内容\n            Text('item-' + item)\n              .height( item < 5 ? 300 : this.listChildrenSize.childDefaultSize) // 根据条件设置高度\n              .width('90%') // 设置宽度为90%\n              .fontSize(16) // 设置字体大小为16\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n              .borderRadius(10) // 设置边框圆角为10\n              .backgroundColor(0xFFFFFF) // 设置背景颜色为白色\n          }\n        }, (item: string) => item) // 指定键值生成函数\n      }\n      .backgroundColor(Color.Gray) // 设置列表背景颜色为灰色\n      .layoutWeight(1) // 设置布局权重为1\n      .scrollBar(BarState.On) // 显示滚动条\n      .childrenMainSize(this.listChildrenSize) // 设置子组件的主轴尺寸\n      .alignListItem(ListItemAlign.Center) // 设置列表项居中对齐\n      \n      // 创建一个Row组件，包含三个按钮\n      Row(){\n        // 第一个按钮，点击后增加列表项的高度\n        Button() { Text('item size + 50') }.onClick(()=>{\n          this.listChildrenSize.childDefaultSize += 50\n        }).height('50%').width('30%')\n        \n        // 第二个按钮，点击后减少列表项的高度\n        Button() { Text('item size - 50') }.onClick(()=>{\n          if (this.listChildrenSize.childDefaultSize === 0) {\n            return\n          }\n          this.listChildrenSize.childDefaultSize -= 50\n        }).height('50%').width('30%')\n        \n        // 第三个按钮，点击后调用scrollTo方法跳转到指定位置\n        Button() { Text('scrollTo (0, 310)') }.onClick(()=>{\n          this.scroller.scrollTo({xOffset: 0, yOffset: 310})\n        }).height('50%').width('30%')\n      }.height('20%') // 设置Row的高度为20%\n    }\n  }\n}


/*\n实现一个可滚动的列表组件，支持列表项的对齐方式切换。列表项以固定宽度和高度显示，列表本身具有固定的宽度和高度，并且具有红色边框。列表项之间有20像素的间距，列表项的边框为绿色。列表项的内容为数字字符串，居中显示。列表项的对齐方式可以通过点击按钮进行切换，支持三种对齐方式：Start、Center、End。\n*/\n\n@Entry\n@Component\nstruct ListLanesExample {\n  // 定义一个状态变量arr，用于存储列表项的内容，初始值为0到19的数字字符串数组\n  @State arr: string[] = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"]\n  \n  // 定义一个状态变量alignListItem，用于存储列表项的对齐方式，初始值为ListItemAlign.Start\n  @State alignListItem: ListItemAlign = ListItemAlign.Start\n\n  build() {\n    Column() {\n      // 创建一个List组件，设置列表项之间的间距为20像素，初始索引为0\n      List({ space: 20, initialIndex: 0 }) {\n        // 使用ForEach循环遍历arr数组，生成列表项\n        ForEach(this.arr, (item: string) => {\n          // 创建一个ListItem组件，包含一个Text组件，显示当前数组元素的值\n          ListItem() {\n            Text('' + item)\n              .width('100%') // 设置Text组件的宽度为100%\n              .height(100) // 设置Text组件的高度为100像素\n              .fontSize(16) // 设置Text组件的字体大小为16像素\n              .textAlign(TextAlign.Center) // 设置Text组件的文本对齐方式为居中\n              .borderRadius(10) // 设置Text组件的边框圆角为10像素\n              .backgroundColor(0xFFFFFF) // 设置Text组件的背景颜色为白色\n          }\n          .border({ width: 2, color: Color.Green }) // 设置ListItem组件的边框宽度为2像素，颜色为绿色\n        }, (item: string) => item) // 使用数组元素的值作为唯一标识符\n      }\n      .height(300) // 设置List组件的高度为300像素\n      .width("90%") // 设置List组件的宽度为父容器的90%\n      .friction(0.6) // 设置List组件的摩擦系数为0.6，影响滚动时的减速效果\n      .border({ width: 3, color: Color.Red }) // 设置List组件的边框宽度为3像素，颜色为红色\n      .lanes({ minLength: 40, maxLength: 40 }) // 设置List组件的行宽为40像素，最小和最大值相同，表示固定行宽\n      .alignListItem(this.alignListItem) // 设置List组件的列表项对齐方式为当前的alignListItem值\n      .scrollBar(BarState.Off) // 设置List组件的滚动条状态为关闭\n\n      // 创建一个Button组件，显示当前的alignListItem值，并绑定点击事件\n      Button("点击更改alignListItem:" + this.alignListItem).onClick(() => {\n        // 根据当前的alignListItem值切换到下一个对齐方式\n        if (this.alignListItem == ListItemAlign.Start) {\n          this.alignListItem = ListItemAlign.Center\n        } else if (this.alignListItem == ListItemAlign.Center) {\n          this.alignListItem = ListItemAlign.End\n        } else {\n          this.alignListItem = ListItemAlign.Start\n        }\n      })\n    }\n    .width('100%') // 设置Column组件的宽度为100%\n    .height('100%') // 设置Column组件的高度为100%\n    .backgroundColor(0xDCDCDC) // 设置Column组件的背景颜色为浅灰色\n    .padding({ top: 5 }) // 设置Column组件的上内边距为5像素\n  }\n}


/*\n实现一个可编辑的列表组件，支持动态添加和删除列表项。列表项由数字组成，点击“edit list”按钮可以切换编辑状态，编辑状态下每个列表项右侧会出现一个删除按钮，点击删除按钮可以删除对应的列表项。\n*/\n\n@Entry\n@Component\nstruct ListExample {\n  // 定义一个状态变量 arr，用于存储列表项的数据，初始值为 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  @State arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  \n  // 定义一个状态变量 editFlag，用于控制列表的编辑状态，初始值为 false\n  @State editFlag: boolean = false\n\n  build() {\n    // 使用 Stack 布局，对齐方式为 Alignment.TopStart\n    Stack({ alignContent: Alignment.TopStart }) {\n      // 使用 Column 布局，垂直排列子组件\n      Column() {\n        // 创建一个 List 组件，设置项之间的间距为 20，初始索引为 0\n        List({ space: 20, initialIndex: 0 }) {\n          // 使用 ForEach 循环遍历 arr 数组，生成列表项\n          ForEach(this.arr, (item: number, index?: number) => {\n            // 每个列表项使用 ListItem 组件包裹\n            ListItem() {\n              // 使用 Flex 布局，方向为行（水平排列），对齐方式为居中\n              Flex({ direction: FlexDirection.Row, alignItems: ItemAlign.Center }) {\n                // 显示列表项的数字内容\n                Text('' + item)\n                  .width('100%') // 设置文本宽度为 100%\n                  .height(80) // 设置文本高度为 80\n                  .fontSize(20) // 设置字体大小为 20\n                  .textAlign(TextAlign.Center) // 设置文本居中对齐\n                  .borderRadius(10) // 设置文本框的圆角半径为 10\n                  .backgroundColor(0xFFFFFF) // 设置文本框的背景颜色为白色\n                  .flexShrink(1) // 设置文本框在 Flex 布局中的收缩比例为 1\n                \n                // 如果 editFlag 为 true，显示删除按钮\n                if (this.editFlag) {\n                  Button() {\n                    Text("delete").fontSize(16) // 设置按钮文本为 "delete"，字体大小为 16\n                  }.width('30%').height(40) // 设置按钮宽度为 30%，高度为 40\n                  .onClick(() => {\n                    // 点击按钮时，删除对应的列表项\n                    if (index != undefined) {\n                      console.info(this.arr[index] + 'Delete') // 输出删除信息到控制台\n                      this.arr.splice(index, 1) // 从数组中删除对应项\n                      console.info(JSON.stringify(this.arr)) // 输出删除后的数组到控制台\n                      this.editFlag = false // 关闭编辑状态\n                    }\n                  }).stateEffect(true) // 设置按钮的 stateEffect 为 true，表示按钮状态变化时会触发重新渲染\n                }\n              }\n            }\n          }, (item: string) => item) // 使用 item 作为 key，确保列表项的唯一性\n        }.width('90%') // 设置 List 组件的宽度为 90%\n        .scrollBar(BarState.Off) // 关闭滚动条\n        .friction(0.6) // 设置列表的摩擦系数为 0.6\n      }.width('100%') // 设置 Column 组件的宽度为 100%\n\n      // 创建一个按钮，用于切换列表的编辑状态\n      Button('edit list')\n        .onClick(() => {\n          // 点击按钮时，切换 editFlag 的值\n          this.editFlag = !this.editFlag\n        }).margin({ top: 5, left: 20 }) // 设置按钮的上边距为 5，左边距为 20\n    }.width('100%').height('100%').backgroundColor(0xDCDCDC).padding({ top: 5 }) // 设置 Stack 组件的宽度、高度、背景颜色和上边距\n  }\n}