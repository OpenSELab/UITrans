/*\n布局、样式及功能与效果描述：\n1. 创建了一个垂直方向的 Flex 布局，子元素垂直从头部对齐，间距均匀分布。\n2. 展示了 Span 组件的基本用法，包括文本的拼接、文本样式（大小写、装饰线、字符间距、文本阴影等）的设置。\n3. 通过不同的 Span 组件展示了文本的各种装饰效果，如下划线、删除线、上划线等，并设置了不同的样式（波浪线、点状、虚线）。\n4. 展示了文本字符间距的设置，通过不同的 letterSpacing 值展示了不同的字符间距效果。\n5. 展示了文本大小写的设置，通过 textCase 属性设置了文本为全小写和全大写。\n6. 展示了文本阴影的设置，通过 textShadow 属性设置了多个文本阴影效果。\n7. 展示了如何设置 Span 基线的偏移量，通过 baselineOffset 属性设置了不同的基线偏移量。\n*/\n\n@Entry\n@Component\nstruct SpanExample {\n  build() {\n    // 创建一个垂直方向的 Flex 布局，子元素垂直从头部对齐，间距均匀分布\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      \n      // 基本用法示例\n      Text('Basic Usage').fontSize(9).fontColor(0xCCCCCC) // 显示标题 "Basic Usage"，设置字体大小和颜色\n      Text() {\n        Span('In Line') // 创建一个 Span 组件，显示文本 "In Line"\n        Span(' Component') // 创建一个 Span 组件，显示文本 " Component"\n        Span(' !') // 创建一个 Span 组件，显示文本 " !"\n      }\n\n      // Span 组件示例，设置文本大小写为正常，去除装饰线，字体颜色为红色\n      Text() {\n        Span('This is the Span component').fontSize(12).textCase(TextCase.Normal) // 创建一个 Span 组件，显示文本 "This is the Span component"，设置字体大小和文本大小写为正常\n          .decoration({ type: TextDecorationType.None, color: Color.Red }) // 设置文本装饰线为无，颜色为红色\n      }\n\n      // 文本添加下划线，样式为波浪线\n      Text('Text Decoration').fontSize(9).fontColor(0xCCCCCC) // 显示标题 "Text Decoration"，设置字体大小和颜色\n      Text() {\n        Span('I am Underline-WAVY-span').decoration({ type: TextDecorationType.Underline, color: Color.Red, style: TextDecorationStyle.WAVY }).fontSize(12) // 创建一个 Span 组件，显示文本 "I am Underline-WAVY-span"，设置下划线装饰线，颜色为红色，样式为波浪线，字体大小为12\n      }\n\n      // 文本添加删除线，样式为点状\n      Text() {\n        Span('I am LineThrough-DOTTED-span') // 创建一个 Span 组件，显示文本 "I am LineThrough-DOTTED-span"\n          .decoration({ type: TextDecorationType.LineThrough, color: Color.Red, style: TextDecorationStyle.DOTTED }) // 设置删除线装饰线，颜色为红色，样式为点状\n          .fontSize(12) // 设置字体大小为12\n      }\n\n      // 文本添加上划线，样式为虚线\n      Text() {\n        Span('I am Overline-DASHED-span').decoration({ type: TextDecorationType.Overline, color: Color.Red, style: TextDecorationStyle.DASHED }).fontSize(12) // 创建一个 Span 组件，显示文本 "I am Overline-DASHED-span"，设置上划线装饰线，颜色为红色，样式为虚线，字体大小为12\n      }\n\n      // 文本字符间距示例\n      Text('LetterSpacing').fontSize(9).fontColor(0xCCCCCC) // 显示标题 "LetterSpacing"，设置字体大小和颜色\n      Text() {\n        Span('span letter spacing') // 创建一个 Span 组件，显示文本 "span letter spacing"\n          .letterSpacing(0) // 设置字符间距为0\n          .fontSize(12) // 设置字体大小为12\n      }\n\n      Text() {\n        Span('span letter spacing') // 创建一个 Span 组件，显示文本 "span letter spacing"\n          .letterSpacing(-2) // 设置字符间距为-2\n          .fontSize(12) // 设置字体大小为12\n      }\n\n      Text() {\n        Span('span letter spacing') // 创建一个 Span 组件，显示文本 "span letter spacing"\n          .letterSpacing(3) // 设置字符间距为3\n          .fontSize(12) // 设置字体大小为12\n      }\n\n      // 文本大小写展示设置示例\n      Text('Text Case').fontSize(9).fontColor(0xCCCCCC) // 显示标题 "Text Case"，设置字体大小和颜色\n      Text() {\n        Span('I am Lower-span').fontSize(12) // 创建一个 Span 组件，显示文本 "I am Lower-span"，设置字体大小为12\n          .textCase(TextCase.LowerCase) // 设置文本大小写为全小写\n          .decoration({ type: TextDecorationType.None }) // 设置文本装饰线为无\n      }\n\n      Text() {\n        Span('I am Upper-span').fontSize(12) // 创建一个 Span 组件，显示文本 "I am Upper-span"，设置字体大小为12\n          .textCase(TextCase.UpperCase) // 设置文本大小写为全大写\n          .decoration({ type: TextDecorationType.None }) // 设置文本装饰线为无\n      }\n    }.width('100%').height(250).padding({ left: 35, right: 35, top: 35 }) // 设置 Flex 布局的宽度为100%，高度为250，内边距为35\n  }\n}\n\n@Entry\n@Component\nstruct TextSpanExample {\n  @State textShadows : ShadowOptions | Array<ShadowOptions> = [{ radius: 10, color: Color.Red, offsetX: 10, offsetY: 0 },{ radius: 10, color: Color.Black, offsetX: 20, offsetY: 0 },\n      { radius: 10, color: Color.Brown, offsetX: 30, offsetY: 0 },{ radius: 10, color: Color.Green, offsetX: 40, offsetY: 0 },\n      { radius: 10, color: Color.Yellow, offsetX: 100, offsetY: 0 }] // 定义一个状态变量 textShadows，存储文本阴影的配置信息\n  build() {\n    Column({ space: 8 }) {\n      Text() {\n        // 创建一个文本组件，显示文本 '123456789'，设置字体大小为50，并应用指定的文本阴影效果\n        Span('123456789').fontSize(50).textShadow(this.textShadows)\n      }\n      Text() {\n        // 创建另一个文本组件，显示文本 '123456789'，该文本继承外部文本的字体大小和文本阴影效果\n        Span('123456789') // span can inherit text shadow & font size from outer text\n      }.fontSize(50).textShadow(this.textShadows)\n    }\n  }\n}\n\n@Component\n@Entry\nstruct Index {\n  build() {\n    // 创建一个包含文本的列，文本内容为"Hello World !"\n    Column() {\n      // 创建一个文本组件，显示"Hello World !"，设置字体大小为20fp，背景颜色为紫色，圆角半径为5vp，字体颜色为白色\n      Text() {\n        Span('   Hello World !   ')\n          .fontSize('20fp')\n          .textBackgroundStyle({color: "#7F007DFF", radius: "5vp"})\n          .fontColor(Color.White)\n      }\n    }\n    // 设置列的宽度为100%，底部外边距为5vp，水平居中对齐\n    .width('100%').margin({bottom: '5vp'}).alignItems(HorizontalAlign.Center)\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n\n  build() {\n    Row() {\n      Column() {\n        Text(){\n          // 设置第一个Span的基线偏移量为20VP\n          Span('word1')\n            .baselineOffset(new LengthMetrics(20,LengthUnit.VP))\n          // 设置第二个Span的基线偏移量为0VP，即不偏移\n          Span('word2')\n            .baselineOffset(new LengthMetrics(0,LengthUnit.VP))\n          // 设置ImageSpan的基线偏移量为-20VP，向上偏移\n          ImageSpan($r("app.media.icon"))\n            .width('45px')\n            .baselineOffset(new LengthMetrics(-20,LengthUnit.VP))\n        }\n        .backgroundColor(Color.Gray) // 设置Column的背景颜色为灰色\n      }\n      .width('100%') // 设置Column的宽度为100%\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}