/*\n实现一个嵌入式UI扩展能力（EmbeddedUIExtensionAbility）的生命周期管理和内容加载功能。具体功能如下：\n\n生命周期管理：\n- onCreate：在能力创建时触发，用于初始化资源或状态。\n- onForeground：当能力从后台切换到前台时触发，通常用于恢复UI状态或刷新数据。\n- onBackground：当能力切换到后台时触发，用于保存状态或释放资源。\n- onDestroy：在能力销毁时触发，进行清理工作。\n\n会话管理：\n- onSessionCreate：当嵌入式UI扩展会话创建时触发，接收 Want 对象和 UIExtensionContentSession 会话对象。此时，可以初始化会话并加载指定的内容页面（'pages/extension'）。\n- onSessionDestroy：当会话销毁时触发，用于清理会话相关的资源。\n\n内容加载：\n- 在会话创建时，通过 session.loadContent 方法加载指定路径的内容页面，同时可以传递自定义存储对象（LocalStorage），以便在页面中使用。\n\n此代码展示了如何在嵌入式UI扩展能力中处理生命周期事件和会话管理，以及如何加载和管理嵌入的UI内容。\n*/\n\nimport { EmbeddedUIExtensionAbility, UIExtensionContentSession, Want } from '@kit.AbilityKit';\n\nconst TAG: string = '[ExampleEmbeddedAbility]'\n\nexport default class ExampleEmbeddedAbility extends EmbeddedUIExtensionAbility {\n  \n  // 生命周期方法：在能力创建时触发，用于初始化资源或状态\n  onCreate() {\n    console.log(TAG, `onCreate`);\n  }\n\n  // 生命周期方法：当能力从后台切换到前台时触发，通常用于恢复UI状态或刷新数据\n  onForeground() {\n    console.log(TAG, `onForeground`);\n  }\n\n  // 生命周期方法：当能力切换到后台时触发，用于保存状态或释放资源\n  onBackground() {\n    console.log(TAG, `onBackground`);\n  }\n\n  // 生命周期方法：在能力销毁时触发，进行清理工作\n  onDestroy() {\n    console.log(TAG, `onDestroy`);\n  }\n\n  // 会话管理方法：当嵌入式UI扩展会话创建时触发，接收 Want 对象和 UIExtensionContentSession 会话对象\n  onSessionCreate(want: Want, session: UIExtensionContentSession) {\n    console.log(TAG, `onSessionCreate, want: ${JSON.stringify(want)}`);\n    let param: Record<string, UIExtensionContentSession> = {\n      'session': session\n    };\n    let storage: LocalStorage = new LocalStorage(param);\n    // 加载指定路径的内容页面，并传递自定义存储对象\n    session.loadContent('pages/extension', storage);\n  }\n\n  // 会话管理方法：当会话销毁时触发，用于清理会话相关的资源\n  onSessionDestroy(session: UIExtensionContentSession) {\n    console.log(TAG, `onSessionDestroy`);\n  }\n}