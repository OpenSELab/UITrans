/*\n实现一个月历日期选择器组件，用户可以通过该组件选择日期，并显示当前选中的日期。组件布局为垂直排列，包含一个标题文本和一个月历选择器。月历选择器位于布局的右侧，并且具有自定义的文本样式和边距。当用户选择日期时，会触发onChange事件，并在控制台输出选中的日期信息。\n*/\n\n@Entry\n@Component\nstruct CalendarPickerExample {\n  // 定义一个私有变量selectedDate，用于存储当前选中的日期，初始值为2024年3月5日\n  private selectedDate: Date = new Date('2024-03-05')\n\n  build() {\n    Column() {\n      // 创建一个文本组件，显示标题“月历日期选择器”，字体大小为30\n      Text('月历日期选择器').fontSize(30)\n      Column() {\n        // 创建一个CalendarPicker组件，设置提示圆点半径为10，初始选中日期为selectedDate\n        CalendarPicker({ hintRadius: 10, selected: this.selectedDate })\n          .edgeAlign(CalendarAlign.END) // 设置月历选择器的对齐方式为右侧对齐\n          .textStyle({ color: "  # ff182431", font: { size: 20, weight: FontWeight.Normal } }) // 设置月历选择器的文本样式，包括颜色和字体大小\n          .margin(10) // 设置月历选择器的边距为10\n          .onChange((value) => {\n            // 当用户选择日期时，触发onChange事件，并在控制台输出选中的日期信息\n            console.info("CalendarPicker onChange:" + JSON.stringify(value))\n          })\n      }.alignItems(HorizontalAlign.End).width("100%") // 设置内部Column组件的子元素水平对齐方式为右侧对齐，宽度为100%\n    }.width('100%').margin({ top: 350 }) // 设置外部Column组件的宽度为100%，顶部边距为350\n  }\n}