[
    {
        "description": "该组件展示了一个月历日期选择器，用户可以通过该选择器选择日期。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为两个部分：一个标题和一个日期选择器。标题部分使用 Text 组件显示文本“月历日期选择器”，字体大小为 30。日期选择器部分使用 CalendarPicker 组件，该组件允许用户选择日期，并提供了一些自定义样式和布局属性。\n\n日期选择器的布局属性包括宽度占据父容器的 100%，并且通过 alignItems 属性设置为水平对齐方式的末端（HorizontalAlign.End）。日期选择器的样式包括文本颜色为 \"#ff182431\"，字体大小为 20，字体粗细为正常（FontWeight.Normal），并且设置了 10vp 的边距。日期选择器还绑定了一个 onChange 事件，当用户选择日期时，会触发该事件并在控制台输出所选日期的信息。\n\n整个布局通过 Column 布局保证标题和日期选择器在垂直方向上有序排列，确保界面整洁美观。",
        "code": "// xxx.ets\n@Entry\n@Component\nstruct CalendarPickerExample {\n  // 初始选择的日期为 2024 年 3 月 5 日\n  private selectedDate: Date = new Date('2024-03-05')\n\n  build() {\n    Column() {\n      // 标题部分，显示文本“月历日期选择器”，字体大小为 30\n      Text('月历日期选择器').fontSize(30)\n      \n      Column() {\n        // 日期选择器部分，使用 CalendarPicker 组件\n        CalendarPicker({ hintRadius: 10, selected: this.selectedDate })\n          .edgeAlign(CalendarAlign.END) // 设置日期选择器的对齐方式为末端\n          .textStyle({ color: \"#ff182431\", font: { size: 20, weight: FontWeight.Normal } }) // 设置日期选择器的文本样式\n          .margin(10) // 设置日期选择器的边距为 10vp\n          .onChange((value) => {\n            // 当日期选择器的选择日期发生变化时，触发该事件\n            console.info(\"CalendarPicker onChange:\" + JSON.stringify(value))\n          })\n      }\n      .alignItems(HorizontalAlign.End) // 设置日期选择器部分的布局对齐方式为水平末端对齐\n      .width(\"100%\") // 设置日期选择器部分的宽度占据父容器的 100%\n    }\n    .width('100%') // 设置整个组件的宽度占据父容器的 100%\n    .margin({ top: 350 }) // 设置整个组件的上边距为 350vp\n  }\n}"
    }
]