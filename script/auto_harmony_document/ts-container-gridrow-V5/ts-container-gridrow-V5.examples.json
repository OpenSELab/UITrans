[
    {
        "description": "该组件通过 GridRow 和 GridCol 布局实现了一个响应式的网格布局示例。布局宽度占据父容器的 80%，高度设为 200vp，内边距为左右 10vp、顶部和底部 5vp。组件的垂直方向上包含一个 GridRow 组件，该组件根据不同的窗口大小（400vp、600vp、800vp）动态调整列数和间距。\n\nGridRow 组件的列数固定为 5 列，列之间的水平间距为 5vp，垂直间距为 10vp。GridRow 的方向为水平方向（Row）。GridRow 内部通过 ForEach 循环遍历 bgColors 数组，生成多个 GridCol 组件。每个 GridCol 组件根据不同的屏幕尺寸（xs、sm、md、lg）动态调整其占据的列数（span），最小为 1 列，最大为 4 列。\n\n每个 GridCol 组件内部包含一个 Row 组件，宽度为 100%，高度为 20vp。GridCol 组件的边框颜色与 bgColors 数组中的颜色一致，边框宽度为 2vp。GridRow 组件在窗口大小变化时会触发 onBreakpointChange 事件，更新 currentBp 状态变量，以记录当前的断点值。\n\n整个布局通过 GridRow 和 GridCol 组件实现响应式布局，确保在不同屏幕尺寸下都能良好地展示内容。",
        "code": "// xxx.ets\n@Entry\n@Component\nstruct GridRowExample {\n  @State bgColors: Color[] = [Color.Red, Color.Orange, Color.Yellow, Color.Green, Color.Pink, Color.Grey, Color.Blue, Color.Brown]\n  @State currentBp: string = 'unknown'\n\n  build() {\n    Column() {\n      GridRow({\n        columns: 5, // 设置 GridRow 的列数为 5\n        gutter: { x: 5, y: 10 }, // 设置列之间的水平间距为 5vp，垂直间距为 10vp\n        breakpoints: { value: [\"400vp\", \"600vp\", \"800vp\"], // 设置断点值，根据窗口大小调整布局\n          reference: BreakpointsReference.WindowSize }, // 断点参考值为窗口大小\n        direction: GridRowDirection.Row // 设置 GridRow 的方向为水平方向\n      }) {\n        ForEach(this.bgColors, (color: Color) => {\n          GridCol({ span: { xs: 1, sm: 2, md: 3, lg: 4 }, offset: 0, order: 0 }) {\n            Row().width(\"100%\").height(\"20vp\") // 设置 Row 组件的宽度和高度\n          }.borderColor(color).borderWidth(2) // 设置 GridCol 组件的边框颜色和宽度\n        })\n      }.width(\"100%\").height(\"100%\") // 设置 GridRow 组件的宽度和高度为 100%\n      .onBreakpointChange((breakpoint) => {\n        this.currentBp = breakpoint // 当断点变化时，更新 currentBp 状态变量\n      })\n    }.width('80%').margin({ left: 10, top: 5, bottom: 5 }).height(200) // 设置 Column 组件的宽度、高度和内边距\n    .border({ color: '#880606', width: 2 }) // 设置 Column 组件的边框颜色和宽度\n  }\n}"
    }
]