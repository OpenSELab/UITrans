{
    "description": "异常提示，适用于有异常需要提示异常内容的情况。",
    "details": "该组件从API Version 11开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
    "interfaces": [
        {
            "description": "ExceptionPrompt({ options: PromptOptions, onTipClick?: () => void, onActionTextClick?: () => void })",
            "params": {
                "options": {
                    "type": "PromptOptions",
                    "required": true,
                    "description": "指定当前异常提示的配置信息。"
                },
                "onTipClick": {
                    "type": "() => void",
                    "required": false,
                    "description": "点击左侧提示文本的回调函数。"
                },
                "onActionTextClick": {
                    "type": "() => void",
                    "required": false,
                    "description": "点击右侧图标按钮的回调函数。"
                }
            }
        }
    ],
    "attributes": {
        "options": {
            "description": "指定当前异常提示的配置信息。",
            "params": {
                "icon": {
                    "type": "ResourceStr",
                    "required": false,
                    "description": "指定当前异常提示的异常图标式样。"
                },
                "tip": {
                    "type": "ResourceStr",
                    "required": false,
                    "description": "指定当前异常提示的文字提示内容。"
                },
                "marginType": {
                    "type": "MarginType",
                    "required": true,
                    "description": "指定当前异常提示的边距样式。"
                },
                "actionText": {
                    "type": "ResourceStr",
                    "required": false,
                    "description": "指定当前异常提示的右侧图标按钮的文字内容。"
                },
                "marginTop": {
                    "type": "Dimension",
                    "required": true,
                    "description": "指定当前异常提示的距离顶部的位置。"
                },
                "isShown": {
                    "type": "boolean",
                    "required": false,
                    "description": "指定当前异常提示的显隐状态。",
                    "default": "true"
                }
            }
        }
    },
    "events": {
        "onTipClick": {
            "description": "点击左侧提示文本的回调函数。",
            "params": {}
        },
        "onActionTextClick": {
            "description": "点击右侧图标按钮的回调函数。",
            "params": {}
        }
    },
    "rules": null,
    "examples": [
        {
            "description": "该组件通过Column布局实现了一个异常提示的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个ExceptionPrompt组件，用于展示异常提示信息。\nExceptionPrompt组件的样式包括图标、提示文本、操作按钮文本、边距类型、顶部边距和是否显示等属性。图标和提示文本用于展示异常信息，操作按钮文本用于提供用户操作选项。边距类型和顶部边距用于控制组件的布局位置，是否显示属性用于控制组件的可见性。\n组件的功能包括点击提示文本和操作按钮文本的事件处理，用户可以通过点击操作按钮触发相应操作。\n整个布局通过Column布局保证ExceptionPrompt组件在垂直方向上居中显示，确保界面整洁美观。",
            "code": "import { ExceptionPrompt, PromptOptions, MarginType } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct Index {\n  // 定义PromptOptions类型的状态变量options，用于配置ExceptionPrompt组件的属性\n  @State options: PromptOptions = {\n    icon: $r('sys.media.ohos_ic_public_fail'), // 设置异常提示图标，资源名为'sys.media.ohos_ic_public_fail'\n    tip: '异常提示', // 设置异常提示文本为'异常提示'\n    marginType: MarginType.DEFAULT_MARGIN, // 设置边距类型为默认边距\n    actionText: '设置网络', // 设置操作按钮文本为'设置网络'\n    marginTop: 80, // 设置顶部边距为80vp\n    isShown: true // 设置组件是否显示为true\n  }\n\n  build() {\n    Column() {\n      ExceptionPrompt({\n        options: this.options, // 传递配置好的PromptOptions对象给ExceptionPrompt组件\n        onTipClick: () => {\n          // 点击提示文本时的回调函数，此处为空函数\n        },\n        onActionTextClick: () => {\n          // 点击操作按钮文本时的回调函数，此处为空函数\n        },\n      })\n    }\n  }\n}"
        },
        {
            "description": "该示例展示了如何在鸿蒙ArkUI中使用自定义对话框（CustomDialog）和异常提示组件（ExceptionPrompt）。布局主要由一个按钮和一个自定义对话框组成。按钮用于触发对话框的显示，对话框内部包含一个异常提示组件、一个文本输入框和两个按钮（取消和确认）。\n\n布局属性：\n- 按钮的宽度为30%，高度为自适应，顶部边距为420vp，zIndex为999，确保按钮在其他组件之上。\n- 对话框的布局宽度为100%，高度为100%，内部组件通过Column和Flex布局进行排列。\n\n组件的样式和外观：\n- 按钮的背景颜色为白色（0xffffff），字体颜色为黑色（Color.Black）。\n- 确认按钮的字体颜色为红色（Color.Red）。\n- 文本输入框的高度为60vp，宽度为90%，顶部边距为70vp。\n\n组件的排列和嵌套关系：\n- 对话框内部通过Column布局，垂直排列异常提示组件、文本输入框和按钮组。\n- 按钮组通过Flex布局，水平排列取消和确认按钮，按钮之间的间距均匀分布，对齐方式为SpaceAround。\n\n组件的功能和交互：\n- 点击按钮会触发对话框的显示。\n- 文本输入框支持输入文本，输入内容会实时更新到绑定的状态变量中。\n- 点击取消按钮会关闭对话框并调用取消回调函数。\n- 点击确认按钮会将文本输入框的内容更新到绑定的状态变量中，并关闭对话框，调用确认回调函数。",
            "code": "import { ExceptionPrompt, PromptOptions, MarginType } from '@kit.ArkUI'\n\n@CustomDialog\nstruct CustomDialogExample {\n  @Link textValue: string // 绑定文本输入框的值\n  @Link inputValue: string // 绑定确认按钮点击后的输入值\n  @State options: PromptOptions = {\n    icon: $r('app.media.ic_public_fail'), // 异常提示图标\n    tip: '异常提示！', // 异常提示文本\n    marginType: MarginType.DEFAULT_MARGIN, // 默认边距类型\n    actionText: '设置', // 操作按钮文本\n    marginTop: 5, // 顶部边距\n    isShown: true // 是否显示\n  }\n  cancel: () => void = () => {} // 取消按钮回调函数\n  confirm: () => void = () => {} // 确认按钮回调函数\n  controller: CustomDialogController // 对话框控制器\n\n  build() {\n    Column() {\n      ExceptionPrompt({\n        options: this.options, // 异常提示组件的配置选项\n      })\n      TextInput({ placeholder: '', text: this.textValue }) // 文本输入框\n        .margin({top:70}) // 顶部边距\n        .height(60) // 高度\n        .width('90%') // 宽度\n        .onChange((value: string) => { // 输入框内容变化时的回调\n          this.textValue = value // 更新文本输入框的值\n        })\n      Text('Whether to change a text?') // 提示文本\n        .fontSize(16) // 字体大小\n        .margin({ bottom: 10 }) // 底部边距\n      Flex({ justifyContent: FlexAlign.SpaceAround }) { // 按钮组布局\n        Button('cancel') // 取消按钮\n          .onClick(() => { // 点击事件\n            this.controller.close() // 关闭对话框\n            this.cancel() // 调用取消回调函数\n          })\n          .backgroundColor(0xffffff) // 背景颜色\n          .fontColor(Color.Black) // 字体颜色\n        Button('confirm') // 确认按钮\n          .onClick(() => { // 点击事件\n            this.inputValue = this.textValue // 更新输入值\n            this.controller.close() // 关闭对话框\n            this.confirm() // 调用确认回调函数\n          })\n          .backgroundColor(0xffffff) // 背景颜色\n          .fontColor(Color.Red) // 字体颜色\n      }\n      .margin({ bottom: 10 }) // 底部边距\n    }\n  }\n}\n\n@Entry\n@Component\nstruct Index1 {\n  @State ButtonText: string = '' // 按钮文本\n  @State MAP_HEIGHT: string = '30%' // 地图高度\n  @State duration: number = 2500 // 动画持续时间\n  @State tips: string = '' // 提示文本\n  @State actionText: string = '' // 操作按钮文本\n  controller: TextInputController = new TextInputController() // 文本输入控制器\n  cancel: () => void = () => {} // 取消按钮回调函数\n  confirm: () => void = () => {} // 确认按钮回调函数\n  @State options: PromptOptions = {\n    icon: $r('app.media.ic_public_fail'), // 异常提示图标\n    tip: '', // 异常提示文本\n    marginType: MarginType.DEFAULT_MARGIN, // 默认边距类型\n    actionText: '', // 操作按钮文本\n    marginTop: 80, // 顶部边距\n    isShown: true // 是否显示\n  }\n  @State textValue: string = '' // 文本输入框的值\n  @State inputValue: string = 'click me' // 确认按钮点击后的输入值\n  dialogController: CustomDialogController | undefined = new CustomDialogController({\n    builder: CustomDialogExample({\n      cancel: this.onCancel, // 取消按钮回调函数\n      confirm: this.onAccept, // 确认按钮回调函数\n      textValue: $textValue, // 绑定文本输入框的值\n      inputValue: $inputValue // 绑定确认按钮点击后的输入值\n    }),\n    cancel: this.existApp, // 取消对话框的回调函数\n    autoCancel: true, // 是否自动取消\n    alignment: DialogAlignment.Bottom, // 对话框对齐方式\n    offset: { dx: 0, dy: -20 }, // 对话框偏移量\n    gridCount: 4, // 网格数量\n    customStyle: false // 是否自定义样式\n  })\n\n  aboutToDisappear() {\n    this.dialogController = undefined // 页面消失时清空对话框控制器\n  }\n\n  onCancel() {\n    console.info('Callback when the first button is clicked') // 取消按钮点击回调\n  }\n\n  onAccept() {\n    console.info('Callback when the second button is clicked') // 确认按钮点击回调\n  }\n\n  existApp() {\n    console.info('Click the callback in the blank area') // 空白区域点击回调\n  }\n\n  build() {\n    Column() {\n      Button('Click Me') // 按钮\n        .width('30%') // 宽度\n        .margin({top:420}) // 顶部边距\n        .zIndex(999) // z轴索引\n        .onClick(()=>{ // 点击事件\n          if (this.dialogController != undefined) {\n            this.dialogController.open() // 打开对话框\n          }\n        })\n    }\n    .height('100%') // 高度\n    .width('100%') // 宽度\n  }\n}"
        }
    ],
    "is_common_attrs": true
}