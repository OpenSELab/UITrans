{
    "description": "ImageBitmap对象可以存储canvas渲染的像素数据。",
    "details": null,
    "interfaces": [
        {
            "description": "ImageBitmap(data: PixelMap, unit?: LengthMetricsUnit)",
            "params": {
                "data": {
                    "type": "PixelMap",
                    "required": true,
                    "description": "通过PixelMap创建ImageBitmap对象。"
                },
                "unit": {
                    "type": "LengthMetricsUnit",
                    "required": false,
                    "description": "用来配置ImageBitmap对象的单位模式，配置后无法动态更改，配置方法同CanvasRenderingContext2D。",
                    "default": "DEFAULT"
                }
            }
        },
        {
            "description": "ImageBitmap(src: string, unit?: LengthMetricsUnit)",
            "params": {
                "src": {
                    "type": "string",
                    "required": true,
                    "description": "图片的数据源支持本地图片。string格式用于加载本地图片，例如ImageBitmap(\"common/images/example.jpg\")，支持本地图片类型：bmp、jpg、png、svg和webp类型。"
                },
                "unit": {
                    "type": "LengthMetricsUnit",
                    "required": false,
                    "description": "用来配置ImageBitmap对象的单位模式，配置后无法动态更改，配置方法同CanvasRenderingContext2D。",
                    "default": "DEFAULT"
                }
            }
        }
    ],
    "attributes": {
        "width": {
            "description": "ImageBitmap的像素宽度。默认单位为vp。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "ImageBitmap的像素宽度。"
                }
            }
        },
        "height": {
            "description": "ImageBitmap的像素高度。默认单位为vp。",
            "params": {
                "value": {
                    "type": "number",
                    "required": true,
                    "description": "ImageBitmap的像素高度。"
                }
            }
        }
    },
    "events": {
        "close": {
            "description": "close(): void\n释放ImageBitmap对象相关联的所有图形资源，并将ImageBitmap对象的宽高置为0。",
            "params": {}
        }
    },
    "rules": null,
    "examples": [
        {
            "description": "该组件通过 Flex 布局实现了一个展示图像的界面。布局宽度占据整个屏幕，高度设为 100%，背景颜色为黄色。组件的垂直方向上居中对齐，包含一个 Canvas 组件用于绘制图像。\nCanvas 组件的宽度为 100%，高度为 100%，背景颜色为黄色。图像通过 CanvasRenderingContext2D 的 drawImage 方法绘制在 Canvas 上，图像的原始尺寸为 500x500，绘制时缩放为 400x200。\n图像绘制完成后，调用 ImageBitmap 的 close 方法释放资源。",
            "code": "@Entry\n@Component\nstruct ImageExample {\n  // 创建 RenderingContextSettings 对象，设置是否支持 HiDPI\n  private settings: RenderingContextSettings = new RenderingContextSettings(true)\n  // 创建 CanvasRenderingContext2D 对象，用于绘制图像\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)\n  // 创建 ImageBitmap 对象，加载图像资源\n  private img: ImageBitmap = new ImageBitmap(\"common/images/example.jpg\")\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建 Canvas 组件，绑定 CanvasRenderingContext2D 对象\n      Canvas(this.context)\n        .width('100%') // 设置 Canvas 宽度为 100%\n        .height('100%') // 设置 Canvas 高度为 100%\n        .backgroundColor('#ffff00') // 设置 Canvas 背景颜色为黄色\n        .onReady(() => {\n          // 在 Canvas 准备好后，绘制图像\n          this.context.drawImage(this.img, 0, 0, 500, 500, 0, 0, 400, 200)\n          // 绘制完成后，释放 ImageBitmap 资源\n          this.img.close()\n        })\n    }\n    .width('100%') // 设置 Flex 容器宽度为 100%\n    .height('100%') // 设置 Flex 容器高度为 100%\n  }\n}"
        },
        {
            "description": "该组件通过 Flex 布局实现了一个展示 Canvas 绘图效果的界面。布局宽度占据整个屏幕，高度设为 100%，内边距为 0。组件的垂直方向上被分为一个部分，包含一个 Canvas 组件。Canvas 组件的宽度占据整个屏幕的宽度，高度占据屏幕高度的 50%。Canvas 组件的背景颜色为黄色（#ffff00）。\n\nCanvas 组件的功能包括绘制一个绿色的矩形，并将其转换为图像，然后在 Canvas 上绘制该图像。具体实现是通过 CanvasRenderingContext2D 上下文对象进行绘图操作。首先，设置填充颜色为绿色（#00ff00），然后绘制一个 100x100 像素的矩形。接着，通过 getPixelMap 方法获取矩形的像素数据，并将其转换为 ImageBitmap 对象。最后，使用 drawImage 方法将该图像绘制到 Canvas 上的指定位置。\n\n整个布局通过 Flex 布局保证 Canvas 在垂直方向上居中对齐，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct Demo {\n  // 创建 RenderingContextSettings 对象，设置是否支持 HiDPI\n  private settings: RenderingContextSettings = new RenderingContextSettings(true)\n  // 创建 CanvasRenderingContext2D 对象，用于绘图操作\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建 Canvas 组件，绑定绘图上下文\n      Canvas(this.context)\n        .width('100%') // 设置 Canvas 宽度为 100%\n        .height('50%') // 设置 Canvas 高度为 50%\n        .backgroundColor('#ffff00') // 设置 Canvas 背景颜色为黄色\n        .onReady(() => {\n          // 设置填充颜色为绿色\n          this.context.fillStyle = \"#00ff00\"\n          // 绘制一个 100x100 像素的矩形\n          this.context.fillRect(0, 0, 100, 100)\n          // 获取矩形的像素数据\n          let pixel = this.context.getPixelMap(0, 0, 100, 100)\n          // 将像素数据转换为 ImageBitmap 对象\n          let image = new ImageBitmap(pixel)\n          // 将图像绘制到 Canvas 上的指定位置\n          this.context.drawImage(image, 100, 100)\n        })\n    }\n    .width('100%') // 设置 Flex 容器宽度为 100%\n    .height('100%') // 设置 Flex 容器高度为 100%\n  }\n}"
        },
        {
            "description": "该组件通过 Flex 布局实现了一个展示图像处理效果的界面。布局宽度占据整个屏幕，高度设为 100%，背景颜色为黄色（#ffff00）。组件的垂直方向上居中对齐，包含一个 Canvas 组件用于绘制图像。\nCanvas 组件的宽度为 100%，高度为 100%，背景颜色为黄色。Canvas 组件的功能是通过 Web Worker 线程处理图像，并将处理后的图像绘制到 Canvas 上。\n图像处理逻辑在 Worker 线程中进行，Worker 线程接收到主线程发送的 ImageBitmap 后，使用 OffscreenCanvas 进行图像处理，并将处理后的 ImageBitmap 发送回主线程，主线程再将图像绘制到 Canvas 上。\n整个布局通过 Flex 布局保证 Canvas 在垂直方向上居中对齐，确保界面整洁美观。",
            "code": "import worker from '@ohos.worker'; // 导入 Web Worker API\n\n@Entry\n@Component\nstruct imageBitmapExamplePage {\n  private settings: RenderingContextSettings = new RenderingContextSettings(true); // 创建 Canvas 渲染上下文设置，启用抗锯齿\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings); // 创建 Canvas 渲染上下文\n  private myWorker = new worker.ThreadWorker('entry/ets/workers/Worker.ts'); // 创建 Web Worker 线程\n  private img: ImageBitmap = new ImageBitmap(\"common/images/example.jpg\"); // 加载图像资源\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Canvas(this.context) // 创建 Canvas 组件\n        .width('100%') // 设置 Canvas 宽度为 100%\n        .height('100%') // 设置 Canvas 高度为 100%\n        .backgroundColor('#ffff00') // 设置 Canvas 背景颜色为黄色\n        .onReady(() => { // Canvas 准备就绪时触发的事件\n          this.myWorker.postMessage({ myImage: this.img }); // 向 Worker 线程发送图像数据\n          this.myWorker.onmessage = (e): void => { // 监听 Worker 线程的消息\n            if (e.data.myImage) { // 如果消息中包含处理后的图像数据\n              let image: ImageBitmap = e.data.myImage; // 获取处理后的图像数据\n              this.context.transferFromImageBitmap(image); // 将处理后的图像绘制到 Canvas 上\n            }\n          }\n        })\n    }\n    .width('100%') // 设置 Flex 容器宽度为 100%\n    .height('100%') // 设置 Flex 容器高度为 100%\n  }\n}\n\n/*\nWorker 线程在 onmessage 中接收到主线程 postMessage 发送的 ImageBitmap，并进行绘制。\n*/\n\nworkerPort.onmessage = function (e: MessageEvents) { // 监听主线程的消息\n  if (e.data.myImage) { // 如果消息中包含图像数据\n    let img = e.data.myImage; // 获取图像数据\n    let offCanvas = new OffscreenCanvas(600, 600); // 创建 OffscreenCanvas 用于图像处理\n    let offContext = offCanvas.getContext(\"2d\"); // 获取 OffscreenCanvas 的 2D 渲染上下文\n    offContext.drawImage(img, 0, 0, 500, 500, 0, 0, 400, 200); // 在 OffscreenCanvas 上绘制图像\n    let image = offCanvas.transferToImageBitmap(); // 将 OffscreenCanvas 转换为 ImageBitmap\n    workerPort.postMessage({ myImage: image }); // 将处理后的 ImageBitmap 发送回主线程\n  }\n}"
        }
    ],
    "is_common_attrs": true
}