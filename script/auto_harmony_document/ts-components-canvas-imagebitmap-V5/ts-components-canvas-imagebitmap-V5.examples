/*\n实现一个在Canvas上绘制图像的组件。该组件使用Flex布局，将Canvas居中显示，并在Canvas准备好后绘制一张图片。图片绘制完成后，释放图片资源。\n*/\n\n@Entry // 标记该组件为入口组件\n@Component // 标记该结构体为一个组件\nstruct ImageExample {\n  private settings: RenderingContextSettings = new RenderingContextSettings(true) // 创建一个RenderingContextSettings对象，设置是否支持3D渲染\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings) // 创建一个CanvasRenderingContext2D对象，用于绘制2D图形\n  private img: ImageBitmap = new ImageBitmap("common/images/example.jpg") // 创建一个ImageBitmap对象，加载指定路径的图片\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) { // 使用Flex布局，方向为列布局，居中对齐\n      Canvas(this.context) // 创建一个Canvas组件，使用之前创建的CanvasRenderingContext2D对象\n        .width('100%') // 设置Canvas宽度为父容器的100%\n        .height('100%') // 设置Canvas高度为父容器的100%\n        .backgroundColor('#ffff00') // 设置Canvas背景颜色为黄色\n        .onReady(() => { // 当Canvas准备好时执行回调函数\n          this.context.drawImage(this.img, 0, 0, 500, 500, 0, 0, 400, 200) // 在Canvas上绘制图片，图片从(0, 0)开始绘制，原始图片大小为500x500，绘制到Canvas上的大小为400x200\n          this.img.close() // 绘制完成后，释放图片资源\n        })\n    }\n    .width('100%') // 设置Flex容器的宽度为父容器的100%\n    .height('100%') // 设置Flex容器的高度为父容器的100%\n  }\n}


/*\n实现一个简单的Canvas绘图示例，展示如何在鸿蒙ArkUI中使用Canvas进行基本的图形绘制和图像处理。\n布局为一个垂直居中的Flex容器，内部包含一个Canvas组件，占据屏幕的50%高度。\n*/\n\n@Entry\n@Component\nstruct Demo {\n  // 创建一个RenderingContextSettings对象，启用抗锯齿功能\n  private settings: RenderingContextSettings = new RenderingContextSettings(true)\n  \n  // 创建一个CanvasRenderingContext2D对象，用于绘制2D图形\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建一个Canvas组件，绑定到之前创建的CanvasRenderingContext2D对象\n      Canvas(this.context)\n        .width('100%') // 设置Canvas的宽度为父容器的100%\n        .height('50%') // 设置Canvas的高度为父容器的50%\n        .backgroundColor('#ffff00') // 设置Canvas的背景颜色为黄色\n        .onReady(() => {\n          // 设置填充颜色为绿色\n          this.context.fillStyle = "#00ff00"\n          \n          // 绘制一个绿色的矩形，位置为(0, 0)，大小为100x100\n          this.context.fillRect(0, 0, 100, 100)\n          \n          // 获取Canvas上指定区域的像素数据，生成一个PixelMap对象\n          let pixel = this.context.getPixelMap(0, 0, 100, 100)\n          \n          // 将PixelMap对象转换为ImageBitmap对象\n          let image = new ImageBitmap(pixel)\n          \n          // 在Canvas上绘制ImageBitmap对象，位置为(100, 100)\n          this.context.drawImage(image, 100, 100)\n        })\n    }\n    .width('100%') // 设置Flex容器的宽度为父容器的100%\n    .height('100%') // 设置Flex容器的高度为父容器的100%\n  }\n}


/*\n实现一个在Canvas上绘制图像的示例页面。该页面通过主线程与Worker线程的通信，将图像数据传递给Worker线程进行处理，并将处理后的图像数据返回给主线程，最终在Canvas上绘制出来。\n*/\n\n// 导入Worker模块，用于创建和管理Worker线程\nimport worker from '@ohos.worker';\n\n// 定义一个组件，作为页面的入口\n@Entry\n@Component\nstruct imageBitmapExamplePage {\n  // 创建一个RenderingContextSettings对象，用于配置Canvas的渲染上下文\n  private settings: RenderingContextSettings = new RenderingContextSettings(true);\n  \n  // 创建一个CanvasRenderingContext2D对象，用于在Canvas上进行绘图操作\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings);\n  \n  // 创建一个Worker线程，用于处理图像数据\n  private myWorker = new worker.ThreadWorker('entry/ets/workers/Worker.ts');\n  \n  // 创建一个ImageBitmap对象，用于加载图像数据\n  private img: ImageBitmap = new ImageBitmap("common/images/example.jpg");\n\n  // 构建页面的UI结构\n  build() {\n    // 使用Flex布局，设置布局方向为列，居中对齐\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建一个Canvas组件，并绑定渲染上下文\n      Canvas(this.context)\n        .width('100%') // 设置Canvas宽度为100%\n        .height('100%') // 设置Canvas高度为100%\n        .backgroundColor('#ffff00') // 设置Canvas背景颜色为黄色\n        .onReady(() => {\n          // 当Canvas准备好后，向Worker线程发送图像数据\n          this.myWorker.postMessage({ myImage: this.img });\n          \n          // 监听Worker线程的消息\n          this.myWorker.onmessage = (e): void => {\n            // 如果接收到Worker线程返回的图像数据\n            if (e.data.myImage) {\n              // 获取处理后的图像数据\n              let image: ImageBitmap = e.data.myImage;\n              \n              // 将处理后的图像数据绘制到Canvas上\n              this.context.transferFromImageBitmap(image);\n            }\n          }\n        })\n    }\n    .width('100%') // 设置Flex容器的宽度为100%\n    .height('100%') // 设置Flex容器的高度为100%\n  }\n}\n\n// Worker线程的逻辑\nworkerPort.onmessage = function (e: MessageEvents) {\n  // 如果接收到主线程发送的图像数据\n  if (e.data.myImage) {\n    // 获取图像数据\n    let img = e.data.myImage;\n    \n    // 创建一个OffscreenCanvas对象，用于在Worker线程中进行图像处理\n    let offCanvas = new OffscreenCanvas(600, 600);\n    \n    // 获取OffscreenCanvas的2D渲染上下文\n    let offContext = offCanvas.getContext("2d");\n    \n    // 在OffscreenCanvas上绘制图像，并进行缩放和裁剪\n    offContext.drawImage(img, 0, 0, 500, 500, 0, 0, 400, 200);\n    \n    // 将OffscreenCanvas的内容转换为ImageBitmap对象\n    let image = offCanvas.transferToImageBitmap();\n    \n    // 将处理后的图像数据发送回主线程\n    workerPort.postMessage({ myImage: image });\n  }\n}