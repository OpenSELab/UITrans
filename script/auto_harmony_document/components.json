{
    "Flex": {
        "description": "以弹性方式布局子组件的容器组件。",
        "interfaces": [
            {
                "description": "标准Flex布局容器。具体指南请参考",
                "params": {
                    "value": {
                        "type": "FlexOptions",
                        "required": false,
                        "description": "Flex布局的配置选项。"
                    }
                }
            }
        ],
        "attributes": {
            "direction": {
                "description": "子组件在Flex容器上排列的方向，即主轴的方向。",
                "params": {
                    "value": {
                        "type": "FlexDirection",
                        "required": false,
                        "description": "子组件排列方向。",
                        "default": "FlexDirection.Row"
                    }
                }
            },
            "wrap": {
                "description": "Flex容器是单行/列还是多行/列排列。在多行布局时，通过交叉轴方向，确认新行堆叠方向。",
                "params": {
                    "value": {
                        "type": "FlexWrap",
                        "required": false,
                        "description": "容器排列方式。",
                        "default": "FlexWrap.NoWrap"
                    }
                }
            },
            "justifyContent": {
                "description": "所有子组件在Flex容器主轴上的对齐格式。",
                "params": {
                    "value": {
                        "type": "FlexAlign",
                        "required": false,
                        "description": "主轴对齐格式。",
                        "default": "FlexAlign.Start"
                    }
                }
            },
            "alignItems": {
                "description": "所有子组件在Flex容器交叉轴上的对齐格式。",
                "params": {
                    "value": {
                        "type": "ItemAlign",
                        "required": false,
                        "description": "交叉轴对齐格式。",
                        "default": "ItemAlign.Start"
                    }
                }
            },
            "alignContent": {
                "description": "交叉轴中有额外的空间时，多行内容的对齐方式。仅在wrap为Wrap或WrapReverse下生效。",
                "params": {
                    "value": {
                        "type": "FlexAlign",
                        "required": false,
                        "description": "多行内容对齐方式。",
                        "default": "FlexAlign.Start"
                    }
                }
            },
            "space": {
                "description": "所有子组件在Flex容器主轴或交叉轴的space。space为负数、百分比或者justifyContent设置为FlexAlign.SpaceBetween、FlexAlign.SpaceAround、FlexAlign.SpaceEvenly时不生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。",
                "params": {
                    "value": {
                        "type": "FlexSpaceOptions",
                        "required": false,
                        "description": "主轴或交叉轴的space。",
                        "default": "{main: LengthMetrics.px(0), cross: LengthMetrics.px(0)}"
                    }
                }
            }
        },
        "events": {},
        "examples": [
            {
                "description": "实现一个展示Flex布局不同wrap模式的示例，通过设置不同的FlexWrap属性，展示子组件在多行、单行和反向多行布局下的效果。",
                "code": "@Entry\n@Component\nstruct FlexExample2 {\n  build() {\n    Column() {\n      Column({ space: 5 }) {\n        // 显示标题“Wrap”，字体大小为9，颜色为灰色，宽度为90%\n        Text('Wrap').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 使用Flex布局，设置wrap模式为FlexWrap.Wrap，子组件将多行布局\n        Flex({ wrap: FlexWrap.Wrap }) {\n          Text('1').width('50%').height(50).backgroundColor(0xF5DEB3) // 文本“1”，宽度50%，高度50，背景色为浅棕色\n          Text('2').width('50%').height(50).backgroundColor(0xD2B48C) // 文本“2”，宽度50%，高度50，背景色为棕色\n          Text('3').width('50%').height(50).backgroundColor(0xD2B48C) // 文本“3”，宽度50%，高度50，背景色为棕色\n        }\n        .width('90%') // Flex组件宽度为90%\n        .padding(10) // 内边距为10\n        .backgroundColor(0xAFEEEE) // 背景色为浅蓝色\n\n        // 显示标题“NoWrap”，字体大小为9，颜色为灰色，宽度为90%\n        Text('NoWrap').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 使用Flex布局，设置wrap模式为FlexWrap.NoWrap，子组件将单行布局\n        Flex({ wrap: FlexWrap.NoWrap }) {\n          Text('1').width('50%').height(50).backgroundColor(0xF5DEB3) // 文本“1”，宽度50%，高度50，背景色为浅棕色\n          Text('2').width('50%').height(50).backgroundColor(0xD2B48C) // 文本“2”，宽度50%，高度50，背景色为棕色\n          Text('3').width('50%').height(50).backgroundColor(0xF5DEB3) // 文本“3”，宽度50%，高度50，背景色为浅棕色\n        }\n        .width('90%') // Flex组件宽度为90%\n        .padding(10) // 内边距为10\n        .backgroundColor(0xAFEEEE) // 背景色为浅蓝色\n\n        // 显示标题“WrapReverse”，字体大小为9，颜色为灰色，宽度为90%\n        Text('WrapReverse').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 使用Flex布局，设置wrap模式为FlexWrap.WrapReverse，子组件将反向多行布局，方向为行\n        Flex({ wrap: FlexWrap.WrapReverse , direction:FlexDirection.Row }) {\n          Text('1').width('50%').height(50).backgroundColor(0xF5DEB3) // 文本“1”，宽度50%，高度50，背景色为浅棕色\n          Text('2').width('50%').height(50).backgroundColor(0xD2B48C) // 文本“2”，宽度50%，高度50，背景色为棕色\n          Text('3').width('50%').height(50).backgroundColor(0xD2B48C) // 文本“3”，宽度50%，高度50，背景色为棕色\n        }\n        .width('90%') // Flex组件宽度为90%\n        .height(120) // 高度为120\n        .padding(10) // 内边距为10\n        .backgroundColor(0xAFEEEE) // 背景色为浅蓝色\n      }.width('100%').margin({ top: 5 }) // 内部Column组件宽度为100%，顶部外边距为5\n    }.width('100%') // 外部Column组件宽度为100%\n  }\n}"
            },
            {
                "description": "实现一个展示Flex布局不同wrap模式的示例组件。通过设置不同的FlexWrap模式（Wrap、NoWrap、WrapReverse），展示子组件在不同布局模式下的排列效果。每个Flex容器内的子组件通过设置不同的宽度和高度，以及背景颜色，来直观展示布局效果。",
                "code": "import {LengthMetrics} from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct FlexExample2 {\n  build() {\n    Column() {\n      Column({ space: 5 }) {\n        // 标题文本，显示“Wrap”，字体大小为9，颜色为灰色，宽度为90%\n        Text('Wrap').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // Flex容器，设置为多行布局（FlexWrap.Wrap），主轴和交叉轴的间距均为50px\n        Flex({ wrap: FlexWrap.Wrap, space: {main: LengthMetrics.px(50), cross: LengthMetrics.px(50)} }) { // 子组件多行布局\n          Text('1').width('40%').height(50).backgroundColor(0xF5DEB3) // 文本“1”，宽度40%，高度50，背景色为浅棕色\n          Text('2').width('40%').height(50).backgroundColor(0xD2B48C) // 文本“2”，宽度40%，高度50，背景色为棕色\n          Text('3').width('40%').height(50).backgroundColor(0xD2B48C) // 文本“3”，宽度40%，高度50，背景色为棕色\n        }\n        .width('90%') // Flex容器的宽度为90%\n        .padding(10) // 内边距为10\n        .backgroundColor(0xAFEEEE) // 背景色为浅蓝色\n\n        // 标题文本，显示“NoWrap”，字体大小为9，颜色为灰色，宽度为90%\n        Text('NoWrap').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // Flex容器，设置为单行布局（FlexWrap.NoWrap），主轴和交叉轴的间距均为50px\n        Flex({ wrap: FlexWrap.NoWrap, space: {main: LengthMetrics.px(50), cross: LengthMetrics.px(50)} }) { // 子组件单行布局\n          Text('1').width('50%').height(50).backgroundColor(0xF5DEB3) // 文本“1”，宽度50%，高度50，背景色为浅棕色\n          Text('2').width('50%').height(50).backgroundColor(0xD2B48C) // 文本“2”，宽度50%，高度50，背景色为棕色\n          Text('3').width('50%').height(50).backgroundColor(0xF5DEB3) // 文本“3”，宽度50%，高度50，背景色为浅棕色\n        }\n        .width('90%') // Flex容器的宽度为90%\n        .padding(10) // 内边距为10\n        .backgroundColor(0xAFEEEE) // 背景色为浅蓝色\n\n        // 标题文本，显示“WrapReverse”，字体大小为9，颜色为灰色，宽度为90%\n        Text('WrapReverse').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // Flex容器，设置为反向多行布局（FlexWrap.WrapReverse），主轴为行方向（FlexDirection.Row），主轴和交叉轴的间距均为50px\n        Flex({ wrap: FlexWrap.WrapReverse, direction:FlexDirection.Row, space: {main: LengthMetrics.px(50), cross: LengthMetrics.px(50)} }) { // 子组件反向多行布局\n          Text('1').width('40%').height(50).backgroundColor(0xF5DEB3) // 文本“1”，宽度40%，高度50，背景色为浅棕色\n          Text('2').width('40%').height(50).backgroundColor(0xD2B48C) // 文本“2”，宽度40%，高度50，背景色为棕色\n          Text('3').width('40%').height(50).backgroundColor(0xD2B48C) // 文本“3”，宽度40%，高度50，背景色为棕色\n        }\n        .width('90%') // Flex容器的宽度为90%\n        .height(120) // 高度为120\n        .padding(10) // 内边距为10\n        .backgroundColor(0xAFEEEE) // 背景色为浅蓝色\n      }.width('100%').margin({ top: 5 }) // 内部Column的宽度为100%，上外边距为5\n    }.width('100%') // 外部Column的宽度为100%\n  }\n}"
            },
            {
                "description": "实现一个Flex布局示例，展示不同justifyContent属性值对子组件在主轴上对齐方式的影响。\n通过设置不同的justifyContent值，子组件在Flex容器中的对齐方式会有所不同，包括首端对齐、居中对齐、尾端对齐、均分布局等。\n@Component\nstruct JustifyContentFlex {\n定义一个属性justifyContent，用于设置Flex容器的justifyContent属性\njustifyContent : number = 0;\nbuild() {\n创建一个Flex容器，并设置其justifyContent属性为传入的值\nFlex({ justifyContent: this.justifyContent }) {\n创建一个Text组件，显示数字'1'，设置宽度为20%，高度为50，背景颜色为0xF5DEB3\nText('1').width('20%').height(50).backgroundColor(0xF5DEB3)\n创建一个Text组件，显示数字'2'，设置宽度为20%，高度为50，背景颜色为0xD2B48C\nText('2').width('20%').height(50).backgroundColor(0xD2B48C)\n创建一个Text组件，显示数字'3'，设置宽度为20%，高度为50，背景颜色为0xF5DEB3\nText('3').width('20%').height(50).backgroundColor(0xF5DEB3)\n}\n设置Flex容器的宽度为90%\n.width('90%')\n设置Flex容器的内边距为10\n.padding(10)\n设置Flex容器的背景颜色为0xAFEEEE\n.backgroundColor(0xAFEEEE)\n}\n}",
                "code": "@Entry\n@Component\nstruct FlexExample3 {\n  build() {\n    // 创建一个Column容器，用于垂直排列子组件\n    Column() {\n      // 创建一个Column容器，设置子组件之间的间距为5\n      Column({ space: 5 }) {\n        // 创建一个Text组件，显示'justifyContent:Start'，设置字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('justifyContent:Start').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个JustifyContentFlex组件，设置justifyContent属性为FlexAlign.Start，子组件在容器主轴上首端对齐\n        JustifyContentFlex({ justifyContent: FlexAlign.Start })\n\n        // 创建一个Text组件，显示'justifyContent:Center'，设置字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('justifyContent:Center').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个JustifyContentFlex组件，设置justifyContent属性为FlexAlign.Center，子组件在容器主轴上居中对齐\n        JustifyContentFlex({ justifyContent: FlexAlign.Center })\n\n        // 创建一个Text组件，显示'justifyContent:End'，设置字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('justifyContent:End').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个JustifyContentFlex组件，设置justifyContent属性为FlexAlign.End，子组件在容器主轴上尾端对齐\n        JustifyContentFlex({ justifyContent: FlexAlign.End })\n\n        // 创建一个Text组件，显示'justifyContent:SpaceBetween'，设置字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('justifyContent:SpaceBetween').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个JustifyContentFlex组件，设置justifyContent属性为FlexAlign.SpaceBetween，子组件在容器主轴上均分容器布局，第一个子组件与行首对齐，最后一个子组件与行尾对齐\n        JustifyContentFlex({ justifyContent: FlexAlign.SpaceBetween })\n\n        // 创建一个Text组件，显示'justifyContent:SpaceAround'，设置字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('justifyContent:SpaceAround').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个JustifyContentFlex组件，设置justifyContent属性为FlexAlign.SpaceAround，子组件在容器主轴上均分容器布局，第一个子组件到行首的距离和最后一个子组件到行尾的距离是相邻子组件之间距离的一半\n        JustifyContentFlex({ justifyContent: FlexAlign.SpaceAround })\n\n        // 创建一个Text组件，显示'justifyContent:SpaceEvenly'，设置字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('justifyContent:SpaceEvenly').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个JustifyContentFlex组件，设置justifyContent属性为FlexAlign.SpaceEvenly，子组件在容器主轴上均分容器布局，子组件之间的距离与第一子组件到行首、最后一个子组件到行尾的距离相等\n        JustifyContentFlex({ justifyContent: FlexAlign.SpaceEvenly })\n      }\n      // 设置Column容器的宽度为100%，并设置顶部外边距为5\n      .width('100%').margin({ top: 5 })\n    }\n    // 设置Column容器的宽度为100%\n    .width('100%')\n  }\n}"
            },
            {
                "description": "实现一个Flex布局示例，展示不同alignItems属性值对子组件在交叉轴上的对齐方式的影响。通过不同的alignItems值，子组件可以在交叉轴上分别实现自动对齐、首部对齐、居中对齐、尾部对齐、拉伸填充以及基线对齐。\n定义一个名为AlignItemsFlex的组件，该组件用于展示不同alignItems属性值的效果\n@Component\nstruct AlignItemsFlex {\n定义一个alignItems属性，用于接收外部传入的对齐方式\nalignItems : number = 0;\n构建方法，用于定义组件的布局和样式\nbuild() {\n使用Flex布局，并设置alignItems属性为外部传入的值\nFlex({ alignItems: this.alignItems }) {\n第一个子组件，文本内容为'1'，宽度为33%，高度为30，背景颜色为0xF5DEB3\nText('1').width('33%').height(30).backgroundColor(0xF5DEB3)\n第二个子组件，文本内容为'2'，宽度为33%，高度为40，背景颜色为0xD2B48C\nText('2').width('33%').height(40).backgroundColor(0xD2B48C)\n第三个子组件，文本内容为'3'，宽度为33%，高度为50，背景颜色为0xF5DEB3\nText('3').width('33%').height(50).backgroundColor(0xF5DEB3)\n}\n设置Flex容器的尺寸，宽度为90%，高度为80\n.size({width: '90%', height: 80})\n设置Flex容器的内边距为10\n.padding(10)\n设置Flex容器的背景颜色为0xAFEEEE\n.backgroundColor(0xAFEEEE)\n}\n}\n定义一个名为FlexExample4的入口组件，该组件用于展示不同alignItems值的效果",
                "code": "@Entry\n@Component\nstruct FlexExample4 {\n  // 构建方法，用于定义组件的布局和样式\n  build() {\n    // 使用Column布局，用于垂直排列子组件\n    Column() {\n      // 使用Column布局，设置子组件之间的间距为5\n      Column({ space: 5 }) {\n        // 文本组件，显示'alignItems:Auto'，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('alignItems:Auto').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 使用AlignItemsFlex组件，传入alignItems值为ItemAlign.Auto，子组件在交叉轴上自动对齐\n        AlignItemsFlex({ alignItems: ItemAlign.Auto })\n\n        // 文本组件，显示'alignItems:Start'，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('alignItems:Start').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 使用AlignItemsFlex组件，传入alignItems值为ItemAlign.Start，子组件在交叉轴上首部对齐\n        AlignItemsFlex({ alignItems: ItemAlign.Start })\n\n        // 文本组件，显示'alignItems:Center'，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('alignItems:Center').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 使用AlignItemsFlex组件，传入alignItems值为ItemAlign.Center，子组件在交叉轴上居中对齐\n        AlignItemsFlex({ alignItems: ItemAlign.Center })\n\n        // 文本组件，显示'alignItems:End'，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('alignItems:End').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 使用AlignItemsFlex组件，传入alignItems值为ItemAlign.End，子组件在交叉轴上尾部对齐\n        AlignItemsFlex({ alignItems: ItemAlign.End })\n\n        // 文本组件，显示'alignItems:Stretch'，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('alignItems:Stretch').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 使用AlignItemsFlex组件，传入alignItems值为ItemAlign.Stretch，子组件在交叉轴上拉伸填充\n        AlignItemsFlex({ alignItems: ItemAlign.Stretch })\n\n        // 文本组件，显示'alignItems:Baseline'，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Text('alignItems:Baseline').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 使用AlignItemsFlex组件，传入alignItems值为ItemAlign.Baseline，子组件在交叉轴上与文本基线对齐\n        AlignItemsFlex({ alignItems: ItemAlign.Baseline })\n      }\n      // 设置Column容器的宽度为100%，并设置顶部外边距为5\n      .width('100%').margin({ top: 5 })\n    }\n    // 设置Column容器的宽度为100%\n    .width('100%')\n  }\n}"
            },
            {
                "description": "实现一个展示Flex布局不同方向的示例组件。通过设置Flex组件的direction属性，展示子组件在容器主轴上的不同布局方式，包括行布局、反向行布局、列布局和反向列布局。每个布局示例都包含四个文本组件，分别显示不同的背景颜色，以便直观地展示布局效果。",
                "code": "@Entry\n@Component\nstruct FlexExample1 {\n  build() {\n    Column() {\n      Column({ space: 5 }) {\n        // 显示标题文本，字体大小为9，颜色为灰色，宽度为90%\n        Text('direction:Row').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个Flex容器，设置布局方向为行布局\n        Flex({ direction: FlexDirection.Row }) { // 子组件在容器主轴上行布局\n          // 创建四个文本组件，宽度为20%，高度为50，背景颜色分别为浅棕色和深棕色\n          Text('1').width('20%').height(50).backgroundColor(0xF5DEB3)\n          Text('2').width('20%').height(50).backgroundColor(0xD2B48C)\n          Text('3').width('20%').height(50).backgroundColor(0xF5DEB3)\n          Text('4').width('20%').height(50).backgroundColor(0xD2B48C)\n        }\n        .height(70) // 设置Flex容器的高度为70\n        .width('90%') // 设置Flex容器的宽度为90%\n        .padding(10) // 设置Flex容器的内边距为10\n        .backgroundColor(0xAFEEEE) // 设置Flex容器的背景颜色为浅蓝色\n\n        // 显示标题文本，字体大小为9，颜色为灰色，宽度为90%\n        Text('direction:RowReverse').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个Flex容器，设置布局方向为反向行布局\n        Flex({ direction: FlexDirection.RowReverse }) { // 子组件在容器主轴上反向行布局\n          // 创建四个文本组件，宽度为20%，高度为50，背景颜色分别为浅棕色和深棕色\n          Text('1').width('20%').height(50).backgroundColor(0xF5DEB3)\n          Text('2').width('20%').height(50).backgroundColor(0xD2B48C)\n          Text('3').width('20%').height(50).backgroundColor(0xF5DEB3)\n          Text('4').width('20%').height(50).backgroundColor(0xD2B48C)\n        }\n        .height(70) // 设置Flex容器的高度为70\n        .width('90%') // 设置Flex容器的宽度为90%\n        .padding(10) // 设置Flex容器的内边距为10\n        .backgroundColor(0xAFEEEE) // 设置Flex容器的背景颜色为浅蓝色\n\n        // 显示标题文本，字体大小为9，颜色为灰色，宽度为90%\n        Text('direction:Column').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个Flex容器，设置布局方向为列布局\n        Flex({ direction: FlexDirection.Column }) { // 子组件在容器主轴上列布局\n          // 创建四个文本组件，宽度为100%，高度为40，背景颜色分别为浅棕色和深棕色\n          Text('1').width('100%').height(40).backgroundColor(0xF5DEB3)\n          Text('2').width('100%').height(40).backgroundColor(0xD2B48C)\n          Text('3').width('100%').height(40).backgroundColor(0xF5DEB3)\n          Text('4').width('100%').height(40).backgroundColor(0xD2B48C)\n        }\n        .height(160) // 设置Flex容器的高度为160\n        .width('90%') // 设置Flex容器的宽度为90%\n        .padding(10) // 设置Flex容器的内边距为10\n        .backgroundColor(0xAFEEEE) // 设置Flex容器的背景颜色为浅蓝色\n\n        // 显示标题文本，字体大小为9，颜色为灰色，宽度为90%\n        Text('direction:ColumnReverse').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个Flex容器，设置布局方向为反向列布局\n        Flex({ direction: FlexDirection.ColumnReverse }) { // 子组件在容器主轴上反向列布局\n          // 创建四个文本组件，宽度为100%，高度为40，背景颜色分别为浅棕色和深棕色\n          Text('1').width('100%').height(40).backgroundColor(0xF5DEB3)\n          Text('2').width('100%').height(40).backgroundColor(0xD2B48C)\n          Text('3').width('100%').height(40).backgroundColor(0xF5DEB3)\n          Text('4').width('100%').height(40).backgroundColor(0xD2B48C)\n        }\n        .height(160) // 设置Flex容器的高度为160\n        .width('90%') // 设置Flex容器的宽度为90%\n        .padding(10) // 设置Flex容器的内边距为10\n        .backgroundColor(0xAFEEEE) // 设置Flex容器的背景颜色为浅蓝色\n      }.width('100%').margin({ top: 5 }) // 设置内部Column容器的宽度为100%，顶部外边距为5\n    }.width('100%') // 设置外部Column容器的宽度为100%\n  }\n}"
            },
            {
                "description": "实现一个Flex布局示例，展示不同alignContent属性值对多行子组件布局的影响。通过设置不同的alignContent属性，可以控制多行子组件在Flex容器中的对齐方式。\n@Component\nstruct AlignContentFlex {\nalignContent: number = 0;  定义alignContent属性，用于控制多行子组件的对齐方式\nbuild() {\nFlex({ wrap: FlexWrap.Wrap, alignContent: this.alignContent }) {\n创建一个Flex容器，设置换行属性为FlexWrap.Wrap，并根据传入的alignContent属性值进行对齐\nText('1').width('50%').height(20).backgroundColor(0xF5DEB3)  创建一个宽度为50%、高度为20的文本组件，背景色为0xF5DEB3\nText('2').width('50%').height(20).backgroundColor(0xD2B48C)  创建一个宽度为50%、高度为20的文本组件，背景色为0xD2B48C\nText('3').width('50%').height(20).backgroundColor(0xD2B48C)  创建一个宽度为50%、高度为20的文本组件，背景色为0xD2B48C\n}\n.size({ width: '90%', height: 90 })  设置Flex容器的尺寸为宽度90%、高度90\n.padding(10)  设置Flex容器的内边距为10\n.backgroundColor(0xAFEEEE)  设置Flex容器的背景色为0xAFEEEE\n}\n}",
                "code": "@Entry\n@Component\nstruct FlexExample5 {\n  build() {\n    Column() {\n      Column({ space: 5 }) {\n        // 创建一个Column容器，设置子组件之间的间距为5\n        Text('alignContent:Start').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个文本组件，显示alignContent:Start，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        AlignContentFlex({ alignContent: FlexAlign.Start }) // 创建AlignContentFlex组件，设置alignContent属性为FlexAlign.Start，多行布局下子组件首部对齐\n\n        Text('alignContent:Center').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个文本组件，显示alignContent:Center，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        AlignContentFlex({ alignContent: FlexAlign.Center }) // 创建AlignContentFlex组件，设置alignContent属性为FlexAlign.Center，多行布局下子组件居中对齐\n\n        Text('alignContent:End').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个文本组件，显示alignContent:End，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        AlignContentFlex({ alignContent: FlexAlign.End }) // 创建AlignContentFlex组件，设置alignContent属性为FlexAlign.End，多行布局下子组件尾部对齐\n\n        Text('alignContent:SpaceBetween').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个文本组件，显示alignContent:SpaceBetween，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        AlignContentFlex({ alignContent: FlexAlign.SpaceBetween }) // 创建AlignContentFlex组件，设置alignContent属性为FlexAlign.SpaceBetween，多行布局下第一行子组件与列首对齐，最后一行子组件与列尾对齐\n\n        Text('alignContent:SpaceAround').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个文本组件，显示alignContent:SpaceAround，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        AlignContentFlex({ alignContent: FlexAlign.SpaceAround }) // 创建AlignContentFlex组件，设置alignContent属性为FlexAlign.SpaceAround，多行布局下第一行子组件到列首的距离和最后一行子组件到列尾的距离是相邻行之间距离的一半\n\n        Text('alignContent:SpaceEvenly').fontSize(9).fontColor(0xCCCCCC).width('90%')\n        // 创建一个文本组件，显示alignContent:SpaceEvenly，字体大小为9，字体颜色为0xCCCCCC，宽度为90%\n        Flex({\n          wrap: FlexWrap.Wrap,\n          alignContent: FlexAlign.SpaceEvenly\n        }) { // 创建一个Flex容器，设置换行属性为FlexWrap.Wrap，alignContent属性为FlexAlign.SpaceEvenly，多行布局下相邻行之间的距离与第一行子组件到列首的距离、最后一行子组件到列尾的距离完全一样\n          Text('1').width('50%').height(20).backgroundColor(0xF5DEB3) // 创建一个宽度为50%、高度为20的文本组件，背景色为0xF5DEB3\n          Text('2').width('50%').height(20).backgroundColor(0xD2B48C) // 创建一个宽度为50%、高度为20的文本组件，背景色为0xD2B48C\n          Text('3').width('50%').height(20).backgroundColor(0xF5DEB3) // 创建一个宽度为50%、高度为20的文本组件，背景色为0xF5DEB3\n          Text('4').width('50%').height(20).backgroundColor(0xD2B48C) // 创建一个宽度为50%、高度为20的文本组件，背景色为0xD2B48C\n          Text('5').width('50%').height(20).backgroundColor(0xF5DEB3) // 创建一个宽度为50%、高度为20的文本组件，背景色为0xF5DEB3\n        }\n        .size({ width: '90%', height: 100 }) // 设置Flex容器的尺寸为宽度90%、高度100\n        .padding({ left: 10, right: 10 }) // 设置Flex容器的左右内边距为10\n        .backgroundColor(0xAFEEEE) // 设置Flex容器的背景色为0xAFEEEE\n      }.width('100%').margin({ top: 5 }) // 设置Column容器的宽度为100%，上外边距为5\n    }.width('100%') // 设置Column容器的宽度为100%\n  }\n}"
            }
        ]
    },
    "Column": {
        "description": "沿垂直方向布局的容器组件，可以包含子组件。",
        "interfaces": [
            {
                "description": "Column(value?: {space?: string | number})",
                "params": {
                    "space": {
                        "type": [
                            "string",
                            "number"
                        ],
                        "description": "纵向布局元素垂直方向间距。从API version 9开始，space为负数或者justifyContent设置为FlexAlign.SpaceBetween、FlexAlign.SpaceAround、FlexAlign.SpaceEvenly时不生效。",
                        "default": 0
                    }
                }
            }
        ],
        "attributes": {
            "alignItems": {
                "description": "设置子组件在水平方向上的对齐格式。",
                "params": {
                    "value": {
                        "type": "HorizontalAlign",
                        "required": true,
                        "description": "子组件在水平方向上的对齐格式。",
                        "default": "HorizontalAlign.Center"
                    }
                }
            },
            "justifyContent": {
                "description": "设置子组件在垂直方向上的对齐格式。",
                "params": {
                    "value": {
                        "type": "FlexAlign",
                        "required": true,
                        "description": "子组件在垂直方向上的对齐格式。",
                        "default": "FlexAlign.Start"
                    }
                }
            }
        },
        "events": {
            "generalEvents": {
                "description": "支持通用事件。",
                "params": {}
            }
        },
        "is_common_attrs": true,
        "examples": [
            {
                "description": "实现一个展示Column组件布局和样式特性的示例。通过设置子元素的间距、水平对齐方式和垂直对齐方式，展示Column组件的灵活性和多样性。",
                "code": "@Entry\n@Component\nstruct ColumnExample {\n  build() {\n    Column({ space: 5 }) { // 设置子元素垂直方向间距为5\n      Text('space').width('90%') // 显示文本“space”，宽度为父容器的90%\n\n      Column({ space: 5 }) { // 嵌套Column，设置子元素垂直方向间距为5\n        Column().width('100%').height(30).backgroundColor(0xAFEEEE) // 创建一个宽度为100%、高度为30的Column，背景色为浅蓝色\n        Column().width('100%').height(30).backgroundColor(0x00FFFF) // 创建一个宽度为100%、高度为30的Column，背景色为青色\n      }.width('90%').height(100).border({ width: 1 }) // 设置嵌套Column的宽度为父容器的90%，高度为100，并添加1像素的边框\n\n      Text('alignItems(Start)').width('90%') // 显示文本“alignItems(Start)”，宽度为父容器的90%\n      Column() {\n        Column().width('50%').height(30).backgroundColor(0xAFEEEE) // 创建一个宽度为50%、高度为30的Column，背景色为浅蓝色\n        Column().width('50%').height(30).backgroundColor(0x00FFFF) // 创建一个宽度为50%、高度为30的Column，背景色为青色\n      }.alignItems(HorizontalAlign.Start).width('90%').border({ width: 1 }) // 设置子元素水平方向对齐方式为Start，宽度为父容器的90%，并添加1像素的边框\n\n      Text('alignItems(End)').width('90%') // 显示文本“alignItems(End)”，宽度为父容器的90%\n      Column() {\n        Column().width('50%').height(30).backgroundColor(0xAFEEEE) // 创建一个宽度为50%、高度为30的Column，背景色为浅蓝色\n        Column().width('50%').height(30).backgroundColor(0x00FFFF) // 创建一个宽度为50%、高度为30的Column，背景色为青色\n      }.alignItems(HorizontalAlign.End).width('90%').border({ width: 1 }) // 设置子元素水平方向对齐方式为End，宽度为父容器的90%，并添加1像素的边框\n\n      Text('alignItems(Center)').width('90%') // 显示文本“alignItems(Center)”，宽度为父容器的90%\n      Column() {\n        Column().width('50%').height(30).backgroundColor(0xAFEEEE) // 创建一个宽度为50%、高度为30的Column，背景色为浅蓝色\n        Column().width('50%').height(30).backgroundColor(0x00FFFF) // 创建一个宽度为50%、高度为30的Column，背景色为青色\n      }.alignItems(HorizontalAlign.Center).width('90%').border({ width: 1 }) // 设置子元素水平方向对齐方式为Center，宽度为父容器的90%，并添加1像素的边框\n\n      Text('justifyContent(Center)').width('90%') // 显示文本“justifyContent(Center)”，宽度为父容器的90%\n      Column() {\n        Column().width('90%').height(30).backgroundColor(0xAFEEEE) // 创建一个宽度为90%、高度为30的Column，背景色为浅蓝色\n        Column().width('90%').height(30).backgroundColor(0x00FFFF) // 创建一个宽度为90%、高度为30的Column，背景色为青色\n      }.height(100).border({ width: 1 }).justifyContent(FlexAlign.Center) // 设置子元素垂直方向对齐方式为Center，高度为100，并添加1像素的边框\n\n      Text('justifyContent(End)').width('90%') // 显示文本“justifyContent(End)”，宽度为父容器的90%\n      Column() {\n        Column().width('90%').height(30).backgroundColor(0xAFEEEE) // 创建一个宽度为90%、高度为30的Column，背景色为浅蓝色\n        Column().width('90%').height(30).backgroundColor(0x00FFFF) // 创建一个宽度为90%、高度为30的Column，背景色为青色\n      }.height(100).border({ width: 1 }).justifyContent(FlexAlign.End) // 设置子元素垂直方向对齐方式为End，高度为100，并添加1像素的边框\n\n    }.width('100%').padding({ top: 5 }) // 设置主Column的宽度为100%，顶部内边距为5\n  }\n}"
            }
        ]
    },
    "Row": {
        "description": "沿水平方向布局容器，可以包含子组件。",
        "interfaces": [
            {
                "description": "Row(value?:{space?: number | string })",
                "params": {
                    "value": {
                        "type": "object",
                        "required": false,
                        "description": "包含space参数的对象。",
                        "properties": {
                            "space": {
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "required": false,
                                "description": "横向布局元素间距。默认值：0，单位vp。可选值为大于等于0的数字，或者可以转换为数字的字符串。"
                            }
                        }
                    }
                }
            }
        ],
        "attributes": {
            "alignItems": {
                "description": "设置子组件在垂直方向上的对齐格式。",
                "params": {
                    "value": {
                        "type": "VerticalAlign",
                        "required": true,
                        "description": "子组件在垂直方向上的对齐格式。默认值：VerticalAlign.Center"
                    }
                }
            },
            "justifyContent": {
                "description": "设置子组件在水平方向上的对齐格式。",
                "params": {
                    "value": {
                        "type": "FlexAlign",
                        "required": true,
                        "description": "子组件在水平方向上的对齐格式。默认值：FlexAlign.Start"
                    }
                }
            }
        },
        "events": {},
        "is_common_attrs": true,
        "examples": [
            {
                "description": "实现一个展示Row组件不同布局和对齐方式的示例。通过设置不同的属性，展示子组件在水平和垂直方向上的对齐方式，以及子组件之间的间距。",
                "code": "@Entry\n@Component\nstruct RowExample {\n  build() {\n    Column({ space: 5 }) { // 创建一个Column容器，设置子组件之间的垂直间距为5\n      // 设置子组件水平方向的间距为5\n      Text('space').width('90%') // 创建一个Text组件，显示文字“space”，宽度为父容器的90%\n      Row({ space: 5 }) { // 创建一个Row容器，设置子组件之间的水平间距为5\n        Row().width('30%').height(50).backgroundColor(0xAFEEEE) // 创建一个Row组件，宽度为父容器的30%，高度为50，背景色为浅蓝色\n        Row().width('30%').height(50).backgroundColor(0x00FFFF) // 创建一个Row组件，宽度为父容器的30%，高度为50，背景色为青色\n      }.width('90%').height(107).border({ width: 1 }) // 设置Row容器的宽度为父容器的90%，高度为107，并添加一个宽度为1的边框\n\n      // 设置子元素垂直方向对齐方式\n      Text('alignItems(Bottom)').width('90%') // 创建一个Text组件，显示文字“alignItems(Bottom)”，宽度为父容器的90%\n      Row() { // 创建一个Row容器\n        Row().width('30%').height(50).backgroundColor(0xAFEEEE) // 创建一个Row组件，宽度为父容器的30%，高度为50，背景色为浅蓝色\n        Row().width('30%').height(50).backgroundColor(0x00FFFF) // 创建一个Row组件，宽度为父容器的30%，高度为50，背景色为青色\n      }.width('90%').alignItems(VerticalAlign.Bottom).height('15%').border({ width: 1 }) // 设置Row容器的宽度为父容器的90%，子元素垂直方向对齐方式为底部对齐，高度为父容器的15%，并添加一个宽度为1的边框\n\n      Text('alignItems(Center)').width('90%') // 创建一个Text组件，显示文字“alignItems(Center)”，宽度为父容器的90%\n      Row() { // 创建一个Row容器\n        Row().width('30%').height(50).backgroundColor(0xAFEEEE) // 创建一个Row组件，宽度为父容器的30%，高度为50，背景色为浅蓝色\n        Row().width('30%').height(50).backgroundColor(0x00FFFF) // 创建一个Row组件，宽度为父容器的30%，高度为50，背景色为青色\n      }.width('90%').alignItems(VerticalAlign.Center).height('15%').border({ width: 1 }) // 设置Row容器的宽度为父容器的90%，子元素垂直方向对齐方式为居中对齐，高度为父容器的15%，并添加一个宽度为1的边框\n\n      // 设置子元素水平方向对齐方式\n      Text('justifyContent(End)').width('90%') // 创建一个Text组件，显示文字“justifyContent(End)”，宽度为父容器的90%\n      Row() { // 创建一个Row容器\n        Row().width('30%').height(50).backgroundColor(0xAFEEEE) // 创建一个Row组件，宽度为父容器的30%，高度为50，背景色为浅蓝色\n        Row().width('30%').height(50).backgroundColor(0x00FFFF) // 创建一个Row组件，宽度为父容器的30%，高度为50，背景色为青色\n      }.width('90%').border({ width: 1 }).justifyContent(FlexAlign.End) // 设置Row容器的宽度为父容器的90%，子元素水平方向对齐方式为尾部对齐，并添加一个宽度为1的边框\n\n      Text('justifyContent(Center)').width('90%') // 创建一个Text组件，显示文字“justifyContent(Center)”，宽度为父容器的90%\n      Row() { // 创建一个Row容器\n        Row().width('30%').height(50).backgroundColor(0xAFEEEE) // 创建一个Row组件，宽度为父容器的30%，高度为50，背景色为浅蓝色\n        Row().width('30%').height(50).backgroundColor(0x00FFFF) // 创建一个Row组件，宽度为父容器的30%，高度为50，背景色为青色\n      }.width('90%').border({ width: 1 }).justifyContent(FlexAlign.Center) // 设置Row容器的宽度为父容器的90%，子元素水平方向对齐方式为居中对齐，并添加一个宽度为1的边框\n    }.width('100%') // 设置Column容器的宽度为父容器的100%\n  }\n}"
            }
        ]
    },
    "Stack": {
        "description": "堆叠容器，子组件按照顺序依次入栈，后一个子组件覆盖前一个子组件。可以包含多个子组件。",
        "interfaces": [
            {
                "description": "Stack(value?: { alignContent?: Alignment })",
                "params": {
                    "alignContent": {
                        "type": "Alignment",
                        "required": false,
                        "description": "设置子组件在容器内的对齐方式。"
                    }
                }
            }
        ],
        "attributes": {
            "alignContent": {
                "description": "设置所有子组件在容器内的对齐方式。该属性与通用属性align同时设置时，后设置的属性生效。",
                "params": {
                    "value": {
                        "type": "Alignment",
                        "required": true,
                        "description": "所有子组件在容器内的对齐方式。"
                    }
                }
            }
        },
        "events": {},
        "is_common_attrs": true,
        "examples": [
            {
                "description": "实现一个堆叠布局（Stack）组件，其中包含两个文本组件（Text）。堆叠布局允许子组件重叠显示，通过设置对齐方式（alignContent）和子组件的对齐方式（align）来控制子组件的显示位置。",
                "code": "@Entry // 标记该组件为入口组件\n@Component // 标记该结构体为一个组件\nstruct StackExample {\n  build() {\n    Stack({ alignContent: Alignment.Bottom }) { // 创建一个堆叠布局，对齐内容到底部\n      Text('First child, show in bottom') // 第一个文本组件，显示在底部\n        .width('90%') // 设置宽度为父容器的90%\n        .height('100%') // 设置高度为父容器的100%\n        .backgroundColor(0xd2cab3) // 设置背景颜色为浅棕色\n        .align(Alignment.Top) // 设置文本组件在堆叠布局中的对齐方式为顶部对齐\n      \n      Text('Second child, show in top') // 第二个文本组件，显示在顶部\n        .width('70%') // 设置宽度为父容器的70%\n        .height('60%') // 设置高度为父容器的60%\n        .backgroundColor(0xc1cbac) // 设置背景颜色为浅绿色\n        .align(Alignment.Top) // 设置文本组件在堆叠布局中的对齐方式为顶部对齐\n    }\n    .width('100%') // 设置堆叠布局的宽度为父容器的100%\n    .height(150) // 设置堆叠布局的高度为150像素\n    .margin({ top: 5 }) // 设置堆叠布局的上边距为5像素\n  }\n}"
            }
        ]
    },
    "RelativeContainer": {
        "description": "相对布局组件，用于复杂场景中元素对齐的布局。",
        "details": "该组件从API Version 9开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "RelativeContainer()",
                "params": {}
            },
            {
                "description": "guideLine(value: Array<GuideLineStyle>)",
                "params": {
                    "value": {
                        "type": "Array<GuideLineStyle>",
                        "required": true,
                        "description": "设置RelativeContainer容器内的辅助线，Array中每个项目即为一条guideline。",
                        "default": null
                    }
                }
            },
            {
                "description": "barrier(value: Array<BarrierStyle>)",
                "params": {
                    "value": {
                        "type": "Array<BarrierStyle>",
                        "required": true,
                        "description": "设置RelativeContainer容器内的屏障，Array中每个项目即为一条barrier。",
                        "default": null
                    }
                }
            }
        ],
        "attributes": {
            "alignRules": {
                "description": "子组件可以将容器、guideline、barrier或者其他子组件设为锚点。",
                "params": {
                    "top": {
                        "type": "AlignRule",
                        "required": false,
                        "description": "垂直方向的顶部对齐规则。",
                        "default": null
                    },
                    "center": {
                        "type": "AlignRule",
                        "required": false,
                        "description": "垂直方向的中心对齐规则。",
                        "default": null
                    },
                    "bottom": {
                        "type": "AlignRule",
                        "required": false,
                        "description": "垂直方向的底部对齐规则。",
                        "default": null
                    },
                    "left": {
                        "type": "AlignRule",
                        "required": false,
                        "description": "水平方向的左侧对齐规则。",
                        "default": null
                    },
                    "middle": {
                        "type": "AlignRule",
                        "required": false,
                        "description": "水平方向的中间对齐规则。",
                        "default": null
                    },
                    "right": {
                        "type": "AlignRule",
                        "required": false,
                        "description": "水平方向的右侧对齐规则。",
                        "default": null
                    },
                    "bias": {
                        "type": "Bias",
                        "required": false,
                        "description": "对齐后的额外偏移。",
                        "default": null
                    }
                }
            },
            "margin": {
                "description": "子组件的margin含义不同于通用属性的margin，其含义为到该方向上的锚点的距离。若该方向上没有锚点，则该方向的margin不生效。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "margin值。",
                        "default": null
                    }
                }
            },
            "width": {
                "description": "设置容器的宽度。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "宽度值，可以为具体数值或'auto'。",
                        "default": null
                    }
                }
            },
            "height": {
                "description": "设置容器的高度。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "高度值，可以为具体数值或'auto'。",
                        "default": null
                    }
                }
            }
        },
        "events": {},
        "rules": [
            "容器内子组件区分水平方向，垂直方向。",
            "子组件可以将容器、guideline、barrier或者其他子组件设为锚点。",
            "当同时存在前端页面设置的子组件尺寸和相对布局规则时，子组件的绘制尺寸取决于约束规则。",
            "对齐后需要额外偏移可设置offset。",
            "当width设置auto时，如果水平方向上子组件以容器作为锚点，则auto不生效，垂直方向上同理。",
            "相对布局容器内的子组件的margin含义不同于通用属性的margin，其含义为到该方向上的锚点的距离。",
            "guideline的位置在不声明或者声明异常值(如undefined)时，取start：0的位置。",
            "当容器在某个方向的size声明为“auto”时，该方向上guideline的位置只能使用start的方式声明(不可使用百分比)。",
            "垂直方向的guideline和barrier只能作为组件水平方向的锚点，作为垂直方向的锚点时取0；水平方向的guideline和barrier只能作为组件垂直方向的锚点，作为水平方向的锚点时取0。",
            "链的形成依靠组件间的依赖关系。",
            "链的方向和格式声明在链头组件的chainMode接口；链内元素的bias属性全部失效，链头元素的bias作为整个链的bias生效。",
            "链内所有元素的size如果超出链的锚点约束，超出的部分将均分在链的两侧。",
            "特殊情况：根据约束条件和子组件本身的size属性无法确定子组件大小，则子组件不绘制。",
            "互相依赖、环形依赖时容器内子组件全部不绘制。",
            "同方向上两个及以上位置设置锚点但锚点位置逆序时此子组件大小为0，即不绘制。"
        ],
        "is_common_attrs": true,
        "examples": [
            {
                "description": "实现一个包含RelativeContainer布局的组件，其中包含一个红色的Row组件，并通过Guideline进行定位。RelativeContainer具有固定的宽度和高度，并带有边框。Row组件通过alignRules属性与Guideline对齐。",
                "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 创建一个红色的Row组件，宽度为100，高度为100\n        Row().width(100).height(100)\n          .backgroundColor(\"#FF3333\")\n          // 设置Row组件的定位规则\n          .alignRules({\n            // 左边缘与guideline1的末端对齐\n            left: {anchor: \"guideline1\", align: HorizontalAlign.End},\n            // 上边缘与guideline2的顶部对齐\n            top: {anchor: \"guideline2\", align: VerticalAlign.Top}\n          })\n          .id(\"row1\")\n      }\n      // 设置RelativeContainer的宽度和高度，并添加边框\n      .width(300).height(300)\n      .margin({left: 50})\n      .border({width:2, color: \"#6699FF\"})\n      // 定义两个Guideline，一个垂直，一个水平，分别位于容器的50像素处\n      .guideLine([\n        {id:\"guideline1\", direction: Axis.Vertical, position:{start:50}},\n        {id:\"guideline2\", direction: Axis.Horizontal, position:{start:50}}\n      ])\n    }\n    .height('100%')\n  }\n}"
            },
            {
                "description": "实现一个包含RelativeContainer的Row组件，其中RelativeContainer内部包含一个红色矩形。红色矩形的顶部、底部、左侧和右侧分别与RelativeContainer的顶部、底部、左侧和右侧对齐，并通过垂直偏移使其相对于父容器的顶部和底部偏移30%。RelativeContainer的宽度为300，高度为300，左边距为50，并带有宽度为2的蓝色边框。整个Row的高度为100%。",
                "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 创建一个宽度为100，高度为100的红色矩形\n        Row().width(100).height(100)\n          .backgroundColor(\"#FF3333\")\n          .alignRules({\n            // 矩形的顶部与父容器的顶部对齐\n            top: {anchor: \"__container__\", align: VerticalAlign.Top},\n            // 矩形的底部与父容器的底部对齐\n            bottom: {anchor: \"__container__\", align: VerticalAlign.Bottom},\n            // 矩形的左侧与父容器的左侧对齐\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start},\n            // 矩形的右侧与父容器的右侧对齐\n            right: {anchor: \"__container__\", align: HorizontalAlign.End},\n            // 设置矩形的垂直偏移，使其相对于父容器的顶部和底部偏移30%\n            bias: {vertical: 0.3}\n          })\n          .id(\"row1\")\n      }\n      .width(300).height(300)\n      .margin({left: 50}) // 设置RelativeContainer的左边距为50\n      .border({width:2, color: \"#6699FF\"}) // 为RelativeContainer添加一个宽度为2的蓝色边框\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}"
            },
            {
                "description": "实现一个包含四个Row组件的布局，每个Row组件包含一个Text组件，并通过RelativeContainer进行相对定位。每个Row组件具有不同的背景颜色，并且相对于其他Row组件进行定位。整体布局具有边框和左边距，以适应内容大小。",
                "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个Row组件，包含一个Text组件，内容为'row1'，宽度为100，高度为100，背景颜色为红色，居中对齐\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF3333\")\n          .id(\"row1\") // 设置id为\"row1\"，用于后续的相对定位\n\n        // 第二个Row组件，包含一个Text组件，内容为'row2'，宽度为100，高度为100，背景颜色为黄色，相对于\"row1\"进行定位\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            left: {anchor: \"row1\", align: HorizontalAlign.End}, // 相对于\"row1\"的右边\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 相对于\"row1\"的顶部\n          })\n          .id(\"row2\") // 设置id为\"row2\"，用于后续的相对定位\n\n        // 第三个Row组件，包含一个Text组件，内容为'row3'，宽度为100，高度为100，背景颜色为橙色，相对于\"row1\"进行定位\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            left: {anchor: \"row1\", align: HorizontalAlign.Start}, // 相对于\"row1\"的左边\n            top: {anchor: \"row1\", align: VerticalAlign.Bottom} // 相对于\"row1\"的底部\n          })\n          .id(\"row3\") // 设置id为\"row3\"，用于后续的相对定位\n\n        // 第四个Row组件，包含一个Text组件，内容为'row4'，宽度为100，高度为100，背景颜色为浅橙色，相对于\"row3\"和\"row2\"进行定位\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF9966\")\n          .alignRules({\n            left: {anchor: \"row3\", align: HorizontalAlign.End}, // 相对于\"row3\"的右边\n            top: {anchor: \"row2\", align: VerticalAlign.Bottom} // 相对于\"row2\"的底部\n          })\n          .id(\"row4\") // 设置id为\"row4\"，用于后续的相对定位\n      }\n      .width(\"auto\").height(\"auto\") // 设置RelativeContainer的宽度和高度为\"auto\"，使其大小适应内容\n      .margin({left: 50}) // 设置左边距为50\n      .border({width:2, color: \"#6699FF\"}) // 设置边框宽度为2，颜色为蓝色\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}"
            },
            {
                "description": "实现一个相对布局的示例，包含四个矩形，每个矩形通过RelativeContainer进行相对定位。\n第一个矩形位于容器的左上角，第二个矩形位于第一个矩形的右侧，第三个矩形位于第一个矩形的下方，第四个矩形位于第三个矩形的右侧和第二个矩形的下方。\n每个矩形都有一个文本标签，并且通过alignRules属性进行相对定位。",
                "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个矩形，红色背景，位于容器的左上角，设置了10像素的margin\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF3333\")\n          .alignRules({\n            top: {anchor: \"__container__\", align: VerticalAlign.Top}, // 顶部对齐容器顶部\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start} // 左侧对齐容器左侧\n          })\n          .id(\"row1\")\n          .margin(10) // 设置外边距为10像素\n\n        // 第二个矩形，黄色背景，位于第一个矩形的右侧\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            left: {anchor: \"row1\", align: HorizontalAlign.End}, // 左侧对齐第一个矩形的右侧\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 顶部对齐第一个矩形的顶部\n          })\n          .id(\"row2\")\n\n        // 第三个矩形，橙色背景，位于第一个矩形的下方\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            left: {anchor: \"row1\", align: HorizontalAlign.Start}, // 左侧对齐第一个矩形的左侧\n            top: {anchor: \"row1\", align: VerticalAlign.Bottom} // 顶部对齐第一个矩形的底部\n          })\n          .id(\"row3\")\n\n        // 第四个矩形，浅橙色背景，位于第三个矩形的右侧，第二个矩形的下方，设置了10像素的margin\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF9966\")\n          .alignRules({\n            left: {anchor: \"row3\", align: HorizontalAlign.End}, // 左侧对齐第三个矩形的右侧\n            top: {anchor: \"row2\", align: VerticalAlign.Bottom} // 顶部对齐第二个矩形的底部\n          })\n          .id(\"row4\")\n          .margin(10) // 设置外边距为10像素\n      }\n      .width(300).height(300) // 设置RelativeContainer的宽度和高度\n      .margin({left: 50}) // 设置RelativeContainer的左侧外边距为50像素\n      .border({width:2, color: \"#6699FF\"}) // 设置RelativeContainer的边框\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}"
            },
            {
                "description": "实现一个相对布局的示例，包含三个Row组件，每个Row组件通过RelativeContainer进行相对定位和对齐。每个Row组件具有不同的背景色，并通过alignRules属性定义其相对位置和对齐方式。整体布局在一个Row组件内，并设置了边框和外边距。",
                "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个Row组件，包含文本'row1'，设置为居中对齐，宽度80，高度80，背景色为红色\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF3333\")\n          // 设置alignRules，定义组件的相对位置和对齐方式\n          .alignRules({\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start}, // 左对齐到容器左侧\n            right: {anchor: \"row2\", align : HorizontalAlign.Start}, // 右对齐到row2的左侧\n            center: {anchor: \"__container__\", align: VerticalAlign.Center}, // 垂直居中对齐到容器\n            bias : {horizontal : 0} // 水平方向的bias值为0\n          })\n          .id(\"row1\") // 设置组件ID为row1\n          .chainMode(Axis.Horizontal, ChainStyle.PACKED) // 设置水平方向的链模式为PACKED\n\n        // 第二个Row组件，包含文本'row2'，设置为居中对齐，宽度80，高度80，背景色为黄色\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FFCC00\")\n          // 设置alignRules，定义组件的相对位置和对齐方式\n          .alignRules({\n            left: {anchor: \"row1\", align: HorizontalAlign.End}, // 左对齐到row1的右侧\n            right: {anchor: \"row3\", align : HorizontalAlign.Start}, // 右对齐到row3的左侧\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 顶部对齐到row1的顶部\n          })\n          .id(\"row2\") // 设置组件ID为row2\n\n        // 第三个Row组件，包含文本'row3'，设置为居中对齐，宽度80，高度80，背景色为橙色\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF6633\")\n          // 设置alignRules，定义组件的相对位置和对齐方式\n          .alignRules({\n            left: {anchor: \"row2\", align: HorizontalAlign.End}, // 左对齐到row2的右侧\n            right: {anchor: \"__container__\", align : HorizontalAlign.End}, // 右对齐到容器右侧\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 顶部对齐到row1的顶部\n          })\n          .id(\"row3\") // 设置组件ID为row3\n      }\n      .width(300).height(300) // 设置RelativeContainer的宽度和高度\n      .margin({left: 50}) // 设置左侧外边距\n      .border({width:2, color: \"#6699FF\"}) // 设置边框宽度和颜色\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}"
            },
            {
                "description": "实现一个相对布局的示例，展示如何在RelativeContainer中使用Row组件，并通过alignRules和barrier进行复杂的相对定位。每个Row组件都有不同的背景色和文本内容，并通过ID进行引用。barrier用于定义虚拟的边界线，帮助组件进行更精确的定位。",
                "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个Row组件，显示文本'row1'，背景色为红色，宽度高度均为100，居中对齐\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF3333\")\n          .id(\"row1\") // 为该组件设置ID，方便后续组件引用\n\n        // 第二个Row组件，显示文本'row2'，背景色为黄色，宽度高度均为100，相对于row1进行定位\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            middle: {anchor: \"row1\", align: HorizontalAlign.End}, // 水平方向上与row1的右边缘对齐\n            top: {anchor: \"row1\", align: VerticalAlign.Bottom} // 垂直方向上与row1的底边缘对齐\n          })\n          .id(\"row2\") // 为该组件设置ID，方便后续组件引用\n\n        // 第三个Row组件，显示文本'row3'，背景色为橙色，宽度高度均为100，相对于barrier1进行定位\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            left: {anchor: \"barrier1\", align: HorizontalAlign.End}, // 水平方向上与barrier1的右边缘对齐\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 垂直方向上与row1的顶边缘对齐\n          })\n          .id(\"row3\") // 为该组件设置ID，方便后续组件引用\n\n        // 第四个Row组件，显示文本'row4'，背景色为浅橙色，宽度高度均为50，相对于row1和barrier2进行定位\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .width(50).height(50)\n          .backgroundColor(\"#FF9966\")\n          .alignRules({\n            left: {anchor: \"row1\", align: HorizontalAlign.Start}, // 水平方向上与row1的左边缘对齐\n            top: {anchor: \"barrier2\", align: VerticalAlign.Bottom} // 垂直方向上与barrier2的底边缘对齐\n          })\n          .id(\"row4\") // 为该组件设置ID，方便后续组件引用\n      }\n      .width(300).height(300) // 设置RelativeContainer的宽度和高度\n      .margin({left: 50}) // 设置左边距\n      .border({width:2, color: \"#6699FF\"}) // 设置边框\n      .barrier([\n        {id: \"barrier1\", direction: BarrierDirection.RIGHT, referencedId:[\"row1\", \"row2\"]}, // 定义barrier1，方向为右，参考row1和row2的右边缘\n        {id: \"barrier2\", direction: BarrierDirection.BOTTOM, referencedId:[\"row1\", \"row2\"]} // 定义barrier2，方向为下，参考row1和row2的底边缘\n      ])\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}"
            },
            {
                "description": "实现一个相对布局的示例，展示如何在RelativeContainer中使用Row组件，并通过alignRules和barrier实现复杂的对齐和布局效果。示例中包含四个Row组件，分别显示不同的文本和背景颜色，并通过alignRules和barrier实现它们之间的相对位置关系。",
                "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个Row组件，显示文本'row1'，并设置其宽度和高度为100，背景颜色为红色\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF3333\")\n          .id(\"row1\") // 设置组件的id为\"row1\"，用于后续的对齐规则引用\n\n        // 第二个Row组件，显示文本'row2'，并设置其宽度和高度为100，背景颜色为黄色\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            middle: {anchor: \"row1\", align: HorizontalAlign.End}, // 水平方向上，row2相对于row1的右侧对齐\n            top: {anchor: \"row1\", align: VerticalAlign.Bottom} // 垂直方向上，row2相对于row1的底部对齐\n          })\n          .id(\"row2\") // 设置组件的id为\"row2\"，用于后续的对齐规则引用\n\n        // 第三个Row组件，显示文本'row3'，并设置其宽度和高度为100，背景颜色为橙色\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            start: {anchor: \"barrier1\", align: HorizontalAlign.End}, // 水平方向上，row3相对于barrier1的右侧对齐\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 垂直方向上，row3相对于row1的顶部对齐\n          })\n          .id(\"row3\") // 设置组件的id为\"row3\"，用于后续的对齐规则引用\n\n        // 第四个Row组件，显示文本'row4'，并设置其宽度和高度为50，背景颜色为浅橙色\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .width(50).height(50)\n          .backgroundColor(\"#FF9966\")\n          .alignRules({\n            start: {anchor: \"row1\", align: HorizontalAlign.Start}, // 水平方向上，row4相对于row1的左侧对齐\n            top: {anchor: \"barrier2\", align: VerticalAlign.Bottom} // 垂直方向上，row4相对于barrier2的底部对齐\n          })\n          .id(\"row4\") // 设置组件的id为\"row4\"，用于后续的对齐规则引用\n      }\n      .direction(Direction.Rtl) // 设置RelativeContainer的方向为RTL，即从右到左布局\n      .width(300).height(300) // 设置RelativeContainer的宽度和高度为300\n      .margin({left: 50}) // 设置RelativeContainer的左边距为50\n      .border({width:2, color: \"#6699FF\"}) // 设置RelativeContainer的边框宽度和颜色\n      .barrier([\n        {id: \"barrier1\", localizedDirection: LocalizedBarrierDirection.END, referencedId:[\"row1\", \"row2\"]}, // 定义barrier1，水平方向上位于row1和row2的右侧\n        {id: \"barrier2\", localizedDirection: LocalizedBarrierDirection.BOTTOM, referencedId:[\"row1\", \"row2\"]} // 定义barrier2，垂直方向上位于row1和row2的底部\n      ])\n    }\n    .height('100%') // 设置Row组件的高度为100%\n  }\n}"
            },
            {
                "description": "实现一个复杂的布局示例，使用RelativeContainer组件来精确控制多个Row组件的位置。每个Row组件通过alignRules属性定义其相对于容器或其他Row组件的位置关系，从而实现复杂的布局效果。",
                "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个Row组件，位于容器的左上角\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FF3333\")\n          .alignRules({\n            top: {anchor: \"__container__\", align: VerticalAlign.Top}, // 顶部与容器顶部对齐\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start} // 左侧与容器左侧对齐\n          })\n          .id(\"row1\") // 设置id以便在其他组件中引用\n\n        // 第二个Row组件，位于容器的右上角\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(100).height(100)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            top: {anchor: \"__container__\", align: VerticalAlign.Top}, // 顶部与容器顶部对齐\n            right: {anchor: \"__container__\", align: HorizontalAlign.End} // 右侧与容器右侧对齐\n          })\n          .id(\"row2\") // 设置id以便在其他组件中引用\n\n        // 第三个Row组件，位于row1的右下角，并且与row2的左侧对齐\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .height(100)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            top: {anchor: \"row1\", align: VerticalAlign.Bottom}, // 顶部与row1的底部对齐\n            left: {anchor: \"row1\", align: HorizontalAlign.End}, // 左侧与row1的右侧对齐\n            right: {anchor: \"row2\", align: HorizontalAlign.Start} // 右侧与row2的左侧对齐\n          })\n          .id(\"row3\") // 设置id以便在其他组件中引用\n\n        // 第四个Row组件，位于row3的下方，并且与容器的左下角和row1的右侧对齐\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .backgroundColor(\"#FF9966\")\n          .alignRules({\n            top: {anchor: \"row3\", align: VerticalAlign.Bottom}, // 顶部与row3的底部对齐\n            bottom: {anchor: \"__container__\", align: VerticalAlign.Bottom}, // 底部与容器底部对齐\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start}, // 左侧与容器左侧对齐\n            right: {anchor: \"row1\", align: HorizontalAlign.End} // 右侧与row1的右侧对齐\n          })\n          .id(\"row4\") // 设置id以便在其他组件中引用\n\n        // 第五个Row组件，位于row3的下方，并且与row2的左侧和容器的右下角对齐\n        Row(){Text('row5')}.justifyContent(FlexAlign.Center)\n          .backgroundColor(\"#FF66FF\")\n          .alignRules({\n            top: {anchor: \"row3\", align: VerticalAlign.Bottom}, // 顶部与row3的底部对齐\n            bottom: {anchor: \"__container__\", align: VerticalAlign.Bottom}, // 底部与容器底部对齐\n            left: {anchor: \"row2\", align: HorizontalAlign.Start}, // 左侧与row2的左侧对齐\n            right: {anchor: \"__container__\", align: HorizontalAlign.End} // 右侧与容器右侧对齐\n          })\n          .id(\"row5\") // 设置id以便在其他组件中引用\n      }\n      .width(300).height(300) // 设置RelativeContainer的宽度和高度\n      .margin({left: 50}) // 设置左侧外边距\n      .border({width:2, color: \"#6699FF\"}) // 设置边框\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}"
            },
            {
                "description": "实现一个包含多个链布局的相对容器组件，展示不同链布局样式（SPREAD、SPREAD_INSIDE、PACKED）的效果。每个链布局包含三个子组件，通过alignRules属性设置子组件之间的相对位置关系。",
                "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        // 第一个链布局：SPREAD\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF3333\")\n          .alignRules({\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start}, // 左对齐容器\n            right: {anchor: \"row2\", align : HorizontalAlign.Start}, // 右对齐row2的左侧\n            top: {anchor: \"__container__\", align: VerticalAlign.Top} // 顶部对齐容器\n          })\n          .id(\"row1\")\n          .chainMode(Axis.Horizontal, ChainStyle.SPREAD) // 设置水平方向的SPREAD链布局\n\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            left: {anchor: \"row1\", align: HorizontalAlign.End}, // 左对齐row1的右侧\n            right: {anchor: \"row3\", align : HorizontalAlign.Start}, // 右对齐row3的左侧\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 顶部对齐row1的顶部\n          })\n          .id(\"row2\")\n\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            left: {anchor: \"row2\", align: HorizontalAlign.End}, // 左对齐row2的右侧\n            right: {anchor: \"__container__\", align : HorizontalAlign.End}, // 右对齐容器的右侧\n            top: {anchor: \"row1\", align: VerticalAlign.Top} // 顶部对齐row1的顶部\n          })\n          .id(\"row3\")\n\n        // 第二个链布局：SPREAD_INSIDE\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF3333\")\n          .alignRules({\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start}, // 左对齐容器\n            right: {anchor: \"row5\", align : HorizontalAlign.Start}, // 右对齐row5的左侧\n            center: {anchor: \"__container__\", align: VerticalAlign.Center} // 垂直居中对齐容器\n          })\n          .id(\"row4\")\n          .chainMode(Axis.Horizontal, ChainStyle.SPREAD_INSIDE) // 设置水平方向的SPREAD_INSIDE链布局\n\n        Row(){Text('row5')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            left: {anchor: \"row4\", align: HorizontalAlign.End}, // 左对齐row4的右侧\n            right: {anchor: \"row6\", align : HorizontalAlign.Start}, // 右对齐row6的左侧\n            top: {anchor: \"row4\", align: VerticalAlign.Top} // 顶部对齐row4的顶部\n          })\n          .id(\"row5\")\n\n        Row(){Text('row6')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            left: {anchor: \"row5\", align: HorizontalAlign.End}, // 左对齐row5的右侧\n            right: {anchor: \"__container__\", align : HorizontalAlign.End}, // 右对齐容器的右侧\n            top: {anchor: \"row4\", align: VerticalAlign.Top} // 顶部对齐row4的顶部\n          })\n          .id(\"row6\")\n\n        // 第三个链布局：PACKED\n        Row(){Text('row7')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF3333\")\n          .alignRules({\n            left: {anchor: \"__container__\", align: HorizontalAlign.Start}, // 左对齐容器\n            right: {anchor: \"row8\", align : HorizontalAlign.Start}, // 右对齐row8的左侧\n            bottom: {anchor: \"__container__\", align: VerticalAlign.Bottom} // 底部对齐容器\n          })\n          .id(\"row7\")\n          .chainMode(Axis.Horizontal, ChainStyle.PACKED) // 设置水平方向的PACKED链布局\n\n        Row(){Text('row8')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FFCC00\")\n          .alignRules({\n            left: {anchor: \"row7\", align: HorizontalAlign.End}, // 左对齐row7的右侧\n            right: {anchor: \"row9\", align : HorizontalAlign.Start}, // 右对齐row9的左侧\n            top: {anchor: \"row7\", align: VerticalAlign.Top} // 顶部对齐row7的顶部\n          })\n          .id(\"row8\")\n\n        Row(){Text('row9')}.justifyContent(FlexAlign.Center)\n          .width(80).height(80)\n          .backgroundColor(\"#FF6633\")\n          .alignRules({\n            left: {anchor: \"row8\", align: HorizontalAlign.End}, // 左对齐row8的右侧\n            right: {anchor: \"__container__\", align : HorizontalAlign.End}, // 右对齐容器的右侧\n            top: {anchor: \"row7\", align: VerticalAlign.Top} // 顶部对齐row7的顶部\n          })\n          .id(\"row9\")\n      }\n      .width(300).height(300) // 设置RelativeContainer的宽度和高度\n      .margin({left: 50}) // 设置左侧外边距\n      .border({width:2, color: \"#6699FF\"}) // 设置边框\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}"
            }
        ]
    },
    "FolderStack": {
        "description": "FolderStack继承于Stack(层叠布局)控件，新增了折叠屏悬停能力，通过识别upperItems自动避让折叠屏折痕区后移到上半屏，可以包含多个子组件。",
        "examples": [
            {
                "description": "实现一个具有折叠和悬停功能的界面布局。上半屏显示一个视频区域，下半屏堆叠显示视频标题和视频栏。通过FolderStack组件实现折叠和悬停效果，并监听折叠状态和悬停状态的变化。",
                "code": "@Entry\n@Component\nstruct Index {\n  @State len_wid: number = 480 // 定义一个状态变量，表示长度和宽度\n  @State w: string = \"40%\" // 定义一个状态变量，表示宽度百分比\n\n  build() {\n    Column() {\n      // 使用FolderStack组件，将指定id的组件悬停到上半屏，其余组件堆叠在下半屏\n      FolderStack({ upperItems: [\"upperitemsId\"] }) {\n        // 此Column会自动上移到上半屏\n        Column() {\n          Text(\"video zone\") // 显示文本“video zone”\n            .height(\"100%\") // 设置高度为100%\n            .width(\"100%\") // 设置宽度为100%\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n            .fontSize(25) // 设置字体大小为25\n        }\n        .backgroundColor(Color.Pink) // 设置背景颜色为粉色\n        .width(\"100%\") // 设置宽度为100%\n        .height(\"100%\") // 设置高度为100%\n        .id(\"upperitemsId\") // 设置组件的id为“upperitemsId”\n\n        // 下列两个Column堆叠在下半屏区域\n        Column() {\n          Text(\"video title\") // 显示文本“video title”\n            .width(\"100%\") // 设置宽度为100%\n            .height(50) // 设置高度为50\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n            .backgroundColor(Color.Red) // 设置背景颜色为红色\n            .fontSize(25) // 设置字体大小为25\n        }\n        .width(\"100%\") // 设置宽度为100%\n        .height(\"100%\") // 设置高度为100%\n        .justifyContent(FlexAlign.Start) // 设置内容对齐方式为顶部对齐\n\n        Column() {\n          Text(\"video bar\") // 显示文本“video bar”\n            .width(\"100%\") // 设置宽度为100%\n            .height(50) // 设置高度为50\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n            .backgroundColor(Color.Red) // 设置背景颜色为红色\n            .fontSize(25) // 设置字体大小为25\n        }\n        .width(\"100%\") // 设置宽度为100%\n        .height(\"100%\") // 设置高度为100%\n        .justifyContent(FlexAlign.End) // 设置内容对齐方式为底部对齐\n      }\n      .backgroundColor(Color.Yellow) // 设置背景颜色为黄色\n      .enableAnimation(true) // 启用动画效果\n      .autoHalfFold(true) // 启用自动半折叠功能\n      .onFolderStateChange((msg) => { // 监听折叠状态变化\n        if (msg.foldStatus === FoldStatus.FOLD_STATUS_EXPANDED) {\n          console.info(\"The device is currently in the expanded state\") // 设备处于展开状态\n        } else if (msg.foldStatus === FoldStatus.FOLD_STATUS_HALF_FOLDED) {\n          console.info(\"The device is currently in the half folded state\") // 设备处于半折叠状态\n        } else {\n          // .............\n        }\n      })\n      .onHoverStatusChange((msg) => { // 监听悬停状态变化\n        console.log('this foldStatus:' + msg.foldStatus); // 输出当前折叠状态\n        console.log('this isHoverMode:' + msg.isHoverMode); // 输出当前是否为悬停模式\n        console.log('this appRotation:' + msg.appRotation); // 输出当前应用旋转状态\n        console.log('this windowStatusType:' + msg.windowStatusType); // 输出当前窗口状态类型\n      })\n      .alignContent(Alignment.Bottom) // 设置内容对齐方式为底部对齐\n      .height(\"100%\") // 设置高度为100%\n      .width(\"100%\") // 设置宽度为100%\n      .borderWidth(1) // 设置边框宽度为1\n      .backgroundColor(Color.Yellow) // 设置背景颜色为黄色\n    }\n    .height(\"100%\") // 设置高度为100%\n    .width(\"100%\") // 设置宽度为100%\n    .borderWidth(1) // 设置边框宽度为1\n    .backgroundColor(Color.Pink) // 设置背景颜色为粉色\n    .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM]) // 扩展安全区域，包括系统底部安全区域\n  }\n}"
            }
        ]
    },
    "GridRow": {
        "description": "栅格容器组件，仅可以和栅格子组件(GridCol)在栅格布局场景中使用。",
        "details": "栅格布局可以为布局提供规律性的结构，解决多尺寸多设备的动态布局问题，保证不同设备上各个模块的布局一致性。",
        "interfaces": [
            {
                "description": "GridRow(option?: GridRowOptions)",
                "params": {
                    "option": {
                        "type": "GridRowOptions",
                        "required": false,
                        "description": "栅格布局子组件参数。",
                        "default": null
                    }
                }
            }
        ],
        "attributes": {
            "alignItems10+": {
                "description": "设置GridRow中的GridCol垂直主轴方向对齐方式。",
                "params": {
                    "value": {
                        "type": "ItemAlign",
                        "required": true,
                        "description": "GridRow中的GridCol垂直主轴方向对齐方式。",
                        "default": "ItemAlign.Start"
                    }
                }
            }
        },
        "events": {
            "onBreakpointChange": {
                "description": "断点发生变化时触发回调。",
                "params": {
                    "breakpoints": {
                        "type": "string",
                        "required": false,
                        "description": "取值为\"xs\"、\"sm\"、\"md\"、\"lg\"、\"xl\"、\"xxl\"。",
                        "default": null
                    }
                },
                "returns": null
            }
        },
        "rules": null,
        "is_common_attrs": true,
        "examples": [
            {
                "description": "实现一个响应式的网格布局组件，根据窗口大小动态调整列数和间距。组件包含多个颜色块，每个颜色块根据不同的屏幕尺寸调整其占用的列数。组件还监听窗口大小的变化，并显示当前的断点状态。",
                "code": "@Entry\n@Component\nstruct GridRowExample {\n  // 定义一个状态变量 bgColors，存储颜色数组，用于网格列的背景色\n  @State bgColors: Color[] = [Color.Red, Color.Orange, Color.Yellow, Color.Green, Color.Pink, Color.Grey, Color.Blue, Color.Brown]\n  // 定义一个状态变量 currentBp，用于存储当前的断点状态\n  @State currentBp: string = 'unknown'\n\n  build() {\n    Column() {\n      // 创建一个 GridRow 组件，设置列数、间距、断点等属性\n      GridRow({\n        columns: 5, // 默认列数为5\n        gutter: { x: 5, y: 10 }, // 列之间的水平间距为5，垂直间距为10\n        breakpoints: { \n          value: [\"400vp\", \"600vp\", \"800vp\"], // 定义断点值，分别为400vp、600vp、800vp\n          reference: BreakpointsReference.WindowSize // 断点参考值为窗口大小\n        },\n        direction: GridRowDirection.Row // 网格方向为行\n      }) {\n        // 使用 ForEach 循环遍历 bgColors 数组，为每个颜色创建一个 GridCol 组件\n        ForEach(this.bgColors, (color: Color) => {\n          GridCol({ \n            span: { xs: 1, sm: 2, md: 3, lg: 4 }, // 根据不同的屏幕尺寸设置列的跨度\n            offset: 0, // 列的偏移量为0\n            order: 0 // 列的顺序为0\n          }) {\n            // 创建一个 Row 组件，设置宽度和高度\n            Row().width(\"100%\").height(\"20vp\")\n          }.borderColor(color).borderWidth(2) // 设置列的边框颜色和宽度\n        })\n      }.width(\"100%\").height(\"100%\") // 设置 GridRow 的宽度和高度为100%\n      .onBreakpointChange((breakpoint) => {\n        // 监听断点变化事件，更新 currentBp 状态变量\n        this.currentBp = breakpoint\n      })\n    }.width('80%').margin({ left: 10, top: 5, bottom: 5 }).height(200) // 设置 Column 的宽度、外边距和高度\n    .border({ color: '#880606', width: 2 }) // 设置 Column 的边框颜色和宽度\n  }\n}"
            }
        ]
    },
    "GridCol": {
        "description": "栅格子组件，必须作为栅格容器组件(GridRow)的子组件使用。可以包含单个子组件。",
        "details": null,
        "interfaces": [
            {
                "description": "GridCol(option?: GridColOptions)",
                "params": {
                    "option": {
                        "type": "GridColOptions",
                        "required": false,
                        "description": "栅格布局子组件参数。",
                        "default": null
                    }
                }
            }
        ],
        "attributes": {
            "span": {
                "description": "设置占用列数。span为0，意味着该元素不参与布局计算，即不会被渲染。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "GridColColumnOption"
                        ],
                        "required": true,
                        "description": "占用列数。",
                        "default": 1
                    }
                }
            },
            "gridColOffset": {
                "description": "设置相对于前一个栅格子组件偏移的列数。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "GridColColumnOption"
                        ],
                        "required": true,
                        "description": "相对于前一个栅格子组件偏移的列数。",
                        "default": 0
                    }
                }
            },
            "order": {
                "description": "设置元素的序号，根据栅格子组件的序号，从小到大对栅格子组件做排序。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "GridColColumnOption"
                        ],
                        "required": true,
                        "description": "元素的序号。",
                        "default": 0
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "is_common_attrs": true,
        "examples": [
            {
                "description": "实现一个栅格布局容器，支持多列布局，每列宽度可自定义，支持子组件的自动排列和对齐。\n导入必要的模块",
                "code": "import { GridRow, GridCol } from '@ohos/grid';\n\n@Entry\n@Component\nstruct GridRowExample {\n  build() {\n    Column({ space: 10 }) {\n      // 创建一个GridRow容器，设置列数为3，列间距为10\n      GridRow({ columns: 3, gutter: 10 }) {\n        // 创建一个GridCol子组件，设置跨度为1，背景颜色为蓝色\n        GridCol({ span: 1 }) {\n          Text('Column 1')\n            .fontSize(20)\n            .fontColor(Color.White)\n        }\n        .backgroundColor(Color.Blue)\n\n        // 创建一个GridCol子组件，设置跨度为2，背景颜色为绿色\n        GridCol({ span: 2 }) {\n          Text('Column 2')\n            .fontSize(20)\n            .fontColor(Color.White)\n        }\n        .backgroundColor(Color.Green)\n\n        // 创建一个GridCol子组件，设置跨度为3，背景颜色为红色\n        GridCol({ span: 3 }) {\n          Text('Column 3')\n            .fontSize(20)\n            .fontColor(Color.White)\n        }\n        .backgroundColor(Color.Red)\n      }\n      .width('100%')\n      .height(200)\n      .backgroundColor(Color.Gray)\n\n      // 创建另一个GridRow容器，设置列数为2，列间距为5\n      GridRow({ columns: 2, gutter: 5 }) {\n        // 创建一个GridCol子组件，设置跨度为1，背景颜色为黄色\n        GridCol({ span: 1 }) {\n          Text('Column 4')\n            .fontSize(20)\n            .fontColor(Color.Black)\n        }\n        .backgroundColor(Color.Yellow)\n\n        // 创建一个GridCol子组件，设置跨度为1，背景颜色为紫色\n        GridCol({ span: 1 }) {\n          Text('Column 5')\n            .fontSize(20)\n            .fontColor(Color.White)\n        }\n        .backgroundColor(Color.Purple)\n      }\n      .width('100%')\n      .height(150)\n      .backgroundColor(Color.LightGray)\n    }\n    .width('100%')\n    .height('100%')\n    .padding(10)\n  }\n}"
            }
        ]
    },
    "ColumnSplit": {
        "description": "将子组件纵向布局，并在每个子组件之间插入一根横向的分割线。",
        "interfaces": [
            {
                "description": "ColumnSplit()",
                "params": {}
            }
        ],
        "attributes": {
            "resizeable": {
                "description": "设置分割线是否可拖拽。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "分割线是否可拖拽。",
                        "default": "False"
                    }
                }
            },
            "divider": {
                "description": "设置分割线的margin。",
                "params": {
                    "value": {
                        "type": "[ColumnSplitDividerStyle, null]",
                        "required": true,
                        "description": "分割线的margin。",
                        "default": "null"
                    }
                }
            }
        },
        "events": {},
        "examples": [
            {
                "description": "实现一个垂直分割的列布局组件，其中包含五个文本组件，每个文本组件占据一行。用户可以通过拖动分割线来调整每个文本组件的高度。",
                "code": "@Entry\n@Component\nstruct ColumnSplitExample {\n  build() {\n    Column() {\n      // 显示提示文本，说明用户可以拖动分割线\n      Text('The secant line can be dragged')\n        .fontSize(9) // 设置字体大小为9\n        .fontColor(0xCCCCCC) // 设置字体颜色为浅灰色\n        .width('90%') // 设置文本宽度为父容器的90%\n      \n      // 创建一个垂直分割的列布局\n      ColumnSplit() {\n        // 第一个文本组件，背景色为浅棕色\n        Text('1')\n          .width('100%') // 设置文本宽度为父容器的100%\n          .height(50) // 设置文本高度为50\n          .backgroundColor(0xF5DEB3) // 设置背景色为浅棕色\n          .textAlign(TextAlign.Center) // 设置文本居中对齐\n        \n        // 第二个文本组件，背景色为深棕色\n        Text('2')\n          .width('100%')\n          .height(50)\n          .backgroundColor(0xD2B48C) // 设置背景色为深棕色\n          .textAlign(TextAlign.Center)\n        \n        // 第三个文本组件，背景色为浅棕色\n        Text('3')\n          .width('100%')\n          .height(50)\n          .backgroundColor(0xF5DEB3)\n          .textAlign(TextAlign.Center)\n        \n        // 第四个文本组件，背景色为深棕色\n        Text('4')\n          .width('100%')\n          .height(50)\n          .backgroundColor(0xD2B48C)\n          .textAlign(TextAlign.Center)\n        \n        // 第五个文本组件，背景色为浅棕色\n        Text('5')\n          .width('100%')\n          .height(50)\n          .backgroundColor(0xF5DEB3)\n          .textAlign(TextAlign.Center)\n      }\n      .borderWidth(1) // 设置分割列的边框宽度为1\n      .resizeable(true) // 设置分割列可拖动调整大小\n      .width('90%') // 设置分割列的宽度为父容器的90%\n      .height('60%') // 设置分割列的高度为父容器的60%\n    }\n    .width('100%') // 设置整个列的宽度为父容器的100%\n  }\n}"
            }
        ]
    },
    "RowSplit": {
        "description": "将子组件横向布局，并在每个子组件之间插入一根纵向的分割线，可以包含子组件。",
        "examples": [
            {
                "description": "实现一个可拖动的行分割组件，其中包含五个文本组件，每个文本组件代表一行。用户可以通过拖动分割线来调整每行的高度。",
                "code": "@Entry // 标记该组件为入口组件\n@Component // 标记该结构体为一个组件\nstruct RowSplitExample {\n  build() {\n    Column() { // 创建一个垂直布局的容器\n      Text('The second line can be dragged') // 显示提示文本，说明第二行可以被拖动\n        .fontSize(9) // 设置字体大小为9\n        .fontColor(0xCCCCCC) // 设置字体颜色为浅灰色\n        .width('90%') // 设置文本宽度为父容器的90%\n      \n      RowSplit() { // 创建一个可拖动的行分割组件\n        Text('1') // 创建第一个文本组件\n          .width('10%') // 设置文本宽度为父容器的10%\n          .height(100) // 设置文本高度为100\n          .backgroundColor(0xF5DEB3) // 设置背景颜色为浅棕色\n          .textAlign(TextAlign.Center) // 设置文本居中对齐\n        \n        Text('2') // 创建第二个文本组件\n          .width('10%') // 设置文本宽度为父容器的10%\n          .height(100) // 设置文本高度为100\n          .backgroundColor(0xD2B48C) // 设置背景颜色为深棕色\n          .textAlign(TextAlign.Center) // 设置文本居中对齐\n        \n        Text('3') // 创建第三个文本组件\n          .width('10%') // 设置文本宽度为父容器的10%\n          .height(100) // 设置文本高度为100\n          .backgroundColor(0xF5DEB3) // 设置背景颜色为浅棕色\n          .textAlign(TextAlign.Center) // 设置文本居中对齐\n        \n        Text('4') // 创建第四个文本组件\n          .width('10%') // 设置文本宽度为父容器的10%\n          .height(100) // 设置文本高度为100\n          .backgroundColor(0xD2B48C) // 设置背景颜色为深棕色\n          .textAlign(TextAlign.Center) // 设置文本居中对齐\n        \n        Text('5') // 创建第五个文本组件\n          .width('10%') // 设置文本宽度为父容器的10%\n          .height(100) // 设置文本高度为100\n          .backgroundColor(0xF5DEB3) // 设置背景颜色为浅棕色\n          .textAlign(TextAlign.Center) // 设置文本居中对齐\n      }\n      .resizeable(true) // 设置RowSplit组件为可拖动，用户可以通过拖动分割线来调整每行的高度\n      .width('90%') // 设置RowSplit组件的宽度为父容器的90%\n      .height(100) // 设置RowSplit组件的高度为100\n    }\n    .width('100%') // 设置Column容器的宽度为父容器的100%\n    .margin({ top: 5 }) // 设置Column容器的上边距为5\n  }\n}"
            }
        ]
    },
    "SplitLayout": {
        "description": "SplitLayout组件用于创建上下结构的布局，支持上下文本和上下图文两种类型。",
        "details": "该组件从API Version 10开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "SplitLayout({mainImage: Resource, primaryText: string, secondaryText?: string, tertiaryText?: string, container: () => void })",
                "params": {
                    "mainImage": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "传入图片。"
                    },
                    "primaryText": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "标题内容。"
                    },
                    "secondaryText": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "副标题内容。"
                    },
                    "tertiaryText": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "辅助文本。"
                    },
                    "container": {
                        "type": "() => void",
                        "required": true,
                        "description": "容器内组件。"
                    }
                }
            }
        ],
        "attributes": {},
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Column 布局实现了一个展示音乐推荐信息的界面。布局宽度占据整个屏幕，高度设为 100%，内边距为左右 0vp、顶部 0vp。组件的垂直方向上被分为一个主要部分，包含一个 SplitLayout 组件。\n\nSplitLayout 组件用于展示音乐推荐信息，包括一张主图（mainImage）、一个主标题（primaryText）、一个副标题（secondaryText）和一个三级标题（tertiaryText）。主图位于顶部，主标题和副标题位于中间，三级标题位于底部。SplitLayout 组件内部还包含一个 Text 组件，用于展示示例文本，该文本位于 SplitLayout 组件的底部，并设置了顶部外边距为 36vp。\n\n整个布局通过 Column 布局保证 SplitLayout 组件在垂直方向上有序排列，确保界面整洁美观。SplitLayout 组件的布局宽度占据整个屏幕，高度设为 100%，内容在垂直方向上均匀分布。",
                "code": "import { SplitLayout } from '@kit.ArkUI' // 导入 SplitLayout 组件\n\n@Entry\n@Component\nstruct Index {\n  @State demoImage: Resource = $r(\"app.media.music\") // 定义一个状态变量 demoImage，用于存储音乐推荐的主图资源\n\n  build() {\n    Column() {\n      SplitLayout({\n        mainImage: this.demoImage, // 设置 SplitLayout 组件的主图为主图资源\n        primaryText: '新歌推荐', // 设置 SplitLayout 组件的主标题为“新歌推荐”\n        secondaryText: '私人订制新歌精选站，为你推荐专属优质新歌;', // 设置 SplitLayout 组件的副标题为“私人订制新歌精选站，为你推荐专属优质新歌;”\n        tertiaryText: \"每日更新\", // 设置 SplitLayout 组件的三级标题为“每日更新”\n      }) {\n        Text('示例：空白区域容器内可添加组件') // 在 SplitLayout 组件内部添加一个 Text 组件，用于展示示例文本\n          .margin({top:36}) // 设置 Text 组件的顶部外边距为 36vp\n      }\n    }\n    .justifyContent(FlexAlign.SpaceBetween) // 设置 Column 组件的内容在垂直方向上均匀分布\n    .height('100%') // 设置 Column 组件的高度为 100%\n    .width('100%') // 设置 Column 组件的宽度为 100%\n  }\n}"
            }
        ],
        "is_common_attrs": false
    },
    "FoldSplitContainer": {
        "description": "FoldSplitContainer组件用于在栅格和分栏布局中管理多个区域的显示和布局，支持多个子组件。",
        "interfaces": [
            {
                "description": "FoldSplitContainer({ primary: Callback<void>, secondary: Callback<void>, extra?: Callback<void>, expandedLayoutOptions?: ExpandedRegionLayoutOptions, hoverModeLayoutOptions?: HoverModeRegionLayoutOptions, foldedLayoutOptions?: FoldedRegionLayoutOptions, animationOptions?: AnimateParam, onHoverStatusChange?: onHoverStatusChangeHandler })",
                "params": {
                    "primary": {
                        "type": "Callback<void>",
                        "required": true,
                        "description": "主要区域的回调函数。"
                    },
                    "secondary": {
                        "type": "Callback<void>",
                        "required": true,
                        "description": "次要区域的回调函数。"
                    },
                    "extra": {
                        "type": "Callback<void>",
                        "required": false,
                        "description": "扩展区域的回调函数。"
                    },
                    "expandedLayoutOptions": {
                        "type": "ExpandedRegionLayoutOptions",
                        "required": false,
                        "description": "展开态布局选项。"
                    },
                    "hoverModeLayoutOptions": {
                        "type": "HoverModeRegionLayoutOptions",
                        "required": false,
                        "description": "悬停态布局选项。"
                    },
                    "foldedLayoutOptions": {
                        "type": "FoldedRegionLayoutOptions",
                        "required": false,
                        "description": "折叠态布局选项。"
                    },
                    "animationOptions": {
                        "type": "AnimateParam",
                        "required": false,
                        "description": "动画选项。"
                    },
                    "onHoverStatusChange": {
                        "type": "onHoverStatusChangeHandler",
                        "required": false,
                        "description": "悬停状态变化的事件处理函数。"
                    }
                }
            }
        ],
        "attributes": {
            "ExpandedRegionLayoutOptions": {
                "description": "展开态布局信息。",
                "params": {
                    "isExtraRegionPerpendicular": {
                        "type": "boolean",
                        "required": false,
                        "description": "扩展区域是否从上到下贯穿整个组件。",
                        "default": true
                    },
                    "verticalSplitRatio": {
                        "type": "number",
                        "required": false,
                        "description": "主要区域与次要区域之间的高度比例。",
                        "default": "PresetSplitRatio.LAYOUT_1V1"
                    },
                    "horizontalSplitRatio": {
                        "type": "number",
                        "required": false,
                        "description": "主要区域与扩展区域之间的宽度比例。",
                        "default": "PresetSplitRatio.LAYOUT_3V2"
                    },
                    "extraRegionPosition": {
                        "type": "ExtraRegionPosition",
                        "required": false,
                        "description": "扩展区域的位置信息。",
                        "default": "ExtraRegionPosition.top"
                    }
                }
            },
            "HoverModeRegionLayoutOptions": {
                "description": "悬停态布局信息。",
                "params": {
                    "showExtraRegion": {
                        "type": "boolean",
                        "required": false,
                        "description": "可折叠屏幕在半折叠状态下是否显示扩展区域。",
                        "default": false
                    },
                    "horizontalSplitRatio": {
                        "type": "number",
                        "required": false,
                        "description": "主要区域与扩展区域之间的宽度比例。",
                        "default": "PresetSplitRatio.LAYOUT_3V2"
                    },
                    "extraRegionPosition": {
                        "type": "ExtraRegionPosition",
                        "required": false,
                        "description": "扩展区域的位置信息。",
                        "default": "ExtraRegionPosition.top"
                    }
                }
            },
            "FoldedRegionLayoutOptions": {
                "description": "折叠态布局信息。",
                "params": {
                    "verticalSplitRatio": {
                        "type": "number",
                        "required": true,
                        "description": "主要区域与次要区域之间的高度比例。",
                        "default": "PresetSplitRatio.LAYOUT_1V1"
                    }
                }
            }
        },
        "events": {
            "onHoverStatusChange": {
                "description": "onHoverStatusChange事件处理。",
                "params": {
                    "callback": {
                        "type": "(status: HoverModeStatus) => void",
                        "required": true,
                        "description": "折叠屏进入或退出悬停模式时触发的回调函数。"
                    }
                }
            }
        },
        "examples": [
            {
                "description": "布局、样式及功能与效果描述：\n该组件通过FoldSplitContainer组件实现了一个复杂的配置界面。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为三个部分，分别是MajorRegion、MinorRegion和ExtraRegion。每个区域包含一个Region组件，用于显示不同的配置选项。\nMajorRegion区域的背景颜色为rgba(255, 0, 0, 0.1)，标题为“折叠态配置”，包含一个RadioOption组件，用于选择折叠态的垂直高度比。MinorRegion区域的背景颜色为rgba(0, 255, 0, 0.1)，标题为“悬停态配置”，包含一个RadioOption组件和一个SwitchOption组件，用于选择悬停态的水平宽度比和是否显示扩展区。ExtraRegion区域的背景颜色为rgba(0, 0, 255, 0.1)，标题为“展开态配置”，包含多个RadioOption组件和SwitchOption组件，用于选择展开态的水平宽度比、垂直高度比、扩展区是否上下贯穿以及扩展区的位置。\n整个布局通过FoldSplitContainer组件保证三个区域在垂直方向上有序排列，确保界面整洁美观。每个区域的配置选项通过RadioOption和SwitchOption组件实现，用户可以通过选择不同的选项来配置不同的布局和样式。",
                "code": "import {\n  FoldSplitContainer,\n  PresetSplitRatio,\n  ExtraRegionPosition,\n  ExpandedRegionLayoutOptions,\n  HoverModeRegionLayoutOptions,\n  FoldedRegionLayoutOptions\n} from '@kit.ArkUI';\n\n@Component\nstruct Region {\n  @Prop title: string; // 标题属性\n  @BuilderParam content: () => void; // 内容构建器参数\n  @Prop compBackgroundColor: string; // 组件背景颜色属性\n\n  build() {\n    Column({ space: 8 }) {\n      Text(this.title)\n        .fontSize(\"24fp\") // 设置字体大小为24fp\n        .fontWeight(600) // 设置字体粗细为600\n\n      Scroll() {\n        this.content() // 调用内容构建器\n      }\n      .layoutWeight(1) // 设置布局权重为1\n      .width(\"100%\") // 设置宽度为100%\n    }\n    .backgroundColor(this.compBackgroundColor) // 设置背景颜色\n    .width(\"100%\") // 设置宽度为100%\n    .height(\"100%\") // 设置高度为100%\n    .padding(12) // 设置内边距为12\n  }\n}\n\nconst noop = () => {\n};\n\n@Component\nstruct SwitchOption {\n  @Prop label: string = \"\" // 标签属性\n  @Prop value: boolean = false // 值属性\n  public onChange: (checked: boolean) => void = noop; // 改变事件处理函数\n\n  build() {\n    Row() {\n      Text(this.label)\n      Blank()\n      Toggle({ type: ToggleType.Switch, isOn: this.value })\n        .onChange((isOn) => {\n          this.onChange(isOn); // 调用改变事件处理函数\n        })\n    }\n    .backgroundColor(Color.White) // 设置背景颜色为白色\n    .borderRadius(8) // 设置边框圆角为8\n    .padding(8) // 设置内边距为8\n    .width(\"100%\") // 设置宽度为100%\n  }\n}\n\ninterface RadioOptions {\n  label: string; // 标签属性\n  value: Object | undefined | null; // 值属性\n  onChecked: () => void; // 选中事件处理函数\n}\n\n@Component\nstruct RadioOption {\n  @Prop label: string; // 标签属性\n  @Prop value: Object | undefined | null; // 值属性\n  @Prop options: Array<RadioOptions>; // 选项数组属性\n\n  build() {\n    Row() {\n      Text(this.label)\n      Blank()\n      Column({ space: 4 }) {\n        ForEach(this.options, (option: RadioOptions) => {\n          Row() {\n            Radio({\n              group: this.label,\n              value: JSON.stringify(option.value),\n            })\n              .checked(this.value === option.value) // 设置选中状态\n              .onChange((checked) => {\n                if (checked) {\n                  option.onChecked(); // 调用选中事件处理函数\n                }\n              })\n            Text(option.label)\n          }\n        })\n      }\n      .alignItems(HorizontalAlign.Start) // 设置对齐方式为左对齐\n    }\n    .alignItems(VerticalAlign.Top) // 设置对齐方式为顶部对齐\n    .backgroundColor(Color.White) // 设置背景颜色为白色\n    .borderRadius(8) // 设置边框圆角为8\n    .padding(8) // 设置内边距为8\n    .width(\"100%\") // 设置宽度为100%\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  @State expandedRegionLayoutOptions: ExpandedRegionLayoutOptions = {\n    horizontalSplitRatio: PresetSplitRatio.LAYOUT_3V2, // 展开态水平宽度比\n    verticalSplitRatio: PresetSplitRatio.LAYOUT_1V1, // 展开态垂直高度比\n    isExtraRegionPerpendicular: true, // 展开态扩展区是否上下贯穿\n    extraRegionPosition: ExtraRegionPosition.TOP // 展开态扩展区位置\n  };\n  @State foldingRegionLayoutOptions: HoverModeRegionLayoutOptions = {\n    horizontalSplitRatio: PresetSplitRatio.LAYOUT_3V2, // 悬停态水平宽度比\n    showExtraRegion: false, // 悬停态是否显示扩展区\n    extraRegionPosition: ExtraRegionPosition.TOP // 悬停态扩展区位置\n  };\n  @State foldedRegionLayoutOptions: FoldedRegionLayoutOptions = {\n    verticalSplitRatio: PresetSplitRatio.LAYOUT_1V1 // 折叠态垂直高度比\n  };\n\n  @Builder\n  MajorRegion() {\n    Region({\n      title: \"折叠态配置\",\n      compBackgroundColor: \"rgba(255, 0, 0, 0.1)\",\n    }) {\n      Column({ space: 4 }) {\n        RadioOption({\n          label: \"折叠态垂直高度度比\",\n          value: this.foldedRegionLayoutOptions.verticalSplitRatio,\n          options: [\n            {\n              label: \"1:1\",\n              value: PresetSplitRatio.LAYOUT_1V1,\n              onChecked: () => {\n                this.foldedRegionLayoutOptions.verticalSplitRatio = PresetSplitRatio.LAYOUT_1V1\n              }\n            },\n            {\n              label: \"2:3\",\n              value: PresetSplitRatio.LAYOUT_2V3,\n              onChecked: () => {\n                this.foldedRegionLayoutOptions.verticalSplitRatio = PresetSplitRatio.LAYOUT_2V3\n              }\n            },\n            {\n              label: \"3:2\",\n              value: PresetSplitRatio.LAYOUT_3V2,\n              onChecked: () => {\n                this.foldedRegionLayoutOptions.verticalSplitRatio = PresetSplitRatio.LAYOUT_3V2\n              }\n            },\n            {\n              label: \"未定义\",\n              value: undefined,\n              onChecked: () => {\n                this.foldedRegionLayoutOptions.verticalSplitRatio = undefined\n              }\n            }\n          ]\n        })\n      }\n      .constraintSize({ minHeight: \"100%\" }) // 设置最小高度为100%\n    }\n  }\n\n  @Builder\n  MinorRegion() {\n    Region({\n      title: \"悬停态配置\",\n      compBackgroundColor: \"rgba(0, 255, 0, 0.1)\"\n    }) {\n      Column({ space: 4 }) {\n        RadioOption({\n          label: \"悬停态水平宽度比\",\n          value: this.foldingRegionLayoutOptions.horizontalSplitRatio,\n          options: [\n            {\n              label: \"1:1\",\n              value: PresetSplitRatio.LAYOUT_1V1,\n              onChecked: () => {\n                this.foldingRegionLayoutOptions.horizontalSplitRatio = PresetSplitRatio.LAYOUT_1V1\n              }\n            },\n            {\n              label: \"2:3\",\n              value: PresetSplitRatio.LAYOUT_2V3,\n              onChecked: () => {\n                this.foldingRegionLayoutOptions.horizontalSplitRatio = PresetSplitRatio.LAYOUT_2V3\n              }\n            },\n            {\n              label: \"3:2\",\n              value: PresetSplitRatio.LAYOUT_3V2,\n              onChecked: () => {\n                this.foldingRegionLayoutOptions.horizontalSplitRatio = PresetSplitRatio.LAYOUT_3V2\n              }\n            },\n            {\n              label: \"未定义\",\n              value: undefined,\n              onChecked: () => {\n                this.foldingRegionLayoutOptions.horizontalSplitRatio = undefined\n              },\n            ]\n          })\n\n          SwitchOption({\n            label: \"悬停态是否显示扩展区\",\n            value: this.foldingRegionLayoutOptions.showExtraRegion,\n            onChange: (checked) => {\n              this.foldingRegionLayoutOptions.showExtraRegion = checked;\n            }\n          })\n\n          if (this.foldingRegionLayoutOptions.showExtraRegion) {\n            RadioOption({\n              label: \"悬停态扩展区位置\",\n              value: this.foldingRegionLayoutOptions.extraRegionPosition,\n              options: [\n                {\n                  label: \"顶部\",\n                  value: ExtraRegionPosition.TOP,\n                  onChecked: () => {\n                    this.foldingRegionLayoutOptions.extraRegionPosition = ExtraRegionPosition.TOP\n                  }\n                },\n                {\n                  label: \"底部\",\n                  value: ExtraRegionPosition.BOTTOM,\n                  onChecked: () => {\n                    this.foldingRegionLayoutOptions.extraRegionPosition = ExtraRegionPosition.BOTTOM\n                  }\n                },\n                {\n                  label: \"未定义\",\n                  value: undefined,\n                  onChecked: () => {\n                    this.foldingRegionLayoutOptions.extraRegionPosition = undefined\n                  }\n                },\n              ]\n            })\n          }\n        }\n        .constraintSize({ minHeight: \"100%\" }) // 设置最小高度为100%\n      }\n    }\n\n    @Builder\n    ExtraRegion() {\n      Region({\n        title: \"展开态配置\",\n        compBackgroundColor: \"rgba(0, 0, 255, 0.1)\"\n      }) {\n        Column({ space: 4 }) {\n          RadioOption({\n            label: \"展开态水平宽度比\",\n            value: this.expandedRegionLayoutOptions.horizontalSplitRatio,\n            options: [\n              {\n                label: \"1:1\",\n                value: PresetSplitRatio.LAYOUT_1V1,\n                onChecked: () => {\n                  this.expandedRegionLayoutOptions.horizontalSplitRatio = PresetSplitRatio.LAYOUT_1V1\n                }\n              },\n              {\n                label: \"2:3\",\n                value: PresetSplitRatio.LAYOUT_2V3,\n                onChecked: () => {\n                  this.expandedRegionLayoutOptions.horizontalSplitRatio = PresetSplitRatio.LAYOUT_2V3\n                }\n              },\n              {\n                label: \"3:2\",\n                value: PresetSplitRatio.LAYOUT_3V2,\n                onChecked: () => {\n                  this.expandedRegionLayoutOptions.horizontalSplitRatio = PresetSplitRatio.LAYOUT_3V2\n                }\n              },\n              {\n                label: \"未定义\",\n                value: undefined,\n                onChecked: () => {\n                  this.expandedRegionLayoutOptions.horizontalSplitRatio = undefined\n                }\n              },\n            ]\n          })\n\n          RadioOption({\n            label: \"展开态垂直高度度比\",\n            value: this.expandedRegionLayoutOptions.verticalSplitRatio,\n            options: [\n              {\n                label: \"1:1\",\n                value: PresetSplitRatio.LAYOUT_1V1,\n                onChecked: () => {\n                  this.expandedRegionLayoutOptions.verticalSplitRatio = PresetSplitRatio.LAYOUT_1V1\n                }\n              },\n              {\n                label: \"2:3\",\n                value: PresetSplitRatio.LAYOUT_2V3,\n                onChecked: () => {\n                  this.expandedRegionLayoutOptions.verticalSplitRatio = PresetSplitRatio.LAYOUT_2V3\n                }\n              },\n              {\n                label: \"3:2\",\n                value: PresetSplitRatio.LAYOUT_3V2,\n                onChecked: () => {\n                  this.expandedRegionLayoutOptions.verticalSplitRatio = PresetSplitRatio.LAYOUT_3V2\n                }\n              },\n              {\n                label: \"未定义\",\n                value: undefined,\n                onChecked: () => {\n                  this.expandedRegionLayoutOptions.verticalSplitRatio = undefined\n                }\n              }\n            ]\n          })\n\n          SwitchOption({\n            label: \"展开态扩展区是否上下贯穿\",\n            value: this.expandedRegionLayoutOptions.isExtraRegionPerpendicular,\n            onChange: (checked) => {\n              this.expandedRegionLayoutOptions.isExtraRegionPerpendicular = checked;\n            }\n          })\n\n          if (!this.expandedRegionLayoutOptions.isExtraRegionPerpendicular) {\n            RadioOption({\n              label: \"展开态扩展区位置\",\n              value: this.expandedRegionLayoutOptions.extraRegionPosition,\n              options: [\n                {\n                  label: \"顶部\",\n                  value: ExtraRegionPosition.TOP,\n                  onChecked: () => {\n                    this.expandedRegionLayoutOptions.extraRegionPosition = ExtraRegionPosition.TOP\n                  }\n                },\n                {\n                  label: \"底部\",\n                  value: ExtraRegionPosition.BOTTOM,\n                  onChecked: () => {\n                    this.expandedRegionLayoutOptions.extraRegionPosition = ExtraRegionPosition.BOTTOM\n                  }\n                },\n                {\n                  label: \"未定义\",\n                  value: undefined,\n                  onChecked: () => {\n                    this.expandedRegionLayoutOptions.extraRegionPosition = undefined\n                  }\n                },\n              ]\n            })\n          }\n        }\n        .constraintSize({ minHeight: \"100%\" }) // 设置最小高度为100%\n      }\n    }\n\n    build() {\n      Column() {\n        FoldSplitContainer({\n          primary: () => {\n            this.MajorRegion() // 调用MajorRegion区域的内容\n          },\n          secondary: () => {\n            this.MinorRegion() // 调用MinorRegion区域的内容\n          },\n          extra: () => {\n            this.ExtraRegion() // 调用ExtraRegion区域的内容\n          },\n          expandedLayoutOptions: this.expandedRegionLayoutOptions, // 展开态布局选项\n          hoverModeLayoutOptions: this.foldingRegionLayoutOptions, // 悬停态布局选项\n          foldedLayoutOptions: this.foldedRegionLayoutOptions, // 折叠态布局选项\n        })\n      }\n      .width(\"100%\") // 设置宽度为100%\n      .height(\"100%\") // 设置高度为100%\n    }\n  }\n}"
            }
        ]
    },
    "SideBarContainer": {
        "description": "提供侧边栏可以显示和隐藏的侧边栏容器，通过子组件定义侧边栏和内容区，第一个子组件表示侧边栏，第二个子组件表示内容区。",
        "details": null,
        "interfaces": [
            {
                "description": "SideBarContainer( type?: SideBarContainerType )",
                "params": {
                    "type": {
                        "type": "SideBarContainerType",
                        "required": false,
                        "description": "侧边栏容器的类型。"
                    }
                }
            }
        ],
        "attributes": {
            "showSideBar": {
                "description": "设置是否显示侧边栏。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否显示侧边栏。",
                        "default": true
                    }
                }
            },
            "controlButton": {
                "description": "设置侧边栏控制按钮的属性。",
                "params": {
                    "value": {
                        "type": "ButtonStyle",
                        "required": true,
                        "description": "侧边栏控制按钮的属性。"
                    }
                }
            },
            "showControlButton": {
                "description": "设置是否显示控制按钮。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否显示控制按钮。",
                        "default": true
                    }
                }
            },
            "sideBarWidth": {
                "description": "设置侧边栏的宽度。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "侧边栏的宽度。",
                        "default": 240
                    }
                }
            },
            "minSideBarWidth": {
                "description": "设置侧边栏最小宽度。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "侧边栏最小宽度。",
                        "default": 240
                    }
                }
            },
            "maxSideBarWidth": {
                "description": "设置侧边栏最大宽度。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "侧边栏最大宽度。",
                        "default": 280
                    }
                }
            },
            "autoHide": {
                "description": "设置当侧边栏拖拽到小于最小宽度后，是否自动隐藏。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否自动隐藏。",
                        "default": true
                    }
                }
            },
            "sideBarPosition": {
                "description": "设置侧边栏显示位置。",
                "params": {
                    "value": {
                        "type": "SideBarPosition",
                        "required": true,
                        "description": "侧边栏显示位置。"
                    }
                }
            },
            "divider": {
                "description": "设置分割线的样式。",
                "params": {
                    "value": {
                        "type": "DividerStyle",
                        "required": true,
                        "description": "分割线的样式。"
                    }
                }
            },
            "minContentWidth": {
                "description": "设置SideBarContainer组件内容区可显示的最小宽度。",
                "params": {
                    "value": {
                        "type": "Dimension",
                        "required": true,
                        "description": "内容区可显示的最小宽度。",
                        "default": 360
                    }
                }
            }
        },
        "events": {
            "onChange": {
                "description": "当侧边栏的状态在显示和隐藏之间切换时触发回调。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "true表示显示，false表示隐藏。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 SideBarContainer 组件实现了一个侧边栏布局，侧边栏和主内容区域嵌套在同一容器中。侧边栏部分展示了多个选项，每个选项包含一个图标和文本，用户可以通过点击选项来切换当前选中的项。主内容区域展示了两个文本标签。\n\n布局属性方面，SideBarContainer 的宽度为 150vp，最小宽度为 50vp，最大宽度为 300vp，主内容区域的最小宽度为 0。侧边栏和主内容区域之间有一个分隔线，分隔线的颜色为灰色，宽度为 1vp，起始和结束的边距分别为 4vp。\n\n组件的样式和外观方面，侧边栏的背景颜色为半透明的黑色（#19000000），选项的图标和文本根据当前选中的状态显示不同的颜色。选中的图标和文本颜色为蓝色（#0A59F7），未选中的图标和文本颜色为灰色（#999）。主内容区域的文本标签字体大小为 25，上下边距为 50vp，左右边距分别为 20vp 和 30vp。\n\n组件的排列和嵌套关系方面，侧边栏和主内容区域通过 SideBarContainer 组件嵌套在一起。侧边栏部分通过 Column 组件垂直排列，每个选项通过 Column 组件垂直排列，图标和文本之间有 5vp 的间距。主内容区域通过 Column 组件垂直排列，两个文本标签之间没有间距。\n\n组件的功能和交互方面，用户可以通过点击侧边栏中的选项来切换当前选中的项，点击事件通过 onClick 方法实现。SideBarContainer 的状态变化通过 onChange 方法监听，并在控制台输出当前状态。",
                "code": "@Entry\n@Component\nstruct SideBarContainerExample {\n  // 普通状态下的图标资源\n  normalIcon: Resource = $r(\"app.media.icon\")\n  // 选中状态下的图标资源\n  selectedIcon: Resource = $r(\"app.media.icon\")\n  // 选项数组，包含三个数字\n  @State arr: number[] = [1, 2, 3]\n  // 当前选中的选项，初始值为 1\n  @State current: number = 1\n\n  build() {\n    // 创建一个嵌入式的 SideBarContainer 组件\n    SideBarContainer(SideBarContainerType.Embed) {\n      // 侧边栏部分\n      Column() {\n        // 遍历选项数组，生成每个选项\n        ForEach(this.arr, (item: number) => {\n          Column({ space: 5 }) {\n            // 根据当前选中的状态显示不同的图标\n            Image(this.current === item ? this.selectedIcon : this.normalIcon)\n              .width(64)\n              .height(64)\n            // 显示选项的文本，根据当前选中的状态显示不同的颜色\n            Text(\"Index0\" + item)\n              .fontSize(25)\n              .fontColor(this.current === item ? '#0A59F7' : '#999')\n              .fontFamily('source-sans-pro,cursive,sans-serif')\n          }\n          .onClick(() => {\n            // 点击选项时，更新当前选中的项\n            this.current = item\n          })\n        }, (item: string) => item)\n      }\n      .width('100%')\n      .justifyContent(FlexAlign.SpaceEvenly)\n      .backgroundColor('#19000000')\n\n      // 主内容区域\n      Column() {\n        Text('SideBarContainer content text1').fontSize(25)\n        Text('SideBarContainer content text2').fontSize(25)\n      }\n      .margin({ top: 50, left: 20, right: 30 })\n    }\n    .controlButton({\n      icons: {\n        hidden: $r('app.media.drawer'),\n        shown: $r('app.media.drawer'),\n        switching: $r('app.media.drawer')\n      }\n    })\n    .sideBarWidth(150)\n    .minSideBarWidth(50)\n    .maxSideBarWidth(300)\n    .minContentWidth(0)\n    .onChange((value: boolean) => {\n      // 监听 SideBarContainer 的状态变化，并在控制台输出当前状态\n      console.info('status:' + value)\n    })\n    .divider({ strokeWidth: '1vp', color: Color.Gray, startMargin: '4vp', endMargin: '4vp' })\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "List": {
        "description": "列表包含一系列相同宽度的列表项。适合连续、多行呈现同类数据，例如图片和文本。",
        "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "List(value?:{space?: number | string, initialIndex?: number, scroller?: Scroller})",
                "params": {
                    "space": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "description": "子组件主轴方向的间隔。参数类型为number时单位为vp。"
                    },
                    "initialIndex": {
                        "type": "number",
                        "description": "设置当前List初次加载时视口起始位置显示的item的索引值。"
                    },
                    "scroller": {
                        "type": "Scroller",
                        "description": "可滚动组件的控制器。用于与可滚动组件进行绑定。"
                    }
                }
            }
        ],
        "attributes": {
            "listDirection": {
                "description": "设置List组件排列方向。",
                "params": {
                    "value": {
                        "type": "Axis",
                        "required": true,
                        "description": "组件的排列方向。",
                        "default": "Axis.Vertical"
                    }
                }
            },
            "divider": {
                "description": "设置ListItem分割线样式，默认无分割线。",
                "params": {
                    "value": {
                        "type": {
                            "strokeWidth": "Length",
                            "color": "ResourceColor",
                            "startMargin": "Length",
                            "endMargin": "Length"
                        },
                        "description": "ListItem分割线样式。"
                    }
                }
            },
            "scrollBar": {
                "description": "设置滚动条状态。",
                "params": {
                    "value": {
                        "type": "BarState",
                        "required": true,
                        "description": "滚动条状态。",
                        "default": "BarState.Auto"
                    }
                }
            },
            "cachedCount": {
                "description": "设置列表中ListItem/ListItemGroup的预加载数量，懒加载场景只会预加载List显示区域外cachedCount的内容，非懒加载场景会全部加载。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "ListItem/ListItemGroup的预加载数量。",
                        "default": 1
                    }
                }
            },
            "edgeEffect": {
                "description": "设置边缘滑动效果。",
                "params": {
                    "value": {
                        "type": "EdgeEffect",
                        "required": true,
                        "description": "List组件的边缘滑动效果，支持弹簧效果和阴影效果。",
                        "default": "EdgeEffect.Spring"
                    },
                    "options": {
                        "type": "EdgeEffectOptions",
                        "description": "组件内容大小小于组件自身时，是否开启滑动效果。"
                    }
                }
            },
            "chainAnimation": {
                "description": "设置当前List是否启用链式联动动效，开启后列表滑动以及顶部和底部拖拽时会有链式联动的效果。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否启用链式联动动效。",
                        "default": false
                    }
                }
            },
            "multiSelectable": {
                "description": "设置是否开启鼠标框选。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否开启鼠标框选。",
                        "default": false
                    }
                }
            },
            "lanes": {
                "description": "设置List组件的布局列数或行数。gutter为列间距，当列数大于1时生效。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "LengthConstrain"
                        ],
                        "required": true,
                        "description": "List组件的布局列数或行数。"
                    },
                    "gutter": {
                        "type": "Dimension",
                        "description": "列间距。"
                    }
                }
            },
            "alignListItem": {
                "description": "设置List交叉轴方向宽度大于ListItem交叉轴宽度 * lanes时，ListItem在List交叉轴方向的布局方式。",
                "params": {
                    "value": {
                        "type": "ListItemAlign",
                        "required": true,
                        "description": "交叉轴方向的布局方式。",
                        "default": "ListItemAlign.Start"
                    }
                }
            },
            "sticky": {
                "description": "配合ListItemGroup组件使用，设置ListItemGroup中header和footer是否要吸顶或吸底。",
                "params": {
                    "value": {
                        "type": "StickyStyle",
                        "required": true,
                        "description": "ListItemGroup吸顶或吸底效果。",
                        "default": "StickyStyle.None"
                    }
                }
            },
            "scrollSnapAlign": {
                "description": "设置列表项滚动结束对齐效果。",
                "params": {
                    "value": {
                        "type": "ScrollSnapAlign",
                        "required": true,
                        "description": "列表项滚动结束对齐效果。",
                        "default": "ScrollSnapAlign.NONE"
                    }
                }
            },
            "enableScrollInteraction": {
                "description": "设置是否支持滚动手势，当设置为false时，无法通过手指或者鼠标滚动，但不影响控制器的滚动接口。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否支持滚动手势。",
                        "default": true
                    }
                }
            },
            "nestedScroll": {
                "description": "设置向前向后两个方向上的嵌套滚动模式，实现与父组件的滚动联动。",
                "params": {
                    "value": {
                        "type": "NestedScrollOptions",
                        "required": true,
                        "description": "嵌套滚动模式。"
                    }
                }
            },
            "friction": {
                "description": "设置摩擦系数，手动划动滚动区域时生效，只对惯性滚动过程有影响，对惯性滚动过程中的链式效果有间接影响。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "Resource"
                        ],
                        "required": true,
                        "description": "摩擦系数。",
                        "default": 0.75
                    }
                }
            },
            "contentStartOffset": {
                "description": "设置内容区域起始偏移量。列表滚动到起始位置时，列表内容与列表显示区域边界保留指定距离。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "内容区域起始偏移量。",
                        "default": 0
                    }
                }
            },
            "contentEndOffset": {
                "description": "设置内容区末尾偏移量。列表滚动到末尾位置时，列表内容与列表显示区域边界保留指定距离。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "内容区末尾偏移量。",
                        "default": 0
                    }
                }
            },
            "childrenMainSize": {
                "description": "设置List组件的子组件在主轴方向的大小信息。",
                "params": {
                    "value": {
                        "type": "ChildrenMainSize",
                        "required": true,
                        "description": "子组件在主轴方向的大小信息。"
                    }
                }
            }
        },
        "events": {
            "onItemDelete": {
                "description": "当List组件在编辑模式时，点击ListItem右边出现的删除按钮时触发。",
                "params": {
                    "index": {
                        "type": "number",
                        "required": true,
                        "description": "被删除的列表项的索引值。"
                    }
                }
            },
            "onScrollIndex": {
                "description": "有子组件划入或划出List显示区域时触发。计算索引值时，ListItemGroup作为一个整体占一个索引值，不计算ListItemGroup内部ListItem的索引值。",
                "params": {
                    "start": {
                        "type": "number",
                        "required": true,
                        "description": "List显示区域内第一个子组件的索引值。"
                    },
                    "end": {
                        "type": "number",
                        "required": true,
                        "description": "List显示区域内最后一个子组件的索引值。"
                    },
                    "center": {
                        "type": "number",
                        "required": true,
                        "description": "List显示区域内中间位置子组件的索引值。"
                    }
                }
            },
            "onReachStart": {
                "description": "列表到达起始位置时触发。",
                "params": {}
            },
            "onReachEnd": {
                "description": "列表到底末尾位置时触发。",
                "params": {}
            },
            "onScrollFrameBegin": {
                "description": "列表开始滑动时触发，事件参数传入即将发生的滑动量，事件处理函数中可根据应用场景计算实际需要的滑动量并作为事件处理函数的返回值返回，列表将按照返回值的实际滑动量进行滑动。",
                "params": {
                    "offset": {
                        "type": "number",
                        "required": true,
                        "description": "即将发生的滑动量，单位vp。"
                    },
                    "state": {
                        "type": "ScrollState",
                        "required": true,
                        "description": "当前滑动状态。"
                    }
                }
            },
            "onScrollStart": {
                "description": "列表滑动开始时触发。手指拖动列表或列表的滚动条触发的滑动开始时，会触发该事件。使用Scroller滑动控制器触发的带动画的滑动，动画开始时会触发该事件。",
                "params": {}
            },
            "onScrollStop": {
                "description": "列表滑动停止时触发。手拖动列表或列表的滚动条触发的滑动，手离开屏幕并且滑动停止时会触发该事件。使用Scroller滑动控制器触发的带动画的滑动，动画停止会触发该事件。",
                "params": {}
            },
            "onItemMove": {
                "description": "列表元素发生移动时触发。",
                "params": {
                    "from": {
                        "type": "number",
                        "required": true,
                        "description": "移动前索引值。"
                    },
                    "to": {
                        "type": "number",
                        "required": true,
                        "description": "移动后索引值。"
                    }
                }
            },
            "onItemDragStart": {
                "description": "开始拖拽列表元素时触发。",
                "params": {
                    "event": {
                        "type": "ItemDragInfo",
                        "required": true,
                        "description": "拖拽点的信息。"
                    },
                    "itemIndex": {
                        "type": "number",
                        "required": true,
                        "description": "被拖拽列表元素索引值。"
                    }
                }
            },
            "onItemDragEnter": {
                "description": "拖拽进入列表元素范围内时触发。",
                "params": {
                    "event": {
                        "type": "ItemDragInfo",
                        "required": true,
                        "description": "拖拽点的信息。"
                    }
                }
            },
            "onItemDragMove": {
                "description": "拖拽在列表元素范围内移动时触发。",
                "params": {
                    "event": {
                        "type": "ItemDragInfo",
                        "required": true,
                        "description": "拖拽点的信息。"
                    },
                    "itemIndex": {
                        "type": "number",
                        "required": true,
                        "description": "拖拽起始位置。"
                    },
                    "insertIndex": {
                        "type": "number",
                        "required": true,
                        "description": "拖拽插入位置。"
                    }
                }
            },
            "onItemDragLeave": {
                "description": "拖拽离开列表元素时触发。",
                "params": {
                    "event": {
                        "type": "ItemDragInfo",
                        "required": true,
                        "description": "拖拽点的信息。"
                    },
                    "itemIndex": {
                        "type": "number",
                        "required": true,
                        "description": "拖拽离开的列表元素索引值。"
                    }
                }
            },
            "onItemDrop": {
                "description": "绑定该事件的列表元素可作为拖拽释放目标，当在列表元素内停止拖拽时触发。",
                "params": {
                    "event": {
                        "type": "ItemDragInfo",
                        "required": true,
                        "description": "拖拽点的信息。"
                    },
                    "itemIndex": {
                        "type": "number",
                        "required": true,
                        "description": "拖拽起始位置。"
                    },
                    "insertIndex": {
                        "type": "number",
                        "required": true,
                        "description": "拖拽插入位置。"
                    },
                    "isSuccess": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否成功释放。"
                    }
                }
            },
            "onScroll": {
                "description": "列表滑动时触发。",
                "params": {
                    "scrollOffset": {
                        "type": "number",
                        "required": true,
                        "description": "每帧滚动的偏移量，List的内容向上滚动时偏移量为正，向下滚动时偏移量为负。单位vp。"
                    },
                    "scrollState": {
                        "type": "ScrollState",
                        "required": true,
                        "description": "当前滑动状态。"
                    }
                }
            },
            "onWillScroll": {
                "description": "列表滑动前触发。回调当前帧将要滑动的偏移量，当前滑动状态和滑动操作来源，其中回调的偏移量为计算得到的将要滑动的偏移量值，并非最终实际滑动偏移。可以通过该回调返回值指定列表将要滑动的偏移。",
                "params": {
                    "handler": {
                        "type": "OnWillScrollCallback",
                        "required": true,
                        "description": "滑动前回调函数。"
                    }
                }
            },
            "onDidScroll": {
                "description": "列表滑动时触发，返回当前帧滑动的偏移量和当前滑动状态。",
                "params": {
                    "handler": {
                        "type": "OnScrollCallback",
                        "required": true,
                        "description": "滑动时回调函数。"
                    }
                }
            },
            "onScrollVisibleContentChange": {
                "description": "有子组件划入或划出List显示区域时触发。计算触发条件时，每一个ListItem/ListItemGroup中的header/ListItemGroup中的footer都算一个子组件。",
                "params": {
                    "handler": {
                        "type": "OnScrollVisibleContentChangeCallback",
                        "required": true,
                        "description": "子组件划入或划出List显示区域时回调函数。"
                    }
                }
            }
        },
        "rules": [
            "该组件内容区小于一屏时，默认没有回弹效果。需要回弹效果，可以通过edgeEffect属性的options参数进行设置。",
            "List组件通用属性clip的默认值为true。",
            "要使List处于可编辑模式需配合onItemDelete事件和ListItem的editable属性，即可编辑模式实现删除列表项功能，需满足以下条件：editMode属性设置为true，绑定onItemDelete事件，且事件回调返回true，ListItem的editable属性设置为true。",
            "实现ListItem拖拽，需满足以下条件：editMode属性设置为true（从API9开始无需设置editMode属性），绑定onDragStart事件，且事件回调中返回浮动UI布局。",
            "List的子组件的索引值计算规则：按子组件的顺序依次递增。if/else语句中，只有条件成立的分支内的子组件会参与索引值计算，条件不成立的分支内子组件不计算索引值。ForEach/LazyForEach/Repeat语句中，会计算展开所有子节点索引值。if/else、ForEach、LazyForEach和Repeat发生变化以后，会更新子节点索引值。ListItemGroup作为一个整体计算一个索引值，ListItemGroup内部的ListItem不计算索引值。List子组件visibility属性设置为Hidden或None依然会计算索",
            "List子组件的visibility属性设置为None时不显示，但该子组件上下的space还会生效。",
            "链式动效生效需要满足以下前提条件：List边缘效果为Spring类型，List没有启用多列模式。",
            "List下嵌套使用LazyForEach，并且LazyForEach下嵌套使用ListItemGroup时，LazyForEach会在List显示区域外上下各会创建cachedCount个ListItemGroup。",
            "List的分割线画在主轴方向两个子组件之间，第一个子组件上方和最后一个子组件下方不会绘制分割线。",
            "多列模式下，ListItem与ListItem之间的分割线起始边距从每一列的交叉轴方向起始边开始计算，其他情况从List交叉轴方向起始边开始计算。",
            "ListItem设置多态样式时，被按压的子组件上下的分割线不绘制。",
            "List的边缘效果为弹簧效果时，在List划动到边缘继续划动和松手回弹过程不会触发onScrollIndex事件。",
            "触发onScrollIndex事件的条件：列表初始化时会触发一次，List显示区域内第一个子组件的索引值或最后一个子组件的索引值有变化时会触发。",
            "从API version 10开始，List显示区域中间位置子组件变化时也会触发onScrollIndex事件。",
            "List初始化时如果initialIndex为0会触发一次onReachStart事件，List滚动到起始位置时触发一次onReachStart事件。List边缘效果为弹簧效果时，划动经过起始位置时触发一次onReachStart事件，回弹回起始位置时再触发一次onReachStart事件。",
            "List边缘效果为弹簧效果时，划动经过末尾位置时触发一次onReachEnd事件，回弹回末尾位置时再触发一次onReachEnd事件。",
            "触发onScrollFrameBegin事件的条件：手指拖动List、List惯性划动时每帧开始时触发；List超出边缘回弹、使用滚动控制器和拖动滚动条的滚动不会触发。",
            "使用Scroller滑动控制器触发的带动画的滑动，动画开始时会触发onScrollStart事件。",
            "手拖动列表或列表的滚动条触发的滑动，手离开屏幕并且滑动停止时会触发onScrollStop事件。使用Scroller滑动控制器触发的带动画的滑动，动画停止会触发onScrollStop事件。",
            "跨List拖拽时，当拖拽释放的位置绑定了onItemDrop时会返回true，否则为false。List内部拖拽时，isSuccess为onItemMove事件的返回值。",
            "调用ScrollEdge和不带动画的ScrollToIndex时，不触发onWillScroll。",
            "调用ScrollEdge和不带动画的ScrollToIndex时，不触发onDidScroll。",
            "调用ScrollEdge和不带动画的ScrollToIndex时，不触发onScrollVisibleContentChange。",
            "List的边缘效果为弹簧效果时，在List划动到边缘继续划动和松手回弹过程不会触发onScrollVisibleContentChange事件。",
            "触发onScrollVisibleContentChange事件的条件：列表初始化时会触发一次，List显示区域内第一个子组件的索引值或最后一个子组件的索引值有变化时会触发。",
            "从API version 10开始，List显示区域中间位置子组件变化时也会触发onScrollVisibleContentChange事件。"
        ],
        "examples": [
            {
                "description": "该组件通过 Column 和 Row 布局实现了一个水平滚动的列表界面。布局宽度占据整个屏幕，高度设为 100%，内边距为顶部 10vp。组件的垂直方向上包含一个 Row 布局，Row 布局内部嵌套了一个 List 组件。List 组件的列表项以水平布局方式排列，列表项之间的间距为 20vp，且对齐方式为居中对齐。\nList 组件的样式包括背景颜色、边框圆角、宽度和高度等属性，支持水平滚动和弹性边缘效果。列表项的样式包括背景颜色、边框圆角、宽度和高度等属性，每个列表项包含一个 Text 组件，用于显示数字。Text 组件的样式包括字体大小、对齐方式、宽度和高度等属性。\n整个布局通过 Column 和 Row 布局保证列表项在水平方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ListExample {\n  private arr: number[] = [] // 用于存储列表项数据的数组\n  private scrollerForList: Scroller = new Scroller() // 用于控制列表滚动的 Scroller 对象\n\n  aboutToAppear() {\n    for (let i = 0; i < 20; i++) {\n      this.arr.push(i) // 初始化列表项数据，添加 20 个数字到数组中\n    }\n  }\n\n  build() {\n    Column() {\n      Row() {\n        List({ space: 20, initialIndex: 3, scroller: this.scrollerForList }) {\n          ForEach(this.arr, (item: number) => {\n            ListItem() {\n              Text('' + item) // 显示列表项的数字\n                .width('100%').height(100).fontSize(16) // Text 组件的宽度、高度和字体大小\n                .textAlign(TextAlign.Center) // 文本居中对齐\n            }\n            .borderRadius(10).backgroundColor(0xFFFFFF) // 列表项的边框圆角和背景颜色\n            .width('60%') // 列表项的宽度\n            .height('80%') // 列表项的高度\n          }, (item: number) => JSON.stringify(item)) // 列表项的唯一标识符\n        }\n        .chainAnimation(true) // 启用列表项的链式动画\n        .edgeEffect(EdgeEffect.Spring) // 启用弹性边缘效果\n        .listDirection(Axis.Horizontal) // 设置列表为水平方向\n        .height('100%') // 列表的高度\n        .width('100%') // 列表的宽度\n        .scrollSnapAlign(ScrollSnapAlign.CENTER) // 设置滚动对齐方式为居中对齐\n        .borderRadius(10) // 列表的边框圆角\n        .backgroundColor(0xDCDCDC) // 列表的背景颜色\n      }\n      .width('100%') // Row 组件的宽度\n      .height('100%') // Row 组件的高度\n      .backgroundColor(0xDCDCDC) // Row 组件的背景颜色\n      .padding({ top: 10 }) // Row 组件的顶部内边距\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个展示数字列表的界面。布局宽度占据整个屏幕，高度设为 100%，背景颜色为浅灰色（0xDCDCDC），顶部内边距为 5vp。组件的垂直方向上被分为两个主要部分：一个 List 组件和一个 Button 组件。\n\nList 组件用于展示数字列表，列表项的排列方式可以通过 Button 组件进行动态调整。List 组件的高度为 300vp，宽度为屏幕宽度的 90%，具有红色边框（宽度为 3vp），并且设置了摩擦系数（friction）为 0.6，以增加滑动时的阻力感。列表项的排列方式可以通过 lanes 属性设置为固定长度（40vp），并且列表项的对齐方式可以通过 alignListItem 属性进行动态调整。列表项的样式包括白色背景（0xFFFFFF）、圆角边框（10vp）、绿色边框（宽度为 2vp），以及居中对齐的文本。\n\nButton 组件用于切换列表项的对齐方式，按钮的文本显示当前的对齐方式，点击按钮后会循环切换对齐方式（Start、Center、End）。按钮的点击事件通过 onClick 方法实现，根据当前的对齐方式更新 alignListItem 状态变量。\n\n整个布局通过 Column 布局保证 List 和 Button 在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ListLanesExample {\n  @State arr: string[] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"]\n  @State alignListItem: ListItemAlign = ListItemAlign.Start\n\n  build() {\n    Column() {\n      List({ space: 20, initialIndex: 0 }) {\n        ForEach(this.arr, (item: string) => {\n          ListItem() {\n            Text('' + item)\n              .width('100%') // 设置文本宽度为 100%\n              .height(100) // 设置文本高度为 100vp\n              .fontSize(16) // 设置文本字体大小为 16\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n              .borderRadius(10) // 设置文本背景的圆角边框为 10vp\n              .backgroundColor(0xFFFFFF) // 设置文本背景颜色为白色（0xFFFFFF）\n          }\n          .border({ width: 2, color: Color.Green }) // 设置列表项的边框为绿色，宽度为 2vp\n        }, (item: string) => item)\n      }\n      .height(300) // 设置 List 高度为 300vp\n      .width(\"90%\") // 设置 List 宽度为屏幕宽度的 90%\n      .friction(0.6) // 设置 List 的摩擦系数为 0.6\n      .border({ width: 3, color: Color.Red }) // 设置 List 的边框为红色，宽度为 3vp\n      .lanes({ minLength: 40, maxLength: 40 }) // 设置 List 的 lanes 属性为固定长度 40vp\n      .alignListItem(this.alignListItem) // 设置 List 项的对齐方式为 alignListItem 状态变量的值\n      .scrollBar(BarState.Off) // 关闭 List 的滚动条\n\n      Button(\"点击更改alignListItem:\" + this.alignListItem).onClick(() => {\n        if (this.alignListItem == ListItemAlign.Start) {\n          this.alignListItem = ListItemAlign.Center // 如果当前对齐方式为 Start，则切换为 Center\n        } else if (this.alignListItem == ListItemAlign.Center) {\n          this.alignListItem = ListItemAlign.End // 如果当前对齐方式为 Center，则切换为 End\n        } else {\n          this.alignListItem = ListItemAlign.Start // 如果当前对齐方式为 End，则切换为 Start\n        }\n      })\n    }\n    .width('100%') // 设置 Column 宽度为 100%\n    .height('100%') // 设置 Column 高度为 100%\n    .backgroundColor(0xDCDCDC) // 设置 Column 背景颜色为浅灰色（0xDCDCDC）\n    .padding({ top: 5 }) // 设置 Column 顶部内边距为 5vp\n  }\n}"
            },
            {
                "description": "该组件通过 Stack 和 Column 布局实现了一个包含列表和编辑按钮的界面。布局宽度占据整个屏幕，高度设为 100%，背景颜色为 0xDCDCDC，顶部内边距为 5vp。组件的垂直方向上被分为两个主要部分：列表部分和按钮部分。\n\n列表部分通过 List 组件实现，宽度占据父容器的 90%，列表项之间的间距为 20vp，初始索引为 0。列表项通过 ForEach 循环生成，每个列表项包含一个 Flex 布局，其中包含一个 Text 组件和一个 Button 组件。Text 组件显示列表项的数字，宽度占据 100%，高度为 80vp，字体大小为 20，文本居中对齐，背景颜色为白色，边框圆角为 10vp。Button 组件在编辑模式下显示，宽度为 30%，高度为 40vp，点击按钮会删除对应的列表项，并切换回非编辑模式。\n\n按钮部分通过 Button 组件实现，文本为 \"edit list\"，点击按钮会切换编辑模式的状态。按钮的顶部外边距为 5vp，左边外边距为 20vp。\n\n整个布局通过 Stack 布局保证列表和按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ListExample {\n  @State arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] // 列表数据源\n  @State editFlag: boolean = false // 编辑模式标志位\n\n  build() {\n    Stack({ alignContent: Alignment.TopStart }) { // 使用 Stack 布局，对齐方式为顶部开始\n      Column() { // 使用 Column 布局\n        List({ space: 20, initialIndex: 0 }) { // 创建 List 组件，列表项间距为 20vp，初始索引为 0\n          ForEach(this.arr, (item: number, index?: number) => { // 使用 ForEach 循环生成列表项\n            ListItem() { // 创建 ListItem 组件\n              Flex({ direction: FlexDirection.Row, alignItems: ItemAlign.Center }) { // 使用 Flex 布局，方向为水平，对齐方式为居中\n                Text('' + item) // 显示列表项的数字\n                  .width('100%') // 宽度占据 100%\n                  .height(80) // 高度为 80vp\n                  .fontSize(20) // 字体大小为 20\n                  .textAlign(TextAlign.Center) // 文本居中对齐\n                  .borderRadius(10) // 边框圆角为 10vp\n                  .backgroundColor(0xFFFFFF) // 背景颜色为白色\n                  .flexShrink(1) // 允许收缩\n                if (this.editFlag) { // 如果处于编辑模式\n                  Button() { // 创建 Button 组件\n                    Text(\"delete\").fontSize(16) // 按钮文本为 \"delete\"，字体大小为 16\n                  }.width('30%').height(40) // 按钮宽度为 30%，高度为 40vp\n                  .onClick(() => { // 按钮点击事件\n                    if (index != undefined) { // 如果索引存在\n                      console.info(this.arr[index] + 'Delete') // 打印删除信息\n                      this.arr.splice(index, 1) // 删除对应列表项\n                      console.info(JSON.stringify(this.arr)) // 打印删除后的列表\n                      this.editFlag = false // 切换回非编辑模式\n                    }\n                  }).stateEffect(true) // 启用状态效果\n                }\n              }\n            }\n          }, (item: string) => item) // 列表项的唯一标识符\n        }.width('90%') // 列表宽度占据父容器的 90%\n        .scrollBar(BarState.Off) // 隐藏滚动条\n        .friction(0.6) // 设置摩擦系数为 0.6\n      }.width('100%') // Column 宽度占据 100%\n\n      Button('edit list') // 创建 Button 组件，文本为 \"edit list\"\n        .onClick(() => { // 按钮点击事件\n          this.editFlag = !this.editFlag // 切换编辑模式的状态\n        }).margin({ top: 5, left: 20 }) // 按钮的顶部外边距为 5vp，左边外边距为 20vp\n    }.width('100%').height('100%').backgroundColor(0xDCDCDC).padding({ top: 5 }) // Stack 宽度占据 100%，高度为 100%，背景颜色为 0xDCDCDC，顶部内边距为 5vp\n  }\n}"
            },
            {
                "description": "该组件实现了一个纵向列表，列表项为数字0到9。布局宽度占据整个屏幕的90%，高度为100%，背景颜色为浅灰色（0xDCDCDC），顶部有5vp的内边距。列表项以垂直方向排列，每个列表项的高度为100vp，宽度为100%，背景颜色为白色（0xFFFFFF），字体大小为16vp，文本居中对齐，边框圆角为10vp。列表项之间有20vp的间距，列表没有滚动条，滚动摩擦系数为0.6，边缘效果为弹性（Spring）。列表项之间有分隔线，分隔线的颜色为白色（0xFFFFFF），宽度为2vp，起始和结束的边距为20vp。\n\n组件的功能包括：\n1. 当列表滚动时，会触发onScrollIndex回调，输出当前显示界面的第一个和最后一个列表项的索引以及中心列表项的索引。\n2. 当列表可见内容发生变化时，会触发onScrollVisibleContentChange回调，输出可见内容的起始和结束索引及其在组中的位置。\n3. 当列表滚动时，会触发onDidScroll回调，输出当前的滚动状态和滚动偏移量。",
                "code": "@Entry\n@Component\nstruct ListExample {\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] // 定义一个包含数字0到9的数组\n\n  build() {\n    Column() {\n      List({ space: 20, initialIndex: 0 }) { // 创建一个纵向列表，列表项之间的间距为20vp，初始索引为0\n        ForEach(this.arr, (item: number) => { // 遍历数组中的每个元素\n          ListItem() { // 创建一个列表项\n            Text('' + item) // 显示当前元素的文本\n              .width('100%').height(100).fontSize(16) // 设置文本的宽度为100%，高度为100vp，字体大小为16vp\n              .textAlign(TextAlign.Center).borderRadius(10).backgroundColor(0xFFFFFF) // 设置文本居中对齐，边框圆角为10vp，背景颜色为白色（0xFFFFFF）\n          }\n        }, (item: string) => item) // 使用元素的值作为键\n      }\n      .listDirection(Axis.Vertical) // 设置列表方向为垂直\n      .scrollBar(BarState.Off) // 关闭滚动条\n      .friction(0.6) // 设置滚动摩擦系数为0.6\n      .divider({ strokeWidth: 2, color: 0xFFFFFF, startMargin: 20, endMargin: 20 }) // 设置分隔线的宽度为2vp，颜色为白色（0xFFFFFF），起始和结束的边距为20vp\n      .edgeEffect(EdgeEffect.Spring) // 设置边缘效果为弹性（Spring）\n      .onScrollIndex((firstIndex: number, lastIndex: number, centerIndex: number) => { // 当列表滚动时，触发此回调\n        console.info('first' + firstIndex) // 输出第一个可见列表项的索引\n        console.info('last' + lastIndex) // 输出最后一个可见列表项的索引\n        console.info('center' + centerIndex) // 输出中心可见列表项的索引\n      })\n      .onScrollVisibleContentChange((start: VisibleListContentInfo, end: VisibleListContentInfo) => { // 当可见内容发生变化时，触发此回调\n        console.log(' start index: ' + start.index + // 输出可见内容的起始索引\n                    ' start item group area: ' + start.itemGroupArea + // 输出起始索引所在的组区域\n                    ' start index in group: ' + start.itemIndexInGroup) // 输出起始索引在组中的位置\n        console.log(' end index: ' + end.index + // 输出可见内容的结束索引\n                    ' end item group area: ' + end.itemGroupArea + // 输出结束索引所在的组区域\n                    ' end index in group: ' + end.itemIndexInGroup) // 输出结束索引在组中的位置\n      })\n      .onDidScroll((scrollOffset: number, scrollState: ScrollState) => { // 当列表滚动时，触发此回调\n        console.info(`onScroll scrollState = ScrollState` + scrollState + `, scrollOffset = ` + scrollOffset) // 输出当前的滚动状态和滚动偏移量\n      })\n      .width('90%') // 设置列表的宽度为屏幕宽度的90%\n    }\n    .width('100%') // 设置列的宽度为100%\n    .height('100%') // 设置列的高度为100%\n    .backgroundColor(0xDCDCDC) // 设置背景颜色为浅灰色（0xDCDCDC）\n    .padding({ top: 5 }) // 设置顶部内边距为5vp\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个包含List和按钮组的界面。布局宽度占据整个屏幕，高度设为100%，内边距为0。组件的垂直方向上被分为两个部分：上部分是一个List，下部分是一个包含三个按钮的Row。\n\nList的样式包括背景颜色为灰色，布局权重为1，滚动条始终显示，子组件高度不一致时调用scrollTo接口也可以跳转准确。List的子组件通过ForEach循环生成，每个子组件是一个ListItem，包含一个Text组件，显示文本为'item-X'，其中X是数组中的数字。Text组件的样式包括高度、宽度、字体大小、文本对齐方式、边框圆角和背景颜色。\n\n按钮组的样式包括高度为20%，按钮的样式包括高度为50%，宽度为30%。按钮的功能包括点击事件，用户可以通过点击按钮触发相应操作，例如增加或减少List子组件的高度，或者调用scrollTo接口跳转到指定位置。",
                "code": "@Entry\n@Component\nstruct ListExample {\n  private arr: number[] = [] // 用于存储List的子组件索引\n  private scroller: ListScroller = new ListScroller() // 用于控制List的滚动\n  @State listSpace: number = 10 // List子组件之间的间距\n  @State listChildrenSize: ChildrenMainSize = new ChildrenMainSize(100) // List子组件的默认高度\n\n  aboutToAppear(){\n    for (let i = 0; i < 10; i++) { // 初始化arr数组，填充0到9的数字\n      this.arr.push(i)\n    }\n\n    this.listChildrenSize.splice(0, 5, [300, 300, 300, 300, 300]) // 设置前5个子组件的高度为300\n  }\n\n  build() {\n    Column() {\n      List({ space: this.listSpace, initialIndex: 4, scroller: this.scroller }) { // 创建List组件，设置子组件间距、初始索引和滚动控制器\n        ForEach(this.arr, (item: number) => { // 通过ForEach循环生成List的子组件\n          ListItem() {\n            Text('item-' + item) // 创建Text组件，显示文本为'item-X'\n              .height( item < 5 ? 300 : this.listChildrenSize.childDefaultSize) // 设置Text组件的高度，前5个子组件高度为300，其余为默认高度\n              .width('90%') // 设置Text组件的宽度为90%\n              .fontSize(16) // 设置Text组件的字体大小为16\n              .textAlign(TextAlign.Center) // 设置Text组件的文本对齐方式为居中\n              .borderRadius(10) // 设置Text组件的边框圆角为10\n              .backgroundColor(0xFFFFFF) // 设置Text组件的背景颜色为白色\n          }\n        }, (item: string) => item) // 设置ForEach的key\n      }\n      .backgroundColor(Color.Gray) // 设置List的背景颜色为灰色\n      .layoutWeight(1) // 设置List的布局权重为1\n      .scrollBar(BarState.On) // 设置List的滚动条始终显示\n      .childrenMainSize(this.listChildrenSize) // 设置List子组件的高度\n      .alignListItem(ListItemAlign.Center) // 设置List子组件的对齐方式为居中\n\n      Row(){ // 创建Row组件，包含三个按钮\n        Button() { Text('item size + 50') } // 创建按钮，显示文本为'item size + 50'\n          .onClick(()=>{ // 设置按钮的点击事件\n            this.listChildrenSize.childDefaultSize += 50 // 增加List子组件的默认高度\n          }).height('50%').width('30%') // 设置按钮的高度为50%，宽度为30%\n\n        Button() { Text('item size - 50') } // 创建按钮，显示文本为'item size - 50'\n          .onClick(()=>{ // 设置按钮的点击事件\n            if (this.listChildrenSize.childDefaultSize === 0) { // 如果List子组件的默认高度为0，则不执行减小操作\n              return\n            }\n            this.listChildrenSize.childDefaultSize -= 50 // 减小List子组件的默认高度\n          }).height('50%').width('30%') // 设置按钮的高度为50%，宽度为30%\n\n        Button() { Text('scrollTo (0, 310)') } // 创建按钮，显示文本为'scrollTo (0, 310)'\n          .onClick(()=>{ // 设置按钮的点击事件\n            this.scroller.scrollTo({xOffset: 0, yOffset: 310}) // 调用scrollTo接口，跳转到指定位置\n          }).height('50%').width('30%') // 设置按钮的高度为50%，宽度为30%\n      }.height('20%') // 设置Row的高度为20%\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "ListItem": {
        "description": "用来展示列表具体item，必须配合List来使用。可以包含单个子组件。",
        "details": null,
        "interfaces": [
            {
                "description": "ListItem(value?: ListItemOptions)",
                "params": {
                    "value": {
                        "type": "ListItemOptions",
                        "required": false,
                        "description": "为ListItem提供可选参数, 该对象内含有ListItemStyle枚举类型的style参数。"
                    }
                }
            },
            {
                "description": "ListItem(deprecated)(value?: string)",
                "params": {
                    "value": {
                        "type": "string",
                        "required": false,
                        "description": "无"
                    }
                }
            }
        ],
        "attributes": {
            "selectable": {
                "description": "设置当前ListItem元素是否可以被鼠标框选。外层List容器的鼠标框选开启时，ListItem的框选才生效。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "ListItem元素是否可以被鼠标框选。",
                        "default": true
                    }
                }
            },
            "selected": {
                "description": "设置当前ListItem选中状态。该属性支持$$双向绑定变量。该属性需要在设置选中态样式前使用才能生效选中态样式。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "当前ListItem选中状态。",
                        "default": false
                    }
                }
            },
            "swipeAction": {
                "description": "用于设置ListItem的划出组件。",
                "params": {
                    "value": {
                        "type": "SwipeActionOptions",
                        "required": true,
                        "description": "划出组件的配置选项。"
                    }
                }
            }
        },
        "events": {
            "onSelect": {
                "description": "ListItem元素被鼠标框选的状态改变时触发回调。",
                "params": {
                    "isSelected": {
                        "type": "boolean",
                        "required": true,
                        "description": "进入鼠标框选范围即被选中返回true， 移出鼠标框选范围即未被选中返回false。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过Column布局实现了一个展示数字列表的界面。布局宽度占据整个屏幕，高度设为100%，背景颜色为0xDCDCDC，顶部内边距为5vp。组件的垂直方向上包含一个List组件，用于展示数字列表。\nList组件的宽度为90%，高度自适应，不显示滚动条。List组件内部通过ForEach循环遍历一个数字数组，生成多个ListItem组件。每个ListItem组件包含一个Text组件，用于显示数字。\nText组件的样式包括宽度为100%，高度为100vp，字体大小为16，文本居中对齐，边框圆角为10，背景颜色为0xFFFFFF。Text组件的功能是显示数字，用户可以通过滚动List组件查看所有数字。\n整个布局通过Column布局保证List组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ListItemExample {\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] // 定义一个数字数组\n\n  build() {\n    Column() { // 使用Column布局，垂直排列子组件\n      List({ space: 20, initialIndex: 0 }) { // 创建一个List组件，设置项间距为20，初始索引为0\n        ForEach(this.arr, (item: number) => { // 遍历数字数组，生成多个ListItem组件\n          ListItem() { // 创建一个ListItem组件\n            Text('' + item) // 创建一个Text组件，显示数字\n              .width('100%') // 设置Text组件的宽度为100%\n              .height(100) // 设置Text组件的高度为100vp\n              .fontSize(16) // 设置Text组件的字体大小为16\n              .textAlign(TextAlign.Center) // 设置Text组件的文本居中对齐\n              .borderRadius(10) // 设置Text组件的边框圆角为10\n              .backgroundColor(0xFFFFFF) // 设置Text组件的背景颜色为0xFFFFFF\n          }\n        }, (item: string) => item) // 使用数字作为ListItem的唯一标识\n      }.width('90%') // 设置List组件的宽度为90%\n       .scrollBar(BarState.Off) // 设置List组件不显示滚动条\n    }.width('100%').height('100%').backgroundColor(0xDCDCDC).padding({ top: 5 }) // 设置Column组件的宽度为100%，高度为100%，背景颜色为0xDCDCDC，顶部内边距为5vp\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个展示列表项的界面。布局宽度占据整个屏幕，内边距为顶部5vp。组件的垂直方向上包含一个List组件，该List组件包含两个部分：一个ListItemGroup和一个独立的ListItem。ListItemGroup和独立的ListItem都通过ForEach循环生成多个列表项。\n\nList组件的布局属性包括宽度占据整个屏幕，支持多选模式，背景颜色为浅灰色（0xDCDCDC）。List组件的样式和外观包括列表项之间的间距为4vp，初始选中项索引为0。\n\nListItemGroup的样式为卡片风格（ListItemGroupStyle.CARD），包含三个列表项，每个列表项的样式分别为卡片风格（ListItemStyle.CARD）和无风格（ListItemStyle.NONE）。每个列表项的内容为一个居中对齐的文本，文本内容为列表项的索引。\n\n独立的ListItem部分也包含三个列表项，每个列表项的样式分别为卡片风格（ListItemStyle.CARD）和无风格（ListItemStyle.NONE）。每个列表项的内容为一个居中对齐的文本，文本内容为列表项的索引。\n\n整个布局通过Column布局保证列表项在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ListItemExample3 {\n  build() {\n    Column() {\n      List({ space: \"4vp\", initialIndex: 0 }) { // 创建一个List组件，设置列表项之间的间距为4vp，初始选中项索引为0\n        ListItemGroup({ style: ListItemGroupStyle.CARD }) { // 创建一个ListItemGroup组件，样式为卡片风格\n          ForEach([ListItemStyle.CARD, ListItemStyle.CARD, ListItemStyle.NONE], (itemStyle: number, index?: number) => { // 通过ForEach循环生成三个列表项\n            ListItem({ style: itemStyle }) { // 创建一个ListItem组件，样式根据itemStyle变量动态设置\n              Text(\"\" + index) // 创建一个Text组件，显示列表项的索引\n                .width(\"100%\") // 设置Text组件的宽度为100%\n                .textAlign(TextAlign.Center) // 设置Text组件的文本对齐方式为居中对齐\n            }\n          })\n        }\n        ForEach([ListItemStyle.CARD, ListItemStyle.CARD, ListItemStyle.NONE], (itemStyle: number, index?: number) => { // 通过ForEach循环生成三个独立的列表项\n          ListItem({ style: itemStyle }) { // 创建一个ListItem组件，样式根据itemStyle变量动态设置\n            Text(\"\" + index) // 创建一个Text组件，显示列表项的索引\n              .width(\"100%\") // 设置Text组件的宽度为100%\n              .textAlign(TextAlign.Center) // 设置Text组件的文本对齐方式为居中对齐\n          }\n        })\n      }\n      .width('100%') // 设置List组件的宽度为100%\n      .multiSelectable(true) // 设置List组件支持多选模式\n      .backgroundColor(0xDCDCDC) // 设置List组件的背景颜色为浅灰色（0xDCDCDC）\n    }\n    .width('100%') // 设置Column组件的宽度为100%\n    .padding({ top: 5 }) // 设置Column组件的内边距为顶部5vp\n  }\n}"
            },
            {
                "description": "该组件展示了一个列表项的示例，通过 List 组件和 ListItem 组件实现了一个可滑动的列表。布局宽度占据整个屏幕，高度设为 100%，内边距为 10vp，背景颜色为浅灰色（0xDCDCDC）。组件的垂直方向上被分为两个主要部分：列表部分和状态显示部分。\n\n列表部分通过 List 组件实现，每个列表项包含一个 Text 组件，显示当前项的编号。列表项的高度为 100vp，宽度为 100%，背景颜色为白色（0xFFFFFF），边框圆角为 10vp，字体大小为 16，文本居中对齐。列表项支持滑动操作，滑动到右侧时会显示两个按钮（Delete 和 Set），按钮之间通过 Row 组件水平排列，按钮之间的间距均匀分布，且对齐方式为均匀分布。\n\n状态显示部分包含两个 Text 组件，分别显示滑动操作的状态（进入和退出删除区域）。字体大小为 20，用于实时显示用户操作的状态。\n\n组件的功能包括滑动删除列表项和实时显示滑动操作的状态。用户可以通过滑动列表项到右侧触发删除操作，删除操作通过 animateTo 方法实现动画效果，删除后列表项会从数组中移除。滑动操作的状态通过 onEnterActionArea 和 onExitActionArea 事件实时更新。",
                "code": "@Entry\n@Component\nstruct ListItemExample2 {\n  @State arr: number[] = [0, 1, 2, 3, 4] // 列表项的数据源，初始值为 [0, 1, 2, 3, 4]\n  @State enterEndDeleteAreaString: string = \"not enterEndDeleteArea\" // 进入删除区域的状态字符串，初始值为 \"not enterEndDeleteArea\"\n  @State exitEndDeleteAreaString: string = \"not exitEndDeleteArea\" // 退出删除区域的状态字符串，初始值为 \"not exitEndDeleteArea\"\n\n  // 定义一个 Builder 方法，用于生成列表项右侧的按钮区域\n  @Builder itemEnd() {\n    Row() {\n      Button(\"Delete\").margin(\"4vp\") // 删除按钮，设置外边距为 4vp\n      Button(\"Set\").margin(\"4vp\") // 设置按钮，设置外边距为 4vp\n    }.padding(\"4vp\").justifyContent(FlexAlign.SpaceEvenly) // Row 组件的内边距为 4vp，子组件均匀分布\n  }\n\n  build() {\n    Column() {\n      List({ space: 10 }) { // 创建一个列表组件，项之间的间距为 10vp\n        ForEach(this.arr, (item: number) => { // 遍历 arr 数组，生成列表项\n          ListItem() {\n            Text(\"item\" + item) // 显示当前列表项的编号\n              .width('100%') // 文本宽度为 100%\n              .height(100) // 文本高度为 100vp\n              .fontSize(16) // 字体大小为 16\n              .textAlign(TextAlign.Center) // 文本居中对齐\n              .borderRadius(10) // 边框圆角为 10vp\n              .backgroundColor(0xFFFFFF) // 背景颜色为白色（0xFFFFFF）\n          }\n          .transition({ type: TransitionType.Delete, opacity: 0 }) // 删除动画，透明度从 1 变为 0\n          .swipeAction({\n            end: {\n              builder: () => { this.itemEnd() }, // 滑动到右侧时显示的按钮区域\n              onAction: () => { // 点击按钮时的操作\n                animateTo({ duration: 1000 }, () => { // 动画持续时间为 1000ms\n                  let index = this.arr.indexOf(item) // 获取当前项的索引\n                  this.arr.splice(index, 1) // 从数组中移除当前项\n                })\n              },\n              actionAreaDistance: 56, // 滑动操作区域的最大距离为 56vp\n              onEnterActionArea: () => { // 进入滑动操作区域时的操作\n                this.enterEndDeleteAreaString = \"enterEndDeleteArea\" // 更新进入删除区域的状态字符串\n                this.exitEndDeleteAreaString = \"not exitEndDeleteArea\" // 更新退出删除区域的状态字符串\n              },\n              onExitActionArea: () => { // 退出滑动操作区域时的操作\n                this.enterEndDeleteAreaString = \"not enterEndDeleteArea\" // 更新进入删除区域的状态字符串\n                this.exitEndDeleteAreaString = \"exitEndDeleteArea\" // 更新退出删除区域的状态字符串\n              }\n            }\n          })\n        }, (item: string) => item) // 列表项的唯一标识符为 item\n      }\n      Text(this.enterEndDeleteAreaString).fontSize(20) // 显示进入删除区域的状态字符串，字体大小为 20\n      Text(this.exitEndDeleteAreaString).fontSize(20) // 显示退出删除区域的状态字符串，字体大小为 20\n    }\n    .padding(10) // Column 组件的内边距为 10vp\n    .backgroundColor(0xDCDCDC) // 背景颜色为浅灰色（0xDCDCDC）\n    .width('100%') // 宽度为 100%\n    .height('100%') // 高度为 100%\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "ListItemGroup": {
        "description": "该组件用来展示列表item分组，宽度默认充满List组件，必须配合List组件来使用。",
        "details": "该组件从API Version 9开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。该组件的父组件只能是List。ListItemGroup组件不支持设置通用属性aspectRatio。当ListItemGroup的父组件List的listDirection属性为Axis.Vertical时，设置通用属性height属性不生效。ListItemGroup的高度为header高度、footer高度和所有ListItem布局后总高度之和。当父组件List的listDirection属性为Axis.Horizontal时，设置通用属性width属性不生效。ListItemGroup的宽度为header宽度、footer宽度和所有ListItem布局后总宽度之和。当前ListItemGroup内部的ListItem组件不支持编辑、拖拽功能，即ListItem组件的editable属性不生效。",
        "interfaces": [
            {
                "description": "ListItemGroup(options?: ListItemGroupOptions)",
                "params": {
                    "options": {
                        "type": "ListItemGroupOptions",
                        "required": false,
                        "description": "ListItemGroup的配置选项。"
                    }
                }
            }
        ],
        "attributes": {
            "divider": {
                "description": "设置ListItem分割线样式，默认无分割线。strokeWidth, startMargin和endMargin不支持设置百分比。ListItem设置多态样式时，被按压的子组件上下的分割线不绘制。",
                "params": {
                    "value": {
                        "type": {
                            "strokeWidth": "Length",
                            "color": "ResourceColor",
                            "startMargin": "Length",
                            "endMargin": "Length"
                        },
                        "required": true,
                        "description": "ListItem分割线样式。strokeWidth: 分割线的线宽。color: 分割线的颜色。默认值：0x08000000。startMargin: 分割线与列表侧边起始端的距离。默认值：0，单位：vp。endMargin: 分割线与列表侧边结束端的距离。默认值：0，单位：vp。"
                    }
                }
            },
            "childrenMainSize": {
                "description": "设置ListItemGroup组件的子组件在主轴方向的大小信息。",
                "params": {
                    "value": {
                        "type": "ChildrenMainSize",
                        "required": true,
                        "description": "通过ChildrenMainSize对象向ListItemGroup组件准确提供所有ListItem在主轴方向的大小信息。提供的主轴方向大小必须与子组件实际在主轴方向的大小一致。必须同时设置List的childrenMainSize属性使用。子组件主轴方向大小变化或者增删子组件时都必须通过ChildrenMainSize对象方法通知ListItemGroup组件。"
                    }
                }
            }
        },
        "events": {},
        "rules": [
            "该组件的父组件只能是List。",
            "ListItemGroup组件不支持设置通用属性aspectRatio。",
            "当ListItemGroup的父组件List的listDirection属性为Axis.Vertical时，设置通用属性height属性不生效。",
            "当父组件List的listDirection属性为Axis.Horizontal时，设置通用属性width属性不生效。",
            "当前ListItemGroup内部的ListItem组件不支持编辑、拖拽功能，即ListItem组件的editable属性不生效。"
        ],
        "examples": [
            {
                "description": "该组件通过Column布局实现了一个展示多个ListItemGroup的列表界面。布局宽度占据整个屏幕，内边距为顶部5vp。组件的垂直方向上被分为多个部分，每个部分包含一个ListItemGroup。每个ListItemGroup包含多个ListItem，ListItem的样式根据数据动态设置。\nListItemGroup和ListItem的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。ListItemGroup之间通过Column组件进行分隔。ListItem的功能包括展示文本内容，用户可以通过点击ListItem触发相应操作。\n整个布局通过Column布局保证ListItemGroup在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ListItemGroupExample2 {\n  // 定义一个数组，数组中的每个元素是一个对象，包含style和itemStyles两个属性\n  private arr: ArrObject[] = [\n    {\n      style: ListItemGroupStyle.CARD, // ListItemGroup的样式为CARD\n      itemStyles: [ListItemStyle.CARD, ListItemStyle.CARD, ListItemStyle.CARD] // 每个ListItem的样式为CARD\n    },\n    {\n      style: ListItemGroupStyle.CARD, // ListItemGroup的样式为CARD\n      itemStyles: [ListItemStyle.CARD, ListItemStyle.CARD, ListItemStyle.NONE] // 前两个ListItem的样式为CARD，最后一个为NONE\n    },\n    {\n      style: ListItemGroupStyle.CARD, // ListItemGroup的样式为CARD\n      itemStyles: [ListItemStyle.CARD, ListItemStyle.NONE, ListItemStyle.CARD] // 第一个和第三个ListItem的样式为CARD，第二个为NONE\n    },\n    {\n      style: ListItemGroupStyle.NONE, // ListItemGroup的样式为NONE\n      itemStyles: [ListItemStyle.CARD, ListItemStyle.CARD, ListItemStyle.NONE] // 前两个ListItem的样式为CARD，最后一个为NONE\n    }\n  ]\n\n  build() {\n    Column() {\n      List({ space: \"4vp\", initialIndex: 0 }) { // 创建一个List组件，设置item之间的间距为4vp，初始索引为0\n        ForEach(this.arr, (item: ArrObject, index?: number) => { // 遍历arr数组，生成ListItemGroup\n          ListItemGroup({ style: item.style }) { // 创建一个ListItemGroup，样式为item.style\n            ForEach(item.itemStyles, (itemStyle: number, itemIndex?: number) => { // 遍历item.itemStyles数组，生成ListItem\n              ListItem({ style: itemStyle }) { // 创建一个ListItem，样式为itemStyle\n                if (index != undefined && itemIndex != undefined) { // 确保index和itemIndex不为undefined\n                  Text(\"第\" + (index + 1) + \"个Group中第\" + (itemIndex + 1) + \"个item\") // 创建一个Text组件，显示当前ListItem的索引\n                    .width(\"100%\") // 设置Text的宽度为100%\n                    .textAlign(TextAlign.Center) // 设置Text的文本对齐方式为居中\n                }\n              }\n            }, (item: string) => item) // 使用item作为key\n          }\n        })\n      }\n      .width('100%') // 设置List的宽度为100%\n      .multiSelectable(true) // 设置List为多选模式\n      .backgroundColor(0xDCDCDC) // 设置List的背景颜色为0xDCDCDC\n    }\n    .width('100%') // 设置Column的宽度为100%\n    .padding({ top: 5 }) // 设置Column的上内边距为5vp\n  }\n}\n\n// 定义一个接口，包含style和itemStyles两个属性\ninterface ArrObject {\n  style: number; // ListItemGroup的样式\n  itemStyles: number[]; // 每个ListItem的样式数组\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个展示课程表的界面。布局宽度占据整个屏幕，高度设为100%，背景颜色为0xDCDCDC，顶部内边距为5vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题、一组课程项目和一个底部信息。每个部分的标题和底部信息通过自定义的Builder方法生成，课程项目以列表形式展示。\n标题和底部信息的样式包括背景颜色、字体大小、宽度和内边距等属性，支持不同的样式展示。课程项目的样式包括背景颜色、字体大小、宽度和高度等属性，支持不同的样式展示。\n整个布局通过Column布局保证各部分在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ListItemGroupExample {\n  private timeTable: TimeTable[] = [\n    {\n      title: '星期一',\n      projects: ['语文', '数学', '英语']\n    },\n    {\n      title: '星期二',\n      projects: ['物理', '化学', '生物']\n    },\n    {\n      title: '星期三',\n      projects: ['历史', '地理', '政治']\n    },\n    {\n      title: '星期四',\n      projects: ['美术', '音乐', '体育']\n    }\n  ]\n\n  // 生成列表项的头部信息，显示标题\n  @Builder\n  itemHead(text: string) {\n    Text(text)\n      .fontSize(20) // 设置字体大小为20\n      .backgroundColor(0xAABBCC) // 设置背景颜色为0xAABBCC\n      .width(\"100%\") // 设置宽度为100%\n      .padding(10) // 设置内边距为10\n  }\n\n  // 生成列表项的底部信息，显示课程数量\n  @Builder\n  itemFoot(num: number) {\n    Text('共' + num + \"节课\")\n      .fontSize(16) // 设置字体大小为16\n      .backgroundColor(0xAABBCC) // 设置背景颜色为0xAABBCC\n      .width(\"100%\") // 设置宽度为100%\n      .padding(5) // 设置内边距为5\n  }\n\n  build() {\n    Column() {\n      List({ space: 20 }) { // 创建一个列表，项之间的间距为20\n        ForEach(this.timeTable, (item: TimeTable) => {\n          ListItemGroup({ header: this.itemHead(item.title), footer: this.itemFoot(item.projects.length) }) {\n            ForEach(item.projects, (project: string) => {\n              ListItem() {\n                Text(project)\n                  .width(\"100%\") // 设置宽度为100%\n                  .height(100) // 设置高度为100\n                  .fontSize(20) // 设置字体大小为20\n                  .textAlign(TextAlign.Center) // 设置文本居中对齐\n                  .backgroundColor(0xFFFFFF) // 设置背景颜色为白色\n              }\n            }, (item: string) => item)\n          }\n          .divider({ strokeWidth: 1, color: Color.Blue }) // 设置分隔线的宽度和颜色\n        })\n      }\n      .width('90%') // 设置列表宽度为90%\n      .sticky(StickyStyle.Header | StickyStyle.Footer) // 设置头部和底部信息为粘性布局\n      .scrollBar(BarState.Off) // 关闭滚动条\n    }.width('100%').height('100%').backgroundColor(0xDCDCDC).padding({ top: 5 }) // 设置Column的宽度、高度、背景颜色和顶部内边距\n  }\n}\n\n// 定义TimeTable接口，包含标题和课程项目数组\ninterface TimeTable {\n  title: string;\n  projects: string[];\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Grid": {
        "description": "网格容器，由“行”和“列”分割的单元格所组成，通过指定“项目”所在的单元格做出各种各样的布局。",
        "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "Grid(scroller?: Scroller, layoutOptions?: GridLayoutOptions)",
                "params": {
                    "scroller": {
                        "type": "Scroller",
                        "description": "可滚动组件的控制器。用于与可滚动组件进行绑定。"
                    },
                    "layoutOptions": {
                        "type": "GridLayoutOptions",
                        "description": "布局选项。"
                    }
                }
            }
        ],
        "attributes": {
            "columnsTemplate": {
                "description": "设置当前网格布局列的数量、固定列宽或最小列宽值，不设置时默认1列。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "当前网格布局列的数量或最小列宽值。"
                    }
                }
            },
            "rowsTemplate": {
                "description": "设置当前网格布局行的数量、固定行高或最小行高值，不设置时默认1行。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "当前网格布局行的数量或最小行高值。"
                    }
                }
            },
            "columnsGap": {
                "description": "设置列与列的间距。设置为小于0的值时，按默认值显示。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "列与列的间距。",
                        "default": "0"
                    }
                }
            },
            "rowsGap": {
                "description": "设置行与行的间距。设置为小于0的值时，按默认值显示。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "行与行的间距。",
                        "default": "0"
                    }
                }
            },
            "scrollBar": {
                "description": "设置滚动条状态。",
                "params": {
                    "value": {
                        "type": "BarState",
                        "required": true,
                        "description": "滚动条状态。",
                        "default": "BarState.Auto"
                    }
                }
            },
            "scrollBarColor": {
                "description": "设置滚动条的颜色。",
                "params": {
                    "value": {
                        "type": [
                            "Color",
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "滚动条的颜色。",
                        "default": "'#182431'（40%不透明度）"
                    }
                }
            },
            "scrollBarWidth": {
                "description": "设置滚动条的宽度，不支持百分比设置。宽度设置后，滚动条正常状态和按压状态宽度均为滚动条的宽度值。如果滚动条的宽度超过Grid组件主轴方向的高度，则滚动条的宽度会变为默认值。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "滚动条的宽度。",
                        "default": "4"
                    }
                }
            },
            "cachedCount": {
                "description": "设置预加载的GridItem的数量，只在LazyForEach和开启了virtualScroll开关的Repeat中生效。设置为小于0的值时，按默认值显示。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "预加载的GridItem的数量。",
                        "default": "1"
                    }
                }
            },
            "editMode": {
                "description": "设置Grid是否进入编辑模式，进入编辑模式可以拖拽Grid组件内部GridItem。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "Grid是否进入编辑模式。",
                        "default": "false"
                    }
                }
            },
            "layoutDirection": {
                "description": "设置布局的主轴方向。",
                "params": {
                    "value": {
                        "type": "GridDirection",
                        "required": true,
                        "description": "布局的主轴方向。",
                        "default": "GridDirection.Row"
                    }
                }
            },
            "maxCount": {
                "description": "设置可显示的最大行数或列数。设置为小于1的值时，按默认值显示。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "可显示的最大行数或列数。",
                        "default": "Infinity"
                    }
                }
            },
            "minCount": {
                "description": "设置可显示的最小行数或列数。设置为小于1的值时，按默认值显示。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "可显示的最小行数或列数。",
                        "default": "1"
                    }
                }
            },
            "cellLength": {
                "description": "设置一行的高度或者一列的宽度。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "一行的高度或者一列的宽度。",
                        "default": "第一个元素的大小"
                    }
                }
            },
            "multiSelectable": {
                "description": "设置是否开启鼠标框选。开启框选后，可以配合Griditem的selected属性和onSelect事件获取GridItem的选中状态，还可以设置选中态样式（无默认选中样式）。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否开启鼠标框选。",
                        "default": "false"
                    }
                }
            },
            "supportAnimation": {
                "description": "设置是否支持动画。当前支持GridItem拖拽动画。仅在滚动模式下（只设置rowsTemplate、columnsTemplate其中一个）支持动画。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否支持动画。",
                        "default": "false"
                    }
                }
            },
            "edgeEffect": {
                "description": "设置边缘滑动效果。",
                "params": {
                    "value": {
                        "type": "EdgeEffect",
                        "required": true,
                        "description": "Grid组件的边缘滑动效果，支持弹簧效果和阴影效果。",
                        "default": "EdgeEffect.None"
                    },
                    "options": {
                        "type": "EdgeEffectOptions",
                        "description": "组件内容大小小于组件自身时，是否开启滑动效果。",
                        "default": "{ alwaysEnabled: false }"
                    }
                }
            },
            "enableScrollInteraction": {
                "description": "设置是否支持滚动手势，当设置为false时，无法通过手指或者鼠标滚动，但不影响控制器的滚动接口。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否支持滚动手势。",
                        "default": "true"
                    }
                }
            },
            "nestedScroll": {
                "description": "设置嵌套滚动选项。设置向前向后两个方向上的嵌套滚动模式，实现与父组件的滚动联动。",
                "params": {
                    "value": {
                        "type": "NestedScrollOptions",
                        "required": true,
                        "description": "嵌套滚动选项。"
                    }
                }
            },
            "friction": {
                "description": "设置摩擦系数，手动划动滚动区域时生效，只对惯性滚动过程有影响，对惯性滚动过程中的链式效果有间接影响。设置为小于等于0的值时，按默认值处理。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "Resource"
                        ],
                        "required": true,
                        "description": "摩擦系数。",
                        "default": "非可穿戴设备为0.75，可穿戴设备为0.9。"
                    }
                }
            }
        },
        "events": {
            "onScrollIndex": {
                "description": "当前网格显示的起始位置/终止位置的item发生变化时触发。网格初始化时会触发一次。Grid显示区域上第一个子组件/最后一个组件的索引值有变化就会触发。",
                "params": {
                    "first": {
                        "type": "number",
                        "required": true,
                        "description": "当前显示的网格起始位置的索引值。"
                    },
                    "last": {
                        "type": "number",
                        "required": true,
                        "description": "当前显示的网格终止位置的索引值。"
                    }
                }
            },
            "onItemDragStart": {
                "description": "开始拖拽网格元素时触发。返回void表示不能拖拽。",
                "params": {
                    "event": {
                        "type": "ItemDragInfo",
                        "required": true,
                        "description": "拖拽点的信息。"
                    },
                    "itemIndex": {
                        "type": "number",
                        "required": true,
                        "description": "被拖拽网格元素索引值。"
                    }
                }
            },
            "onItemDragEnter": {
                "description": "拖拽进入网格元素范围内时触发。",
                "params": {
                    "event": {
                        "type": "ItemDragInfo",
                        "required": true,
                        "description": "拖拽点的信息。"
                    }
                }
            },
            "onItemDragMove": {
                "description": "拖拽在网格元素范围内移动时触发。",
                "params": {
                    "event": {
                        "type": "ItemDragInfo",
                        "required": true,
                        "description": "拖拽点的信息。"
                    },
                    "itemIndex": {
                        "type": "number",
                        "required": true,
                        "description": "拖拽起始位置。"
                    },
                    "insertIndex": {
                        "type": "number",
                        "required": true,
                        "description": "拖拽插入位置。"
                    }
                }
            },
            "onItemDragLeave": {
                "description": "拖拽离开网格元素时触发。",
                "params": {
                    "event": {
                        "type": "ItemDragInfo",
                        "required": true,
                        "description": "拖拽点的信息。"
                    },
                    "itemIndex": {
                        "type": "number",
                        "required": true,
                        "description": "拖拽离开的网格元素索引值。"
                    }
                }
            },
            "onItemDrop": {
                "description": "绑定该事件的网格元素可作为拖拽释放目标，当在网格元素内停止拖拽时触发。",
                "params": {
                    "event": {
                        "type": "ItemDragInfo",
                        "required": true,
                        "description": "拖拽点的信息。"
                    },
                    "itemIndex": {
                        "type": "number",
                        "required": true,
                        "description": "拖拽起始位置。"
                    },
                    "insertIndex": {
                        "type": "number",
                        "required": true,
                        "description": "拖拽插入位置。"
                    },
                    "isSuccess": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否成功释放。"
                    }
                }
            },
            "onScrollBarUpdate": {
                "description": "当前网格显示的起始位置item发生变化时触发，可通过该回调设置滚动条的位置及长度。",
                "params": {
                    "index": {
                        "type": "number",
                        "required": true,
                        "description": "当前显示的网格起始位置的索引值。"
                    },
                    "offset": {
                        "type": "number",
                        "required": true,
                        "description": "当前显示的网格起始位置元素相对网格显示起始位置的偏移，单位vp。"
                    }
                },
                "returns": {
                    "type": "ComputedBarAttribute",
                    "description": "滚动条的位置及长度。"
                }
            },
            "onReachStart": {
                "description": "网格到达起始位置时触发。",
                "params": {}
            },
            "onReachEnd": {
                "description": "网格到达末尾位置时触发。",
                "params": {}
            },
            "onScrollFrameBegin": {
                "description": "网格开始滑动时触发，事件参数传入即将发生的滑动量，事件处理函数中可根据应用场景计算实际需要的滑动量并作为事件处理函数的返回值返回，网格将按照返回值的实际滑动量进行滑动。",
                "params": {
                    "offset": {
                        "type": "number",
                        "required": true,
                        "description": "即将发生的滑动量，单位vp。"
                    },
                    "state": {
                        "type": "ScrollState",
                        "required": true,
                        "description": "当前滑动状态。"
                    }
                },
                "returns": {
                    "type": "{ offsetRemain: number }",
                    "description": "实际滑动量，单位vp。"
                }
            },
            "onScrollStart": {
                "description": "网格滑动开始时触发。手指拖动网格或网格的滚动条触发的滑动开始时，会触发该事件。使用Scroller滑动控制器触发的带动画的滑动，动画开始时会触发该事件。",
                "params": {}
            },
            "onScrollStop": {
                "description": "网格滑动停止时触发。手指拖动网格或网格的滚动条触发的滑动，手指离开屏幕并且滑动停止时会触发该事件。使用Scroller滑动控制器触发的带动画的滑动，动画停止会触发该事件。",
                "params": {}
            }
        },
        "rules": [
            "Grid子组件的索引值计算规则：按子组件的顺序依次递增。",
            "if/else语句中，只有条件成立分支内的子组件会参与索引值计算，条件不成立分支内的子组件不计算索引值。",
            "ForEach/LazyForEach和Repeat语句中，会计算展开所有子节点索引值。",
            "if/else、ForEach、LazyForEach和Repeat发生变化以后，会更新子节点索引值。",
            "Grid子组件的visibility属性设置为Hidden或None时依然会计算索引值。",
            "Grid子组件的visibility属性设置为None时不显示，但依然会占用子组件对应的网格。",
            "Grid子组件设置position属性，会占用子组件对应的网格，子组件将显示在相对Grid左上角偏移position的位置。该子组件不会随其对应网格滚动，在对应网格滑出Grid显示范围外后不显示。",
            "当Grid子组件之间留有空隙时，会根据当前的展示区域尽可能填补空隙，因此GridItem可能会随着网格滚动而改变相对位置。"
        ],
        "examples": [
            {
                "description": "该组件通过 Grid 布局实现了一个展示数字网格的界面。布局宽度占据屏幕的 90%，高度为 300vp，内边距为顶部 5vp、左右 5vp。组件的垂直方向上被分为多个部分，包括一个空白区域、一个文本说明和一个网格区域。\n\n文本说明部分使用 Text 组件展示了一段提示信息，字体大小为 15vp，颜色为 0xCCCCCC，宽度占据 90%。\n\n网格区域使用 Grid 组件进行布局，包含多个 GridItem 组件，每个 GridItem 展示一个数字。GridItem 的宽度为 40vp，高度为 80vp，背景颜色为 0xF9CF93，边框宽度为 2vp，边框颜色为红色。\n\nGrid 组件的布局方向为水平方向（GridDirection.Row），最大列数为 6，最小列数为 2，单元格长度为 0（即自动计算）。Grid 组件的行间距和列间距均为 10vp，背景颜色为 0xFAEEE0。\n\n整个布局通过 Scroll 组件实现滚动功能，确保内容超出屏幕高度时可以滚动查看。",
                "code": "@Entry\n@Component\nstruct GridExample {\n  @State numbers: string[] = [] // 存储数字字符串的数组\n\n  aboutToAppear() {\n    for (let i = 1; i <= 30; i++) {\n      this.numbers.push(i + '') // 初始化数字数组，填充 1 到 30 的数字字符串\n    }\n  }\n\n  build() {\n    Scroll() {\n      Column({ space: 5 }) {\n        Blank() // 空白区域，用于分隔内容\n        Text('rowsTemplate、columnsTemplate都不设置layoutDirection、maxcount、minCount、cellLength才生效')\n          .fontSize(15).fontColor(0xCCCCCC).width('90%') // 文本说明，字体大小 15vp，颜色 0xCCCCCC，宽度 90%\n        Grid() {\n          ForEach(this.numbers, (day: string) => {\n            GridItem() {\n              Text(day).fontSize(16).backgroundColor(0xF9CF93) // 每个 GridItem 展示一个数字，字体大小 16vp，背景颜色 0xF9CF93\n            }.width(40).height(80).borderWidth(2).borderColor(Color.Red) // GridItem 的宽度 40vp，高度 80vp，边框宽度 2vp，边框颜色红色\n          }, (day: string) => day)\n        }\n        .height(300) // Grid 组件的高度 300vp\n        .columnsGap(10) // 列间距 10vp\n        .rowsGap(10) // 行间距 10vp\n        .backgroundColor(0xFAEEE0) // 背景颜色 0xFAEEE0\n        .maxCount(6) // 最大列数 6\n        .minCount(2) // 最小列数 2\n        .cellLength(0) // 单元格长度 0，自动计算\n        .layoutDirection(GridDirection.Row) // 布局方向为水平方向\n      }\n      .width('90%').margin({ top: 5, left: 5, right: 5 }) // 宽度 90%，内边距顶部 5vp，左右 5vp\n      .align(Alignment.Center) // 内容居中对齐\n    }\n  }\n}"
            },
            {
                "description": "该组件通过Grid布局实现了一个可拖拽的网格界面。布局宽度占据整个屏幕的90%，高度设为300vp，内边距为顶部5vp。组件的垂直方向上包含一个Grid组件，Grid组件内部包含多个GridItem组件。每个GridItem组件包含一个Text组件，用于显示数字。Grid组件的列数为3列，列间距为10vp，行间距为10vp。\n\nGrid组件的样式包括背景颜色为0xFAEEE0，GridItem组件的样式包括背景颜色为0xF9CF93，字体大小为16，宽度为80vp，高度为80vp，文本居中对齐。\n\n组件的功能包括拖拽事件和拖拽完成事件。用户可以通过拖拽GridItem组件来改变其在Grid中的位置。拖拽过程中会显示一个自定义的拖拽图片，拖拽完成后会交换数组中对应元素的位置。",
                "code": "@Entry\n@Component\nstruct GridExample {\n  @State numbers: string[] = [] // 存储网格中显示的数字\n  scroller: Scroller = new Scroller() // 用于滚动Grid组件\n  @State text: string = 'drag' // 用于存储拖拽过程中显示的文本\n\n  // 构建拖拽过程中显示的图片\n  @Builder pixelMapBuilder() { \n    Column() {\n      Text(this.text)\n        .fontSize(16) // 设置字体大小\n        .backgroundColor(0xF9CF93) // 设置背景颜色\n        .width(80) // 设置宽度\n        .height(80) // 设置高度\n        .textAlign(TextAlign.Center) // 设置文本居中对齐\n    }\n  }\n\n  // 组件初始化时填充numbers数组\n  aboutToAppear() {\n    for (let i = 1;i <= 15; i++) {\n      this.numbers.push(i + '')\n    }\n  }\n\n  // 交换数组中两个元素的位置\n  changeIndex(index1: number, index2: number) { \n    let temp: string;\n    temp = this.numbers[index1];\n    this.numbers[index1] = this.numbers[index2];\n    this.numbers[index2] = temp;\n  }\n\n  // 构建组件UI\n  build() {\n    Column({ space: 5 }) {\n      Grid(this.scroller) {\n        ForEach(this.numbers, (day: string) => {\n          GridItem() {\n            Text(day)\n              .fontSize(16) // 设置字体大小\n              .backgroundColor(0xF9CF93) // 设置背景颜色\n              .width(80) // 设置宽度\n              .height(80) // 设置高度\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n          }\n        })\n      }\n      .columnsTemplate('1fr 1fr 1fr') // 设置列模板，3列\n      .columnsGap(10) // 设置列间距\n      .rowsGap(10) // 设置行间距\n      .width('90%') // 设置宽度为屏幕的90%\n      .backgroundColor(0xFAEEE0) // 设置背景颜色\n      .height(300) // 设置高度\n      .editMode(true) // 设置Grid进入编辑模式，允许拖拽\n      .onItemDragStart((event: ItemDragInfo, itemIndex: number) => { \n        this.text = this.numbers[itemIndex] // 设置拖拽过程中显示的文本\n        return this.pixelMapBuilder() // 返回拖拽过程中显示的图片\n      })\n      .onItemDrop((event: ItemDragInfo, itemIndex: number, insertIndex: number, isSuccess: boolean) => { \n        if (!isSuccess || insertIndex >= this.numbers.length) {\n          return\n        }\n        console.info('beixiang' + itemIndex + '', insertIndex + '') \n        this.changeIndex(itemIndex, insertIndex) // 交换数组中两个元素的位置\n      })\n    }.width('100%').margin({ top: 5 }) // 设置Column的宽度为100%，顶部边距为5vp\n  }\n}"
            },
            {
                "description": "该组件实现了一个通过双指缩放手势来动态调整Grid组件列数的示例。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为两个部分：顶部是一个文本提示，底部是一个Grid布局。\n\n顶部文本提示部分包含一个Row组件，其中包含一个Text组件，用于提示用户可以通过双指缩放来改变Grid的列数。Text组件的高度为5%，顶部和左侧分别有10vp和20vp的边距。\n\n底部Grid布局部分包含一个Grid组件，用于展示一系列的数字。Grid组件的列数通过`columns`状态变量控制，初始值为2。Grid组件的列宽通过`columnsTemplate`属性动态设置，列间距为10vp，行间距也为10vp。Grid组件的宽度为90%，高度为100%，背景颜色为0xFAEEE0。Grid组件的滚动条被隐藏，且启用了缓存机制，缓存数量为3。\n\nGrid组件内部通过嵌套的ForEach循环生成多个GridItem组件，每个GridItem组件包含一个Text组件，用于显示数字。Text组件的背景颜色为0xF9CF93，字体大小为16vp，宽度为100%，高度为80vp，文本居中对齐。\n\nGrid组件支持双指缩放手势，当用户进行双指缩放操作时，根据缩放比例动态调整Grid的列数。缩放手势的动画持续时间为300毫秒，动画曲线为平滑曲线。缩放手势结束后，根据缩放比例调整`columns`状态变量的值，并将其保存到AppStorage中，以便下次启动时恢复。",
                "code": "@Entry\n@Component\nstruct GridExample {\n  @State numbers: String[] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19']\n  @State columns: number = 2\n\n  aboutToAppear() {\n    // 从AppStorage中获取上次保存的列数，并更新`columns`状态变量\n    let lastCount = AppStorage.get<number>('columnsCount')\n    if (typeof lastCount != 'undefined') {\n      this.columns = lastCount\n    }\n  }\n\n  build() {\n    Column({ space: 5 }) {\n      Row() {\n        Text('双指缩放改变列数')\n          .height('5%')\n          .margin({ top: 10, left: 20 })\n      }\n\n      Grid() {\n        ForEach(this.numbers, (day: string) => {\n          ForEach(this.numbers, (day: string) => {\n            GridItem() {\n              Text(day)\n                .fontSize(16)\n                .backgroundColor(0xF9CF93)\n                .width('100%')\n                .height(80)\n                .textAlign(TextAlign.Center)\n            }\n          }, (day: string) => day)\n        }, (day: string) => day)\n      }\n      .columnsTemplate('1fr '.repeat(this.columns)) // 动态设置Grid的列数\n      .columnsGap(10) // 列间距\n      .rowsGap(10) // 行间距\n      .width('90%') // Grid的宽度\n      .scrollBar(BarState.Off) // 隐藏滚动条\n      .backgroundColor(0xFAEEE0) // Grid的背景颜色\n      .height('100%') // Grid的高度\n      .cachedCount(3) // 缓存数量\n\n      .animation({\n        duration: 300, // 动画持续时间\n        curve: Curve.Smooth // 动画曲线\n      })\n      .priorityGesture(\n        PinchGesture()\n          .onActionEnd((event: GestureEvent) => {\n            console.info('end scale:' + event.scale)\n\n            // 根据缩放比例调整Grid的列数\n            if (event.scale > 2) {\n              this.columns--\n            } else if (event.scale < 0.6) {\n              this.columns++\n            }\n\n            // 限制列数的范围在1到4之间\n            this.columns = Math.min(4, Math.max(1, this.columns));\n            // 将列数保存到AppStorage中\n            AppStorage.setOrCreate<number>('columnsCount', this.columns)\n          })\n      )\n    }.width('100%').margin({ top: 5 })\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个展示三种不同列模板（auto-fill、auto-fit、auto-stretch）的界面。布局宽度占据整个屏幕，高度设为100%，内边距为0。组件的垂直方向上被分为三个部分，每个部分包含一个标题和一个Grid组件。每个Grid组件的宽度为90%，高度为150vp，边框为黑色1vp宽。\nGrid组件的样式包括背景颜色为橙色，列间距和行间距均为10vp。每个Grid组件中的GridItem包含一个Text组件，显示内容为\"N\"加上数据项的值，高度为80vp。\n组件的功能是通过不同的columnsTemplate属性值（auto-fill、auto-fit、auto-stretch）展示不同的列布局效果。auto-fill会根据设定的列宽自动计算列数；auto-fit会先根据设定的列宽计算列数，余下的空间会均分到每一列中；auto-stretch会先根据设定的列宽计算列数，余下的空间会均分到每个列间距中。\n整个布局通过Column布局保证每个Grid组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct GridColumnsTemplate {\n  // 数据源，包含三个数组，每个数组包含6个数字\n  data: number[] = [0, 1, 2, 3, 4, 5]\n  data1: number[] = [0, 1, 2, 3, 4, 5]\n  data2: number[] = [0, 1, 2, 3, 4, 5]\n\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局，子组件之间的间距为10vp\n      Text('auto-fill 根据设定的列宽自动计算列数').width('90%') // 显示文本，宽度为90%\n      Grid() { // 创建一个Grid组件\n        ForEach(this.data, (item: number) => { // 遍历data数组\n          GridItem() { // 创建一个GridItem组件\n            Text('N' + item).height(80) // 显示文本，高度为80vp\n          }\n          .backgroundColor(Color.Orange) // 设置背景颜色为橙色\n        })\n      }\n      .width('90%') // 设置Grid组件的宽度为90%\n      .border({ width: 1, color: Color.Black }) // 设置边框为黑色1vp宽\n      .columnsTemplate('repeat(auto-fill, 70)') // 设置列模板为auto-fill，列宽为70vp\n      .columnsGap(10) // 设置列间距为10vp\n      .rowsGap(10) // 设置行间距为10vp\n      .height(150) // 设置高度为150vp\n\n      Text('auto-fit 先根据设定的列宽计算列数，余下的空间会均分到每一列中').width('90%') // 显示文本，宽度为90%\n      Grid() { // 创建一个Grid组件\n        ForEach(this.data1, (item: number) => { // 遍历data1数组\n          GridItem() { // 创建一个GridItem组件\n            Text('N' + item).height(80) // 显示文本，高度为80vp\n          }\n          .backgroundColor(Color.Orange) // 设置背景颜色为橙色\n        })\n      }\n      .width('90%') // 设置Grid组件的宽度为90%\n      .border({ width: 1, color: Color.Black }) // 设置边框为黑色1vp宽\n      .columnsTemplate('repeat(auto-fit, 70)') // 设置列模板为auto-fit，列宽为70vp\n      .columnsGap(10) // 设置列间距为10vp\n      .rowsGap(10) // 设置行间距为10vp\n      .height(150) // 设置高度为150vp\n\n      Text('auto-stretch 先根据设定的列宽计算列数，余下的空间会均分到每个列间距中').width('90%') // 显示文本，宽度为90%\n      Grid() { // 创建一个Grid组件\n        ForEach(this.data2, (item: number) => { // 遍历data2数组\n          GridItem() { // 创建一个GridItem组件\n            Text('N' + item).height(80) // 显示文本，高度为80vp\n          }\n          .backgroundColor(Color.Orange) // 设置背景颜色为橙色\n        })\n      }\n      .width('90%') // 设置Grid组件的宽度为90%\n      .border({ width: 1, color: Color.Black }) // 设置边框为黑色1vp宽\n      .columnsTemplate('repeat(auto-stretch, 70)') // 设置列模板为auto-stretch，列宽为70vp\n      .columnsGap(10) // 设置列间距为10vp\n      .rowsGap(10) // 设置行间距为10vp\n      .height(150) // 设置高度为150vp\n    }\n    .width('100%') // 设置Column组件的宽度为100%\n    .height('100%') // 设置Column组件的高度为100%\n  }\n}"
            },
            {
                "description": "该组件通过Grid布局实现了一个展示数字网格的界面。布局宽度占据整个屏幕，高度设为300vp，内边距为顶部5vp。组件的垂直方向上被分为两个部分，每个部分包含一个Grid布局。每个Grid布局中的GridItem以水平布局方式排列，GridItem之间的间距均匀分布，且对齐方式为居中对齐。\nGridItem的样式包括背景颜色、字体大小、宽度和高度等属性，支持不同的样式展示。Grid布局的功能包括多选和滚动条隐藏，用户可以通过点击GridItem触发相应操作，GridItem也可以在选中或未选中状态下进行展示。\n整个布局通过Column布局保证Grid布局在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct GridExample {\n  @State numbers: String[] = ['0', '1', '2', '3', '4'] // 定义一个状态变量numbers，用于存储展示的数字\n  scroller: Scroller = new Scroller() // 创建一个Scroller对象，用于Grid的滚动控制\n\n  // 定义第一个GridLayoutOptions对象，设置常规尺寸和非规则索引\n  layoutOptions1: GridLayoutOptions = {\n    regularSize: [1, 1],        // 设置常规GridItem的尺寸为1x1\n    irregularIndexes: [0, 6],   // 设置非规则GridItem的索引为0和6\n  }\n\n  // 定义第二个GridLayoutOptions对象，设置常规尺寸、非规则索引和非规则尺寸获取函数\n  layoutOptions2: GridLayoutOptions = {\n    regularSize: [1, 1],        // 设置常规GridItem的尺寸为1x1\n    irregularIndexes: [0, 7],   // 设置非规则GridItem的索引为0和7\n    onGetIrregularSizeByIndex: (index: number) => { // 定义非规则GridItem的尺寸获取函数\n      if (index === 0) {\n        return [1, 5]            // 如果索引为0，返回尺寸为1x5\n      }\n      return [1, index % 6 + 1] // 否则返回尺寸为1x(index % 6 + 1)\n    }\n  }\n\n  build() {\n    Column({ space: 5 }) { // 创建一个Column布局，设置子组件之间的间距为5vp\n      Grid(this.scroller, this.layoutOptions1) { // 创建第一个Grid布局，使用scroller和layoutOptions1\n        ForEach(this.numbers, (day: string) => { // 遍历numbers数组，生成GridItem\n          ForEach(this.numbers, (day: string) => {\n            GridItem() { // 创建GridItem\n              Text(day) // 创建Text组件，显示数字\n                .fontSize(16) // 设置字体大小为16\n                .backgroundColor(0xF9CF93) // 设置背景颜色为0xF9CF93\n                .width('100%') // 设置宽度为100%\n                .height(80) // 设置高度为80vp\n                .textAlign(TextAlign.Center) // 设置文本居中对齐\n            }.selectable(false) // 设置GridItem不可选中\n          }, (day: string) => day) // 设置GridItem的key\n        }, (day: string) => day) // 设置GridItem的key\n      }\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr') // 设置Grid的列模板为5列，每列宽度相等\n      .columnsGap(10) // 设置列间距为10vp\n      .rowsGap(10) // 设置行间距为10vp\n      .multiSelectable(true) // 设置Grid支持多选\n      .scrollBar(BarState.Off) // 设置滚动条为隐藏\n      .width('90%') // 设置Grid宽度为90%\n      .backgroundColor(0xFAEEE0) // 设置背景颜色为0xFAEEE0\n      .height(300) // 设置高度为300vp\n\n      Text('scroll').fontColor(0xCCCCCC).fontSize(9).width('90%') // 创建一个Text组件，显示\"scroll\"，设置字体颜色、大小和宽度\n\n      Grid(undefined, this.layoutOptions2) { // 创建第二个Grid布局，使用layoutOptions2\n        ForEach(this.numbers, (day: string) => { // 遍历numbers数组，生成GridItem\n          ForEach(this.numbers, (day: string) => {\n            GridItem() { // 创建GridItem\n              Text(day) // 创建Text组件，显示数字\n                .fontSize(16) // 设置字体大小为16\n                .backgroundColor(0xF9CF93) // 设置背景颜色为0xF9CF93\n                .width('100%') // 设置宽度为100%\n                .height(80) // 设置高度为80vp\n                .textAlign(TextAlign.Center) // 设置文本居中对齐\n            }\n          }, (day: string) => day) // 设置GridItem的key\n        }, (day: string) => day) // 设置GridItem的key\n      }\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr') // 设置Grid的列模板为5列，每列宽度相等\n      .columnsGap(10) // 设置列间距为10vp\n      .rowsGap(10) // 设置行间距为10vp\n      .scrollBar(BarState.Off) // 设置滚动条为隐藏\n      .width('90%') // 设置Grid宽度为90%\n      .backgroundColor(0xFAEEE0) // 设置背景颜色为0xFAEEE0\n      .height(300) // 设置高度为300vp\n    }.width('100%').margin({ top: 5 }) // 设置Column的宽度为100%，顶部外边距为5vp\n  }\n}"
            },
            {
                "description": "该组件通过Grid布局实现了一个可滚动的网格展示界面。布局宽度占据整个屏幕的90%，高度设为300vp，内边距为顶部5vp。组件的垂直方向上被分为两个部分：一个文本标签和一个可滚动的网格。文本标签显示“scroll”，字体颜色为浅灰色，字体大小为9vp，宽度为90%。\n\n网格部分由多个GridItem组成，每个GridItem包含一个文本标签，显示数字0到4。每个GridItem的宽度为100%，高度为80vp，背景颜色为浅橙色，文本居中对齐。网格的列数为5列，列间距为10vp，行间距为10vp。网格支持滚动交互，滚动摩擦系数为0.6，不支持动画效果，边缘效果为弹性效果，滚动条始终显示，颜色为灰色，宽度为4vp。\n\n网格的滚动事件包括滚动开始、滚动停止、滚动到开始位置、滚动到结束位置、滚动索引变化、滚动条更新和滚动状态更新。每个事件都会在控制台输出相应的信息。此外，还有一个按钮“next page”，点击该按钮可以滚动到下一页。",
                "code": "@Entry\n@Component\nstruct GridExample {\n  @State numbers: String[] = ['0', '1', '2', '3', '4'] // 定义一个状态变量，存储数字字符串数组\n  scroller: Scroller = new Scroller() // 创建一个Scroller对象，用于控制网格的滚动\n  @State gridPosition: number = 0 // 定义一个状态变量，存储网格的当前位置\n\n  build() {\n    Column({ space: 5 }) { // 创建一个垂直布局，子组件之间的间距为5vp\n      Text('scroll') // 创建一个文本标签，显示“scroll”\n        .fontColor(0xCCCCCC) // 设置字体颜色为浅灰色\n        .fontSize(9) // 设置字体大小为9vp\n        .width('90%') // 设置宽度为90%\n      \n      Grid(this.scroller) { // 创建一个可滚动的网格，使用Scroller对象控制滚动\n        ForEach(this.numbers, (day: string) => { // 遍历numbers数组，生成GridItem\n          ForEach(this.numbers, (day: string) => { // 嵌套遍历numbers数组，生成GridItem\n            GridItem() { // 创建一个GridItem\n              Text(day) // 创建一个文本标签，显示当前数字\n                .fontSize(16) // 设置字体大小为16vp\n                .backgroundColor(0xF9CF93) // 设置背景颜色为浅橙色\n                .width('100%') // 设置宽度为100%\n                .height(80) // 设置高度为80vp\n                .textAlign(TextAlign.Center) // 设置文本居中对齐\n            }\n          }, (day: string) => day) // 使用day作为key\n        }, (day: string) => day) // 使用day作为key\n      }\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr') // 设置网格的列模板，5列，每列宽度相等\n      .columnsGap(10) // 设置列间距为10vp\n      .rowsGap(10) // 设置行间距为10vp\n      .friction(0.6) // 设置滚动摩擦系数为0.6\n      .enableScrollInteraction(true) // 启用滚动交互\n      .supportAnimation(false) // 禁用滚动动画\n      .multiSelectable(false) // 禁用多选\n      .edgeEffect(EdgeEffect.Spring) // 设置边缘效果为弹性效果\n      .scrollBar(BarState.On) // 设置滚动条始终显示\n      .scrollBarColor(Color.Grey) // 设置滚动条颜色为灰色\n      .scrollBarWidth(4) // 设置滚动条宽度为4vp\n      .width('90%') // 设置宽度为90%\n      .backgroundColor(0xFAEEE0) // 设置背景颜色为浅米色\n      .height(300) // 设置高度为300vp\n      .onScrollIndex((first: number, last: number) => { // 监听滚动索引变化事件\n        console.info(first.toString()) // 输出第一个可见项的索引\n        console.info(last.toString()) // 输出最后一个可见项的索引\n      })\n      .onScrollBarUpdate((index: number, offset: number) => { // 监听滚动条更新事件\n        console.info(\"XXX\" + 'Grid onScrollBarUpdate,index : ' + index.toString() + \",offset\" + offset.toString()) // 输出滚动条更新信息\n        return { totalOffset: (index / 5) * (80 + 10) - offset, totalLength: 80 * 5 + 10 * 4 } // 返回滚动条的总偏移量和总长度\n      })\n      .onDidScroll((scrollOffset: number, scrollState: ScrollState) => { // 监听滚动状态更新事件\n        console.info(scrollOffset.toString()) // 输出滚动偏移量\n        console.info(scrollState.toString()) // 输出滚动状态\n      })\n      .onScrollStart(() => { // 监听滚动开始事件\n        console.info(\"XXX\" + \"Grid onScrollStart\") // 输出滚动开始信息\n      })\n      .onScrollStop(() => { // 监听滚动停止事件\n        console.info(\"XXX\" + \"Grid onScrollStop\") // 输出滚动停止信息\n      })\n      .onReachStart(() => { // 监听滚动到开始位置事件\n        this.gridPosition = 0 // 设置网格位置为0\n        console.info(\"XXX\" + \"Grid onReachStart\") // 输出滚动到开始位置信息\n      })\n      .onReachEnd(() => { // 监听滚动到结束位置事件\n        this.gridPosition = 2 // 设置网格位置为2\n        console.info(\"XXX\" + \"Grid onReachEnd\") // 输出滚动到结束位置信息\n      })\n\n      Button('next page') // 创建一个按钮，显示“next page”\n        .onClick(() => { // 监听按钮点击事件\n          this.scroller.scrollPage({ next: true }) // 滚动到下一页\n        })\n    }.width('100%').margin({ top: 5 }) // 设置垂直布局的宽度为100%，顶部外边距为5vp\n  }\n}"
            },
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用Grid组件来创建一个固定行列的网格布局，并通过GridLayoutOptions中的onGetRectByIndex方法自定义每个GridItem的位置和大小。\n\n布局属性：\n- 整个布局由两个Grid组件组成，分别位于一个Column容器中。\n- 第一个Grid组件的宽度为90%，高度为300vp，背景颜色为0xFAEEE0。\n- 第二个Grid组件的宽度为90%，高度为300vp，背景颜色为0xFAEEE0。\n- Column容器的宽度为100%，顶部外边距为5vp。\n\n组件的样式和外观：\n- GridItem中的Text组件字体大小为16，背景颜色为0xF9CF93，宽度为100%，高度为100%，文本居中对齐。\n- 第一个Grid组件的列模板为'1fr 1fr 1fr 1fr 1fr'，行模板为'1fr 1fr 1fr 1fr 1fr'，列间距为10vp，行间距为10vp。\n- 第二个Grid组件的列模板为'1fr 1fr 1fr 1fr 1fr 1fr'，行模板为'1fr 1fr 1fr 1fr 1fr 1fr'，列间距为10vp，行间距为10vp。\n\n组件的排列和嵌套关系：\n- 两个Grid组件垂直排列在Column容器中。\n- 每个Grid组件内部通过ForEach循环生成多个GridItem，每个GridItem包含一个Text组件。\n\n组件的功能和交互：\n- 通过GridLayoutOptions中的onGetRectByIndex方法，可以自定义每个GridItem的位置和大小。\n- 第一个Grid组件展示了5x5的网格布局，第二个Grid组件展示了6x6的网格布局，并通过onGetRectByIndex方法自定义了部分GridItem的位置和大小。",
                "code": "@Entry\n@Component\nstruct GridExample {\n  @State numbers1: String[] = ['0', '1', '2', '3', '4']\n  @State numbers2: String[] = ['0', '1','2','3','4','5']\n\n  layoutOptions3: GridLayoutOptions = {\n    regularSize: [1, 1], // 定义每个GridItem的默认大小为1x1\n    onGetRectByIndex: (index: number) => {\n      if (index == 0)\n        return [0, 0, 1, 1] // 第一个GridItem的位置和大小为(0, 0, 1, 1)\n      else if(index==1)\n        return [0, 1, 2, 2] // 第二个GridItem的位置和大小为(0, 1, 2, 2)\n      else if(index==2)\n        return [0 ,3 ,3 ,3] // 第三个GridItem的位置和大小为(0, 3, 3, 3)\n      else if(index==3)\n        return [3, 0, 3, 3] // 第四个GridItem的位置和大小为(3, 0, 3, 3)\n      else if(index==4)\n        return [4, 3, 2, 2] // 第五个GridItem的位置和大小为(4, 3, 2, 2)\n      else\n        return [5, 5, 1, 1] // 其他GridItem的位置和大小为(5, 5, 1, 1)\n    }\n  }\n\n  build() {\n    Column({ space: 5 }) {\n      Grid() {\n        ForEach(this.numbers1, (day: string) => {\n          ForEach(this.numbers1, (day: string) => {\n            GridItem() {\n              Text(day)\n                .fontSize(16) // 字体大小为16\n                .backgroundColor(0xF9CF93) // 背景颜色为0xF9CF93\n                .width('100%') // 宽度为100%\n                .height('100%') // 高度为100%\n                .textAlign(TextAlign.Center) // 文本居中对齐\n            }\n          }, (day: string) => day)\n        }, (day: string) => day)\n      }\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr') // 列模板为'1fr 1fr 1fr 1fr 1fr'\n      .rowsTemplate('1fr 1fr 1fr 1fr 1fr') // 行模板为'1fr 1fr 1fr 1fr 1fr'\n      .columnsGap(10) // 列间距为10vp\n      .rowsGap(10) // 行间距为10vp\n      .width('90%') // 宽度为90%\n      .backgroundColor(0xFAEEE0) // 背景颜色为0xFAEEE0\n      .height(300) // 高度为300vp\n\n      Text('GridLayoutOptions的使用：onGetRectByIndex。').fontColor(0xCCCCCC).fontSize(9).width('90%')\n\n      Grid(undefined, this.layoutOptions3) {\n        ForEach(this.numbers2, (day: string) => {\n          GridItem() {\n            Text(day)\n              .fontSize(16) // 字体大小为16\n              .backgroundColor(0xF9CF93) // 背景颜色为0xF9CF93\n              .width('100%') // 宽度为100%\n              .height(\"100%\") // 高度为100%\n              .textAlign(TextAlign.Center) // 文本居中对齐\n          }\n          .height(\"100%\") // GridItem的高度为100%\n          .width('100%') // GridItem的宽度为100%\n        }, (day: string) => day)\n      }\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr 1fr') // 列模板为'1fr 1fr 1fr 1fr 1fr 1fr'\n      .rowsTemplate('1fr 1fr 1fr 1fr 1fr 1fr') // 行模板为'1fr 1fr 1fr 1fr 1fr 1fr'\n      .columnsGap(10) // 列间距为10vp\n      .rowsGap(10) // 行间距为10vp\n      .width('90%') // 宽度为90%\n      .backgroundColor(0xFAEEE0) // 背景颜色为0xFAEEE0\n      .height(300) // 高度为300vp\n    }.width('100%').margin({ top: 5 }) // Column容器的宽度为100%，顶部外边距为5vp\n  }\n}"
            },
            {
                "description": "该组件通过 Stack 布局实现了一个包含多个嵌套滚动视图的界面。布局宽度占据整个屏幕，高度设为 100%，内边距为左右 10vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一个列表。列表中的每个项包含一个 Grid 组件，用于展示不同类型的商品列表。\n\n组件的样式包括背景颜色、字体大小、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。组件的排列和嵌套关系通过 Stack、Column、Row、List、Grid 等组件实现，确保界面整洁美观。\n\n组件的功能包括点击事件、滚动事件和嵌套滚动控制。用户可以通过点击按钮触发相应操作，如滚动到顶部。滚动事件通过 onScrollFrameBegin 和 onScrollStart、onScrollStop 等事件处理函数实现，控制滚动行为和嵌套滚动优先级。",
                "code": "@Entry\n@Component\nstruct GridExample {\n  @State colors: number[] = [0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F]\n  @State numbers: number[] = []\n  @State translateY: number = 0\n  private scroller: Scroller = new Scroller()\n  private gridScroller: Scroller = new Scroller()\n  private touchDown: boolean = false\n  private listTouchDown: boolean = false\n  private scrolling: boolean = false\n\n  // 初始化数据，生成 100 个数字\n  aboutToAppear() {\n    for (let i = 0; i < 100; i++) {\n      this.numbers.push(i)\n    }\n  }\n\n  build() {\n    Stack() {\n      Column() {\n        Row() {\n          Text('Head')\n        }\n\n        Column() {\n          List({ scroller: this.scroller }) {\n            ListItem() {\n              Grid() {\n                GridItem() {\n                  Text('GoodsTypeList1')\n                }\n                .backgroundColor(this.colors[0])\n                .columnStart(0)\n                .columnEnd(1)\n\n                GridItem() {\n                  Text('GoodsTypeList2')\n                }\n                .backgroundColor(this.colors[1])\n                .columnStart(0)\n                .columnEnd(1)\n\n                GridItem() {\n                  Text('GoodsTypeList3')\n                }\n                .backgroundColor(this.colors[2])\n                .columnStart(0)\n                .columnEnd(1)\n\n                GridItem() {\n                  Text('GoodsTypeList4')\n                }\n                .backgroundColor(this.colors[3])\n                .columnStart(0)\n                .columnEnd(1)\n\n                GridItem() {\n                  Text('GoodsTypeList5')\n                }\n                .backgroundColor(this.colors[4])\n                .columnStart(0)\n                .columnEnd(1)\n              }\n              .scrollBar(BarState.Off)\n              .columnsGap(15)\n              .rowsGap(10)\n              .rowsTemplate('1fr 1fr 1fr 1fr 1fr')\n              .columnsTemplate('1fr')\n              .width('100%')\n              .height(200)\n            }\n\n            ListItem() {\n              Grid(this.gridScroller) {\n                ForEach(this.numbers, (item: number) => {\n                  GridItem() {\n                    Text(item + '')\n                      .fontSize(16)\n                      .backgroundColor(0xF9CF93)\n                      .width('100%')\n                      .height('100%')\n                      .textAlign(TextAlign.Center)\n                  }\n                  .width('100%')\n                  .height(40)\n                  .shadow({ radius: 10, color: '#909399', offsetX: 1, offsetY: 1 })\n                  .borderRadius(10)\n                  .translate({ x: 0, y: this.translateY })\n                }, (item: string) => item)\n              }\n              .columnsTemplate('1fr 1fr')\n              .friction(0.3)\n              .columnsGap(15)\n              .rowsGap(10)\n              .scrollBar(BarState.Off)\n              .width('100%')\n              .height('100%')\n              .layoutDirection(GridDirection.Column)\n              .nestedScroll({\n                scrollForward: NestedScrollMode.PARENT_FIRST,\n                scrollBackward: NestedScrollMode.SELF_FIRST\n              })\n              .onTouch((event: TouchEvent) => {\n                if (event.type == TouchType.Down) {\n                  this.listTouchDown = true\n                } else if (event.type == TouchType.Up) {\n                  this.listTouchDown = false\n                }\n              })\n            }\n          }\n          .scrollBar(BarState.Off)\n          .edgeEffect(EdgeEffect.None)\n          .onTouch((event: TouchEvent) => {\n            if (event.type == TouchType.Down) {\n              this.touchDown = true\n            } else if (event.type == TouchType.Up) {\n              this.touchDown = false\n            }\n          })\n          .onScrollFrameBegin((offset: number, state: ScrollState) => {\n            if (this.scrolling && offset > 0) {\n              let newOffset = this.scroller.currentOffset().yOffset\n              if (newOffset >= 590) {\n                this.gridScroller.scrollBy(0, offset)\n                return { offsetRemain: 0 }\n              } else if (newOffset + offset > 590) {\n                this.gridScroller.scrollBy(0, newOffset + offset - 590)\n                return { offsetRemain: 590 - newOffset }\n              }\n            }\n            return { offsetRemain: offset }\n          })\n          .onScrollStart(() => {\n            if (this.touchDown && !this.listTouchDown) {\n              this.scrolling = true\n            }\n          })\n          .onScrollStop(() => {\n            this.scrolling = false\n          })\n        }\n        .width('100%')\n        .height('100%')\n        .padding({ left: 10, right: 10 })\n      }\n\n      Row() {\n        Text('Top')\n          .width(30)\n          .height(30)\n          .borderRadius(50)\n      }\n      .padding(5)\n      .borderRadius(50)\n      .backgroundColor('#ffffff')\n      .shadow({ radius: 10, color: '#909399', offsetX: 1, offsetY: 1 })\n      .margin({ right: 22, bottom: 15 })\n      .onClick(() => {\n        this.scroller.scrollTo({ xOffset: 0, yOffset: 0 })\n        this.gridScroller.scrollTo({ xOffset: 0, yOffset: 0 })\n      })\n    }\n    .align(Alignment.BottomEnd)\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "GridItem": {
        "description": "网格容器中单项内容容器。仅支持作为Grid组件的子组件使用。",
        "details": null,
        "interfaces": [
            {
                "description": "GridItem(value?: GridItemOptions)",
                "params": {
                    "value": {
                        "type": "GridItemOptions",
                        "required": false,
                        "description": "GridItem的选项。"
                    }
                }
            }
        ],
        "attributes": {
            "rowStart": {
                "description": "设置当前元素起始行号。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "当前元素起始行号。"
                    }
                }
            },
            "rowEnd": {
                "description": "设置当前元素终点行号。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "当前元素终点行号。"
                    }
                }
            },
            "columnStart": {
                "description": "设置当前元素起始列号。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "当前元素起始列号。"
                    }
                }
            },
            "columnEnd": {
                "description": "设置当前元素终点列号。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "当前元素终点列号。"
                    }
                }
            },
            "forceRebuild": {
                "description": "设置在触发组件build时是否重新创建此节点。GridItem会根据自身属性和子组件变化自行决定是否需要重新创建，无需设置。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "在触发组件build时是否重新创建此节点。",
                        "default": false
                    }
                }
            },
            "selectable": {
                "description": "设置当前GridItem元素是否可以被鼠标框选。外层Grid容器的鼠标框选开启时，GridItem的框选才生效。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "当前GridItem元素是否可以被鼠标框选。",
                        "default": true
                    }
                }
            },
            "selected": {
                "description": "设置当前GridItem选中状态。该属性支持$$双向绑定变量。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "当前GridItem选中状态。",
                        "default": false
                    }
                }
            }
        },
        "events": {
            "onSelect": {
                "description": "GridItem元素被鼠标框选的状态改变时触发回调。",
                "params": {
                    "isSelected": {
                        "type": "boolean",
                        "required": true,
                        "description": "进入鼠标框选范围即被选中返回true， 移出鼠标框选范围即未被选中返回false。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过Grid布局实现了一个展示数字的网格界面。布局宽度占据整个屏幕的90%，高度设为300vp，内边距为顶部5vp。组件的垂直方向上被分为多个部分，每个部分包含一个Grid组件，用于展示数字。\nGrid组件的列数为5列，行数为5行，每列和每行的宽度均为1fr，即等分宽度。Grid组件内的GridItem组件用于展示每个数字，数字以Text组件的形式展示，每个Text组件的宽度为100%，高度为100%，背景颜色根据数字的不同而变化，字体大小为16，文本居中对齐。\nGridItem组件通过rowStart、rowEnd、columnStart、columnEnd属性来指定其在Grid中的位置，从而实现数字的排列。整个布局通过Grid布局保证数字在网格中有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct GridItemExample {\n  @State numbers: string[] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\"]\n\n  build() {\n    Column() {\n      Grid() {\n        GridItem() {\n          Text('4')\n            .fontSize(16) // 设置字体大小为16\n            .backgroundColor(0xFAEEE0) // 设置背景颜色为0xFAEEE0\n            .width('100%') // 设置宽度为100%\n            .height('100%') // 设置高度为100%\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n        }.rowStart(1).rowEnd(2).columnStart(1).columnEnd(2) // 设置GridItem的位置，从第1行第1列开始，到第2行第2列结束\n\n        ForEach(this.numbers, (item: string) => {\n          GridItem() {\n            Text(item)\n              .fontSize(16) // 设置字体大小为16\n              .backgroundColor(0xF9CF93) // 设置背景颜色为0xF9CF93\n              .width('100%') // 设置宽度为100%\n              .height('100%') // 设置高度为100%\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n          }\n        }, (item: string) => item)\n\n        GridItem() {\n          Text('5')\n            .fontSize(16) // 设置字体大小为16\n            .backgroundColor(0xDBD0C0) // 设置背景颜色为0xDBD0C0\n            .width('100%') // 设置宽度为100%\n            .height('100%') // 设置高度为100%\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n        }.columnStart(1).columnEnd(4) // 设置GridItem的位置，从第1列开始，到第4列结束\n      }\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr') // 设置Grid的列模板，每列宽度为1fr\n      .rowsTemplate('1fr 1fr 1fr 1fr 1fr') // 设置Grid的行模板，每行高度为1fr\n      .width('90%').height(300) // 设置Grid的宽度为90%，高度为300vp\n    }.width('100%').margin({ top: 5 }) // 设置Column的宽度为100%，顶部边距为5vp\n  }\n}"
            },
            {
                "description": "该组件通过Grid布局实现了一个展示数字的界面。布局宽度占据整个屏幕，高度设为150vp，内边距为4vp。组件的垂直方向上被分为两个部分，每个部分包含一个Grid组件。每个Grid组件包含9个GridItem，每个GridItem显示一个数字。\n\nGrid组件的布局属性包括：\n- columnsTemplate('1fr 1fr 1fr')：设置列模板为三列，每列宽度相等。\n- rowsTemplate('1fr 1fr')：设置行模板为两行，每行高度相等。\n- columnsGap(4)：设置列之间的间距为4vp。\n- rowsGap(4)：设置行之间的间距为4vp。\n- width('60%')：设置Grid组件的宽度为父容器的60%。\n- backgroundColor(0xFAEEE0)：设置Grid组件的背景颜色为浅粉色。\n- height(150)：设置Grid组件的高度为150vp。\n- padding('4vp')：设置Grid组件的内边距为4vp。\n\nGridItem的样式和外观包括：\n- backgroundColor(0xF9CF93)：设置GridItem的背景颜色为浅橙色。\n- Text组件的样式包括：\n  - fontSize(16)：设置字体大小为16。\n  - width('100%')：设置文本宽度为GridItem的100%。\n  - height('100%')：设置文本高度为GridItem的100%。\n  - textAlign(TextAlign.Center)：设置文本居中对齐。\n  - focusable(true)：设置文本可聚焦。\n\n组件的功能和交互包括：\n- GridItem的style属性设置为GridItemStyle.NONE和GridItemStyle.PLAIN，分别表示无样式和普通样式。\n- 通过ForEach循环生成GridItem，每个GridItem显示一个数字。\n- 用户可以通过点击GridItem触发相应操作，但由于没有具体的事件处理逻辑，此处仅展示了布局和样式。\n\n整个布局通过Column布局保证两个Grid组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct GridItemExample {\n  @State numbers: String[] = ['0', '1', '2']\n\n  build() {\n    Column({ space: 5 }) {\n      Grid() {\n        ForEach(this.numbers, (day: string) => {\n          ForEach(this.numbers, (day: string) => {\n            GridItem({style:GridItemStyle.NONE}) {\n              Text(day)\n                .fontSize(16)\n                .width('100%')\n                .height('100%')\n                .textAlign(TextAlign.Center)\n                .focusable(true)\n            }\n            .backgroundColor(0xF9CF93)\n          }, (day: string) => day)\n        }, (day: string) => day)\n      }\n      .columnsTemplate('1fr 1fr 1fr')\n      .rowsTemplate('1fr 1fr')\n      .columnsGap(4)\n      .rowsGap(4)\n      .width('60%')\n      .backgroundColor(0xFAEEE0)\n      .height(150)\n      .padding('4vp')\n\n      Grid() {\n        ForEach(this.numbers, (day: string) => {\n          ForEach(this.numbers, (day: string) => {\n            GridItem({style:GridItemStyle.PLAIN}) {\n              Text(day)\n                .fontSize(16)\n                .width('100%')\n                .height('100%')\n                .textAlign(TextAlign.Center)\n                .focusable(true)\n            }\n            .backgroundColor(0xF9CF93)\n          }, (day: string) => day)\n        }, (day: string) => day)\n      }\n      .columnsTemplate('1fr 1fr 1fr')\n      .rowsTemplate('1fr 1fr')\n      .columnsGap(4)\n      .rowsGap(4)\n      .width('60%')\n      .backgroundColor(0xFAEEE0)\n      .height(150)\n      .padding('4vp')\n    }.width('100%').margin({ top: 5 })\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Scroll": {
        "description": "可滚动的容器组件，当子组件的布局尺寸超过父组件的尺寸时，内容可以滚动，支持单个子组件。",
        "interfaces": [
            {
                "description": "Scroll(scroller?: Scroller)",
                "params": {
                    "scroller": {
                        "type": "Scroller",
                        "description": "可滚动组件的控制器。用于与可滚动组件进行绑定。"
                    }
                }
            }
        ],
        "attributes": {
            "scrollable": {
                "description": "设置滚动方向。",
                "params": {
                    "value": {
                        "type": "ScrollDirection",
                        "required": true,
                        "description": "滚动方向。",
                        "default": "ScrollDirection.Vertical"
                    }
                }
            },
            "scrollBar": {
                "description": "设置滚动条状态。如果容器组件无法滚动，则滚动条不显示。如果容器组件的子组件大小为无穷大，则滚动条不支持拖动和伴随滚动。",
                "params": {
                    "barState": {
                        "type": "BarState",
                        "required": true,
                        "description": "滚动条状态。",
                        "default": "BarState.Auto"
                    }
                }
            },
            "scrollBarColor": {
                "description": "设置滚动条的颜色。",
                "params": {
                    "color": {
                        "type": [
                            "Color",
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "滚动条的颜色。",
                        "default": "'#182431'（40%不透明度）"
                    }
                }
            },
            "scrollBarWidth": {
                "description": "设置滚动条的宽度，不支持百分比设置。宽度设置后，滚动条正常状态和按压状态宽度均为滚动条的宽度值。如果滚动条的宽度超过Scroll组件主轴方向的高度，则滚动条的宽度会变为默认值。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "滚动条的宽度。",
                        "default": "4",
                        "unit": "vp"
                    }
                }
            },
            "scrollSnap": {
                "description": "设置Scroll组件的限位滚动模式。",
                "params": {
                    "value": {
                        "type": "ScrollSnapOptions",
                        "required": true,
                        "description": "限位滚动选项。"
                    }
                }
            },
            "edgeEffect": {
                "description": "设置边缘滑动效果。",
                "params": {
                    "edgeEffect": {
                        "type": "EdgeEffect",
                        "required": true,
                        "description": "Scroll组件的边缘滑动效果，支持弹簧效果和阴影效果。",
                        "default": "EdgeEffect.None"
                    },
                    "options": {
                        "type": "EdgeEffectOptions",
                        "description": "组件内容大小小于组件自身时，是否开启滑动效果。设置为{ alwaysEnabled: true }会开启滑动效果，{ alwaysEnabled: false }不开启。",
                        "default": "{ alwaysEnabled: true }"
                    }
                }
            },
            "enableScrollInteraction": {
                "description": "设置是否支持滚动手势，当设置为false时，无法通过手指或者鼠标滚动，但不影响控制器的滚动接口。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否支持滚动手势。",
                        "default": "true"
                    }
                }
            },
            "nestedScroll": {
                "description": "设置向前向后两个方向上的嵌套滚动模式，实现与父组件的滚动联动。",
                "params": {
                    "value": {
                        "type": "NestedScrollOptions",
                        "required": true,
                        "description": "嵌套滚动选项。",
                        "default": "{ scrollForward: NestedScrollMode.SELF_ONLY, scrollBackward: NestedScrollMode.SELF_ONLY }"
                    }
                }
            },
            "friction": {
                "description": "设置摩擦系数，手动划动滚动区域时生效，只对惯性滚动过程有影响，对惯性滚动过程中的链式效果有间接影响。设置为小于等于0的值时，按默认值处理。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "Resource"
                        ],
                        "required": true,
                        "description": "摩擦系数。",
                        "default": "非可穿戴设备为0.6，可穿戴设备为0.9。从API version 11开始，非可穿戴设备默认值为0.7。从API version 12开始，非可穿戴设备默认值为0.75。"
                    }
                }
            },
            "enablePaging": {
                "description": "设置是否支持划动翻页。如果同时设置了划动翻页enablePaging和限位滚动scrollSnap，则scrollSnap优先生效，enablePaging不生效。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否支持划动翻页。设置为true支持滑动翻页，false不支持。",
                        "default": "false"
                    }
                }
            },
            "initialOffset": {
                "description": "设置初始滚动偏移量。只在首次布局时生效，后续动态修改该属性值不生效。",
                "params": {
                    "value": {
                        "type": "OffsetOptions",
                        "required": true,
                        "description": "当输入的大小为百分比时，初始滚动偏移量为Scroll组件主轴方向大小与百分比数值之积。"
                    }
                }
            }
        },
        "events": {
            "onScrollFrameBegin": {
                "description": "每帧开始滚动时触发，事件参数传入即将发生的滚动量，事件处理函数中可根据应用场景计算实际需要的滚动量并作为事件处理函数的返回值返回，Scroll将按照返回值的实际滚动量进行滚动。支持offsetRemain为负值。若通过onScrollFrameBegin事件和scrollBy方法实现容器嵌套滚动，需设置子滚动节点的EdgeEffect为None。如Scroll嵌套List滚动时，List组件的edgeEffect属性需设置为EdgeEffect.None。触发该事件的条件：1、滚动组件触发滚动时触发，包括键鼠操作等其他触发滚动的输入设置。2、调用控制器接口时不触发。3、越界回弹不触发。4、拖动滚动条不触发。",
                "params": {
                    "offset": {
                        "type": "number",
                        "required": true,
                        "description": "即将发生的滑动量，单位vp。"
                    },
                    "state": {
                        "type": "ScrollState",
                        "required": true,
                        "description": "当前滑动状态。"
                    }
                },
                "returns": {
                    "type": "{ offsetRemain: number }",
                    "description": "实际滑动量，单位vp。"
                }
            },
            "onScroll": {
                "description": "滚动事件回调，返回滚动时水平、竖直方向偏移量，单位vp。触发该事件的条件：1、滚动组件触发滚动时触发，支持键鼠操作等其他触发滚动的输入设置。2、通过滚动控制器API接口调用。3、越界回弹。",
                "params": {
                    "xOffset": {
                        "type": "number",
                        "required": true,
                        "description": "每帧滚动时水平方向的偏移量，Scroll的内容向左滚动时偏移量为正，向右滚动时偏移量为负。单位vp。"
                    },
                    "yOffset": {
                        "type": "number",
                        "required": true,
                        "description": "每帧滚动时竖直方向的偏移量，Scroll的内容向上滚动时偏移量为正，向下滚动时偏移量为负。单位vp。"
                    }
                }
            },
            "onWillScroll": {
                "description": "滚动事件回调，Scroll滚动前触发。回调当前帧将要滚动的偏移量和当前滚动状态和滚动操作来源，其中回调的偏移量为计算得到的将要滚动的偏移量值，并非最终实际滚动偏移。可以通过该回调返回值指定Scroll将要滚动的偏移。触发该事件的条件：1、滚动组件触发滚动时触发，支持键鼠操作等其他触发滚动的输入设置。2、通过滚动控制器API接口调用。3、越界回弹。",
                "params": {
                    "xOffset": {
                        "type": "number",
                        "required": true,
                        "description": "每帧滚动时水平方向的偏移量，Scroll中的内容向左滚动时偏移量为正，向右滚动时偏移量为负。单位vp。"
                    },
                    "yOffset": {
                        "type": "number",
                        "required": true,
                        "description": "每帧滚动时竖直方向的偏移量，Scroll中的内容向上滚动时偏移量为正，向下滚动时偏移量为负。单位vp。"
                    },
                    "scrollState": {
                        "type": "ScrollState",
                        "required": true,
                        "description": "当前滚动状态。"
                    },
                    "scrollSource": {
                        "type": "ScrollSource",
                        "required": true,
                        "description": "当前滚动操作的来源。"
                    }
                },
                "returns": {
                    "type": "void | OffsetResult",
                    "description": "返回OffsetResult时按照开发者指定的偏移量滚动；不返回时按回调参数(xOffset，yOffset)滚动。"
                }
            },
            "onDidScroll": {
                "description": "滚动事件回调，Scroll滚动时触发。返回当前帧滚动的偏移量和当前滚动状态。触发该事件的条件：1、滚动组件触发滚动时触发，支持键鼠操作等其他触发滚动的输入设置。2、通过滚动控制器API接口调用。3、越界回弹。",
                "params": {
                    "xOffset": {
                        "type": "number",
                        "required": true,
                        "description": "每帧滚动时水平方向的偏移量，Scroll中的内容向左滚动时偏移量为正，向右滚动时偏移量为负。单位vp。"
                    },
                    "yOffset": {
                        "type": "number",
                        "required": true,
                        "description": "每帧滚动时竖直方向的偏移量，Scroll中的内容向上滚动时偏移量为正，向下滚动时偏移量为负。单位vp。"
                    },
                    "scrollState": {
                        "type": "ScrollState",
                        "required": true,
                        "description": "当前滚动状态。"
                    }
                }
            },
            "onScrollEdge": {
                "description": "滚动到边缘事件回调。触发该事件的条件：1、滚动组件滚动到边缘时触发，支持键鼠操作等其他触发滚动的输入设置。2、通过滚动控制器API接口调用。3、越界回弹。",
                "params": {
                    "side": {
                        "type": "Edge",
                        "required": true,
                        "description": "滚动到的边缘位置。"
                    }
                }
            },
            "onScrollEnd": {
                "description": "滚动停止事件回调。触发该事件的条件：1、滚动组件触发滚动后停止，支持键鼠操作等其他触发滚动的输入设置。2、通过滚动控制器API接口调用后停止，带过渡动效。"
            },
            "onScrollStart": {
                "description": "滚动开始时触发。手指拖动Scroll或拖动Scroll的滚动条触发的滚动开始时，会触发该事件。使用Scroller滚动控制器触发的带动画的滚动，动画开始时会触发该事件。触发该事件的条件：1、滚动组件开始滚动时触发，支持键鼠操作等其他触发滚动的输入设置。2、通过滚动控制器API接口调用后开始，带过渡动效。"
            },
            "onScrollStop": {
                "description": "滚动停止时触发。手拖动Scroll或拖动Scroll的滚动条触发的滚动，手离开屏幕并且滚动停止时会触发该事件。使用Scroller滚动控制器触发的带动画的滚动，动画停止时会触发该事件。触发该事件的条件：1、滚动组件触发滚动后停止，支持键鼠操作等其他触发滚动的输入设置。2、通过滚动控制器API接口调用后开始，带过渡动效。"
            }
        },
        "examples": [
            {
                "description": "该组件实现了一个可滚动的列表界面，展示了从0到15的数字。布局宽度占据整个屏幕，高度设为100%，背景颜色为黄色。组件的垂直方向上被分为多个部分，每个部分包含一个数字文本。每个数字文本以垂直布局方式排列，文本之间的间距均匀分布，且对齐方式为居中对齐。\n数字文本的样式包括背景颜色、边框宽度、边框颜色、边框圆角、字体大小、文本对齐方式等属性，支持不同的样式展示。数字文本组之间通过 Column 组件进行分隔。数字文本的功能包括展示数字和滚动效果，用户可以通过滚动屏幕查看所有数字，滚动效果支持弹性效果和滚动对齐。\n整个布局通过 Scroll 组件保证数字文本在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Index {\n  // 创建一个 Scroller 实例，用于控制滚动行为\n  scroller: Scroller = new Scroller;\n  \n  // 定义一个数组，包含从0到15的数字\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  \n  build() {\n    // 创建一个可滚动的容器，使用 Scroller 实例控制滚动\n    Scroll(this.scroller) {\n      // 创建一个垂直布局的容器\n      Column() {\n        // 使用 ForEach 循环遍历数组中的每个数字\n        ForEach(this.arr, (item: number) => {\n          // 创建一个 Text 组件，显示当前数字\n          Text(item.toString())\n            .width('90%') // 设置文本宽度为父容器的90%\n            .height(200) // 设置文本高度为200vp\n            .backgroundColor(0xFFFFFF) // 设置文本背景颜色为白色\n            .borderWidth(1) // 设置文本边框宽度为1vp\n            .borderColor(Color.Black) // 设置文本边框颜色为黑色\n            .borderRadius(15) // 设置文本边框圆角为15vp\n            .fontSize(16) // 设置文本字体大小为16vp\n            .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n        }, (item: string) => item) // 使用数字作为键值\n      }\n      .width('100%') // 设置 Column 容器的宽度为父容器的100%\n      .backgroundColor(0xDCDCDC) // 设置 Column 容器的背景颜色为浅灰色\n    }\n    .backgroundColor(Color.Yellow) // 设置 Scroll 容器的背景颜色为黄色\n    .height('100%') // 设置 Scroll 容器的高度为父容器的100%\n    .edgeEffect(EdgeEffect.Spring) // 设置滚动边缘效果为弹性效果\n    .scrollSnap({\n      snapAlign: ScrollSnapAlign.START, // 设置滚动对齐方式为开始对齐\n      snapPagination: 400, // 设置滚动分页大小为400vp\n      enableSnapToStart: true, // 启用滚动到开始位置的对齐\n      enableSnapToEnd: true // 启用滚动到结束位置的对齐\n    })\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个包含两个按钮和一个列表的界面。布局宽度占据整个屏幕，高度设为100%，背景颜色为0xDCDCDC，顶部内边距为5vp。\n\n组件的垂直方向上被分为三个部分：\n1. 第一个部分包含一个按钮，按钮文本为'Fling-1000'，高度为5%，点击该按钮会触发列表的fling滚动效果，滚动距离为-1000。\n2. 第二个部分包含另一个按钮，按钮文本为'Fling3000'，高度为5%，点击该按钮会触发列表的fling滚动效果，滚动距离为3000。\n3. 第三个部分是一个列表，列表项通过ForEach组件动态生成，每个列表项包含一个文本组件，文本内容为数组中的数字。列表的布局方向为垂直，不显示滚动条，摩擦系数为0.9，列表项之间有20vp的间距，列表项的背景颜色为白色，边框圆角为10vp，文本居中对齐。列表的边缘效果为弹性效果，宽度为90%。\n\n按钮的功能包括点击事件，用户可以通过点击按钮触发列表的滚动操作。列表的功能包括展示数据项，支持垂直滚动，并且具有弹性边缘效果。",
                "code": "@Entry\n@Component\nstruct ListExample {\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] // 定义一个包含数字的数组\n  scrollerForList: Scroller = new Scroller() // 创建一个Scroller对象，用于控制列表的滚动\n\n  build() {\n    Column() {\n      Button('Fling-1000') // 创建一个按钮，文本为'Fling-1000'\n        .height('5%') // 设置按钮高度为5%\n        .onClick(() => { // 设置按钮点击事件\n          this.scrollerForList.fling(-1000) // 点击按钮时，列表向上滚动1000单位\n        })\n\n      Button('Fling3000') // 创建另一个按钮，文本为'Fling3000'\n        .height('5%') // 设置按钮高度为5%\n        .onClick(() => { // 设置按钮点击事件\n          this.scrollerForList.fling(3000) // 点击按钮时，列表向下滚动3000单位\n        })\n\n      List({ space: 20, initialIndex: 0, scroller: this.scrollerForList }) { // 创建一个列表，设置间距为20vp，初始索引为0，使用scrollerForList控制滚动\n        ForEach(this.arr, (item: number) => { // 遍历数组中的每个元素\n          ListItem() { // 创建一个列表项\n            Text('' + item) // 创建一个文本组件，显示数组中的数字\n              .width('100%') // 设置文本宽度为100%\n              .height(100) // 设置文本高度为100vp\n              .fontSize(16) // 设置文本字体大小为16\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n              .borderRadius(10) // 设置文本背景的边框圆角为10vp\n              .backgroundColor(0xFFFFFF) // 设置文本背景颜色为白色\n          }\n        }, (item: string) => item) // 设置列表项的唯一标识符\n      }\n      .listDirection(Axis.Vertical) // 设置列表的布局方向为垂直\n      .scrollBar(BarState.Off) // 设置列表不显示滚动条\n      .friction(0.9) // 设置列表的摩擦系数为0.9\n      .divider({ strokeWidth: 2, color: 0xFFFFFF, startMargin: 20, endMargin: 20 }) // 设置列表项之间的分隔线，宽度为2vp，颜色为白色，起始和结束边距为20vp\n      .edgeEffect(EdgeEffect.Spring) // 设置列表的边缘效果为弹性效果\n      .width('90%') // 设置列表宽度为90%\n    }\n    .width('100%') // 设置Column的宽度为100%\n    .height('100%') // 设置Column的高度为100%\n    .backgroundColor(0xDCDCDC) // 设置Column的背景颜色为0xDCDCDC\n    .padding({ top: 5 }) // 设置Column的顶部内边距为5vp\n  }\n}"
            },
            {
                "description": "该组件实现了一个带有粘性嵌套滚动的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上包含一个滚动区域，滚动区域内包含一个文本区域和一个选项卡组件。文本区域显示“Scroll Area”，背景颜色为蓝色，宽度占据整个屏幕，高度为 40%，文本居中对齐。\n\n选项卡组件包含两个标签页，每个标签页的内容通过 TabContent 组件定义。第一个标签页包含一个列表组件，列表项通过 ForEach 循环生成，每个列表项显示一个数字项，背景颜色为白色，高度为 72vp，宽度占据整个屏幕，边框圆角为 12vp。列表项的排列方式为垂直排列，列表项之间的间距为 10vp。列表组件支持嵌套滚动，滚动方向为水平方向，滚动效果为弹性滚动。\n\n第二个标签页为空，仅显示标签名“Tab2”。选项卡组件的标签栏位于内容区域的上方，标签页的排列方式为水平排列，高度占据整个屏幕。\n\n整个滚动区域的背景颜色为浅灰色，滚动效果为弹性滚动，滚动摩擦系数为 0.6，滚动条状态为关闭。",
                "code": "@Entry\n@Component\nstruct StickyNestedScroll {\n  @State arr: number[] = [] // 定义一个状态变量 arr，用于存储列表项的数据\n\n  @Styles\n  listCard() {\n    .backgroundColor(Color.White) // 设置背景颜色为白色\n    .height(72) // 设置高度为 72vp\n    .width(\"100%\") // 设置宽度占据整个屏幕\n    .borderRadius(12) // 设置边框圆角为 12vp\n  }\n\n  build() {\n    Scroll() { // 创建一个滚动区域\n      Column() { // 创建一个垂直布局的容器\n        Text(\"Scroll Area\") // 创建一个文本组件，显示“Scroll Area”\n          .width(\"100%\") // 设置宽度占据整个屏幕\n          .height(\"40%\") // 设置高度为 40%\n          .backgroundColor('#0080DC') // 设置背景颜色为蓝色\n          .textAlign(TextAlign.Center) // 设置文本居中对齐\n        Tabs({ barPosition: BarPosition.Start }) { // 创建一个选项卡组件，标签栏位于内容区域的上方\n          TabContent() { // 创建第一个标签页的内容区域\n            List({ space: 10 }) { // 创建一个列表组件，列表项之间的间距为 10vp\n              ForEach(this.arr, (item: number) => { // 通过 ForEach 循环生成列表项\n                ListItem() { // 创建一个列表项\n                  Text(\"item\" + item) // 创建一个文本组件，显示列表项的内容\n                    .fontSize(16) // 设置字体大小为 16\n                }.listCard() // 应用 listCard 样式\n              }, (item: string) => item) // 定义列表项的唯一标识符\n            }.width(\"100%\") // 设置列表组件的宽度占据整个屏幕\n            .edgeEffect(EdgeEffect.Spring) // 设置列表组件的滚动效果为弹性滚动\n            .nestedScroll({ // 设置列表组件的嵌套滚动模式\n              scrollForward: NestedScrollMode.PARENT_FIRST, // 向前滚动时，优先滚动父容器\n              scrollBackward: NestedScrollMode.SELF_FIRST // 向后滚动时，优先滚动自身\n            })\n          }.tabBar(\"Tab1\") // 设置第一个标签页的标签名为“Tab1”\n\n          TabContent() { // 创建第二个标签页的内容区域\n          }.tabBar(\"Tab2\") // 设置第二个标签页的标签名为“Tab2”\n        }\n        .vertical(false) // 设置选项卡组件的排列方式为水平排列\n        .height(\"100%\") // 设置选项卡组件的高度占据整个屏幕\n      }.width(\"100%\") // 设置垂直布局容器的宽度占据整个屏幕\n    }\n    .edgeEffect(EdgeEffect.Spring) // 设置滚动区域的滚动效果为弹性滚动\n    .friction(0.6) // 设置滚动区域的滚动摩擦系数为 0.6\n    .backgroundColor('#DCDCDC') // 设置滚动区域的背景颜色为浅灰色\n    .scrollBar(BarState.Off) // 设置滚动区域的滚动条状态为关闭\n    .width('100%') // 设置滚动区域的宽度占据整个屏幕\n    .height('100%') // 设置滚动区域的高度占据整个屏幕\n  }\n\n  aboutToAppear() { // 组件即将显示时执行的回调函数\n    for (let i = 0; i < 30; i++) { // 循环生成 30 个列表项的数据\n      this.arr.push(i) // 将生成的数据添加到 arr 数组中\n    }\n  }\n}"
            },
            {
                "description": "该组件实现了一个垂直滚动的列表，并通过按钮控制列表滚动到最底部。布局宽度占据整个屏幕，高度设为 100%，背景颜色为浅灰色（0xDCDCDC）。组件的垂直方向上包含一个 Scroll 组件和一个 Button 组件。\n\nScroll 组件内部包含一个 Column 组件，用于展示一个数字列表。每个数字项以 Text 组件的形式展示，宽度为 90%，高度为 150vp，背景颜色为白色（0xFFFFFF），边框圆角为 15vp，字体大小为 16，文本居中对齐，顶部外边距为 10vp。数字列表通过 ForEach 组件动态生成，根据 arr 数组的内容进行渲染。\n\nScroll 组件的滚动方向为垂直（ScrollDirection.Vertical），滚动条状态为始终显示（BarState.On），滚动条颜色为灰色（Color.Gray），滚动条宽度为 10vp，摩擦系数为 0.6，边缘效果为无（EdgeEffect.None）。Scroll 组件还绑定了多个事件回调函数，用于在滚动开始、滚动到边缘、滚动停止时输出日志信息。\n\nButton 组件位于 Scroll 组件的上方，高度为 5%，文本内容为 \"scroll to bottom 700\"，点击事件触发时，Scroll 组件将以 700vp/s 的速度滚动到最底部。Button 组件的顶部外边距为 100vp，左侧外边距为 20vp。\n\n整个布局通过 Stack 组件实现，确保 Button 和 Scroll 组件在垂直方向上依次排列，且 Scroll 组件占据剩余的全部空间。",
                "code": "@Entry\n@Component\nstruct ScrollExample {\n  scroller: Scroller = new Scroller() // 创建一个 Scroller 实例，用于控制 Scroll 组件的滚动行为\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] // 定义一个数字数组，用于生成滚动列表的内容\n\n  build() {\n    Stack({ alignContent: Alignment.TopStart }) { // 使用 Stack 布局，对齐方式为左上角对齐\n      Scroll(this.scroller) { // 创建一个 Scroll 组件，并绑定 Scroller 实例\n        Column() { // 使用 Column 布局，垂直排列子组件\n          ForEach(this.arr, (item: number) => { // 遍历 arr 数组，生成 Text 组件\n            Text(item.toString()) // 将数字转换为字符串并显示\n              .width('90%') // 设置 Text 组件的宽度为父容器的 90%\n              .height(150) // 设置 Text 组件的高度为 150vp\n              .backgroundColor(0xFFFFFF) // 设置背景颜色为白色\n              .borderRadius(15) // 设置边框圆角为 15vp\n              .fontSize(16) // 设置字体大小为 16\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n              .margin({ top: 10 }) // 设置顶部外边距为 10vp\n          }, (item: string) => item) // 使用数字的字符串形式作为键值\n        }.width('100%') // 设置 Column 组件的宽度为父容器的 100%\n      }\n      .scrollable(ScrollDirection.Vertical) // 设置 Scroll 组件的滚动方向为垂直\n      .scrollBar(BarState.On) // 设置滚动条始终显示\n      .scrollBarColor(Color.Gray) // 设置滚动条颜色为灰色\n      .scrollBarWidth(10) // 设置滚动条宽度为 10vp\n      .friction(0.6) // 设置滚动摩擦系数为 0.6\n      .edgeEffect(EdgeEffect.None) // 设置边缘效果为无\n      .onWillScroll((xOffset: number, yOffset: number, scrollState: ScrollState) => {\n        console.info(xOffset + ' ' + yOffset) // 在滚动开始时输出当前的 x 和 y 偏移量\n      })\n      .onScrollEdge((side: Edge) => {\n        console.info('To the edge') // 在滚动到边缘时输出日志信息\n      })\n      .onScrollStop(() => {\n        console.info('Scroll Stop') // 在滚动停止时输出日志信息\n      })\n\n      Button('scroll to bottom 700') // 创建一个 Button 组件，文本内容为 \"scroll to bottom 700\"\n        .height('5%') // 设置 Button 组件的高度为父容器的 5%\n        .onClick(() => { \n          this.scroller.scrollEdge(Edge.Bottom, { velocity: 700 }) // 点击按钮时，Scroll 组件将以 700vp/s 的速度滚动到最底部\n        })\n        .margin({ top: 100, left: 20 }) // 设置 Button 组件的顶部外边距为 100vp，左侧外边距为 20vp\n    }.width('100%').height('100%').backgroundColor(0xDCDCDC) // 设置 Stack 组件的宽度、高度为父容器的 100%，背景颜色为浅灰色\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个嵌套滚动区域。布局宽度占据整个屏幕，高度设为 100%，内边距为 20vp。组件的垂直方向上被分为三个部分：顶部和底部的固定高度文本区域，以及中间的可滚动列表区域。\n顶部和底部的文本区域高度为 40%，背景颜色为半透明的蓝色（0X330000FF），文本内容居中对齐，字体大小为 16vp。\n中间的列表区域高度为 50%，包含一个可滚动的列表组件（List），列表项之间有 20vp 的间距。列表项的高度为 100vp，宽度为 100%，背景颜色为白色，边框圆角为 15vp，字体大小为 16vp，文本内容居中对齐。\n列表组件的滚动效果通过 Scroller 对象控制，支持在滚动到列表的开始和结束位置时触发相应的事件处理函数。列表的滚动行为可以通过摩擦系数（friction）进行调整，当前设置为 0.6。\n整个布局通过 Flex 布局保证各部分在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { LengthMetrics } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct NestedScroll {\n  @State listPosition: number = 0; // 用于记录列表的当前位置状态，0 表示列表在顶部，1 表示列表在中间，2 表示列表在底部\n  private arr: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] // 列表数据源\n  private scrollerForScroll: Scroller = new Scroller() // 用于控制外部滚动区域的 Scroller 对象\n  private scrollerForList: Scroller = new Scroller() // 用于控制列表滚动区域的 Scroller 对象\n\n  build() {\n    Flex() {\n      Scroll(this.scrollerForScroll) { // 外部滚动区域，使用 scrollerForScroll 控制滚动行为\n        Column() {\n          Text(\"Scroll Area\")\n            .width(\"100%\") // 文本区域的宽度为 100%\n            .height(\"40%\") // 文本区域的高度为 40%\n            .backgroundColor(0X330000FF) // 文本区域的背景颜色为半透明的蓝色\n            .fontSize(16) // 文本字体大小为 16vp\n            .textAlign(TextAlign.Center) // 文本内容居中对齐\n            .onClick(() => {\n              this.scrollerForList.scrollToIndex(5, false, ScrollAlign.START, { extraOffset: LengthMetrics.vp(5) }) // 点击文本区域时，列表滚动到第 5 个列表项，并额外偏移 5vp\n            })\n\n          List({ space: 20, scroller: this.scrollerForList }) { // 列表组件，使用 scrollerForList 控制滚动行为，列表项之间的间距为 20vp\n            ForEach(this.arr, (item: number) => {\n              ListItem() {\n                Text(\"ListItem\" + item)\n                  .width(\"100%\") // 列表项的宽度为 100%\n                  .height(\"100%\") // 列表项的高度为 100%\n                  .borderRadius(15) // 列表项的边框圆角为 15vp\n                  .fontSize(16) // 列表项的文本字体大小为 16vp\n                  .textAlign(TextAlign.Center) // 列表项的文本内容居中对齐\n                  .backgroundColor(Color.White) // 列表项的背景颜色为白色\n              }.width(\"100%\").height(100) // 列表项的宽度为 100%，高度为 100vp\n            }, (item: string) => item)\n          }\n          .width(\"100%\") // 列表组件的宽度为 100%\n          .height(\"50%\") // 列表组件的高度为 50%\n          .edgeEffect(EdgeEffect.None) // 列表组件的边缘效果为无\n          .friction(0.6) // 列表组件的摩擦系数为 0.6\n          .onReachStart(() => {\n            this.listPosition = 0 // 当列表滚动到顶部时，设置列表位置状态为 0\n          })\n          .onReachEnd(() => {\n            this.listPosition = 2 // 当列表滚动到底部时，设置列表位置状态为 2\n          })\n          .onScrollFrameBegin((offset: number) => {\n            if ((this.listPosition == 0 && offset <= 0) || (this.listPosition == 2 && offset >= 0)) {\n              this.scrollerForScroll.scrollBy(0, offset) // 当列表在顶部或底部时，外部滚动区域跟随列表滚动\n              return { offsetRemain: 0 } // 返回剩余偏移量为 0\n            }\n            this.listPosition = 1 // 当列表在中间时，设置列表位置状态为 1\n            return { offsetRemain: offset }; // 返回剩余偏移量\n          })\n\n          Text(\"Scroll Area\")\n            .width(\"100%\") // 文本区域的宽度为 100%\n            .height(\"40%\") // 文本区域的高度为 40%\n            .backgroundColor(0X330000FF) // 文本区域的背景颜色为半透明的蓝色\n            .fontSize(16) // 文本字体大小为 16vp\n            .textAlign(TextAlign.Center) // 文本内容居中对齐\n        }\n      }\n      .width(\"100%\").height(\"100%\") // 外部滚动区域的宽度为 100%，高度为 100%\n    }.width('100%').height('100%').backgroundColor(0xDCDCDC).padding(20) // 整个布局的宽度为 100%，高度为 100%，背景颜色为浅灰色，内边距为 20vp\n  }\n}"
            },
            {
                "description": "该示例展示了一个垂直滚动的列表，列表项由数字组成。布局宽度占据整个屏幕，高度设为 100%，背景颜色为浅灰色（0xDCDCDC）。组件的垂直方向上包含一个滚动视图（Scroll），滚动视图内部是一个列布局（Column），列布局中包含多个文本组件（Text），每个文本组件显示一个数字。文本组件的样式包括宽度为 90%、高度为 150vp、背景颜色为白色（0xFFFFFF）、边框圆角为 15vp、字体大小为 16vp、文本居中对齐，并且每个文本组件之间有 10vp 的顶部边距。\n\n滚动视图的滚动方向为垂直方向，滚动条始终显示，颜色为灰色，宽度为 10vp，滚动摩擦系数为 0.6，边缘效果为无。滚动视图还绑定了多个滚动事件，包括滚动开始时的事件（onWillScroll）、滚动到边缘时的事件（onScrollEdge）和滚动停止时的事件（onScrollStop）。\n\n此外，布局中还包含多个按钮，用于控制滚动视图的滚动行为。按钮的样式包括高度为 5%，点击事件分别用于滚动 150vp、滚动 100vp、滚动 100vp（带有动画效果）、滚动到顶部和滚动到下一页。按钮的排列方式为垂直排列，每个按钮之间有不同的顶部边距。",
                "code": "import { curves } from '@kit.ArkUI' // 导入曲线动画库\n\n@Entry\n@Component\nstruct ScrollExample {\n  scroller: Scroller = new Scroller() // 创建一个 Scroller 实例，用于控制滚动视图的滚动行为\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] // 定义一个数字数组，用于生成滚动视图中的文本组件\n\n  build() {\n    Stack({ alignContent: Alignment.TopStart }) { // 使用 Stack 布局，对齐方式为顶部开始\n      Scroll(this.scroller) { // 创建一个滚动视图，使用 scroller 实例控制滚动行为\n        Column() { // 创建一个列布局，用于垂直排列文本组件\n          ForEach(this.arr, (item: number) => { // 遍历数字数组，生成文本组件\n            Text(item.toString()) // 创建文本组件，显示当前数字\n              .width('90%') // 设置文本组件的宽度为 90%\n              .height(150) // 设置文本组件的高度为 150vp\n              .backgroundColor(0xFFFFFF) // 设置文本组件的背景颜色为白色\n              .borderRadius(15) // 设置文本组件的边框圆角为 15vp\n              .fontSize(16) // 设置文本组件的字体大小为 16vp\n              .textAlign(TextAlign.Center) // 设置文本组件的文本居中对齐\n              .margin({ top: 10 }) // 设置文本组件的顶部边距为 10vp\n          }, (item: string) => item) // 使用数字作为键值\n        }.width('100%') // 设置列布局的宽度为 100%\n      }\n      .scrollable(ScrollDirection.Vertical) // 设置滚动视图的滚动方向为垂直方向\n      .scrollBar(BarState.On) // 设置滚动条始终显示\n      .scrollBarColor(Color.Gray) // 设置滚动条的颜色为灰色\n      .scrollBarWidth(10) // 设置滚动条的宽度为 10vp\n      .friction(0.6) // 设置滚动摩擦系数为 0.6\n      .edgeEffect(EdgeEffect.None) // 设置边缘效果为无\n      .onWillScroll((xOffset: number, yOffset: number, scrollState: ScrollState) => { // 绑定滚动开始时的事件\n        console.info(xOffset + ' ' + yOffset) // 输出当前的 x 和 y 偏移量\n      })\n      .onScrollEdge((side: Edge) => { // 绑定滚动到边缘时的事件\n        console.info('To the edge') // 输出滚动到边缘的提示信息\n      })\n      .onScrollStop(() => { // 绑定滚动停止时的事件\n        console.info('Scroll Stop') // 输出滚动停止的提示信息\n      })\n\n      Button('scroll 150') // 创建一个按钮，文本为 \"scroll 150\"\n        .height('5%') // 设置按钮的高度为 5%\n        .onClick(() => { // 绑定点击事件\n          this.scroller.scrollBy(0, 150) // 滚动 150vp\n        })\n        .margin({ top: 10, left: 20 }) // 设置按钮的顶部和左边距\n      Button('scroll 100') // 创建一个按钮，文本为 \"scroll 100\"\n        .height('5%') // 设置按钮的高度为 5%\n        .onClick(() => { // 绑定点击事件\n          const yOffset: number = this.scroller.currentOffset().yOffset; // 获取当前的 y 偏移量\n          this.scroller.scrollTo({ xOffset: 0, yOffset: yOffset + 100 }) // 滚动到当前 y 偏移量 + 100vp\n        })\n        .margin({ top: 60, left: 20 }) // 设置按钮的顶部和左边距\n      Button('scroll 100') // 创建一个按钮，文本为 \"scroll 100\"\n        .height('5%') // 设置按钮的高度为 5%\n        .onClick(() => { // 绑定点击事件\n          let curve = curves.interpolatingSpring(10, 1, 228, 30) // 创建一个弹簧动画曲线\n          const yOffset: number = this.scroller.currentOffset().yOffset; // 获取当前的 y 偏移量\n          this.scroller.scrollTo({ xOffset: 0, yOffset: yOffset + 100, animation: { duration: 1000, curve: curve } }) // 滚动到当前 y 偏移量 + 100vp，并应用动画效果\n        })\n        .margin({ top: 110, left: 20 }) // 设置按钮的顶部和左边距\n      Button('back top') // 创建一个按钮，文本为 \"back top\"\n        .height('5%') // 设置按钮的高度为 5%\n        .onClick(() => { // 绑定点击事件\n          this.scroller.scrollEdge(Edge.Top) // 滚动到顶部\n        })\n        .margin({ top: 160, left: 20 }) // 设置按钮的顶部和左边距\n      Button('next page') // 创建一个按钮，文本为 \"next page\"\n        .height('5%') // 设置按钮的高度为 5%\n        .onClick(() => { // 绑定点击事件\n          this.scroller.scrollPage({ next: true }) // 滚动到下一页\n        })\n        .margin({ top: 210, left: 20 }) // 设置按钮的顶部和左边距\n    }.width('100%').height('100%').backgroundColor(0xDCDCDC) // 设置 Stack 布局的宽度、高度和背景颜色\n  }\n}"
            }
        ]
    },
    "Swiper": {
        "description": "滑块视图容器，提供子组件滑动轮播显示的能力。",
        "details": "可以包含子组件。",
        "interfaces": [
            {
                "description": "Swiper(controller?: SwiperController)",
                "params": {
                    "controller": {
                        "type": "SwiperController",
                        "description": "Swiper容器组件的控制器，可以将此对象绑定至Swiper组件，可以通过它控制翻页。"
                    }
                }
            }
        ],
        "attributes": {
            "index": {
                "description": "设置当前在容器中显示的子组件的索引值。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "当前在容器中显示的子组件的索引值。",
                        "default": 0
                    }
                }
            },
            "autoPlay": {
                "description": "设置子组件是否自动播放。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "子组件是否自动播放。",
                        "default": false
                    }
                }
            },
            "interval": {
                "description": "设置使用自动播放时播放的时间间隔。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "自动播放时播放的时间间隔。",
                        "default": 3000
                    }
                }
            },
            "indicator": {
                "description": "设置可选导航点指示器样式。",
                "params": {
                    "value": {
                        "type": [
                            "DotIndicator",
                            "DigitIndicator",
                            "boolean"
                        ],
                        "required": true,
                        "description": "可选导航点指示器样式。",
                        "default": true
                    }
                }
            },
            "loop": {
                "description": "设置是否开启循环。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否开启循环。",
                        "default": true
                    }
                }
            },
            "duration": {
                "description": "设置子组件切换的动画时长。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "子组件切换的动画时长。",
                        "default": 400
                    }
                }
            },
            "vertical": {
                "description": "设置是否为纵向滑动。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否为纵向滑动。",
                        "default": false
                    }
                }
            },
            "itemSpace": {
                "description": "设置子组件与子组件之间间隙。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "子组件与子组件之间间隙。",
                        "default": 0
                    }
                }
            },
            "displayMode": {
                "description": "设置主轴方向上元素排列的模式，优先以displayCount设置的个数显示，displayCount未设置时本属性生效。",
                "params": {
                    "value": {
                        "type": "SwiperDisplayMode",
                        "required": true,
                        "description": "主轴方向上元素排列的模式。"
                    }
                }
            },
            "cachedCount": {
                "description": "设置预加载子组件个数，以当前页面为基准，加载当前显示页面的前后个数。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "预加载子组件个数。",
                        "default": 1
                    }
                }
            },
            "disableSwipe": {
                "description": "设置禁用组件滑动切换功能。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "禁用组件滑动切换功能。",
                        "default": false
                    }
                }
            },
            "curve": {
                "description": "设置Swiper的动画曲线。",
                "params": {
                    "value": {
                        "type": [
                            "Curve",
                            "string",
                            "ICurve"
                        ],
                        "required": true,
                        "description": "Swiper的动画曲线。",
                        "default": "interpolatingSpring(-1, 1, 328, 34)"
                    }
                }
            },
            "displayCount": {
                "description": "设置Swiper视窗内元素显示个数。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "SwiperAutoFill"
                        ],
                        "required": true,
                        "description": "视窗内显示的子元素个数。",
                        "default": 1
                    },
                    "swipeByGroup": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否按组进行翻页。",
                        "default": false
                    }
                }
            },
            "effectMode": {
                "description": "设置边缘滑动效果，loop = false时生效。",
                "params": {
                    "value": {
                        "type": "EdgeEffect",
                        "required": true,
                        "description": "边缘滑动效果。",
                        "default": "EdgeEffect.Spring"
                    }
                }
            },
            "displayArrow": {
                "description": "设置导航点箭头样式。",
                "params": {
                    "value": {
                        "type": [
                            "ArrowStyle",
                            "boolean"
                        ],
                        "required": true,
                        "description": "支持设置箭头和底板样式，异常场景使用ArrowStyle对象中的默认值。设置为false不显示箭头和底板，true显示默认的箭头和底板样式。",
                        "default": false
                    },
                    "isHoverShow": {
                        "type": "boolean",
                        "required": false,
                        "description": "设置鼠标悬停时是否显示箭头。",
                        "default": false
                    }
                }
            },
            "nextMargin": {
                "description": "设置后边距，用于露出后一项的一小部分。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "后边距。",
                        "default": 0
                    },
                    "ignoreBlank": {
                        "type": "boolean",
                        "required": false,
                        "description": "非loop场景下尾页不显示nextMargin。",
                        "default": false
                    }
                }
            },
            "prevMargin": {
                "description": "设置前边距，用于露出前一项的一小部分。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "前边距。",
                        "default": 0
                    },
                    "ignoreBlank": {
                        "type": "boolean",
                        "required": false,
                        "description": "非loop场景下首页不显示prevMargin。",
                        "default": false
                    }
                }
            },
            "nestedScroll": {
                "description": "设置Swiper组件和父组件的嵌套滚动模式。",
                "params": {
                    "value": {
                        "type": "SwiperNestedScrollMode",
                        "required": true,
                        "description": "Swiper组件和父组件的嵌套滚动模式。"
                    }
                }
            },
            "indicatorInteractive": {
                "description": "设置禁用组件导航点交互功能。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "导航点是否可交互。",
                        "default": true
                    }
                }
            }
        },
        "events": {
            "onChange": {
                "description": "当前显示的子组件索引变化时触发该事件，返回值为当前显示的子组件的索引值。",
                "params": {
                    "index": {
                        "type": "number",
                        "required": true,
                        "description": "当前显示元素的索引。"
                    }
                }
            },
            "onAnimationStart": {
                "description": "切换动画开始时触发该回调。",
                "params": {
                    "index": {
                        "type": "number",
                        "required": true,
                        "description": "当前显示元素的索引。"
                    },
                    "targetIndex": {
                        "type": "number",
                        "required": true,
                        "description": "切换动画目标元素的索引。"
                    },
                    "extraInfo": {
                        "type": "SwiperAnimationEvent",
                        "required": true,
                        "description": "动画相关信息。"
                    }
                }
            },
            "onAnimationEnd": {
                "description": "切换动画结束时触发该回调。",
                "params": {
                    "index": {
                        "type": "number",
                        "required": true,
                        "description": "当前显示元素的索引。"
                    },
                    "extraInfo": {
                        "type": "SwiperAnimationEvent",
                        "required": true,
                        "description": "动画相关信息。"
                    }
                }
            },
            "onGestureSwipe": {
                "description": "在页面跟手滑动过程中，逐帧触发该回调。",
                "params": {
                    "index": {
                        "type": "number",
                        "required": true,
                        "description": "当前显示元素的索引。"
                    },
                    "extraInfo": {
                        "type": "SwiperAnimationEvent",
                        "required": true,
                        "description": "动画相关信息。"
                    }
                }
            },
            "customContentTransition": {
                "description": "自定义Swiper页面切换动画。",
                "params": {
                    "transition": {
                        "type": "SwiperContentAnimatedTransition",
                        "required": true,
                        "description": "Swiper自定义切换动画相关信息。"
                    }
                }
            },
            "onContentDidScroll": {
                "description": "监听Swiper页面滑动事件。",
                "params": {
                    "handler": {
                        "type": "ContentDidScrollCallback",
                        "required": true,
                        "description": "Swiper滑动时触发的回调。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该示例通过 Swiper 组件实现了一个轮播图效果，并使用数字指示器（Indicator.digit）来显示当前页码。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上分为两个主要部分：Swiper 轮播图和控制按钮行。Swiper 轮播图内部包含多个 Text 组件，每个 Text 组件显示一个数字，并通过 LazyForEach 动态加载数据。Swiper 组件的样式包括背景颜色、字体大小、对齐方式等属性，支持自动播放、循环播放、指示器显示等功能。控制按钮行包含两个按钮，分别用于显示下一页和上一页，按钮的样式包括背景颜色、字体大小、对齐方式等属性，支持点击事件触发相应操作。",
                "code": "// 定义一个数据源类，实现 IDataSource 接口\nclass MyDataSource implements IDataSource {\n  private list: number[] = []\n\n  // 构造函数，初始化数据列表\n  constructor(list: number[]) {\n    this.list = list\n  }\n\n  // 返回数据总数\n  totalCount(): number {\n    return this.list.length\n  }\n\n  // 根据索引获取数据\n  getData(index: number): number {\n    return this.list[index]\n  }\n\n  // 注册数据变化监听器（未实现）\n  registerDataChangeListener(listener: DataChangeListener): void {\n  }\n\n  // 注销数据变化监听器（未实现）\n  unregisterDataChangeListener() {\n  }\n}\n\n// 主入口组件\n@Entry\n@Component\nstruct SwiperExample {\n  // 创建 Swiper 控制器\n  private swiperController: SwiperController = new SwiperController()\n  // 初始化数据源\n  private data: MyDataSource = new MyDataSource([])\n\n  // 组件即将显示时执行的逻辑\n  aboutToAppear(): void {\n    let list: number[] = []\n    // 生成一个包含 1 到 10 的数字列表\n    for (let i = 1; i <= 10; i++) {\n      list.push(i);\n    }\n    // 更新数据源\n    this.data = new MyDataSource(list)\n  }\n\n  // 构建组件\n  build() {\n    Column({ space: 5 }) {\n      // 创建 Swiper 组件\n      Swiper(this.swiperController) {\n        // 使用 LazyForEach 动态加载数据\n        LazyForEach(this.data, (item: string) => {\n          Text(item.toString())\n            .width('90%')\n            .height(160)\n            .backgroundColor(0xAFEEEE)\n            .textAlign(TextAlign.Center)\n            .fontSize(30)\n        }, (item: string) => item)\n      }\n      .cachedCount(2) // 设置缓存页数\n      .index(1) // 设置初始显示页的索引\n      .autoPlay(true) // 开启自动播放\n      .interval(4000) // 设置自动播放间隔时间\n      .indicator(Indicator.digit() \n        .top(200) // 设置指示器距离顶部的位置\n        .fontColor(Color.Gray) // 设置指示器字体颜色\n        .selectedFontColor(Color.Gray) // 设置选中项字体颜色\n        .digitFont({ size: 20, weight: FontWeight.Bold }) // 设置指示器字体样式\n        .selectedDigitFont({ size: 20, weight: FontWeight.Normal })) // 设置选中项字体样式\n      .loop(true) // 开启循环播放\n      .duration(1000) // 设置切换动画时长\n      .itemSpace(0) // 设置页面间距\n      .displayArrow(true, false) // 设置是否显示箭头\n\n      // 创建控制按钮行\n      Row({ space: 12 }) {\n        Button('showNext')\n          .onClick(() => {\n            this.swiperController.showNext() // 显示下一页\n          })\n        Button('showPrevious')\n          .onClick(() => {\n            this.swiperController.showPrevious() // 显示上一页\n          })\n      }.margin(5) // 设置按钮行外边距\n    }.width('100%') // 设置列宽度\n    .margin({ top: 5 }) // 设置列顶部外边距\n  }\n}"
            },
            {
                "description": "该组件实现了一个带有圆点导航指示器的轮播图（Swiper）界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为两个主要部分：轮播图和控制按钮。轮播图部分包含多个文本项，每个文本项以卡片形式展示，背景颜色为浅蓝色，文本居中显示，字体大小为30。轮播图的导航指示器为圆点形式，支持超长显示动画效果，最多显示9个圆点。控制按钮部分包含两个按钮，分别用于切换到下一个和上一个轮播项。按钮的样式包括背景颜色、宽度和高度等属性，支持点击事件。\n\n布局属性：\n- 轮播图的宽度为90%，高度为160vp，内边距为5vp。\n- 控制按钮的宽度为自适应，高度为自适应，内边距为5vp。\n\n组件的样式和外观：\n- 轮播图的背景颜色为浅蓝色（0xAFEEEE），文本颜色为默认颜色，字体大小为30。\n- 导航指示器的圆点颜色为灰色，选中圆点的颜色为蓝色，圆点的宽度和高度分别为8vp和8vp，选中圆点的宽度为16vp，高度为8vp。\n- 控制按钮的背景颜色为默认颜色，文本颜色为默认颜色。\n\n组件的排列和嵌套关系：\n- 轮播图和控制按钮通过Column组件垂直排列，轮播图在上，控制按钮在下。\n- 轮播图内部的文本项通过LazyForEach组件动态生成。\n- 控制按钮通过Row组件水平排列，按钮之间的间距为12vp。\n\n组件的功能和交互：\n- 轮播图支持自动播放，间隔为4000毫秒，循环播放，切换动画时间为1000毫秒。\n- 导航指示器支持超长显示动画效果，最多显示9个圆点。\n- 控制按钮支持点击事件，点击“showNext”按钮切换到下一个轮播项，点击“showPrevious”按钮切换到上一个轮播项。",
                "code": "// 定义一个数据源类，用于提供轮播图的数据\nclass MyDataSource implements IDataSource {\n  private list: number[] = []\n\n  constructor(list: number[]) {\n    this.list = list\n  }\n\n  totalCount(): number {\n    return this.list.length\n  }\n\n  getData(index: number): number {\n    return this.list[index]\n  }\n\n  registerDataChangeListener(listener: DataChangeListener): void {\n  }\n\n  unregisterDataChangeListener() {\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  private swiperController: SwiperController = new SwiperController()\n  private data: MyDataSource = new MyDataSource([])\n\n  aboutToAppear(): void {\n    let list: number[] = []\n    for (let i = 1; i <= 15; i++) {\n      list.push(i);\n    }\n    this.data = new MyDataSource(list)\n  }\n\n  build() {\n    Column({ space: 5 }) {\n      Swiper(this.swiperController) {\n        LazyForEach(this.data, (item: string) => {\n          Text(item.toString())\n            .width('90%')\n            .height(160)\n            .backgroundColor(0xAFEEEE)\n            .textAlign(TextAlign.Center)\n            .fontSize(30)\n        }, (item: string) => item)\n      }\n      .cachedCount(2)\n      .index(5)\n      .autoPlay(true)\n      .interval(4000)\n      .loop(true)\n      .duration(1000)\n      .itemSpace(0)\n      .indicator( \n        new DotIndicator()\n          .itemWidth(8)\n          .itemHeight(8)\n          .selectedItemWidth(16)\n          .selectedItemHeight(8)\n          .color(Color.Gray)\n          .selectedColor(Color.Blue)\n          .maxDisplayCount(9))\n      .displayArrow({ \n        showBackground: true,\n        isSidebarMiddle: true,\n        backgroundSize: 24,\n        backgroundColor: Color.White,\n        arrowSize: 18,\n        arrowColor: Color.Blue\n      }, false)\n      .curve(Curve.Linear)\n      Row({ space: 12 }) {\n        Button('showNext')\n          .onClick(() => {\n            this.swiperController.showNext()\n          })\n        Button('showPrevious')\n          .onClick(() => {\n            this.swiperController.showPrevious()\n          })\n      }.margin(5)\n    }.width('100%')\n    .margin({ top: 5 })\n  }\n}"
            },
            {
                "description": "该示例通过 Swiper 组件实现了一个按组翻页的效果。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上分为两个主要部分：Swiper 组件和按钮组。Swiper 组件用于展示一组数字，每个数字以 Text 组件的形式显示在一个卡片中。Swiper 组件的布局属性包括宽度为 90%，高度为 160vp，背景颜色为 0xAFEEEE，文本居中对齐，字体大小为 30。Swiper 组件的样式包括自动播放、循环播放、间隔时间为 4 秒、过渡时间为 1 秒、项目间距为 10vp，并带有指示器。指示器的样式包括默认和选中状态下的宽度和高度均为 15vp，颜色分别为灰色和蓝色。\n\n按钮组位于 Swiper 组件下方，包含两个按钮：“showNext” 和 “showPrevious”。按钮组的布局属性包括宽度为 100%，内边距为 5vp。按钮的样式包括默认的按钮样式，点击事件分别用于显示下一组和上一组内容。\n\n整个布局通过 Column 组件实现垂直排列，确保界面整洁美观。",
                "code": "// 定义一个数据源类，实现 IDataSource 接口\nclass MyDataSource implements IDataSource {\n  private list: number[] = []\n\n  // 构造函数，初始化数据源列表\n  constructor(list: number[]) {\n    this.list = list\n  }\n\n  // 返回数据源的总数\n  totalCount(): number {\n    return this.list.length\n  }\n\n  // 根据索引获取数据源中的数据\n  getData(index: number): number {\n    return this.list[index]\n  }\n\n  // 注册数据变化监听器（未实现）\n  registerDataChangeListener(listener: DataChangeListener): void {\n  }\n\n  // 注销数据变化监听器（未实现）\n  unregisterDataChangeListener() {\n  }\n}\n\n// 主入口组件\n@Entry\n@Component\nstruct SwiperExample {\n  // Swiper 控制器，用于控制 Swiper 组件的翻页\n  private swiperController: SwiperController = new SwiperController()\n  // 数据源实例，初始为空\n  private data: MyDataSource = new MyDataSource([])\n\n  // 组件即将显示时执行的初始化操作\n  aboutToAppear(): void {\n    let list: number[] = []\n    // 生成一个包含 1 到 10 的数字列表\n    for (let i = 1; i <= 10; i++) {\n      list.push(i);\n    }\n    // 初始化数据源\n    this.data = new MyDataSource(list)\n  }\n\n  // 构建组件的 UI\n  build() {\n    Column({ space: 5 }) {\n      // Swiper 组件，用于展示一组卡片\n      Swiper(this.swiperController) {\n        // 使用 LazyForEach 遍历数据源，生成 Text 组件\n        LazyForEach(this.data, (item: string) => {\n          Text(item.toString())\n            .width('90%') // 文本宽度为 90%\n            .height(160) // 文本高度为 160vp\n            .backgroundColor(0xAFEEEE) // 背景颜色为浅蓝色\n            .textAlign(TextAlign.Center) // 文本居中对齐\n            .fontSize(30) // 字体大小为 30\n        }, (item: string) => item) // 唯一标识符为 item 本身\n      }\n      .displayCount(3, true) // 每页显示 3 个项目，并启用分组\n      .autoPlay(true) // 自动播放\n      .interval(4000) // 自动播放间隔为 4 秒\n      .loop(true) // 循环播放\n      .duration(1000) // 过渡时间为 1 秒\n      .itemSpace(10) // 项目间距为 10vp\n      .indicator( \n        new DotIndicator()\n          .itemWidth(15) // 指示器宽度为 15vp\n          .itemHeight(15) // 指示器高度为 15vp\n          .selectedItemWidth(15) // 选中指示器宽度为 15vp\n          .selectedItemHeight(15) // 选中指示器高度为 15vp\n          .color(Color.Gray) // 默认指示器颜色为灰色\n          .selectedColor(Color.Blue)) // 选中指示器颜色为蓝色\n\n      // 按钮组，用于控制 Swiper 组件的翻页\n      Row({ space: 12 }) {\n        Button('showNext')\n          .onClick(() => {\n            this.swiperController.showNext() // 显示下一组内容\n          })\n        Button('showPrevious')\n          .onClick(() => {\n            this.swiperController.showPrevious() // 显示上一组内容\n          })\n      }.margin(5) // 按钮组内边距为 5vp\n    }.width('100%') // 列宽度为 100%\n    .margin({ top: 5 }) // 顶部外边距为 5vp\n  }\n}"
            },
            {
                "description": "该组件通过自定义Swiper页面切换动画实现了一个展示多种颜色背景的界面。布局宽度占据整个屏幕，高度设为300vp。组件的垂直方向上包含一个Swiper组件，Swiper组件内部通过ForEach循环生成多个Text组件，每个Text组件代表一个页面，背景颜色从预定义的颜色数组中获取。\nSwiper组件的样式包括高度、隐藏指示器、显示页面数量等属性。每个Text组件的样式包括宽度、高度、字体大小、文本对齐方式、背景颜色、透明度、缩放比例、平移位置和z轴索引等属性。\n组件的功能包括自定义页面切换动画，通过customContentTransition接口实现。在页面切换过程中，根据页面的位置和索引，动态调整页面的透明度、缩放比例、平移位置和z轴索引，从而实现自定义的动画效果。\n整个布局通过Column布局保证Swiper组件在垂直方向上居中显示，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct SwiperCustomAnimationExample {\n  // 定义显示的页面数量\n  private DISPLAY_COUNT: number = 2\n  // 定义最小缩放比例\n  private MIN_SCALE: number = 0.75\n\n  // 定义背景颜色数组\n  @State backgroundColors: Color[] = [Color.Green, Color.Blue, Color.Yellow, Color.Pink, Color.Gray, Color.Orange]\n  // 定义透明度数组\n  @State opacityList: number[] = []\n  // 定义缩放比例数组\n  @State scaleList: number[] = []\n  // 定义平移位置数组\n  @State translateList: number[] = []\n  // 定义z轴索引数组\n  @State zIndexList: number[] = []\n\n  // 组件初始化时调用，初始化各个数组\n  aboutToAppear(): void {\n    for (let i = 0; i < this.backgroundColors.length; i++) {\n      this.opacityList.push(1.0)\n      this.scaleList.push(1.0)\n      this.translateList.push(0.0)\n      this.zIndexList.push(0)\n    }\n  }\n\n  build() {\n    Column() {\n      Swiper() {\n        // 通过ForEach循环生成多个Text组件\n        ForEach(this.backgroundColors, (backgroundColor: Color, index: number) => {\n          Text(index.toString()).width('100%').height('100%').fontSize(50).textAlign(TextAlign.Center)\n            .backgroundColor(backgroundColor)\n            // 设置透明度\n            .opacity(this.opacityList[index])\n            // 设置缩放比例\n            .scale({ x: this.scaleList[index], y: this.scaleList[index] })\n            // 设置平移位置\n            .translate({ x: this.translateList[index] })\n            // 设置z轴索引\n            .zIndex(this.zIndexList[index])\n        })\n      }\n      .height(300)\n      // 隐藏指示器\n      .indicator(false)\n      // 设置显示的页面数量\n      .displayCount(this.DISPLAY_COUNT, true)\n      // 自定义页面切换动画\n      .customContentTransition({\n        timeout: 1000,\n        transition: (proxy: SwiperContentTransitionProxy) => {\n          // 根据页面的位置和索引，动态调整页面的透明度、缩放比例、平移位置和z轴索引\n          if (proxy.position <= proxy.index % this.DISPLAY_COUNT || proxy.position >= this.DISPLAY_COUNT + proxy.index % this.DISPLAY_COUNT) {\n            this.opacityList[proxy.index] = 1.0\n            this.scaleList[proxy.index] = 1.0\n            this.translateList[proxy.index] = 0.0\n            this.zIndexList[proxy.index] = 0\n          } else {\n            if (proxy.index % this.DISPLAY_COUNT === 0) {\n              this.opacityList[proxy.index] = 1 - proxy.position / this.DISPLAY_COUNT\n              this.scaleList[proxy.index] = this.MIN_SCALE + (1 - this.MIN_SCALE) * (1 - proxy.position / this.DISPLAY_COUNT)\n              this.translateList[proxy.index] = - proxy.position * proxy.mainAxisLength + (1 - this.scaleList[proxy.index]) * proxy.mainAxisLength / 2.0\n            } else {\n              this.opacityList[proxy.index] = 1 - (proxy.position - 1) / this.DISPLAY_COUNT\n              this.scaleList[proxy.index] = this.MIN_SCALE + (1 - this.MIN_SCALE) * (1 - (proxy.position - 1) / this.DISPLAY_COUNT)\n              this.translateList[proxy.index] = - (proxy.position - 1) * proxy.mainAxisLength - (1 - this.scaleList[proxy.index]) * proxy.mainAxisLength / 2.0\n            }\n            this.zIndexList[proxy.index] = -1\n          }\n        }\n      })\n      // 页面滚动时触发的事件\n      .onContentDidScroll((selectedIndex: number, index: number, position: number, mainAxisLength: number) => {\n        console.info(\"onContentDidScroll selectedIndex: \" + selectedIndex + \", index: \" + index + \", position: \" + position + \", mainAxisLength: \" + mainAxisLength)\n      })\n    }.width('100%')\n  }\n}"
            },
            {
                "description": "该示例通过 Swiper 组件实现了一个轮播图功能，并使用自定义的导航点和控制按钮来增强用户体验。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为两个主要部分：轮播图和控制按钮。轮播图部分包含多个文本项，每个文本项以卡片形式展示，卡片背景颜色为浅蓝色，文本居中显示，字体大小为30。控制按钮部分包含两个按钮，分别用于显示下一项和上一项，按钮之间有12vp的间距，按钮的点击事件通过 SwiperController 控制轮播图的切换。\n\n轮播图的样式包括导航点的颜色、大小和选中状态的颜色，导航点以灰色显示，选中时变为蓝色。轮播图的切换效果为线性动画，切换时间为1000毫秒，支持自动播放和循环播放，间隔为4000毫秒。轮播图的交互功能包括滑动切换、动画开始和结束的回调事件，以及导航点的交互功能。\n\n整个布局通过 Column 和 Row 组件进行嵌套，确保界面整洁美观，且功能丰富。",
                "code": "// 自定义数据源类，实现 IDataSource 接口\nclass MyDataSource implements IDataSource {\n  private list: number[] = []\n\n  // 构造函数，初始化数据列表\n  constructor(list: number[]) {\n    this.list = list\n  }\n\n  // 返回数据总数\n  totalCount(): number {\n    return this.list.length\n  }\n\n  // 根据索引获取数据项\n  getData(index: number): number {\n    return this.list[index]\n  }\n\n  // 注册数据变化监听器（未实现）\n  registerDataChangeListener(listener: DataChangeListener): void {\n  }\n\n  // 注销数据变化监听器（未实现）\n  unregisterDataChangeListener() {\n  }\n}\n\n// 入口组件，使用 Swiper 组件实现轮播图功能\n@Entry\n@Component\nstruct SwiperExample {\n  // Swiper 控制器，用于手动控制轮播图\n  private swiperController: SwiperController = new SwiperController()\n  // 数据源实例，初始为空\n  private data: MyDataSource = new MyDataSource([])\n\n  // 组件即将显示时，初始化数据源\n  aboutToAppear(): void {\n    let list: number[] = []\n    for (let i = 1; i <= 10; i++) {\n      list.push(i);\n    }\n    this.data = new MyDataSource(list)\n  }\n\n  // 构建组件布局\n  build() {\n    Column({ space: 5 }) {\n      // Swiper 组件，用于展示轮播图\n      Swiper(this.swiperController) {\n        // 使用 LazyForEach 遍历数据源，生成轮播图项\n        LazyForEach(this.data, (item: string) => {\n          Text(item.toString())\n            .width('90%') // 文本项宽度为父容器的90%\n            .height(160) // 文本项高度为160vp\n            .backgroundColor(0xAFEEEE) // 文本项背景颜色为浅蓝色\n            .textAlign(TextAlign.Center) // 文本居中对齐\n            .fontSize(30) // 文本字体大小为30\n        }, (item: string) => item)\n      }\n      .cachedCount(2) // 缓存2个轮播图项\n      .index(1) // 初始显示第2个轮播图项\n      .autoPlay(true) // 开启自动播放\n      .interval(4000) // 自动播放间隔为4000毫秒\n      .loop(true) // 开启循环播放\n      .indicatorInteractive(true) // 开启导航点交互功能\n      .duration(1000) // 切换动画时间为1000毫秒\n      .itemSpace(0) // 轮播图项之间的间距为0\n      .indicator( \n        new DotIndicator()\n          .itemWidth(15) // 导航点宽度为15vp\n          .itemHeight(15) // 导航点高度为15vp\n          .selectedItemWidth(15) // 选中导航点宽度为15vp\n          .selectedItemHeight(15) // 选中导航点高度为15vp\n          .color(Color.Gray) // 导航点颜色为灰色\n          .selectedColor(Color.Blue)) // 选中导航点颜色为蓝色\n      .displayArrow({ \n        showBackground: true, // 显示箭头背景\n        isSidebarMiddle: true, // 箭头位于侧边栏中间\n        backgroundSize: 24, // 箭头背景大小为24vp\n        backgroundColor: Color.White, // 箭头背景颜色为白色\n        arrowSize: 18, // 箭头大小为18vp\n        arrowColor: Color.Blue // 箭头颜色为蓝色\n      }, false) // 不显示箭头\n      .curve(Curve.Linear) // 切换动画曲线为线性\n      .onChange((index: number) => {\n        console.info(index.toString()) // 切换时输出当前索引\n      })\n      .onGestureSwipe((index: number, extraInfo: SwiperAnimationEvent) => {\n        console.info(\"index: \" + index) // 滑动时输出当前索引\n        console.info(\"current offset: \" + extraInfo.currentOffset) // 滑动时输出当前偏移量\n      })\n      .onAnimationStart((index: number, targetIndex: number, extraInfo: SwiperAnimationEvent) => {\n        console.info(\"index: \" + index) // 动画开始时输出当前索引\n        console.info(\"targetIndex: \" + targetIndex) // 动画开始时输出目标索引\n        console.info(\"current offset: \" + extraInfo.currentOffset) // 动画开始时输出当前偏移量\n        console.info(\"target offset: \" + extraInfo.targetOffset) // 动画开始时输出目标偏移量\n        console.info(\"velocity: \" + extraInfo.velocity) // 动画开始时输出速度\n      })\n      .onAnimationEnd((index: number, extraInfo: SwiperAnimationEvent) => {\n        console.info(\"index: \" + index) // 动画结束时输出当前索引\n        console.info(\"current offset: \" + extraInfo.currentOffset) // 动画结束时输出当前偏移量\n      })\n\n      // 控制按钮部分，包含两个按钮\n      Row({ space: 12 }) {\n        Button('showNext')\n          .onClick(() => {\n            this.swiperController.showNext() // 点击按钮显示下一项\n          })\n        Button('showPrevious')\n          .onClick(() => {\n            this.swiperController.showPrevious() // 点击按钮显示上一项\n          })\n      }.margin(5) // 按钮部分的外边距为5vp\n    }.width('100%') // 主布局宽度为100%\n    .margin({ top: 5 }) // 主布局的上外边距为5vp\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "WaterFlow": {
        "description": "瀑布流容器，由“行”和“列”分割的单元格所组成，通过容器自身的排列规则，将不同大小的“项目”自上而下，如瀑布般紧密布局。",
        "interfaces": [
            {
                "description": "WaterFlow(options?: WaterFlowOptions)",
                "params": {
                    "options": {
                        "type": "WaterFlowOptions",
                        "description": "瀑布流选项。"
                    }
                }
            }
        ],
        "attributes": {
            "columnsTemplate": {
                "description": "设置当前瀑布流组件布局列的数量。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "当前瀑布流组件布局列的数量。",
                        "default": "1fr"
                    }
                }
            },
            "rowsTemplate": {
                "description": "设置当前瀑布流组件布局行的数量。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "当前瀑布流组件布局行的数量。",
                        "default": "1fr"
                    }
                }
            },
            "itemConstraintSize": {
                "description": "设置约束尺寸，子组件布局时，进行尺寸范围限制。",
                "params": {
                    "value": {
                        "type": "ConstraintSizeOptions",
                        "required": true,
                        "description": "约束尺寸。"
                    }
                }
            },
            "columnsGap": {
                "description": "设置列与列的间距。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "列与列的间距。",
                        "default": 0
                    }
                }
            },
            "rowsGap": {
                "description": "设置行与行的间距。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "行与行的间距。",
                        "default": 0
                    }
                }
            },
            "layoutDirection": {
                "description": "设置布局的主轴方向。",
                "params": {
                    "value": {
                        "type": "FlexDirection",
                        "required": true,
                        "description": "布局的主轴方向。",
                        "default": "FlexDirection.Column"
                    }
                }
            },
            "enableScrollInteraction": {
                "description": "设置是否支持滚动手势。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否支持滚动手势。",
                        "default": true
                    }
                }
            },
            "nestedScroll": {
                "description": "设置向前向后两个方向上的嵌套滚动模式，实现与父组件的滚动联动。",
                "params": {
                    "value": {
                        "type": "NestedScrollOptions",
                        "required": true,
                        "description": "嵌套滚动模式。"
                    }
                }
            },
            "friction": {
                "description": "设置摩擦系数，手动划动滚动区域时生效，只对惯性滚动过程有影响。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "摩擦系数。",
                        "default": 0.75
                    }
                }
            },
            "cachedCount": {
                "description": "设置预加载的FlowItem的数量，只在LazyForEach中生效。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "预加载的FlowItem的数量。",
                        "default": 1
                    }
                }
            }
        },
        "events": {
            "onReachStart": {
                "description": "瀑布流组件到达起始位置时触发。",
                "params": {}
            },
            "onReachEnd": {
                "description": "瀑布流组件到底末尾位置时触发。",
                "params": {}
            },
            "onScrollFrameBegin": {
                "description": "瀑布流开始滑动时触发，事件参数传入即将发生的滑动量，事件处理函数中可根据应用场景计算实际需要的滑动量并作为事件处理函数的返回值返回，瀑布流将按照返回值的实际滑动量进行滑动。",
                "params": {
                    "offset": {
                        "type": "number",
                        "required": true,
                        "description": "即将发生的滑动量，单位vp。"
                    },
                    "state": {
                        "type": "ScrollState",
                        "required": true,
                        "description": "当前滑动状态。"
                    }
                },
                "returns": {
                    "offsetRemain": {
                        "type": "number",
                        "description": "实际滑动量，单位vp。"
                    }
                }
            },
            "onScrollIndex": {
                "description": "当前瀑布流显示的起始位置/终止位置的子组件发生变化时触发。",
                "params": {
                    "first": {
                        "type": "number",
                        "required": true,
                        "description": "当前显示的瀑布流起始位置的索引值。"
                    },
                    "last": {
                        "type": "number",
                        "required": true,
                        "description": "当前显示的瀑布流终止位置的索引值。"
                    }
                }
            }
        },
        "examples": [
            {
                "description": "该组件实现了一个瀑布流布局的展示界面。布局宽度占据整个屏幕，高度设为 100%，内边距为左侧 5vp。组件的垂直方向上包含一个 WaterFlow 组件，用于展示瀑布流布局。WaterFlow 组件内部通过 LazyForEach 循环渲染多个 FlowItem 组件，每个 FlowItem 组件包含一个 Column 组件，用于展示文本和图片。\n\nWaterFlow 组件的列模板设置为 'repeat(auto-fill,80)'，表示列宽为 80vp，自动填充容器宽度。列间距为 10vp，行间距为 5vp。WaterFlow 组件的背景颜色为 0xFAEEE0。\n\n每个 FlowItem 组件的宽度为 100%，高度根据 itemHeightArray 数组中的随机值动态设置。FlowItem 组件的背景颜色从 colors 数组中随机选择。\n\n组件的功能包括动态生成随机大小的宽度和高度数组，并在页面加载时设置这些数组。通过 LazyForEach 循环渲染 FlowItem 组件，展示瀑布流布局效果。",
                "code": "import { WaterFlowDataSource } from './WaterFlowDataSource'\n\n@Entry\n@Component\nstruct WaterFlowDemo {\n  @State minSize: number = 80 // 最小尺寸，用于生成随机尺寸\n  @State maxSize: number = 180 // 最大尺寸，用于生成随机尺寸\n  @State colors: number[] = [0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F] // 颜色数组，用于随机选择背景颜色\n  dataSource: WaterFlowDataSource = new WaterFlowDataSource() // 数据源，用于 LazyForEach 循环\n  private itemWidthArray: number[] = [] // 宽度数组，用于存储随机生成的宽度\n  private itemHeightArray: number[] = [] // 高度数组，用于存储随机生成的高度\n\n  // 生成随机尺寸的方法\n  getSize() {\n    let ret = Math.floor(Math.random() * this.maxSize)\n    return (ret > this.minSize ? ret : this.minSize)\n  }\n\n  // 设置宽度和高度数组的方法\n  setItemSizeArray() {\n    for (let i = 0; i < 100; i++) {\n      this.itemWidthArray.push(this.getSize())\n      this.itemHeightArray.push(this.getSize())\n    }\n  }\n\n  // 页面加载时调用的方法，用于设置宽度和高度数组\n  aboutToAppear() {\n    this.setItemSizeArray()\n  }\n\n  // 构建页面布局的方法\n  build() {\n    Column({ space: 2 }) {\n      WaterFlow() {\n        LazyForEach(this.dataSource, (item: number) => {\n          FlowItem() {\n            Column() {\n              Text(\"N\" + item).fontSize(12).height('16') // 显示文本，字体大小为 12vp，高度为 16vp\n              Image('res/waterFlowTest(' + item % 5 + ').jpg') // 显示图片，图片资源名为 waterFlowTest(0-4).jpg\n            }\n          }\n          .width('100%') // FlowItem 宽度为 100%\n          .height(this.itemHeightArray[item % 100]) // FlowItem 高度为 itemHeightArray 数组中的随机值\n          .backgroundColor(this.colors[item % 5]) // FlowItem 背景颜色为 colors 数组中的随机颜色\n        }, (item: string) => item)\n      }\n      .columnsTemplate('repeat(auto-fill,80)') // 列模板为 'repeat(auto-fill,80)'，表示列宽为 80vp，自动填充容器宽度\n      .columnsGap(10) // 列间距为 10vp\n      .rowsGap(5) // 行间距为 5vp\n      .padding({left:5}) // 左侧内边距为 5vp\n      .backgroundColor(0xFAEEE0) // 背景颜色为 0xFAEEE0\n      .width('100%') // 宽度为 100%\n      .height('100%') // 高度为 100%\n    }\n  }\n}"
            },
            {
                "description": "该示例展示了一个基于鸿蒙ArkUI的水流布局（WaterFlow）组件，支持通过双指缩放手势动态调整列数。布局宽度占据整个屏幕，高度设为100%，内边距为左右20vp、顶部10vp。组件的垂直方向上被分为两个部分：顶部是一个提示文本，底部是一个水流布局。\n\n水流布局中的每个项目（FlowItem）通过LazyForEach组件动态加载，项目的高度和背景颜色随机生成，宽度固定为100%。项目的排列方式通过columnsTemplate属性动态调整，列数根据双指缩放手势的结果进行变化。项目的排列间距通过columnsGap和rowsGap属性设置，分别为10vp和5vp。\n\n项目的样式包括背景颜色、字体大小、图片填充方式等属性，支持不同的样式展示。项目的功能包括双指缩放手势事件，用户可以通过双指缩放调整列数，列数的变化会通过AppStorage进行持久化存储。\n\n整个布局通过Column和Row组件进行嵌套，确保界面整洁美观。",
                "code": "// 导入WaterFlowDataSource类\nimport { WaterFlowDataSource } from './WaterFlowDataSource'\n\n// 定义可复用的FlowItem组件\n@Reusable\n@Component\nstruct ReusableFlowItem {\n  @State item: number = 0 // 定义一个状态变量item，用于存储当前项目的编号\n\n  // 组件复用时的回调函数，用于更新item的值\n  aboutToReuse(params: Record<string, number>) {\n    this.item = params.item;\n    console.info('Reuse item:' + this.item)\n  }\n\n  // 组件首次出现时的回调函数，用于输出item的值\n  aboutToAppear() {\n    console.info('item:' + this.item)\n  }\n\n  // 构建组件的UI结构\n  build() {\n    Column() {\n      Text(\"N\" + this.item).fontSize(12).height('16') // 显示项目的编号，字体大小为12vp，高度为16vp\n      Image('res/waterFlow (' + this.item % 5 + ').JPG') // 显示项目的图片，图片路径根据item的值动态生成\n        .objectFit(ImageFit.Fill) // 图片填充方式为填充\n        .width('100%') // 图片宽度为100%\n        .layoutWeight(1) // 图片占据剩余空间\n    }\n  }\n}\n\n// 定义入口组件WaterFlowDemo\n@Entry\n@Component\nstruct WaterFlowDemo {\n  minSize: number = 80 // 定义项目最小尺寸\n  maxSize: number = 180 // 定义项目最大尺寸\n  colors: number[] = [0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F] // 定义项目背景颜色数组\n  @State columns: number = 2 // 定义状态变量columns，用于存储当前列数\n  dataSource: WaterFlowDataSource = new WaterFlowDataSource() // 创建WaterFlowDataSource实例\n  private itemWidthArray: number[] = [] // 定义项目宽度数组\n  private itemHeightArray: number[] = [] // 定义项目高度数组\n\n  // 获取随机尺寸的方法\n  getSize() {\n    let ret = Math.floor(Math.random() * this.maxSize)\n    return (ret > this.minSize ? ret : this.minSize)\n  }\n\n  // 设置项目尺寸数组的方法\n  setItemSizeArray() {\n    for (let i = 0; i < 100; i++) {\n      this.itemWidthArray.push(this.getSize())\n      this.itemHeightArray.push(this.getSize())\n    }\n  }\n\n  // 组件首次出现时的回调函数，用于初始化列数和项目尺寸数组\n  aboutToAppear() {\n    let lastCount = AppStorage.get<number>('columnsCount')\n    if (typeof lastCount != 'undefined') {\n      this.columns = lastCount\n    }\n    this.setItemSizeArray()\n  }\n\n  // 构建组件的UI结构\n  build() {\n    Column({ space: 2 }) {\n      Row() {\n        Text('双指缩放改变列数') // 显示提示文本\n          .height('5%') // 文本高度为5%\n          .margin({ top: 10, left: 20 }) // 文本上边距为10vp，左边距为20vp\n      }\n\n      WaterFlow() {\n        LazyForEach(this.dataSource, (item: number) => {\n          FlowItem() {\n            ReusableFlowItem({ item: item }) // 使用ReusableFlowItem组件，传入当前项目编号\n          }\n          .width('100%') // 项目宽度为100%\n          .height(this.itemHeightArray[item % 100]) // 项目高度从数组中随机获取\n          .backgroundColor(this.colors[item % 5]) // 项目背景颜色从数组中随机获取\n        }, (item: string) => item)\n      }\n      .columnsTemplate('1fr '.repeat(this.columns)) // 设置列模板，列数根据columns的值动态调整\n      .columnsGap(10) // 列间距为10vp\n      .rowsGap(5) // 行间距为5vp\n      .backgroundColor(0xFAEEE0) // 水流布局背景颜色为0xFAEEE0\n      .width('100%') // 水流布局宽度为100%\n      .height('100%') // 水流布局高度为100%\n      .layoutWeight(1) // 水流布局占据剩余空间\n\n      .animation({\n        duration: 300, // 动画持续时间为300毫秒\n        curve: Curve.Smooth // 动画曲线为平滑曲线\n      })\n      .priorityGesture(\n        PinchGesture() // 设置双指缩放手势\n          .onActionEnd((event: GestureEvent) => {\n            console.info('end scale:' + event.scale)\n\n            if (event.scale > 2) { // 如果缩放比例大于2，减少列数\n              this.columns--\n            } else if (event.scale < 0.6) { // 如果缩放比例小于0.6，增加列数\n              this.columns++\n            }\n\n            this.columns = Math.min(4, Math.max(1, this.columns)); // 列数限制在1到4之间\n            AppStorage.setOrCreate<number>('columnsCount', this.columns) // 将列数存储到AppStorage中\n          })\n      )\n    }\n  }\n}"
            },
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用WaterFlow组件实现瀑布流布局。WaterFlow组件用于展示多列的流式布局，适用于图片、卡片等内容的展示。布局宽度占据整个屏幕，高度设为100%，内边距为左右10vp、上下5vp。组件的垂直方向上被分为多个部分，每个部分包含一个FlowItem。每个FlowItem以水平布局方式排列，FlowItem之间的间距均匀分布，且对齐方式为居中对齐。\n\nFlowItem的样式包括背景颜色、宽度和高度等属性，支持不同的样式展示。FlowItem组之间通过WaterFlow组件进行分隔。FlowItem的功能包括点击事件和状态效果，用户可以通过点击FlowItem触发相应操作，FlowItem也可以在启用或禁用状态下进行展示。\n\n整个布局通过WaterFlow布局保证FlowItem在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// 定义WaterFlowDataSource类，实现IDataSource接口\nexport class WaterFlowDataSource implements IDataSource {\n  // 数据数组，用于存储数据\n  private dataArray: number[] = []\n  // 数据变化监听器数组，用于存储监听器\n  private listeners: DataChangeListener[] = []\n\n  // 构造函数，初始化数据数组\n  constructor() {\n    for (let i = 0; i < 100; i++) {\n      this.dataArray.push(i)\n    }\n  }\n\n  // 获取指定索引的数据\n  public getData(index: number): number {\n    return this.dataArray[index]\n  }\n\n  // 通知所有监听器数据已重新加载\n  notifyDataReload(): void {\n    this.listeners.forEach(listener => {\n      listener.onDataReloaded()\n    })\n  }\n\n  // 通知所有监听器数据已添加\n  notifyDataAdd(index: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataAdd(index)\n    })\n  }\n\n  // 通知所有监听器数据已更改\n  notifyDataChange(index: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataChange(index)\n    })\n  }\n\n  // 通知所有监听器数据已删除\n  notifyDataDelete(index: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataDelete(index)\n    })\n  }\n\n  // 通知所有监听器数据已移动\n  notifyDataMove(from: number, to: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataMove(from, to)\n    })\n  }\n\n  // 通知所有监听器数据集已更改\n  notifyDatasetChange(operations: DataOperation[]): void {\n    this.listeners.forEach(listener => {\n      listener.onDatasetChange(operations);\n    })\n  }\n\n  // 获取数据总数\n  public totalCount(): number {\n    return this.dataArray.length\n  }\n\n  // 注册数据变化监听器\n  registerDataChangeListener(listener: DataChangeListener): void {\n    if (this.listeners.indexOf(listener) < 0) {\n      this.listeners.push(listener)\n    }\n  }\n\n  // 注销数据变化监听器\n  unregisterDataChangeListener(listener: DataChangeListener): void {\n    const pos = this.listeners.indexOf(listener)\n    if (pos >= 0) {\n      this.listeners.splice(pos, 1)\n    }\n  }\n\n  // 在数据数组开头添加一个数据\n  public add1stItem(): void {\n    this.dataArray.splice(0, 0, this.dataArray.length)\n    this.notifyDataAdd(0)\n  }\n\n  // 在数据数组末尾添加一个数据\n  public addLastItem(): void {\n    this.dataArray.splice(this.dataArray.length, 0, this.dataArray.length)\n    this.notifyDataAdd(this.dataArray.length - 1)\n  }\n\n  // 在指定索引处添加一个数据\n  public addItem(index: number): void {\n    this.dataArray.splice(index, 0, this.dataArray.length)\n    this.notifyDataAdd(index)\n  }\n\n  // 删除数据数组开头的数据\n  public delete1stItem(): void {\n    this.dataArray.splice(0, 1)\n    this.notifyDataDelete(0)\n  }\n\n  // 删除数据数组第二个数据\n  public delete2ndItem(): void {\n    this.dataArray.splice(1, 1)\n    this.notifyDataDelete(1)\n  }\n\n  // 删除数据数组末尾的数据\n  public deleteLastItem(): void {\n    this.dataArray.splice(-1, 1)\n    this.notifyDataDelete(this.dataArray.length)\n  }\n\n  // 删除指定索引处的数据\n  public deleteItem(index: number): void {\n    this.dataArray.splice(index, 1)\n    this.notifyDataDelete(index)\n  }\n\n  // 重新加载数据\n  public reload(): void {\n    this.dataArray.splice(1, 1)\n    this.dataArray.splice(3, 2)\n    this.notifyDataReload()\n  }\n}\n\n// 导入WaterFlowDataSource类\nimport { WaterFlowDataSource } from './WaterFlowDataSource'\n\n// 定义WaterFlowDemo组件\n@Entry\n@Component\nstruct WaterFlowDemo {\n  // 最小尺寸状态变量\n  @State minSize: number = 80\n  // 最大尺寸状态变量\n  @State maxSize: number = 180\n  // 字体大小状态变量\n  @State fontSize: number = 24\n  // 颜色数组状态变量\n  @State colors: number[] = [0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F]\n  // 滚动控制器\n  scroller: Scroller = new Scroller()\n  // 数据源\n  dataSource: WaterFlowDataSource = new WaterFlowDataSource()\n  // 项目宽度数组\n  private itemWidthArray: number[] = []\n  // 项目高度数组\n  private itemHeightArray: number[] = []\n\n  // 获取随机尺寸\n  getSize() {\n    let ret = Math.floor(Math.random() * this.maxSize)\n    return (ret > this.minSize ? ret : this.minSize)\n  }\n\n  // 设置项目尺寸数组\n  setItemSizeArray() {\n    for (let i = 0; i < 100; i++) {\n      this.itemWidthArray.push(this.getSize())\n      this.itemHeightArray.push(this.getSize())\n    }\n  }\n\n  // 组件即将显示时调用\n  aboutToAppear() {\n    this.setItemSizeArray()\n  }\n\n  // 定义项目底部组件\n  @Builder\n  itemFoot() {\n    Column() {\n      Text(`Footer`)\n        .fontSize(10)\n        .backgroundColor(Color.Red)\n        .width(50)\n        .height(50)\n        .align(Alignment.Center)\n        .margin({ top: 2 })\n    }\n  }\n\n  // 构建组件\n  build() {\n    Column({ space: 2 }) {\n      WaterFlow() {\n        LazyForEach(this.dataSource, (item: number) => {\n          FlowItem() {\n            Column() {\n              Text(\"N\" + item).fontSize(12).height('16')\n\n              Image('res/waterFlowTest(' + item % 5 + ').jpg')\n                .objectFit(ImageFit.Fill)\n                .width('100%')\n                .layoutWeight(1)\n            }\n          }\n          .onAppear(() => {\n            if (item + 20 == this.dataSource.totalCount()) {\n              for (let i = 0; i < 100; i++) {\n                this.dataSource.addLastItem()\n              }\n            }\n          })\n          .width('100%')\n          .height(this.itemHeightArray[item % 100])\n          .backgroundColor(this.colors[item % 5])\n        }, (item: string) => item)\n      }\n      .columnsTemplate(\"1fr 1fr\")\n      .columnsGap(10)\n      .rowsGap(5)\n      .backgroundColor(0xFAEEE0)\n      .width('100%')\n      .height('100%')\n      .onReachStart(() => {\n        console.info('waterFlow reach start')\n      })\n      .onScrollStart(() => {\n        console.info('waterFlow scroll start')\n      })\n      .onScrollStop(() => {\n        console.info('waterFlow scroll stop')\n      })\n      .onScrollFrameBegin((offset: number, state: ScrollState) => {\n        console.info('waterFlow scrollFrameBegin offset: ' + offset + ' state: ' + state.toString())\n        return { offsetRemain: offset }\n      })\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 WaterFlow 布局实现了一个瀑布流展示界面。布局宽度占据整个屏幕，高度设为 100%，内边距为左右 5vp、顶部和底部 10vp。组件的垂直方向上被分为多个部分，每个部分包含一组图片和文本。每个部分的图片以瀑布流布局方式排列，图片之间的间距均匀分布，且对齐方式为居中对齐。\n图片的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。图片组之间通过 WaterFlow 组件进行分隔。图片的功能包括点击事件和状态效果，用户可以通过点击图片触发相应操作，图片也可以在启用或禁用状态下进行展示。\n整个布局通过 WaterFlow 布局保证图片在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// 导入 WaterFlowDataSource 模块\nimport { WaterFlowDataSource } from './WaterFlowDataSource'\n\n// 定义可复用的 WaterFlow 项组件\n@Reusable\n@Component\nstruct ReusableFlowItem {\n  // 定义状态变量 item，用于存储当前项的编号\n  @State item: number = 0\n\n  // 组件即将被复用时调用的方法，用于更新 item 的值\n  aboutToReuse(params: Record<string, number>) {\n    this.item = params.item;\n    console.info('Reuse item:' + this.item)\n  }\n\n  // 组件即将显示时调用的方法，用于记录新项的编号\n  aboutToAppear() {\n    console.info('new item:' + this.item)\n  }\n\n  // 构建组件的 UI 结构\n  build() {\n    // 创建一个 Image 组件，显示指定路径的图片\n    Image('res/waterFlowTest(' + this.item % 5 + ').jpg')\n      // 在图片上方叠加显示文本 'N' + item\n      .overlay('N' + this.item, { align: Alignment.Top })\n      // 设置图片的适应方式为填充\n      .objectFit(ImageFit.Fill)\n      // 设置图片的宽度为 100%\n      .width('100%')\n      // 设置图片的布局权重为 1\n      .layoutWeight(1)\n  }\n}\n\n// 定义入口组件 WaterFlowDemo\n@Entry\n@Component\nstruct WaterFlowDemo {\n  // 定义最小尺寸和最大尺寸\n  minSize: number = 80\n  maxSize: number = 180\n  // 定义字体大小\n  fontSize: number = 24\n  // 定义颜色数组\n  colors: number[] = [0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F]\n  // 定义滚动控制器\n  scroller: Scroller = new Scroller()\n  // 定义数据源\n  dataSource: WaterFlowDataSource = new WaterFlowDataSource()\n  // 获取数据源的总项数\n  dataCount: number = this.dataSource.totalCount()\n  // 定义项高度数组\n  private itemHeightArray: number[] = []\n  // 定义状态变量 sections，用于存储 WaterFlow 的各个部分\n  @State sections: WaterFlowSections = new WaterFlowSections()\n  // 定义部分的外边距\n  sectionMargin: Margin = { top: 10, left: 5, bottom: 10, right: 5 }\n  // 定义单列部分的选项\n  oneColumnSection: SectionOptions = {\n    itemsCount: 4,\n    crossCount: 1,\n    columnsGap: '5vp',\n    rowsGap: 10,\n    margin: this.sectionMargin,\n    onGetItemMainSizeByIndex: (index: number) => {\n      return this.itemHeightArray[index % 100]\n    }\n  }\n  // 定义双列部分的选项\n  twoColumnSection: SectionOptions = {\n    itemsCount: 2,\n    crossCount: 2,\n    onGetItemMainSizeByIndex: (index: number) => {\n      return 100\n    }\n  }\n  // 定义最后一个部分的选项\n  lastSection: SectionOptions = {\n    itemsCount: 20,\n    crossCount: 2,\n    onGetItemMainSizeByIndex: (index: number) => {\n      return this.itemHeightArray[index % 100]\n    }\n  }\n\n  // 获取随机尺寸的方法\n  getSize() {\n    let ret = Math.floor(Math.random() * this.maxSize)\n    return (ret > this.minSize ? ret : this.minSize)\n  }\n\n  // 设置项高度数组的方法\n  setItemSizeArray() {\n    for (let i = 0; i < 100; i++) {\n      this.itemHeightArray.push(this.getSize())\n    }\n  }\n\n  // 组件即将显示时调用的方法\n  aboutToAppear() {\n    // 设置项高度数组\n    this.setItemSizeArray()\n\n    // 定义部分选项数组\n    let sectionOptions: SectionOptions[] = []\n    let count = 0\n    let oneOrTwo = 0\n    // 根据数据源的总项数生成部分选项\n    while (count < this.dataCount) {\n      if (this.dataCount - count < 20) {\n        this.lastSection.itemsCount = this.dataCount - count\n        sectionOptions.push(this.lastSection)\n        break;\n      }\n      if (oneOrTwo++ % 2 == 0) {\n        sectionOptions.push(this.oneColumnSection)\n        count += this.oneColumnSection.itemsCount\n      } else {\n        sectionOptions.push(this.twoColumnSection)\n        count += this.twoColumnSection.itemsCount\n      }\n    }\n    // 将部分选项插入到 sections 中\n    this.sections.splice(0, 0, sectionOptions)\n  }\n\n  // 构建组件的 UI 结构\n  build() {\n    Column({ space: 2 }) {\n      Row() {\n        // 创建一个按钮，点击后更新 sections\n        Button('splice')\n          .height('5%')\n          .onClick(() => {\n            let totalCount: number = this.dataSource.totalCount()\n            let newSection: SectionOptions = {\n              itemsCount: totalCount,\n              crossCount: 2,\n              onGetItemMainSizeByIndex: (index: number) => {\n                return this.itemHeightArray[index % 100]\n              }\n            }\n            let oldLength: number = this.sections.length()\n            this.sections.splice(0, oldLength, [newSection])\n          })\n          .margin({ top: 10, left: 20 })\n        // 创建一个按钮，点击后更新 sections\n        Button('update')\n          .height('5%')\n          .onClick(() => {\n            let newSection: SectionOptions = {\n              itemsCount: 6,\n              crossCount: 3,\n              columnsGap: 5,\n              rowsGap: 10,\n              margin: this.sectionMargin,\n              onGetItemMainSizeByIndex: (index: number) => {\n                return this.itemHeightArray[index % 100]\n              }\n            }\n            this.dataSource.addItem(this.oneColumnSection.itemsCount)\n            this.dataSource.addItem(this.oneColumnSection.itemsCount + 1)\n            this.dataSource.addItem(this.oneColumnSection.itemsCount + 2)\n            this.dataSource.addItem(this.oneColumnSection.itemsCount + 3)\n            const result: boolean = this.sections.update(1, newSection)\n            console.info('update:' + result)\n          })\n          .margin({ top: 10, left: 20 })\n        // 创建一个按钮，点击后删除 sections\n        Button('delete')\n          .height('5%')\n          .onClick(() => {\n            let newSection: SectionOptions = {\n              itemsCount: 2,\n              crossCount: 2,\n              columnsGap: 5,\n              rowsGap: 10,\n              margin: this.sectionMargin,\n              onGetItemMainSizeByIndex: (index: number) => {\n                return this.itemHeightArray[index % 100]\n              }\n            }\n            this.dataSource.deleteItem(this.oneColumnSection.itemsCount)\n            this.dataSource.deleteItem(this.oneColumnSection.itemsCount)\n            this.dataSource.deleteItem(this.oneColumnSection.itemsCount)\n            this.dataSource.deleteItem(this.oneColumnSection.itemsCount)\n            this.sections.update(1, newSection)\n          })\n          .margin({ top: 10, left: 20 })\n        // 创建一个按钮，点击后获取 sections 的值\n        Button('values')\n          .height('5%')\n          .onClick(() => {\n            const sections: Array<SectionOptions> = this.sections.values();\n            for (const value of sections) {\n              console.log(JSON.stringify(value));\n            }\n            console.info('count:' + this.sections.length())\n          })\n          .margin({ top: 10, left: 20 })\n      }.margin({ bottom: 20 })\n\n      // 创建 WaterFlow 组件\n      WaterFlow({ scroller: this.scroller, sections: this.sections }) {\n        // 使用 LazyForEach 遍历数据源\n        LazyForEach(this.dataSource, (item: number) => {\n          FlowItem() {\n            ReusableFlowItem({ item: item })\n          }\n          .width('100%')\n          .backgroundColor(this.colors[item % 5])\n        }, (item: string) => item)\n      }\n      .columnsTemplate('1fr 1fr') \n      .columnsGap(10)\n      .rowsGap(5)\n      .backgroundColor(0xFAEEE0)\n      .width('100%')\n      .height('100%')\n      .layoutWeight(1)\n      .onScrollIndex((first: number, last: number) => {\n        if (last + 20 >= this.dataSource.totalCount()) {\n          for (let i = 0; i < 100; i++) {\n            this.dataSource.addLastItem()\n          }\n          const sections: Array<SectionOptions> = this.sections.values();\n          let newSection: SectionOptions = sections[this.sections.length() - 1];\n          newSection.itemsCount += 100;\n          this.sections.update(-1, newSection);\n        }\n      })\n    }\n  }\n}"
            }
        ]
    },
    "FlowItem": {
        "description": "瀑布流组件的子组件，用来展示瀑布流具体item。仅支持作为Waterflow组件的子组件使用。",
        "details": "该组件从API Version 9开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "FlowItem()",
                "params": {}
            }
        ],
        "attributes": {},
        "events": {},
        "rules": [
            "仅支持作为Waterflow组件的子组件使用。"
        ],
        "examples": [
            {
                "description": "该组件通过 WaterFlow 布局实现了一个瀑布流展示图片的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个列，每列包含多个图片项。每个图片项以垂直布局方式排列，图片之间的间距均匀分布，且对齐方式为居中对齐。\n图片的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。图片项之间通过 WaterFlow 组件进行分隔。图片的功能包括点击事件和状态效果，用户可以通过点击图片触发相应操作，图片也可以在加载或加载完成状态下进行展示。\n整个布局通过 WaterFlow 布局保证图片在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct WaterFlowExample {\n  @State private images: string[] = [\n    'image1.jpg', 'image2.jpg', 'image3.jpg', 'image4.jpg', 'image5.jpg',\n    'image6.jpg', 'image7.jpg', 'image8.jpg', 'image9.jpg', 'image10.jpg'\n  ]; // 图片资源数组\n\n  build() {\n    Column() {\n      WaterFlow({\n        columns: 3, // 设置瀑布流的列数为3\n        spacing: 10 // 设置图片项之间的间距为10vp\n      }) {\n        ForEach(this.images, (image) => {\n          WaterFlowItem() {\n            Image(image)\n              .width('100%') // 图片宽度占据父容器的100%\n              .height(200) // 图片高度固定为200vp\n              .borderRadius(10) // 图片边框圆角为10vp\n              .onClick(() => {\n                console.log(`Image ${image} clicked`); // 图片点击事件\n              })\n          }\n        })\n      }\n      .width('100%') // 瀑布流宽度占据整个屏幕\n      .height('100%') // 瀑布流高度根据内容自适应\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "ScrollBar": {
        "description": "滚动条组件ScrollBar，用于配合可滚动组件使用，如List、Grid、Scroll。可以包含单个子组件。",
        "details": "ScrollBar组件负责定义可滚动区域的行为样式，ScrollBar的子节点负责定义滚动条的行为样式。滚动条组件与可滚动组件通过Scroller进行绑定，且只有当两者方向相同时，才能联动，ScrollBar与可滚动组件仅支持一对一绑定。从API version 12开始，ScrollBar组件没有子节点时，支持显示默认样式的滚动条。",
        "interfaces": [
            {
                "description": "ScrollBar(value: ScrollBarOptions)",
                "params": {
                    "value": {
                        "type": "ScrollBarOptions",
                        "required": true,
                        "description": "滚动条组件参数。"
                    }
                }
            }
        ],
        "attributes": {
            "ScrollBarOptions": {
                "description": "滚动条组件参数对象。",
                "params": {
                    "scroller": {
                        "type": "Scroller",
                        "required": true,
                        "description": "可滚动组件的控制器。用于与可滚动组件进行绑定。"
                    },
                    "direction": {
                        "type": "ScrollBarDirection",
                        "required": false,
                        "description": "滚动条的方向，控制可滚动组件对应方向的滚动。",
                        "default": "ScrollBarDirection.Vertical"
                    },
                    "state": {
                        "type": "BarState",
                        "required": false,
                        "description": "滚动条状态。",
                        "default": "BarState.Auto"
                    }
                }
            }
        },
        "events": {},
        "rules": [
            "ScrollBar组件负责定义可滚动区域的行为样式，ScrollBar的子节点负责定义滚动条的行为样式。",
            "滚动条组件与可滚动组件通过Scroller进行绑定，且只有当两者方向相同时，才能联动，ScrollBar与可滚动组件仅支持一对一绑定。",
            "从API version 12开始，ScrollBar组件没有子节点时，支持显示默认样式的滚动条。"
        ],
        "examples": [
            {
                "description": "该组件通过Column和Stack布局实现了一个带有垂直滚动条的滚动视图。布局宽度占据90%的屏幕宽度，高度根据内容自适应。组件的垂直方向上包含一个滚动视图，滚动视图内部包含一个Flex布局，用于展示一组数字文本。每个数字文本以Row组件的形式展示，文本内容居中对齐，背景颜色为#3366CC，边框圆角为15vp，字体大小为16vp，宽度占据80%的父容器宽度，高度为60vp，上下边距为5vp。滚动视图右侧有一个垂直滚动条，滚动条的状态为自动显示。\n\n组件的样式包括背景颜色、边框圆角、字体大小、文本对齐方式等属性，支持不同的样式展示。组件的功能包括垂直滚动和滚动条的自动显示，用户可以通过滚动视图查看超出屏幕范围的内容。\n\n整个布局通过Column和Stack布局保证内容在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ScrollBarExample {\n  private scroller: Scroller = new Scroller() // 创建一个Scroller对象，用于控制滚动视图的滚动行为\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] // 定义一个数字数组，用于生成滚动视图的内容\n\n  build() {\n    Column() {\n      Stack({ alignContent: Alignment.End }) { // 使用Stack布局，内容对齐方式为右对齐\n        Scroll(this.scroller) { // 创建一个滚动视图，使用scroller对象控制滚动行为\n          Flex({ direction: FlexDirection.Column }) { // 使用Flex布局，方向为垂直方向\n            ForEach(this.arr, (item: number) => { // 遍历数组，生成每个数字的展示内容\n              Row() { // 使用Row组件展示每个数字\n                Text(item.toString()) // 将数字转换为字符串并展示\n                  .width('80%') // 设置文本宽度为父容器的80%\n                  .height(60) // 设置文本高度为60vp\n                  .backgroundColor('#3366CC') // 设置背景颜色为#3366CC\n                  .borderRadius(15) // 设置边框圆角为15vp\n                  .fontSize(16) // 设置字体大小为16vp\n                  .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n                  .margin({ top: 5 }) // 设置上边距为5vp\n              }\n            }, (item: number) => item.toString()) // 使用数字的字符串形式作为唯一标识符\n          }.margin({ right: 15 }) // 设置右侧边距为15vp\n        }\n        .width('90%') // 设置滚动视图宽度为屏幕宽度的90%\n        .scrollBar(BarState.Off) // 设置滚动条状态为关闭（不显示）\n        .scrollable(ScrollDirection.Vertical) // 设置滚动方向为垂直方向\n        ScrollBar({ scroller: this.scroller, direction: ScrollBarDirection.Vertical, state: BarState.Auto }) // 创建一个垂直滚动条，滚动条状态为自动显示\n      }\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Stack 布局实现了一个带有自定义滚动条的垂直滚动列表。布局宽度占据屏幕的 90%，高度由内容决定。组件的垂直方向上包含一个 Scroll 组件和一个自定义的 ScrollBar 组件。Scroll 组件内部嵌套了一个 Flex 布局，用于展示一组数字文本。每个数字文本以 Row 组件的形式展示，宽度为 80%，高度为 60vp，背景颜色为 #3366CC，边框圆角为 15vp，字体大小为 16，文本居中对齐，上下间距为 5vp。\n\nScrollBar 组件位于 Scroll 组件的右侧，宽度为 20vp，背景颜色为 #ededed。ScrollBar 组件内部包含一个 Text 组件，用于模拟滚动条的滑块，宽度为 20vp，高度为 100vp，背景颜色为 #C0C0C0，边框圆角为 10vp。\n\n组件的功能包括垂直滚动列表的展示和自定义滚动条的显示。用户可以通过拖动滚动条或滚动列表来查看隐藏的内容。滚动条的状态为自动显示，当内容超出视图范围时，滚动条会自动出现。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct ScrollBarExample {\n  private scroller: Scroller = new Scroller() // 创建一个 Scroller 对象，用于控制滚动行为\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] // 定义一个数字数组，用于展示滚动列表的内容\n\n  build() {\n    Column() {\n      Stack({ alignContent: Alignment.End }) { // 使用 Stack 布局，将 Scroll 组件和 ScrollBar 组件堆叠在一起，对齐方式为右对齐\n        Scroll(this.scroller) { // 创建一个 Scroll 组件，使用 scroller 对象控制滚动行为\n          Flex({ direction: FlexDirection.Column }) { // 使用 Flex 布局，方向为垂直方向\n            ForEach(this.arr, (item: number) => { // 遍历数组，生成每个数字的展示组件\n              Row() {\n                Text(item.toString()) // 创建一个 Text 组件，显示当前数字\n                  .width('80%') // 设置 Text 组件的宽度为 80%\n                  .height(60) // 设置 Text 组件的高度为 60vp\n                  .backgroundColor('#3366CC') // 设置 Text 组件的背景颜色为 #3366CC\n                  .borderRadius(15) // 设置 Text 组件的边框圆角为 15vp\n                  .fontSize(16) // 设置 Text 组件的字体大小为 16\n                  .textAlign(TextAlign.Center) // 设置 Text 组件的文本居中对齐\n                  .margin({ top: 5 }) // 设置 Text 组件的上边距为 5vp\n              }\n            }, (item: number) => item.toString()) // 使用数字的字符串形式作为唯一标识符\n          }.margin({ right: 15 }) // 设置 Flex 组件的右边距为 15vp\n        }\n        .width('90%') // 设置 Scroll 组件的宽度为 90%\n        .scrollBar(BarState.Off) // 设置 Scroll 组件的默认滚动条状态为关闭\n        .scrollable(ScrollDirection.Vertical) // 设置 Scroll 组件的滚动方向为垂直方向\n\n        ScrollBar({ scroller: this.scroller, direction: ScrollBarDirection.Vertical, state: BarState.Auto }) { // 创建一个自定义的 ScrollBar 组件，使用 scroller 对象控制滚动行为，方向为垂直方向，状态为自动显示\n          Text() // 创建一个 Text 组件，用于模拟滚动条的滑块\n            .width(20) // 设置 Text 组件的宽度为 20vp\n            .height(100) // 设置 Text 组件的高度为 100vp\n            .borderRadius(10) // 设置 Text 组件的边框圆角为 10vp\n            .backgroundColor('#C0C0C0') // 设置 Text 组件的背景颜色为 #C0C0C0\n        }.width(20).backgroundColor('#ededed') // 设置 ScrollBar 组件的宽度为 20vp，背景颜色为 #ededed\n      }\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Refresh": {
        "description": "可以进行页面下拉操作并显示刷新动效的容器组件。可以包含单个子组件。",
        "details": null,
        "interfaces": [
            {
                "description": "Refresh(value: RefreshOptions)",
                "params": {
                    "value": {
                        "type": "RefreshOptions",
                        "required": true,
                        "description": "刷新选项对象。"
                    }
                }
            }
        ],
        "attributes": {
            "refreshing": {
                "description": "当前组件是否正在刷新。",
                "params": {
                    "refreshing": {
                        "type": "boolean",
                        "required": true,
                        "description": "当前组件是否正在刷新。",
                        "default": false
                    }
                }
            },
            "offset": {
                "description": "下拉起点距离组件顶部的距离。",
                "params": {
                    "offset": {
                        "type": [
                            "string",
                            "number"
                        ],
                        "required": false,
                        "description": "下拉起点距离组件顶部的距离。",
                        "default": 16
                    }
                }
            },
            "friction": {
                "description": "下拉摩擦系数，取值范围为0到100。",
                "params": {
                    "friction": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": false,
                        "description": "下拉摩擦系数，取值范围为0到100。",
                        "default": 62
                    }
                }
            },
            "builder": {
                "description": "自定义刷新区域显示内容。",
                "params": {
                    "builder": {
                        "type": "CustomBuilder",
                        "required": false,
                        "description": "自定义刷新区域显示内容。"
                    }
                }
            },
            "promptText": {
                "description": "设置刷新区域底部显示的自定义文本。",
                "params": {
                    "promptText": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "设置刷新区域底部显示的自定义文本。"
                    }
                }
            },
            "refreshOffset": {
                "description": "设置触发刷新的下拉偏移量。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "下拉偏移量，单位vp。",
                        "default": 64
                    }
                }
            },
            "pullToRefresh": {
                "description": "设置当下拉距离超过refreshOffset时是否触发刷新。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否触发刷新。",
                        "default": true
                    }
                }
            },
            "pullDownRatio": {
                "description": "设置下拉跟手系数。",
                "params": {
                    "ratio": {
                        "type": "Optional<number>",
                        "required": true,
                        "description": "下拉跟手系数。",
                        "default": null
                    }
                }
            }
        },
        "events": {
            "onStateChange": {
                "description": "当前刷新状态变更时，触发回调。",
                "params": {
                    "state": {
                        "type": "RefreshStatus",
                        "required": true,
                        "description": "当前刷新状态。"
                    }
                }
            },
            "onRefreshing": {
                "description": "进入刷新状态时触发回调。",
                "params": {}
            },
            "onOffsetChange": {
                "description": "下拉距离发生变化时触发回调。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "下拉距离。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件实现了一个带有下拉刷新功能的列表界面。布局宽度占据整个屏幕，高度设为 100%，背景颜色为浅蓝色（0x89CFF0）。组件的垂直方向上包含一个刷新区域和一个列表区域。刷新区域支持下拉刷新操作，当用户下拉列表时，会触发刷新状态，并在刷新完成后自动恢复。\n列表区域使用 List 组件展示数据，数据源为一个字符串数组。每个列表项包含一个居中对齐的文本组件，文本内容为数组中的元素。列表项的宽度为 70%，高度为 80vp，背景颜色为白色（0xFFFFFF），边框圆角为 10vp，字体大小为 16vp，内边距为 10vp。列表项在列表中居中对齐，列表的滚动条被隐藏。\n刷新区域的下拉刷新功能通过 Refresh 组件实现，支持下拉刷新操作，并在刷新过程中触发相应的事件回调。刷新区域的偏移量为 64vp，允许用户下拉以触发刷新操作。",
                "code": "@Entry\n@Component\nstruct RefreshExample {\n  @State isRefreshing: boolean = false // 状态变量，用于控制刷新状态\n  @State arr: String[] = ['0', '1', '2', '3', '4','5','6','7','8','9','10'] // 数据源数组，用于展示列表项\n\n  build() {\n    Column() {\n      Refresh({ refreshing: $$this.isRefreshing }) { // 创建刷新区域，绑定刷新状态\n        List() {\n          ForEach(this.arr, (item: string) => { // 遍历数据源数组，生成列表项\n            ListItem() {\n              Text('' + item) // 创建文本组件，显示数组元素\n                .width('70%') // 设置文本组件宽度为 70%\n                .height(80) // 设置文本组件高度为 80vp\n                .fontSize(16) // 设置文本字体大小为 16vp\n                .margin(10) // 设置文本组件内边距为 10vp\n                .textAlign(TextAlign.Center) // 设置文本居中对齐\n                .borderRadius(10) // 设置文本组件边框圆角为 10vp\n                .backgroundColor(0xFFFFFF) // 设置文本组件背景颜色为白色（0xFFFFFF）\n            }\n          }, (item: string) => item) // 使用数组元素作为列表项的唯一标识\n        }\n        .onScrollIndex((first: number) => { // 监听列表滚动事件，输出当前第一个可见项的索引\n          console.info(first.toString())\n        })\n        .width('100%') // 设置列表宽度为 100%\n        .height('100%') // 设置列表高度为 100%\n        .alignListItem(ListItemAlign.Center) // 设置列表项居中对齐\n        .scrollBar(BarState.Off) // 隐藏列表滚动条\n      }\n      .onStateChange((refreshStatus: RefreshStatus) => { // 监听刷新状态变化事件，输出当前刷新状态\n        console.info('Refresh onStatueChange state is ' + refreshStatus)\n      })\n      .onOffsetChange((value: number) => { // 监听刷新区域偏移量变化事件，输出当前偏移量\n        console.info('Refresh onOffsetChange offset:' + value)\n      })\n      .onRefreshing(() => { // 监听刷新事件，触发刷新操作\n        setTimeout(() => {\n          this.isRefreshing = false // 2 秒后结束刷新状态\n        }, 2000)\n        console.log('onRefreshing test') // 输出刷新测试信息\n      })\n      .backgroundColor(0x89CFF0) // 设置刷新区域背景颜色为浅蓝色（0x89CFF0）\n      .refreshOffset(64) // 设置刷新区域偏移量为 64vp\n      .pullToRefresh(true) // 启用下拉刷新功能\n    }\n  }\n}"
            },
            {
                "description": "该组件实现了一个带有自定义刷新区域的列表界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上包含一个刷新区域和一个列表区域。刷新区域通过自定义的 `customRefreshComponent` 组件实现，显示一个加载进度条和文本 \"Refreshing...\"。列表区域包含一个 `List` 组件，展示一个字符串数组 `arr` 的内容。每个列表项显示一个文本，文本内容为数组中的元素。列表项的样式包括背景颜色、边框圆角、宽度和高度等属性。列表项之间通过 `ListItem` 组件进行分隔。\n\n刷新区域的功能包括在用户下拉时显示自定义的刷新组件，并在刷新完成后隐藏。列表区域的功能包括滚动事件监听和刷新状态监听。用户可以通过下拉列表触发刷新操作，刷新操作完成后，列表会重新加载数据。\n\n整个布局通过 `Column` 布局保证刷新区域和列表区域在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct RefreshExample {\n  @State isRefreshing: boolean = false // 状态变量，用于控制刷新状态\n  @State arr: String[] = ['0', '1', '2', '3', '4','5','6','7','8','9','10'] // 数据源数组，用于列表展示\n\n  @Builder\n  customRefreshComponent() {\n    Stack() {\n      Row() {\n        LoadingProgress().height(32) // 加载进度条组件，高度为 32vp\n        Text(\"Refreshing...\").fontSize(16).margin({left:20}) // 文本组件，显示 \"Refreshing...\"，字体大小为 16，左边距为 20vp\n      }\n      .alignItems(VerticalAlign.Center) // 子组件垂直居中对齐\n    }\n    .align(Alignment.Center) // 组件整体居中对齐\n    .clip(true) // 开启裁剪，防止内容溢出\n    .constraintSize({minHeight:32}) // 最小高度为 32vp\n    .width(\"100%\") // 宽度占据父容器的 100%\n  }\n\n  build() {\n    Column() {\n      Refresh({ refreshing: $$this.isRefreshing, builder: this.customRefreshComponent() }) { // 刷新组件，绑定刷新状态和自定义刷新区域\n        List() {\n          ForEach(this.arr, (item: string) => { // 遍历数组，生成列表项\n            ListItem() {\n              Text('' + item) // 文本组件，显示数组元素\n                .width('70%').height(80).fontSize(16).margin(10) // 宽度为父容器的 70%，高度为 80vp，字体大小为 16，外边距为 10vp\n                .textAlign(TextAlign.Center).borderRadius(10).backgroundColor(0xFFFFFF) // 文本居中对齐，边框圆角为 10vp，背景颜色为白色\n            }\n          }, (item: string) => item) // 列表项的唯一标识\n        }\n        .onScrollIndex((first: number) => { // 监听列表滚动事件\n          console.info(first.toString()) // 打印当前第一个可见项的索引\n        })\n        .width('100%') // 宽度占据父容器的 100%\n        .height('100%') // 高度占据父容器的 100%\n        .alignListItem(ListItemAlign.Center) // 列表项居中对齐\n        .scrollBar(BarState.Off) // 隐藏滚动条\n      }\n      .backgroundColor(0x89CFF0) // 背景颜色为浅蓝色\n      .pullToRefresh(true) // 开启下拉刷新功能\n      .refreshOffset(64) // 刷新区域的偏移量为 64vp\n      .onStateChange((refreshStatus: RefreshStatus) => { // 监听刷新状态变化事件\n        console.info('Refresh onStatueChange state is ' + refreshStatus) // 打印当前刷新状态\n      })\n      .onRefreshing(() => { // 监听刷新事件\n        setTimeout(() => {\n          this.isRefreshing = false // 2 秒后结束刷新状态\n        }, 2000)\n        console.log('onRefreshing test') // 打印刷新事件触发日志\n      })\n    }\n  }\n}"
            },
            {
                "description": "该组件实现了一个带有下拉刷新功能的列表界面。布局宽度占据整个屏幕，高度设为 100%，背景颜色为浅蓝色（0x89CFF0）。组件的垂直方向上包含一个刷新区域和一个列表区域。\n\n刷新区域通过 `Refresh` 组件实现，支持下拉刷新功能。刷新区域的提示文本通过 `promptText` 参数设置，默认显示 \"Refreshing...\"。刷新区域的高度为 96vp，当用户下拉时，会触发 `onOffsetChange` 事件，记录下拉的偏移量。当用户完成下拉操作并触发刷新时，会触发 `onRefreshing` 事件，并在 2 秒后自动结束刷新状态。\n\n列表区域通过 `List` 组件实现，包含多个 `ListItem` 组件，每个 `ListItem` 组件显示一个数字字符串。列表的宽度占据整个屏幕，高度设为 100%，列表项的对齐方式为居中对齐，且不显示滚动条。列表项的样式包括背景颜色为白色（0xFFFFFF），边框圆角为 10vp，宽度为 70%，高度为 80vp，字体大小为 16vp，内边距为 10vp，文本居中对齐。\n\n整个布局通过 `Column` 组件实现，确保刷新区域和列表区域在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct RefreshExample {\n  @State isRefreshing: boolean = false // 控制刷新状态的布尔值，初始值为 false\n  @State promptText: string = \"Refreshing...\" // 刷新区域的提示文本，初始值为 \"Refreshing...\"\n  @State arr: String[] = ['0', '1', '2', '3', '4','5','6','7','8','9','10'] // 列表数据源，包含 11 个数字字符串\n\n  build() {\n    Column() {\n      Refresh({ refreshing: $$this.isRefreshing, promptText: this.promptText}) { // 创建刷新区域，绑定刷新状态和提示文本\n        List() {\n          ForEach(this.arr, (item: string) => { // 遍历数据源，生成列表项\n            ListItem() {\n              Text('' + item) // 显示列表项的文本内容\n                .width('70%') // 设置文本宽度为 70%\n                .height(80) // 设置文本高度为 80vp\n                .fontSize(16) // 设置字体大小为 16vp\n                .margin(10) // 设置内边距为 10vp\n                .textAlign(TextAlign.Center) // 设置文本居中对齐\n                .borderRadius(10) // 设置边框圆角为 10vp\n                .backgroundColor(0xFFFFFF) // 设置背景颜色为白色（0xFFFFFF）\n            }\n          }, (item: string) => item) // 列表项的唯一标识符为 item 本身\n        }\n        .onScrollIndex((first: number) => { // 监听列表滚动事件，输出当前第一个可见项的索引\n          console.info(first.toString())\n        })\n        .width('100%') // 设置列表宽度为 100%\n        .height('100%') // 设置列表高度为 100%\n        .alignListItem(ListItemAlign.Center) // 设置列表项居中对齐\n        .scrollBar(BarState.Off) // 隐藏滚动条\n      }\n      .backgroundColor(0x89CFF0) // 设置刷新区域的背景颜色为浅蓝色（0x89CFF0）\n      .pullToRefresh(true) // 启用下拉刷新功能\n      .refreshOffset(96) // 设置刷新区域的偏移量为 96vp\n      .onStateChange((refreshStatus: RefreshStatus) => { // 监听刷新状态变化事件，输出当前刷新状态\n        console.info('Refresh onStatueChange state is ' + refreshStatus)\n      })\n      .onOffsetChange((value: number) => { // 监听下拉偏移量变化事件，输出当前偏移量\n        console.info('Refresh onOffsetChange offset:' + value)\n      })\n      .onRefreshing(() => { // 监听刷新事件，2 秒后自动结束刷新状态\n        setTimeout(() => {\n          this.isRefreshing = false\n        }, 2000)\n        console.log('onRefreshing test')\n      })\n    }\n  }\n}"
            },
            {
                "description": "该组件实现了一个带有边界刷新回弹效果的列表界面。布局宽度占据整个屏幕，高度设为 100%，背景颜色为 0xDCDCDC。组件的垂直方向上包含一个刷新指示器和一个列表，列表中包含多个列表项和一个加载指示器。\n\n刷新指示器通过 Stack 组件实现，高度和宽度均为 100%，内容对齐方式为底部对齐。刷新指示器中包含一个 Progress 组件，用于显示刷新进度。Progress 组件的宽度为 32vp，高度为 32vp，样式根据刷新状态动态变化。\n\n列表通过 List 组件实现，包含多个 ListItem 组件，每个 ListItem 组件中包含一个 Text 组件，用于显示列表项的内容。列表项的宽度为 100%，高度为 80vp，字体大小为 16vp，文本居中对齐，背景颜色为白色，边框宽度为 1vp。\n\n加载指示器通过 Row 组件实现，宽度为 100%，高度为 64vp，内容居中对齐。加载指示器中包含一个 LoadingProgress 组件和一个 Text 组件，用于显示加载进度和加载中的文字。加载指示器的可见性根据加载状态动态变化。\n\n组件的功能包括边界刷新回弹效果、列表滚动加载数据、刷新状态的动态变化等。通过 onScrollIndex 和 onScrollFrameBegin 事件监听列表的滚动状态，实现数据的动态加载。通过 onOffsetChange 和 onStateChange 事件监听刷新状态的变化，实现刷新指示器的动态显示。",
                "code": "@Entry\n@Component\nstruct ListRefreshLoad {\n  @State arr: Array<number> = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // 列表数据\n  @State refreshing: boolean = false; // 刷新状态\n  @State refreshOffset: number = 0; // 刷新偏移量\n  @State refreshState: RefreshStatus = RefreshStatus.Inactive; // 刷新状态枚举\n  @State canLoad: boolean = false; // 是否可以加载更多数据\n  @State isLoading: boolean = false; // 是否正在加载数据\n\n  @Builder\n  refreshBuilder() {\n    Stack({ alignContent: Alignment.Bottom }) {\n      // 当刷新状态不为 Inactive 和 Done 时，显示刷新进度\n      if (this.refreshState != RefreshStatus.Inactive && this.refreshState != RefreshStatus.Done) {\n        Progress({ value: this.refreshOffset, total: 64, type: ProgressType.Ring })\n          .width(32).height(32) // 进度条的宽度和高度\n          .style({ status: this.refreshing ? ProgressStatus.LOADING : ProgressStatus.PROGRESSING }) // 进度条的样式\n          .margin(10) // 进度条的边距\n      }\n    }\n    .clip(true) // 裁剪超出部分\n    .height(\"100%\") // 高度为 100%\n    .width(\"100%\") // 宽度为 100%\n  }\n\n  @Builder\n  footer() {\n    Row() {\n      LoadingProgress().height(32).width(48) // 加载进度条的宽度和高度\n      Text(\"加载中\") // 加载中的文字\n    }.width(\"100%\") // 宽度为 100%\n    .height(64) // 高度为 64vp\n    .justifyContent(FlexAlign.Center) // 内容居中对齐\n    .visibility(this.isLoading ? Visibility.Visible : Visibility.Hidden) // 根据加载状态显示或隐藏\n  }\n\n  build() {\n    Refresh({ refreshing: $$this.refreshing, builder: this.refreshBuilder() }) {\n      List() {\n        ForEach(this.arr, (item: number) => {\n          ListItem() {\n            Text('' + item)\n              .width('100%') // 宽度为 100%\n              .height(80) // 高度为 80vp\n              .fontSize(16) // 字体大小为 16vp\n              .textAlign(TextAlign.Center) // 文本居中对齐\n              .backgroundColor(0xFFFFFF) // 背景颜色为白色\n          }.borderWidth(1) // 边框宽度为 1vp\n        }, (item: string) => item)\n\n        ListItem() {\n          this.footer(); // 加载指示器\n        }\n      }\n      .onScrollIndex((start: number, end: number) => {\n        // 当可以加载更多数据且滚动到列表末尾时，加载更多数据\n        if (this.canLoad && end >= this.arr.length - 1) {\n          this.canLoad = false;\n          this.isLoading = true;\n\n          setTimeout(() => {\n            for (let i = 0; i < 10; i++) {\n              this.arr.push(this.arr.length);\n              this.isLoading = false;\n            }\n          }, 700) // 模拟加载延迟\n        }\n      })\n      .onScrollFrameBegin((offset: number, state: ScrollState) => {\n        // 当滚动偏移量大于 5 且不在加载状态时，允许加载更多数据\n        if (offset > 5 && !this.isLoading) {\n          this.canLoad = true;\n        }\n        return { offsetRemain: offset };\n      })\n      .scrollBar(BarState.Off) // 关闭滚动条\n      .edgeEffect(EdgeEffect.Spring, { alwaysEnabled: true }) // 启用边界刷新回弹效果\n    }\n    .width('100%') // 宽度为 100%\n    .height('100%') // 高度为 100%\n    .backgroundColor(0xDCDCDC) // 背景颜色为 0xDCDCDC\n    .onOffsetChange((offset: number) => {\n      this.refreshOffset = offset; // 更新刷新偏移量\n    })\n    .onStateChange((state: RefreshStatus) => {\n      this.refreshState = state; // 更新刷新状态\n    })\n    .onRefreshing(() => {\n      setTimeout(() => {\n        this.refreshing = false; // 模拟刷新完成\n      }, 2000) // 模拟刷新延迟\n    })\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "ComposeListItem": {
        "description": "列表包含一系列相同宽度的列表项。内容包括适合连续、多行呈现同类数据的组合，例如图片和文本。",
        "details": "该组件从API Version 10开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "ComposeListItem({contentItem?: ContentItem, operateItem?: OperateItem})",
                "params": {
                    "contentItem": {
                        "type": "ContentItem",
                        "required": false,
                        "description": "定义左侧以及中间元素。"
                    },
                    "operateItem": {
                        "type": "OperateItem",
                        "required": false,
                        "description": "定义右侧元素。"
                    }
                }
            }
        ],
        "attributes": {
            "contentItem": {
                "description": "定义左侧以及中间元素。",
                "params": {
                    "iconStyle": {
                        "type": "IconType",
                        "required": false,
                        "description": "左侧元素的图标样式。"
                    },
                    "icon": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "左侧元素的图标资源。"
                    },
                    "primaryText": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "中间元素的标题内容。文字处理规则：只显示一行文字，超出内容以“...”显示。"
                    },
                    "secondaryText": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "中间元素的副标题内容。文字处理规则：只显示一行文字，超出内容以“...”显示。"
                    },
                    "description": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "中间元素的描述内容。文字处理规则：只显示一行文字，超出内容以“...”显示。"
                    }
                }
            },
            "operateItem": {
                "description": "定义右侧元素。",
                "params": {
                    "arrow": {
                        "type": "OperateIcon",
                        "required": false,
                        "description": "右侧元素为箭头，大小为12*24dp。"
                    },
                    "icon": {
                        "type": "OperateIcon",
                        "required": false,
                        "description": "右侧元素的第一个图标，大小为24*24dp。"
                    },
                    "subIcon": {
                        "type": "OperateIcon",
                        "required": false,
                        "description": "右侧元素的第二个图标，大小为24*24dp。"
                    },
                    "button": {
                        "type": "OperateButton",
                        "required": false,
                        "description": "右侧元素为按钮。"
                    },
                    "switch": {
                        "type": "OperateCheck",
                        "required": false,
                        "description": "右侧元素为开关。"
                    },
                    "checkbox": {
                        "type": "OperateCheck",
                        "required": false,
                        "description": "右侧元素为多选框，大小为24*24dp。"
                    },
                    "radio": {
                        "type": "OperateCheck",
                        "required": false,
                        "description": "右侧元素为单选，大小为24*24dp。"
                    },
                    "image": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "右侧元素为图片，大小为48*48dp。"
                    },
                    "text": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "右侧元素为文字。"
                    }
                }
            }
        },
        "events": {
            "onClick": {
                "description": "点击事件。",
                "params": {}
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该示例通过使用 `ComposeListItem` 组件展示了一个包含左侧和右侧元素的列表项。布局上，该组件采用垂直布局，包含一个 `List` 组件，其中嵌套了一个 `ListItem` 组件。`ComposeListItem` 组件内部包含了两个主要部分：`contentItem` 和 `operateItem`。\n\n`contentItem` 部分位于列表项的左侧，包含一个图标、主文本、辅助文本和描述内容。图标使用系统资源 `sys.media.ohos_app_icon`，主文本为“双行列表”，辅助文本为“辅助文字”，描述内容为“描述内容文字”。图标的样式为 `IconType.NORMAL_ICON`，表示这是一个普通图标。\n\n`operateItem` 部分位于列表项的右侧，包含一个图标和一个文本。图标同样使用系统资源 `sys.media.ohos_app_icon`，并且设置了点击事件，点击后会弹出一个提示框显示“icon”。右侧文本为“右侧文本”。\n\n整个布局通过 `Column` 组件实现垂直排列，确保列表项在垂直方向上有序排列。组件的样式和外观通过 `ComposeListItem` 的属性进行配置，图标和文本的排列和嵌套关系通过 `ComposeListItem` 的内部结构实现。组件的功能包括点击事件，用户可以通过点击图标触发相应操作。",
                "code": "// 导入所需的模块和组件\nimport { IconType, ComposeListItem, promptAction } from '@kit.ArkUI';\n\n// 定义一个名为 `ComposeListItemExample` 的组件，并将其标记为入口组件\n@Entry\n@Component\nstruct ComposeListItemExample {\n  // 构建组件的 UI 结构\n  build() {\n    // 使用 `Column` 组件实现垂直布局\n    Column() {\n      // 使用 `List` 组件创建一个列表\n      List() {\n        // 使用 `ListItem` 组件创建一个列表项\n        ListItem() {\n          // 使用 `ComposeListItem` 组件创建一个包含左侧和右侧元素的列表项\n          ComposeListItem({\n            // 定义左侧的内容部分\n            contentItem: ({\n              // 设置图标的样式为普通图标\n              iconStyle: IconType.NORMAL_ICON,\n              // 设置图标为系统资源 `sys.media.ohos_app_icon`\n              icon: $r('sys.media.ohos_app_icon'),\n              // 设置主文本为“双行列表”\n              primaryText: '双行列表',\n              // 设置辅助文本为“辅助文字”\n              secondaryText: '辅助文字',\n              // 设置描述内容为“描述内容文字”\n              description: '描述内容文字'\n            }),\n            // 定义右侧的操作部分\n            operateItem: ({\n              // 设置右侧图标为系统资源 `sys.media.ohos_app_icon`\n              icon: {\n                value: $r('sys.media.ohos_app_icon'),\n                // 设置图标的点击事件，点击后弹出提示框显示“icon”\n                action: () => {\n                  promptAction.showToast({ message: 'icon' });\n                }\n              },\n              // 设置右侧文本为“右侧文本”\n              text: '右侧文本'\n            })\n          })\n        }\n      }\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "GridObjectSortComponent": {
        "description": "网格对象的编辑排序组件，用于网格对象的编辑、拖动排序、新增和删除。",
        "details": null,
        "interfaces": [
            {
                "description": "GridObjectSortComponent({options: GridObjectSortComponentOptions, dataList: Array<GridObjectSortComponentItem>, onSave: (select: Array<GridObjectSortComponentItem>, unselect: Array<GridObjectSortComponentItem>) => void, onCancel: () => void })",
                "params": {
                    "options": {
                        "type": "GridObjectSortComponentOptions",
                        "required": true,
                        "description": "组件配置信息。"
                    },
                    "dataList": {
                        "type": "Array<GridObjectSortComponentItem>",
                        "required": true,
                        "description": "传入的数据，最大长度为50，数据长度超过50，只会取前50的数据。"
                    },
                    "onSave": {
                        "type": "(select: Array<GridObjectSortComponentItem>, unselect: Array<GridObjectSortComponentItem>) => void",
                        "required": true,
                        "description": "保存编辑排序的回调函数，返回编辑后的数据。"
                    },
                    "onCancel": {
                        "type": "() => void",
                        "required": true,
                        "description": "取消保存数据的回调。"
                    }
                }
            }
        ],
        "attributes": {
            "options": {
                "description": "组件配置信息。",
                "params": {
                    "type": {
                        "type": "GridObjectSortComponentType",
                        "required": false,
                        "description": "组件展示形态：文字|图片+文字。",
                        "default": "GridObjectSortComponentType.text"
                    },
                    "imageSize": {
                        "type": [
                            "number",
                            "Resource"
                        ],
                        "required": false,
                        "description": "图片的尺寸。",
                        "default": 56
                    },
                    "normalTitle": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "未编辑状态下显示的标题。",
                        "default": "频道"
                    },
                    "showAreaTitle": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "展示区域标题，第一个子标题。",
                        "default": "长按拖动排序"
                    },
                    "addAreaTitle": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "添加区域标题，第二个子标题。",
                        "default": "点击添加"
                    },
                    "editTitle": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "编辑状态下头部标题显示。",
                        "default": "编辑"
                    }
                }
            },
            "dataList": {
                "description": "传入的数据，最大长度为50，数据长度超过50，只会取前50的数据。",
                "params": {
                    "id": {
                        "type": [
                            "string",
                            "number"
                        ],
                        "required": true,
                        "description": "数据id序号，不可重复。"
                    },
                    "text": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "显示文本信息。"
                    },
                    "selected": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否已经被添加，添加：true，未添加：false。"
                    },
                    "url": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "GridObjectSortComponentType类型为IMAGE_TEXT时，需要传入图片地址。"
                    },
                    "order": {
                        "type": "number",
                        "required": true,
                        "description": "顺序序号。"
                    }
                }
            }
        },
        "events": {
            "onSave": {
                "description": "保存编辑排序的回调函数，返回编辑后的数据。",
                "params": {
                    "select": {
                        "type": "Array<GridObjectSortComponentItem>",
                        "required": true,
                        "description": "编辑后的已选择数据。"
                    },
                    "unselect": {
                        "type": "Array<GridObjectSortComponentItem>",
                        "required": true,
                        "description": "编辑后的未选择数据。"
                    }
                }
            },
            "onCancel": {
                "description": "取消保存数据的回调。",
                "params": {}
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过GridObjectSortComponent实现了一个可排序的网格布局，用于展示和管理一组带有图标和文本的选项。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个GridObjectSortComponent组件，该组件内部通过网格布局方式排列多个GridObjectSortComponentItem项。每个项包含一个图标和一个文本标签，图标和文本标签的排列方式为水平布局，对齐方式为居中对齐。\n\n组件的样式包括图标的大小、文本的字体大小和颜色等属性。图标的大小通过imageSize属性设置为45vp，文本的字体大小和颜色未明确指定，但可以通过GridObjectSortComponentOptions进行自定义。组件的排列和嵌套关系通过GridObjectSortComponent组件的options和dataList属性进行配置，options属性用于设置组件的显示模式和标题文本，dataList属性用于设置组件的数据源。\n\n组件的功能包括长按拖动排序、点击添加和编辑模式切换。用户可以通过长按某个项并拖动来改变其顺序，点击某个项可以将其添加到选中区域或从选中区域移除。组件还支持编辑模式的切换，用户可以在编辑模式下对项进行排序和选择。组件的事件包括onSave和onCancel，分别在保存和取消编辑时触发。",
                "code": "import { GridObjectSortComponent, GridObjectSortComponentItem, GridObjectSortComponentOptions, GridObjectSortComponentType } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct Index {\n  // 定义一个状态变量dataList，用于存储网格布局的数据源\n  @State dataList: GridObjectSortComponentItem[] = [\n    {\n      id: 0,\n      url: $r('app.media.ic_controlcenter_location_filled'), // 图标资源路径\n      text: '位置信息', // 文本标签\n      selected: true, // 是否选中\n      order: 3 // 排序顺序\n    },\n    {\n      id: 1,\n      url: $r('app.media.ic_controlcenter_mobiledata_filled'),\n      text: '移动数据',\n      selected: true,\n      order: 9\n    },\n    {\n      id: 2,\n      url: $r('app.media.ic_controlcenter_nfc_filled'),\n      text: 'NFC',\n      selected: false,\n      order: 1\n    },\n    {\n      id: 3,\n      url: $r('app.media.ic_controlcenter_ring_off_filled'),\n      text: '响铃关闭',\n      selected: true,\n      order: 4\n    },\n    {\n      id: 4,\n      url: $r('app.media.ic_controlcenter_ring_on_filled'),\n      text: '响铃',\n      selected: false,\n      order: 5\n    },\n    {\n      id: 5,\n      url: $r('app.media.ic_controlcenter_ultra_power_saver_filled'),\n      text: '低电量模式',\n      selected: true,\n      order: 6\n    },\n    {\n      id: 6,\n      url: $r('app.media.ic_controlcenter_screenshot_filled'),\n      text: '截屏',\n      selected: true,\n      order: 7\n    },\n    {\n      id: 7,\n      url: $r('app.media.ic_controlcenter_screen_recording_filled'),\n      text: '屏幕录制',\n      selected: true,\n      order: 8\n    },\n    {\n      id: 8,\n      url: $r('app.media.ic_controlcenter_super_power_saver_filled'),\n      text: '超级省电',\n      selected: false,\n      order: 9\n    },\n  ]\n\n  // 定义一个状态变量option，用于存储网格布局的配置选项\n  @State option: GridObjectSortComponentOptions = {\n    type: GridObjectSortComponentType.IMAGE_TEXT, // 组件类型，此处为图标+文本\n    imageSize: 45, // 图标大小，单位为vp\n    normalTitle: '菜单', // 正常模式下的标题\n    editTitle: '编辑', // 编辑模式下的标题\n    showAreaTitle: '长按拖动排序', // 显示区域的标题\n    addAreaTitle: '点击添加' // 添加区域的标题\n  }\n\n  build() {\n    Column() {\n      // 创建GridObjectSortComponent组件，传入配置选项和数据源\n      GridObjectSortComponent({\n        options: this.option, // 配置选项\n        dataList: this.dataList, // 数据源\n        onSave: (\n          select: Array<GridObjectSortComponentItem>, // 选中项数组\n          unselect: Array<GridObjectSortComponentItem> // 未选中项数组\n        ) => {\n          // 保存操作的回调函数\n          // save ToDo\n        },\n        onCancel: () => {\n          // 取消操作的回调函数\n          // cancel ToDo\n        }\n      })\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "SwipeRefresher": {
        "description": "SwipeRefresher 组件用于在内容加载时显示加载状态，常用于衔接展示下拉加载的内容。",
        "details": "该组件及其子组件从 API Version 10 开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "SwipeRefresher({content?: string, isLoading: boolean})",
                "params": {
                    "content": {
                        "type": "string",
                        "required": false,
                        "description": "内容加载时显示的文本。"
                    },
                    "isLoading": {
                        "type": "boolean",
                        "required": true,
                        "description": "当前是否正在加载。isLoading为true时，表示正在加载；isLoading为false时，表示未在加载。"
                    }
                }
            }
        ],
        "attributes": {
            "SwipeRefresher": {
                "description": "SwipeRefresher 组件的属性。",
                "params": {
                    "content": {
                        "type": "string",
                        "required": false,
                        "description": "内容加载时显示的文本。"
                    },
                    "isLoading": {
                        "type": "boolean",
                        "required": true,
                        "description": "当前是否正在加载。isLoading为true时，表示正在加载；isLoading为false时，表示未在加载。"
                    }
                }
            }
        },
        "events": {
            "onSwipe": {
                "description": "当用户进行滑动操作时触发的事件。",
                "params": {}
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该示例展示了如何使用 `SwipeRefresher` 组件实现下拉刷新功能。布局上，`SwipeRefresher` 组件被嵌套在 `Column` 布局中，形成垂直排列的刷新组件。每个 `SwipeRefresher` 组件的宽度占据父容器的宽度，高度根据内容自动调整。组件的样式和外观通过 `content` 属性设置显示的文本内容，并通过 `isLoading` 属性控制刷新状态的显示。组件的排列和嵌套关系为垂直布局，每个 `SwipeRefresher` 组件依次排列。组件的功能和交互主要体现在下拉刷新的动画效果和状态切换。",
                "code": "import { SwipeRefresher } from '@kit.ArkUI'; // 导入 SwipeRefresher 组件\n\n@Entry // 标记该组件为入口组件\n@Component // 标记该结构体为组件\nstruct Index {\n  build() {\n    Column() { // 创建一个垂直布局的容器\n      SwipeRefresher({\n        content: '正在加载中', // 设置刷新组件显示的文本内容\n        isLoading: true // 设置刷新组件为加载状态\n      })\n      SwipeRefresher({\n        content: '', // 设置刷新组件显示的文本内容为空\n        isLoading: true // 设置刷新组件为加载状态\n      })\n      SwipeRefresher({\n        content: '正在加载中', // 设置刷新组件显示的文本内容\n        isLoading: false // 设置刷新组件为非加载状态\n      })\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Navigation": {
        "description": "Navigation组件是路由导航的根视图容器，一般作为Page页面的根容器使用，其内部默认包含了标题栏、内容区和工具栏，其中内容区默认首页显示导航内容（Navigation的子组件）或非首页显示（NavDestination的子组件），首页和非首页通过路由进行切换。",
        "details": "该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。\n\n该组件从API Version 11开始默认支持安全区避让特性(默认值为：expandSafeArea([SafeAreaType.SYSTEM, SafeAreaType.KEYBOARD, SafeAreaType.CUTOUT], [SafeAreaEdge.TOP, SafeAreaEdge.BOTTOM]))，开发者可以重写该属性覆盖默认行为，API Version 11之前的版本需配合expandSafeArea属性实现安全区避让。",
        "interfaces": [
            {
                "description": "Navigation()",
                "params": {}
            },
            {
                "description": "Navigation(pathInfos: NavPathStack)",
                "params": {
                    "pathInfos": {
                        "type": "NavPathStack",
                        "required": true,
                        "description": "绑定路由栈到Navigation组件。"
                    }
                }
            }
        ],
        "attributes": {
            "title": {
                "description": "设置页面标题。",
                "params": {
                    "value": {
                        "type": [
                            "ResourceStr",
                            "CustomBuilder",
                            "NavigationCommonTitle",
                            "NavigationCustomTitle"
                        ],
                        "required": true,
                        "description": "页面标题。"
                    },
                    "options": {
                        "type": "NavigationTitleOptions",
                        "required": false,
                        "description": "标题栏的额外配置选项。"
                    }
                }
            },
            "subTitle": {
                "description": "设置页面副标题。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "页面副标题。"
                    }
                }
            },
            "menus": {
                "description": "设置页面右上角菜单。不设置时不显示菜单项。使用Array<NavigationMenuItem> 写法时，竖屏最多支持显示3个图标，横屏最多支持显示5个图标，多余的图标会被放入自动生成的更多图标。",
                "params": {
                    "value": {
                        "type": [
                            "Array<NavigationMenuItem>",
                            "CustomBuilder"
                        ],
                        "required": true,
                        "description": "页面右上角菜单。"
                    }
                }
            },
            "titleMode": {
                "description": "设置页面标题栏显示模式。",
                "params": {
                    "value": {
                        "type": "NavigationTitleMode",
                        "required": true,
                        "description": "页面标题栏显示模式。"
                    }
                }
            },
            "toolBar": {
                "description": "设置工具栏内容。不设置时不显示工具栏。items均分底部工具栏，在每个均分内容区布局文本和图标，文本超长时，逐级缩小，缩小之后换行，最后...截断。",
                "params": {
                    "value": {
                        "type": [
                            "object",
                            "CustomBuilder"
                        ],
                        "required": true,
                        "description": "工具栏内容。"
                    }
                }
            },
            "toolbarConfiguration": {
                "description": "设置工具栏内容。不设置时不显示工具栏。",
                "params": {
                    "value": {
                        "type": [
                            "Array<ToolbarItem>",
                            "CustomBuilder"
                        ],
                        "required": true,
                        "description": "工具栏内容。"
                    },
                    "options": {
                        "type": "NavigationToolbarOptions",
                        "required": false,
                        "description": "工具栏的额外配置选项。"
                    }
                }
            },
            "hideToolBar": {
                "description": "设置是否隐藏工具栏。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否隐藏工具栏。",
                        "default": false
                    }
                }
            },
            "hideTitleBar": {
                "description": "设置是否隐藏标题栏。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否隐藏标题栏。",
                        "default": false
                    }
                }
            },
            "hideBackButton": {
                "description": "设置是否隐藏标题栏中的返回键。返回键仅针对titleMode为NavigationTitleMode.Mini时才生效。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否隐藏标题栏中的返回键。",
                        "default": false
                    }
                }
            },
            "navBarWidth": {
                "description": "设置导航栏宽度。仅在Navigation组件分栏时生效。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "导航栏宽度。",
                        "default": 240
                    }
                }
            },
            "navBarPosition": {
                "description": "设置导航栏位置。仅在Navigation组件分栏时生效。",
                "params": {
                    "value": {
                        "type": "NavBarPosition",
                        "required": true,
                        "description": "导航栏位置。"
                    }
                }
            },
            "mode": {
                "description": "设置导航栏的显示模式。支持Stack、Split与Auto模式。",
                "params": {
                    "value": {
                        "type": "NavigationMode",
                        "required": true,
                        "description": "导航栏的显示模式。",
                        "default": "NavigationMode.Auto"
                    }
                }
            },
            "backButtonIcon": {
                "description": "设置标题栏中返回键图标。",
                "params": {
                    "value": {
                        "type": [
                            "string",
                            "PixelMap",
                            "Resource",
                            "SymbolGlyphModifier"
                        ],
                        "required": true,
                        "description": "返回键图标。"
                    }
                }
            },
            "hideNavBar": {
                "description": "设置是否隐藏导航栏。设置为true时，隐藏Navigation的导航栏，包括标题栏、内容区和工具栏。如果此时路由栈中存在NavDestination页面，则直接显示栈顶NavDestination页面，反之显示空白。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否隐藏导航栏。",
                        "default": false
                    }
                }
            },
            "navDestination": {
                "description": "创建NavDestination组件。使用builder函数，基于name和param构造NavDestination组件。builder下只能有一个根节点。builder中允许在NavDestination组件外包含一层自定义组件， 但自定义组件不允许设置属性和事件，否则仅显示空白。",
                "params": {
                    "builder": {
                        "type": "(name: string, param: unknown) => void",
                        "required": true,
                        "description": "创建NavDestination组件的函数。"
                    }
                }
            },
            "navBarWidthRange": {
                "description": "设置导航栏最小和最大宽度（双栏模式下生效）。",
                "params": {
                    "value": {
                        "type": [
                            "Dimension",
                            "Dimension"
                        ],
                        "required": true,
                        "description": "导航栏最小和最大宽度。",
                        "default": [
                            240,
                            "组件宽度的40%"
                        ]
                    }
                }
            },
            "minContentWidth": {
                "description": "设置导航栏内容区最小宽度（双栏模式下生效）。",
                "params": {
                    "value": {
                        "type": "Dimension",
                        "required": true,
                        "description": "导航栏内容区最小宽度。",
                        "default": 360
                    }
                }
            },
            "ignoreLayoutSafeArea": {
                "description": "控制组件的布局，使其扩展到非安全区域。",
                "params": {
                    "types": {
                        "type": [
                            "Array<LayoutSafeAreaType>"
                        ],
                        "required": false,
                        "description": "配置扩展安全区域的类型。",
                        "default": [
                            "LayoutSafeAreaType.SYSTEM"
                        ]
                    },
                    "edges": {
                        "type": [
                            "Array<LayoutSafeAreaEdge>"
                        ],
                        "required": false,
                        "description": "配置扩展安全区域的方向。",
                        "default": [
                            "LayoutSafeAreaEdge.TOP",
                            "LayoutSafeAreaEdge.BOTTOM"
                        ]
                    }
                }
            },
            "systemBarStyle": {
                "description": "当Navigation中显示Navigation首页时，设置对应系统状态栏的样式。",
                "params": {
                    "style": {
                        "type": "Optional<SystemBarStyle>",
                        "required": false,
                        "description": "系统状态栏的样式。"
                    }
                }
            }
        },
        "events": {
            "onTitleModeChange": {
                "description": "当titleMode为NavigationTitleMode.Free时，随着可滚动组件的滑动标题栏模式发生变化时触发此回调。",
                "params": {
                    "titleMode": {
                        "type": "NavigationTitleMode",
                        "required": true,
                        "description": "当前的标题栏模式。"
                    }
                }
            },
            "onNavBarStateChange": {
                "description": "导航栏显示状态切换时触发该回调。",
                "params": {
                    "isVisible": {
                        "type": "boolean",
                        "required": true,
                        "description": "导航栏是否可见。"
                    }
                }
            },
            "onNavigationModeChange": {
                "description": "当Navigation首次显示或者单双栏状态发生变化时触发该回调。",
                "params": {
                    "mode": {
                        "type": "NavigationMode",
                        "required": true,
                        "description": "当前的导航栏模式。"
                    }
                }
            },
            "customNavContentTransition": {
                "description": "自定义转场动画回调。",
                "params": {
                    "delegate": {
                        "type": "(from: NavContentInfo, to: NavContentInfo, operation: NavigationOperation) => NavigationAnimatedTransition | undefined",
                        "required": true,
                        "description": "自定义转场动画的回调函数。"
                    }
                }
            }
        },
        "rules": [
            "Navigation组件是路由导航的根视图容器，一般作为Page页面的根容器使用。",
            "内容区默认首页显示导航内容（Navigation的子组件）或非首页显示（NavDestination的子组件），首页和非首页通过路由进行切换。",
            "该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
            "该组件从API Version 11开始默认支持安全区避让特性(默认值为：expandSafeArea([SafeAreaType.SYSTEM, SafeAreaType.KEYBOARD, SafeAreaType.CUTOUT], [SafeAreaEdge.TOP, SafeAreaEdge.BOTTOM]))，开发者可以重写该属性覆盖默认行为，API Version 11之前的版本需配合expandSafeArea属性实现安全区避让。"
        ],
        "examples": [
            {
                "description": "该示例演示了在嵌套Navigation场景下，如何获取父NavPathStack并进行导航操作。整体布局采用全屏的Navigation组件，内部嵌套了一个子Navigation组件。父Navigation组件的背景颜色为绿色，子Navigation组件的背景颜色为橙色。子Navigation组件内部包含一个按钮，点击该按钮会获取父Navigation的NavPathStack，并将其导航路径推送到父Navigation中。\n\n布局属性：\n- 父Navigation组件和子Navigation组件的宽度均为100%，高度均为100%，占据整个屏幕。\n- 子Navigation组件的宽度为80%，高度为80%，位于父Navigation组件的中心位置。\n\n组件的样式和外观：\n- 父Navigation组件的背景颜色为绿色（Color.Green）。\n- 子Navigation组件的背景颜色为橙色（Color.Orange），并且设置了圆角裁剪（clip: true）。\n- 按钮的宽度为80%，高度为40vp，边距为20vp，背景颜色为默认的按钮颜色。\n\n组件的排列和嵌套关系：\n- 父Navigation组件内部嵌套了一个Stack组件，Stack组件的子元素为子Navigation组件。\n- 子Navigation组件内部包含一个按钮，按钮位于子Navigation组件的中心位置。\n\n组件的功能和交互：\n- 点击按钮会触发onClick事件，事件处理函数中通过调用childNavStack.getParent()方法获取父Navigation的NavPathStack，并调用pushPath方法将导航路径推送到父Navigation中。",
                "code": "@Entry\n@Component\nstruct NavigationExample1 {\n  @State childNavStack: NavPathStack = new NavPathStack(); // 定义一个状态变量childNavStack，用于存储子Navigation的NavPathStack\n\n  build() {\n    Navigation() { // 创建父Navigation组件\n      Stack({alignContent: Alignment.Center}) { // 创建一个Stack组件，内容对齐方式为居中\n        Navigation(this.childNavStack) { // 创建子Navigation组件，并传入childNavStack\n          Button('push Path to parent Navigation', { stateEffect: true, type: ButtonType.Capsule }) // 创建一个按钮，按钮文本为'push Path to parent Navigation'，按钮类型为胶囊按钮\n            .width('80%') // 设置按钮宽度为80%\n            .height(40) // 设置按钮高度为40vp\n            .margin(20) // 设置按钮边距为20vp\n            .onClick(() => { // 设置按钮点击事件\n              let parentStack = this.childNavStack.getParent(); // 获取父Navigation的NavPathStack\n              parentStack?.pushPath({ name: \"pageOne\" }); // 将导航路径推送到父Navigation中\n            })\n        }\n        .clip(true) // 设置子Navigation组件的圆角裁剪\n        .backgroundColor(Color.Orange) // 设置子Navigation组件的背景颜色为橙色\n        .width('80%') // 设置子Navigation组件的宽度为80%\n        .height('80%') // 设置子Navigation组件的高度为80%\n        .title('ChildNavigation') // 设置子Navigation组件的标题为'ChildNavigation'\n      }\n      .width('100%') // 设置Stack组件的宽度为100%\n      .height('100%') // 设置Stack组件的高度为100%\n    }\n    .backgroundColor(Color.Green) // 设置父Navigation组件的背景颜色为绿色\n    .width('100%') // 设置父Navigation组件的宽度为100%\n    .height('100%') // 设置父Navigation组件的高度为100%\n    .title('ParentNavigation') // 设置父Navigation组件的标题为'ParentNavigation'\n  }\n}\n\n@Builder\nexport function PageOneBuilder(name: string) { // 定义一个Builder函数，用于构建PageOne页面\n  NavDestination() { // 创建一个NavDestination组件\n    Text(\"this is \" + name) // 创建一个Text组件，显示文本为'this is ' + name\n  }\n  .title(name) // 设置NavDestination组件的标题为name\n}\n\n{\n  \"routerMap\": [ // 定义路由映射\n    {\n      \"name\": \"pageOne\", // 路由名称\n      \"pageSourceFile\": \"src/main/ets/pages/PageOne.ets\", // 页面源文件路径\n      \"buildFunction\": \"PageOneBuilder\", // 页面构建函数\n      \"data\": { // 页面数据\n        \"description\": \"this is pageOne\" // 页面描述\n      }\n    }\n  ]\n}"
            },
            {
                "description": "该示例演示了NavDestination的生命周期时序，并通过Navigation组件实现了页面的导航功能。布局宽度占据整个屏幕，高度设为100%，内边距为20vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组按钮。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Column组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过Column布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// 定义一个Builder函数，用于构建PageOne页面\n@Builder\nexport function PageOneBuilder(name: string, param: Object) {\n  PageOneComponent()\n}\n\n// 定义PageOneComponent组件\n@Component\nstruct PageOneComponent {\n  // 定义一个私有变量stack，用于存储导航路径栈\n  private stack: NavPathStack | null = null;\n  // 定义一个状态变量eventStr，用于存储生命周期事件的字符串\n  @State eventStr: string = \"\";\n\n  // 构建PageOneComponent的UI\n  build() {\n    NavDestination() {\n      Column() {\n        // 显示生命周期事件的字符串\n        Text(\"event: \" + this.eventStr)\n        // 定义一个按钮，点击后将页面推入导航栈\n        Button('pushPath', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            if (this.stack) {\n              this.stack.pushPath({name: \"pageOne\"});\n            }\n          })\n        // 定义一个按钮，点击后将页面从导航栈中弹出\n        Button('pop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.stack?.pop()\n          })\n      }\n      .width('100%')\n      .height('100%')\n    }\n    .title('pageOne')\n    // 生命周期事件处理函数\n    .onAppear(() => { this.eventStr += \"<onAppear>\"; })\n    .onDisAppear(() => { this.eventStr += \"<onDisAppear>\"; })\n    .onShown(() => { this.eventStr += \"<onShown>\"; })\n    .onHidden(() => { this.eventStr += \"<onHidden>\"; })\n    .onWillAppear(() => { this.eventStr += \"<onWillAppear>\"; })\n    .onWillDisappear(() => { this.eventStr += \"<onWillDisappear>\"; })\n    .onWillShow(() => { this.eventStr += \"<onWillShow>\"; })\n    .onWillHide(() => { this.eventStr += \"<onWillHide>\"; })\n    // 页面准备就绪时的处理函数\n    .onReady((ctx: NavDestinationContext) => {\n      try {\n        this.eventStr += \"<onReady>\";\n        this.stack = ctx.pathStack;\n      } catch (e) {\n        console.log(`testTag onReady catch exception: ${JSON.stringify(e)}`)\n      }\n    })\n  }\n}\n\n// 定义NavigationExample3组件\n@Entry\n@Component\nstruct NavigationExample3 {\n  // 定义一个私有变量stack，用于存储导航路径栈\n  private stack : NavPathStack = new NavPathStack();\n\n  // 构建NavigationExample3的UI\n  build() {\n    Navigation(this.stack) {\n      Stack({alignContent: Alignment.Center}) {\n        // 定义一个按钮，点击后将页面推入导航栈\n        Button('pushPath', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.stack.pushPath({ name: \"pageOne\" })\n          })\n      }\n      .width('100%')\n      .height('100%')\n    }\n    .width('100%')\n    .height('100%')\n    .title('Navigation')\n  }\n}\n\n// 定义路由映射\n{\n  \"routerMap\": [\n    {\n      \"name\": \"pageOne\",\n      \"pageSourceFile\": \"src/main/ets/pages/Index.ets\",\n      \"buildFunction\": \"PageOneBuilder\",\n      \"data\": {\n        \"description\": \"this is pageOne\"\n      }\n    }\n  ]\n}"
            },
            {
                "description": "该示例通过Navigation组件实现了一个带有标题栏的STACK布局效果。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为两个主要部分：Navigation标题栏和内容区域。Navigation标题栏包含主标题和副标题，并支持两种样式：STANDARD和STACK。内容区域包含一个可滚动的列布局，列布局中包含一个图片、两个按钮和一个列表。按钮用于切换标题栏的样式，列表展示了从0到11的数字。\n\n布局属性：\n- 整个布局的宽度为100%，高度为100%。\n- Navigation标题栏的背景模糊样式为COMPONENT_THICK。\n- 内容区域的背景颜色为#F1F3F5。\n- 图片的高度为138vp，宽度为100%。\n- 按钮的高度为50vp，宽度为100%，按钮之间的间距为12vp。\n- 列表项的高度为100vp，宽度为100%，背景颜色为橙色，边框圆角为10vp，字体大小为16，文本居中对齐。\n\n组件的样式和外观：\n- Navigation标题栏的主标题为'NavTitle'，副标题为'subtitle'。\n- 图片的资源名为$r('app.media.image_1')。\n- 按钮的文本分别为'BarStyle.STANDARD'和'BarStyle.STACK'。\n- 列表项的文本颜色为橙色，背景颜色为橙色。\n\n组件的排列和嵌套关系：\n- 整个布局通过Column组件进行垂直排列。\n- Navigation组件嵌套在Column组件中，内容区域嵌套在Navigation组件中。\n- 内容区域通过Column组件进行垂直排列，包含一个图片、两个按钮和一个列表。\n- 列表通过ForEach组件进行动态生成，每个列表项通过ListItem组件进行展示。\n\n组件的功能和交互：\n- 点击'BarStyle.STANDARD'按钮时，标题栏样式切换为STANDARD。\n- 点击'BarStyle.STACK'按钮时，标题栏样式切换为STACK。\n- 列表项展示了从0到11的数字，每个数字通过Text组件进行展示。",
                "code": "@Entry\n@Component\nstruct NavigationExample {\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]; // 列表数据源\n  private scrollerForScroll: Scroller = new Scroller(); // 用于控制滚动行为的Scroller对象\n  @State barStyle: BarStyle = BarStyle.STANDARD; // 标题栏样式状态，初始为STANDARD\n\n  build() {\n    Column() {\n      Navigation() {\n        Column() {\n          Scroll(this.scrollerForScroll) { // 可滚动的列布局\n            Column() {\n              Image($r('app.media.image_1')) // 图片组件，资源名为$r('app.media.image_1')\n                .height(138) // 图片高度为138vp\n                .width('100%') // 图片宽度为100%\n              Button('BarStyle.STANDARD') // 按钮组件，文本为'BarStyle.STANDARD'\n                .height('50vp') // 按钮高度为50vp\n                .onClick(() => { // 按钮点击事件\n                  this.barStyle = BarStyle.STANDARD; // 切换标题栏样式为STANDARD\n                })\n              Button('BarStyle.STACK') // 按钮组件，文本为'BarStyle.STACK'\n                .height('50vp') // 按钮高度为50vp\n                .margin({ top: 12 }) // 按钮顶部间距为12vp\n                .onClick(() => { // 按钮点击事件\n                  this.barStyle = BarStyle.STACK; // 切换标题栏样式为STACK\n                })\n\n              ForEach(this.arr, (item: number) => { // 动态生成列表项\n                ListItem() {\n                  Text('' + item) // 文本组件，显示列表项的数字\n                    .width('100%') // 文本宽度为100%\n                    .height(100) // 文本高度为100vp\n                    .fontSize(16) // 字体大小为16\n                    .textAlign(TextAlign.Center) // 文本居中对齐\n                    .borderRadius(10) // 边框圆角为10vp\n                    .backgroundColor(Color.Orange) // 背景颜色为橙色\n                    .margin({ top: 12 }) // 顶部间距为12vp\n                }\n              }, (item: string) => item) // 列表项的唯一标识符\n            }\n          }\n        }\n        .width('100%') // 内容区域宽度为100%\n        .height('100%') // 内容区域高度为100%\n        .backgroundColor(0xDCDCDC) // 内容区域背景颜色为0xDCDCDC\n      }\n      .title(\n        {\n          main: 'NavTitle', // 主标题\n          sub: 'subtitle' // 副标题\n        },\n        {\n          backgroundBlurStyle: BlurStyle.COMPONENT_THICK, // 背景模糊样式为COMPONENT_THICK\n          barStyle: this.barStyle, // 标题栏样式，根据状态变化\n        }\n      )\n      .titleMode(NavigationTitleMode.Free) // 标题模式为Free\n      .hideTitleBar(false) // 不隐藏标题栏\n    }.width('100%').height('100%').backgroundColor('#F1F3F5') // 整个布局的宽度、高度和背景颜色\n  }\n}"
            },
            {
                "description": "该示例主要演示了在鸿蒙ArkUI中使用NavPathStack和NavDestination组件实现页面栈操作的功能。具体包括以下几点：\n1. NavPathStack无需声明为状态变量，也可以实现页面栈操作功能。\n2. NavDestination通过onReady事件能够拿到对应的NavPathInfo和所属的NavPathStack。\n\n布局方面，示例中使用了Column和Stack布局组件来组织页面内容。Column组件用于垂直排列子组件，Stack组件用于堆叠子组件。按钮组件用于触发页面栈的push和pop操作。\n\n样式方面，按钮组件设置了宽度、高度、边距等属性，以确保按钮在页面中的显示效果。按钮的样式包括胶囊形状和启用状态效果。\n\n功能方面，按钮组件绑定了点击事件，用于触发页面栈的push和pop操作。通过NavDestination的onReady事件，可以获取当前页面的NavPathInfo和所属的NavPathStack，从而实现页面栈的管理。",
                "code": "// 定义一个PageParam类，用于传递页面参数\nclass PageParam {\n  constructor(num_: number) {\n    this.num = num_;\n  }\n  num: number = 0; // 页面参数，初始值为0\n}\n\n// 定义一个Builder函数，用于构建PageOne组件\n@Builder\nexport function PageOneBuilder(name: string, param: Object) {\n  PageOne() // 调用PageOne组件\n}\n\n// 定义PageOne组件\n@Component\nstruct PageOne {\n  private stack: NavPathStack | null = null; // 页面栈对象，初始值为null\n  private name: string = \"\"; // 页面名称，初始值为空字符串\n  private paramNum: number = 0; // 页面参数，初始值为0\n\n  build() {\n    NavDestination() {\n      Column() {\n        // 显示当前页面的名称和参数\n        Text(\"NavPathInfo: name: \" + this.name + \", paramNum: \" + this.paramNum)\n        // 定义一个按钮，用于触发页面栈的push操作\n        Button('pushPath', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%') // 按钮宽度为父容器的80%\n          .height(40) // 按钮高度为40vp\n          .margin(20) // 按钮上下左右边距为20vp\n          .onClick(() => {\n            if (this.stack) {\n              let p = new PageParam(this.paramNum + 1); // 创建一个新的PageParam对象，参数值为当前参数值加1\n              this.stack.pushPath({name: \"pageOne\", param: p}); // 将新页面推入页面栈\n            }\n          })\n        // 定义一个按钮，用于触发页面栈的pop操作\n        Button('pop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%') // 按钮宽度为父容器的80%\n          .height(40) // 按钮高度为40vp\n          .margin(20) // 按钮上下左右边距为20vp\n          .onClick(() => {\n            this.stack?.pop() // 将当前页面从页面栈中弹出\n          })\n      }\n      .width('100%') // Column组件宽度为父容器的100%\n      .height('100%') // Column组件高度为父容器的100%\n    }\n    .title('pageOne') // 设置NavDestination的标题为\"pageOne\"\n    .onReady((ctx: NavDestinationContext) => {\n      try {\n        this.name = ctx?.pathInfo?.name; // 获取当前页面的名称\n        this.paramNum = (ctx?.pathInfo?.param as PageParam)?.num; // 获取当前页面的参数\n        this.stack = ctx.pathStack; // 获取当前页面的页面栈对象\n      } catch (e) {\n        console.log(`testTag onReady catch exception: ${JSON.stringify(e)}`) // 捕获并记录onReady事件中的异常\n      }\n    })\n  }\n}\n\n// 定义NavigationExample2组件\n@Entry\n@Component\nstruct NavigationExample2 {\n  private stack : NavPathStack = new NavPathStack(); // 创建一个NavPathStack对象\n\n  build() {\n    Navigation(this.stack) {\n      Stack({alignContent: Alignment.Center}) {\n        // 定义一个按钮，用于触发页面栈的push操作\n        Button('pushPath', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%') // 按钮宽度为父容器的80%\n          .height(40) // 按钮高度为40vp\n          .margin(20) // 按钮上下左右边距为20vp\n          .onClick(() => {\n            let p = new PageParam(1); // 创建一个新的PageParam对象，参数值为1\n            this.stack.pushPath({ name: \"pageOne\", param: p }) // 将新页面推入页面栈\n          })\n      }\n      .width('100%') // Stack组件宽度为父容器的100%\n      .height('100%') // Stack组件高度为父容器的100%\n    }\n    .width('100%') // Navigation组件宽度为父容器的100%\n    .height('100%') // Navigation组件高度为父容器的100%\n    .title('Navigation') // 设置Navigation的标题为\"Navigation\"\n  }\n}\n\n// 定义路由映射配置\n{\n  \"routerMap\": [\n    {\n      \"name\": \"pageOne\", // 页面名称\n      \"pageSourceFile\": \"src/main/ets/pages/Index.ets\", // 页面源文件路径\n      \"buildFunction\": \"PageOneBuilder\", // 构建页面的函数\n      \"data\": {\n        \"description\": \"this is pageOne\" // 页面描述\n      }\n    }\n  ]\n}"
            },
            {
                "description": "该示例主要演示如何定义NavPathStack的派生类和派生类在Navigation中的基本用法。布局上，示例包含一个主页（Index）和一个子页面（PageOne）。主页中包含一个按钮，点击按钮可以导航到子页面。子页面中显示当前页面的信息和参数信息，并包含一个按钮用于再次导航到子页面。\n\n布局属性：\n- 主页和子页面都使用了Column布局，垂直排列内容。\n- 按钮的边距为20vp，文本的边距为10vp或20vp。\n- 文本的字体大小分别为25vp和20vp，字体加粗，文本对齐方式为左对齐。\n- 子页面的背景颜色为粉色。\n\n组件的样式和外观：\n- 按钮的样式为默认按钮样式，点击时触发导航操作。\n- 文本的颜色为默认颜色，字体加粗，对齐方式为左对齐。\n- 子页面的背景颜色为粉色，突出显示子页面的内容。\n\n组件的排列和嵌套关系：\n- 主页和子页面都使用了Column布局，垂直排列内容。\n- 按钮和文本在Column中依次排列，按钮位于文本下方。\n- 子页面中的按钮和文本在Column中依次排列，按钮位于文本下方。\n\n组件的功能和交互：\n- 主页中的按钮点击后触发导航操作，导航到子页面。\n- 子页面中的按钮点击后再次触发导航操作，导航到子页面。\n- 子页面在加载完成后，通过onReady事件获取当前页面的信息和参数信息，并显示在页面上。",
                "code": "// 定义DerivedNavPathStack类，继承自NavPathStack\nclass DerivedNavPathStack extends NavPathStack {\n  // 默认的id值\n  id: string = \"__default__\"\n\n  // 设置id的方法\n  setId(id: string) {\n    this.id = id;\n  }\n\n  // 获取页面信息的接口\n  getInfo(): string {\n    return \"this page used Derived NavPathStack, id: \" + this.id\n  }\n\n  // 重载pushPath方法，支持两种参数形式\n  pushPath(info: NavPathInfo, animated?: boolean): void\n  pushPath(info: NavPathInfo, options?: NavigationOptions): void\n  pushPath(info: NavPathInfo, secArg?: boolean | NavigationOptions): void {\n    console.log('[derive-test] reached DerivedNavPathStack\\'s pushPath');\n    if (typeof secArg === 'boolean') {\n      super.pushPath(info, secArg);\n    } else {\n      super.pushPath(info, secArg);\n    }\n  }\n\n  // 重载pop方法，支持两种参数形式\n  pop(animated?: boolean | undefined): NavPathInfo | undefined\n  pop(result: Object, animated?: boolean | undefined): NavPathInfo | undefined\n  pop(result?: Object, animated?: boolean | undefined): NavPathInfo | undefined {\n    console.log('[derive-test] reached DerivedNavPathStack\\'s pop');\n    return super.pop(result, animated);\n  }\n}\n\n// 定义param类，用于传递参数\nclass param {\n  info: string = \"__default_param__\";\n  constructor(info: string) { this.info = info }\n}\n\n// 主页组件\n@Entry\n@Component\nstruct Index {\n  // 创建DerivedNavPathStack实例\n  derivedStack: DerivedNavPathStack = new DerivedNavPathStack();\n\n  // 页面即将显示时的回调\n  aboutToAppear(): void {\n    this.derivedStack.setId('origin stack');\n  }\n\n  // 页面映射构建器\n  @Builder\n  pageMap(name: string) {\n    PageOne()\n  }\n\n  // 构建主页内容\n  build() {\n    Navigation(this.derivedStack) {\n      Button('to Page One').margin(20).onClick(() => {\n        this.derivedStack.pushPath({\n          name: 'pageOne',\n          param: new param('push pageOne in homePage when stack size: ' + this.derivedStack.size())\n        });\n      })\n    }.navDestination(this.pageMap)\n    .title('Home Page')\n  }\n}\n\n// 子页面组件\n@Component\nstruct PageOne {\n  // 创建DerivedNavPathStack实例\n  derivedStack: DerivedNavPathStack = new DerivedNavPathStack();\n  curStringifyParam: string = \"NA\";\n\n  // 构建子页面内容\n  build() {\n    NavDestination() {\n      Column() {\n        Text(this.derivedStack.getInfo())\n          .margin(10)\n          .fontSize(25)\n          .fontWeight(FontWeight.Bold)\n          .textAlign(TextAlign.Start)\n        Text('current page param info:')\n          .margin(10)\n          .fontSize(25)\n          .fontWeight(FontWeight.Bold)\n          .textAlign(TextAlign.Start)\n        Text(this.curStringifyParam)\n          .margin(20)\n          .fontSize(20)\n          .textAlign(TextAlign.Start)\n      }.backgroundColor(Color.Pink)\n      Button('to Page One').margin(20).onClick(() => {\n        this.derivedStack.pushPath({\n          name: 'pageOne',\n          param: new param('push pageOne in pageOne when stack size: ' + this.derivedStack.size())\n        });\n      })\n    }.title('Page One')\n    .onReady((context: NavDestinationContext) => {\n      console.log('[derive-test] reached PageOne\\'s onReady');\n      this.derivedStack = context.pathStack as DerivedNavPathStack;\n      console.log('[derive-test] -- got derivedStack: ' + this.derivedStack.id);\n      this.curStringifyParam = JSON.stringify(context.pathInfo.param);\n      console.log('[derive-test] -- got param: ' + this.curStringifyParam);\n    })\n  }\n}"
            },
            {
                "description": "该示例主要演示了如何在鸿蒙ArkUI中使用Navigation和NavDestination组件来自定义设置标题栏的边距。布局上，示例分为两个主要部分：主页面（NavigationExample）和目标页面（NavDestinationExample）。主页面包含三个按钮，分别用于切换标题栏的内间距和跳转到目标页面。目标页面也包含两个按钮，用于切换标题栏的内间距。\n\n布局属性方面，主页面和目标页面都使用了Column和Row组件来实现垂直和水平布局。按钮的布局宽度为100%，高度为100%，确保按钮在页面中占据适当的空间。按钮之间的间距通过margin属性设置为5vp，确保按钮之间有一定的间隔。\n\n组件的样式和外观方面，按钮的背景颜色、边框圆角、宽度和高度等属性未在代码中明确设置，但可以通过鸿蒙ArkUI的默认样式进行展示。按钮的排列和嵌套关系通过Column和Row组件实现，确保按钮在垂直和水平方向上有序排列。\n\n组件的功能和交互方面，按钮的点击事件通过onClick方法实现，用户可以通过点击按钮来切换标题栏的内间距或跳转到目标页面。标题栏的内间距通过paddingStart和paddingEnd属性进行设置，支持动态调整。\n\n整个布局通过Navigation和NavDestination组件实现页面导航和标题栏的自定义设置，确保界面整洁美观且功能完善。",
                "code": "import { LengthMetrics } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct NavigationExample {\n  @Provide('navPathStack') navPathStack: NavPathStack = new NavPathStack();\n\n  @State paddingStart: LengthMetrics = LengthMetrics.vp(0); // 标题栏左侧内间距，初始值为0vp\n  @State paddingEnd: LengthMetrics = LengthMetrics.vp(0); // 标题栏右侧内间距，初始值为0vp\n  @State menuItems: Array<NavigationMenuItem> = [\n    {\n      value: 'menuItem1',\n      icon: 'resources/base/media/ic_public_ok.svg',\n      action: () => {\n      }\n    }\n  ]\n\n  @Builder\n  myRouter(name: string, param?: Object) {\n    if (name === 'NavDestinationExample') {\n      NavDestinationExample();\n    }\n  }\n\n  build() {\n    Navigation(this.navPathStack) {\n      Column() {\n        Button('切换标题栏内间距为16vp')\n          .onClick(() => {\n            this.paddingStart = LengthMetrics.vp(16); // 设置标题栏左侧内间距为16vp\n            this.paddingEnd = LengthMetrics.vp(16); // 设置标题栏右侧内间距为16vp\n          })\n          .margin({ top: 5 }) // 设置按钮顶部外边距为5vp\n\n        Button('切换标题栏内间距为24vp')\n          .onClick(() => {\n            this.paddingStart = LengthMetrics.vp(24); // 设置标题栏左侧内间距为24vp\n            this.paddingEnd = LengthMetrics.vp(24); // 设置标题栏右侧内间距为24vp\n          })\n          .margin({ top: 5 }) // 设置按钮顶部外边距为5vp\n\n        Button('跳转')\n          .onClick(() => {\n            this.navPathStack.pushPathByName('NavDestinationExample', null); // 跳转到目标页面\n          })\n          .margin({ top: 5 }) // 设置按钮顶部外边距为5vp\n      }\n    }\n    .titleMode(NavigationTitleMode.Mini) // 设置标题栏模式为Mini模式\n    .title('一级页面', {\n      paddingStart: this.paddingStart, // 设置标题栏左侧内间距\n      paddingEnd: this.paddingEnd, // 设置标题栏右侧内间距\n    })\n    .menus(this.menuItems) // 设置菜单项\n    .navDestination(this.myRouter) // 设置导航目标页面的路由\n  }\n}\n\n@Component\nexport struct NavDestinationExample {\n  @Consume('navPathStack') navPathStack: NavPathStack;\n  @State menuItems: Array<NavigationMenuItem> = [\n    {\n      value: 'menuItem1',\n      icon: 'resources/base/media/ic_public_ok.svg',\n      action: () => {\n      }\n    }\n  ]\n  @State paddingStart: LengthMetrics = LengthMetrics.vp(0); // 标题栏左侧内间距，初始值为0vp\n  @State paddingEnd: LengthMetrics = LengthMetrics.vp(0); // 标题栏右侧内间距，初始值为0vp\n\n  build() {\n    NavDestination() {\n      Row() {\n        Column() {\n          Button('切换标题栏内间距为32vp')\n            .onClick(() => {\n              this.paddingStart = LengthMetrics.vp(32); // 设置标题栏左侧内间距为32vp\n              this.paddingEnd = LengthMetrics.vp(32); // 设置标题栏右侧内间距为32vp\n            })\n            .margin({ top: 5 }) // 设置按钮顶部外边距为5vp\n\n          Button('切换标题栏内间距为20vp')\n            .onClick(() => {\n              this.paddingStart = LengthMetrics.vp(20); // 设置标题栏左侧内间距为20vp\n              this.paddingEnd = LengthMetrics.vp(20); // 设置标题栏右侧内间距为20vp\n            })\n            .margin({ top: 5 }) // 设置按钮顶部外边距为5vp\n        }\n        .width('100%') // 设置Column的宽度为100%\n      }\n      .height('100%') // 设置Row的高度为100%\n    }\n    .hideTitleBar(false) // 不隐藏标题栏\n    .title('NavDestination title', {\n      paddingStart: this.paddingStart, // 设置标题栏左侧内间距\n      paddingEnd: this.paddingEnd, // 设置标题栏右侧内间距\n    })\n    .menus(this.menuItems) // 设置菜单项\n  }\n}"
            },
            {
                "description": "该示例主要演示了如何在鸿蒙ArkUI中使用Navigation和NavDestination组件，并通过Symbol组件来定制导航栏和工具栏的图标。布局上，Navigation组件作为主容器，包含一个按钮用于触发导航跳转。NavDestination组件则作为目标页面，展示在导航跳转后的内容。\n\n布局属性方面，Navigation组件设置了标题模式为Mini，并配置了菜单项和工具栏项。NavDestination组件设置了背景颜色、标题栏样式和返回按钮图标。\n\n样式和外观方面，SymbolGlyphModifier用于定制图标的颜色和渲染策略，支持多色渲染。Navigation组件的返回按钮图标使用了SymbolGlyphModifier来设置图标和颜色。\n\n组件的排列和嵌套关系上，Navigation组件内部嵌套了一个Column组件，包含一个按钮。NavDestination组件内部嵌套了一个Row组件，Row组件内部又嵌套了一个Column组件，用于布局内容。\n\n功能和交互方面，按钮点击事件触发导航跳转，Navigation组件通过navPathStack管理导航路径，NavDestination组件通过menus属性配置菜单项。",
                "code": "import { SymbolGlyphModifier } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct NavigationExample {\n  @Provide('navPathStack') navPathStack: NavPathStack = new NavPathStack(); // 提供导航路径栈，用于管理导航路径\n  @State menuItems: Array<NavigationMenuItem> = [ // 定义菜单项数组\n    {\n      value: 'menuItem1',\n      icon: 'resources/base/media/ic_public_ok.svg' // 菜单项图标\n    },\n    {\n      value: 'menuItem2',\n      icon: 'resources/base/media/ic_public_ok.svg',\n      symbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos_folder_badge_plus')).fontColor([Color.Red, Color.Green]).renderingStrategy(SymbolRenderingStrategy.MULTIPLE_COLOR), // 使用SymbolGlyphModifier定制图标颜色和渲染策略\n    },\n    {\n      value: 'menuItem3',\n      symbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos_lungs')), // 使用SymbolGlyphModifier定制图标\n    },\n  ];\n\n  @State toolItems: Array<ToolbarItem> = [ // 定义工具栏项数组\n    {\n      value: 'toolItem1',\n      icon: 'resources/base/media/ic_public_ok.svg',\n      symbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos_lungs')),\n      status: ToolbarItemStatus.ACTIVE,\n      activeSymbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos_folder_badge_plus')).fontColor([Color.Red, Color.Green]).renderingStrategy(SymbolRenderingStrategy.MULTIPLE_COLOR), // 使用SymbolGlyphModifier定制激活状态下的图标颜色和渲染策略\n      action: () => {}\n    },\n    {\n      value: 'toolItem2',\n      symbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos_star')),\n      status: ToolbarItemStatus.ACTIVE,\n      activeIcon: 'resources/base/media/ic_public_more.svg',\n      action: () => {}\n    },\n    {\n      value: 'toolItem3',\n      symbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos_star')),\n      status: ToolbarItemStatus.ACTIVE,\n      activeSymbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos_lungs')),\n      action: () => {}\n    }\n  ];\n\n  @Builder\n  myRouter(name: string, param?: Object) { // 定义路由构建器\n    if (name === 'NavigationMenu') {\n      NavigationMenu(); // 构建NavigationMenu组件\n    }\n  }\n\n  build() {\n    Navigation(this.navPathStack) { // 创建Navigation组件\n      Column() {\n        Button('跳转').onClick(() => { // 创建按钮，点击后触发导航跳转\n          this.navPathStack.pushPathByName('NavigationMenu', null); // 将NavigationMenu组件推入导航路径栈\n        })\n      }\n    }\n    .backButtonIcon(new SymbolGlyphModifier($r('sys.symbol.ohos_wifi'))) // 设置返回按钮图标\n    .titleMode(NavigationTitleMode.Mini) // 设置标题模式为Mini\n    .menus(this.menuItems) // 设置菜单项\n    .toolbarConfiguration(this.toolItems) // 设置工具栏项\n    .title('一级页面') // 设置标题\n    .navDestination(this.myRouter) // 设置导航目标\n  }\n}\n\n@Component\nexport struct NavigationMenu {\n  @Consume('navPathStack') navPathStack: NavPathStack; // 消费导航路径栈\n  @State menuItems: Array<NavigationMenuItem> = [ // 定义菜单项数组\n    {\n      value: 'menuItem1',\n      icon: 'resources/base/media/ic_public_ok.svg',\n      action: () => {}\n    },\n    {\n      value: 'menuItem2',\n      symbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos_folder_badge_plus')).fontColor([Color.Red, Color.Green]).renderingStrategy(SymbolRenderingStrategy.MULTIPLE_COLOR), // 使用SymbolGlyphModifier定制图标颜色和渲染策略\n      action: () => {}\n    },\n    {\n      value: 'menuItem3',\n      symbolIcon: new SymbolGlyphModifier($r('sys.symbol.repeat_1')),\n      action: () => {}\n    },\n  ];\n\n  build() {\n    NavDestination() { // 创建NavDestination组件\n      Row() {\n        Column() {\n        }\n        .width('100%') // 设置Column宽度为100%\n      }\n      .height('100%') // 设置Row高度为100%\n    }\n    .hideTitleBar(false) // 不隐藏标题栏\n    .title('NavDestination title') // 设置标题\n    .backgroundColor($r('sys.color.ohos_id_color_titlebar_sub_bg')) // 设置背景颜色\n    .backButtonIcon(new SymbolGlyphModifier($r('sys.symbol.ohos_star')).fontColor([Color.Blue])) // 设置返回按钮图标和颜色\n    .menus(this.menuItems) // 设置菜单项\n  }\n}"
            },
            {
                "description": "该示例主要演示了如何在鸿蒙ArkUI中设置Navigation主页的标题栏、工具栏和NavDestination页面的标题栏的背景颜色和背景模糊效果。布局上，主页和子页面都使用了Stack和Column组件进行嵌套布局，确保内容在垂直和水平方向上的居中对齐。样式上，通过定义不同的颜色和模糊效果，实现了标题栏和工具栏的动态切换。功能上，通过按钮点击事件，用户可以切换标题栏和工具栏的背景颜色和模糊效果，同时还可以通过按钮导航到子页面。",
                "code": "// 定义两种颜色和两种模糊效果\nlet COLOR1: string = \"#80004AAF\"; // 定义第一种颜色\nlet COLOR2: string = \"#802787D9\"; // 定义第二种颜色\nlet BLUR_STYLE_1: BlurStyle = BlurStyle.BACKGROUND_THIN; // 定义第一种模糊效果\nlet BLUR_STYLE_2: BlurStyle = BlurStyle.BACKGROUND_THICK; // 定义第二种模糊效果\n\n@Component\nstruct BackComponent {\n  build() {\n    Row() {\n      Column() {}\n        .height('100%') // 设置高度为100%\n        .backgroundColor(\"#3D9DB4\") // 设置背景颜色\n        .layoutWeight(9) // 设置布局权重\n      Column() {}\n        .height('100%') // 设置高度为100%\n        .backgroundColor(\"17A98D\") // 设置背景颜色\n        .layoutWeight(9) // 设置布局权重\n      Column() {}\n        .height('100%') // 设置高度为100%\n        .backgroundColor(\"FFC000\") // 设置背景颜色\n        .layoutWeight(9) // 设置布局权重\n    }\n    .height('100%') // 设置高度为100%\n    .width('100%') // 设置宽度为100%\n  }\n}\n\n@Component\nstruct ColorAndBlur {\n  @State useColor1: boolean = true; // 定义状态变量，用于切换颜色\n  @State useBlur1: boolean = true; // 定义状态变量，用于切换模糊效果\n\n  build() {\n    NavDestination() {\n      Stack({alignContent: Alignment.Center}) {\n        BackComponent()\n          .width('100%') // 设置宽度为100%\n          .height('100%') // 设置高度为100%\n        Column() {\n          Stack({alignContent: Alignment.Center}) {\n            Button(\"switch color\")\n              .onClick(() => {\n                this.useColor1 = !this.useColor1; // 切换颜色状态\n              })\n          }\n          .width('100%') // 设置宽度为100%\n          .layoutWeight(1) // 设置布局权重\n          Stack({alignContent: Alignment.Center}) {\n            Button(\"switch blur\")\n              .onClick(() => {\n                this.useBlur1 = !this.useBlur1; // 切换模糊效果状态\n              })\n          }\n          .width('100%') // 设置宽度为100%\n          .layoutWeight(1) // 设置布局权重\n        }\n        .width('100%') // 设置宽度为100%\n        .height('100%') // 设置高度为100%\n      }.width('100%') // 设置宽度为100%\n      .height('100%') // 设置高度为100%\n    }\n    .width('100%') // 设置宽度为100%\n    .height('100%') // 设置高度为100%\n\n    .title(\"switch titlebar color and blur\", {\n      backgroundColor: this.useColor1 ? COLOR1 : COLOR2, // 根据状态设置背景颜色\n      backgroundBlurStyle: this.useBlur1 ? BLUR_STYLE_1 : BLUR_STYLE_2, // 根据状态设置模糊效果\n      barStyle: BarStyle.STACK // 设置标题栏样式\n    })\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  private stack: NavPathStack = new NavPathStack(); // 定义导航路径栈\n  @State useColor1: boolean = true; // 定义状态变量，用于切换颜色\n  @State useBlur1: boolean = true; // 定义状态变量，用于切换模糊效果\n\n  @Builder\n  PageBuilder(name: string) {\n    ColorAndBlur() // 构建子页面\n  }\n\n  build() {\n    Navigation(this.stack) {\n      Stack({alignContent: Alignment.Center}) {\n        BackComponent()\n          .width('100%') // 设置宽度为100%\n          .height('100%') // 设置高度为100%\n        Column() {\n          Stack({alignContent: Alignment.Center}) {\n            Button(\"switch color\")\n              .onClick(() => {\n                this.useColor1 = !this.useColor1; // 切换颜色状态\n              })\n          }\n          .width('100%') // 设置宽度为100%\n          .layoutWeight(1) // 设置布局权重\n          Stack({alignContent: Alignment.Center}) {\n            Button(\"switch blur\")\n              .onClick(() => {\n                this.useBlur1 = !this.useBlur1; // 切换模糊效果状态\n              })\n          }\n          .width('100%') // 设置宽度为100%\n          .layoutWeight(1) // 设置布局权重\n          Stack({alignContent: Alignment.Center}) {\n            Button(\"push page\")\n              .onClick(() => {\n                this.stack.pushPath({name: \"page\"}) // 导航到子页面\n              })\n          }\n          .width('100%') // 设置宽度为100%\n          .layoutWeight(1) // 设置布局权重\n        }\n        .width('100%') // 设置宽度为100%\n        .height('80%') // 设置高度为80%\n      }.width('100%') // 设置宽度为100%\n      .height('100%') // 设置高度为100%\n    }\n    .width('100%') // 设置宽度为100%\n    .height('100%') // 设置高度为100%\n    .navDestination(this.PageBuilder) // 设置导航目标页面\n\n    .title(\"NavTitle\", {\n      backgroundColor: this.useColor1 ? COLOR1 : COLOR2, // 根据状态设置背景颜色\n      backgroundBlurStyle: this.useBlur1 ? BLUR_STYLE_1 : BLUR_STYLE_2, // 根据状态设置模糊效果\n      barStyle: BarStyle.STACK // 设置标题栏样式\n    })\n\n    .toolbarConfiguration([\n      {value: \"a\"},\n      {value: \"b\"},\n      {value: \"c\"}\n    ], {\n      backgroundColor: this.useColor1 ? COLOR1 : COLOR2, // 根据状态设置背景颜色\n      backgroundBlurStyle: this.useBlur1 ? BLUR_STYLE_1 : BLUR_STYLE_2 // 根据状态设置模糊效果\n    })\n  }\n}"
            },
            {
                "description": "该示例主要演示了Navigation页面的布局。整体布局采用Column组件，宽度占据整个屏幕，高度也占据整个屏幕，背景颜色为#F1F3F5。布局分为三个主要部分：标题部分、菜单部分和内容部分。\n\n标题部分通过@Builder装饰器定义了一个NavigationTitle组件，该组件包含两段文本：主标题和副标题。主标题字体颜色为#182431，字体大小为30vp，行高为41vp，字体粗细为700；副标题字体颜色为#182431，字体大小为14vp，行高为19vp，透明度为0.4，上下边距为2vp和20vp。标题部分整体采用Column布局，对齐方式为水平左对齐。\n\n菜单部分通过@Builder装饰器定义了一个NavigationMenus组件，该组件包含三个图标，每个图标的宽度为24vp，高度为24vp。图标之间通过margin属性设置左间距为24vp。菜单部分整体采用Row布局。\n\n内容部分包含一个Navigation组件，该组件内部嵌套了一个TextInput组件和一个List组件。TextInput组件的占位符为'search...'，宽度为90%，高度为40vp，背景颜色为#FFFFFF，上边距为8vp。List组件的高度为324vp，宽度为100%，上边距为12vp，左边距为10%。List组件内部通过ForEach循环渲染了arr数组中的数字，每个ListItem包含一个Text组件，显示对应的数字，宽度为90%，高度为72vp，背景颜色为#FFFFFF，边框圆角为24vp，字体大小为16vp，字体粗细为500，文本居中对齐。\n\nNavigation组件的标题模式为NavigationTitleMode.Full，工具栏配置了三个按钮，分别对应添加、应用和收藏功能。标题栏和工具栏默认显示，当标题模式发生变化时，会通过console.info输出当前的标题模式。",
                "code": "class A {\n  text: string = '' // 定义一个字符串类型的变量text，初始值为空字符串\n  num: number = 0 // 定义一个数字类型的变量num，初始值为0\n}\n\n@Entry\n@Component\nstruct NavigationExample {\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] // 定义一个数字数组arr，包含0到9的数字\n  @State currentIndex: number = 0 // 定义一个状态变量currentIndex，初始值为0\n\n  @Builder NavigationTitle() {\n    Column() {\n      Text('Title') // 显示主标题\n        .fontColor('#182431') // 设置字体颜色为#182431\n        .fontSize(30) // 设置字体大小为30vp\n        .lineHeight(41) // 设置行高为41vp\n        .fontWeight(700) // 设置字体粗细为700\n      Text('subtitle') // 显示副标题\n        .fontColor('#182431') // 设置字体颜色为#182431\n        .fontSize(14) // 设置字体大小为14vp\n        .lineHeight(19) // 设置行高为19vp\n        .opacity(0.4) // 设置透明度为0.4\n        .margin({ top: 2, bottom: 20 }) // 设置上下边距为2vp和20vp\n    }.alignItems(HorizontalAlign.Start) // 设置对齐方式为水平左对齐\n  }\n\n  @Builder NavigationMenus() {\n    Row() {\n      Image('resources/base/media/ic_public_add.svg') // 显示第一个图标\n        .width(24) // 设置图标宽度为24vp\n        .height(24) // 设置图标高度为24vp\n      Image('resources/base/media/ic_public_add.svg') // 显示第二个图标\n        .width(24) // 设置图标宽度为24vp\n        .height(24) // 设置图标高度为24vp\n        .margin({ left: 24 }) // 设置左间距为24vp\n      Image('common/ic_public_more.svg') // 显示第三个图标\n        .width(24) // 设置图标宽度为24vp\n        .height(24) // 设置图标高度为24vp\n        .margin({ left: 24 }) // 设置左间距为24vp\n    }\n  }\n\n  build() {\n    Column() {\n      Navigation() {\n        TextInput({ placeholder: 'search...' }) // 创建一个TextInput组件，占位符为'search...'\n          .width('90%') // 设置宽度为90%\n          .height(40) // 设置高度为40vp\n          .backgroundColor('#FFFFFF') // 设置背景颜色为#FFFFFF\n          .margin({ top: 8 }) // 设置上边距为8vp\n\n        List({ space: 12, initialIndex: 0 }) { // 创建一个List组件，间距为12vp，初始索引为0\n          ForEach(this.arr, (item: number) => { // 遍历arr数组\n            ListItem() {\n              Text('' + item) // 显示当前数字\n                .width('90%') // 设置宽度为90%\n                .height(72) // 设置高度为72vp\n                .backgroundColor('#FFFFFF') // 设置背景颜色为#FFFFFF\n                .borderRadius(24) // 设置边框圆角为24vp\n                .fontSize(16) // 设置字体大小为16vp\n                .fontWeight(500) // 设置字体粗细为500\n                .textAlign(TextAlign.Center) // 设置文本居中对齐\n            }\n          }, (item: number) => item.toString()) // 将数字转换为字符串作为键\n        }\n        .height(324) // 设置List高度为324vp\n        .width('100%') // 设置List宽度为100%\n        .margin({ top: 12, left: '10%' }) // 设置上边距为12vp，左边距为10%\n      }\n      .title(this.NavigationTitle) // 设置Navigation的标题为NavigationTitle组件\n      .menus(this.NavigationMenus) // 设置Navigation的菜单为NavigationMenus组件\n      .titleMode(NavigationTitleMode.Full) // 设置标题模式为全屏模式\n      .toolbarConfiguration([ // 配置工具栏按钮\n        {\n          value: $r(\"app.string.navigation_toolbar_add\"), // 按钮文本资源\n          icon: $r(\"app.media.ic_public_highlightsed\") // 按钮图标资源\n        },\n        {\n          value: $r(\"app.string.navigation_toolbar_app\"), // 按钮文本资源\n          icon: $r(\"app.media.ic_public_highlights\") // 按钮图标资源\n        },\n        {\n          value: $r(\"app.string.navigation_toolbar_collect\"), // 按钮文本资源\n          icon: $r(\"app.media.ic_public_highlights\") // 按钮图标资源\n        }\n      ])\n      .hideTitleBar(false) // 设置标题栏不隐藏\n      .hideToolBar(false) // 设置工具栏不隐藏\n      .onTitleModeChange((titleModel: NavigationTitleMode) => { // 监听标题模式变化事件\n        console.info('titleMode' + titleModel) // 输出当前标题模式\n      })\n    }.width('100%').height('100%').backgroundColor('#F1F3F5') // 设置整体布局宽度为100%，高度为100%，背景颜色为#F1F3F5\n  }\n}"
            },
            {
                "description": "该示例主要演示了在鸿蒙ArkUI中使用Navigation组件进行页面导航，并实现带参返回的功能。整个应用包含三个主要页面：首页（NavigationExample）、PageOne和PageTwo。每个页面通过Navigation组件进行导航，支持多种方式的页面跳转和返回操作。\n\n布局方面，每个页面都使用了Column组件来垂直排列多个Button组件。每个Button组件的宽度为80%，高度为40vp，并且有10vp的边距。Button组件的排列方式为垂直排列，确保按钮在垂直方向上有序排列，界面整洁美观。\n\n样式方面，Button组件的类型为Capsule（胶囊形状），并且启用了状态效果（stateEffect: true），使得按钮在点击时会有视觉反馈。按钮的宽度占据父容器的80%，高度为40vp，边距为10vp，确保按钮在页面中居中显示。\n\n功能方面，每个Button组件都绑定了onClick事件，点击按钮会触发相应的页面跳转或返回操作。页面跳转时可以传递参数，并在返回时接收返回的参数，更新页面状态。页面返回操作支持多种方式，包括返回到指定页面、返回到指定索引的页面等。",
                "code": "@Entry\n@Component\nstruct NavigationExample {\n  pageInfo: NavPathStack = new NavPathStack()\n\n  build() {\n    Navigation(this.pageInfo) {\n      Column() {\n        Button('StartTest', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pageInfo.pushPath({ name: 'pageOne' });\n          })\n      }\n    }.title('NavIndex')\n  }\n}\n\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nclass TmpClass{\n  count:number = 10\n}\n\nclass ParamWithOp {\n  operation: number = 1\n  count: number = 10\n}\n\n@Builder\nexport function PageOneBuilder(name: string, param: Object) {\n  PageOne()\n}\n\n@Component\nexport struct PageOne {\n  pageInfo: NavPathStack = new NavPathStack();\n  @State message: string = 'Hello World'\n\n  build() {\n    NavDestination() {\n      Column() {\n        Text(this.message)\n          .width('80%')\n          .height(50)\n          .margin(10)\n\n        Button('pushPath', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(10)\n          .onClick(()=>{\n            this.pageInfo.pushPath({name: 'pageTwo', param: new ParamWithOp(), onPop: (popInfo: PopInfo)=>{\n              this.message = '[pushPath]last page is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result);\n            }});\n          })\n\n        Button('pushPathByName', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(10)\n          .onClick(() => {\n            let tmp = new TmpClass()\n            this.pageInfo.pushPathByName('pageTwo', tmp, (popInfo)=>{\n              this.message = '[pushPathByName]last page is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result);\n            });\n          })\n\n        Button('pushDestination', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(10)\n          .onClick(()=>{\n            let tmp = new TmpClass()\n\n            this.pageInfo.pushDestination({name: 'pageTwo', param: new ParamWithOp(), onPop: (popInfo: PopInfo)=>{\n              this.message = '[pushDestination]last page is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result);\n            }}).catch((error: BusinessError)=>{\n              console.error(`[pushDestination]failed, error code = ${error.code}, error.message = ${error.message}.`);\n            }).then(()=>{\n              console.error('[pushDestination]success.');\n            });\n          })\n\n        Button('pushDestinationByName', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(10)\n          .onClick(()=>{\n            let tmp = new TmpClass()\n\n            this.pageInfo.pushDestinationByName('pageTwo', tmp, (popInfo)=>{\n              this.message = '[pushDestinationByName]last page is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result);\n            }).catch((error: BusinessError)=>{\n              console.error(`[pushDestinationByName]failed, error code = ${error.code}, error.message = ${error.message}.`);\n            }).then(()=>{\n              console.error('[pushDestinationByName]success.');\n            });\n          })\n\n        Button('pushPathWithoutOnPop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(10)\n          .onClick(()=>{\n            this.pageInfo.pushPath({name: 'pageTwo', param: new ParamWithOp()});\n          })\n\n        Button('pushPathByNameWithoutOnPop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(10)\n          .onClick(() => {\n            let tmp = new TmpClass()\n            this.pageInfo.pushPathByName('pageTwo', tmp);\n          })\n\n        Button('pushDestinationWithoutOnPop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(10)\n          .onClick(()=>{\n            let tmp = new TmpClass()\n\n            this.pageInfo.pushDestination({name: 'pageTwo', param: new ParamWithOp()})\n              .catch((error: BusinessError)=>{\n                console.error(`[pushDestinationWithoutOnPop]failed, error code = ${error.code}, error.message = ${error.message}.`);\n              }).then(()=>{\n                console.error('[pushDestinationWithoutOnPop]success.');\n              });\n          })\n\n        Button('pushDestinationByNameWithoutOnPop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(10)\n          .onClick(() => {\n            let tmp = new TmpClass()\n\n            this.pageInfo.pushDestinationByName('pageTwo', tmp)\n              .catch((error: BusinessError)=>{\n                console.error(`[pushDestinationByNameWithoutOnPop]failed, error code = ${error.code}, error.message = ${error.message}.`);\n              }).then(()=>{\n                console.error('[pushDestinationByNameWithoutOnPop]success.');\n              });\n          })\n\n        Button('clear', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(10)\n          .onClick(() => {\n            this.pageInfo.clear();\n          })\n      }.width('100%').height('100%')\n    }.title('pageOne')\n    .onBackPressed(() => {\n      this.pageInfo.pop({number: 1})\n      return true\n    }).onReady((context: NavDestinationContext) => {\n      this.pageInfo = context.pathStack;\n    })\n  }\n}\n\nclass resultClass {\n  constructor(count: number) {\n    this.count = count;\n  }\n  count: number = 10\n}\n\n@Builder\nexport function PageTwoBuilder() {\n  PageTwo()\n}\n\n@Component\nexport struct PageTwo {\n  pathStack: NavPathStack = new NavPathStack()\n\n  build() {\n    NavDestination() {\n      Column() {\n        Button('pop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pathStack.pop(new resultClass(1));\n          })\n\n        Button('popToName', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pathStack.popToName('pageOne', new resultClass(11));\n          })\n\n        Button('popToIndex', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pathStack.popToIndex(0, new resultClass(111));\n          })\n\n        Button('popWithoutResult', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pathStack.pop();\n          })\n\n        Button('popToNameWithoutResult', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pathStack.popToName('pageOne');\n          })\n\n        Button('popToIndexWithoutResult', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pathStack.popToIndex(0);\n          })\n      }.width('100%').height('100%')\n    }.title('pageTwo')\n    .onBackPressed(() => {\n      this.pathStack.pop(new resultClass(0));\n      return true;\n    }).onReady((context: NavDestinationContext) => {\n      this.pathStack = context.pathStack\n    })\n  }\n}\n\n{\n  \"routerMap\": [\n    {\n      \"name\": \"pageOne\",\n      \"pageSourceFile\": \"src/main/ets/pages/PageOne.ets\",\n      \"buildFunction\": \"PageOneBuilder\",\n      \"data\": {\n        \"description\": \"this is pageOne\"\n      }\n    },\n    {\n      \"name\": \"pageTwo\",\n      \"pageSourceFile\": \"src/main/ets/pages/PageTwo.ets\",\n      \"buildFunction\": \"PageTwoBuilder\"\n    }\n  ]\n}"
            },
            {
                "description": "该示例主要演示了在鸿蒙ArkUI中使用NavPathStack进行页面导航和路由拦截的功能。通过NavPathStack，开发者可以管理页面的堆栈，实现页面的跳转、拦截、回退等操作。示例中包含了两个主要页面（PageOne和PageTwo），并通过按钮触发不同的导航操作。布局上，页面主要由按钮组成，按钮的排列方式为垂直布局，按钮之间有适当的间距。按钮的样式为胶囊形状，宽度占据父容器的80%，高度为40vp，边距为20vp。按钮的功能包括页面跳转、路由拦截开关、页面堆栈操作等。",
                "code": "@Entry\n@Component\nstruct NavigationExample {\n  // 定义一个NavPathStack实例，用于管理页面堆栈\n  pageInfos: NavPathStack = new NavPathStack()\n  // 定义一个布尔变量，用于控制是否启用路由拦截\n  isUseInterception: boolean = false;\n\n  // 注册路由拦截的方法\n  registerInterception() {\n    this.pageInfos.setInterception({\n      // 页面即将显示时的拦截处理\n      willShow: (from: NavDestinationContext | \"navBar\", to: NavDestinationContext | \"navBar\",\n                 operation: NavigationOperation, animated: boolean) => {\n        // 如果未启用拦截，直接返回\n        if (!this.isUseInterception) {\n          return;\n        }\n        // 如果目标页面是导航栏，输出日志\n        if (typeof to === \"string\") {\n          console.log(\"target page is navigation home\");\n          return;\n        }\n\n        // 获取目标页面的上下文\n        let target: NavDestinationContext = to as NavDestinationContext;\n        // 如果目标页面是pageTwo，则将其替换为pageOne\n        if (target.pathInfo.name === 'pageTwo') {\n          target.pathStack.pop();\n          target.pathStack.pushPathByName('pageOne', null);\n        }\n      },\n      // 页面已经显示后的拦截处理\n      didShow: (from: NavDestinationContext | \"navBar\", to: NavDestinationContext | \"navBar\",\n                operation: NavigationOperation, isAnimated: boolean) => {\n        // 如果未启用拦截，直接返回\n        if (!this.isUseInterception) {\n          return;\n        }\n        // 如果当前页面是导航栏，输出日志\n        if (typeof from === \"string\") {\n          console.log(\"current transition is from navigation home\");\n        } else {\n          console.log(`current transition is from  ${(from as NavDestinationContext).pathInfo.name}`)\n        }\n        // 如果目标页面是导航栏，输出日志\n        if (typeof to === \"string\") {\n          console.log(\"current transition to is navBar\");\n        } else {\n          console.log(`current transition is to ${(to as NavDestinationContext).pathInfo.name}`);\n        }\n      },\n      // 导航模式改变时的拦截处理\n      modeChange: (mode: NavigationMode) => {\n        // 如果未启用拦截，直接返回\n        if (!this.isUseInterception) {\n          return;\n        }\n        console.log(`current navigation mode is ${mode}`);\n      }\n    })\n  }\n\n  // 构建页面的方法\n  build() {\n    Navigation(this.pageInfos) {\n      Column() {\n        // 定义一个按钮，点击后跳转到pageOne\n        Button('pushPath', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pageInfos.pushPath({ name: 'pageOne' })\n          })\n        // 定义一个按钮，点击后切换路由拦截的启用状态\n        Button('use interception', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.isUseInterception = !this.isUseInterception;\n            if (this.isUseInterception) {\n              this.registerInterception();\n            } else {\n              this.pageInfos.setInterception(undefined);\n            }\n          })\n      }\n    }.title('NavIndex')\n  }\n}\n\n// 定义一个临时类，用于传递参数\nclass TmpClass{\n  count:number = 10\n}\n\n// 定义一个Builder函数，用于构建PageOne页面\n@Builder\nexport function PageOneBuilder(name: string, param: Object) {\n  PageOne()\n}\n\n// 定义PageOne组件\n@Component\nexport struct PageOne {\n  // 定义一个NavPathStack实例，用于管理页面堆栈\n  pageInfos: NavPathStack = new NavPathStack()\n\n  // 构建PageOne页面的方法\n  build() {\n    NavDestination() {\n      Column() {\n        // 定义一个按钮，点击后跳转到pageTwo\n        Button('pushPathByName', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            let tmp = new TmpClass()\n            this.pageInfos.pushPathByName('pageTwo', tmp)\n          })\n        // 定义一个按钮，点击后以单例模式跳转到pageOne\n        Button('singletonLaunchMode', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pageInfos.pushPath({ name: 'pageOne' }, { launchMode: LaunchMode.MOVE_TO_TOP_SINGLETON })\n          })\n        // 定义一个按钮，点击后回退到指定名称的页面\n        Button('popToname', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pageInfos.popToName('pageTwo')\n            console.log('popToName' + JSON.stringify(this.pageInfos), '返回值' + JSON.stringify(this.pageInfos.popToName('pageTwo')))\n          })\n        // 定义一个按钮，点击后回退到指定索引的页面\n        Button('popToIndex', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pageInfos.popToIndex(1)\n            console.log('popToIndex' + JSON.stringify(this.pageInfos))\n          })\n        // 定义一个按钮，点击后将指定名称的页面移动到堆栈顶部\n        Button('moveToTop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pageInfos.moveToTop('pageTwo')\n            console.log('moveToTop' + JSON.stringify(this.pageInfos), '返回值' + JSON.stringify(this.pageInfos.moveToTop('pageTwo')))\n          })\n        // 定义一个按钮，点击后将指定索引的页面移动到堆栈顶部\n        Button('moveIndexToTop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pageInfos.moveIndexToTop(1)\n            console.log('moveIndexToTop' + JSON.stringify(this.pageInfos))\n          })\n        // 定义一个按钮，点击后清空页面堆栈\n        Button('clear', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pageInfos.clear()\n          })\n        // 定义一个按钮，点击后获取页面堆栈的相关信息\n        Button('get', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            console.log('-------------------')\n            console.log('获取栈中所有NavDestination页面的名称', JSON.stringify(this.pageInfos.getAllPathName()))\n            console.log('获取index指定的NavDestination页面的参数信息', JSON.stringify(this.pageInfos.getParamByIndex(1)))\n            console.log('获取全部名为name的NavDestination页面的参数信息', JSON.stringify(this.pageInfos.getParamByName('pageTwo')))\n            console.log('获取全部名为name的NavDestination页面的位置索引', JSON.stringify(this.pageInfos.getIndexByName('pageOne')))\n            console.log('获取栈大小', JSON.stringify(this.pageInfos.size()))\n          })\n      }.width('100%').height('100%')\n    }.title('pageOne')\n    .onBackPressed(() => {\n      const popDestinationInfo = this.pageInfos.pop()\n      console.log('pop' + '返回值' + JSON.stringify(popDestinationInfo))\n      return true\n    }).onReady((context: NavDestinationContext) => {\n      this.pageInfos = context.pathStack\n    })\n  }\n}\n\n// 定义一个Builder函数，用于构建PageTwo页面\n@Builder\nexport function PageTwoBuilder(name: string, param: Object) {\n  PageTwo()\n}\n\n// 定义PageTwo组件\n@Component\nexport struct PageTwo {\n  // 定义一个NavPathStack实例，用于管理页面堆栈\n  pathStack: NavPathStack = new NavPathStack()\n\n  // 定义一个菜单项数组，用于设置页面的菜单\n  private menuItems: Array<NavigationMenuItem> = [\n    {\n      value: \"1\",\n      icon: 'resources/base/media/undo.svg',\n    },\n    {\n      value: \"2\",\n      icon: 'resources/base/media/redo.svg',\n      isEnabled: false,\n    },\n    {\n      value: \"3\",\n      icon: 'resources/base/media/ic_public_ok.svg',\n      isEnabled: true,\n    }\n  ]\n\n  // 构建PageTwo页面的方法\n  build() {\n    NavDestination() {\n      Column() {\n        // 定义一个按钮，点击后跳转到pageOne\n        Button('pushPathByName', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pathStack.pushPathByName('pageOne', null)\n          })\n      }.width('100%').height('100%')\n    }.title('pageTwo')\n    .menus(this.menuItems)\n    .onBackPressed(() => {\n      this.pathStack.pop()\n      return true\n    })\n    .onReady((context: NavDestinationContext) => {\n      this.pathStack = context.pathStack;\n      console.log(\"current page config info is \" + JSON.stringify(context.getConfigInRouteMap()))\n    })\n  }\n}\n\n// 定义路由映射配置\n{\n  \"routerMap\": [\n    {\n      \"name\": \"pageOne\",\n      \"pageSourceFile\": \"src/main/ets/pages/PageOne.ets\",\n      \"buildFunction\": \"PageOneBuilder\",\n      \"data\": {\n        \"description\": \"this is pageOne\"\n      }\n    },\n    {\n      \"name\": \"pageTwo\",\n      \"pageSourceFile\": \"src/main/ets/pages/PageTwo.ets\",\n      \"buildFunction\": \"PageTwoBuilder\"\n    }\n  ]\n}"
            },
            {
                "description": "该示例主要演示了如何在鸿蒙ArkUI中设置每个NavDestination子页面的自定义转场动画及可交互转场动画。通过自定义的转场动画，用户可以在页面切换时看到不同的动画效果，并且可以通过手势交互来控制转场动画的进度和完成状态。\n\n布局方面，示例中使用了Navigation组件来管理页面的导航栈，并通过NavDestination组件来定义每个页面的内容。每个页面内部使用了Column组件来垂直排列按钮，按钮用于触发页面导航操作。\n\n样式方面，页面背景颜色通过backgroundColor属性设置，按钮的样式通过width、height、margin等属性进行定义。页面内容的平移效果通过translate属性实现，手势交互通过PanGesture组件实现。\n\n功能方面，示例中通过CustomTransition类来管理自定义转场动画的参数和回调函数。页面切换时，会根据当前的导航操作（如PUSH或POP）来执行相应的动画效果。用户可以通过手势滑动来控制转场动画的进度，并在手势结束时根据滑动的距离决定是否完成转场。",
                "code": "import { CustomTransition, AnimateCallback } from './CustomNavigationUtils'\n\n@Entry\n@Component\nstruct NavigationExample {\n  pageInfos: NavPathStack = new NavPathStack();\n\n  aboutToAppear() {\n    if (this.pageInfos === undefined) {\n      this.pageInfos = new NavPathStack();\n    }\n    this.pageInfos.pushPath({ name: 'pageOne', param: CustomTransition.getInstance().getAnimationId() });\n  }\n\n  build() {\n    Navigation(this.pageInfos) {\n    }\n    .title('NavIndex')\n    .hideNavBar(true)\n    .customNavContentTransition((from: NavContentInfo, to: NavContentInfo, operation: NavigationOperation) => {\n      if (from.mode == NavDestinationMode.DIALOG || to.mode == NavDestinationMode.DIALOG) {\n        return undefined;\n      }\n\n      if (from.index === -1 || to.index === -1) {\n        return undefined;\n      }\n\n      CustomTransition.getInstance().operation = operation;\n      if (CustomTransition.getInstance().interactive) {\n        let customAnimation: NavigationAnimatedTransition = {\n          onTransitionEnd: (isSuccess: boolean) => {\n            console.log(\"===== current transition is \" + isSuccess);\n            CustomTransition.getInstance().recoverState();\n            CustomTransition.getInstance().proxy = undefined;\n          },\n          transition: (transitionProxy: NavigationTransitionProxy) => {\n            CustomTransition.getInstance().proxy = transitionProxy;\n            let targetIndex: string | undefined = operation == NavigationOperation.PUSH ?\n              (to.navDestinationId) : (from.navDestinationId);\n            if (targetIndex) {\n              CustomTransition.getInstance().fireInteractiveAnimation(targetIndex, operation);\n            }\n          },\n          isInteractive: CustomTransition.getInstance().interactive\n        }\n        return customAnimation;\n      }\n      let customAnimation: NavigationAnimatedTransition = {\n        onTransitionEnd: (isSuccess: boolean) => {\n          console.log(`current transition result is ${isSuccess}`)\n        },\n        timeout: 7000,\n\n        transition: (transitionProxy: NavigationTransitionProxy) => {\n          if (!from.navDestinationId || !to.navDestinationId) {\n            return;\n          }\n\n          let fromParam: AnimateCallback = CustomTransition.getInstance().getAnimateParam(from.navDestinationId);\n          let toParam: AnimateCallback = CustomTransition.getInstance().getAnimateParam(to.navDestinationId);\n          if (operation == NavigationOperation.PUSH) {\n            if (toParam.start) {\n              toParam.start(true, false);\n            }\n            animateTo({\n              duration: 500, onFinish: () => {\n                transitionProxy.finishTransition();\n              }\n            }, () => {\n              if (toParam.finish) {\n                toParam.finish(true, false);\n              }\n            })\n          } else {\n            if (fromParam.start) {\n              fromParam.start(true, true);\n            }\n            animateTo({\n              duration: 500, onFinish: () => {\n                transitionProxy.finishTransition();\n              }\n            }, () => {\n              if (fromParam.finish) {\n                fromParam.finish(true, true);\n              }\n            })\n          }\n        }\n      };\n      return customAnimation;\n    })\n  }\n}\n\nimport {CustomTransition} from './CustomNavigationUtils';\n\n@Builder\nexport function PageOneBuilder(name: string, param: Object) {\n  PageOne()\n}\n\n@Component\nexport struct PageOne {\n  pageInfos: NavPathStack = new NavPathStack();\n  @State translateX: string = '0';\n  pageId: string = '';\n  rectWidth: number = 0;\n  interactive: boolean = false;\n\n  registerCallback() {\n    CustomTransition.getInstance().registerNavParam(this.pageId, (isPush: boolean, isExit: boolean) => {\n      if (isPush) {\n        this.translateX = '100%';\n      } else {\n        this.translateX = '0';\n      }\n    }, (isPush: boolean, isExit: boolean) => {\n      if (isPush) {\n        this.translateX = '0';\n      } else {\n        this.translateX = '100%';\n      }\n    }, (isPush: boolean, isExit: boolean) => {\n      this.translateX = '0';\n    }, (operation: NavigationOperation) => {\n      if (operation == NavigationOperation.PUSH) {\n        this.translateX = '100%';\n        animateTo({\n          duration: 1000,\n          onFinish: () => {\n            this.translateX = '0';\n          }\n        }, () => {\n          this.translateX = '0';\n        })\n      } else {\n        this.translateX = '0';\n        animateTo({\n          duration: 1000,\n          onFinish: () => {\n            this.translateX = '0';\n          }\n        }, () => {\n          this.translateX = '100%';\n        })\n      }\n    }, 200);\n  }\n\n  build() {\n    NavDestination() {\n      Column() {\n        Button(`setInteractive`)\n          .onClick(() => {\n            CustomTransition.getInstance().interactive = !CustomTransition.getInstance().interactive;\n            this.interactive = CustomTransition.getInstance().interactive;\n          })\n\n        Button('pushPathByName', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pageInfos.pushDestinationByName('pageTwo', CustomTransition.getInstance().getAnimationId());\n          })\n      }\n      .size({ width: '100%', height: '100%' })\n    }\n    .title('pageOne')\n    .onDisAppear(() => {\n      CustomTransition.getInstance().unRegisterNavParam(this.pageId);\n    })\n    .onReady((context: NavDestinationContext) => {\n      this.pageInfos = context.pathStack;\n      if (context.navDestinationId) {\n        this.pageId = context.navDestinationId;\n        this.registerCallback();\n      }\n    })\n    .translate({ x: this.translateX })\n    .backgroundColor('#F1F3F5')\n    .gesture(PanGesture()\n      .onActionStart((event: GestureEvent) => {\n        this.rectWidth = event.target.area.width as number;\n        if (event.offsetX < 0) {\n          this.pageInfos.pushPath({ name: 'pageTwo', param: CustomTransition.getInstance().getAnimationId() });\n        } else {\n          this.pageInfos.pop();\n        }\n      })\n      .onActionUpdate((event: GestureEvent) => {\n        let rate = event.fingerList[0].localX / this.rectWidth;\n        CustomTransition.getInstance().updateProgress(rate);\n      })\n      .onActionEnd((event: GestureEvent) => {\n        let rate: number = event.fingerList[0].localX / this.rectWidth;\n        CustomTransition.getInstance().finishInteractiveAnimation(rate);\n      }))\n  }\n}\n\nimport {CustomTransition} from './CustomNavigationUtils'\n\n@Builder\nexport function PageTwoBuilder(name: string, param: Object) {\n  PageTwo({param: param as number})\n}\n\n@Component\nexport struct PageTwo {\n  pageInfos: NavPathStack = new NavPathStack();\n  @State translateX: string = '0';\n  pageId: string = '';\n  rectWidth: number = 0;\n  param: number = 0;\n\n  registerCallback() {\n    CustomTransition.getInstance().registerNavParam(this.pageId, (isPush: boolean, isExit: boolean) => {\n      if (isPush) {\n        this.translateX = '100%'\n      } else {\n        this.translateX = '0';\n      }\n    }, (isPush: boolean, isExit: boolean) => {\n      if (isPush) {\n        this.translateX = '0';\n      } else {\n        this.translateX = '100%'\n      }\n    }, (isPush: boolean, isExit: boolean) => {\n      this.translateX = '0';\n    }, (operation: NavigationOperation) => {\n      if (operation == NavigationOperation.PUSH) {\n        this.translateX = '100%';\n        animateTo({duration: 500, onFinish: () => {\n          this.translateX = '0';\n        }}, () => {\n          this.translateX = '0'\n        })\n      } else {\n        this.translateX = '0';\n        animateTo({duration: 500, onFinish: () => {\n          this.translateX = \"0\"\n        }}, () => {\n          this.translateX = '100%';\n        })\n      }\n    }, 2000)\n  }\n\n  build() {\n    NavDestination() {\n      Column() {\n        Button('pushPathByName', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pageInfos.pushPath({name:'pageOne', param: CustomTransition.getInstance().getAnimationId()})\n          })\n      }\n      .size({ width: '100%', height: '100%' })\n    }\n    .title('pageTwo')\n    .gesture(PanGesture()\n      .onActionStart((event: GestureEvent) => {\n        this.rectWidth = event.target.area.width as number;\n        if (event.offsetX < 0) {\n          this.pageInfos.pushPath({ name: 'pageOne', param: CustomTransition.getInstance().getAnimationId() });\n        } else {\n          this.pageInfos.pop();\n        }\n      })\n      .onActionUpdate((event: GestureEvent) => {\n        let rate = event.fingerList[0].localX / this.rectWidth;\n        CustomTransition.getInstance().updateProgress(rate);\n      })\n      .onActionEnd((event: GestureEvent) => {\n        let rate = event.fingerList[0].localX / this.rectWidth;\n        CustomTransition.getInstance().finishInteractiveAnimation(rate);\n      }))\n    .onAppear(() => {\n      this.registerCallback();\n    })\n    .onDisAppear(() => {\n      CustomTransition.getInstance().unRegisterNavParam(this.pageId);\n    })\n    .onReady((context: NavDestinationContext) => {\n      this.pageInfos = context.pathStack;\n      if (context.navDestinationId) {\n        this.pageId = context.navDestinationId;\n        this.registerCallback();\n      }\n    })\n    .translate({x: this.translateX})\n    .backgroundColor(Color.Yellow)\n  }\n}\n\nexport interface AnimateCallback {\n  finish: ((isPush: boolean, isExit: boolean) => void | undefined) | undefined;\n  start: ((isPush: boolean, isExit: boolean) => void | undefined) | undefined;\n  onFinish: ((isPush: boolean, isExit: boolean) => void | undefined) | undefined;\n  interactive: ((operation: NavigationOperation) => void | undefined) | undefined;\n  timeout: (number | undefined) | undefined;\n}\n\nconst customTransitionMap: Map<string, AnimateCallback> = new Map();\n\nexport class CustomTransition {\n  static delegate = new CustomTransition();\n  interactive: boolean = false;\n  proxy: NavigationTransitionProxy | undefined = undefined;\n  private animationId: number = 0;\n  operation: NavigationOperation = NavigationOperation.PUSH\n\n  static getInstance() {\n    return CustomTransition.delegate;\n  }\n\n  registerNavParam(name: string, startCallback: (operation: boolean, isExit: boolean) => void,\n    endCallback: (operation: boolean, isExit: boolean) => void,\n    onFinish: (operation: boolean, isExit: boolean) => void,\n    interactiveCallback: (operation: NavigationOperation) => void,\n    timeout: number): void {\n    if (customTransitionMap.has(name)) {\n      let param = customTransitionMap.get(name);\n      if (param != undefined) {\n        param.start = startCallback;\n        param.finish = endCallback;\n        param.timeout = timeout;\n        param.onFinish = onFinish;\n        param.interactive = interactiveCallback;\n        return;\n      }\n    }\n    let params: AnimateCallback = { timeout: timeout, start: startCallback, finish: endCallback, onFinish: onFinish,\n      interactive: interactiveCallback };\n    customTransitionMap.set(name, params);\n  }\n\n  getAnimationId() {\n    return Date.now();\n  }\n\n  unRegisterNavParam(name: string): void {\n    customTransitionMap.delete(name);\n  }\n\n  fireInteractiveAnimation(id: string, operation: NavigationOperation) {\n    let animation = customTransitionMap.get(id)?.interactive;\n    if (!animation) {\n      return;\n    }\n    animation(operation);\n  }\n\n  updateProgress(progress: number) {\n    if (!this.proxy?.updateTransition) {\n      return;\n    }\n    progress = this.operation == NavigationOperation.PUSH ? 1 - progress : progress;\n    this.proxy?.updateTransition(progress);\n  }\n\n  cancelTransition() {\n    if (this.proxy?.cancelTransition) {\n      this.proxy.cancelTransition();\n    }\n  }\n\n  recoverState() {\n    if (!this.proxy?.from.navDestinationId || !this.proxy?.to.navDestinationId) {\n      return;\n    }\n    let fromParam = customTransitionMap.get(this.proxy.from.navDestinationId);\n    if (fromParam?.onFinish) {\n      fromParam.onFinish(false, false);\n    }\n    let toParam = customTransitionMap.get(this.proxy?.to.navDestinationId);\n    if (toParam?.onFinish) {\n      toParam.onFinish(true, true);\n    }\n  }\n\n  finishTransition() {\n    this.proxy?.finishTransition();\n  }\n\n  finishInteractiveAnimation(rate: number) {\n    if (this.operation == NavigationOperation.PUSH) {\n      if (rate > 0.5) {\n        if (this.proxy?.cancelTransition) {\n          this.proxy.cancelTransition();\n        }\n      } else {\n        this.proxy?.finishTransition();\n      }\n    } else {\n      if (rate > 0.5) {\n        this.proxy?.finishTransition();\n      } else {\n        if (this.proxy?.cancelTransition) {\n          this.proxy.cancelTransition();\n        }\n      }\n    }\n  }\n\n  getAnimateParam(name: string): AnimateCallback {\n    let result: AnimateCallback = {\n      start: customTransitionMap.get(name)?.start,\n      finish: customTransitionMap.get(name)?.finish,\n      timeout: customTransitionMap.get(name)?.timeout,\n      onFinish: customTransitionMap.get(name)?.onFinish,\n      interactive: customTransitionMap.get(name)?.interactive,\n    };\n    return result;\n  }\n}\n\n{\n  \"routerMap\": [\n    {\n      \"name\": \"pageOne\",\n      \"pageSourceFile\": \"src/main/ets/pages/PageOne.ets\",\n      \"buildFunction\": \"PageOneBuilder\",\n      \"data\": {\n        \"description\": \"this is pageOne\"\n      }\n    },\n    {\n      \"name\": \"pageTwo\",\n      \"pageSourceFile\": \"src/main/ets/pages/PageTwo.ets\",\n      \"buildFunction\": \"PageTwoBuilder\"\n    }\n  ]\n}"
            }
        ],
        "is_common_attrs": true
    },
    "NavRouter": {
        "description": "导航组件，默认提供点击响应处理，不需要开发者自定义点击事件逻辑。",
        "details": "该组件从API Version 9开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "NavRouter()",
                "params": {}
            },
            {
                "description": "NavRouter(value: RouteInfo)",
                "params": {
                    "value": {
                        "type": "RouteInfo",
                        "required": true,
                        "description": "路由信息"
                    }
                }
            }
        ],
        "attributes": {
            "mode10+": {
                "description": "设置指定点击NavRouter跳转到NavDestination页面时，使用的路由模式。",
                "params": {
                    "mode": {
                        "type": "NavRouteMode",
                        "required": true,
                        "description": "指定点击NavRouter跳转到NavDestination页面时，使用的路由模式。",
                        "default": "NavRouteMode.PUSH_WITH_RECREATE"
                    }
                }
            }
        },
        "events": {
            "onStateChange": {
                "description": "组件激活状态切换时触发该回调。开发者点击激活NavRouter，加载对应的NavDestination子组件时，回调onStateChange(true)。NavRouter对应的NavDestination子组件不再显示时，回调onStateChange(false)。",
                "params": {
                    "isActivated": {
                        "type": "boolean",
                        "required": true,
                        "description": "isActivated为true时表示激活，为false时表示未激活。"
                    }
                }
            }
        },
        "rules": [
            "必须包含两个子组件，其中第二个子组件必须为NavDestination。",
            "子组件个数异常时：1. 有且仅有1个时，触发路由到NavDestination的能力失效。2. 有且仅有1个时，且使用NavDestination场景下，不进行路由。3. 大于2个时，后续的子组件不显示。4. 第二个子组件不为NavDestination时，触发路由功能失效。"
        ],
        "examples": [
            {
                "description": "该组件通过 Navigation 和 NavRouter 组件实现了一个导航路由界面，用于在不同的设置选项之间进行切换。布局宽度占据整个屏幕，高度设为 100%，背景颜色为 #F2F3F5。组件的垂直方向上被分为两个部分，每个部分包含一个导航路由项。每个导航路由项由一个 Row 组件和一个 NavDestination 组件组成，Row 组件用于显示路由项的图标和标题，NavDestination 组件用于显示路由项的详细内容。\n\n导航路由项的样式包括背景颜色、边框圆角、宽度和高度等属性，支持不同的样式展示。导航路由项之间通过 margin 属性进行分隔。导航路由项的功能包括点击事件和状态效果，用户可以通过点击导航路由项触发相应操作，导航路由项也可以在激活或未激活状态下进行展示。\n\n整个布局通过 Navigation 组件保证导航路由项在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct NavRouterExample {\n  @State isActiveWLAN: boolean = false // 状态变量，表示 WLAN 路由项是否处于激活状态\n  @State isActiveBluetooth: boolean = false // 状态变量，表示蓝牙路由项是否处于激活状态\n\n  build() {\n    Navigation() {\n      NavRouter() {\n        Row() {\n          Row()\n            .width(30) // 设置 Row 组件的宽度为 30vp\n            .height(30) // 设置 Row 组件的高度为 30vp\n            .borderRadius(30) // 设置 Row 组件的边框圆角为 30vp\n            .margin({ left: 3, right: 10 }) // 设置 Row 组件的左右边距为 3vp 和 10vp\n            .backgroundColor(Color.Pink) // 设置 Row 组件的背景颜色为粉色\n          Text('WLAN') // 显示文本 \"WLAN\"\n            .fontSize(22) // 设置文本的字体大小为 22vp\n            .fontWeight(500) // 设置文本的字体粗细为 500\n            .textAlign(TextAlign.Center) // 设置文本的对齐方式为居中对齐\n        }\n        .width('90%') // 设置 Row 组件的宽度为父容器的 90%\n        .height(60) // 设置 Row 组件的高度为 60vp\n\n        NavDestination() {\n          Flex({ direction: FlexDirection.Row }) {\n            Text('未找到可用WLAN').fontSize(30).padding({ left: 15 }) // 显示文本 \"未找到可用WLAN\"，字体大小为 30vp，左边距为 15vp\n          }\n        }.title(\"WLAN\") // 设置 NavDestination 组件的标题为 \"WLAN\"\n      }\n      .margin({ top: 10, bottom: 10 }) // 设置 NavRouter 组件的上下边距为 10vp\n      .backgroundColor(this.isActiveWLAN ? '#ccc' : '#fff') // 根据 isActiveWLAN 状态变量的值设置 NavRouter 组件的背景颜色\n      .borderRadius(20) // 设置 NavRouter 组件的边框圆角为 20vp\n      .mode(NavRouteMode.PUSH_WITH_RECREATE) // 设置 NavRouter 组件的导航模式为 PUSH_WITH_RECREATE\n      .onStateChange((isActivated: boolean) => {\n        this.isActiveWLAN = isActivated // 当 NavRouter 组件的状态发生变化时，更新 isActiveWLAN 状态变量的值\n      })\n\n      NavRouter() {\n        Row() {\n          Row()\n            .width(30) // 设置 Row 组件的宽度为 30vp\n            .height(30) // 设置 Row 组件的高度为 30vp\n            .borderRadius(30) // 设置 Row 组件的边框圆角为 30vp\n            .margin({ left: 3, right: 10 }) // 设置 Row 组件的左右边距为 3vp 和 10vp\n            .backgroundColor(Color.Pink) // 设置 Row 组件的背景颜色为粉色\n          Text('蓝牙') // 显示文本 \"蓝牙\"\n            .fontSize(22) // 设置文本的字体大小为 22vp\n            .fontWeight(500) // 设置文本的字体粗细为 500\n            .textAlign(TextAlign.Center) // 设置文本的对齐方式为居中对齐\n        }\n        .width('90%') // 设置 Row 组件的宽度为父容器的 90%\n        .height(60) // 设置 Row 组件的高度为 60vp\n\n        NavDestination() {\n          Flex({ direction: FlexDirection.Row }) {\n            Text('未找到可用蓝牙').fontSize(30).padding({ left: 15 }) // 显示文本 \"未找到可用蓝牙\"，字体大小为 30vp，左边距为 15vp\n          }\n        }.title(\"蓝牙\") // 设置 NavDestination 组件的标题为 \"蓝牙\"\n      }\n      .margin({ top: 10, bottom: 10 }) // 设置 NavRouter 组件的上下边距为 10vp\n      .backgroundColor(this.isActiveBluetooth ? '#ccc' : '#fff') // 根据 isActiveBluetooth 状态变量的值设置 NavRouter 组件的背景颜色\n      .borderRadius(20) // 设置 NavRouter 组件的边框圆角为 20vp\n      .mode(NavRouteMode.REPLACE) // 设置 NavRouter 组件的导航模式为 REPLACE\n      .onStateChange((isActivated: boolean) => {\n        this.isActiveBluetooth = isActivated // 当 NavRouter 组件的状态发生变化时，更新 isActiveBluetooth 状态变量的值\n      })\n    }\n    .height('100%') // 设置 Navigation 组件的高度为 100%\n    .width('100%') // 设置 Navigation 组件的宽度为 100%\n    .title('设置') // 设置 Navigation 组件的标题为 \"设置\"\n    .backgroundColor(\"#F2F3F5\") // 设置 Navigation 组件的背景颜色为 #F2F3F5\n    .titleMode(NavigationTitleMode.Free) // 设置 Navigation 组件的标题模式为 Free\n    .mode(NavigationMode.Auto) // 设置 Navigation 组件的导航模式为 Auto\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "NavDestination": {
        "description": "作为子页面的根容器，用于显示Navigation的内容区。NavDestination组件必须配合Navigation使用，作为Navigation目的页面的根节点，单独使用只能作为普通容器组件，不具备路由相关属性能力。",
        "details": "该组件从API Version 9开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "NavDestination()",
                "params": {}
            }
        ],
        "attributes": {
            "title": {
                "description": "设置页面标题。",
                "params": {
                    "value": {
                        "type": [
                            "string",
                            "CustomBuilder",
                            "NavDestinationCommonTitle",
                            "NavDestinationCustomTitle"
                        ],
                        "required": true,
                        "description": "页面标题。"
                    },
                    "options": {
                        "type": "NavigationTitleOptions",
                        "required": false,
                        "description": "标题选项。"
                    }
                }
            },
            "hideTitleBar": {
                "description": "设置是否隐藏标题栏。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否隐藏标题栏。",
                        "default": false
                    }
                }
            },
            "mode": {
                "description": "设置NavDestination类型，不支持动态修改。",
                "params": {
                    "value": {
                        "type": "NavDestinationMode",
                        "required": true,
                        "description": "NavDestination类型。",
                        "default": "NavDestinationMode.STANDARD"
                    }
                }
            },
            "backButtonIcon": {
                "description": "设置标题栏返回键图标。",
                "params": {
                    "value": {
                        "type": [
                            "ResourceStr",
                            "PixelMap",
                            "SymbolGlyphModifier"
                        ],
                        "required": true,
                        "description": "返回键图标。"
                    }
                }
            },
            "menus": {
                "description": "设置页面右上角菜单。",
                "params": {
                    "value": {
                        "type": [
                            "Array<NavigationMenuItem>",
                            "CustomBuilder"
                        ],
                        "required": true,
                        "description": "页面右上角菜单。"
                    }
                }
            },
            "ignoreLayoutSafeArea": {
                "description": "控制组件的布局，使其扩展到非安全区域。",
                "params": {
                    "types": {
                        "type": [
                            "Array<LayoutSafeAreaType>"
                        ],
                        "required": false,
                        "description": "配置扩展安全区域的类型。",
                        "default": [
                            "LayoutSafeAreaType.SYSTEM"
                        ]
                    },
                    "edges": {
                        "type": [
                            "Array<LayoutSafeAreaEdge>"
                        ],
                        "required": false,
                        "description": "配置扩展安全区域的方向。",
                        "default": [
                            "LayoutSafeAreaEdge.TOP",
                            "LayoutSafeAreaEdge.BOTTOM"
                        ]
                    }
                }
            },
            "systemBarStyle": {
                "description": "当Navigation中显示当前NavDestination时，设置对应系统状态栏的样式。",
                "params": {
                    "style": {
                        "type": "Optional<SystemBarStyle>",
                        "required": true,
                        "description": "系统状态栏的样式。"
                    }
                }
            }
        },
        "events": {
            "onShown": {
                "description": "当该NavDestination页面显示时触发此回调。",
                "params": {}
            },
            "onHidden": {
                "description": "当该NavDestination页面隐藏时触发此回调。",
                "params": {}
            },
            "onWillAppear": {
                "description": "当该Destination挂载之前触发此回调。",
                "params": {}
            },
            "onWillShow": {
                "description": "当该Destination显示之前触发此回调。",
                "params": {}
            },
            "onWillHide": {
                "description": "当该Destination隐藏之前触发此回调。",
                "params": {}
            },
            "onWillDisappear": {
                "description": "当该Destination卸载之前触发的生命周期(有转场动画时，在转场动画开始之前触发)。",
                "params": {}
            },
            "onBackPressed": {
                "description": "当与Navigation绑定的页面栈中存在内容时，此回调生效。当点击返回键时，触发该回调。返回值为true时，表示重写返回键逻辑，返回值为false时，表示回退到上一个页面。",
                "params": {}
            },
            "onReady": {
                "description": "当NavDestination即将构建子组件之前会触发此回调。",
                "params": {
                    "callback": {
                        "type": "Callback<NavDestinationContext>",
                        "required": true,
                        "description": "回调函数。"
                    }
                }
            }
        },
        "rules": [
            "NavDestination组件必须配合Navigation使用，作为Navigation目的页面的根节点，单独使用只能作为普通容器组件，不具备路由相关属性能力。"
        ],
        "examples": [],
        "is_common_attrs": true
    },
    "Navigator": {
        "description": "路由容器组件，提供路由跳转能力。可以包含子组件。",
        "details": null,
        "interfaces": [
            {
                "description": "Navigator(value?: {target: string, type?: NavigationType})",
                "params": {
                    "value": {
                        "type": {
                            "target": "string",
                            "type": [
                                "NavigationType"
                            ]
                        },
                        "description": "指定跳转目标页面的路径和路由方式。"
                    }
                }
            }
        ],
        "attributes": {
            "active": {
                "description": "设置当前路由组件是否处于激活状态，处于激活状态时，会生效相应的路由操作。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "路由组件是否处于激活状态。"
                    }
                }
            },
            "params": {
                "description": "设置跳转时传递到目标页面的数据。",
                "params": {
                    "value": {
                        "type": "object",
                        "required": true,
                        "description": "跳转时要同时传递到目标页面的数据，可在目标页面使用router.getParams()获得。"
                    }
                }
            },
            "target": {
                "description": "设置跳转目标页面的路径。 目标页面需加入main_pages.json文件中。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "跳转目标页面的路径。"
                    }
                }
            },
            "type": {
                "description": "设置路由跳转方式。",
                "params": {
                    "value": {
                        "type": [
                            "NavigationType"
                        ],
                        "required": true,
                        "description": "路由跳转方式。",
                        "default": "NavigationType.Push"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Flex 布局实现了一个导航页面，包含两个导航按钮。布局宽度为 350vp，高度为 150vp，内边距为 35vp。组件的垂直方向上被分为两个部分，每个部分包含一个导航按钮。每个导航按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n导航按钮的样式包括宽度占据整个父容器的宽度，文本居中对齐。第一个导航按钮用于跳转到 Detail 页面，并传递参数；第二个导航按钮用于返回前一个页面，通过点击事件触发返回操作。\n整个布局通过 Flex 布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// Navigator.ets\n@Entry\n@Component\nstruct NavigatorExample {\n  @State active: boolean = false // 用于控制第二个导航按钮的状态\n  @State name: NameObject = { name: 'news' } // 用于传递到 Detail 页面的参数\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      Navigator({ target: 'pages/container/navigator/Detail', type: NavigationType.Push }) {\n        Text('Go to ' + this.name.name + ' page') // 显示跳转页面的文本\n          .width('100%').textAlign(TextAlign.Center) // 文本宽度占据整个父容器，居中对齐\n      }.params(new TextObject(this.name)) // 传递参数到 Detail 页面\n\n      Navigator() {\n        Text('Back to previous page').width('100%').textAlign(TextAlign.Center) // 显示返回页面的文本\n      }.active(this.active) // 控制导航按钮的状态\n      .onClick(() => {\n        this.active = true // 点击后激活返回操作\n      })\n    }.height(150).width(350).padding(35) // 设置布局的高度、宽度和内边距\n  }\n}\n\ninterface NameObject {\n  name: string; // 定义用于传递的参数结构\n}\n\nclass TextObject {\n  text: NameObject; // 用于传递的参数对象\n\n  constructor(text: NameObject) {\n    this.text = text; // 构造函数，初始化参数对象\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Stepper": {
        "description": "步骤导航器组件，适用于引导用户按照步骤完成任务的导航场景。可以包含单个子组件StepperItem。",
        "details": null,
        "interfaces": [
            {
                "description": "Stepper(value?: { index?: number })",
                "params": {
                    "value": {
                        "type": {
                            "index": "number"
                        },
                        "required": false,
                        "description": "设置步骤导航器当前显示StepperItem的索引值。",
                        "default": 0
                    }
                }
            }
        ],
        "attributes": {},
        "events": {
            "onFinish": {
                "description": "步骤导航器最后一个StepperItem的nextLabel被点击时，并且ItemState属性为Normal时，触发该回调。",
                "params": {}
            },
            "onSkip": {
                "description": "当前显示的StepperItem状态为ItemState.Skip时，nextLabel被点击时触发该回调。",
                "params": {}
            },
            "onChange": {
                "description": "点击当前StepperItem的prevLabel进行步骤切换时触发该回调；或点击当前StepperItem的nextLabel，当前页面不为步骤导航器最后一个StepperItem且ItemState属性为Normal时，触发该回调。",
                "params": {
                    "prevIndex": {
                        "type": "number",
                        "required": true,
                        "description": "切换前的步骤页索引值。"
                    },
                    "index": {
                        "type": "number",
                        "required": true,
                        "description": "切换后的步骤页（前一页或者下一页）索引值。"
                    }
                }
            },
            "onNext": {
                "description": "点击StepperItem的nextLabel切换下一步骤时，当前页面不为步骤导航器最后一个StepperItem且ItemState属性为Normal时，触发该回调。",
                "params": {
                    "index": {
                        "type": "number",
                        "required": true,
                        "description": "当前步骤页索引值。"
                    },
                    "pendingIndex": {
                        "type": "number",
                        "required": true,
                        "description": "下一步骤页索引值。"
                    }
                }
            },
            "onPrevious": {
                "description": "点击StepperItem的prevLabel切换上一步骤时触发该回调。",
                "params": {
                    "index": {
                        "type": "number",
                        "required": true,
                        "description": "当前步骤页索引值。"
                    },
                    "pendingIndex": {
                        "type": "number",
                        "required": true,
                        "description": "上一步骤页索引值。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过Stepper组件实现了一个多步骤的页面导航界面。布局宽度为336vp，高度为621vp，内边距为顶部48vp、左侧12vp。组件的垂直方向上被分为四个步骤页，每个步骤页包含一个标题和一组按钮。每个步骤页的按钮以垂直布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n\n步骤页的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。步骤页之间通过Stepper组件进行分隔。步骤页的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，步骤页也可以在不同状态下进行展示，如正常、跳过、禁用和等待状态。\n\n整个布局通过Stepper组件保证步骤页在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// xxx.ets\n\n// 定义一个样式函数，用于设置步骤页的样式\n@Styles function itemStyle () {\n  .width(336) // 设置宽度为336vp\n  .height(621) // 设置高度为621vp\n  .margin({ top: 48, left: 12 }) // 设置顶部和左侧的边距\n  .borderRadius(24) // 设置边框圆角为24vp\n  .backgroundColor('#FFFFFF') // 设置背景颜色为白色\n}\n\n// 定义一个扩展样式函数，用于设置文本的样式\n@Extend(Text) function itemTextStyle () {\n  .fontColor('#182431') // 设置字体颜色为深灰色\n  .fontSize(36) // 设置字体大小为36vp\n  .fontWeight(500) // 设置字体粗细为500\n  .opacity(0.4) // 设置文本透明度为0.4\n  .margin({ top: 82, bottom: 40 }) // 设置顶部和底部的边距\n}\n\n// 定义一个入口组件，用于展示多步骤页面\n@Entry\n@Component\nstruct StepperExample {\n  @State currentIndex: number = 0 // 当前步骤页的索引，初始值为0\n  @State firstState: ItemState = ItemState.Normal // 第一个步骤页的状态，初始值为正常状态\n  @State secondState: ItemState = ItemState.Normal // 第二个步骤页的状态，初始值为正常状态\n  @State thirdState: ItemState = ItemState.Normal // 第三个步骤页的状态，初始值为正常状态\n\n  build() {\n    Stepper({\n      index: this.currentIndex // 设置当前步骤页的索引\n    }) {\n      // 第一个步骤页\n      StepperItem() {\n        Column() {\n          Text('Page One') // 显示文本“Page One”\n            .itemTextStyle() // 应用文本样式\n          Button('change status:' + this.firstState) // 显示按钮，文本为“change status:”加上当前状态\n            .backgroundColor('#007dFF') // 设置按钮背景颜色为蓝色\n            .onClick(() => {\n              this.firstState = this.firstState === ItemState.Skip ? ItemState.Normal : ItemState.Skip // 点击按钮时切换状态\n            })\n        }.itemStyle() // 应用步骤页样式\n      }\n      .nextLabel('Next') // 设置下一步按钮的标签为“Next”\n      .status(this.firstState) // 设置步骤页的状态\n\n      // 第二个步骤页\n      StepperItem() {\n        Column() {\n          Text('Page Two') // 显示文本“Page Two”\n            .itemTextStyle() // 应用文本样式\n          Button('change status:' + this.secondState) // 显示按钮，文本为“change status:”加上当前状态\n            .backgroundColor('#007dFF') // 设置按钮背景颜色为蓝色\n            .onClick(() => {\n              this.secondState = this.secondState === ItemState.Disabled ? ItemState.Normal : ItemState.Disabled // 点击按钮时切换状态\n            })\n        }.itemStyle() // 应用步骤页样式\n      }\n      .nextLabel('Next') // 设置下一步按钮的标签为“Next”\n      .prevLabel('Previous') // 设置上一步按钮的标签为“Previous”\n      .status(this.secondState) // 设置步骤页的状态\n\n      // 第三个步骤页\n      StepperItem() {\n        Column() {\n          Text('Page Three') // 显示文本“Page Three”\n            .itemTextStyle() // 应用文本样式\n          Button('change status:' + this.thirdState) // 显示按钮，文本为“change status:”加上当前状态\n            .backgroundColor('#007dFF') // 设置按钮背景颜色为蓝色\n            .onClick(() => {\n              this.thirdState = this.thirdState === ItemState.Waiting ? ItemState.Normal : ItemState.Waiting // 点击按钮时切换状态\n            })\n        }.itemStyle() // 应用步骤页样式\n      }\n      .status(this.thirdState) // 设置步骤页的状态\n\n      // 第四个步骤页\n      StepperItem() {\n        Column() {\n          Text('Page Four') // 显示文本“Page Four”\n            .itemTextStyle() // 应用文本样式\n        }.itemStyle() // 应用步骤页样式\n      }\n    }\n    .backgroundColor('#F1F3F5') // 设置背景颜色为浅灰色\n    .onFinish(() => {\n      // 此处可处理点击最后一页的Finish时的逻辑，例如路由跳转等\n      console.info('onFinish') // 打印日志\n    })\n    .onSkip(() => {\n      // 此处可处理点击跳过时的逻辑，例如动态修改Stepper的index值使其跳转到某一步骤页等\n      console.info('onSkip') // 打印日志\n    })\n    .onChange((prevIndex?: number, index?: number) => {\n      if(index){\n        this.currentIndex = index // 更新当前步骤页的索引\n      }\n    })\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "StepperItem": {
        "description": "用作Stepper组件的页面子组件。",
        "details": "该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "StepperItem()",
                "params": {}
            }
        ],
        "attributes": {
            "prevLabel": {
                "description": "设置左侧文本按钮内容，第一页没有左侧文本按钮，当步骤导航器大于一页时，除第一页外默认值都为“返回”。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "左侧文本按钮内容。"
                    }
                }
            },
            "nextLabel": {
                "description": "设置右侧文本按钮内容，最后一页默认值为“开始”，其余页默认值为“下一步”。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "右侧文本按钮内容。"
                    }
                }
            },
            "status": {
                "description": "设置步骤导航器nextLabel的显示状态。",
                "params": {
                    "value": {
                        "type": "ItemState",
                        "required": false,
                        "description": "步骤导航器nextLabel的显示状态。",
                        "default": "ItemState.Normal"
                    }
                }
            }
        },
        "events": {},
        "rules": [
            "StepperItem组件不支持设置通用宽度属性，其宽度默认撑满Stepper父组件。",
            "StepperItem组件不支持设置通用高度属性，其高度由Stepper父组件高度减去label按钮组件高度。",
            "StepperItem组件不支持设置aspectRadio/constrainSize影响长宽的属性。"
        ],
        "examples": [
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用Stepper和Tabs组件。Stepper组件用于创建一个步进器，允许用户通过点击按钮增加或减少数值。Tabs组件用于创建一个选项卡界面，用户可以通过点击不同的选项卡切换内容。\n\n布局方面，Stepper组件被放置在一个Flex容器中，宽度为100%，高度为50vp，水平和垂直居中对齐。Tabs组件也被放置在一个Flex容器中，宽度为100%，高度为300vp，水平和垂直居中对齐。每个Tab的内容是一个文本组件，显示当前选项卡的索引。\n\n样式方面，Stepper组件的按钮颜色为蓝色，文本颜色为白色，按钮的宽度和高度均为40vp。Tabs组件的选项卡标题颜色为黑色，选中时的颜色为蓝色，选项卡内容的背景颜色为浅灰色。\n\n功能方面，Stepper组件允许用户通过点击按钮增加或减少数值，数值范围为0到10。Tabs组件允许用户通过点击不同的选项卡切换内容，每个选项卡显示不同的文本内容。",
                "code": "@Entry\n@Component\nstruct StepperTabsExample {\n  @State value: number = 0; // 步进器的初始值\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // Stepper组件\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n        Stepper({ min: 0, max: 10, step: 1, value: this.value }) // 步进器的最小值、最大值、步长和初始值\n          .width('100%') // 宽度为100%\n          .height(50) // 高度为50vp\n          .backgroundColor('#007DFF') // 背景颜色为蓝色\n          .fontColor('#FFFFFF') // 文本颜色为白色\n          .buttonWidth(40) // 按钮宽度为40vp\n          .buttonHeight(40) // 按钮高度为40vp\n          .onChange((value: number) => {\n            this.value = value; // 当步进器的值改变时，更新状态\n          })\n      }\n      .width('100%')\n      .height(50)\n\n      // Tabs组件\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n        Tabs() {\n          TabContent() {\n            Text('Tab 1') // 第一个选项卡的内容\n              .fontSize(20)\n              .fontColor('#000000')\n          }\n          .tabBar({ icon: 'icon1.png', text: 'Tab 1' }) // 第一个选项卡的标题\n\n          TabContent() {\n            Text('Tab 2') // 第二个选项卡的内容\n              .fontSize(20)\n              .fontColor('#000000')\n          }\n          .tabBar({ icon: 'icon2.png', text: 'Tab 2' }) // 第二个选项卡的标题\n\n          TabContent() {\n            Text('Tab 3') // 第三个选项卡的内容\n              .fontSize(20)\n              .fontColor('#000000')\n          }\n          .tabBar({ icon: 'icon3.png', text: 'Tab 3' }) // 第三个选项卡的标题\n        }\n        .width('100%') // 宽度为100%\n        .height(300) // 高度为300vp\n        .backgroundColor('#F0F0F0') // 背景颜色为浅灰色\n        .barWidth(100) // 选项卡标题的宽度为100vp\n        .barHeight(50) // 选项卡标题的高度为50vp\n        .barMode(BarMode.Fixed) // 选项卡标题的布局模式为固定\n        .barSelectedColor('#007DFF') // 选中选项卡标题的颜色为蓝色\n        .barBackgroundColor('#FFFFFF') // 选项卡标题的背景颜色为白色\n      }\n      .width('100%')\n      .height(300)\n    }\n    .width('100%')\n    .height('100%')\n  }\n}"
            }
        ],
        "is_common_attrs": false
    },
    "Tabs": {
        "description": "通过页签进行内容视图切换的容器组件，每个页签对应一个内容视图。",
        "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。该组件从API Version 11开始默认支持安全区避让特性(默认值为：expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM]))，开发者可以重写该属性覆盖默认行为，API Version 11之前的版本需配合[expandSafeArea](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-expand-safe-area-V5)属性实现安全区避让。",
        "interfaces": [
            {
                "description": "Tabs(value?: {barPosition?: BarPosition, index?: number, controller?: TabsController})",
                "params": {
                    "value": {
                        "type": {
                            "barPosition": "BarPosition",
                            "index": "number",
                            "controller": "TabsController"
                        },
                        "description": "Tabs组件的初始化参数。"
                    }
                }
            }
        ],
        "attributes": {
            "barPosition": {
                "description": "设置Tabs的页签位置。",
                "params": {
                    "value": {
                        "type": "BarPosition",
                        "description": "Tabs的页签位置。",
                        "default": "BarPosition.Start"
                    }
                }
            },
            "index": {
                "description": "设置当前显示页签的索引。",
                "params": {
                    "value": {
                        "type": "number",
                        "description": "当前显示页签的索引。",
                        "default": 0
                    }
                }
            },
            "controller": {
                "description": "设置Tabs控制器。",
                "params": {
                    "value": {
                        "type": "TabsController",
                        "description": "Tabs控制器。"
                    }
                }
            },
            "vertical": {
                "description": "设置是否为纵向Tab。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "description": "是否为纵向Tab。",
                        "default": false
                    }
                }
            },
            "scrollable": {
                "description": "设置是否可以通过滑动页面进行页面切换。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "description": "是否可以通过滑动页面进行页面切换。",
                        "default": true
                    }
                }
            },
            "barMode": {
                "description": "设置TabBar布局模式。",
                "params": {
                    "value": {
                        "type": "BarMode",
                        "description": "TabBar布局模式。"
                    },
                    "options": {
                        "type": "ScrollableBarModeOptions",
                        "description": "Scrollable模式下的TabBar布局选项。"
                    }
                }
            },
            "barWidth": {
                "description": "设置TabBar的宽度值。",
                "params": {
                    "value": {
                        "type": "Length",
                        "description": "TabBar的宽度值。"
                    }
                }
            },
            "barHeight": {
                "description": "设置TabBar的高度值。",
                "params": {
                    "value": {
                        "type": "Length",
                        "description": "TabBar的高度值。"
                    }
                }
            },
            "animationDuration": {
                "description": "设置点击TabBar页签和调用TabsController的changeIndex接口切换TabContent的动画时长。",
                "params": {
                    "value": {
                        "type": "number",
                        "description": "点击TabBar页签和调用TabsController的changeIndex接口切换TabContent的动画时长。",
                        "default": 300
                    }
                }
            },
            "animationMode": {
                "description": "设置点击TabBar页签时切换TabContent的动画形式。",
                "params": {
                    "mode": {
                        "type": "AnimationMode",
                        "description": "点击TabBar页签时切换TabContent的动画形式。",
                        "default": "AnimationMode.CONTENT_FIRST"
                    }
                }
            },
            "divider": {
                "description": "设置区分TabBar和TabContent的分割线样式。",
                "params": {
                    "value": {
                        "type": "DividerStyle",
                        "description": "分割线样式。"
                    }
                }
            },
            "fadingEdge": {
                "description": "设置页签超过容器宽度时是否渐隐消失。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "description": "页签超过容器宽度时是否渐隐消失。",
                        "default": true
                    }
                }
            },
            "barOverlap": {
                "description": "设置TabBar是否背后变模糊并叠加在TabContent之上。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "description": "TabBar是否背后变模糊并叠加在TabContent之上。",
                        "default": false
                    }
                }
            },
            "barBackgroundColor": {
                "description": "设置TabBar的背景颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "description": "TabBar的背景颜色。",
                        "default": "Color.Transparent"
                    }
                }
            },
            "barBackgroundBlurStyle": {
                "description": "设置TabBar的背景模糊材质。",
                "params": {
                    "value": {
                        "type": "BlurStyle",
                        "description": "TabBar的背景模糊材质。",
                        "default": "BlurStyle.NONE"
                    }
                }
            },
            "barGridAlign": {
                "description": "以栅格化方式设置TabBar的可见区域。",
                "params": {
                    "value": {
                        "type": "BarGridColumnOptions",
                        "description": "TabBar栅格化方式设置的对象。"
                    }
                }
            },
            "edgeEffect": {
                "description": "设置边缘回弹效果。",
                "params": {
                    "edgeEffect": {
                        "type": "EdgeEffect",
                        "description": "边缘滑动效果。",
                        "default": "EdgeEffect.Spring"
                    }
                }
            }
        },
        "events": {
            "onChange": {
                "description": "Tab页签切换后触发的事件。",
                "params": {
                    "index": {
                        "type": "number",
                        "description": "当前显示的index索引，索引从0开始计算。"
                    }
                }
            },
            "onTabBarClick": {
                "description": "Tab页签点击后触发的事件。",
                "params": {
                    "index": {
                        "type": "number",
                        "description": "被点击的index索引，索引从0开始计算。"
                    }
                }
            },
            "onAnimationStart": {
                "description": "切换动画开始时触发该回调。",
                "params": {
                    "index": {
                        "type": "number",
                        "description": "当前显示元素的索引。"
                    },
                    "targetIndex": {
                        "type": "number",
                        "description": "切换动画目标元素的索引。"
                    },
                    "event": {
                        "type": "TabsAnimationEvent",
                        "description": "动画相关信息。"
                    }
                }
            },
            "onAnimationEnd": {
                "description": "切换动画结束时触发该回调。",
                "params": {
                    "index": {
                        "type": "number",
                        "description": "当前显示元素的索引。"
                    },
                    "event": {
                        "type": "TabsAnimationEvent",
                        "description": "动画相关信息。"
                    }
                }
            },
            "onGestureSwipe": {
                "description": "在页面跟手滑动过程中，逐帧触发该回调。",
                "params": {
                    "index": {
                        "type": "number",
                        "description": "当前显示元素的索引。"
                    },
                    "event": {
                        "type": "TabsAnimationEvent",
                        "description": "动画相关信息。"
                    }
                }
            },
            "customContentTransition": {
                "description": "自定义Tabs页面切换动画。",
                "params": {
                    "delegate": {
                        "type": "function",
                        "description": "自定义切换动画的回调函数。",
                        "params": {
                            "from": {
                                "type": "number",
                                "description": "动画开始时，当前页面的index值。"
                            },
                            "to": {
                                "type": "number",
                                "description": "动画开始时，目标页面的index值。"
                            }
                        },
                        "returns": {
                            "type": "TabContentAnimatedTransition",
                            "description": "自定义切换动画的相关信息。"
                        }
                    }
                }
            },
            "onContentWillChange": {
                "description": "自定义Tabs页面切换拦截事件能力，新页面即将显示时触发该回调。",
                "params": {
                    "currentIndex": {
                        "type": "number",
                        "description": "当前显示页面的index索引，索引从0开始计算。"
                    },
                    "comingIndex": {
                        "type": "number",
                        "description": "将要显示的新页面的index索引。"
                    }
                },
                "returns": {
                    "type": "boolean",
                    "description": "当回调函数handler的返回值为true时，Tabs可以切换到新页面。当回调函数handler的返回值为false时，Tabs无法切换到新页面，仍然显示原来页面内容。"
                }
            }
        },
        "rules": [
            "不支持自定义组件作为子组件，仅可包含子组件[TabContent](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-tabcontent-V5)，以及渲染控制类型[if/else](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-rendering-control-ifelse-V5)和[ForEach](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-rendering-control-foreach-V5), 并且if/else和ForEach下也仅支持TabContent, 不支持自定义组件。",
            "Tabs子组件的visibility属性设置为None，或者visibility属性设置为Hidden时，对应子组件不显示，但依然会在视窗内占位。"
        ],
        "examples": [
            {
                "description": "该组件通过 Tabs 组件实现了一个带有自定义 TabBar 和 TabContent 的选项卡切换界面。布局宽度占据整个屏幕，高度设为 296vp，内边距为顶部 52vp。组件的垂直方向上被分为一个 TabBar 和一个 TabContent 区域。TabBar 位于顶部，包含四个选项卡，每个选项卡的宽度为 360vp，高度为 56vp，选项卡之间的切换通过水平布局方式排列。\n\nTabBar 的样式包括背景颜色、字体颜色、字体大小、字体粗细、行高等属性，支持不同的样式展示。选项卡的内容区域通过 TabContent 组件进行分隔，每个 TabContent 区域包含一个 Column 组件，背景颜色分别为绿色、蓝色、黄色和粉色。选项卡的功能包括点击事件和状态效果，用户可以通过点击选项卡触发相应内容区域的切换，选项卡也可以在选中或未选中状态下进行展示。\n\n整个布局通过 Column 布局保证选项卡在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TabsExample {\n  @State fontColor: string = '#182431' // 未选中选项卡的字体颜色\n  @State selectedFontColor: string = '#007DFF' // 选中选项卡的字体颜色\n  @State currentIndex: number = 0 // 当前选中的选项卡索引\n  private controller: TabsController = new TabsController() // 选项卡控制器\n\n  // 自定义选项卡构建器\n  @Builder tabBuilder(index: number, name: string) {\n    Column() {\n      Text(name) // 选项卡名称\n        .fontColor(this.currentIndex === index ? this.selectedFontColor : this.fontColor) // 根据选中状态设置字体颜色\n        .fontSize(16) // 字体大小\n        .fontWeight(this.currentIndex === index ? 500 : 400) // 根据选中状态设置字体粗细\n        .lineHeight(22) // 行高\n        .margin({ top: 17, bottom: 7 }) // 上下边距\n      Divider() // 分隔线\n        .strokeWidth(2) // 分隔线宽度\n        .color('#007DFF') // 分隔线颜色\n        .opacity(this.currentIndex === index ? 1 : 0) // 根据选中状态设置分隔线透明度\n    }.width('100%') // 选项卡宽度占满父容器\n  }\n\n  build() {\n    Column() {\n      Tabs({ barPosition: BarPosition.Start, index: this.currentIndex, controller: this.controller }) {\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#00CB87') // 绿色背景的 TabContent\n        }.tabBar(this.tabBuilder(0, 'green')) // 使用自定义构建器创建选项卡\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#007DFF') // 蓝色背景的 TabContent\n        }.tabBar(this.tabBuilder(1, 'blue')) // 使用自定义构建器创建选项卡\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#FFBF00') // 黄色背景的 TabContent\n        }.tabBar(this.tabBuilder(2, 'yellow')) // 使用自定义构建器创建选项卡\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#E67C92') // 粉色背景的 TabContent\n        }.tabBar(this.tabBuilder(3, 'pink')) // 使用自定义构建器创建选项卡\n      }\n      .vertical(false) // 水平布局\n      .barMode(BarMode.Fixed) // 固定 TabBar 模式\n      .barWidth(360) // TabBar 宽度\n      .barHeight(56) // TabBar 高度\n      .animationDuration(400) // 切换动画持续时间\n      .onChange((index: number) => {\n        this.currentIndex = index // 更新当前选中的选项卡索引\n      })\n      .width(360) // Tabs 组件宽度\n      .height(296) // Tabs 组件高度\n      .margin({ top: 52 }) // 顶部边距\n      .backgroundColor('#F1F3F5') // 背景颜色\n    }.width('100%') // 父容器宽度占满屏幕\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个包含Tabs组件的界面，Tabs组件用于在多个TabContent之间切换。布局宽度占据整个屏幕，高度设为500vp，内边距为顶部24vp、左右24vp。组件的垂直方向上被分为两个部分：一个按钮和一个Tabs组件。按钮用于切换Tabs组件的barOverlap属性，从而控制TabBar是否背后变模糊并叠加在TabContent之上。Tabs组件的TabBar位于顶部，包含三个TabContent，每个TabContent包含一个Column布局，Column布局中包含两个Text组件，分别显示barOverlap和barBackgroundColor的值。每个TabContent的背景颜色不同，分别为粉色、黄色和绿色。Tabs组件的高度为60%，TabBar的背景颜色为半透明的灰色。",
                "code": "@Entry\n@Component\nstruct barBackgroundColorTest {\n  // 创建一个TabsController实例，用于控制Tabs组件\n  private controller: TabsController = new TabsController()\n  \n  // 定义一个状态变量barOverlap，用于控制TabBar是否背后变模糊并叠加在TabContent之上\n  @State barOverlap: boolean = true;\n  \n  // 定义一个状态变量barBackgroundColor，用于设置TabBar的背景颜色\n  @State barBackgroundColor: string = '#88888888';\n\n  build() {\n    Column() {\n      // 创建一个按钮，用于切换barOverlap的值\n      Button(\"barOverlap变化\").width('100%').margin({ bottom: '12vp' })\n        .onClick((event?: ClickEvent) => {\n          // 点击按钮时，切换barOverlap的值\n          if (this.barOverlap) {\n            this.barOverlap = false;\n          } else {\n            this.barOverlap = true;\n          }\n        })\n\n      // 创建一个Tabs组件，包含三个TabContent\n      Tabs({ barPosition: BarPosition.Start, index: 0, controller: this.controller }) {\n        // 第一个TabContent\n        TabContent() {\n          Column() {\n            // 显示barOverlap的值\n            Text(`barOverlap ${this.barOverlap}`).fontSize(16).margin({ top: this.barOverlap ? '56vp' : 0 })\n            // 显示barBackgroundColor的值\n            Text(`barBackgroundColor ${this.barBackgroundColor}`).fontSize(16)\n          }.width('100%').height('100%')\n          .backgroundColor(Color.Pink) // 设置背景颜色为粉色\n        }\n        .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), \"1\")) // 设置TabBar的图标和文本\n\n        // 第二个TabContent\n        TabContent() {\n          Column() {\n            // 显示barOverlap的值\n            Text(`barOverlap ${this.barOverlap}`).fontSize(16).margin({ top: this.barOverlap ? '56vp' : 0 })\n            // 显示barBackgroundColor的值\n            Text(`barBackgroundColor ${this.barBackgroundColor}`).fontSize(16)\n          }.width('100%').height('100%')\n          .backgroundColor(Color.Yellow) // 设置背景颜色为黄色\n        }\n        .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), \"2\")) // 设置TabBar的图标和文本\n\n        // 第三个TabContent\n        TabContent() {\n          Column() {\n            // 显示barOverlap的值\n            Text(`barOverlap ${this.barOverlap}`).fontSize(16).margin({ top: this.barOverlap ? '56vp' : 0 })\n            // 显示barBackgroundColor的值\n            Text(`barBackgroundColor ${this.barBackgroundColor}`).fontSize(16)\n          }.width('100%').height('100%')\n          .backgroundColor(Color.Green) // 设置背景颜色为绿色\n        }\n        .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), \"3\")) // 设置TabBar的图标和文本\n      }\n      .vertical(false) // 设置Tabs组件为水平布局\n      .barMode(BarMode.Fixed) // 设置TabBar为固定模式\n      .height('60%') // 设置Tabs组件的高度为60%\n      .barOverlap(this.barOverlap) // 设置TabBar是否背后变模糊并叠加在TabContent之上\n      .scrollable(true) // 设置Tabs组件可滚动\n      .animationDuration(10) // 设置Tabs组件的动画持续时间为10毫秒\n      .barBackgroundColor(this.barBackgroundColor) // 设置TabBar的背景颜色\n    }\n    .height(500) // 设置Column布局的高度为500vp\n    .padding({ top: '24vp', left: '24vp', right: '24vp' }) // 设置Column布局的内边距\n  }\n}"
            },
            {
                "description": "该组件通过自定义的Tabs页面切换动画实现了一个具有动态效果的Tabs界面。布局宽度占据整个屏幕，高度设为500vp，背景颜色为浅灰色（0xf1f3f5）。组件的垂直方向上包含一个Tabs组件，Tabs组件内部通过ForEach循环遍历数据数组，生成多个TabContent。每个TabContent的标签文本和背景颜色根据数据数组中的元素动态设置。\n\n每个TabContent的样式包括透明度和缩放比例，这些样式属性通过@State变量opacityList和scaleList进行管理。在Tabs切换时，通过自定义的customContentTransition函数实现TabContent的动画效果。动画效果包括透明度和缩放比例的变化，动画持续时间和延迟时间根据数据数组的长度动态计算。\n\n组件的功能包括Tabs页面的切换和自定义动画效果的展示。用户可以通过点击Tabs标签切换不同的页面，切换过程中会触发自定义的动画效果，动画效果包括当前页面的透明度逐渐降低并缩小，目标页面的透明度逐渐增加并放大。\n\n整个布局通过Column布局保证Tabs组件在垂直方向上居中显示，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TabsCustomAnimationExample {\n  // 定义数据类型，包含文本和背景颜色\n  interface itemType {\n    text: string,\n    backgroundColor: Color\n  }\n\n  // 数据数组，包含多个itemType对象\n  @State data: itemType[] = [\n    {\n      text: 'Red',\n      backgroundColor: Color.Red\n    },\n    {\n      text: 'Yellow',\n      backgroundColor: Color.Yellow\n    },\n    {\n      text: 'Blue',\n      backgroundColor: Color.Blue\n    }\n  ]\n\n  // 透明度列表，用于管理每个TabContent的透明度\n  @State opacityList: number[] = []\n  // 缩放比例列表，用于管理每个TabContent的缩放比例\n  @State scaleList: number[] = []\n\n  // 动画持续时间列表，用于管理每个TabContent的动画持续时间\n  private durationList: number[] = []\n  // 动画延迟时间列表，用于管理每个TabContent的动画延迟时间\n  private timeoutList: number[] = []\n\n  // 自定义的TabContent切换动画函数\n  private customContentTransition: (from: number, to: number) => TabContentAnimatedTransition = (from: number, to: number) => {\n    let tabContentAnimatedTransition = {\n      // 动画延迟时间\n      timeout: this.timeoutList[from],\n      // 动画效果实现\n      transition: (proxy: TabContentTransitionProxy) => {\n        // 设置当前TabContent的缩放比例和透明度\n        this.scaleList[from] = 1.0\n        this.scaleList[to] = 0.5\n        this.opacityList[from] = 1.0\n        this.opacityList[to] = 0.5\n        // 执行动画\n        animateTo({\n          // 动画持续时间\n          duration: this.durationList[from],\n          // 动画结束回调\n          onFinish: () => {\n            // 完成动画切换\n            proxy.finishTransition()\n          }\n        }, () => {\n          // 设置目标TabContent的缩放比例和透明度\n          this.scaleList[from] = 0.5\n          this.scaleList[to] = 1.0\n          this.opacityList[from] = 0.5\n          this.opacityList[to] = 1.0\n        })\n      }\n    } as TabContentAnimatedTransition\n    return tabContentAnimatedTransition\n  }\n\n  // 组件初始化时执行的函数\n  aboutToAppear(): void {\n    let duration = 1000\n    let timeout = 1000\n    // 根据数据数组的长度初始化透明度、缩放比例、动画持续时间和延迟时间列表\n    for (let i = 1; i <= this.data.length; i++) {\n      this.opacityList.push(1.0)\n      this.scaleList.push(1.0)\n      this.durationList.push(duration * i)\n      this.timeoutList.push(timeout * i)\n    }\n  }\n\n  // 构建组件UI\n  build() {\n    Column() {\n      Tabs() {\n        // 遍历数据数组，生成多个TabContent\n        ForEach(this.data, (item: itemType, index: number) => {\n          TabContent() {}\n          .tabBar(item.text) // 设置TabContent的标签文本\n          .backgroundColor(item.backgroundColor) // 设置TabContent的背景颜色\n          .opacity(this.opacityList[index]) // 设置TabContent的透明度\n          .scale({ x: this.scaleList[index], y: this.scaleList[index] }) // 设置TabContent的缩放比例\n        })\n      }\n      .backgroundColor(0xf1f3f5) // 设置Tabs的背景颜色\n      .width('100%') // 设置Tabs的宽度为100%\n      .height(500) // 设置Tabs的高度为500vp\n      .customContentTransition(this.customContentTransition) // 设置自定义的TabContent切换动画\n    }\n  }\n}"
            },
            {
                "description": "该示例展示了如何使用鸿蒙ArkUI框架中的Tabs组件，并通过preloadItems接口实现预加载指定子节点。布局上，整个界面由一个Column容器包裹，内部包含一个Tabs组件和一个Button组件。Tabs组件包含四个TabContent子组件，每个TabContent子组件内嵌一个MyComponent组件。每个MyComponent组件根据传入的颜色参数设置背景颜色。Tabs组件的宽度为360vp，高度为296vp，背景颜色为#F1F3F5。Button组件用于触发预加载操作，点击后会预加载指定索引的TabContent子组件。\n\n布局属性：\n- Column容器：用于垂直排列Tabs组件和Button组件。\n- Tabs组件：宽度为360vp，高度为296vp，背景颜色为#F1F3F5。\n- Button组件：设置了5vp的边距。\n\n组件的样式和外观：\n- Tabs组件：背景颜色为#F1F3F5，每个TabContent子组件的tabBar样式通过SubTabBarStyle.of方法设置为不同的颜色（green、blue、yellow、pink）。\n- MyComponent组件：根据传入的颜色参数设置背景颜色。\n- Button组件：文本内容为'preload items: [0, 2, 3]'，设置了5vp的边距。\n\n组件的排列和嵌套关系：\n- Column容器：垂直排列Tabs组件和Button组件。\n- Tabs组件：包含四个TabContent子组件，每个TabContent子组件内嵌一个MyComponent组件。\n\n组件的功能和交互：\n- Tabs组件：通过onChange事件监听当前选中的Tab索引，并更新currentIndex状态。\n- Button组件：点击后调用tabsController的preloadItems方法，预加载指定索引的TabContent子组件，并在控制台输出预加载成功或失败的信息。",
                "code": "import { BusinessError } from '@kit.BasicServicesKit'\n\n@Entry\n@Component\nstruct TabsPreloadItems {\n  @State currentIndex: number = 1 // 当前选中的Tab索引，初始值为1\n  private tabsController: TabsController = new TabsController() // Tabs组件的控制器\n\n  build() {\n    Column() {\n      Tabs({ index: this.currentIndex, controller: this.tabsController }) {\n        TabContent() {\n          MyComponent({ color: '#00CB87' }) // 第一个TabContent子组件，背景颜色为#00CB87\n        }.tabBar(SubTabBarStyle.of('green')) // 设置tabBar样式为绿色\n\n        TabContent() {\n          MyComponent({ color: '#007DFF' }) // 第二个TabContent子组件，背景颜色为#007DFF\n        }.tabBar(SubTabBarStyle.of('blue')) // 设置tabBar样式为蓝色\n\n        TabContent() {\n          MyComponent({ color: '#FFBF00' }) // 第三个TabContent子组件，背景颜色为#FFBF00\n        }.tabBar(SubTabBarStyle.of('yellow')) // 设置tabBar样式为黄色\n\n        TabContent() {\n          MyComponent({ color: '#E67C92' }) // 第四个TabContent子组件，背景颜色为#E67C92\n        }.tabBar(SubTabBarStyle.of('pink')) // 设置tabBar样式为粉色\n      }\n      .width(360) // Tabs组件的宽度为360vp\n      .height(296) // Tabs组件的高度为296vp\n      .backgroundColor('#F1F3F5') // Tabs组件的背景颜色为#F1F3F5\n      .onChange((index: number) => {\n        this.currentIndex = index // 监听Tab切换事件，更新当前选中的Tab索引\n      })\n\n      Button('preload items: [0, 2, 3]')\n        .margin(5) // Button组件的边距为5vp\n        .onClick(() => {\n          this.tabsController.preloadItems([0, 2, 3]) // 点击Button后预加载索引为0、2、3的TabContent子组件\n            .then(() => {\n              console.info('preloadItems success.') // 预加载成功时在控制台输出信息\n            })\n            .catch((error: BusinessError) => {\n              console.error('preloadItems failed, error code: ' + error.code + ', error message: ' + error.message) // 预加载失败时在控制台输出错误信息\n            })\n        })\n    }\n  }\n}\n\n@Component\nstruct MyComponent {\n  private color: string = \"\" // 背景颜色\n\n  aboutToAppear(): void {\n    console.info('aboutToAppear backgroundColor:' + this.color) // 组件即将显示时在控制台输出背景颜色\n  }\n\n  aboutToDisappear(): void {\n    console.info('aboutToDisappear backgroundColor:' + this.color) // 组件即将消失时在控制台输出背景颜色\n  }\n\n  build() {\n    Column()\n      .width('100%') // 组件的宽度为100%\n      .height('100%') // 组件的高度为100%\n      .backgroundColor(this.color) // 设置组件的背景颜色\n  }\n}"
            },
            {
                "description": "该组件通过 Tabs 组件实现了一个带有自定义手势滑动切换拦截的页面切换功能。布局宽度为 360vp，高度为 600vp，背景颜色为 #F1F3F5。组件的垂直方向上包含一个 Tabs 组件和一个按钮组。Tabs 组件的标签栏位于底部，宽度为 360vp，高度为 60vp，标签栏模式为固定模式。Tabs 组件的内容区域可以水平滑动，且在滑动到特定页面时会触发拦截逻辑。\n\nTabs 组件的每个标签页内容通过 TabContent 组件实现，每个 TabContent 包含一个 Column 组件，Column 组件内包含一个 Text 组件，用于显示当前标签页的内容。每个标签页的背景颜色不同，分别为 #00CB87、#007DFF、#FFBF00 和 #E67C92。\n\n按钮组包含两个按钮，分别为“动态修改index”和“changeIndex”，按钮的宽度为 50%，顶部边距为 20vp。按钮的功能包括点击事件，用户可以通过点击按钮动态修改当前选中的标签页索引。\n\n整个布局通过 Column 组件保证 Tabs 组件和按钮组在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TabsExample {\n  @State currentIndex: number = 2 // 当前选中的标签页索引，初始值为 2\n  private controller: TabsController = new TabsController() // Tabs 组件的控制器\n\n  // 自定义标签栏构建器，根据当前选中的索引设置标签栏文本的颜色\n  @Builder tabBuilder(title: string, targetIndex: number) {\n    Column() {\n      Text(title).fontColor(this.currentIndex === targetIndex ? '#1698CE' : '#6B6B6B') // 根据当前索引设置文本颜色\n    }.width('100%')\n     .height(50)\n     .justifyContent(FlexAlign.Center) // 内容居中对齐\n  }\n\n  build() {\n    Column() {\n      Tabs({ barPosition: BarPosition.End, controller: this.controller, index: this.currentIndex }) {\n        TabContent() {\n          Column() {\n            Text('首页的内容')\n          }.width('100%').height('100%').backgroundColor('#00CB87').justifyContent(FlexAlign.Center) // 首页内容，背景颜色为 #00CB87\n        }.tabBar(this.tabBuilder('首页', 0)) // 使用自定义标签栏构建器\n\n        TabContent() {\n          Column() {\n            Text('发现的内容')\n          }.width('100%').height('100%').backgroundColor('#007DFF').justifyContent(FlexAlign.Center) // 发现内容，背景颜色为 #007DFF\n        }.tabBar(this.tabBuilder('发现', 1))\n\n        TabContent() {\n          Column() {\n            Text('推荐的内容')\n          }.width('100%').height('100%').backgroundColor('#FFBF00').justifyContent(FlexAlign.Center) // 推荐内容，背景颜色为 #FFBF00\n        }.tabBar(this.tabBuilder('推荐', 2))\n\n        TabContent() {\n          Column() {\n            Text('我的内容')\n          }.width('100%').height('100%').backgroundColor('#E67C92').justifyContent(FlexAlign.Center) // 我的内容，背景颜色为 #E67C92\n        }.tabBar(this.tabBuilder('我的', 3))\n      }\n      .vertical(false) // 标签页内容水平滑动\n      .barMode(BarMode.Fixed) // 标签栏固定模式\n      .barWidth(360) // 标签栏宽度\n      .barHeight(60) // 标签栏高度\n      .animationDuration(0) // 切换动画时长为 0\n      .onChange((index: number) => {\n        this.currentIndex = index // 更新当前选中的标签页索引\n      })\n      .width(360) // Tabs 组件宽度\n      .height(600) // Tabs 组件高度\n      .backgroundColor('#F1F3F5') // Tabs 组件背景颜色\n      .scrollable(true) // 标签页内容可滚动\n      .onContentWillChange((currentIndex, comingIndex) => {\n        if (comingIndex == 2) {\n          return false // 拦截滑动到索引为 2 的标签页\n        }\n        return true // 允许滑动到其他标签页\n      })\n\n      Button('动态修改index').width('50%').margin({ top: 20 })\n        .onClick(() => {\n          this.currentIndex = (this.currentIndex + 1) % 4 // 点击按钮动态修改当前选中的标签页索引\n        })\n\n      Button('changeIndex').width('50%').margin({ top: 20 })\n        .onClick(() => {\n          this.currentIndex = (this.currentIndex + 1) % 4 // 点击按钮动态修改当前选中的标签页索引\n          this.controller.changeIndex(this.currentIndex) // 使用控制器更新标签页索引\n        })\n    }.width('100%') // Column 组件宽度\n  }\n}"
            },
            {
                "description": "该组件通过两个Tabs组件实现了一个展示多个子页签的界面，并提供了切换子页签时是否渐隐的功能。布局宽度占据整个屏幕，高度设为30%，内边距为顶部24vp、左右24vp。组件的垂直方向上被分为两个部分，每个部分包含一组子页签。每个子页签的内容以不同的背景颜色展示，且子页签的标题显示在页签栏中。\n\n第一个Tabs组件的页签栏位于底部，水平排列，支持滚动，页签栏高度为80vp，动画切换时间为400毫秒。第二个Tabs组件的页签栏位于顶部，垂直排列，支持滚动，页签栏高度为200vp，宽度为80vp，动画切换时间为400毫秒。两个Tabs组件都支持通过点击按钮来切换子页签的渐隐效果。\n\n按钮的样式包括宽度占据整个屏幕，底部边距为12vp。按钮的功能包括点击事件，用户可以通过点击按钮触发相应操作，切换子页签的渐隐效果。\n\n整个布局通过Column布局保证两个Tabs组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TabsOpaque {\n  @State message: string = 'Hello World' // 状态变量，用于存储消息内容\n  private controller: TabsController = new TabsController() // 第一个Tabs组件的控制器\n  private controller1: TabsController = new TabsController() // 第二个Tabs组件的控制器\n  @State selfFadingFade: boolean = true; // 状态变量，用于控制子页签的渐隐效果\n\n  build() {\n    Column() {\n      Button('子页签设置渐隐').width('100%').margin({ bottom: '12vp' }) // 按钮，点击后设置子页签渐隐\n        .onClick((event?: ClickEvent) => {\n          this.selfFadingFade = true; // 设置子页签渐隐\n        })\n      Button('子页签设置不渐隐').width('100%').margin({ bottom: '12vp' }) // 按钮，点击后设置子页签不渐隐\n        .onClick((event?: ClickEvent) => {\n          this.selfFadingFade = false; // 设置子页签不渐隐\n        })\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) { // 第一个Tabs组件，页签栏位于底部\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Pink) // 子页签内容，背景颜色为粉色\n        }.tabBar('pink') // 子页签标题为\"pink\"\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Yellow) // 子页签内容，背景颜色为黄色\n        }.tabBar('yellow') // 子页签标题为\"yellow\"\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Blue) // 子页签内容，背景颜色为蓝色\n        }.tabBar('blue') // 子页签标题为\"blue\"\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green) // 子页签内容，背景颜色为绿色\n        }.tabBar('green') // 子页签标题为\"green\"\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green) // 子页签内容，背景颜色为绿色\n        }.tabBar('green') // 子页签标题为\"green\"\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green) // 子页签内容，背景颜色为绿色\n        }.tabBar('green') // 子页签标题为\"green\"\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green) // 子页签内容，背景颜色为绿色\n        }.tabBar('green') // 子页签标题为\"green\"\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green) // 子页签内容，背景颜色为绿色\n        }.tabBar('green') // 子页签标题为\"green\"\n      }\n      .vertical(false) // 页签栏水平排列\n      .scrollable(true) // 页签栏支持滚动\n      .barMode(BarMode.Scrollable) // 页签栏模式为可滚动\n      .barHeight(80) // 页签栏高度为80vp\n      .animationDuration(400) // 动画切换时间为400毫秒\n      .onChange((index: number) => {\n        console.info(index.toString()) // 页签切换时输出当前页签的索引\n      })\n      .fadingEdge(this.selfFadingFade) // 设置子页签的渐隐效果\n      .height('30%') // Tabs组件高度为30%\n      .width('100%') // Tabs组件宽度为100%\n\n      Tabs({ barPosition: BarPosition.Start, controller: this.controller1 }) { // 第二个Tabs组件，页签栏位于顶部\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Pink) // 子页签内容，背景颜色为粉色\n        }.tabBar('pink') // 子页签标题为\"pink\"\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Yellow) // 子页签内容，背景颜色为黄色\n        }.tabBar('yellow') // 子页签标题为\"yellow\"\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Blue) // 子页签内容，背景颜色为蓝色\n        }.tabBar('blue') // 子页签标题为\"blue\"\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green) // 子页签内容，背景颜色为绿色\n        }.tabBar('green') // 子页签标题为\"green\"\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green) // 子页签内容，背景颜色为绿色\n        }.tabBar('green') // 子页签标题为\"green\"\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green) // 子页签内容，背景颜色为绿色\n        }.tabBar('green') // 子页签标题为\"green\"\n      }\n      .vertical(true) // 页签栏垂直排列\n      .scrollable(true) // 页签栏支持滚动\n      .barMode(BarMode.Scrollable) // 页签栏模式为可滚动\n      .barHeight(200) // 页签栏高度为200vp\n      .barWidth(80) // 页签栏宽度为80vp\n      .animationDuration(400) // 动画切换时间为400毫秒\n      .onChange((index: number) => {\n        console.info(index.toString()) // 页签切换时输出当前页签的索引\n      })\n      .fadingEdge(this.selfFadingFade) // 设置子页签的渐隐效果\n      .height('30%') // Tabs组件高度为30%\n      .width('100%') // Tabs组件宽度为100%\n    }\n    .padding({ top: '24vp', left: '24vp', right: '24vp' }) // 设置内边距\n  }\n}"
            },
            {
                "description": "该组件通过栅格化方式设置TabBar的可见区域，并提供了动态调整栅格参数的功能。布局宽度占据整个屏幕，高度设为500vp，内边距为10vp。组件的垂直方向上被分为多个部分，每个部分包含一组按钮和一个Tabs组件。\n按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Row组件进行分隔。\nTabs组件的TabBar位于底部，包含三个TabContent，每个TabContent的内容为一个带有不同背景颜色的Column组件。TabBar的栅格化布局参数（如margin、gutter、sm）可以通过按钮进行动态调整。\n整个布局通过Column和Row组件保证按钮和Tabs在垂直和水平方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TabsExample5 {\n  private controller: TabsController = new TabsController() // 创建一个TabsController实例，用于控制Tabs组件的切换\n  @State gridMargin: number = 10 // 定义一个状态变量gridMargin，用于控制TabBar的栅格化布局的margin\n  @State gridGutter: number = 10 // 定义一个状态变量gridGutter，用于控制TabBar的栅格化布局的gutter\n  @State sm: number = -2 // 定义一个状态变量sm，用于控制TabBar的栅格化布局的sm\n  @State clickedContent: string = \"\" // 定义一个状态变量clickedContent，用于记录被点击的TabContent的索引\n\n  build() {\n    Column() {\n      Row() {\n        Button(\"gridMargin+10 \" + this.gridMargin) // 创建一个按钮，显示当前的gridMargin值，并提供增加gridMargin的功能\n          .width('47%') // 设置按钮的宽度为父容器的47%\n          .height(50) // 设置按钮的高度为50vp\n          .margin({ top: 5 }) // 设置按钮的上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮的点击事件，点击时增加gridMargin的值\n            this.gridMargin += 10\n          })\n          .margin({ right: '6%', bottom: '12vp' }) // 设置按钮的右边距为6%，下边距为12vp\n        Button(\"gridMargin-10 \" + this.gridMargin) // 创建一个按钮，显示当前的gridMargin值，并提供减少gridMargin的功能\n          .width('47%') // 设置按钮的宽度为父容器的47%\n          .height(50) // 设置按钮的高度为50vp\n          .margin({ top: 5 }) // 设置按钮的上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮的点击事件，点击时减少gridMargin的值\n            this.gridMargin -= 10\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮的下边距为12vp\n      }\n\n      Row() {\n        Button(\"gridGutter+10 \" + this.gridGutter) // 创建一个按钮，显示当前的gridGutter值，并提供增加gridGutter的功能\n          .width('47%') // 设置按钮的宽度为父容器的47%\n          .height(50) // 设置按钮的高度为50vp\n          .margin({ top: 5 }) // 设置按钮的上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮的点击事件，点击时增加gridGutter的值\n            this.gridGutter += 10\n          })\n          .margin({ right: '6%', bottom: '12vp' }) // 设置按钮的右边距为6%，下边距为12vp\n        Button(\"gridGutter-10 \" + this.gridGutter) // 创建一个按钮，显示当前的gridGutter值，并提供减少gridGutter的功能\n          .width('47%') // 设置按钮的宽度为父容器的47%\n          .height(50) // 设置按钮的高度为50vp\n          .margin({ top: 5 }) // 设置按钮的上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮的点击事件，点击时减少gridGutter的值\n            this.gridGutter -= 10\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮的下边距为12vp\n      }\n\n      Row() {\n        Button(\"sm+2 \" + this.sm) // 创建一个按钮，显示当前的sm值，并提供增加sm的功能\n          .width('47%') // 设置按钮的宽度为父容器的47%\n          .height(50) // 设置按钮的高度为50vp\n          .margin({ top: 5 }) // 设置按钮的上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮的点击事件，点击时增加sm的值\n            this.sm += 2\n          })\n          .margin({ right: '6%' }) // 设置按钮的右边距为6%\n        Button(\"sm-2 \" + this.sm).width('47%').height(50).margin({ top: 5 }) // 创建一个按钮，显示当前的sm值，并提供减少sm的功能\n          .onClick((event?: ClickEvent) => { // 设置按钮的点击事件，点击时减少sm的值\n            this.sm -= 2\n          })\n      }\n\n      Text(\"点击内容:\" + this.clickedContent).width('100%').height(200).margin({ top: 5 }) // 创建一个Text组件，显示被点击的TabContent的索引\n\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) { // 创建一个Tabs组件，TabBar位于底部，并使用之前创建的TabsController实例\n        TabContent() { // 创建第一个TabContent\n          Column().width('100%').height('100%').backgroundColor(Color.Pink) // 设置TabContent的内容为一个粉色背景的Column组件\n        }.tabBar(BottomTabBarStyle.of($r(\"sys.media.ohos_app_icon\"), \"1\")) // 设置TabBar的样式，使用系统资源sys.media.ohos_app_icon作为图标，文本为\"1\"\n\n        TabContent() { // 创建第二个TabContent\n          Column().width('100%').height('100%').backgroundColor(Color.Green) // 设置TabContent的内容为一个绿色背景的Column组件\n        }.tabBar(BottomTabBarStyle.of($r(\"sys.media.ohos_app_icon\"), \"2\")) // 设置TabBar的样式，使用系统资源sys.media.ohos_app_icon作为图标，文本为\"2\"\n\n        TabContent() { // 创建第三个TabContent\n          Column().width('100%').height('100%').backgroundColor(Color.Blue) // 设置TabContent的内容为一个蓝色背景的Column组件\n        }.tabBar(BottomTabBarStyle.of($r(\"sys.media.ohos_app_icon\"), \"3\")) // 设置TabBar的样式，使用系统资源sys.media.ohos_app_icon作为图标，文本为\"3\"\n      }\n      .width('350vp') // 设置Tabs组件的宽度为350vp\n      .animationDuration(300) // 设置Tabs组件的动画持续时间为300毫秒\n      .height('60%') // 设置Tabs组件的高度为父容器的60%\n      .barGridAlign({ sm: this.sm, margin: this.gridMargin, gutter: this.gridGutter }) // 设置TabBar的栅格化布局参数\n      .backgroundColor(0xf1f3f5) // 设置Tabs组件的背景颜色为浅灰色\n      .onTabBarClick((index: number) => { // 设置TabBar的点击事件，点击时记录被点击的TabContent的索引\n        this.clickedContent += \"now index \" + index + \" is clicked\\n\";\n      })\n    }\n    .width('100%') // 设置Column组件的宽度为100%\n    .height(500) // 设置Column组件的高度为500vp\n    .margin({ top: 5 }) // 设置Column组件的上边距为5vp\n    .padding('10vp') // 设置Column组件的内边距为10vp\n  }\n}"
            },
            {
                "description": "该组件通过Column和Row布局实现了一个包含多个按钮和Tabs组件的界面。布局宽度占据整个屏幕，高度设为500vp，内边距为24vp。组件的垂直方向上被分为多个部分，每个部分包含一组按钮和一个Tabs组件。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Row组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\nTabs组件的布局高度占据整个布局的60%，背景颜色为浅灰色（0xf1f3f5），TabBar的位置在Tabs的底部（BarPosition.End）。Tabs组件支持滚动模式（Scrollable），并且可以通过按钮动态调整滚动边距（scrollMargin）和布局样式（layoutStyle）。\n整个布局通过Column和Row布局保证按钮和Tabs组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TabsExample6 {\n  private controller: TabsController = new TabsController() // 创建一个TabsController实例，用于控制Tabs组件的行为\n  @State scrollMargin: number = 0 // 定义一个状态变量scrollMargin，用于控制Tabs组件的滚动边距\n  @State layoutStyle: LayoutStyle = LayoutStyle.ALWAYS_CENTER // 定义一个状态变量layoutStyle，用于控制Tabs组件的布局样式\n  @State text: string = \"文本\" // 定义一个状态变量text，用于控制TabBar的文本内容\n\n  build() {\n    Column() {\n      Row() {\n        Button(\"scrollMargin+10 \" + this.scrollMargin) // 创建一个按钮，点击后增加scrollMargin的值\n          .width('47%') // 设置按钮的宽度为47%\n          .height(50) // 设置按钮的高度为50vp\n          .margin({ top: 5 }) // 设置按钮的上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮的点击事件\n            this.scrollMargin += 10 // 点击按钮后，scrollMargin增加10\n          })\n          .margin({ right: '6%', bottom: '12vp' }) // 设置按钮的右边距为6%，下边距为12vp\n        Button(\"scrollMargin-10 \" + this.scrollMargin) // 创建一个按钮，点击后减少scrollMargin的值\n          .width('47%') // 设置按钮的宽度为47%\n          .height(50) // 设置按钮的高度为50vp\n          .margin({ top: 5 }) // 设置按钮的上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮的点击事件\n            this.scrollMargin -= 10 // 点击按钮后，scrollMargin减少10\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮的下边距为12vp\n      }\n\n      Row() {\n        Button(\"文本增加 \") // 创建一个按钮，点击后增加text的值\n          .width('47%') // 设置按钮的宽度为47%\n          .height(50) // 设置按钮的高度为50vp\n          .margin({ top: 5 }) // 设置按钮的上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮的点击事件\n            this.text += '文本增加' // 点击按钮后，text增加“文本增加”\n          })\n          .margin({ right: '6%', bottom: '12vp' }) // 设置按钮的右边距为6%，下边距为12vp\n        Button(\"文本重置\") // 创建一个按钮，点击后重置text的值\n          .width('47%') // 设置按钮的宽度为47%\n          .height(50) // 设置按钮的高度为50vp\n          .margin({ top: 5 }) // 设置按钮的上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮的点击事件\n            this.text = \"文本\" // 点击按钮后，text重置为“文本”\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮的下边距为12vp\n      }\n\n      Row() {\n        Button(\"layoutStyle.ALWAYS_CENTER\") // 创建一个按钮，点击后将layoutStyle设置为ALWAYS_CENTER\n          .width('100%') // 设置按钮的宽度为100%\n          .height(50) // 设置按钮的高度为50vp\n          .margin({ top: 5 }) // 设置按钮的上边距为5vp\n          .fontSize(15) // 设置按钮的字体大小为15\n          .onClick((event?: ClickEvent) => { // 设置按钮的点击事件\n            this.layoutStyle = LayoutStyle.ALWAYS_CENTER; // 点击按钮后，layoutStyle设置为ALWAYS_CENTER\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮的下边距为12vp\n      }\n\n      Row() {\n        Button(\"layoutStyle.ALWAYS_AVERAGE_SPLIT\") // 创建一个按钮，点击后将layoutStyle设置为ALWAYS_AVERAGE_SPLIT\n          .width('100%') // 设置按钮的宽度为100%\n          .height(50) // 设置按钮的高度为50vp\n          .margin({ top: 5 }) // 设置按钮的上边距为5vp\n          .fontSize(15) // 设置按钮的字体大小为15\n          .onClick((event?: ClickEvent) => { // 设置按钮的点击事件\n            this.layoutStyle = LayoutStyle.ALWAYS_AVERAGE_SPLIT; // 点击按钮后，layoutStyle设置为ALWAYS_AVERAGE_SPLIT\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮的下边距为12vp\n      }\n\n      Row() {\n        Button(\"layoutStyle.SPACE_BETWEEN_OR_CENTER\") // 创建一个按钮，点击后将layoutStyle设置为SPACE_BETWEEN_OR_CENTER\n          .width('100%') // 设置按钮的宽度为100%\n          .height(50) // 设置按钮的高度为50vp\n          .margin({ top: 5 }) // 设置按钮的上边距为5vp\n          .fontSize(15) // 设置按钮的字体大小为15\n          .onClick((event?: ClickEvent) => { // 设置按钮的点击事件\n            this.layoutStyle = LayoutStyle.SPACE_BETWEEN_OR_CENTER; // 点击按钮后，layoutStyle设置为SPACE_BETWEEN_OR_CENTER\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮的下边距为12vp\n      }\n\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) { // 创建一个Tabs组件，TabBar位于底部，使用controller控制\n        TabContent() { // 创建一个TabContent，包含一个粉色背景的Column\n          Column().width('100%').height('100%').backgroundColor(Color.Pink)\n        }.tabBar(SubTabBarStyle.of(this.text)) // 设置TabBar的样式为SubTabBarStyle，文本内容为text\n\n        TabContent() { // 创建一个TabContent，包含一个绿色背景的Column\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar(SubTabBarStyle.of(this.text)) // 设置TabBar的样式为SubTabBarStyle，文本内容为text\n\n        TabContent() { // 创建一个TabContent，包含一个蓝色背景的Column\n          Column().width('100%').height('100%').backgroundColor(Color.Blue)\n        }.tabBar(SubTabBarStyle.of(this.text)) // 设置TabBar的样式为SubTabBarStyle，文本内容为text\n      }\n      .animationDuration(300) // 设置Tabs切换动画的持续时间为300毫秒\n      .height('60%') // 设置Tabs的高度为整个布局的60%\n      .backgroundColor(0xf1f3f5) // 设置Tabs的背景颜色为浅灰色（0xf1f3f5）\n      .barMode(BarMode.Scrollable, { margin: this.scrollMargin, nonScrollableLayoutStyle: this.layoutStyle }) // 设置Tabs的BarMode为Scrollable，并动态调整滚动边距和布局样式\n    }\n    .width('100%') // 设置整个布局的宽度为100%\n    .height(500) // 设置整个布局的高度为500vp\n    .margin({ top: 5 }) // 设置整个布局的上边距为5vp\n    .padding('24vp') // 设置整个布局的内边距为24vp\n  }\n}"
            },
            {
                "description": "该组件实现了一个自定义的TabBar，通过Tabs组件和自定义动画效果实现了Tab的切换动画。布局宽度占据整个屏幕，高度设为296vp，内边距为左右100%、顶部0。组件的垂直方向上被分为两个部分：顶部是TabBar，底部是TabContent。TabBar的宽度占据整个屏幕，高度为56vp，背景颜色为#F1F3F5。TabContent的高度占据剩余空间，背景颜色根据当前选中的Tab动态变化。\n\nTabBar的样式包括背景颜色、字体颜色、字体大小、字体粗细等属性，支持不同的样式展示。TabBar的Tab项以水平布局方式排列，Tab项之间的间距均匀分布，且对齐方式为居中对齐。Tab项的样式根据当前选中的Tab动态变化，选中的Tab项字体颜色为#007DFF，字体粗细为500，未选中的Tab项字体颜色为#182431，字体粗细为400。\n\nTabBar的功能包括点击事件和滑动事件，用户可以通过点击Tab项或滑动TabBar触发Tab的切换动画。Tab的切换动画通过onChange、onAnimationStart、onAnimationEnd、onGestureSwipe等接口实现，动画持续时间为300ms，动画曲线为线性。Tab的切换动画效果包括Tab项的字体颜色和字体粗细的变化，以及TabContent的背景颜色的变化。\n\n整个布局通过Stack布局保证TabBar和TabContent在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { ComponentUtils } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct TabsExample {\n  @State currentIndex: number = 0 // 当前选中的Tab索引\n  @State animationDuration: number = 300 // Tab切换动画的持续时间\n  @State indicatorLeftMargin: number = 0 // 指示器的左边距\n  @State indicatorWidth: number = 0 // 指示器的宽度\n  private tabsWidth: number = 0 // TabBar的总宽度\n  private componentUtils: ComponentUtils = this.getUIContext().getComponentUtils() // 获取组件工具类实例\n\n  @Builder\n  tabBuilder(index: number, name: string) {\n    Column() {\n      Text(name)\n        .fontSize(16) // 字体大小为16\n        .fontColor(this.currentIndex === index ? '#007DFF' : '#182431') // 字体颜色根据当前选中的Tab动态变化\n        .fontWeight(this.currentIndex === index ? 500 : 400) // 字体粗细根据当前选中的Tab动态变化\n        .id(index.toString()) // 设置Tab项的唯一标识\n        .onAreaChange((oldValue: Area,newValue: Area) => {\n          if (this.currentIndex === index && (this.indicatorLeftMargin === 0 || this.indicatorWidth === 0)){\n            if (newValue.position.x != undefined) {\n              let positionX = Number.parseFloat(newValue.position.x.toString())\n              this.indicatorLeftMargin = Number.isNaN(positionX) ? 0 : positionX // 更新指示器的左边距\n            }\n            let width = Number.parseFloat(newValue.width.toString())\n            this.indicatorWidth = Number.isNaN(width) ? 0 : width // 更新指示器的宽度\n          }\n        })\n    }.width('100%') // 设置Tab项的宽度为100%\n  }\n\n  build() {\n    Stack({ alignContent: Alignment.TopStart }) {\n      Tabs({ barPosition: BarPosition.Start }) {\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#00CB87') // TabContent的背景颜色为#00CB87\n        }.tabBar(this.tabBuilder(0, 'green')) // 设置Tab项的内容和样式\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#007DFF') // TabContent的背景颜色为#007DFF\n        }.tabBar(this.tabBuilder(1, 'blue')) // 设置Tab项的内容和样式\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#FFBF00') // TabContent的背景颜色为#FFBF00\n        }.tabBar(this.tabBuilder(2, 'yellow')) // 设置Tab项的内容和样式\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#E67C92') // TabContent的背景颜色为#E67C92\n        }.tabBar(this.tabBuilder(3, 'pink')) // 设置Tab项的内容和样式\n      }\n      .onAreaChange((oldValue: Area,newValue: Area)=> {\n        let width = Number.parseFloat(newValue.width.toString())\n        this.tabsWidth = Number.isNaN(width) ? 0 : width // 更新TabBar的总宽度\n      })\n      .barWidth('100%') // 设置TabBar的宽度为100%\n      .barHeight(56) // 设置TabBar的高度为56vp\n      .width('100%') // 设置Tabs的宽度为100%\n      .height(296) // 设置Tabs的高度为296vp\n      .backgroundColor('#F1F3F5') // 设置Tabs的背景颜色为#F1F3F5\n      .animationDuration(this.animationDuration) // 设置Tab切换动画的持续时间\n      .onChange((index: number) => {\n        this.currentIndex = index  // 更新当前选中的Tab索引\n      })\n      .onAnimationStart((index: number, targetIndex: number, event: TabsAnimationEvent) => {\n        this.currentIndex = targetIndex // 更新当前选中的Tab索引\n        let targetIndexInfo = this.getTextInfo(targetIndex)\n        this.startAnimateTo(this.animationDuration, targetIndexInfo.left, targetIndexInfo.width) // 开始Tab切换动画\n      })\n      .onAnimationEnd((index: number,event: TabsAnimationEvent) => {\n        let currentIndicatorInfo = this.getCurrentIndicatorInfo(index,event)\n        this.startAnimateTo(0,currentIndicatorInfo.left,currentIndicatorInfo.width) // 结束Tab切换动画\n      })\n      .onGestureSwipe((index: number,event: TabsAnimationEvent) => {\n        let currentIndicatorInfo = this.getCurrentIndicatorInfo(index,event)\n        this.currentIndex = currentIndicatorInfo.index // 更新当前选中的Tab索引\n        this.indicatorLeftMargin = currentIndicatorInfo.left // 更新指示器的左边距\n        this.indicatorWidth = currentIndicatorInfo.width // 更新指示器的宽度\n      })\n\n      Column()\n        .height(2) // 设置指示器的高度为2vp\n        .width(this.indicatorWidth) // 设置指示器的宽度为动态计算的宽度\n        .margin({ left: this.indicatorLeftMargin, top:48}) // 设置指示器的左边距和上边距\n        .backgroundColor('#007DFF') // 设置指示器的背景颜色为#007DFF\n    }.width('100%') // 设置Stack的宽度为100%\n  }\n\n  private getTextInfo(index: number): Record<string, number> {\n    let rectangle = this.componentUtils.getRectangleById(index.toString())\n    return { 'left': px2vp(rectangle.windowOffset.x), 'width': px2vp(rectangle.size.width) } // 获取Tab项的位置和宽度信息\n  }\n\n  private getCurrentIndicatorInfo(index: number, event: TabsAnimationEvent): Record<string, number> {\n    let nextIndex = index\n    if (index > 0 && event.currentOffset > 0) {\n      nextIndex--\n    } else if (index < 3 && event.currentOffset < 0) {\n      nextIndex++\n    }\n    let indexInfo = this.getTextInfo(index)\n    let nextIndexInfo = this.getTextInfo(nextIndex)\n    let swipeRatio = Math.abs(event.currentOffset / this.tabsWidth)\n    let currentIndex = swipeRatio > 0.5 ? nextIndex : index \n    let currentLeft = indexInfo.left + (nextIndexInfo.left - indexInfo.left) * swipeRatio\n    let currentWidth = indexInfo.width + (nextIndexInfo.width - indexInfo.width) * swipeRatio\n    return { 'index': currentIndex, 'left': currentLeft, 'width': currentWidth } // 获取当前指示器的位置和宽度信息\n  }\n\n  private startAnimateTo(duration: number, leftMargin: number, width: number) {\n    animateTo({\n      duration: duration, \n      curve: Curve.Linear, \n      iterations: 1, \n      playMode: PlayMode.Normal, \n      onFinish: () => {\n        console.info('play end')\n      }\n    }, () => {\n      this.indicatorLeftMargin = leftMargin // 更新指示器的左边距\n      this.indicatorWidth = width // 更新指示器的宽度\n    })\n  }\n}"
            },
            {
                "description": "该组件通过 Tabs 组件实现了一个垂直方向的标签页布局，每个标签页包含一个不同颜色的背景。布局宽度占据整个屏幕，高度设为 200vp，内边距为左右 24vp、顶部 24vp。组件的垂直方向上被分为多个部分，每个部分包含一个标签页和一个按钮组。每个标签页的内容以垂直布局方式排列，标签页之间的间距均匀分布，且对齐方式为居中对齐。\n标签页的样式包括背景颜色、标签栏的宽度、高度、动画持续时间等属性，支持不同的样式展示。标签页组之间通过 Divider 组件进行分隔。Divider 的功能包括颜色、宽度、上下边距的调整，用户可以通过点击按钮触发相应操作，Divider 也可以在启用或禁用状态下进行展示。\n整个布局通过 Column 布局保证标签页在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TabsDivider1 {\n  private controller1: TabsController = new TabsController() // 创建一个 TabsController 实例，用于控制 Tabs 组件的行为\n  @State dividerColor: string = 'red' // 定义 Divider 的颜色，初始值为红色\n  @State strokeWidth: number = 2 // 定义 Divider 的宽度，初始值为 2\n  @State startMargin: number = 0 // 定义 Divider 的上边距，初始值为 0\n  @State endMargin: number = 0 // 定义 Divider 的下边距，初始值为 0\n  @State nullFlag: boolean = false // 定义一个标志位，用于控制 Divider 是否显示，初始值为 false\n\n  build() {\n    Column() {\n      Tabs({ controller: this.controller1 }) { // 创建一个 Tabs 组件，并传入 TabsController 实例\n        TabContent() { // 创建第一个标签页内容\n          Column().width('100%').height('100%').backgroundColor(Color.Pink) // 创建一个 Column 组件，设置宽度和高度为 100%，背景颜色为粉色\n        }.tabBar('pink') // 设置标签页的标签栏文本为 \"pink\"\n\n        TabContent() { // 创建第二个标签页内容\n          Column().width('100%').height('100%').backgroundColor(Color.Yellow) // 创建一个 Column 组件，设置宽度和高度为 100%，背景颜色为黄色\n        }.tabBar('yellow') // 设置标签页的标签栏文本为 \"yellow\"\n\n        TabContent() { // 创建第三个标签页内容\n          Column().width('100%').height('100%').backgroundColor(Color.Blue) // 创建一个 Column 组件，设置宽度和高度为 100%，背景颜色为蓝色\n        }.tabBar('blue') // 设置标签页的标签栏文本为 \"blue\"\n\n        TabContent() { // 创建第四个标签页内容\n          Column().width('100%').height('100%').backgroundColor(Color.Green) // 创建一个 Column 组件，设置宽度和高度为 100%，背景颜色为绿色\n        }.tabBar('green') // 设置标签页的标签栏文本为 \"green\"\n\n        TabContent() { // 创建第五个标签页内容\n          Column().width('100%').height('100%').backgroundColor(Color.Red) // 创建一个 Column 组件，设置宽度和高度为 100%，背景颜色为红色\n        }.tabBar('red') // 设置标签页的标签栏文本为 \"red\"\n      }\n      .vertical(true) // 设置 Tabs 组件为垂直方向\n      .scrollable(true) // 设置 Tabs 组件可滚动\n      .barMode(BarMode.Fixed) // 设置标签栏模式为固定模式\n      .barWidth(70) // 设置标签栏的宽度为 70\n      .barHeight(200) // 设置标签栏的高度为 200\n      .animationDuration(400) // 设置标签页切换动画的持续时间为 400 毫秒\n      .onChange((index: number) => { // 设置标签页切换时的回调函数\n        console.info(index.toString()) // 打印当前选中的标签页索引\n      })\n      .height('200vp') // 设置 Tabs 组件的高度为 200vp\n      .margin({ bottom: '12vp' }) // 设置 Tabs 组件的下边距为 12vp\n      .divider(this.nullFlag ? null : { // 设置 Tabs 组件的 Divider，如果 nullFlag 为 true，则不显示 Divider\n        strokeWidth: this.strokeWidth, // 设置 Divider 的宽度\n        color: this.dividerColor, // 设置 Divider 的颜色\n        startMargin: this.startMargin, // 设置 Divider 的上边距\n        endMargin: this.endMargin // 设置 Divider 的下边距\n      })\n\n      Button('常规Divider').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，设置宽度为 100%，下边距为 12vp，文本为 \"常规Divider\"\n        .onClick(() => { // 设置按钮点击事件的回调函数\n          this.nullFlag = false; // 设置 nullFlag 为 false，显示 Divider\n          this.strokeWidth = 2; // 设置 Divider 的宽度为 2\n          this.dividerColor = 'red'; // 设置 Divider 的颜色为红色\n          this.startMargin = 0; // 设置 Divider 的上边距为 0\n          this.endMargin = 0; // 设置 Divider 的下边距为 0\n        })\n      Button('空Divider').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，设置宽度为 100%，下边距为 12vp，文本为 \"空Divider\"\n        .onClick(() => { // 设置按钮点击事件的回调函数\n          this.nullFlag = true // 设置 nullFlag 为 true，隐藏 Divider\n        })\n      Button('颜色变为蓝色').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，设置宽度为 100%，下边距为 12vp，文本为 \"颜色变为蓝色\"\n        .onClick(() => { // 设置按钮点击事件的回调函数\n          this.dividerColor = 'blue' // 设置 Divider 的颜色为蓝色\n        })\n      Button('宽度增加').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，设置宽度为 100%，下边距为 12vp，文本为 \"宽度增加\"\n        .onClick(() => { // 设置按钮点击事件的回调函数\n          this.strokeWidth += 2 // 增加 Divider 的宽度\n        })\n      Button('宽度减小').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，设置宽度为 100%，下边距为 12vp，文本为 \"宽度减小\"\n        .onClick(() => { // 设置按钮点击事件的回调函数\n          if (this.strokeWidth > 2) { // 如果 Divider 的宽度大于 2\n            this.strokeWidth -= 2 // 减少 Divider 的宽度\n          }\n        })\n      Button('上边距增加').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，设置宽度为 100%，下边距为 12vp，文本为 \"上边距增加\"\n        .onClick(() => { // 设置按钮点击事件的回调函数\n          this.startMargin += 2 // 增加 Divider 的上边距\n        })\n      Button('上边距减少').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，设置宽度为 100%，下边距为 12vp，文本为 \"上边距减少\"\n        .onClick(() => { // 设置按钮点击事件的回调函数\n          if (this.startMargin > 2) { // 如果 Divider 的上边距大于 2\n            this.startMargin -= 2 // 减少 Divider 的上边距\n          }\n        })\n      Button('下边距增加').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，设置宽度为 100%，下边距为 12vp，文本为 \"下边距增加\"\n        .onClick(() => { // 设置按钮点击事件的回调函数\n          this.endMargin += 2 // 增加 Divider 的下边距\n        })\n      Button('下边距减少').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，设置宽度为 100%，下边距为 12vp，文本为 \"下边距减少\"\n        .onClick(() => { // 设置按钮点击事件的回调函数\n          if (this.endMargin > 2) { // 如果 Divider 的下边距大于 2\n            this.endMargin -= 2 // 减少 Divider 的下边距\n          }\n        })\n    }.padding({ top: '24vp', left: '24vp', right: '24vp' }) // 设置 Column 组件的内边距为顶部 24vp，左右 24vp\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "TabContent": {
        "description": "仅在Tabs中使用，对应一个切换页签的内容视图。",
        "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "TabContent()",
                "params": {}
            }
        ],
        "attributes": {
            "tabBar": {
                "description": "设置TabBar上显示内容。",
                "params": {
                    "value": {
                        "type": [
                            "string",
                            "Resource",
                            "CustomBuilder",
                            {
                                "icon": [
                                    "string",
                                    "Resource"
                                ],
                                "text": [
                                    "string",
                                    "Resource"
                                ]
                            }
                        ],
                        "required": true,
                        "description": "TabBar上显示的内容。"
                    }
                }
            },
            "tabBar9+": {
                "description": "设置TabBar上显示内容。底部样式没有下划线效果。icon异常时显示灰色图块。",
                "params": {
                    "value": {
                        "type": [
                            "SubTabBarStyle",
                            "BottomTabBarStyle"
                        ],
                        "required": true,
                        "description": "TabBar上显示的内容。"
                    }
                }
            }
        },
        "events": {
            "onWillShow12+": {
                "description": "逻辑回调，TabContent将要显示的时候触发该回调。场景包括TabContent首次显示，TabContent切换，页面切换，窗口前后台切换。",
                "params": {
                    "event": {
                        "type": "VoidCallback",
                        "required": true,
                        "description": "回调函数。"
                    }
                }
            },
            "onWillHide12+": {
                "description": "逻辑回调，TabContent将要隐藏的时候触发该回调。场景包括TabContent切换，页面切换，窗口前后台切换。",
                "params": {
                    "event": {
                        "type": "VoidCallback",
                        "required": true,
                        "description": "回调函数。"
                    }
                }
            }
        },
        "rules": [
            "TabContent组件不支持设置通用宽度属性，其宽度默认撑满Tabs父组件。",
            "TabContent组件不支持设置通用高度属性，其高度由Tabs父组件高度与TabBar组件高度决定。",
            "vertical属性为false值，交换上述2个限制。",
            "TabContent组件不支持内容过长时页面的滑动，如需页面滑动，可嵌套List使用。"
        ],
        "examples": [
            {
                "description": "该组件通过 Flex 布局实现了一个带有标签页（Tabs）的界面。布局宽度占据整个屏幕，高度设为 414vp，内边距为顶部 52vp。组件的垂直方向上包含一个 Tabs 组件，Tabs 组件的标签栏位于顶部，标签栏的宽度为 96vp，高度为 414vp，背景颜色为 #F1F3F5。每个标签页的内容通过 TabContent 组件定义，标签页的标签栏内容通过自定义的 tabBuilder 方法生成。\n\n标签栏的内容包括一个图标和一个文本，图标根据当前选中的标签页显示不同的图标（选中时显示 public_icon_on.svg，未选中时显示 public_icon_off.svg），图标的宽度为 24vp，高度为 24vp，对象适应方式为 contain，底部边距为 4vp。文本内容为 \"Tab\"，字体颜色根据当前选中的标签页显示不同的颜色（选中时为 #007DFF，未选中时为 #182431），字体大小为 10vp，字体粗细为 500，行高为 14vp。\n\n标签页的切换通过 Tabs 组件的 onChange 事件实现，当用户切换标签页时，currentIndex 状态变量会更新为当前选中的标签页索引。整个布局通过 Flex 布局保证标签页在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TabContentExample {\n  @State fontColor: string = '#182431' // 未选中标签页的字体颜色\n  @State selectedFontColor: string = '#007DFF' // 选中标签页的字体颜色\n  @State currentIndex: number = 0 // 当前选中的标签页索引\n  private controller: TabsController = new TabsController() // Tabs 组件的控制器\n\n  @Builder tabBuilder(index: number) {\n    Column() {\n      Image(this.currentIndex === index ? '/common/public_icon_on.svg' : '/common/public_icon_off.svg')\n        .width(24) // 图标的宽度\n        .height(24) // 图标的高度\n        .margin({ bottom: 4 }) // 图标的底部边距\n        .objectFit(ImageFit.Contain) // 图标的对象适应方式\n      Text('Tab')\n        .fontColor(this.currentIndex === index ? this.selectedFontColor : this.fontColor) // 根据当前选中的标签页设置字体颜色\n        .fontSize(10) // 字体大小\n        .fontWeight(500) // 字体粗细\n        .lineHeight(14) // 行高\n    }.width('100%').height('100%').justifyContent(FlexAlign.Center) // 标签栏内容的布局方式\n  }\n\n  build() {\n    Column() {\n      Tabs({ barPosition: BarPosition.Start, controller: this.controller }) {\n        TabContent()\n          .tabBar(this.tabBuilder(0)) // 第一个标签页的标签栏内容\n        TabContent()\n          .tabBar(this.tabBuilder(1)) // 第二个标签页的标签栏内容\n        TabContent()\n          .tabBar(this.tabBuilder(2)) // 第三个标签页的标签栏内容\n        TabContent()\n          .tabBar(this.tabBuilder(3)) // 第四个标签页的标签栏内容\n      }\n      .vertical(true) // 标签栏垂直排列\n      .barWidth(96) // 标签栏的宽度\n      .barHeight(414) // 标签栏的高度\n      .onChange((index: number) => {\n        this.currentIndex = index // 更新当前选中的标签页索引\n      })\n      .width(96) // Tabs 组件的宽度\n      .height(414) // Tabs 组件的高度\n      .backgroundColor('#F1F3F5') // Tabs 组件的背景颜色\n      .margin({ top: 52 }) // Tabs 组件的顶部边距\n    }.width('100%') // 整个布局的宽度\n  }\n}"
            },
            {
                "description": "该组件实现了一个底部页签样式（BottomTabBarStyle）的界面，通过 Tabs 组件展示多个页签，并在每个页签的底部显示一个图标。布局宽度占据整个屏幕，高度为 200vp，背景颜色为 0xF1F3F5。页签的排列方式为水平排列，支持滚动，且页签栏固定在底部。每个页签的内容区域为一个全宽全高的 Column 组件，背景颜色分别为 Pink、Orange、Blue 和 Green。页签栏的样式通过 BottomTabBarStyle 进行自定义，每个页签栏显示一个系统图标，图标通过 SymbolGlyphModifier 进行加载。页签的切换事件通过 onChange 事件监听，并在控制台输出当前选中的页签索引。页签的显示和隐藏事件通过 onWillShow 和 onWillHide 事件监听，并在控制台输出相应的信息。",
                "code": "import { SymbolGlyphModifier } from '@kit.ArkUI' // 导入 SymbolGlyphModifier 用于加载系统图标\n\n@Entry\n@Component\nstruct Index {\n  @State symbolModifier1: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_wifi')); // 定义第一个页签的图标\n  @State symbolModifier2: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ellipsis_bubble')); // 定义第二个页签的图标\n  @State symbolModifier3: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.dot_video')); // 定义第三个页签的图标\n  @State symbolModifier4: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.exposure')); // 定义第四个页签的图标\n\n  build() {\n    Column({space: 5}) { // 主布局为垂直布局，子组件间距为 5vp\n      Text(\"底部页签样式\") // 显示标题文本\n      Column(){ // 内容区域布局\n        Tabs({barPosition: BarPosition.End}) { // 创建 Tabs 组件，页签栏位于底部\n          TabContent() { // 第一个页签内容\n            Column().width('100%').height('100%').backgroundColor(Color.Pink) // 内容区域为全宽全高的 Column，背景颜色为 Pink\n          }.tabBar(new BottomTabBarStyle({ // 设置页签栏样式\n            normal: this.symbolModifier1, // 正常状态下的图标\n          }, 'Pink'))\n          .onWillShow(() => { // 页签即将显示时触发的事件\n            console.info(\"Pink will show\") // 在控制台输出信息\n          })\n          .onWillHide(() => { // 页签即将隐藏时触发的事件\n            console.info(\"Pink will hide\") // 在控制台输出信息\n          })\n\n          TabContent() { // 第二个页签内容\n            Column().width('100%').height('100%').backgroundColor(Color.Orange) // 内容区域为全宽全高的 Column，背景颜色为 Orange\n          }.tabBar(new BottomTabBarStyle({ // 设置页签栏样式\n            normal: this.symbolModifier2, // 正常状态下的图标\n          }, 'Orange'))\n          .onWillShow(() => { // 页签即将显示时触发的事件\n            console.info(\"Orange will show\") // 在控制台输出信息\n          })\n          .onWillHide(() => { // 页签即将隐藏时触发的事件\n            console.info(\"Orange will hide\") // 在控制台输出信息\n          })\n\n          TabContent() { // 第三个页签内容\n            Column().width('100%').height('100%').backgroundColor(Color.Blue) // 内容区域为全宽全高的 Column，背景颜色为 Blue\n          }.tabBar(new BottomTabBarStyle({ // 设置页签栏样式\n            normal: this.symbolModifier3, // 正常状态下的图标\n          }, 'Blue'))\n          .onWillShow(() => { // 页签即将显示时触发的事件\n            console.info(\"Blue will show\") // 在控制台输出信息\n          })\n          .onWillHide(() => { // 页签即将隐藏时触发的事件\n            console.info(\"Blue will hide\") // 在控制台输出信息\n          })\n\n          TabContent() { // 第四个页签内容\n            Column().width('100%').height('100%').backgroundColor(Color.Green) // 内容区域为全宽全高的 Column，背景颜色为 Green\n          }.tabBar(new BottomTabBarStyle({ // 设置页签栏样式\n            normal: this.symbolModifier4, // 正常状态下的图标\n          }, 'Green'))\n          .onWillShow(() => { // 页签即将显示时触发的事件\n            console.info(\"Green will show\") // 在控制台输出信息\n          })\n          .onWillHide(() => { // 页签即将隐藏时触发的事件\n            console.info(\"Green will hide\") // 在控制台输出信息\n          })\n        }\n        .vertical(false) // 页签水平排列\n        .scrollable(true) // 页签可滚动\n        .barMode(BarMode.Fixed) // 页签栏固定\n        .onChange((index:number)=>{ // 页签切换事件\n          console.info(index.toString()) // 在控制台输出当前选中的页签索引\n        })\n        .width('100%') // 内容区域宽度为全屏\n        .backgroundColor(0xF1F3F5) // 内容区域背景颜色为 0xF1F3F5\n      }.width('100%').height(200) // 内容区域宽度为全屏，高度为 200vp\n    }\n  }\n}"
            },
            {
                "description": "该示例通过鸿蒙ArkUI框架实现了一个带有自定义TabBar样式的Tabs组件。布局上，整个界面由一个Row组件包裹，内部包含一个Column组件，Column组件内包含两个Button组件和一个Tabs组件。Button组件用于更新TabBar的内容，Tabs组件用于展示两个TabContent，每个TabContent的TabBar样式通过SubTabBarStyle进行自定义。\n\n布局属性方面，Row组件占据整个屏幕高度，Column组件占据整个屏幕宽度和高度。Button组件的宽度为90%，边距为20vp。Tabs组件的宽度为414vp，高度为414vp，TabBar的宽度为414vp，高度为96vp，背景颜色为#F1F3F5，顶部边距为20vp。\n\n组件的样式和外观方面，Button组件的文本颜色和背景颜色未指定，但通过width和margin属性设置了按钮的宽度和边距。Tabs组件的TabBar样式通过SubTabBarStyle进行自定义，每个TabContent的背景颜色分别为粉色和蓝色，边框圆角为12vp。\n\n组件的排列和嵌套关系方面，Row组件包裹Column组件，Column组件内依次排列两个Button组件和一个Tabs组件。Tabs组件内部包含两个TabContent，每个TabContent通过Column组件进行布局，背景颜色和边框圆角属性分别设置。\n\n组件的功能和交互方面，Button组件通过onClick事件监听器实现点击事件，点击后更新对应TabBar的内容。Tabs组件通过SubTabBarStyle设置自定义的TabBar样式，并通过TabContent组件展示不同的内容。",
                "code": "import { ComponentContent, UIContext } from \"@kit.ArkUI\"\n\n// 定义Params类，用于传递文本参数\nclass Params {\n  text: string = \"\"\n\n  constructor(text: string) {\n    this.text = text;\n  }\n}\n\n// 定义buildText函数，用于构建显示文本的组件\n@Builder\nfunction buildText(params: Params) {\n  Column() {\n    Text(params.text) // 显示传递的文本\n      .fontSize(20) // 设置字体大小为20\n      .fontWeight(FontWeight.Bold) // 设置字体加粗\n      .margin(20) // 设置文本的边距为20vp\n  }\n}\n\n// 定义Index组件，作为应用的入口组件\n@Entry\n@Component\nstruct Index {\n  @State message1: string = \"tabBar1\" // 定义状态变量message1，初始值为\"tabBar1\"\n  @State message2: string = \"tabBar2\" // 定义状态变量message2，初始值为\"tabBar2\"\n  context: UIContext = this.getUIContext() // 获取UI上下文\n  private count1 = 0; // 定义私有变量count1，用于记录点击次数\n  private count2 = 0; // 定义私有变量count2，用于记录点击次数\n  private controller: TabsController = new TabsController(); // 创建Tabs控制器\n  tabBar1: ComponentContent<Params> = new ComponentContent<Params>(this.context, wrapBuilder<[Params]>(buildText), new Params(this.message1)); // 创建ComponentContent实例，用于tabBar1\n  tabBar2: ComponentContent<Params> = new ComponentContent<Params>(this.context, wrapBuilder<[Params]>(buildText), new Params(this.message2)); // 创建ComponentContent实例，用于tabBar2\n\n  build() {\n    Row() {\n      Column() {\n        Button(\"更新tabBar1\").width('90%').margin(20) // 创建按钮，宽度为90%，边距为20vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.count1 += 1; // 点击次数加1\n            const message1 = \"Update 1_\" + this.count1.toString(); // 生成新的文本\n            this.tabBar1.update(new Params(message1)); // 更新tabBar1的内容\n          })\n        Button(\"更新tabBar2\").width('90%').margin(20) // 创建按钮，宽度为90%，边距为20vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.count2 += 1; // 点击次数加1\n            const message2 = \"Update 2_\" + this.count2.toString(); // 生成新的文本\n            this.tabBar2.update(new Params(message2)); // 更新tabBar2的内容\n          })\n        Tabs({ barPosition: BarPosition.Start, controller: this.controller }) { // 创建Tabs组件，TabBar位置在开始，使用自定义控制器\n          TabContent() { // 创建第一个TabContent\n            Column().width('100%').height('100%').backgroundColor(Color.Pink).borderRadius('12vp') // 设置Column组件的宽度、高度、背景颜色和边框圆角\n          }.tabBar(new SubTabBarStyle(this.tabBar1)) // 设置TabBar样式为SubTabBarStyle，内容为tabBar1\n          TabContent() { // 创建第二个TabContent\n            Column().width('100%').height('100%').backgroundColor(Color.Blue).borderRadius('12vp') // 设置Column组件的宽度、高度、背景颜色和边框圆角\n          }.tabBar(SubTabBarStyle.of(this.tabBar2)) // 设置TabBar样式为SubTabBarStyle，内容为tabBar2\n        }\n        .vertical(false) // 设置Tabs组件为水平布局\n        .barWidth(414) // 设置TabBar宽度为414vp\n        .barHeight(96) // 设置TabBar高度为96vp\n        .width(414) // 设置Tabs组件宽度为414vp\n        .height(414) // 设置Tabs组件高度为414vp\n        .backgroundColor('#F1F3F5') // 设置Tabs组件背景颜色为#F1F3F5\n        .margin({ top: 20 }) // 设置Tabs组件顶部边距为20vp\n      }\n      .width('100%') // 设置Column组件宽度为100%\n      .height('100%') // 设置Column组件高度为100%\n    }\n    .height('100%') // 设置Row组件高度为100%\n  }\n}"
            },
            {
                "description": "该组件实现了一个带有标签页（Tabs）的界面，用户可以通过点击不同的标签页来切换显示不同的内容。布局宽度占据整个屏幕，高度设为 190vp，背景颜色为 #F1F3F5，顶部有 38vp 的边距。标签页的标签栏位于内容区域的底部，高度为 56vp，水平排列，不垂直排列。每个标签页的内容区域包含一个文本和一个分隔线，文本字体大小为 36，颜色为 #182431，字体粗细为 500，透明度为 0.4，上下边距分别为 30vp 和 56.5vp。分隔线的宽度为 0.5vp，颜色为 #182431，透明度为 0.05。\n\n标签页的标签栏部分通过自定义的 `tabBuilder` 方法生成，每个标签包含一个图标和一个文本。图标根据当前选中的标签页显示不同的图标（选中时为 `/common/public_icon_on.svg`，未选中时为 `/common/public_icon_off.svg`），图标的宽度为 24vp，高度为 24vp，底部边距为 4vp，对象适应方式为 `ImageFit.Contain`。文本字体大小为 10，字体粗细为 500，行高为 14，颜色根据是否选中而变化（选中时为 #007DFF，未选中时为 #182431）。\n\n组件的功能包括标签页的切换和选中状态的更新。当用户点击不同的标签页时，`onChange` 事件会触发，更新 `currentIndex` 的值，从而改变标签页的选中状态和内容显示。",
                "code": "@Entry\n@Component\nstruct TabContentExample {\n  @State fontColor: string = '#182431' // 未选中标签页的文本颜色\n  @State selectedFontColor: string = '#007DFF' // 选中标签页的文本颜色\n  @State currentIndex: number = 0 // 当前选中的标签页索引\n  private controller: TabsController = new TabsController() // 标签页控制器\n\n  @Builder tabBuilder(index: number) {\n    Column() {\n      Image(this.currentIndex === index ? '/common/public_icon_on.svg' : '/common/public_icon_off.svg')\n        .width(24) // 图标宽度\n        .height(24) // 图标高度\n        .margin({ bottom: 4 }) // 图标底部边距\n        .objectFit(ImageFit.Contain) // 图标适应方式\n      Text(`Tab${index + 1}`)\n        .fontColor(this.currentIndex === index ? this.selectedFontColor : this.fontColor) // 文本颜色根据选中状态变化\n        .fontSize(10) // 文本字体大小\n        .fontWeight(500) // 文本字体粗细\n        .lineHeight(14) // 文本行高\n    }.width('100%') // 标签宽度占据父容器的100%\n  }\n\n  build() {\n    Column() {\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) {\n        TabContent() {\n          Column() {\n            Text('Tab1')\n              .fontSize(36) // 文本字体大小\n              .fontColor('#182431') // 文本颜色\n              .fontWeight(500) // 文本字体粗细\n              .opacity(0.4) // 文本透明度\n              .margin({ top: 30, bottom: 56.5 }) // 文本上下边距\n            Divider()\n              .strokeWidth(0.5) // 分隔线宽度\n              .color('#182431') // 分隔线颜色\n              .opacity(0.05) // 分隔线透明度\n          }.width('100%') // 内容区域宽度占据父容器的100%\n        }.tabBar(this.tabBuilder(0)) // 第一个标签页的标签栏\n\n        TabContent() {\n          Column() {\n            Text('Tab2')\n              .fontSize(36) // 文本字体大小\n              .fontColor('#182431') // 文本颜色\n              .fontWeight(500) // 文本字体粗细\n              .opacity(0.4) // 文本透明度\n              .margin({ top: 30, bottom: 56.5 }) // 文本上下边距\n            Divider()\n              .strokeWidth(0.5) // 分隔线宽度\n              .color('#182431') // 分隔线颜色\n              .opacity(0.05) // 分隔线透明度\n          }.width('100%') // 内容区域宽度占据父容器的100%\n        }.tabBar(this.tabBuilder(1)) // 第二个标签页的标签栏\n\n        TabContent() {\n          Column() {\n            Text('Tab3')\n              .fontSize(36) // 文本字体大小\n              .fontColor('#182431') // 文本颜色\n              .fontWeight(500) // 文本字体粗细\n              .opacity(0.4) // 文本透明度\n              .margin({ top: 30, bottom: 56.5 }) // 文本上下边距\n            Divider()\n              .strokeWidth(0.5) // 分隔线宽度\n              .color('#182431') // 分隔线颜色\n              .opacity(0.05) // 分隔线透明度\n          }.width('100%') // 内容区域宽度占据父容器的100%\n        }.tabBar(this.tabBuilder(2)) // 第三个标签页的标签栏\n\n        TabContent() {\n          Column() {\n            Text('Tab4')\n              .fontSize(36) // 文本字体大小\n              .fontColor('#182431') // 文本颜色\n              .fontWeight(500) // 文本字体粗细\n              .opacity(0.4) // 文本透明度\n              .margin({ top: 30, bottom: 56.5 }) // 文本上下边距\n            Divider()\n              .strokeWidth(0.5) // 分隔线宽度\n              .color('#182431') // 分隔线颜色\n              .opacity(0.05) // 分隔线透明度\n          }.width('100%') // 内容区域宽度占据父容器的100%\n        }.tabBar(this.tabBuilder(3)) // 第四个标签页的标签栏\n      }\n      .vertical(false) // 标签栏水平排列\n      .barHeight(56) // 标签栏高度\n      .onChange((index: number) => {\n        this.currentIndex = index // 更新当前选中的标签页索引\n      })\n      .width(360) // 标签页宽度\n      .height(190) // 标签页高度\n      .backgroundColor('#F1F3F5') // 标签页背景颜色\n      .margin({ top: 38 }) // 标签页顶部边距\n    }.width('100%') // 父容器宽度占据整个屏幕\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个包含多个 Tab 的界面，每个 Tab 包含一个文本内容区域和一个 TabBar。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为多个部分，每个部分包含一个 TabContent 和一个 TabBar。每个 TabContent 包含一个 Column 布局，其中包含一个 Text 组件，用于显示文本内容。TabBar 的样式包括文本溢出处理、字体大小、最大行数等属性，支持不同的样式展示。TabBar 的功能包括点击事件和状态效果，用户可以通过点击 TabBar 切换不同的 TabContent。\n整个布局通过 Column 布局保证 Tab 在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TabsTextOverflow {\n  @State message: string = 'Hello World' // 状态变量，用于存储消息内容\n  private controller: TabsController = new TabsController() // Tabs 控制器，用于管理 Tab 的切换\n  @State subTabOverflowOpaque: boolean = true; // 状态变量，用于控制 TabBar 的透明度\n\n  build() {\n    Column() {\n      Tabs({ barPosition: BarPosition.Start, controller: this.controller }) { // 创建 Tabs 组件，设置 TabBar 位置为开始位置，并绑定控制器\n        TabContent() { // 创建第一个 TabContent\n          Column() {\n            Text('单行省略号截断').fontSize(30).fontColor(0xFF000000) // 创建 Text 组件，设置字体大小和颜色\n          }.width('100%').height('100%').backgroundColor(Color.Pink) // 设置 Column 的宽度和高度为 100%，背景颜色为粉色\n        }\n        .tabBar(SubTabBarStyle.of('开始【单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断单行省略号截断】结束')\n          .labelStyle({\n            overflow: TextOverflow.Ellipsis, // 设置文本溢出时显示省略号\n            maxLines: 1, // 设置最大行数为 1\n            minFontSize: 10, // 设置最小字体大小为 10\n            heightAdaptivePolicy: TextHeightAdaptivePolicy.MAX_LINES_FIRST, // 设置高度自适应策略为优先适应最大行数\n            font: { size: 20 } // 设置字体大小为 20\n          }))\n\n        TabContent() { // 创建第二个 TabContent\n          Column() {\n            Text('先缩小再截断').fontSize(30).fontColor(0xFF000000) // 创建 Text 组件，设置字体大小和颜色\n          }.width('100%').height('100%').backgroundColor(Color.Pink) // 设置 Column 的宽度和高度为 100%，背景颜色为粉色\n        }\n        .tabBar(SubTabBarStyle.of('开始【先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断先缩小再截断】结束')\n          .labelStyle({\n            overflow: TextOverflow.Clip, // 设置文本溢出时直接截断\n            maxLines: 1, // 设置最大行数为 1\n            minFontSize: 15, // 设置最小字体大小为 15\n            maxFontSize: 15, // 设置最大字体大小为 15\n            heightAdaptivePolicy: TextHeightAdaptivePolicy.MIN_FONT_SIZE_FIRST, // 设置高度自适应策略为优先适应最小字体大小\n            font: { size: 20 } // 设置字体大小为 20\n          }))\n\n        TabContent() { // 创建第三个 TabContent\n          Column() {\n            Text('先缩小再换行再截断').fontSize(30).fontColor(0xFF000000) // 创建 Text 组件，设置字体大小和颜色\n          }.width('100%').height('100%').backgroundColor(Color.Pink) // 设置 Column 的宽度和高度为 100%，背景颜色为粉色\n        }\n        .tabBar(SubTabBarStyle.of('开始【先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断先缩小再换行再截断】结束')\n          .labelStyle({\n            overflow: TextOverflow.Clip, // 设置文本溢出时直接截断\n            maxLines: 2, // 设置最大行数为 2\n            minFontSize: 15, // 设置最小字体大小为 15\n            maxFontSize: 15, // 设置最大字体大小为 15\n            heightAdaptivePolicy: TextHeightAdaptivePolicy.MIN_FONT_SIZE_FIRST, // 设置高度自适应策略为优先适应最小字体大小\n            font: { size: 20 } // 设置字体大小为 20\n          }))\n\n        TabContent() { // 创建第四个 TabContent\n          Column() {\n            Text('换行').fontSize(30).fontColor(0xFF000000) // 创建 Text 组件，设置字体大小和颜色\n          }\n          .width('100%').height('100%').backgroundColor(Color.Pink) // 设置 Column 的宽度和高度为 100%，背景颜色为粉色\n        }.tabBar(SubTabBarStyle.of('开始【换行换行换行换行换行换行换行换行换行换行换行换行换行换行换行】结束')\n          .labelStyle({\n            overflow: TextOverflow.Clip, // 设置文本溢出时直接截断\n            maxLines: 10, // 设置最大行数为 10\n            minFontSize: 10, // 设置最小字体大小为 10\n            heightAdaptivePolicy: TextHeightAdaptivePolicy.MAX_LINES_FIRST, // 设置高度自适应策略为优先适应最大行数\n            font: { size: 20 } // 设置字体大小为 20\n          }))\n      }\n      .vertical(true).scrollable(true) // 设置 Tabs 为垂直布局，并启用滚动\n      .barMode(BarMode.Fixed) // 设置 TabBar 模式为固定模式\n      .barHeight(720) // 设置 TabBar 高度为 720\n      .barWidth(200).animationDuration(400) // 设置 TabBar 宽度为 200，动画持续时间为 400 毫秒\n      .onChange((index: number) => { // 设置 Tab 切换时的回调函数\n        console.info(index.toString()) // 打印当前选中的 Tab 索引\n      })\n      .height('100%').width('100%') // 设置 Tabs 的宽度和高度为 100%\n    }\n    .height('100%') // 设置 Column 的高度为 100%\n  }\n}"
            },
            {
                "description": "该组件通过 Tabs 组件实现了一个包含子页签和底部页签的界面。布局宽度占据整个屏幕，高度设为 400vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为两个主要部分：子页签样式和底部页签样式。\n\n子页签样式部分包含一个 Tabs 组件，其页签位于内容区域的上方（BarPosition.Start）。每个 TabContent 包含一个 Column 组件，背景颜色分别为 Pink、Yellow、Blue 和 Green。每个 TabContent 的页签样式通过 SubTabBarStyle 进行自定义，包括未选中时的文本颜色为红色（Color.Red），选中时的文本颜色为绿色（Color.Green）。\n\n底部页签样式部分同样包含一个 Tabs 组件，其页签位于内容区域的下方（BarPosition.End）。每个 TabContent 包含一个 Column 组件，背景颜色分别为 Pink、Yellow、Blue 和 Green。每个 TabContent 的页签样式通过 BottomTabBarStyle 进行自定义，包括未选中时的文本颜色和图标颜色为红色（Color.Red），选中时的文本颜色和图标颜色为绿色（Color.Green）。\n\n整个布局通过 Column 组件进行垂直排列，确保子页签和底部页签在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TabBarStyleExample {\n  build() {\n    Column({ space: 5 }) {\n      Text(\"子页签样式\") // 显示子页签样式的标题\n      Column() {\n        Tabs({ barPosition: BarPosition.Start }) { // 创建一个 Tabs 组件，页签位于内容区域的上方\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink) // 创建一个 Column 组件，背景颜色为粉色\n          }.tabBar(new SubTabBarStyle('Pink') // 设置子页签的样式，标签为 \"Pink\"\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })) // 设置未选中时的文本颜色为红色，选中时的文本颜色为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Yellow) // 创建一个 Column 组件，背景颜色为黄色\n          }.tabBar(new SubTabBarStyle('Yellow') // 设置子页签的样式，标签为 \"Yellow\"\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })) // 设置未选中时的文本颜色为红色，选中时的文本颜色为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue) // 创建一个 Column 组件，背景颜色为蓝色\n          }.tabBar(new SubTabBarStyle('Blue') // 设置子页签的样式，标签为 \"Blue\"\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })) // 设置未选中时的文本颜色为红色，选中时的文本颜色为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green) // 创建一个 Column 组件，背景颜色为绿色\n          }.tabBar(new SubTabBarStyle('Green') // 设置子页签的样式，标签为 \"Green\"\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })) // 设置未选中时的文本颜色为红色，选中时的文本颜色为绿色\n        }\n        .vertical(false) // 设置 Tabs 组件为水平布局\n        .scrollable(true) // 设置 Tabs 组件为可滚动\n        .barMode(BarMode.Fixed) // 设置 Tabs 组件的页签模式为固定模式\n        .onChange((index: number) => { // 设置 Tabs 组件的切换事件\n          console.info(index.toString()) // 打印当前选中的页签索引\n        })\n        .width('100%') // 设置 Tabs 组件的宽度为 100%\n        .backgroundColor(0xF1F3F5) // 设置 Tabs 组件的背景颜色\n      }.width('100%').height(200) // 设置 Column 组件的宽度为 100%，高度为 200vp\n\n      Text(\"底部页签样式\") // 显示底部页签样式的标题\n      Column() {\n        Tabs({ barPosition: BarPosition.End }) { // 创建一个 Tabs 组件，页签位于内容区域的下方\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink) // 创建一个 Column 组件，背景颜色为粉色\n          }\n          .tabBar(new BottomTabBarStyle('/common/public_icon_off.svg', 'pink') // 设置底部页签的样式，图标路径为 \"/common/public_icon_off.svg\"，标签为 \"pink\"\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }) // 设置未选中时的文本颜色为红色，选中时的文本颜色为绿色\n            .iconStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })) // 设置未选中时的图标颜色为红色，选中时的图标颜色为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Yellow) // 创建一个 Column 组件，背景颜色为黄色\n          }.tabBar(new BottomTabBarStyle('/common/public_icon_off.svg', 'Yellow') // 设置底部页签的样式，图标路径为 \"/common/public_icon_off.svg\"，标签为 \"Yellow\"\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }) // 设置未选中时的文本颜色为红色，选中时的文本颜色为绿色\n            .iconStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })) // 设置未选中时的图标颜色为红色，选中时的图标颜色为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue) // 创建一个 Column 组件，背景颜色为蓝色\n          }.tabBar(new BottomTabBarStyle('/common/public_icon_off.svg', 'Blue') // 设置底部页签的样式，图标路径为 \"/common/public_icon_off.svg\"，标签为 \"Blue\"\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }) // 设置未选中时的文本颜色为红色，选中时的文本颜色为绿色\n            .iconStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })) // 设置未选中时的图标颜色为红色，选中时的图标颜色为绿色\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green) // 创建一个 Column 组件，背景颜色为绿色\n          }.tabBar(new BottomTabBarStyle('/common/public_icon_off.svg', 'Green') // 设置底部页签的样式，图标路径为 \"/common/public_icon_off.svg\"，标签为 \"Green\"\n            .labelStyle({ unselectedColor: Color.Red, selectedColor: Color.Green }) // 设置未选中时的文本颜色为红色，选中时的文本颜色为绿色\n            .iconStyle({ unselectedColor: Color.Red, selectedColor: Color.Green })) // 设置未选中时的图标颜色为红色，选中时的图标颜色为绿色\n        }\n        .vertical(false) // 设置 Tabs 组件为水平布局\n        .scrollable(true) // 设置 Tabs 组件为可滚动\n        .barMode(BarMode.Fixed) // 设置 Tabs 组件的页签模式为固定模式\n        .onChange((index: number) => { // 设置 Tabs 组件的切换事件\n          console.info(index.toString()) // 打印当前选中的页签索引\n        })\n        .width('100%') // 设置 Tabs 组件的宽度为 100%\n        .backgroundColor(0xF1F3F5) // 设置 Tabs 组件的背景颜色\n      }.width('100%').height(200) // 设置 Column 组件的宽度为 100%，高度为 200vp\n    }\n  }\n}"
            },
            {
                "description": "该组件展示了三种不同样式的页签（Tab）布局：子页签样式、底部页签样式和侧边页签样式。每个页签布局包含四个页签项，每个页签项对应一个不同颜色的内容区域。布局宽度占据整个屏幕，高度分别为 200vp 和 400vp。组件的垂直方向上被分为三个部分，每个部分包含一个标题和一个页签布局。\n\n子页签样式：页签位于内容区域的上方，页签项水平排列，页签栏固定在顶部，页签项可滚动。每个页签项的背景颜色与其对应的内容区域颜色一致。页签项在显示和隐藏时会触发相应的回调函数，输出日志信息。\n\n底部页签样式：页签位于内容区域的下方，页签项水平排列，页签栏固定在底部，页签项可滚动。每个页签项包含一个系统图标和文本标签，背景颜色与其对应的内容区域颜色一致。页签项在显示和隐藏时会触发相应的回调函数，输出日志信息。\n\n侧边页签样式：页签位于内容区域的左侧，页签项垂直排列，页签栏固定在左侧，页签项可滚动。每个页签项包含一个系统图标和文本标签，背景颜色与其对应的内容区域颜色一致。页签项在显示和隐藏时会触发相应的回调函数，输出日志信息。\n\n整个布局通过 Column 布局保证页签布局在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TabBarStyleExample {\n  build() {\n    Column({ space: 5 }) {\n      // 子页签样式标题\n      Text(\"子页签样式\")\n      Column() {\n        Tabs({ barPosition: BarPosition.Start }) {\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink)\n          }.tabBar(new SubTabBarStyle('Pink'))\n          .onWillShow(() => {\n            console.info(\"Pink will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Pink will hide\")\n          })\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Yellow)\n          }.tabBar(new SubTabBarStyle('Yellow'))\n          .onWillShow(() => {\n            console.info(\"Yellow will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Yellow will hide\")\n          })\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue)\n          }.tabBar(new SubTabBarStyle('Blue'))\n          .onWillShow(() => {\n            console.info(\"Blue will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Blue will hide\")\n          })\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green)\n          }.tabBar(new SubTabBarStyle('Green'))\n          .onWillShow(() => {\n            console.info(\"Green will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Green will hide\")\n          })\n        }\n        .vertical(false) // 页签项水平排列\n        .scrollable(true) // 页签项可滚动\n        .barMode(BarMode.Fixed) // 页签栏固定\n        .onChange((index: number) => {\n          console.info(index.toString())\n        })\n        .width('100%') // 宽度占据整个父容器\n        .backgroundColor(0xF1F3F5) // 背景颜色\n      }.width('100%').height(200) // 高度为 200vp\n\n      // 底部页签样式标题\n      Text(\"底部页签样式\")\n      Column() {\n        Tabs({ barPosition: BarPosition.End }) {\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink)\n          }.tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Pink'))\n          .onWillShow(() => {\n            console.info(\"Pink will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Pink will hide\")\n          })\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Yellow)\n          }.tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Yellow'))\n          .onWillShow(() => {\n            console.info(\"Yellow will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Yellow will hide\")\n          })\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue)\n          }.tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Blue'))\n          .onWillShow(() => {\n            console.info(\"Blue will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Blue will hide\")\n          })\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green)\n          }.tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Green'))\n          .onWillShow(() => {\n            console.info(\"Green will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Green will hide\")\n          })\n        }\n        .vertical(false) // 页签项水平排列\n        .scrollable(true) // 页签项可滚动\n        .barMode(BarMode.Fixed) // 页签栏固定\n        .onChange((index: number) => {\n          console.info(index.toString())\n        })\n        .width('100%') // 宽度占据整个父容器\n        .backgroundColor(0xF1F3F5) // 背景颜色\n      }.width('100%').height(200) // 高度为 200vp\n\n      // 侧边页签样式标题\n      Text(\"侧边页签样式\")\n      Column() {\n        Tabs({ barPosition: BarPosition.Start }) {\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Pink)\n          }.tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Pink'))\n          .onWillShow(() => {\n            console.info(\"Pink will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Pink will hide\")\n          })\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Yellow)\n          }.tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Yellow'))\n          .onWillShow(() => {\n            console.info(\"Yellow will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Yellow will hide\")\n          })\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Blue)\n          }.tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Blue'))\n          .onWillShow(() => {\n            console.info(\"Blue will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Blue will hide\")\n          })\n\n          TabContent() {\n            Column().width('100%').height('100%').backgroundColor(Color.Green)\n          }.tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), 'Green'))\n          .onWillShow(() => {\n            console.info(\"Green will show\")\n          })\n          .onWillHide(() => {\n            console.info(\"Green will hide\")\n          })\n        }\n        .vertical(true) // 页签项垂直排列\n        .scrollable(true) // 页签项可滚动\n        .barMode(BarMode.Fixed) // 页签栏固定\n        .onChange((index: number) => {\n          console.info(index.toString())\n        })\n        .width('100%') // 宽度占据整个父容器\n        .backgroundColor(0xF1F3F5) // 背景颜色\n      }.width('100%').height(400) // 高度为 400vp\n    }\n  }\n}"
            },
            {
                "description": "该组件通过Column和Row布局实现了一个包含多个按钮和Tabs组件的界面。布局宽度占据整个屏幕，高度设为500vp，内边距为24vp。组件的垂直方向上被分为多个部分，每个部分包含一组按钮和一个Tabs组件。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Row组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\nTabs组件包含三个TabContent，每个TabContent包含一个Column组件，背景颜色分别为粉色、绿色和蓝色。Tabs组件的样式包括动画持续时间、高度、背景颜色、标签栏模式等属性。\n整个布局通过Column和Row布局保证按钮和Tabs组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TabContentExample6 {\n  private controller: TabsController = new TabsController() // 创建一个TabsController实例，用于控制Tabs组件\n  @State text: string = \"2\" // 定义一个状态变量text，初始值为\"2\"\n  @State tabPadding: number = 0; // 定义一个状态变量tabPadding，初始值为0\n  @State symmetricExtensible: boolean = false; // 定义一个状态变量symmetricExtensible，初始值为false\n  @State layoutMode: LayoutMode = LayoutMode.VERTICAL; // 定义一个状态变量layoutMode，初始值为LayoutMode.VERTICAL\n  @State verticalAlign: VerticalAlign = VerticalAlign.Center; // 定义一个状态变量verticalAlign，初始值为VerticalAlign.Center\n\n  build() {\n    Column() {\n      Row() {\n        Button(\"padding+10 \" + this.tabPadding) // 创建一个按钮，显示当前tabPadding值并增加10\n          .width('47%') // 设置按钮宽度为47%\n          .height(50) // 设置按钮高度为50vp\n          .margin({ top: 5 }) // 设置按钮上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.tabPadding += 10 // 点击按钮时，tabPadding增加10\n          })\n          .margin({ right: '6%', bottom: '12vp' }) // 设置按钮右边距为6%，下边距为12vp\n        Button(\"padding-10 \" + this.tabPadding) // 创建一个按钮，显示当前tabPadding值并减少10\n          .width('47%') // 设置按钮宽度为47%\n          .height(50) // 设置按钮高度为50vp\n          .margin({ top: 5 }) // 设置按钮上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.tabPadding -= 10 // 点击按钮时，tabPadding减少10\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮下边距为12vp\n      }\n\n      Row() {\n        Button(\"文本增加 \") // 创建一个按钮，点击时增加文本\n          .width('47%') // 设置按钮宽度为47%\n          .height(50) // 设置按钮高度为50vp\n          .margin({ top: 5 }) // 设置按钮上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.text += '文本增加' // 点击按钮时，text增加\"文本增加\"\n          })\n          .margin({ right: '6%', bottom: '12vp' }) // 设置按钮右边距为6%，下边距为12vp\n        Button(\"文本重置\") // 创建一个按钮，点击时重置文本\n          .width('47%') // 设置按钮宽度为47%\n          .height(50) // 设置按钮高度为50vp\n          .margin({ top: 5 }) // 设置按钮上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.text = \"2\" // 点击按钮时，text重置为\"2\"\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮下边距为12vp\n      }\n\n      Row() {\n        Button(\"symmetricExtensible改变 \" + this.symmetricExtensible) // 创建一个按钮，显示当前symmetricExtensible值并改变\n          .width('100%') // 设置按钮宽度为100%\n          .height(50) // 设置按钮高度为50vp\n          .margin({ top: 5 }) // 设置按钮上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.symmetricExtensible = !this.symmetricExtensible // 点击按钮时，symmetricExtensible取反\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮下边距为12vp\n      }\n\n      Row() {\n        Button(\"layoutMode垂直 \") // 创建一个按钮，点击时将layoutMode设置为垂直\n          .width('47%') // 设置按钮宽度为47%\n          .height(50) // 设置按钮高度为50vp\n          .margin({ top: 5 }) // 设置按钮上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.layoutMode = LayoutMode.VERTICAL; // 点击按钮时，layoutMode设置为垂直\n          })\n          .margin({ right: '6%', bottom: '12vp' }) // 设置按钮右边距为6%，下边距为12vp\n        Button(\"layoutMode水平 \") // 创建一个按钮，点击时将layoutMode设置为水平\n          .width('47%') // 设置按钮宽度为47%\n          .height(50) // 设置按钮高度为50vp\n          .margin({ top: 5 }) // 设置按钮上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.layoutMode = LayoutMode.HORIZONTAL; // 点击按钮时，layoutMode设置为水平\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮下边距为12vp\n      }\n\n      Row() {\n        Button(\"verticalAlign朝上\") // 创建一个按钮，点击时将verticalAlign设置为朝上\n          .width('100%') // 设置按钮宽度为100%\n          .height(50) // 设置按钮高度为50vp\n          .margin({ top: 5 }) // 设置按钮上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.verticalAlign = VerticalAlign.Top; // 点击按钮时，verticalAlign设置为朝上\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮下边距为12vp\n      }\n\n      Row() {\n        Button(\"verticalAlign居中\") // 创建一个按钮，点击时将verticalAlign设置为居中\n          .width('100%') // 设置按钮宽度为100%\n          .height(50) // 设置按钮高度为50vp\n          .margin({ top: 5 }) // 设置按钮上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.verticalAlign = VerticalAlign.Center; // 点击按钮时，verticalAlign设置为居中\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮下边距为12vp\n      }\n\n      Row() {\n        Button(\"verticalAlign朝下\") // 创建一个按钮，点击时将verticalAlign设置为朝下\n          .width('100%') // 设置按钮宽度为100%\n          .height(50) // 设置按钮高度为50vp\n          .margin({ top: 5 }) // 设置按钮上边距为5vp\n          .onClick((event?: ClickEvent) => { // 设置按钮点击事件\n            this.verticalAlign = VerticalAlign.Bottom; // 点击按钮时，verticalAlign设置为朝下\n          })\n          .margin({ bottom: '12vp' }) // 设置按钮下边距为12vp\n      }\n\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) { // 创建一个Tabs组件，标签栏位置在底部，使用controller控制\n        TabContent() { // 创建第一个TabContent\n          Column().width('100%').height('100%').backgroundColor(Color.Pink) // 创建一个Column组件，宽度为100%，高度为100%，背景颜色为粉色\n        }.tabBar(BottomTabBarStyle.of($r(\"sys.media.ohos_app_icon\"), \"1\")) // 设置TabContent的标签栏样式，图标为系统资源，文本为\"1\"\n\n        TabContent() { // 创建第二个TabContent\n          Column().width('100%').height('100%').backgroundColor(Color.Green) // 创建一个Column组件，宽度为100%，高度为100%，背景颜色为绿色\n        }.tabBar(BottomTabBarStyle.of($r(\"sys.media.ohos_app_icon\"), this.text) // 设置TabContent的标签栏样式，图标为系统资源，文本为text\n          .padding(this.tabPadding) // 设置标签栏的内边距为tabPadding\n          .verticalAlign(this.verticalAlign) // 设置标签栏的垂直对齐方式为verticalAlign\n          .layoutMode(this.layoutMode) // 设置标签栏的布局模式为layoutMode\n          .symmetricExtensible(this.symmetricExtensible)) // 设置标签栏的对称扩展属性为symmetricExtensible\n\n        TabContent() { // 创建第三个TabContent\n          Column().width('100%').height('100%').backgroundColor(Color.Blue) // 创建一个Column组件，宽度为100%，高度为100%，背景颜色为蓝色\n        }.tabBar(BottomTabBarStyle.of($r(\"sys.media.ohos_app_icon\"), \"3\")) // 设置TabContent的标签栏样式，图标为系统资源，文本为\"3\"\n      }\n      .animationDuration(300) // 设置Tabs组件的动画持续时间为300毫秒\n      .height('60%') // 设置Tabs组件的高度为60%\n      .backgroundColor(0xf1f3f5) // 设置Tabs组件的背景颜色为浅灰色\n      .barMode(BarMode.Fixed) // 设置Tabs组件的标签栏模式为固定模式\n    }\n    .width('100%') // 设置Column组件的宽度为100%\n    .height(500) // 设置Column组件的高度为500vp\n    .margin({ top: 5 }) // 设置Column组件的上边距为5vp\n    .padding('24vp') // 设置Column组件的内边距为24vp\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个包含多个按钮和一个Tabs组件的界面。布局宽度占据整个屏幕，高度设为250vp，内边距为顶部24vp、左右24vp。组件的垂直方向上被分为多个部分，每个部分包含一个按钮和一个Tabs组件。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Column组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\nTabs组件包含多个TabContent，每个TabContent包含一个Column组件，Column组件的背景颜色和边框圆角属性不同。Tabs组件的样式包括下划线的颜色、高度、宽度、圆角半径和间距等属性，支持动态变化。Tabs组件的功能包括切换TabContent和触发onChange事件。\n整个布局通过Column布局保证按钮和Tabs组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TabsAttr {\n  private controller: TabsController = new TabsController() // Tabs组件的控制器\n  @State indicatorColor: Color = Color.Blue; // 下划线的颜色\n  @State indicatorWidth: number = 40; // 下划线的宽度\n  @State indicatorHeight: number = 10; // 下划线的高度\n  @State indicatorBorderRadius: number = 5; // 下划线的圆角半径\n  @State indicatorSpace: number = 10; // 下划线的间距\n  @State subTabBorderRadius: number = 20; // 子Tab的圆角半径\n  @State selectedMode: SelectedMode = SelectedMode.INDICATOR; // 选中模式\n  private colorFlag: boolean = true; // 颜色变化标志\n  private widthFlag: boolean = true; // 宽度变化标志\n  private heightFlag: boolean = true; // 高度变化标志\n  private borderFlag: boolean = true; // 圆角半径变化标志\n  private spaceFlag: boolean = true; // 间距变化标志\n\n  build() {\n    Column() {\n      Button(\"下划线颜色变化\").width('100%').margin({ bottom: '12vp' }) // 按钮，点击后改变下划线的颜色\n        .onClick((event?: ClickEvent) => {\n          if (this.colorFlag) {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorColor = Color.Red // 下划线颜色变为红色\n            })\n          } else {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorColor = Color.Yellow // 下划线颜色变为黄色\n            })\n          }\n          this.colorFlag = !this.colorFlag // 切换颜色变化标志\n        })\n      Button(\"下划线高度变化\").width('100%').margin({ bottom: '12vp' }) // 按钮，点击后改变下划线的高度\n        .onClick((event?: ClickEvent) => {\n          if (this.heightFlag) {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorHeight = 20 // 下划线高度变为20\n            })\n          } else {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorHeight = 10 // 下划线高度变为10\n            })\n          }\n          this.heightFlag = !this.heightFlag // 切换高度变化标志\n        })\n      Button(\"下划线宽度变化\").width('100%').margin({ bottom: '12vp' }) // 按钮，点击后改变下划线的宽度\n        .onClick((event?: ClickEvent) => {\n          if (this.widthFlag) {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorWidth = 30 // 下划线宽度变为30\n            })\n          } else {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorWidth = 50 // 下划线宽度变为50\n            })\n          }\n          this.widthFlag = !this.widthFlag // 切换宽度变化标志\n        })\n      Button(\"下划线圆角半径变化\").width('100%').margin({ bottom: '12vp' }) // 按钮，点击后改变下划线的圆角半径\n        .onClick((event?: ClickEvent) => {\n          if (this.borderFlag) {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorBorderRadius = 0 // 下划线圆角半径变为0\n            })\n          } else {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorBorderRadius = 5 // 下划线圆角半径变为5\n            })\n          }\n          this.borderFlag = !this.borderFlag // 切换圆角半径变化标志\n        })\n      Button(\"下划线间距变化\").width('100%').margin({ bottom: '12vp' }) // 按钮，点击后改变下划线的间距\n        .onClick((event?: ClickEvent) => {\n          if (this.spaceFlag) {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorSpace = 20 // 下划线间距变为20\n            })\n          } else {\n            animateTo({\n              duration: 1000, \n              curve: Curve.Linear, \n              delay: 200, \n              iterations: 1, \n              playMode: PlayMode.Normal, \n              onFinish: () => {\n                console.info('play end')\n              }\n            }, () => {\n              this.indicatorSpace = 10 // 下划线间距变为10\n            })\n          }\n          this.spaceFlag = !this.spaceFlag // 切换间距变化标志\n        })\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) { // Tabs组件，包含多个TabContent\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Pink).borderRadius('12vp') // TabContent，背景颜色为粉色，边框圆角为12vp\n        }.tabBar(SubTabBarStyle.of('pink') // 子Tab的样式\n          .indicator({\n            color: this.indicatorColor, // 下划线的颜色\n            height: this.indicatorHeight, // 下划线的高度\n            width: this.indicatorWidth, // 下划线的宽度\n            borderRadius: this.indicatorBorderRadius, // 下划线的圆角半径\n            marginTop: this.indicatorSpace // 下划线的间距\n          })\n          .selectedMode(this.selectedMode) // 选中模式\n          .board({ borderRadius: this.subTabBorderRadius }) // 子Tab的圆角半径\n          .labelStyle({})\n        )\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Yellow).borderRadius('12vp') // TabContent，背景颜色为黄色，边框圆角为12vp\n        }.tabBar('yellow') // 子Tab的样式\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Blue).borderRadius('12vp') // TabContent，背景颜色为蓝色，边框圆角为12vp\n        }.tabBar('blue') // 子Tab的样式\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green).borderRadius('12vp') // TabContent，背景颜色为绿色，边框圆角为12vp\n        }.tabBar('green') // 子Tab的样式\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Gray).borderRadius('12vp') // TabContent，背景颜色为灰色，边框圆角为12vp\n        }.tabBar('gray') // 子Tab的样式\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Orange).borderRadius('12vp') // TabContent，背景颜色为橙色，边框圆角为12vp\n        }.tabBar('orange') // 子Tab的样式\n      }\n      .vertical(false) // Tabs组件为水平布局\n      .scrollable(true) // Tabs组件可滚动\n      .barMode(BarMode.Scrollable) // Tabs组件的Bar模式为可滚动\n      .barHeight(140) // Tabs组件的Bar高度为140\n      .animationDuration(400) // Tabs组件的动画持续时间为400ms\n      .onChange((index: number) => { // Tabs组件的onChange事件\n        console.info(index.toString()) // 打印当前选中的Tab的索引\n      })\n      .backgroundColor(0xF5F5F5) // Tabs组件的背景颜色为0xF5F5F5\n      .height(320) // Tabs组件的高度为320\n    }.width('100%').height(250).padding({ top: '24vp', left: '24vp', right: '24vp' }) // Column组件的宽度为100%，高度为250vp，内边距为顶部24vp、左右24vp\n  }\n}"
            }
        ],
        "is_common_attrs": false
    },
    "Button": {
        "description": "按钮组件，可快速创建不同样式的按钮。",
        "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "Button(options: ButtonOptions)",
                "params": {
                    "options": {
                        "type": "ButtonOptions",
                        "required": true,
                        "description": "按钮的选项。"
                    }
                }
            },
            {
                "description": "Button(label: ResourceStr, options?: ButtonOptions)",
                "params": {
                    "label": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "按钮的文本内容。"
                    },
                    "options": {
                        "type": "ButtonOptions",
                        "required": false,
                        "description": "按钮的选项。"
                    }
                }
            }
        ],
        "attributes": {
            "type": {
                "description": "设置Button样式。",
                "params": {
                    "value": {
                        "type": [
                            "ButtonType.Capsule",
                            "ButtonType.Circle",
                            "ButtonType.Normal"
                        ],
                        "required": true,
                        "description": "Button样式。",
                        "default": "ButtonType.Capsule"
                    }
                }
            },
            "stateEffect": {
                "description": "设置是否开启按压态显示效果。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "按钮按下时是否开启按压态显示效果，当设置为false时，按压效果关闭。",
                        "default": true
                    }
                }
            },
            "buttonStyle": {
                "description": "设置Button组件的样式和重要程度。",
                "params": {
                    "value": {
                        "type": [
                            "ButtonStyleMode.EMPHASIZED",
                            "ButtonStyleMode.NORMAL",
                            "ButtonStyleMode.TEXTUAL"
                        ],
                        "required": true,
                        "description": "Button组件的样式和重要程度。",
                        "default": "ButtonStyleMode.EMPHASIZED"
                    }
                }
            },
            "controlSize": {
                "description": "设置Button组件的尺寸。",
                "params": {
                    "value": {
                        "type": [
                            "ControlSize.SMALL",
                            "ControlSize.NORMAL"
                        ],
                        "required": true,
                        "description": "Button组件的尺寸。",
                        "default": "ControlSize.NORMAL"
                    }
                }
            },
            "role": {
                "description": "设置Button组件的角色。",
                "params": {
                    "value": {
                        "type": [
                            "ButtonRole.NORMAL",
                            "ButtonRole.ERROR"
                        ],
                        "required": true,
                        "description": "Button组件的角色。",
                        "default": "ButtonRole.NORMAL"
                    }
                }
            },
            "fontSize": {
                "description": "设置文本显示字号。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "文本显示字号。"
                    }
                }
            },
            "fontColor": {
                "description": "设置文本显示颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "文本显示颜色。"
                    }
                }
            },
            "fontWeight": {
                "description": "设置文本的字体粗细。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "FontWeight",
                            "string"
                        ],
                        "required": true,
                        "description": "文本的字体粗细，number类型取值[100, 900]，取值间隔为100，取值越大，字体越粗。"
                    }
                }
            },
            "fontStyle": {
                "description": "设置文本的字体样式。",
                "params": {
                    "value": {
                        "type": "FontStyle",
                        "required": true,
                        "description": "文本的字体样式。"
                    }
                }
            },
            "fontFamily": {
                "description": "设置字体列表。",
                "params": {
                    "value": {
                        "type": [
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "字体列表。默认字体'HarmonyOS Sans'，当前支持'HarmonyOS Sans'字体和注册自定义字体。"
                    }
                }
            },
            "labelStyle": {
                "description": "设置Button组件label文本和字体的样式。",
                "params": {
                    "value": {
                        "type": "LabelStyle",
                        "required": true,
                        "description": "Button组件label文本和字体的样式。"
                    }
                }
            }
        },
        "events": {
            "onClick": {
                "description": "按钮点击事件。",
                "params": {
                    "event": {
                        "type": "GestureEvent",
                        "required": true,
                        "description": "按钮点击事件的参数。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过Row和Column布局实现了一个按钮展示界面。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为一个Column，其中包含一个Button。Button的宽度由@State变量widthShortSize控制，高度固定为100vp，背景颜色为0x317aff。Button的文本内容由@State变量txt控制，文本样式包括溢出处理方式为TextOverflow.Clip，最大行数为1，字体大小固定为20，字体加粗，字体家族为'cursive'，字体样式为斜体。Button的文本字体大小为40。",
                "code": "@Entry\n@Component\nstruct buttonTestDemo {\n  @State txt: string = 'overflowTextOverlengthTextOverflow.Clip'; // 按钮的文本内容\n  @State widthShortSize: number = 210; // 按钮的宽度\n\n  build() {\n    Row() {\n      Column() {\n        Button(this.txt) // 创建一个按钮，文本内容为txt\n          .width(this.widthShortSize) // 设置按钮的宽度为widthShortSize\n          .height(100) // 设置按钮的高度为100vp\n          .backgroundColor(0x317aff) // 设置按钮的背景颜色为0x317aff\n          .labelStyle({ \n            overflow: TextOverflow.Clip, // 设置文本溢出处理方式为裁剪\n            maxLines: 1, // 设置文本最大行数为1\n            minFontSize: 20, // 设置最小字体大小为20\n            maxFontSize: 20, // 设置最大字体大小为20\n            font: {\n              size: 20, // 设置字体大小为20\n              weight: FontWeight.Bolder, // 设置字体加粗\n              family: 'cursive', // 设置字体家族为'cursive'\n              style: FontStyle.Italic // 设置字体样式为斜体\n            }\n          })\n          .fontSize(40) // 设置按钮文本的字体大小为40\n      }\n      .width('100%') // 设置Column的宽度为100%\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个简单的计数器界面。布局宽度占据整个屏幕，高度设为 100%，内容在垂直方向上居中对齐。组件的垂直方向上包含一个 Text 组件和一个 Button 组件。\nText 组件用于显示当前计数器的值，字体大小为 30，点击 Text 组件可以增加计数器的值。Button 组件根据计数器的值显示不同的文本，字体大小为 30，高度为 50。当计数器的值为负数时，Button 显示 \"count is negative\"；当计数器的值为偶数时，Button 显示 \"count is even\"；当计数器的值为奇数时，Button 显示 \"count is odd\"。\n整个布局通过 Column 布局保证 Text 和 Button 在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct SwipeGestureExample {\n  @State count: number = 0 // 定义一个状态变量 count，初始值为 0\n\n  build() {\n    Column() {\n      Text(`${this.count}`) // 显示当前计数器的值\n        .fontSize(30) // 设置字体大小为 30\n        .onClick(() => { // 点击 Text 组件时触发的事件\n          this.count++ // 增加计数器的值\n        })\n      if (this.count <= 0) { // 当计数器的值小于等于 0 时\n        Button('count is negative') // 显示 \"count is negative\" 的按钮\n          .fontSize(30) // 设置字体大小为 30\n          .height(50) // 设置按钮高度为 50\n      } else if (this.count % 2 === 0) { // 当计数器的值为偶数时\n        Button('count is even') // 显示 \"count is even\" 的按钮\n          .fontSize(30) // 设置字体大小为 30\n          .height(50) // 设置按钮高度为 50\n      } else { // 当计数器的值为奇数时\n        Button('count is odd') // 显示 \"count is odd\" 的按钮\n          .fontSize(30) // 设置字体大小为 30\n          .height(50) // 设置按钮高度为 50\n      }\n    }\n    .height('100%') // 设置 Column 的高度为 100%\n    .width('100%') // 设置 Column 的宽度为 100%\n    .justifyContent(FlexAlign.Center) // 设置 Column 的内容在垂直方向上居中对齐\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示不同样式和角色的按钮的界面。布局高度设为 200vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为两个部分，每个部分包含一个标题和一组按钮。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过 Flex 组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过 Flex 布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ButtonExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      // 第一部分：普通按钮\n      Text('Role is Normal button').fontSize(9).fontColor(0xCCCCCC) // 标题文本，字体大小为9，颜色为灰色\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        Button('Emphasized', { buttonStyle: ButtonStyleMode.EMPHASIZED, role: ButtonRole.NORMAL }); // 强调按钮，样式为强调，角色为普通\n        Button('Normal', { buttonStyle: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL }); // 普通按钮，样式为普通，角色为普通\n        Button('Textual', { buttonStyle: ButtonStyleMode.TEXTUAL, role: ButtonRole.NORMAL }); // 文本按钮，样式为文本，角色为普通\n      }\n      // 第二部分：错误按钮\n      Text('Role is Error button').fontSize(9).fontColor(0xCCCCCC) // 标题文本，字体大小为9，颜色为灰色\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        Button('Emphasized', { buttonStyle: ButtonStyleMode.EMPHASIZED, role: ButtonRole.ERROR}); // 强调按钮，样式为强调，角色为错误\n        Button('Normal', { buttonStyle: ButtonStyleMode.NORMAL, role: ButtonRole.ERROR }); // 普通按钮，样式为普通，角色为错误\n        Button('Textual', { buttonStyle: ButtonStyleMode.TEXTUAL, role: ButtonRole.ERROR }); // 文本按钮，样式为文本，角色为错误\n      }\n    }.height(200).padding({ left: 35, right: 35, top: 35 }) // 设置整个组件的高度为200vp，内边距为左右35vp、顶部35vp\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示多种类型按钮（如强调按钮、普通按钮、文本按钮）及其不同尺寸效果的界面。布局宽度占据整个屏幕，高度设为 400vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组按钮。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过 Flex 组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过 Flex 布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ButtonExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      // 创建一个文本组件，显示“Normal size button”，字体大小为9，颜色为0xCCCCCC\n      Text('Normal size button').fontSize(9).fontColor(0xCCCCCC)\n      // 创建一个水平布局的 Flex 组件，对齐方式为居中对齐，按钮之间的间距均匀分布\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        // 创建一个强调风格的按钮，显示文本“Emphasized”\n        Button('Emphasized', { buttonStyle: ButtonStyleMode.EMPHASIZED });\n        // 创建一个普通风格的按钮，显示文本“Normal”\n        Button('Normal', { buttonStyle: ButtonStyleMode.NORMAL });\n        // 创建一个文本风格的按钮，显示文本“Textual”\n        Button('Textual', { buttonStyle: ButtonStyleMode.TEXTUAL });\n      }\n\n      // 创建一个文本组件，显示“Small size button”，字体大小为9，颜色为0xCCCCCC\n      Text('Small size button').fontSize(9).fontColor(0xCCCCCC)\n      // 创建一个水平布局的 Flex 组件，对齐方式为居中对齐，按钮之间的间距均匀分布\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        // 创建一个强调风格的小尺寸按钮，显示文本“Emphasized”\n        Button('Emphasized', { controlSize: ControlSize.SMALL, buttonStyle: ButtonStyleMode.EMPHASIZED });\n        // 创建一个普通风格的小尺寸按钮，显示文本“Normal”\n        Button('Normal', { controlSize: ControlSize.SMALL, buttonStyle: ButtonStyleMode.NORMAL });\n        // 创建一个文本风格的小尺寸按钮，显示文本“Textual”\n        Button('Textual', { controlSize: ControlSize.SMALL, buttonStyle: ButtonStyleMode.TEXTUAL });\n      }\n\n      // 创建一个文本组件，显示“Small size button”，字体大小为9，颜色为0xCCCCCC\n      Text('Small size button').fontSize(9).fontColor(0xCCCCCC)\n      // 创建一个水平布局的 Flex 组件，对齐方式为居中对齐，按钮之间的间距均匀分布\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        // 创建一个强调风格的小尺寸按钮，显示文本“Emphasized”\n        Button('Emphasized').controlSize(ControlSize.SMALL).buttonStyle(ButtonStyleMode.EMPHASIZED);\n        // 创建一个普通风格的小尺寸按钮，显示文本“Normal”\n        Button('Normal').controlSize(ControlSize.SMALL).buttonStyle(ButtonStyleMode.NORMAL);\n        // 创建一个文本风格的小尺寸按钮，显示文本“Textual”\n        Button('Textual').controlSize(ControlSize.SMALL).buttonStyle(ButtonStyleMode.TEXTUAL);\n      }\n\n    }.height(400).padding({ left: 35, right: 35, top: 35 })\n  }\n}"
            },
            {
                "description": "该组件实现了一个自定义样式的按钮，通过自定义样式类 `MyButtonStyle` 实现了按钮的圆圈样式替换。布局宽度占据整个屏幕，高度设为 100%，内边距为 0。组件的垂直方向上被分为两个部分：一个自定义样式的按钮和一个开关控件。按钮的样式包括背景颜色、宽度和高度等属性，支持不同的样式展示。按钮组之间通过 Flex 组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。开关控件用于控制按钮的启用或禁用状态。整个布局通过 Flex 布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// 自定义样式类，实现按钮的圆圈样式替换\nclass MyButtonStyle implements ContentModifier<ButtonConfiguration> {\n  x: number = 0 // 按钮点击位置的x坐标\n  y: number = 0 // 按钮点击位置的y坐标\n  selectedColor: Color = Color.Black // 按钮按压时的颜色\n\n  // 构造函数，初始化按钮的位置和颜色\n  constructor(x: number, y: number, ColorType: Color) {\n    this.x = x\n    this.y = y\n    this.selectedColor = ColorType\n  }\n\n  // 应用自定义样式，返回一个构建器\n  applyContent(): WrappedBuilder<[ButtonConfiguration]> {\n    return wrapBuilder(buildButton1)\n  }\n}\n\n// 构建器函数，用于构建自定义样式的按钮\n@Builder function buildButton1(config: ButtonConfiguration) {\n  Column({ space: 30 }) {\n    // 显示按钮的启用状态\n    Text(config.enabled ? \"enabled true\" : \"enabled false\")\n    // 显示按钮的按压状态\n    Text('圆圈状态' + (config.pressed ? \"（ 按压 ）\" : \"（ 非按压 ）\"))\n    // 显示按钮点击位置的x坐标\n    Text('点击位置x坐标：' + (config.enabled ? (config.contentModifier as MyButtonStyle).x : \"0\"))\n    // 显示按钮点击位置的y坐标\n    Text('点击位置y坐标：' + (config.enabled ? (config.contentModifier as MyButtonStyle).y : \"0\"))\n    // 绘制一个圆圈，根据按压状态改变颜色\n    Circle({ width: 50, height: 50 })\n      .fill(config.pressed ? (config.contentModifier as MyButtonStyle).selectedColor : Color.Black)\n      .gesture(\n        // 添加点击手势，触发按钮点击事件\n        TapGesture({ count: 1 }).onAction((event: GestureEvent) => {\n          config.triggerClick(event.fingerList[0].localX, event.fingerList[0].localY)\n        })\n      ).opacity(config.enabled ? 1 : 0.1) // 根据按钮启用状态设置透明度\n  }\n}\n\n// 入口组件，定义按钮示例\n@Entry\n@Component\nstruct ButtonExample {\n  @State buttonEnabled: boolean = true; // 按钮的启用状态\n  @State positionX: number = 0 // 按钮点击位置的x坐标\n  @State positionY: number = 0 // 按钮点击位置的y坐标\n  @State state: boolean[] = [true, false] // 按钮状态数组\n  @State index: number = 0 // 按钮状态索引\n\n  build() {\n    Column() {\n      // 创建一个自定义样式的按钮\n      Button('OK')\n        .contentModifier(new MyButtonStyle(this.positionX, this.positionY, Color.Red))\n        .onClick((event) => {\n          console.info('change' + JSON.stringify(event))\n          this.positionX = event.displayX // 更新按钮点击位置的x坐标\n          this.positionY = event.displayY // 更新按钮点击位置的y坐标\n        }).enabled(this.buttonEnabled) // 设置按钮的启用状态\n\n      Row() {\n        // 创建一个开关控件，用于控制按钮的启用或禁用状态\n        Toggle({ type: ToggleType.Switch, isOn: true }).onChange((value: boolean) => {\n          if (value) {\n            this.buttonEnabled = true // 启用按钮\n          } else {\n            this.buttonEnabled = false // 禁用按钮\n          }\n        }).margin({ left: -80 }) // 设置开关控件的左边距\n      }\n    }.height('100%').width('100%').justifyContent(FlexAlign.Center) // 设置布局的高度、宽度和对齐方式\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示多种类型按钮（如普通按钮、胶囊按钮、圆形按钮）及其状态效果的界面。布局宽度占据整个屏幕，高度设为 400vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组按钮。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过 Flex 组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过 Flex 布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ButtonExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      // 第一部分：普通按钮\n      Text('Normal button').fontSize(9).fontColor(0xCCCCCC) // 标题文本，字体大小为9，颜色为灰色\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        Button('OK', { type: ButtonType.Normal, stateEffect: true }) // 普通按钮，显示文本为“OK”，启用状态效果\n          .borderRadius(8) // 按钮边框圆角为8\n          .backgroundColor(0x317aff) // 按钮背景颜色为蓝色\n          .width(90) // 按钮宽度为90\n          .onClick(() => {\n            console.log('ButtonType.Normal') // 点击按钮时输出日志\n          })\n        Button({ type: ButtonType.Normal, stateEffect: true }) {\n          Row() {\n            LoadingProgress().width(20).height(20).margin({ left: 12 }).color(0xFFFFFF) // 加载进度条，宽度20，高度20，左边距12，颜色为白色\n            Text('loading').fontSize(12).fontColor(0xffffff).margin({ left: 5, right: 12 }) // 文本“loading”，字体大小12，颜色为白色，左右边距分别为5和12\n          }.alignItems(VerticalAlign.Center) // 行内元素垂直居中对齐\n        }.borderRadius(8).backgroundColor(0x317aff).width(90).height(40) // 按钮边框圆角为8，背景颜色为蓝色，宽度90，高度40\n\n        Button('Disable', { type: ButtonType.Normal, stateEffect: false }).opacity(0.4) // 禁用状态的普通按钮，显示文本为“Disable”，不启用状态效果，透明度为0.4\n          .borderRadius(8).backgroundColor(0x317aff).width(90) // 按钮边框圆角为8，背景颜色为蓝色，宽度90\n      }\n\n      // 第二部分：胶囊按钮\n      Text('Capsule button').fontSize(9).fontColor(0xCCCCCC) // 标题文本，字体大小为9，颜色为灰色\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        Button('OK', { type: ButtonType.Capsule, stateEffect: true }).backgroundColor(0x317aff).width(90) // 胶囊按钮，显示文本为“OK”，启用状态效果，背景颜色为蓝色，宽度90\n        Button({ type: ButtonType.Capsule, stateEffect: true }) {\n          Row() {\n            LoadingProgress().width(20).height(20).margin({ left: 12 }).color(0xFFFFFF) // 加载进度条，宽度20，高度20，左边距12，颜色为白色\n            Text('loading').fontSize(12).fontColor(0xffffff).margin({ left: 5, right: 12 }) // 文本“loading”，字体大小12，颜色为白色，左右边距分别为5和12\n          }.alignItems(VerticalAlign.Center).width(90).height(40) // 行内元素垂直居中对齐，宽度90，高度40\n        }.backgroundColor(0x317aff) // 按钮背景颜色为蓝色\n\n        Button('Disable', { type: ButtonType.Capsule, stateEffect: false }).opacity(0.4) // 禁用状态的胶囊按钮，显示文本为“Disable”，不启用状态效果，透明度为0.4\n          .backgroundColor(0x317aff).width(90) // 按钮背景颜色为蓝色，宽度90\n      }\n\n      // 第三部分：圆形按钮\n      Text('Circle button').fontSize(9).fontColor(0xCCCCCC) // 标题文本，字体大小为9，颜色为灰色\n      Flex({ alignItems: ItemAlign.Center, wrap: FlexWrap.Wrap }) {\n        Button({ type: ButtonType.Circle, stateEffect: true }) {\n          LoadingProgress().width(20).height(20).color(0xFFFFFF) // 加载进度条，宽度20，高度20，颜色为白色\n        }.width(55).height(55).backgroundColor(0x317aff) // 圆形按钮，宽度55，高度55，背景颜色为蓝色\n\n        Button({ type: ButtonType.Circle, stateEffect: true }) {\n          LoadingProgress().width(20).height(20).color(0xFFFFFF) // 加载进度条，宽度20，高度20，颜色为白色\n        }.width(55).height(55).margin({ left: 20 }).backgroundColor(0xF55A42) // 圆形按钮，宽度55，高度55，左边距20，背景颜色为红色\n      }\n    }.height(400).padding({ left: 35, right: 35, top: 35 }) // 整体布局高度为400，内边距为左右35，顶部35\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Toggle": {
        "description": "提供勾选框样式、状态按钮样式及开关样式。",
        "details": "该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "Toggle(options: { type: ToggleType, isOn?: boolean })",
                "params": {
                    "options": {
                        "type": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "ToggleType",
                                    "required": true,
                                    "description": "开关的样式。",
                                    "default": "ToggleType.Switch"
                                },
                                "isOn": {
                                    "type": "boolean",
                                    "required": false,
                                    "description": "开关是否打开，true：打开，false：关闭。",
                                    "default": false
                                }
                            }
                        },
                        "required": true,
                        "description": "开关的配置选项。"
                    }
                }
            }
        ],
        "attributes": {
            "selectedColor": {
                "description": "设置组件打开状态的背景颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "组件打开状态的背景颜色。"
                    }
                }
            },
            "switchPointColor": {
                "description": "设置Switch类型的圆形滑块颜色。仅对type为ToggleType.Switch生效。",
                "params": {
                    "color": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "Switch类型的圆形滑块颜色。",
                        "default": "#ffffffff"
                    }
                }
            },
            "switchStyle": {
                "description": "设置Switch类型的样式。仅对type为ToggleType.Switch生效。",
                "params": {
                    "value": {
                        "type": "SwitchStyle",
                        "required": true,
                        "description": "Switch类型的样式配置。"
                    }
                }
            },
            "contentModifier": {
                "description": "定制Toggle内容区的方法。",
                "params": {
                    "modifier": {
                        "type": "ContentModifier<ToggleConfiguration>",
                        "required": true,
                        "description": "定制Toggle内容区的方法。"
                    }
                }
            }
        },
        "events": {
            "onChange": {
                "description": "开关状态切换时触发该事件。",
                "params": {
                    "isOn": {
                        "type": "boolean",
                        "required": true,
                        "description": "为true时，代表状态从关切换为开。false时，代表状态从开切换为关。"
                    }
                }
            }
        },
        "rules": [
            "仅当ToggleType为Button时可包含子组件。"
        ],
        "examples": [
            {
                "description": "该组件通过 Column 布局实现了一个展示自定义样式 Toggle 组件（Switch 类型）的界面。布局宽度占据整个屏幕，内边距为左右 24vp、顶部 24vp。组件的垂直方向上被分为两个部分：一个标题和一个 Flex 布局的 Toggle 组件组。\n\n标题部分使用 Text 组件展示文字 \"type: Switch\"，字体大小为 12vp，颜色为浅灰色（0xcccccc），宽度为 90%。\n\nToggle 组件组通过 Flex 布局实现，水平方向上均匀分布两个 Toggle 组件，对齐方式为居中对齐。每个 Toggle 组件的类型为 Switch，分别设置为关闭状态（isOn: false）和开启状态（isOn: true）。\n\n每个 Toggle 组件的样式通过 switchStyle 方法进行自定义，包括圆形滑块的半径（pointRadius: 15）、滑轨的圆角（trackBorderRadius: 10）、圆形滑块的颜色（pointColor: '#D2B48C'）、关闭状态的背景颜色（unselectedColor: Color.Pink）。\n\nToggle 组件的功能包括状态变化事件，当 Toggle 组件的状态发生变化时，会触发 onChange 事件，并在控制台输出当前状态。\n\n整个布局通过 Column 布局保证标题和 Toggle 组件组在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ToggleExample {\n  build() {\n    Column({ space: 10 }) { // 使用 Column 布局，垂直方向上间距为 10vp\n      Text('type: Switch') // 标题文字\n        .fontSize(12) // 字体大小为 12vp\n        .fontColor(0xcccccc) // 字体颜色为浅灰色\n        .width('90%') // 宽度为 90%\n      \n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) { // 使用 Flex 布局，水平方向上均匀分布，对齐方式为居中对齐\n        Toggle({ type: ToggleType.Switch, isOn: false }) // 第一个 Toggle 组件，类型为 Switch，初始状态为关闭\n          .selectedColor('#007DFF') // 开启状态下的背景颜色\n          .switchStyle({\n            pointRadius: 15, // 圆形滑块的半径为 15vp\n            trackBorderRadius: 10, // 滑轨的圆角为 10vp\n            pointColor: '#D2B48C', // 圆形滑块的颜色为 '#D2B48C'\n            unselectedColor: Color.Pink // 关闭状态下的背景颜色为粉色\n          })\n          .onChange((isOn: boolean) => { // 状态变化事件\n            console.info('Component status:' + isOn) // 输出当前状态到控制台\n          })\n\n        Toggle({ type: ToggleType.Switch, isOn: true }) // 第二个 Toggle 组件，类型为 Switch，初始状态为开启\n          .selectedColor('#007DFF') // 开启状态下的背景颜色\n          .switchStyle({\n            pointRadius: 15, // 圆形滑块的半径为 15vp\n            trackBorderRadius: 10, // 滑轨的圆角为 10vp\n            pointColor: '#D2B48C', // 圆形滑块的颜色为 '#D2B48C'\n            unselectedColor: Color.Pink // 关闭状态下的背景颜色为粉色\n          })\n          .onChange((isOn: boolean) => { // 状态变化事件\n            console.info('Component status:' + isOn) // 输出当前状态到控制台\n          })\n      }\n    }.width('100%').padding(24) // 布局宽度为 100%，内边距为左右 24vp、顶部 24vp\n  }\n}"
            },
            {
                "description": "该组件实现了一个自定义Toggle样式的功能，通过按钮切换圆形背景颜色的功能。布局采用Column和Row嵌套的方式，Column用于垂直布局，Row用于水平布局。组件的样式包括圆形背景颜色、按钮文字颜色和背景颜色等。组件的功能包括点击按钮切换圆形背景颜色，并通过Toggle组件的onChange事件监听Toggle状态的变化。\n\n布局属性：\n- Column组件的space属性设置为50，表示子组件之间的垂直间距为50。\n- Row组件没有设置space属性，表示子组件之间的水平间距为默认值。\n- Circle组件的width和height属性设置为150，表示圆形的宽度和高度均为150。\n- Button组件的文字颜色和背景颜色未显式设置，使用默认值。\n\n组件的样式和外观：\n- Circle组件的fill属性根据Toggle的状态（isOn）来决定填充颜色，当Toggle状态为true时，填充颜色为MySwitchStyle中的selectedColor，否则为默认的蓝色。\n- Button组件的文字颜色和背景颜色未显式设置，使用默认值。\n\n组件的排列和嵌套关系：\n- Column组件包含一个Circle组件和一个Row组件，Circle组件位于Row组件的上方。\n- Row组件包含两个Button组件，Button组件之间水平排列。\n\n组件的功能和交互：\n- Button组件的onClick事件用于触发Toggle状态的改变，点击“蓝”按钮时，Toggle状态变为false，点击“黄”按钮时，Toggle状态变为true。\n- Toggle组件的onChange事件用于监听Toggle状态的变化，并在控制台输出当前状态。",
                "code": "// 自定义Toggle样式类，实现ContentModifier接口\nclass MySwitchStyle implements ContentModifier<ToggleConfiguration> {\n  // 选中的颜色，默认为白色\n  selectedColor: Color = Color.White;\n  // 灯的标识符，默认为字符串\n  lamp: string = 'string';\n\n  // 构造函数，初始化selectedColor和lamp\n  constructor(selectedColor: Color, lamp: string) {\n    this.selectedColor = selectedColor;\n    this.lamp = lamp;\n  }\n\n  // 应用内容的方法，返回一个WrappedBuilder\n  applyContent(): WrappedBuilder<[ToggleConfiguration]> {\n    return wrapBuilder(buildSwitch);\n  }\n}\n\n// 构建Toggle内容的Builder函数\n@Builder function buildSwitch(config: ToggleConfiguration) {\n  // 创建一个Column组件，设置子组件之间的垂直间距为50\n  Column({ space: 50 }) {\n    // 创建一个Circle组件，设置宽度和高度均为150\n    Circle({ width: 150, height: 150 })\n      // 根据Toggle的状态设置填充颜色，当Toggle状态为true时，填充颜色为MySwitchStyle中的selectedColor，否则为默认的蓝色\n      .fill(config.isOn ? (config.contentModifier as MySwitchStyle).selectedColor : Color.Blue)\n    // 创建一个Row组件，用于水平排列按钮\n    Row() {\n      // 创建一个Button组件，显示“蓝”和lamp的值\n      Button('蓝' + JSON.stringify((config.contentModifier as MySwitchStyle).lamp))\n        // 设置点击事件，点击时触发Toggle状态的改变为false\n        .onClick(() => {\n          config.triggerChange(false);\n        })\n      // 创建一个Button组件，显示“黄”和lamp的值\n      Button('黄' + JSON.stringify((config.contentModifier as MySwitchStyle).lamp))\n        // 设置点击事件，点击时触发Toggle状态的改变为true\n        .onClick(() => {\n          config.triggerChange(true);\n        })\n    }\n  }\n}\n\n// 入口组件\n@Entry\n@Component\nstruct Index {\n  // 构建方法\n  build() {\n    // 创建一个Column组件，设置子组件之间的垂直间距为50\n    Column({ space: 50 }) {\n      // 创建一个Toggle组件，设置类型为Switch\n      Toggle({ type: ToggleType.Switch })\n        // 设置Toggle为启用状态\n        .enabled(true)\n        // 设置Toggle的内容修饰器为MySwitchStyle，初始颜色为黄色，lamp为“灯”\n        .contentModifier(new MySwitchStyle(Color.Yellow, '灯'))\n        // 设置Toggle状态改变时的回调函数，输出当前状态\n        .onChange((isOn: boolean) => {\n          console.info('Switch Log:' + isOn);\n        })\n    }\n    // 设置Column组件的宽度和高度均为100%\n    .height('100%').width('100%')\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个展示多种类型切换组件（如开关、复选框、按钮）及其状态效果的界面。布局宽度占据整个屏幕，内边距为左右 24vp、顶部 24vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组切换组件。每个切换组件组的组件以水平布局方式排列，组件之间的间距均匀分布，且对齐方式为居中对齐。\n切换组件的样式包括背景颜色、选中颜色、大小等属性，支持不同的样式展示。切换组件组之间通过 Column 组件进行分隔。切换组件的功能包括状态变化事件，用户可以通过操作切换组件触发相应操作，切换组件也可以在启用或禁用状态下进行展示。\n整个布局通过 Column 布局保证切换组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ToggleExample {\n  build() {\n    Column({ space: 10 }) { // 使用 Column 布局，设置组件之间的间距为 10vp\n      Text('type: Switch').fontSize(12).fontColor(0xcccccc).width('90%') // 显示标题文本，字体大小为 12vp，颜色为灰色，宽度为 90%\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) { // 使用 Flex 布局，水平方向上均匀分布组件，垂直方向上居中对齐\n        Toggle({ type: ToggleType.Switch, isOn: false }) // 创建一个开关类型的切换组件，初始状态为关闭\n          .selectedColor('#007DFF') // 设置选中状态的颜色为蓝色\n          .switchPointColor('#FFFFFF') // 设置开关滑块的颜色为白色\n          .onChange((isOn: boolean) => { // 监听状态变化事件\n            console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n          })\n\n        Toggle({ type: ToggleType.Switch, isOn: true }) // 创建一个开关类型的切换组件，初始状态为开启\n          .selectedColor('#007DFF') // 设置选中状态的颜色为蓝色\n          .switchPointColor('#FFFFFF') // 设置开关滑块的颜色为白色\n          .onChange((isOn: boolean) => { // 监听状态变化事件\n            console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n          })\n      }\n\n      Text('type: Checkbox').fontSize(12).fontColor(0xcccccc).width('90%') // 显示标题文本，字体大小为 12vp，颜色为灰色，宽度为 90%\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) { // 使用 Flex 布局，水平方向上均匀分布组件，垂直方向上居中对齐\n        Toggle({ type: ToggleType.Checkbox, isOn: false }) // 创建一个复选框类型的切换组件，初始状态为关闭\n          .size({ width: 20, height: 20 }) // 设置复选框的大小为 20vp x 20vp\n          .selectedColor('#007DFF') // 设置选中状态的颜色为蓝色\n          .onChange((isOn: boolean) => { // 监听状态变化事件\n            console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n          })\n\n        Toggle({ type: ToggleType.Checkbox, isOn: true }) // 创建一个复选框类型的切换组件，初始状态为开启\n          .size({ width: 20, height: 20 }) // 设置复选框的大小为 20vp x 20vp\n          .selectedColor('#007DFF') // 设置选中状态的颜色为蓝色\n          .onChange((isOn: boolean) => { // 监听状态变化事件\n            console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n          })\n      }\n\n      Text('type: Button').fontSize(12).fontColor(0xcccccc).width('90%') // 显示标题文本，字体大小为 12vp，颜色为灰色，宽度为 90%\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) { // 使用 Flex 布局，水平方向上均匀分布组件，垂直方向上居中对齐\n        Toggle({ type: ToggleType.Button, isOn: false }) { // 创建一个按钮类型的切换组件，初始状态为关闭\n          Text('status button').fontColor('#182431').fontSize(12) // 按钮内的文本，字体颜色为深色，字体大小为 12vp\n        }.width(106) // 设置按钮的宽度为 106vp\n        .selectedColor('rgba(0,125,255,0.20)') // 设置选中状态的颜色为半透明蓝色\n        .onChange((isOn: boolean) => { // 监听状态变化事件\n          console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n        })\n\n        Toggle({ type: ToggleType.Button, isOn: true }) { // 创建一个按钮类型的切换组件，初始状态为开启\n          Text('status button').fontColor('#182431').fontSize(12) // 按钮内的文本，字体颜色为深色，字体大小为 12vp\n        }.width(106) // 设置按钮的宽度为 106vp\n        .selectedColor('rgba(0,125,255,0.20)') // 设置选中状态的颜色为半透明蓝色\n        .onChange((isOn: boolean) => { // 监听状态变化事件\n          console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n        })\n      }\n    }.width('100%').padding(24) // 设置 Column 的宽度为 100%，内边距为 24vp\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Checkbox": {
        "description": "提供多选框组件，通常用于某选项的打开或关闭。",
        "details": null,
        "interfaces": [
            {
                "description": "Checkbox(options?: CheckboxOptions)",
                "params": {
                    "options": {
                        "type": "CheckboxOptions",
                        "required": false,
                        "description": "多选框的配置选项。"
                    }
                }
            }
        ],
        "attributes": {
            "name": {
                "description": "用于指定多选框名称。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": false,
                        "description": "多选框名称。"
                    }
                }
            },
            "group": {
                "description": "用于指定多选框所属群组的名称（即所属CheckboxGroup的名称）。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": false,
                        "description": "多选框所属群组的名称。"
                    }
                }
            },
            "indicatorBuilder": {
                "description": "配置多选框的选中样式为自定义组件。自定义组件与Checkbox组件为中心点对齐显示。indicatorBuilder设置为undefined/null时，默认为indicatorBuilder未设置状态。",
                "params": {
                    "value": {
                        "type": "CustomBuilder",
                        "required": false,
                        "description": "自定义组件的构造器。"
                    }
                }
            },
            "select": {
                "description": "设置多选框是否选中。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "多选框是否选中。",
                        "default": false
                    }
                }
            },
            "selectedColor": {
                "description": "设置多选框选中状态颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "多选框选中状态颜色。",
                        "default": "$r('sys.color.ohos_id_color_text_primary_activated')"
                    }
                }
            },
            "unselectedColor": {
                "description": "设置多选框非选中状态边框颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "多选框非选中状态边框颜色。",
                        "default": "$r('sys.color.ohos_id_color_switch_outline_off')"
                    }
                }
            },
            "mark": {
                "description": "设置多选框内部图标样式。",
                "params": {
                    "value": {
                        "type": "MarkStyle",
                        "required": true,
                        "description": "多选框内部图标样式。",
                        "default": {
                            "strokeColor": "$r('sys.color.ohos_id_color_foreground_contrary')",
                            "strokeWidth": "$r('sys.float.ohos_id_checkbox_stroke_width')",
                            "size": "20vp"
                        }
                    }
                }
            },
            "shape": {
                "description": "设置CheckBox组件形状, 包括圆形和圆角方形。",
                "params": {
                    "value": {
                        "type": "CheckBoxShape",
                        "required": true,
                        "description": "CheckBox组件形状。",
                        "default": "CheckBoxShape.CIRCLE"
                    }
                }
            },
            "contentModifier": {
                "description": "定制CheckBox内容区的方法。",
                "params": {
                    "modifier": {
                        "type": "ContentModifier<CheckBoxConfiguration>",
                        "required": false,
                        "description": "定制CheckBox内容区的方法。"
                    }
                }
            }
        },
        "events": {
            "onChange": {
                "description": "当选中状态发生变化时，触发该回调。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "返回true时，表示已选中。返回false时，表示未选中。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Flex 布局实现了一个包含两个 Checkbox 的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为一个部分，包含两个 Checkbox。每个 Checkbox 以水平布局方式排列，Checkbox 之间的间距均匀分布，且对齐方式为居中对齐。\nCheckbox 的样式包括选中颜色、形状等属性，支持不同的样式展示。Checkbox 的功能包括点击事件和状态效果，用户可以通过点击 Checkbox 触发相应操作，Checkbox 也可以在选中或未选中状态下进行展示。\n整个布局通过 Flex 布局保证 Checkbox 在水平方向上有序排列，确保界面整洁美观。",
                "code": "@Entry // 标记该组件为入口组件\n@Component // 标记该组件为自定义组件\nstruct CheckboxExample {\n  build() {\n    Flex({ justifyContent: FlexAlign.SpaceAround }) { // 使用 Flex 布局，设置对齐方式为 SpaceAround，即子组件在主轴上均匀分布，两端留有空白\n      Checkbox({ name: 'checkbox1', group: 'checkboxGroup' }) // 创建一个 Checkbox 组件，设置名称和所属组\n        .select(true) // 设置 Checkbox 初始状态为选中\n        .selectedColor(0xed6f21) // 设置 Checkbox 选中时的颜色为橙色\n        .shape(CheckBoxShape.CIRCLE) // 设置 Checkbox 的形状为圆形\n        .onChange((value: boolean) => { // 设置 Checkbox 状态改变时的回调函数\n          console.info('Checkbox1 change is' + value) // 打印 Checkbox 状态改变的信息\n        })\n      Checkbox({ name: 'checkbox2', group: 'checkboxGroup' }) // 创建另一个 Checkbox 组件，设置名称和所属组\n        .select(false) // 设置 Checkbox 初始状态为未选中\n        .selectedColor(0x39a2db) // 设置 Checkbox 选中时的颜色为蓝色\n        .shape(CheckBoxShape.ROUNDED_SQUARE) // 设置 Checkbox 的形状为圆角方形\n        .onChange((value: boolean) => { // 设置 Checkbox 状态改变时的回调函数\n          console.info('Checkbox2 change is' + value) // 打印 Checkbox 状态改变的信息\n        })\n    }\n  }\n}"
            },
            {
                "description": "该组件通过嵌套的 Row 和 Column 布局实现了一个包含两个 Checkbox 的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为两个部分，每个部分包含一个 Checkbox 和一个对应的文本标签。每个 Checkbox 组的 Checkbox 和文本标签以水平布局方式排列，对齐方式为居中对齐。\nCheckbox 的样式包括选中颜色、未选中颜色、形状、宽度和高度等属性，支持不同的样式展示。Checkbox 的功能包括点击事件，用户可以通过点击 Checkbox 触发相应操作，并在控制台输出当前 Checkbox 的状态。\n整个布局通过 Flex 布局保证 Checkbox 在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column() {\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建一个 Checkbox 组件，设置其名称、所属组、选中颜色、形状、点击事件、标记样式、未选中颜色、宽度和高度\n          Checkbox({ name: 'checkbox1', group: 'checkboxGroup' })\n            .selectedColor(0x39a2db) // 设置选中时的颜色为蓝色\n            .shape(CheckBoxShape.ROUNDED_SQUARE) // 设置形状为圆角方形\n            .onChange((value: boolean) => {\n              console.info('Checkbox1 change is' + value) // 当 Checkbox 状态改变时，输出当前状态到控制台\n            })\n            .mark({\n              strokeColor: Color.Black, // 设置标记的颜色为黑色\n              size: 50, // 设置标记的大小为 50\n              strokeWidth: 5 // 设置标记的线条宽度为 5\n            })\n            .unselectedColor(Color.Red) // 设置未选中时的颜色为红色\n            .width(30) // 设置 Checkbox 的宽度为 30\n            .height(30) // 设置 Checkbox 的高度为 30\n          Text('Checkbox1').fontSize(20) // 创建一个文本标签，设置其内容为 \"Checkbox1\"，字体大小为 20\n        }\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建另一个 Checkbox 组件，设置其名称、所属组、选中颜色、形状、点击事件、宽度和高度\n          Checkbox({ name: 'checkbox2', group: 'checkboxGroup' })\n            .selectedColor(0x39a2db) // 设置选中时的颜色为蓝色\n            .shape(CheckBoxShape.ROUNDED_SQUARE) // 设置形状为圆角方形\n            .onChange((value: boolean) => {\n              console.info('Checkbox2 change is' + value) // 当 Checkbox 状态改变时，输出当前状态到控制台\n            })\n            .width(30) // 设置 Checkbox 的宽度为 30\n            .height(30) // 设置 Checkbox 的高度为 30\n          Text('Checkbox2').fontSize(20) // 创建一个文本标签，设置其内容为 \"Checkbox2\"，字体大小为 20\n        }\n      }\n      .width('100%') // 设置 Column 的宽度为 100%\n    }\n    .height('100%') // 设置 Row 的高度为 100%\n  }\n}"
            },
            {
                "description": "该组件通过 Row 和 Column 布局实现了一个包含两个 Checkbox 的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为两个部分，每个部分包含一个 Checkbox 和一个对应的文本标签。每个 Checkbox 组的 Checkbox 和文本标签以水平布局方式排列，对齐方式为居中对齐。\nCheckbox 的样式包括形状（圆形和圆角方形）、宽度和高度、选中标记的颜色和大小等属性。Checkbox 的功能包括点击事件，用户可以通过点击 Checkbox 触发相应操作，并在控制台输出当前 Checkbox 的状态。\n整个布局通过 Row 和 Column 布局保证 Checkbox 在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct CheckboxExample {\n  // 定义一个 Builder 方法，用于自定义 Checkbox 的选中标记样式\n  @Builder\n  indicatorBuilder(value: number) {\n    Column(){\n      // 根据 value 的值显示不同的文本内容和字体大小\n      Text(value > 99 ? '99+' : value.toString())\n        .textAlign(TextAlign.Center) // 文本居中对齐\n        .fontSize(value > 99 ? '16vp' : '20vp') // 字体大小根据 value 的值动态调整\n        .fontWeight(FontWeight.Medium) // 字体粗细为中等\n        .fontColor('#ffffffff') // 字体颜色为白色\n    }\n  }\n\n  build() {\n    Row() {\n      Column() {\n        // 第一个 Checkbox 组\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center}) {\n          // 创建一个 Checkbox，使用自定义的 indicatorBuilder 方法\n          Checkbox({ name: 'checkbox1', group: 'checkboxGroup', indicatorBuilder: () => { this.indicatorBuilder(9) } })\n            .shape(CheckBoxShape.CIRCLE) // Checkbox 形状为圆形\n            .onChange((value: boolean) => {\n              console.info('Checkbox1 change is' + value) // 当 Checkbox 状态改变时，输出当前状态到控制台\n            })\n            .mark({\n              strokeColor: Color.Black, // 选中标记的颜色为黑色\n              size: 50, // 选中标记的大小为 50\n              strokeWidth: 5 // 选中标记的线条宽度为 5\n            })\n            .width(30) // Checkbox 的宽度为 30\n            .height(30) // Checkbox 的高度为 30\n          Text('Checkbox1').fontSize(20) // 文本标签，字体大小为 20\n        }.padding(15) // 内边距为 15\n\n        // 第二个 Checkbox 组\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建另一个 Checkbox，使用自定义的 indicatorBuilder 方法\n          Checkbox({ name: 'checkbox2', group: 'checkboxGroup', indicatorBuilder: () => { this.indicatorBuilder(100) } })\n            .shape(CheckBoxShape.ROUNDED_SQUARE) // Checkbox 形状为圆角方形\n            .onChange((value: boolean) => {\n              console.info('Checkbox2 change is' + value) // 当 Checkbox 状态改变时，输出当前状态到控制台\n            })\n            .width(30) // Checkbox 的宽度为 30\n            .height(30) // Checkbox 的高度为 30\n          Text('Checkbox2').fontSize(20) // 文本标签，字体大小为 20\n        }\n      }\n      .width('100%') // 宽度占据整个屏幕\n    }\n    .height('100%') // 高度占据整个屏幕\n  }\n}"
            },
            {
                "description": "该示例实现了一个自定义复选框样式的功能，通过自定义样式实现了一个五边形复选框。当复选框被选中时，内部会出现一个红色三角图案，并且标题会显示“选中”字样；当复选框未被选中时，红色三角图案消失，标题会显示“非选中”字样。复选框的状态可以通过点击五边形进行切换。\n\n布局方面，整个组件采用垂直布局（Column），包含一个标题文本和一个五边形形状。标题文本根据复选框的状态显示不同的内容。五边形形状内部嵌套了一个路径（Path），用于绘制五边形的外框，并通过点击事件触发复选框状态的切换。五边形内部还嵌套了另一个路径（Path），用于绘制红色三角图案，该图案的可见性根据复选框的状态进行切换。\n\n样式方面，五边形的外框使用白色填充，并通过 `strokeWidth` 属性设置了边框宽度。红色三角图案的填充颜色和边框颜色根据复选框的状态进行切换，当复选框被选中时，颜色为红色，否则为黑色。五边形的宽度和高度均为 300vp，内部视口的宽度和高度为 310vp，确保五边形和内部图案的显示效果。\n\n功能方面，复选框的状态通过 `config.selected` 属性进行判断，并通过 `config.triggerChange` 方法触发状态的切换。复选框的启用状态通过 `config.enabled` 属性进行判断，当复选框被禁用时，五边形和内部图案的透明度会降低，表示不可交互。\n\n整个组件通过自定义的 `MyCheckboxStyle` 类实现复选框的样式定制，并通过 `Checkbox` 组件的 `contentModifier` 属性应用该样式。组件的启用状态可以通过一个开关（Toggle）进行切换，开关的状态变化会同步更新复选框的启用状态。",
                "code": "class MyCheckboxStyle implements ContentModifier<CheckBoxConfiguration> {\n  selectedColor: Color = Color.White; // 选中时的颜色，默认为白色\n  constructor(selectedColor: Color) {\n    this.selectedColor = selectedColor; // 构造函数，初始化选中颜色\n  }\n  applyContent(): WrappedBuilder<[CheckBoxConfiguration]> {\n    return wrapBuilder(buildCheckbox); // 应用自定义复选框样式\n  }\n}\n\n@Builder function buildCheckbox(config: CheckBoxConfiguration) {\n  Column({ space: 10 }) { // 垂直布局，间距为10\n    Text(config.name + (config.selected ? \"（ 选中 ）\" : \"（ 非选中 ）\"))\n      .margin({ right: 70, top: 50 }); // 标题文本，根据复选框状态显示不同内容，右边距70，上边距50\n    Text(config.enabled ? \"enabled true\" : \"enabled false\")\n      .margin({ right: 110 }); // 启用状态文本，右边距110\n    Shape() { // 形状组件，用于绘制五边形和内部图案\n      Path()\n        .width(100)\n        .height(100)\n        .commands('M100 0 L0 100 L50 200 L150 200 L200 100 Z') // 绘制五边形路径\n        .fillOpacity(0) // 填充透明度为0，即不填充颜色\n        .strokeWidth(3) // 边框宽度为3\n        .onClick(() => { // 点击事件，切换复选框状态\n          if (config.selected) {\n            config.triggerChange(false); // 如果已选中，则取消选中\n          } else {\n            config.triggerChange(true); // 如果未选中，则选中\n          }\n        })\n        .opacity(config.enabled ? 1 : 0.1); // 根据启用状态设置透明度，启用时为1，禁用时为0.1\n      Path()\n        .width(10)\n        .height(10)\n        .commands('M50 0 L100 100 L0 100 Z') // 绘制红色三角图案路径\n        .visibility(config.selected ? Visibility.Visible : Visibility.Hidden) // 根据选中状态设置可见性\n        .fill(config.selected ? (config.contentModifier as MyCheckboxStyle).selectedColor : Color.Black) // 根据选中状态设置填充颜色\n        .stroke((config.contentModifier as MyCheckboxStyle).selectedColor) // 设置边框颜色\n        .margin({ left: 10, top: 10 }) // 左边距10，上边距10\n        .opacity(config.enabled ? 1 : 0.1); // 根据启用状态设置透明度\n    }\n    .width(300) // 形状宽度为300\n    .height(200) // 形状高度为200\n    .viewPort({ x: 0, y: 0, width: 310, height: 310 }) // 视口设置，确保五边形和内部图案的显示效果\n    .strokeLineJoin(LineJoinStyle.Miter) // 边框连接样式为Miter\n    .strokeMiterLimit(5) // 边框斜接限制为5\n    .margin({ left: 50 }); // 左边距50\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  @State checkboxEnabled: boolean = true; // 复选框启用状态，默认为启用\n  build() {\n    Column({ space: 100 }) { // 垂直布局，间距为100\n      Checkbox({ name: '复选框状态', group: 'checkboxGroup' }) // 复选框组件，名称和组别\n        .contentModifier(new MyCheckboxStyle(Color.Red)) // 应用自定义复选框样式，选中颜色为红色\n        .onChange((value: boolean) => { // 复选框状态变化事件\n          console.info('Checkbox change is' + value); // 打印复选框状态变化信息\n        })\n        .enabled(this.checkboxEnabled); // 设置复选框启用状态\n\n      Row() { // 水平布局，用于放置开关\n        Toggle({ type: ToggleType.Switch, isOn: true }) // 开关组件，类型为Switch，默认开启\n          .onChange((value: boolean) => { // 开关状态变化事件\n            if (value) {\n              this.checkboxEnabled = true; // 如果开关开启，则复选框启用\n            } else {\n              this.checkboxEnabled = false; // 如果开关关闭，则复选框禁用\n            }\n          })\n      }\n      .position({ x: 50, y: 130 }); // 开关位置设置，x轴50，y轴130\n    }\n    .margin({ top: 30 }); // 顶部边距30\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "CheckboxGroup": {
        "description": "多选框群组，用于控制多选框全选或者不全选状态。",
        "details": "该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "CheckboxGroup(options?: CheckboxGroupOptions)",
                "params": {
                    "options": {
                        "type": "CheckboxGroupOptions",
                        "required": false,
                        "description": "多选框群组的选项。"
                    }
                }
            }
        ],
        "attributes": {
            "group": {
                "description": "群组名称。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": false,
                        "description": "群组名称。"
                    }
                }
            },
            "selectAll": {
                "description": "设置是否全选。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否全选。",
                        "default": false
                    }
                }
            },
            "selectedColor": {
                "description": "设置被选中或部分选中状态的颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "被选中或部分选中状态的颜色。",
                        "default": "$r('sys.color.ohos_id_color_text_primary_activated')"
                    }
                }
            },
            "unselectedColor": {
                "description": "设置非选中状态边框颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "非选中状态边框颜色。",
                        "default": "$r('sys.color.ohos_id_color_switch_outline_off')"
                    }
                }
            },
            "mark": {
                "description": "设置多选框内部图标样式。",
                "params": {
                    "value": {
                        "type": "MarkStyle",
                        "required": true,
                        "description": "多选框内部图标样式。"
                    }
                }
            },
            "checkboxShape": {
                "description": "设置CheckboxGroup组件形状，包括圆形和圆角方形。",
                "params": {
                    "value": {
                        "type": "CheckBoxShape",
                        "required": true,
                        "description": "CheckboxGroup组件形状。",
                        "default": "CheckBoxShape.CIRCLE"
                    }
                }
            }
        },
        "events": {
            "onChange": {
                "description": "CheckboxGroup的选中状态或群组内的Checkbox的选中状态发生变化时，触发回调。",
                "params": {
                    "callback": {
                        "type": "function",
                        "required": true,
                        "description": "回调函数，参数为CheckboxGroupResult对象。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Scroll 和 Column 布局实现了一个包含多个 Checkbox 的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个 Checkbox 和对应的文本标签。每个 Checkbox 组的 Checkbox 以水平布局方式排列，Checkbox 之间的间距均匀分布，且对齐方式为居中对齐。\nCheckbox 的样式包括选中颜色、形状等属性，支持不同的样式展示。Checkbox 组之间通过 Flex 组件进行分隔。Checkbox 的功能包括点击事件和状态效果，用户可以通过点击 Checkbox 触发相应操作，Checkbox 也可以在选中或未选中状态下进行展示。\n整个布局通过 Scroll 和 Column 布局保证 Checkbox 在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct CheckboxExample {\n  build() {\n    Scroll() {\n      Column() {\n\n        /*\n        第一个 Flex 布局包含一个 CheckboxGroup 和一个文本标签 \"Select All\"。CheckboxGroup 的形状为圆角方形，选中颜色为 #007DFF。CheckboxGroup 的 onChange 事件会在 Checkbox 状态改变时触发，并将选中状态的信息打印到控制台。\n        */\n        Flex({ justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {\n          CheckboxGroup({ group: 'checkboxGroup' })\n            .checkboxShape(CheckBoxShape.ROUNDED_SQUARE)\n            .selectedColor('#007DFF')\n            .onChange((itemName: CheckboxGroupResult) => {\n              console.info(\"checkbox group content\" + JSON.stringify(itemName))\n            })\n          Text('Select All').fontSize(14).lineHeight(20).fontColor('#182431').fontWeight(500)\n        }\n\n        /*\n        第二个 Flex 布局包含一个 Checkbox 和一个文本标签 \"Checkbox1\"。Checkbox 的形状为圆角方形，选中颜色为 #007DFF。Checkbox 的 onChange 事件会在 Checkbox 状态改变时触发，并将选中状态的信息打印到控制台。\n        */\n        Flex({ justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {\n          Checkbox({ name: 'checkbox1', group: 'checkboxGroup' })\n            .selectedColor('#007DFF')\n            .shape(CheckBoxShape.ROUNDED_SQUARE)\n            .onChange((value: boolean) => {\n              console.info('Checkbox1 change is' + value)\n            })\n          Text('Checkbox1').fontSize(14).lineHeight(20).fontColor('#182431').fontWeight(500)\n        }.margin({ left: 36 })\n\n        /*\n        第三个 Flex 布局包含一个 Checkbox 和一个文本标签 \"Checkbox2\"。Checkbox 的形状为圆角方形，选中颜色为 #007DFF。Checkbox 的 onChange 事件会在 Checkbox 状态改变时触发，并将选中状态的信息打印到控制台。\n        */\n        Flex({ justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {\n          Checkbox({ name: 'checkbox2', group: 'checkboxGroup' })\n            .selectedColor('#007DFF')\n            .shape(CheckBoxShape.ROUNDED_SQUARE)\n            .onChange((value: boolean) => {\n              console.info('Checkbox2 change is' + value)\n            })\n          Text('Checkbox2').fontSize(14).lineHeight(20).fontColor('#182431').fontWeight(500)\n        }.margin({ left: 36 })\n\n        /*\n        第四个 Flex 布局包含一个 Checkbox 和一个文本标签 \"Checkbox3\"。Checkbox 的形状为圆角方形，选中颜色为 #007DFF。Checkbox 的 onChange 事件会在 Checkbox 状态改变时触发，并将选中状态的信息打印到控制台。\n        */\n        Flex({ justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {\n          Checkbox({ name: 'checkbox3', group: 'checkboxGroup' })\n            .selectedColor('#007DFF')\n            .shape(CheckBoxShape.ROUNDED_SQUARE)\n            .onChange((value: boolean) => {\n              console.info('Checkbox3 change is' + value)\n            })\n          Text('Checkbox3').fontSize(14).lineHeight(20).fontColor('#182431').fontWeight(500)\n        }.margin({ left: 36 })\n      }\n    }\n  }\n}"
            },
            {
                "description": "该组件通过嵌套的 Row 和 Column 布局实现了一个包含多个 Checkbox 的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为多个部分，每个部分包含一个 Checkbox 和对应的文本标签。每个 Checkbox 组的 Checkbox 以水平布局方式排列，Checkbox 之间的间距均匀分布，且对齐方式为居中对齐。\nCheckbox 的样式包括选中颜色、未选中颜色、形状、宽度和高度等属性，支持不同的样式展示。Checkbox 组之间通过 Flex 组件进行分隔。Checkbox 的功能包括点击事件和状态效果，用户可以通过点击 Checkbox 触发相应操作，Checkbox 也可以在选中或未选中状态下进行展示。\n整个布局通过 Flex 布局保证 Checkbox 在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column() {\n        // 创建一个 Flex 布局，设置对齐方式为居中对齐\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建一个 CheckboxGroup，设置组名为 'checkboxGroup'\n          CheckboxGroup({ group: 'checkboxGroup' })\n            .checkboxShape(CheckBoxShape.ROUNDED_SQUARE) // 设置 Checkbox 形状为圆角方形\n            .selectedColor(Color.Orange) // 设置选中时的颜色为橙色\n            .onChange((itemName: CheckboxGroupResult) => {\n              console.info(\"checkbox group content\" + JSON.stringify(itemName)) // 当 CheckboxGroup 状态改变时，输出选中项的名称\n            })\n            .mark({\n              strokeColor: Color.Black, // 设置选中标记的颜色为黑色\n              size: 40, // 设置选中标记的大小为 40\n              strokeWidth: 5 // 设置选中标记的线条宽度为 5\n            })\n            .unselectedColor(Color.Red) // 设置未选中时的颜色为红色\n            .width(30) // 设置 Checkbox 的宽度为 30\n            .height(30) // 设置 Checkbox 的高度为 30\n          Text('Select All').fontSize(20) // 创建一个文本标签，内容为 'Select All'，字体大小为 20\n        }.margin({ right: 15 }) // 设置 Flex 布局的右边距为 15\n\n        // 创建一个 Flex 布局，设置对齐方式为居中对齐\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建一个 Checkbox，设置名称为 'checkbox1'，组名为 'checkboxGroup'\n          Checkbox({ name: 'checkbox1', group: 'checkboxGroup' })\n            .selectedColor(0x39a2db) // 设置选中时的颜色为 0x39a2db\n            .shape(CheckBoxShape.ROUNDED_SQUARE) // 设置 Checkbox 形状为圆角方形\n            .onChange((value: boolean) => {\n              console.info('Checkbox1 change is' + value) // 当 Checkbox1 状态改变时，输出其状态\n            })\n            .mark({\n              strokeColor: Color.Black, // 设置选中标记的颜色为黑色\n              size: 50, // 设置选中标记的大小为 50\n              strokeWidth: 5 // 设置选中标记的线条宽度为 5\n            })\n            .unselectedColor(Color.Red) // 设置未选中时的颜色为红色\n            .width(30) // 设置 Checkbox 的宽度为 30\n            .height(30) // 设置 Checkbox 的高度为 30\n          Text('Checkbox1').fontSize(20) // 创建一个文本标签，内容为 'Checkbox1'，字体大小为 20\n        }\n\n        // 创建一个 Flex 布局，设置对齐方式为居中对齐\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建一个 Checkbox，设置名称为 'checkbox2'，组名为 'checkboxGroup'\n          Checkbox({ name: 'checkbox2', group: 'checkboxGroup' })\n            .selectedColor(0x39a2db) // 设置选中时的颜色为 0x39a2db\n            .shape(CheckBoxShape.ROUNDED_SQUARE) // 设置 Checkbox 形状为圆角方形\n            .onChange((value: boolean) => {\n              console.info('Checkbox2 change is' + value) // 当 Checkbox2 状态改变时，输出其状态\n            })\n            .width(30) // 设置 Checkbox 的宽度为 30\n            .height(30) // 设置 Checkbox 的高度为 30\n          Text('Checkbox2').fontSize(20) // 创建一个文本标签，内容为 'Checkbox2'，字体大小为 20\n        }\n\n        // 创建一个 Flex 布局，设置对齐方式为居中对齐\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建一个 Checkbox，设置名称为 'checkbox3'，组名为 'checkboxGroup'\n          Checkbox({ name: 'checkbox3', group: 'checkboxGroup' })\n            .selectedColor(0x39a2db) // 设置选中时的颜色为 0x39a2db\n            .shape(CheckBoxShape.ROUNDED_SQUARE) // 设置 Checkbox 形状为圆角方形\n            .onChange((value: boolean) => {\n              console.info('Checkbox3 change is' + value) // 当 Checkbox3 状态改变时，输出其状态\n            })\n            .width(30) // 设置 Checkbox 的宽度为 30\n            .height(30) // 设置 Checkbox 的高度为 30\n          Text('Checkbox3').fontSize(20) // 创建一个文本标签，内容为 'Checkbox3'，字体大小为 20\n        }\n      }\n      .width('100%') // 设置 Column 的宽度为 100%\n    }\n    .height('100%') // 设置 Row 的高度为 100%\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "CalendarPicker": {
        "description": "日历选择器组件，提供下拉日历弹窗，可以让用户选择日期。",
        "details": "该组件从API Version 10开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "CalendarPicker(options?: CalendarOptions)",
                "params": {
                    "options": {
                        "type": "CalendarOptions",
                        "required": false,
                        "description": "配置日历选择器组件的参数。"
                    }
                }
            }
        ],
        "attributes": {
            "edgeAlign": {
                "description": "设置选择器与入口组件的对齐方式。",
                "params": {
                    "alignType": {
                        "type": "CalendarAlign",
                        "required": true,
                        "description": "对齐方式类型。",
                        "default": "CalendarAlign.END"
                    },
                    "offset": {
                        "type": "Offset",
                        "required": false,
                        "description": "按照对齐类型对齐后，选择器相对入口组件的偏移量。",
                        "default": {
                            "dx": 0,
                            "dy": 0
                        }
                    }
                }
            },
            "textStyle": {
                "description": "入口区的文本颜色、字号、字体粗细。",
                "params": {
                    "value": {
                        "type": "PickerTextStyle",
                        "required": true,
                        "description": "设置入口区的文本颜色、字号、字体粗细。",
                        "default": {
                            "color": "#ff182431",
                            "font": {
                                "size": "16fp",
                                "weight": "FontWeight.Regular"
                            }
                        }
                    }
                }
            }
        },
        "events": {
            "onChange": {
                "description": "选择日期时触发该事件。",
                "params": {
                    "value": {
                        "type": "Date",
                        "required": true,
                        "description": "选中的日期值。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件展示了一个月历日期选择器，用户可以通过该选择器选择日期。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为两个部分：一个标题和一个日期选择器。标题部分使用 Text 组件显示文本“月历日期选择器”，字体大小为 30。日期选择器部分使用 CalendarPicker 组件，该组件允许用户选择日期，并提供了一些自定义样式和布局属性。\n\n日期选择器的布局属性包括宽度占据父容器的 100%，并且通过 alignItems 属性设置为水平对齐方式的末端（HorizontalAlign.End）。日期选择器的样式包括文本颜色为 \"#ff182431\"，字体大小为 20，字体粗细为正常（FontWeight.Normal），并且设置了 10vp 的边距。日期选择器还绑定了一个 onChange 事件，当用户选择日期时，会触发该事件并在控制台输出所选日期的信息。\n\n整个布局通过 Column 布局保证标题和日期选择器在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct CalendarPickerExample {\n  // 初始选择的日期为 2024 年 3 月 5 日\n  private selectedDate: Date = new Date('2024-03-05')\n\n  build() {\n    Column() {\n      // 标题部分，显示文本“月历日期选择器”，字体大小为 30\n      Text('月历日期选择器').fontSize(30)\n      \n      Column() {\n        // 日期选择器部分，使用 CalendarPicker 组件\n        CalendarPicker({ hintRadius: 10, selected: this.selectedDate })\n          .edgeAlign(CalendarAlign.END) // 设置日期选择器的对齐方式为末端\n          .textStyle({ color: \"#ff182431\", font: { size: 20, weight: FontWeight.Normal } }) // 设置日期选择器的文本样式\n          .margin(10) // 设置日期选择器的边距为 10vp\n          .onChange((value) => {\n            // 当日期选择器的选择日期发生变化时，触发该事件\n            console.info(\"CalendarPicker onChange:\" + JSON.stringify(value))\n          })\n      }\n      .alignItems(HorizontalAlign.End) // 设置日期选择器部分的布局对齐方式为水平末端对齐\n      .width(\"100%\") // 设置日期选择器部分的宽度占据父容器的 100%\n    }\n    .width('100%') // 设置整个组件的宽度占据父容器的 100%\n    .margin({ top: 350 }) // 设置整个组件的上边距为 350vp\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "DatePicker": {
        "description": "日期选择器组件，用于根据指定日期范围创建日期滑动选择器。",
        "details": null,
        "interfaces": [
            {
                "description": "DatePicker(options?: DatePickerOptions)",
                "params": {
                    "options": {
                        "type": "DatePickerOptions",
                        "required": false,
                        "description": "配置日期选择器组件的参数。"
                    }
                }
            }
        ],
        "attributes": {
            "lunar": {
                "description": "设置弹窗的日期是否显示农历。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "日期是否显示农历。",
                        "default": false
                    }
                }
            },
            "disappearTextStyle": {
                "description": "设置所有选项中最上和最下两个选项的文本样式。",
                "params": {
                    "value": {
                        "type": "PickerTextStyle",
                        "required": true,
                        "description": "所有选项中最上和最下两个选项的文本颜色、字号、字体粗细。",
                        "default": {
                            "color": "#ff182431",
                            "font": {
                                "size": "14fp",
                                "weight": "FontWeight.Regular"
                            }
                        }
                    }
                }
            },
            "textStyle": {
                "description": "设置所有选项中除了最上、最下及选中项以外的文本样式。",
                "params": {
                    "value": {
                        "type": "PickerTextStyle",
                        "required": true,
                        "description": "所有选项中除了最上、最下及选中项以外的文本颜色、字号、字体粗细。",
                        "default": {
                            "color": "#ff182431",
                            "font": {
                                "size": "16fp",
                                "weight": "FontWeight.Regular"
                            }
                        }
                    }
                }
            },
            "selectedTextStyle": {
                "description": "设置选中项的文本样式。",
                "params": {
                    "value": {
                        "type": "PickerTextStyle",
                        "required": true,
                        "description": "选中项的文本颜色、字号、字体粗细。",
                        "default": {
                            "color": "#ff007dff",
                            "font": {
                                "size": "20vp",
                                "weight": "FontWeight.Medium"
                            }
                        }
                    }
                }
            }
        },
        "events": {
            "onChange": {
                "description": "选择日期时触发该事件。",
                "params": {
                    "value": {
                        "type": "DatePickerResult",
                        "required": true,
                        "description": "返回选中的时间。"
                    }
                }
            },
            "onDateChange": {
                "description": "选择日期时触发该事件。",
                "params": {
                    "value": {
                        "type": "Date",
                        "required": true,
                        "description": "返回选中的时间，年月日为选中的日期，时分取决于当前系统时间的时分，秒恒为00。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件实现了一个日期选择器的示例，用户可以通过点击按钮切换公历和农历显示，并在选择日期时触发相应的事件。布局宽度占据整个屏幕，日期选择器和按钮垂直排列。\n\n布局属性：\n- 整个布局使用 Column 组件，宽度设置为 100%，确保布局占据整个屏幕宽度。\n- 按钮和日期选择器在垂直方向上排列，按钮位于顶部，日期选择器位于底部。\n\n组件的样式和外观：\n- 按钮的样式包括顶部和底部的外边距为 30vp，确保按钮与其他组件之间有足够的间距。\n- 日期选择器的样式包括消失文本的颜色为灰色，字体大小为 16fp，字体加粗；普通文本的颜色为 #ff182431，字体大小为 18fp，字体正常；选中日期的文本颜色为 #ff0000FF，字体大小为 26fp，字体常规。\n\n组件的排列和嵌套关系：\n- 整个布局通过 Column 组件实现垂直排列，按钮位于顶部，日期选择器位于底部。\n- 按钮和日期选择器之间通过外边距进行分隔。\n\n组件的功能和交互：\n- 按钮的功能是切换日期选择器的显示模式（公历或农历），点击按钮时，isLunar 状态变量取反，日期选择器根据 isLunar 的值显示公历或农历。\n- 日期选择器的功能是允许用户选择日期，并在日期变化时触发 onDateChange 事件，更新 selectedDate 状态变量，并在控制台输出当前选中的日期。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct DatePickerExample {\n  @State isLunar: boolean = false // 状态变量，用于控制日期选择器显示公历或农历\n  private selectedDate: Date = new Date('2021-08-08') // 初始选中的日期\n\n  build() {\n    Column() {\n      Button('切换公历农历')\n        .margin({ top: 30, bottom: 30 }) // 设置按钮的上下外边距为 30vp\n        .onClick(() => {\n          this.isLunar = !this.isLunar // 点击按钮时，切换 isLunar 状态变量\n        })\n      DatePicker({\n        start: new Date('1970-1-1'), // 日期选择器的起始日期\n        end: new Date('2100-1-1'), // 日期选择器的结束日期\n        selected: this.selectedDate // 初始选中的日期\n      })\n        .disappearTextStyle({color: Color.Gray, font: {size: '16fp', weight: FontWeight.Bold}}) // 设置消失文本的样式\n        .textStyle({color: '#ff182431', font: {size: '18fp', weight: FontWeight.Normal}}) // 设置普通文本的样式\n        .selectedTextStyle({color: '#ff0000FF', font: {size: '26fp', weight: FontWeight.Regular}}) // 设置选中日期的文本样式\n        .lunar(this.isLunar) // 根据 isLunar 状态变量显示公历或农历\n        .onDateChange((value: Date) => {\n          this.selectedDate = value // 日期变化时更新 selectedDate 状态变量\n          console.info('select current date is: ' + value.toString()) // 在控制台输出当前选中的日期\n        })\n    }.width('100%') // 设置布局宽度为 100%\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "TextPicker": {
        "description": "滑动选择文本内容的组件。",
        "details": null,
        "interfaces": [
            {
                "description": "TextPicker(options?: TextPickerOptions)",
                "params": {
                    "options": {
                        "type": "TextPickerOptions",
                        "required": false,
                        "description": "文本选择器的选项。"
                    }
                }
            }
        ],
        "attributes": {
            "range": {
                "description": "选择器的数据选择列表。",
                "params": {
                    "value": {
                        "type": [
                            "string[]",
                            "string[][]",
                            "Resource",
                            "TextPickerRangeContent[]",
                            "TextCascadePickerRangeContent[]"
                        ],
                        "required": true,
                        "description": "选择器的数据选择列表。不可设置为空数组，若设置为空数组，则不显示；若动态变化为空数组，则保持当前正常值显示。"
                    }
                }
            },
            "selected": {
                "description": "设置默认选中项在数组中的索引值。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "number[]"
                        ],
                        "required": false,
                        "description": "默认选中项在数组中的索引值。",
                        "default": 0
                    }
                }
            },
            "value": {
                "description": "设置默认选中项的值，优先级低于selected。",
                "params": {
                    "value": {
                        "type": [
                            "string",
                            "string[]"
                        ],
                        "required": false,
                        "description": "默认选中项的值。"
                    }
                }
            },
            "defaultPickerItemHeight": {
                "description": "设置Picker各选择项的高度。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "Picker各选择项的高度。"
                    }
                }
            },
            "disappearTextStyle": {
                "description": "设置所有选项中最上和最下两个选项的文本颜色、字号、字体粗细。",
                "params": {
                    "value": {
                        "type": "PickerTextStyle",
                        "required": true,
                        "description": "所有选项中最上和最下两个选项的文本颜色、字号、字体粗细。",
                        "default": {
                            "color": "#ff182431",
                            "font": {
                                "size": "14fp",
                                "weight": "FontWeight.Regular"
                            }
                        }
                    }
                }
            },
            "textStyle": {
                "description": "设置所有选项中除了最上、最下及选中项以外的文本颜色、字号、字体粗细。",
                "params": {
                    "value": {
                        "type": "PickerTextStyle",
                        "required": true,
                        "description": "所有选项中除了最上、最下及选中项以外的文本颜色、字号、字体粗细。",
                        "default": {
                            "color": "#ff182431",
                            "font": {
                                "size": "16fp",
                                "weight": "FontWeight.Regular"
                            }
                        }
                    }
                }
            },
            "selectedTextStyle": {
                "description": "设置选中项的文本颜色、字号、字体粗细。",
                "params": {
                    "value": {
                        "type": "PickerTextStyle",
                        "required": true,
                        "description": "选中项的文本颜色、字号、字体粗细。",
                        "default": {
                            "color": "#ff007dff",
                            "font": {
                                "size": "20vp",
                                "weight": "FontWeight.Medium"
                            }
                        }
                    }
                }
            },
            "selectedIndex": {
                "description": "设置默认选中项在数组中的索引值，优先级高于options中的选中值。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "number[]"
                        ],
                        "required": true,
                        "description": "默认选中项在数组中的索引值。",
                        "default": 0
                    }
                }
            },
            "canLoop": {
                "description": "设置是否可循环滚动。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否可循环滚动。",
                        "default": true
                    }
                }
            },
            "divider": {
                "description": "设置分割线样式，不设置该属性则按“默认值”展示分割线。",
                "params": {
                    "value": {
                        "type": [
                            "DividerOptions",
                            "null"
                        ],
                        "required": true,
                        "description": "分割线的样式。",
                        "default": {
                            "strokeWidth": "2px",
                            "startMargin": 0,
                            "endMargin": 0,
                            "color": "#33000000"
                        }
                    }
                }
            },
            "gradientHeight": {
                "description": "设置渐隐效果高度，不设置该属性则显示默认渐隐效果。",
                "params": {
                    "value": {
                        "type": "Dimension",
                        "required": true,
                        "description": "内容区上下边缘的渐隐高度。",
                        "default": "36vp"
                    }
                }
            }
        },
        "events": {
            "onChange": {
                "description": "滑动选中TextPicker文本内容后，触发该回调。",
                "params": {
                    "value": {
                        "type": [
                            "string",
                            "string[]"
                        ],
                        "required": true,
                        "description": "当前选中项的文本。"
                    },
                    "index": {
                        "type": [
                            "number",
                            "number[]"
                        ],
                        "required": true,
                        "description": "当前选中项的索引值。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用TextPicker组件。布局上，整个界面由一个Column组件包裹，内部包含三个TextPicker组件，分别用于单列选择、多列选择和多列联动选择。每个TextPicker组件之间通过margin属性设置了间距。\n\n样式上，TextPicker组件的外观由系统默认样式决定，没有进行额外的自定义。每个TextPicker组件的选中项会触发onChange事件，并在控制台输出当前选中的值和索引。\n\n功能上，用户可以通过滑动TextPicker组件来选择不同的选项。单列选择器允许用户从一组水果中选择一个；多列选择器允许用户从三组不同的水果中分别选择一个；多列联动选择器则允许用户从省份、城市、区县三级联动选择。",
                "code": "// 定义一个类bottom，用于存储底部间距的值\nclass bottom {\n  bottom: number = 50 // 底部间距为50\n}\n\n// 创建bottom类的实例，用于设置TextPicker组件的margin属性\nlet bott: bottom = new bottom()\n\n// 主入口组件，使用@Entry和@Component装饰器标记\n@Entry\n@Component\nstruct TextPickerExample {\n  // 定义一个私有变量select，用于存储单列选择器的初始选中项索引\n  private select: number = 1\n\n  // 定义三个私有数组，分别存储不同种类的水果\n  private apfruits: string[] = ['apple1', 'apple2', 'apple3', 'apple4']\n  private orfruits: string[] = ['orange1', 'orange2', 'orange3', 'orange4']\n  private pefruits: string[] = ['peach1', 'peach2', 'peach3', 'peach4']\n\n  // 定义一个二维数组multi，用于存储多列选择器的选项\n  private multi: string[][] = [this.apfruits, this.orfruits, this.pefruits]\n\n  // 定义一个私有数组cascade，用于存储多列联动选择器的选项\n  private cascade: TextCascadePickerRangeContent[] = [\n    {\n      text: '辽宁省',\n      children: [\n        { text: '沈阳市', children: [{ text: '沈河区' }, { text: '和平区' }, { text: '浑南区' }] },\n        { text: '大连市', children: [{ text: '中山区' }, { text: '金州区' }, { text: '长海县' }] }\n      ]\n    },\n    {\n      text: '吉林省',\n      children: [\n        { text: '长春市', children: [{ text: '南关区' }, { text: '宽城区' }, { text: '朝阳区' }] },\n        { text: '四平市', children: [{ text: '铁西区' }, { text: '铁东区' }, { text: '梨树县' }] }\n      ]\n    },\n    {\n      text: '黑龙江省',\n      children: [\n        { text: '哈尔滨市', children: [{ text: '道里区' }, { text: '道外区' }, { text: '南岗区' }] },\n        { text: '牡丹江市', children: [{ text: '东安区' }, { text: '西安区' }, { text: '爱民区' }] }\n      ]\n    }\n  ]\n\n  // 构建组件的UI结构\n  build() {\n    Column() {\n      // 单列选择器，范围为apfruits数组，初始选中项索引为select\n      TextPicker({ range: this.apfruits, selected: this.select })\n        .onChange((value: string | string[], index: number | number[]) => {\n          // 当选择项改变时，输出当前选中的值和索引\n          console.info('Picker item changed, value: ' + value + ', index: ' + index)\n        }).margin(bott) // 设置底部间距\n\n      // 多列选择器，范围为multi数组\n      TextPicker({ range: this.multi })\n        .onChange((value: string | string[], index: number | number[]) => {\n          // 当选择项改变时，输出当前选中的值和索引\n          console.info('TextPicker 多列:onChange ' + JSON.stringify(value) + ', ' + 'index: ' + JSON.stringify(index))\n        }).margin(bott) // 设置底部间距\n\n      // 多列联动选择器，范围为cascade数组\n      TextPicker({ range: this.cascade })\n        .onChange((value: string | string[], index: number | number[]) => {\n          // 当选择项改变时，输出当前选中的值和索引\n          console.info('TextPicker 多列联动:onChange ' + JSON.stringify(value) + ', ' + 'index: ' + JSON.stringify(index))\n        })\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "TimePicker": {
        "description": "时间选择组件，根据指定参数创建选择器，支持选择小时及分钟。",
        "details": "该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "TimePicker(options?: TimePickerOptions)",
                "params": {
                    "options": {
                        "type": "TimePickerOptions",
                        "required": false,
                        "description": "配置时间选择组件的参数。"
                    }
                }
            }
        ],
        "attributes": {
            "useMilitaryTime": {
                "description": "设置展示时间是否为24小时制。当展示时间为12小时制时，上下午与小时无联动关系。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "展示时间是否为24小时制。",
                        "default": "false"
                    }
                }
            },
            "disappearTextStyle10+": {
                "description": "设置所有选项中最上和最下两个选项的文本颜色、字号、字体粗细。",
                "params": {
                    "value": {
                        "type": "PickerTextStyle",
                        "required": true,
                        "description": "所有选项中最上和最下两个选项的文本颜色、字号、字体粗细。",
                        "default": {
                            "color": "#ff182431",
                            "font": {
                                "size": "14fp",
                                "weight": "FontWeight.Regular"
                            }
                        }
                    }
                }
            },
            "textStyle10+": {
                "description": "设置所有选项中除了最上、最下及选中项以外的文本颜色、字号、字体粗细。",
                "params": {
                    "value": {
                        "type": "PickerTextStyle",
                        "required": true,
                        "description": "所有选项中除了最上、最下及选中项以外的文本颜色、字号、字体粗细。",
                        "default": {
                            "color": "#ff182431",
                            "font": {
                                "size": "16fp",
                                "weight": "FontWeight.Regular"
                            }
                        }
                    }
                }
            },
            "selectedTextStyle10+": {
                "description": "设置选中项的文本颜色、字号、字体粗细。",
                "params": {
                    "value": {
                        "type": "PickerTextStyle",
                        "required": true,
                        "description": "选中项的文本颜色、字号、字体粗细。",
                        "default": {
                            "color": "#ff007dff",
                            "font": {
                                "size": "20vp",
                                "weight": "FontWeight.Medium"
                            }
                        }
                    }
                }
            },
            "loop11+": {
                "description": "设置是否启用循环模式。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否启用循环模式。",
                        "default": "true"
                    }
                }
            },
            "dateTimeOptions12+": {
                "description": "设置时分秒是否显示前置0。",
                "params": {
                    "value": {
                        "type": "DateTimeOptions",
                        "required": true,
                        "description": "设置时分秒是否显示前置0，目前只支持设置hour、minute和second参数。",
                        "default": {
                            "hour": "24小时制默认为'2-digit'，即有前置0；12小时制默认为'numeric'，即没有前置0。",
                            "minute": "'2-digit'，即有前置0。",
                            "second": "'2-digit'，即有前置0。"
                        }
                    }
                }
            },
            "enableHapticFeedback12+": {
                "description": "是否支持触控反馈。",
                "params": {
                    "enable": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否开启触控反馈。",
                        "default": "true"
                    }
                }
            }
        },
        "events": {
            "onChange": {
                "description": "选择时间时触发该事件。",
                "params": {
                    "value": {
                        "type": "TimePickerResult",
                        "required": true,
                        "description": "24小时制时间。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Column 布局实现了一个时间选择器（TimePicker）及其控制按钮的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为两个部分：一个按钮和一个时间选择器。按钮用于切换时间选择器的显示格式（12小时制或24小时制），按钮的点击事件会切换 `isMilitaryTime` 状态变量的值。时间选择器根据 `isMilitaryTime` 的值来决定显示格式，并允许用户选择时间。选择时间后，时间选择器的 `onChange` 事件会更新 `selectedTime` 状态变量，并在控制台输出当前选择的时间。\n\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过 Column 组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n\n时间选择器的样式包括文本颜色、字体大小和字体粗细等属性，支持不同的样式展示。时间选择器的文本样式分为三种：消失文本样式、普通文本样式和选中文本样式。消失文本样式用于未选中的时间文本，普通文本样式用于未选中的时间文本，选中文本样式用于当前选中的时间文本。\n\n整个布局通过 Column 布局保证按钮和时间选择器在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct TimePickerExample {\n  @State isMilitaryTime: boolean = false // 状态变量，用于控制时间选择器的显示格式（12小时制或24小时制）\n  private selectedTime: Date = new Date('2022-07-22T08:00:00') // 状态变量，用于存储当前选择的时间\n\n  build() {\n    Column() {\n      Button('切换12小时制/24小时制') // 创建一个按钮，用于切换时间选择器的显示格式\n        .margin(30) // 设置按钮的外边距为30vp\n        .onClick(() => { // 设置按钮的点击事件\n          this.isMilitaryTime = !this.isMilitaryTime // 切换 `isMilitaryTime` 状态变量的值\n        })\n      TimePicker({\n        selected: this.selectedTime, // 设置时间选择器的初始选中时间为 `selectedTime`\n      })\n        .useMilitaryTime(this.isMilitaryTime) // 根据 `isMilitaryTime` 的值决定时间选择器的显示格式\n        .onChange((value: TimePickerResult) => { // 设置时间选择器的 `onChange` 事件\n          if(value.hour >= 0) { // 如果小时值有效\n            this.selectedTime.setHours(value.hour, value.minute) // 更新 `selectedTime` 状态变量\n            console.info('select current date is: ' + JSON.stringify(value)) // 在控制台输出当前选择的时间\n          }\n        })\n        .disappearTextStyle({color: Color.Red, font: {size: 15, weight: FontWeight.Lighter}}) // 设置未选中的时间文本样式\n        .textStyle({color: Color.Black, font: {size: 20, weight: FontWeight.Normal}}) // 设置普通时间文本样式\n        .selectedTextStyle({color: Color.Blue, font: {size: 30, weight: FontWeight.Bolder}}) // 设置选中时间文本样式\n    }.width('100%') // 设置 Column 的宽度为100%\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Radio": {
        "description": "单选框，提供相应的用户交互选择项。",
        "details": null,
        "interfaces": [
            {
                "description": "Radio(options: RadioOptions)",
                "params": {
                    "options": {
                        "type": "RadioOptions",
                        "required": true,
                        "description": "单选框的配置选项。"
                    }
                }
            }
        ],
        "attributes": {
            "checked": {
                "description": "设置单选框的选中状态。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "单选框的选中状态。",
                        "default": false
                    }
                }
            },
            "radioStyle": {
                "description": "设置单选框选中状态和非选中状态的样式。",
                "params": {
                    "value": {
                        "type": "RadioStyle",
                        "required": false,
                        "description": "单选框的样式配置。"
                    }
                }
            },
            "contentModifier": {
                "description": "定制Radio内容区的方法。",
                "params": {
                    "modifier": {
                        "type": "ContentModifier<RadioConfiguration>",
                        "required": true,
                        "description": "定制Radio内容区的配置。"
                    }
                }
            }
        },
        "events": {
            "onChange": {
                "description": "单选框选中状态改变时触发回调。",
                "params": {
                    "isChecked": {
                        "type": "boolean",
                        "required": true,
                        "description": "单选框的状态。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Flex 布局实现了一个展示多个单选按钮（Radio）及其状态效果的界面。布局宽度占据整个屏幕，高度根据内容自适应，内边距为顶部 30vp。组件的垂直方向上被分为三个部分，每个部分包含一个标题和一个单选按钮。每个单选按钮组的按钮以垂直布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n单选按钮的样式包括背景颜色、宽度和高度等属性，支持不同的样式展示。单选按钮组之间通过 Flex 组件进行分隔。单选按钮的功能包括点击事件和状态效果，用户可以通过点击单选按钮触发相应操作，单选按钮也可以在选中或未选中状态下进行展示。\n整个布局通过 Flex 布局保证单选按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct RadioExample {\n  build() {\n    Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n      Column() {\n        Text('Radio1') // 显示文本 \"Radio1\"\n        Radio({ value: 'Radio1', group: 'radioGroup' }).checked(true) // 创建一个单选按钮，值为 \"Radio1\"，属于 \"radioGroup\" 组，默认选中\n          .radioStyle({\n            checkedBackgroundColor: Color.Pink // 设置选中状态下的背景颜色为粉色\n          })\n          .height(50) // 设置单选按钮的高度为 50vp\n          .width(50) // 设置单选按钮的宽度为 50vp\n          .onChange((isChecked: boolean) => {\n            console.log('Radio1 status is ' + isChecked) // 当单选按钮状态改变时，输出当前状态到控制台\n          })\n      }\n      Column() {\n        Text('Radio2') // 显示文本 \"Radio2\"\n        Radio({ value: 'Radio2', group: 'radioGroup' }).checked(false) // 创建一个单选按钮，值为 \"Radio2\"，属于 \"radioGroup\" 组，默认未选中\n          .radioStyle({\n            checkedBackgroundColor: Color.Pink // 设置选中状态下的背景颜色为粉色\n          })\n          .height(50) // 设置单选按钮的高度为 50vp\n          .width(50) // 设置单选按钮的宽度为 50vp\n          .onChange((isChecked: boolean) => {\n            console.log('Radio2 status is ' + isChecked) // 当单选按钮状态改变时，输出当前状态到控制台\n          })\n      }\n      Column() {\n        Text('Radio3') // 显示文本 \"Radio3\"\n        Radio({ value: 'Radio3', group: 'radioGroup' }).checked(false) // 创建一个单选按钮，值为 \"Radio3\"，属于 \"radioGroup\" 组，默认未选中\n          .radioStyle({\n            checkedBackgroundColor: Color.Pink // 设置选中状态下的背景颜色为粉色\n          })\n          .height(50) // 设置单选按钮的高度为 50vp\n          .width(50) // 设置单选按钮的宽度为 50vp\n          .onChange((isChecked: boolean) => {\n            console.log('Radio3 status is ' + isChecked) // 当单选按钮状态改变时，输出当前状态到控制台\n          })\n      }\n    }.padding({ top: 30 }) // 设置顶部内边距为 30vp\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示三种不同样式单选按钮（Radio）的界面。布局宽度占据整个屏幕，高度根据内容自适应，内边距为顶部 30vp。组件的垂直方向上被分为三个部分，每个部分包含一个标题和一个单选按钮。每个单选按钮组的按钮以垂直布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n单选按钮的样式包括高度、宽度、选中状态的指示器类型（如勾选、点、自定义图片）等属性，支持不同的样式展示。单选按钮组之间通过 Flex 组件进行分隔。单选按钮的功能包括点击事件和状态效果，用户可以通过点击单选按钮触发相应操作，单选按钮也可以在选中或未选中状态下进行展示。\n整个布局通过 Flex 布局保证单选按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct RadioExample {\n  // 自定义单选按钮选中状态的指示器，使用图片资源\n  @Builder \n  indicatorBuilder() {\n    Image($r(\"app.media.star\")) // 使用图片资源作为选中状态的指示器\n  }\n\n  build() {\n    Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n      Column() {\n        Text('Radio1') // 单选按钮的标题\n        Radio({ \n          value: 'Radio1', // 单选按钮的值\n          group: 'radioGroup', // 单选按钮所属的组\n          indicatorType: RadioIndicatorType.TICK // 选中状态的指示器类型为勾选\n        }).checked(true) // 默认选中状态\n          .height(50) // 单选按钮的高度\n          .width(80) // 单选按钮的宽度\n          .onChange((isChecked: boolean) => {\n            console.log('Radio1 status is ' + isChecked) // 单选按钮状态变化时的回调函数\n          })\n      }\n      Column() {\n        Text('Radio2') // 单选按钮的标题\n        Radio({ \n          value: 'Radio2', // 单选按钮的值\n          group: 'radioGroup', // 单选按钮所属的组\n          indicatorType: RadioIndicatorType.DOT // 选中状态的指示器类型为点\n        }).checked(false) // 默认未选中状态\n          .height(50) // 单选按钮的高度\n          .width(80) // 单选按钮的宽度\n          .onChange((isChecked: boolean) => {\n            console.log('Radio2 status is ' + isChecked) // 单选按钮状态变化时的回调函数\n          })\n      }\n      Column() {\n        Text('Radio3') // 单选按钮的标题\n        Radio({ \n          value: 'Radio3', // 单选按钮的值\n          group: 'radioGroup', // 单选按钮所属的组\n          indicatorType: RadioIndicatorType.CUSTOM, // 选中状态的指示器类型为自定义\n          indicatorBuilder: () => { this.indicatorBuilder() } // 使用自定义的指示器构建器\n        }).checked(false) // 默认未选中状态\n          .height(50) // 单选按钮的高度\n          .width(80) // 单选按钮的宽度\n          .onChange((isChecked: boolean) => {\n            console.log('Radio3 status is ' + isChecked) // 单选按钮状态变化时的回调函数\n          })\n      }\n    }.padding({ top: 30 }) // 顶部内边距\n  }\n}"
            },
            {
                "description": "该组件实现了一个自定义样式的单选按钮组。布局采用垂直排列的列（Column），其中包含两个水平排列的行（Row），每行包含一个自定义样式的单选按钮（Radio）。每个单选按钮的样式通过自定义的 `MyRadioStyle` 类进行设置，包括按钮的类型和选中时的颜色。单选按钮的布局属性包括宽度、高度和内边距。单选按钮的样式包括边框颜色、填充颜色和按钮文本颜色。单选按钮的功能包括点击事件，用户可以通过点击按钮切换其选中状态。",
                "code": "// 定义一个自定义样式类 `MyRadioStyle`，实现 `ContentModifier` 接口，用于修改单选按钮的样式\nclass MyRadioStyle implements ContentModifier<RadioConfiguration> {\n  // 单选按钮的类型，用于区分不同样式的按钮\n  type: number = 0\n  // 单选按钮选中时的颜色\n  selectedColor: ResourceColor = Color.Black\n\n  // 构造函数，初始化单选按钮的类型和选中颜色\n  constructor(numberType: number, colorType: ResourceColor) {\n    this.type = numberType\n    this.selectedColor = colorType\n  }\n\n  // 实现 `applyContent` 方法，返回一个 `WrappedBuilder`，用于构建单选按钮的内容\n  applyContent(): WrappedBuilder<[RadioConfiguration]> {\n    return wrapBuilder(buildRadio)\n  }\n}\n\n// 定义一个 `@Builder` 函数 `buildRadio`，用于构建单选按钮的内容\n@Builder\nfunction buildRadio(config: RadioConfiguration) {\n  // 使用 `Row` 组件创建一个水平布局，设置间距为 30\n  Row({ space: 30 }) {\n    // 创建一个圆形组件，设置宽度和高度为 50，边框颜色为黑色\n    Circle({ width: 50, height: 50 })\n      .stroke(Color.Black)\n      // 根据单选按钮的选中状态，设置填充颜色为选中颜色或白色\n      .fill(config.checked ? (config.contentModifier as MyRadioStyle).selectedColor : Color.White)\n    // 创建一个按钮组件，设置按钮文本为 \"off\" 或 \"on\"，根据单选按钮的选中状态\n    Button(config.checked ? \"off\" : \"on\")\n      .width(100)\n      // 根据单选按钮的选中状态，设置按钮类型\n      .type(config.checked ? (config.contentModifier as MyRadioStyle).type : ButtonType.Normal)\n      .backgroundColor('#2787D9')\n      // 设置按钮的点击事件，切换单选按钮的选中状态\n      .onClick(() => {\n        if (config.checked) {\n          config.triggerChange(false)\n        } else {\n          config.triggerChange(true)\n        }\n      })\n  }\n}\n\n// 定义一个入口组件 `refreshExample`，使用 `@Entry` 和 `@Component` 装饰器\n@Entry\n@Component\nstruct refreshExample {\n  // 实现 `build` 方法，构建组件的 UI\n  build() {\n    // 使用 `Column` 组件创建一个垂直布局，设置间距为 50\n    Column({ space: 50 }) {\n      // 创建一个水平布局的行\n      Row() {\n        // 创建一个单选按钮，设置值为 \"Radio1\"，组名为 \"radioGroup\"\n        Radio({ value: 'Radio1', group: 'radioGroup' })\n          // 设置单选按钮的样式为 `MyRadioStyle`，类型为 1，选中颜色为 \"#004AAF\"\n          .contentModifier(new MyRadioStyle(1, '#004AAF'))\n          // 设置单选按钮的初始选中状态为 false\n          .checked(false)\n          // 设置单选按钮的宽度为 300，高度为 100\n          .width(300)\n          .height(100)\n      }\n\n      // 创建另一个水平布局的行\n      Row() {\n        // 创建一个单选按钮，设置值为 \"Radio2\"，组名为 \"radioGroup\"\n        Radio({ value: 'Radio2', group: 'radioGroup' })\n          // 设置单选按钮的初始选中状态为 true\n          .checked(true)\n          // 设置单选按钮的宽度为 300，高度为 60\n          .width(300)\n          .height(60)\n          // 设置单选按钮的样式为 `MyRadioStyle`，类型为 2，选中颜色为 \"#004AAF\"\n          .contentModifier(new MyRadioStyle(2, '#004AAF'))\n      }\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Rating": {
        "description": "提供在给定范围内选择评分的组件。",
        "details": null,
        "interfaces": [
            {
                "description": "Rating(options?: { rating: number, indicator?: boolean })",
                "params": {
                    "options": {
                        "type": {
                            "rating": "number",
                            "indicator": "boolean"
                        },
                        "required": false,
                        "description": "评分组件的配置选项。",
                        "default": {
                            "rating": 0,
                            "indicator": false
                        }
                    }
                }
            }
        ],
        "attributes": {
            "stars": {
                "description": "设置评分总数。设置为小于等于0的值时，按默认值显示。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "评分总数。",
                        "default": 5
                    }
                }
            },
            "stepSize": {
                "description": "设置操作评级的步长。设置为小于0.1的值时，按默认值显示。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "操作评级的步长。",
                        "default": 0.5
                    }
                }
            },
            "starStyle": {
                "description": "设置评分的样式。该属性所支持的图片类型能力参考Image组件。",
                "params": {
                    "value": {
                        "type": {
                            "backgroundUri": "string",
                            "foregroundUri": "string",
                            "secondaryUri": "string"
                        },
                        "required": true,
                        "description": "评分的样式配置。"
                    }
                }
            },
            "contentModifier": {
                "description": "定制Rating内容区的方法。",
                "params": {
                    "modifier": {
                        "type": "ContentModifier<RatingConfiguration>",
                        "required": true,
                        "description": "定制内容区的修饰器。"
                    }
                }
            }
        },
        "events": {
            "onChange": {
                "description": "操作评分条的评星发生改变时触发该回调。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "评分条的评分。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过Column布局实现了一个评分展示和交互界面。布局宽度占据整个屏幕，高度设为100%，背景颜色为#F1F3F5。组件的垂直方向上被分为两个部分：评分组件和文本显示组件。评分组件包含一个Rating组件，用于展示和调整评分，评分范围为0到5，步长为0.5。评分组件的星星样式通过自定义背景图片实现，背景图片分别为/common/imag1.png、/common/imag2.png和/common/imag3.png。评分组件的顶部边距为24vp。文本显示组件用于显示当前评分值，字体大小为16vp，字体颜色为rgba(24,36,49,0.60)，顶部边距为16vp。\n评分组件支持用户通过点击或滑动来调整评分，评分值的变化会实时更新到文本显示组件中。整个布局通过Column布局保证评分组件和文本显示组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct RatingExample {\n  @State rating: number = 3.5 // 定义一个状态变量rating，初始值为3.5，用于存储当前评分值\n\n  build() {\n    Column() {\n      Rating({ rating: this.rating, indicator: false }) // 创建一个Rating组件，初始评分值为当前rating值，indicator属性为false表示评分组件可交互\n        .stars(5) // 设置评分组件的总星星数为5\n        .stepSize(0.5) // 设置评分组件的步长为0.5，即每次评分变化的最小单位为0.5\n        .starStyle({\n          backgroundUri: '/common/imag1.png', // 设置评分组件的背景星星图片为/common/imag1.png\n          foregroundUri: '/common/imag2.png', // 设置评分组件的前景星星图片为/common/imag2.png\n          secondaryUri: '/common/imag3.png' // 设置评分组件的次级星星图片为/common/imag3.png\n        })\n        .margin({ top: 24 }) // 设置评分组件的顶部边距为24vp\n        .onChange((value: number) => { // 监听评分组件的评分变化事件\n          this.rating = value // 当评分变化时，更新rating状态变量的值为新的评分值\n        })\n      Text('current score is ' + this.rating) // 创建一个Text组件，显示当前评分值\n        .fontSize(16) // 设置文本字体大小为16vp\n        .fontColor('rgba(24,36,49,0.60)') // 设置文本字体颜色为rgba(24,36,49,0.60)\n        .margin({ top: 16 }) // 设置文本组件的顶部边距为16vp\n    }.width('100%').height('100%').backgroundColor('#F1F3F5') // 设置Column组件的宽度为100%，高度为100%，背景颜色为#F1F3F5\n  }\n}"
            },
            {
                "description": "该组件通过Column和Row布局实现了一个评分示例界面。布局宽度占据整个屏幕，高度设为100%，背景颜色为#F1F3F5。组件的垂直方向上被分为两个主要部分：评分输入部分和用户评论部分。\n\n评分输入部分包含一个Rating组件和一个Text组件，Rating组件用于用户输入评分，Text组件用于显示当前评分值。Rating组件的宽度为360vp，高度为113vp，背景颜色为#FFFFFF，顶部外边距为68vp。Rating组件的星星数量为5，步长为0.5，顶部外边距为24vp。当评分值改变时，会触发onChange事件，更新@State变量rating的值，并更新Text组件的显示内容。Text组件的字体大小为16，字体颜色为rgba(24,36,49,0.60)，顶部外边距为16vp。\n\n用户评论部分包含一个Row布局，其中包含一个Image组件、一个Column布局和一个Text组件。Image组件显示用户头像，宽度为40vp，高度为40vp，边框半径为20vp，左侧外边距为24vp。Column布局包含用户名和评分信息，用户名的字体大小为16，字体颜色为#182431，字体粗细为500。评分信息包含一个Rating组件和一个Text组件，Rating组件的评分值为3.5，不可编辑，顶部外边距为1vp，右侧外边距为8vp。Text组件显示评论日期，字体大小为10，字体颜色为#182431。Text组件显示评论楼层，字体大小为10，字体颜色为#182431，位置为(295, 8)。\n\n整个布局通过Column和Row布局保证组件在垂直和水平方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct RatingExample {\n  @State rating: number = 3.5 // 初始化评分值为3.5\n\n  build() {\n    Column() {\n      Column() {\n        Rating({ rating: this.rating, indicator: false }) // 创建一个可编辑的Rating组件，初始评分值为this.rating\n          .stars(5) // 设置Rating组件的星星数量为5\n          .stepSize(0.5) // 设置Rating组件的步长为0.5\n          .margin({ top: 24 }) // 设置Rating组件的顶部外边距为24vp\n          .onChange((value: number) => { // 当评分值改变时，触发onChange事件\n            this.rating = value // 更新@State变量rating的值\n          })\n        Text('current score is ' + this.rating) // 显示当前评分值\n          .fontSize(16) // 设置字体大小为16\n          .fontColor('rgba(24,36,49,0.60)') // 设置字体颜色为rgba(24,36,49,0.60)\n          .margin({ top: 16 }) // 设置顶部外边距为16vp\n      }.width(360).height(113).backgroundColor('#FFFFFF').margin({ top: 68 }) // 设置评分输入部分的宽度为360vp，高度为113vp，背景颜色为#FFFFFF，顶部外边距为68vp\n\n      Row() {\n        Image('common/testImage.jpg') // 显示用户头像\n          .width(40) // 设置宽度为40vp\n          .height(40) // 设置高度为40vp\n          .borderRadius(20) // 设置边框半径为20vp\n          .margin({ left: 24 }) // 设置左侧外边距为24vp\n        Column() {\n          Text('Yue') // 显示用户名\n            .fontSize(16) // 设置字体大小为16\n            .fontColor('#182431') // 设置字体颜色为#182431\n            .fontWeight(500) // 设置字体粗细为500\n          Row() {\n            Rating({ rating: 3.5, indicator: false }).margin({ top: 1, right: 8 }) // 显示用户评分，评分值为3.5，不可编辑，顶部外边距为1vp，右侧外边距为8vp\n            Text('2021/06/02') // 显示评论日期\n              .fontSize(10) // 设置字体大小为10\n              .fontColor('#182431') // 设置字体颜色为#182431\n          }\n        }.margin({ left: 12 }).alignItems(HorizontalAlign.Start) // 设置左侧外边距为12vp，对齐方式为左对齐\n\n        Text('1st Floor') // 显示评论楼层\n          .fontSize(10) // 设置字体大小为10\n          .fontColor('#182431') // 设置字体颜色为#182431\n          .position({ x: 295, y: 8 }) // 设置位置为(295, 8)\n      }.width(360).height(56).backgroundColor('#FFFFFF').margin({ top: 64 }) // 设置用户评论部分的宽度为360vp，高度为56vp，背景颜色为#FFFFFF，顶部外边距为64vp\n    }.width('100%').height('100%').backgroundColor('#F1F3F5') // 设置整个布局的宽度为100%，高度为100%，背景颜色为#F1F3F5\n  }\n}"
            },
            {
                "description": "该组件实现了一个自定义评分条的功能，每个圆圈表示0.5分。评分条的布局宽度占据整个屏幕，高度设为50vp。评分条的垂直方向上被分为两个部分：评分圆圈和分值显示。评分圆圈以水平布局方式排列，圆圈之间的间距均匀分布，且对齐方式为居中对齐。\n评分圆圈的样式包括背景颜色、宽度和高度等属性，支持不同的样式展示。评分圆圈的功能包括点击事件和状态效果，用户可以通过点击评分圆圈触发相应操作，评分圆圈也可以在启用或禁用状态下进行展示。\n评分条的样式和外观通过自定义的 `MyRatingStyle` 类进行配置，支持不同的样式展示。评分条的功能包括评分指示器、评分总数和评分步长等属性的配置，用户可以通过按钮点击事件改变这些属性。\n整个布局通过 Flex 布局保证评分圆圈在水平方向上有序排列，确保界面整洁美观。",
                "code": "// 定义一个自定义评分样式类，实现 `ContentModifier` 接口\nclass MyRatingStyle implements ContentModifier<RatingConfiguration> {\n  name: string = \"\" // 样式名称\n  style: number = 0 // 样式编号\n\n  // 构造函数，初始化样式名称和编号\n  constructor(value1: string, value2: number) {\n    this.name = value1\n    this.style = value2\n  }\n\n  // 应用内容样式，返回一个 `WrappedBuilder`\n  applyContent(): WrappedBuilder<[RatingConfiguration]> {\n    return wrapBuilder(buildRating)\n  }\n}\n\n// 定义一个构建评分的函数，接收 `RatingConfiguration` 配置对象\n@Builder function buildRating(config: RatingConfiguration) {\n  Column() {\n    Row() {\n      // 第一个评分圆圈\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 0.4 ? Color.Black : Color.Red) // 根据评分设置圆圈颜色\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) { // 如果评分条可改变评分\n            if (config.stepSize == 0.5) { // 如果评分步长为0.5\n              config.triggerChange(0.5); // 触发评分改变事件，评分增加0.5\n              return\n            }\n            if (config.stepSize == 1) { // 如果评分步长为1\n              config.triggerChange(1); // 触发评分改变事件，评分增加1\n              return\n            }\n          }\n        }).visibility(config.stars >= 1 ? Visibility.Visible : Visibility.Hidden) // 根据评分总数设置圆圈可见性\n\n      // 第二个评分圆圈\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 0.9 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            config.triggerChange(1);\n          }\n        }).visibility(config.stars >= 1 ? Visibility.Visible : Visibility.Hidden)\n\n      // 第三个评分圆圈\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 1.4 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            if (config.stepSize == 0.5) {\n              config.triggerChange(1.5);\n              return\n            }\n            if (config.stepSize == 1) {\n              config.triggerChange(2);\n              return\n            }\n          }\n        }).visibility(config.stars >= 2 ? Visibility.Visible : Visibility.Hidden).margin({left:10})\n\n      // 第四个评分圆圈\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 1.9 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            config.triggerChange(2);\n          }\n        }).visibility(config.stars >= 2 ? Visibility.Visible : Visibility.Hidden)\n\n      // 第五个评分圆圈\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 2.4 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            if (config.stepSize == 0.5) {\n              config.triggerChange(2.5);\n              return\n            }\n            if (config.stepSize == 1) {\n              config.triggerChange(3);\n              return\n            }\n          }\n        }).visibility(config.stars >= 3 ? Visibility.Visible : Visibility.Hidden).margin({left:10})\n\n      // 第六个评分圆圈\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 2.9 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            config.triggerChange(3);\n          }\n        }).visibility(config.stars >= 3 ? Visibility.Visible : Visibility.Hidden)\n\n      // 第七个评分圆圈\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 3.4 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            if (config.stepSize == 0.5) {\n              config.triggerChange(3.5);\n              return\n            }\n            if (config.stepSize == 1) {\n              config.triggerChange(4);\n              return\n            }\n          }\n        }).visibility(config.stars >= 4 ? Visibility.Visible : Visibility.Hidden).margin({left:10})\n\n      // 第八个评分圆圈\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 3.9 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            config.triggerChange(4);\n          }\n        }).visibility(config.stars >= 4 ? Visibility.Visible : Visibility.Hidden)\n\n      // 第九个评分圆圈\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 4.4 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            if (config.stepSize == 0.5) {\n              config.triggerChange(4.5);\n              return\n            }\n            if (config.stepSize == 1) {\n              config.triggerChange(5);\n              return\n            }\n          }\n        }).visibility(config.stars >= 5 ? Visibility.Visible : Visibility.Hidden).margin({left:10})\n\n      // 第十个评分圆圈\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 4.9 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            config.triggerChange(5);\n          }\n        }).visibility(config.stars >= 5 ? Visibility.Visible : Visibility.Hidden)\n    }\n    // 显示当前评分值\n    Text(\"分值：\" + config.rating)\n  }\n}\n\n// 定义评分条示例组件\n@Entry\n@Component\nstruct ratingExample {\n  @State rating: number = 0; // 当前评分值\n  @State ratingIndicator: boolean = true; // 评分指示器状态，true表示不可改变评分\n  @State ratingStars: number = 0; // 评分总数\n  @State ratingStepsize: number = 0.5; // 评分步长\n  @State ratingEnabled: boolean = true; // 评分条是否启用\n\n  build() {\n    Row() {\n      Column() {\n        // 创建评分条组件\n        Rating({\n          rating: 0, // 初始评分值\n          indicator: this.ratingIndicator // 评分指示器状态\n        })\n          .stepSize(this.ratingStepsize) // 设置评分步长\n          .stars(this.ratingStars) // 设置评分总数\n          .backgroundColor(Color.Transparent) // 设置背景颜色为透明\n          .width('100%') // 设置宽度为100%\n          .height(50) // 设置高度为50vp\n          .onChange((value: number) => { // 评分改变事件\n            console.info('Rating change is' + value);\n            this.rating = value // 更新当前评分值\n          })\n          .contentModifier(new MyRatingStyle(\"hello\", 3)) // 应用自定义评分样式\n\n        // 切换评分指示器状态的按钮\n        Button(this.ratingIndicator ? \"ratingIndicator : true\" : \"ratingIndicator : false\")\n          .onClick((event) => {\n            if (this.ratingIndicator) {\n              this.ratingIndicator = false\n            } else {\n              this.ratingIndicator = true\n            }\n          }).margin({top: 5})\n\n        // 增加评分总数的按钮\n        Button(this.ratingStars < 5 ? \"ratingStars + 1, ratingStars =\" + this.ratingStars : \"ratingStars最大值为5\")\n          .onClick((event) => {\n            if (this.ratingStars < 5) {\n              this.ratingStars += 1\n            }\n          }).margin({top: 5})\n\n        // 减少评分总数的按钮\n        Button(this.ratingStars > 0 ? \"ratingStars - 1, ratingStars =\" + this.ratingStars : \"ratingStars小于等于0时默认等于5\")\n          .onClick((event) => {\n            if (this.ratingStars > 0) {\n              this.ratingStars -= 1\n            }\n          }).margin({top: 5})\n\n        // 切换评分步长的按钮\n        Button(this.ratingStepsize == 0.5 ? \"ratingStepsize : 0.5\" : \"ratingStepsize : 1\")\n          .onClick((event) => {\n            if (this.ratingStepsize == 0.5) {\n              this.ratingStepsize = 1\n            } else {\n              this.ratingStepsize = 0.5\n            }\n          }).margin({top: 5})\n      }\n      .width('100%') // 设置宽度为100%\n      .height('100%') // 设置高度为100%\n      .justifyContent(FlexAlign.Center) // 设置内容居中对齐\n    }\n    .height('100%') // 设置高度为100%\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Select": {
        "description": "提供下拉选择菜单，可以让用户在多个选项之间选择。",
        "details": null,
        "interfaces": [
            {
                "description": "Select(options: Array<SelectOption>)",
                "params": {
                    "options": {
                        "type": "Array<SelectOption>",
                        "required": true,
                        "description": "下拉选项数组。"
                    }
                }
            }
        ],
        "attributes": {
            "selected": {
                "description": "设置下拉菜单初始选项的索引。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "Resource"
                        ],
                        "required": true,
                        "description": "下拉菜单初始选项的索引。"
                    }
                }
            },
            "value": {
                "description": "设置下拉按钮本身的文本内容。",
                "params": {
                    "value": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "下拉按钮本身的文本内容。"
                    }
                }
            },
            "controlSize": {
                "description": "设置Select组件的尺寸。",
                "params": {
                    "value": {
                        "type": "ControlSize",
                        "required": true,
                        "description": "Select组件的尺寸。",
                        "default": "ControlSize.NORMAL"
                    }
                }
            },
            "menuItemContentModifier": {
                "description": "定制Select下拉菜单项内容区的方法。",
                "params": {
                    "modifier": {
                        "type": "ContentModifier<MenuItemConfiguration>",
                        "required": true,
                        "description": "定制下拉菜单项内容区的方法。"
                    }
                }
            },
            "divider": {
                "description": "设置分割线样式。",
                "params": {
                    "options": {
                        "type": [
                            "Optional<DividerOptions>",
                            "null"
                        ],
                        "required": true,
                        "description": "分割线样式。"
                    }
                }
            },
            "font": {
                "description": "设置下拉按钮本身的文本样式。",
                "params": {
                    "value": {
                        "type": "Font",
                        "required": true,
                        "description": "下拉按钮本身的文本样式。"
                    }
                }
            },
            "fontColor": {
                "description": "设置下拉按钮本身的文本颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "下拉按钮本身的文本颜色。"
                    }
                }
            },
            "selectedOptionBgColor": {
                "description": "设置下拉菜单选中项的背景色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "下拉菜单选中项的背景色。"
                    }
                }
            },
            "selectedOptionFont": {
                "description": "设置下拉菜单选中项的文本样式。",
                "params": {
                    "value": {
                        "type": "Font",
                        "required": true,
                        "description": "下拉菜单选中项的文本样式。"
                    }
                }
            },
            "selectedOptionFontColor": {
                "description": "设置下拉菜单选中项的文本颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "下拉菜单选中项的文本颜色。"
                    }
                }
            },
            "optionBgColor": {
                "description": "设置下拉菜单项的背景色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "下拉菜单项的背景色。"
                    }
                }
            },
            "optionFont": {
                "description": "设置下拉菜单项的文本样式。",
                "params": {
                    "value": {
                        "type": "Font",
                        "required": true,
                        "description": "下拉菜单项的文本样式。"
                    }
                }
            },
            "optionFontColor": {
                "description": "设置下拉菜单项的文本颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "下拉菜单项的文本颜色。"
                    }
                }
            },
            "space": {
                "description": "设置下拉菜单项的文本与箭头之间的间距。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "下拉菜单项的文本与箭头之间的间距。",
                        "default": 8
                    }
                }
            },
            "arrowPosition": {
                "description": "设置下拉菜单项的文本与箭头之间的对齐方式。",
                "params": {
                    "value": {
                        "type": "ArrowPosition",
                        "required": true,
                        "description": "下拉菜单项的文本与箭头之间的对齐方式。",
                        "default": "ArrowPosition.END"
                    }
                }
            },
            "menuAlign": {
                "description": "设置下拉按钮与下拉菜单间的对齐方式。",
                "params": {
                    "alignType": {
                        "type": "MenuAlignType",
                        "required": true,
                        "description": "对齐方式类型。",
                        "default": "MenuAlignType.START"
                    },
                    "offset": {
                        "type": "Offset",
                        "required": false,
                        "description": "按照对齐类型对齐后，下拉菜单相对下拉按钮的偏移量。",
                        "default": {
                            "dx": 0,
                            "dy": 0
                        }
                    }
                }
            },
            "optionWidth": {
                "description": "设置下拉菜单项的宽度。",
                "params": {
                    "value": {
                        "type": [
                            "Dimension",
                            "OptionWidthMode"
                        ],
                        "required": true,
                        "description": "下拉菜单项的宽度。"
                    }
                }
            },
            "optionHeight": {
                "description": "设置下拉菜单显示的最大高度。",
                "params": {
                    "value": {
                        "type": "Dimension",
                        "required": true,
                        "description": "下拉菜单显示的最大高度。"
                    }
                }
            },
            "menuBackgroundColor": {
                "description": "设置下拉菜单的背景色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "下拉菜单的背景色。"
                    }
                }
            },
            "menuBackgroundBlurStyle": {
                "description": "设置下拉菜单的背景模糊材质。",
                "params": {
                    "value": {
                        "type": "BlurStyle",
                        "required": true,
                        "description": "下拉菜单的背景模糊材质。",
                        "default": "BlurStyle.COMPONENT_ULTRA_THICK"
                    }
                }
            }
        },
        "events": {
            "onSelect": {
                "description": "下拉菜单选中某一项的回调。",
                "params": {
                    "index": {
                        "type": "number",
                        "required": true,
                        "description": "选中项的索引。"
                    },
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "选中项的值。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件实现了一个带有选择功能的界面，用户可以通过点击选择不同的选项。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个 Select 组件，用于展示多个选项。每个选项包含一个文本和一个图标，选项的排列方式为垂直布局。\nSelect 组件的样式包括字体大小、字体颜色、选中项字体样式、选项字体样式等属性。选项的宽度为 200vp，高度为 300vp。组件的功能包括点击选项时触发选择事件，并更新当前选中的索引和文本。\n整个布局通过 Column 组件保证 Select 组件在垂直方向上居中对齐，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct SelectExample {\n  // 当前选中的文本\n  @State text: string = \"TTTTT\"\n  // 当前选中的索引\n  @State index: number = -1\n  // 箭头位置，默认为末尾\n  @State arrowPosition: ArrowPosition = ArrowPosition.END\n\n  build() {\n    Column() {\n      // Select 组件，用于展示多个选项\n      Select([\n        { value: 'aaa', icon: $r(\"app.media.icon\") },\n        { value: 'bbb', icon: $r(\"app.media.icon\") },\n        { value: 'ccc', icon: $r(\"app.media.icon\") },\n        { value: 'ddd', icon: $r(\"app.media.icon\") }\n      ])\n        // 设置当前选中的索引\n        .selected(this.index)\n        // 设置当前选中的文本\n        .value(this.text)\n        // 设置字体样式\n        .font({ size: 16, weight: 500 })\n        // 设置字体颜色\n        .fontColor('#182431')\n        // 设置选中项的字体样式\n        .selectedOptionFont({ size: 16, weight: 400 })\n        // 设置选项的字体样式\n        .optionFont({ size: 16, weight: 400 })\n        // 设置箭头位置\n        .arrowPosition(this.arrowPosition)\n        // 设置菜单对齐方式\n        .menuAlign(MenuAlignType.START, {dx:0, dy:0})\n        // 设置选项的宽度\n        .optionWidth(200)\n        // 设置选项的高度\n        .optionHeight(300)\n        // 隐藏分割线\n        .divider(null)\n        // 设置选择事件\n        .onSelect((index: number, text?: string | undefined) => {\n          console.info('Select:' + index)\n          this.index = index;\n          if (text) {\n            this.text = text;\n          }\n        })\n    }\n    // 设置布局宽度为 100%\n    .width('100%')\n  }\n}"
            },
            {
                "description": "该组件实现了一个带有自定义分割线样式的选择器（Select）。布局宽度占据整个屏幕，高度由内容决定。组件的垂直方向上包含一个选择器，选择器的选项以垂直布局方式排列，每个选项之间通过自定义的分割线进行分隔。\n选择器的样式包括字体大小、字体颜色、选中项和未选中项的字体样式、箭头位置、菜单对齐方式、选项的宽度和高度等属性。选择器的功能包括点击事件和状态效果，用户可以通过点击选择器触发相应操作，选择器也可以在选中或未选中状态下进行展示。\n整个布局通过 Column 布局保证选择器在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct SelectExample {\n  @State text: string = \"TTTTT\" // 当前选中的文本\n  @State index: number = -1 // 当前选中的索引，初始值为-1表示未选中\n  @State arrowPosition: ArrowPosition = ArrowPosition.END // 箭头位置，初始值为END\n\n  build() {\n    Column() {\n      Select([\n        { value: 'aaa', icon: $r(\"app.media.icon\") }, // 选项1，包含文本和图标\n        { value: 'bbb', icon: $r(\"app.media.icon\") }, // 选项2，包含文本和图标\n        { value: 'ccc', icon: $r(\"app.media.icon\") }, // 选项3，包含文本和图标\n        { value: 'ddd', icon: $r(\"app.media.icon\") }  // 选项4，包含文本和图标\n      ])\n      .selected(this.index) // 设置当前选中的索引\n      .value(this.text) // 设置当前选中的文本\n      .font({ size: 16, weight: 500 }) // 设置字体大小和粗细\n      .fontColor('#182431') // 设置字体颜色\n      .selectedOptionFont({ size: 16, weight: 400 }) // 设置选中项的字体样式\n      .optionFont({ size: 16, weight: 400 }) // 设置未选中项的字体样式\n      .arrowPosition(this.arrowPosition) // 设置箭头位置\n      .menuAlign(MenuAlignType.START, {dx:0, dy:0}) // 设置菜单对齐方式\n      .optionWidth(200) // 设置选项的宽度\n      .optionHeight(300) // 设置选项的高度\n      .divider({ strokeWidth: 5, color: Color.Blue, startMargin: 10, endMargin: 10 }) // 设置分割线的样式\n      .onSelect((index: number, text?: string | undefined) => { // 选择事件处理函数\n        console.info('Select:' + index) // 打印选中的索引\n        this.index = index; // 更新当前选中的索引\n        if (text) {\n          this.text = text; // 更新当前选中的文本\n        }\n      })\n    }.width('100%') // 设置布局宽度为100%\n  }\n}"
            },
            {
                "description": "该示例实现了一个自定义下拉菜单选项的Select组件。自定义下拉菜单选项样式为“文本 + 图片 + 空白间隔 + 文本 + 绘制三角形”，点击菜单选项后Select组件显示菜单选项的文本内容。\n\n布局属性：\n- 整个Select组件的布局宽度占据整个屏幕，高度设为50%。\n- 菜单选项的布局宽度为100px，高度为150px。\n- 图片的宽度为40px，高度为40px。\n- 空白间隔的宽度为30px。\n\n组件的样式和外观：\n- 文本使用默认字体和颜色。\n- 图片使用指定的资源名（如$r(\"app.media.icon\")）。\n- 绘制的三角形使用黑色边框，边框宽度为3，填充透明。\n\n组件的排列和嵌套关系：\n- 菜单选项使用Row布局，包含文本、图片、空白间隔、文本和绘制的三角形。\n- 整个Select组件嵌套在Column布局中，Column布局嵌套在Row布局中。\n\n组件的功能和交互：\n- 点击菜单选项后，触发Select组件的onSelect事件，输出选择的索引和文本内容。\n- 通过MenuItemContentModifier自定义菜单选项的内容和样式。",
                "code": "import { MenuItemModifier } from '@kit.ArkUI'\n\n// 自定义菜单选项内容修饰器\nclass MyMenuItemContentModifier implements ContentModifier<MenuItemConfiguration> {\n  modifierText: string = \"\"\n  constructor(text: string) {\n    this.modifierText = text; // 初始化修饰文本\n  }\n  applyContent(): WrappedBuilder<[MenuItemConfiguration]> {\n    return wrapBuilder(MenuItemBuilder) // 应用自定义的菜单选项构建器\n  }\n}\n\n// 自定义菜单选项构建器\n@Builder\nfunction MenuItemBuilder(configuration: MenuItemConfiguration) {\n  Row() {\n    Text(configuration.value) // 显示菜单选项的值\n    Blank() // 添加空白间隔\n    Image(configuration.icon).size({ width: 40, height: 40 }) // 显示菜单选项的图标，设置图标大小\n    Blank(30) // 添加30px的空白间隔\n    Text((configuration.contentModifier as MyMenuItemContentModifier).modifierText) // 显示修饰文本\n    Path()\n      .width('100px') // 设置路径宽度\n      .height('150px') // 设置路径高度\n      .commands('M40 0 L80 100 L0 100 Z') // 绘制三角形路径\n      .fillOpacity(0) // 设置填充透明度\n      .stroke(Color.Black) // 设置边框颜色\n      .strokeWidth(3) // 设置边框宽度\n  }\n  .onClick(() => {\n    configuration.triggerSelect(configuration.index, configuration.value.valueOf().toString()) // 点击菜单选项后触发选择事件\n  })\n}\n\n// 入口组件\n@Entry\n@Component\nstruct SelectExample {\n  @State text: string = \"有modifier\" // 初始化Select组件的文本\n  build() {\n    Column() {\n      Row() {\n        Select([{ value: 'item1', icon: $r(\"app.media.icon\") },\n          { value: 'item2', icon: $r(\"app.media.icon\") }]) // 创建Select组件，设置菜单选项\n          .value(this.text) // 设置Select组件的初始值\n          .onSelect((index: number, text?: string) => {\n            console.info('Select index:' + index) // 输出选择的索引\n            console.info('Select text:' + text) // 输出选择的文本\n          })\n          .menuItemContentModifier(new MyMenuItemContentModifier(\"我来自Modifier\")) // 应用自定义的菜单选项内容修饰器\n      }\n      .alignItems(VerticalAlign.Center) // 设置对齐方式为垂直居中\n      .height(\"50%\") // 设置高度为50%\n    }\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个选择器（Select）的示例。布局宽度占据整个屏幕，高度由内容自动调整。组件的垂直方向上包含一个Select组件，用于展示多个选项供用户选择。\n\nSelect组件的样式包括字体大小、字体颜色、选中项和未选中项的字体样式、选项之间的间距、箭头位置、菜单对齐方式、选项的宽度和高度等属性。Select组件的功能包括用户点击选择某个选项时触发的事件，事件中会更新当前选中的索引和文本内容。\n\n整个布局通过Column布局保证Select组件在垂直方向上居中显示，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct SelectExample {\n  // 定义一个状态变量text，用于存储当前选中的文本内容，初始值为\"TTTTT\"\n  @State text: string = \"TTTTT\"\n  \n  // 定义一个状态变量index，用于存储当前选中的索引，初始值为2\n  @State index: number = 2\n  \n  // 定义一个状态变量space，用于设置选项之间的间距，初始值为8\n  @State space: number = 8\n  \n  // 定义一个状态变量arrowPosition，用于设置箭头的位置，初始值为ArrowPosition.END\n  @State arrowPosition: ArrowPosition = ArrowPosition.END\n\n  build() {\n    Column() {\n      // 创建一个Select组件，包含四个选项，每个选项包含一个值和一个图标\n      Select([\n        { value: 'aaa', icon: $r(\"app.media.selection\") },\n        { value: 'bbb', icon: $r(\"app.media.selection\") },\n        { value: 'ccc', icon: $r(\"app.media.selection\") },\n        { value: 'ddd', icon: $r(\"app.media.selection\") }\n      ])\n      // 设置当前选中的索引为this.index\n      .selected(this.index)\n      \n      // 设置当前选中的文本内容为this.text\n      .value(this.text)\n      \n      // 设置Select组件的字体样式，字体大小为16，字体粗细为500\n      .font({ size: 16, weight: 500 })\n      \n      // 设置Select组件的字体颜色为#182431\n      .fontColor('#182431')\n      \n      // 设置选中项的字体样式，字体大小为16，字体粗细为400\n      .selectedOptionFont({ size: 16, weight: 400 })\n      \n      // 设置未选中项的字体样式，字体大小为16，字体粗细为400\n      .optionFont({ size: 16, weight: 400 })\n      \n      // 设置选项之间的间距为this.space\n      .space(this.space)\n      \n      // 设置箭头的位置为this.arrowPosition\n      .arrowPosition(this.arrowPosition)\n      \n      // 设置菜单的对齐方式为MenuAlignType.START，偏移量为{dx:0, dy:0}\n      .menuAlign(MenuAlignType.START, {dx:0, dy:0})\n      \n      // 设置选项的宽度为200\n      .optionWidth(200)\n      \n      // 设置选项的高度为300\n      .optionHeight(300)\n      \n      // 设置选择事件的回调函数，当用户选择某个选项时触发\n      .onSelect((index:number, text?: string | undefined)=>{\n        // 在控制台输出当前选中的索引\n        console.info('Select:' + index)\n        \n        // 更新当前选中的索引为index\n        this.index = index;\n        \n        // 如果text存在，则更新当前选中的文本内容为text\n        if(text){\n          this.text = text;\n        }\n      })\n    }\n    // 设置Column组件的宽度为100%\n    .width('100%')\n  }\n}"
            },
            {
                "description": "该示例实现了一个自定义下拉菜单选项的Select组件。布局上，Select组件位于一个Column容器内，该容器包含一个Row组件，Row组件中嵌套了Select组件。Select组件的布局宽度占据整个屏幕，高度设为50%，内边距为左右35vp、顶部35vp。Select组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组按钮。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n\nSelect组件的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。Select组件的功能包括点击事件和状态效果，用户可以通过点击Select组件触发相应操作，Select组件也可以在启用或禁用状态下进行展示。\n\n整个布局通过Flex布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { MenuItemModifier, SymbolGlyphModifier } from '@kit.ArkUI'\n\n// 定义一个自定义的MenuItem内容修饰器类\nclass MyMenuItemContentModifier implements ContentModifier<MenuItemConfiguration> {\n  modifierText: string = \"\"\n  constructor(text: string) {\n    this.modifierText = text;\n  }\n  // 应用内容修饰器，返回一个MenuItemBuilder的包装构建器\n  applyContent(): WrappedBuilder<[MenuItemConfiguration]> {\n    return wrapBuilder(MenuItemBuilder)\n  }\n}\n\n// 定义一个MenuItem的构建器函数\n@Builder\nfunction MenuItemBuilder(configuration: MenuItemConfiguration) {\n  Row() {\n    // 显示菜单项的值\n    Text(configuration.value)\n    // 添加空白间隔\n    Blank()\n    // 如果有symbolIcon，则显示SymbolGlyph组件\n    if (configuration.symbolIcon) {\n      SymbolGlyph().attributeModifier(configuration.symbolIcon).fontSize(24)\n    // 否则，如果有icon，则显示Image组件\n    } else if (configuration.icon) {\n      Image(configuration.icon).size({ width: 24, height: 24 })\n    }\n    // 添加空白间隔\n    Blank(30)\n    // 显示自定义内容修饰器的文本\n    Text((configuration.contentModifier as MyMenuItemContentModifier).modifierText)\n    // 添加空白间隔\n    Blank(30)\n    // 绘制一个三角形路径\n    Path()\n      .width('100px')\n      .height('150px')\n      .commands('M40 0 L80 100 L0 100 Z')\n      .fillOpacity(0)\n      .stroke(Color.Black)\n      .strokeWidth(3)\n  }\n  // 点击菜单项时触发选择事件\n  .onClick(() => {\n    configuration.triggerSelect(configuration.index, configuration.value.valueOf().toString())\n  })\n}\n\n// 定义一个Select组件的示例\n@Entry\n@Component\nstruct SelectExample {\n  @State text: string = \"Content Modifier Select\"\n  @State symbolModifier1: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_trash')).fontColor([Color.Gray]);\n  @State symbolModifier2: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.exposure')).fontColor([Color.Gray]);\n  build() {\n    Column() {\n      Row() {\n        // 创建一个Select组件，包含两个菜单项\n        Select([{ value: 'item1', icon: $r('app.media.icon'), symbolIcon: this.symbolModifier1 },\n          { value: 'item1', icon: $r('app.media.icon'), symbolIcon: this.symbolModifier2 }])\n          .value(this.text)\n          // 选择菜单项时触发的事件\n          .onSelect((index: number, text?: string) => {\n            console.info('Select index:' + index)\n            console.info('Select text:' + text)\n          })\n          // 应用自定义的菜单项内容修饰器\n          .menuItemContentModifier(new MyMenuItemContentModifier(\"Content Modifier\"))\n      }\n      // 设置Row组件的对齐方式为垂直居中，高度为50%\n      .alignItems(VerticalAlign.Center).height('50%')\n    }\n  }\n}"
            },
            {
                "description": "该组件实现了一个下拉菜单中图片为Symbol的Select组件。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个Select组件，Select组件的选项以水平布局方式排列，每个选项包含一个Symbol图标和一个文本值。\nSelect组件的样式包括字体大小、字体颜色、选中项和未选中项的字体样式、选项之间的间距、箭头位置等属性。Select组件的功能包括选项的选择事件，用户可以通过点击选项触发相应操作，并更新当前选中的索引和文本值。\n整个布局通过Column布局保证Select组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// 导入SymbolGlyphModifier模块，用于创建Symbol图标的样式\nimport { SymbolGlyphModifier } from '@kit.ArkUI'\n\n// 定义一个名为SelectExample的组件，作为页面的入口组件\n@Entry\n@Component\nstruct SelectExample {\n  // 定义一个状态变量text，用于存储当前选中的文本值，初始值为\"TTTTT\"\n  @State text: string = \"TTTTT\"\n  \n  // 定义一个状态变量index，用于存储当前选中的索引，初始值为2\n  @State index: number = 2\n  \n  // 定义一个状态变量space，用于设置选项之间的间距，初始值为8\n  @State space: number = 8\n  \n  // 定义一个状态变量arrowPosition，用于设置箭头的位置，初始值为ArrowPosition.END\n  @State arrowPosition: ArrowPosition = ArrowPosition.END\n  \n  // 定义一个状态变量symbolModifier1，用于创建第一个Symbol图标的样式，图标为系统图标ohos_wifi，颜色为绿色\n  @State symbolModifier1: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_wifi')).fontColor([Color.Green]);\n  \n  // 定义一个状态变量symbolModifier2，用于创建第二个Symbol图标的样式，图标为系统图标ohos_star，颜色为红色\n  @State symbolModifier2: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_star')).fontColor([Color.Red]);\n  \n  // 定义一个状态变量symbolModifier3，用于创建第三个Symbol图标的样式，图标为系统图标ohos_trash，颜色为灰色\n  @State symbolModifier3: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_trash')).fontColor([Color.Gray]);\n  \n  // 定义一个状态变量symbolModifier4，用于创建第四个Symbol图标的样式，图标为系统图标exposure，颜色为灰色\n  @State symbolModifier4: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.exposure')).fontColor([Color.Gray]);\n  \n  // 构建组件的UI结构\n  build() {\n    // 使用Column布局，宽度占据整个屏幕\n    Column() {\n      // 创建一个Select组件，选项数组包含四个选项，每个选项包含一个文本值和一个Symbol图标\n      Select([\n        { value: 'aaa', symbolIcon: this.symbolModifier1 },\n        { value: 'bbb', symbolIcon: this.symbolModifier2 },\n        { value: 'ccc', symbolIcon: this.symbolModifier3 },\n        { value: 'ddd', symbolIcon: this.symbolModifier4 }\n      ])\n      // 设置当前选中的索引\n      .selected(this.index)\n      // 设置当前选中的文本值\n      .value(this.text)\n      // 设置Select组件的字体样式，字体大小为16，字体粗细为500\n      .font({ size: 16, weight: 500 })\n      // 设置Select组件的字体颜色为#182431\n      .fontColor('#182431')\n      // 设置选中项的字体样式，字体大小为16，字体粗细为400\n      .selectedOptionFont({ size: 16, weight: 400 })\n      // 设置未选中项的字体样式，字体大小为16，字体粗细为400\n      .optionFont({ size: 16, weight: 400 })\n      // 设置选项之间的间距\n      .space(this.space)\n      // 设置箭头的位置\n      .arrowPosition(this.arrowPosition)\n      // 设置菜单的对齐方式为START，偏移量为{dx:0, dy:0}\n      .menuAlign(MenuAlignType.START, {dx:0, dy:0})\n      // 设置选项选择事件的回调函数\n      .onSelect((index:number, text?: string | undefined)=>{\n        // 打印当前选中的索引\n        console.info('Select:' + index)\n        // 更新当前选中的索引\n        this.index = index;\n        // 如果传入了文本值，则更新当前选中的文本值\n        if(text){\n          this.text = text;\n        }\n      })\n    }\n    // 设置Column布局的宽度为100%\n    .width('100%')\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Slider": {
        "description": "滑动条组件，通常用于快速调节设置值，如音量调节、亮度调节等应用场景。",
        "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "Slider(options?: SliderOptions)",
                "params": {
                    "options": {
                        "type": "SliderOptions",
                        "description": "滑动条的配置选项。"
                    }
                }
            }
        ],
        "attributes": {
            "value": {
                "description": "当前进度值。",
                "params": {
                    "value": {
                        "type": "number",
                        "description": "当前进度值。",
                        "default": "与参数min的取值一致。"
                    }
                }
            },
            "min": {
                "description": "设置最小值。",
                "params": {
                    "value": {
                        "type": "number",
                        "description": "最小值。",
                        "default": "0"
                    }
                }
            },
            "max": {
                "description": "设置最大值。",
                "params": {
                    "value": {
                        "type": "number",
                        "description": "最大值。",
                        "default": "100"
                    }
                }
            },
            "step": {
                "description": "设置Slider滑动步长。",
                "params": {
                    "value": {
                        "type": "number",
                        "description": "滑动步长。",
                        "default": "1"
                    }
                }
            },
            "style": {
                "description": "设置Slider的滑块与滑轨显示样式。",
                "params": {
                    "value": {
                        "type": "SliderStyle",
                        "description": "滑块与滑轨显示样式。",
                        "default": "SliderStyle.OutSet"
                    }
                }
            },
            "direction": {
                "description": "设置滑动条滑动方向为水平或竖直方向。",
                "params": {
                    "value": {
                        "type": "Axis",
                        "description": "滑动方向。",
                        "default": "Axis.Horizontal"
                    }
                }
            },
            "reverse": {
                "description": "设置滑动条取值范围是否反向。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "description": "取值范围是否反向。",
                        "default": "false"
                    }
                }
            },
            "blockColor": {
                "description": "设置滑块的颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "滑块的颜色。"
                    }
                }
            },
            "trackColor": {
                "description": "设置滑轨的背景颜色。",
                "params": {
                    "value": {
                        "type": [
                            "ResourceColor",
                            "LinearGradient"
                        ],
                        "required": true,
                        "description": "滑轨的背景颜色。"
                    }
                }
            },
            "selectedColor": {
                "description": "设置滑轨的已滑动部分颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "滑轨的已滑动部分颜色。"
                    }
                }
            },
            "showSteps": {
                "description": "设置当前是否显示步长刻度值。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "当前是否显示步长刻度值。",
                        "default": "false"
                    }
                }
            },
            "showTips": {
                "description": "设置滑动时是否显示气泡提示。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "滑动时是否显示气泡提示。",
                        "default": "false"
                    },
                    "content": {
                        "type": "ResourceStr",
                        "description": "气泡提示的文本内容，默认显示当前百分比。"
                    }
                }
            },
            "trackThickness": {
                "description": "设置滑轨的粗细。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "滑轨的粗细。"
                    }
                }
            },
            "blockBorderColor": {
                "description": "设置滑块描边颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "滑块描边颜色。"
                    }
                }
            },
            "blockBorderWidth": {
                "description": "设置滑块描边粗细。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "滑块描边粗细。"
                    }
                }
            },
            "stepColor": {
                "description": "设置刻度颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "刻度颜色。"
                    }
                }
            },
            "trackBorderRadius": {
                "description": "设置底板圆角半径。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "底板圆角半径。"
                    }
                }
            },
            "selectedBorderRadius": {
                "description": "设置已滑动部分（高亮）圆角半径。",
                "params": {
                    "value": {
                        "type": "Dimension",
                        "required": true,
                        "description": "已选择部分圆角半径。"
                    }
                }
            },
            "blockSize": {
                "description": "设置滑块大小。",
                "params": {
                    "value": {
                        "type": "SizeOptions",
                        "required": true,
                        "description": "滑块大小。"
                    }
                }
            },
            "blockStyle": {
                "description": "设置滑块形状参数。",
                "params": {
                    "value": {
                        "type": "SliderBlockStyle",
                        "required": true,
                        "description": "滑块形状参数。"
                    }
                }
            },
            "stepSize": {
                "description": "设置刻度大小（直径）。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "刻度大小（直径）。"
                    }
                }
            },
            "sliderInteractionMode": {
                "description": "设置用户与滑动条组件交互方式。",
                "params": {
                    "value": {
                        "type": "SliderInteraction",
                        "required": true,
                        "description": "用户与滑动条组件交互方式。",
                        "default": "SliderInteraction.SLIDE_AND_CLICK"
                    }
                }
            },
            "minResponsiveDistance": {
                "description": "设置滑动响应的最小距离。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "滑动响应的最小距离。"
                    }
                }
            },
            "contentModifier": {
                "description": "定制Slider内容区的方法。",
                "params": {
                    "modifier": {
                        "type": "ContentModifier<SliderConfiguration>",
                        "required": true,
                        "description": "定制Slider内容区的方法。"
                    }
                }
            },
            "slideRange": {
                "description": "设置有效滑动区间。",
                "params": {
                    "value": {
                        "type": "SlideRange",
                        "required": true,
                        "description": "有效滑动区间。"
                    }
                }
            }
        },
        "events": {
            "onChange": {
                "description": "Slider拖动或点击时触发事件回调。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "当前滑动进度值。"
                    },
                    "mode": {
                        "type": "SliderChangeMode",
                        "required": true,
                        "description": "事件触发的相关状态值。"
                    }
                }
            }
        },
        "rules": [
            "Slider无默认padding。",
            "当Slider为水平滑动条时，Slider默认高度为40vp，宽度为父容器的宽度，滑动条居中显示，左右间距为分别为10vp，若设置padding，padding不会覆盖左右间距。",
            "当Slider为竖直滑动条时，Slider默认宽度为40vp，高度为父容器的高度，滑动条居中显示，上下间距为分别为6vp，若设置padding，padding不会覆盖上下间距。"
        ],
        "examples": [
            {
                "description": "该组件通过 Row 和 Column 布局实现了一个包含进度条、按钮和滑动条的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个进度条、两个按钮（增加和减少）、一个滑动条以及多个文本标签。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n\n进度条的样式为环形，显示当前进度值。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。滑动条的样式包括显示步长、宽度自适应等属性。文本标签的样式包括字体大小、颜色等属性，用于显示当前状态、进度值、最小值、最大值和步长。\n\n按钮的功能包括点击事件，用户可以通过点击按钮增加或减少滑动条的值。滑动条的功能包括拖动事件，用户可以通过拖动滑动条改变其值。整个布局通过 Row 和 Column 布局保证组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Builder function buildSlider(config: SliderConfiguration) {\n  Row() {\n    Column({space: 30}) {\n      // 创建一个环形进度条，显示当前进度值\n      Progress({value: config.value, total: config.max, type:ProgressType.Ring})\n        .margin({ top:20 })\n\n      // 创建一个按钮，点击后增加滑动条的值\n      Button('增加').onClick(() => {\n        config.value = config.value + config.step\n        config.triggerChange(config.value, SliderChangeMode.Click)\n      })\n        .width(100) // 设置按钮宽度\n        .height(25) // 设置按钮高度\n        .fontSize(10) // 设置按钮字体大小\n        .enabled(config.value<config.max) // 设置按钮是否启用，当值小于最大值时启用\n\n      // 创建一个按钮，点击后减少滑动条的值\n      Button('减少').onClick(() => {\n        config.value = config.value - config.step\n        config.triggerChange(config.value, SliderChangeMode.Click)\n      })\n        .width(100) // 设置按钮宽度\n        .height(25) // 设置按钮高度\n        .fontSize(10) // 设置按钮字体大小\n        .enabled(config.value>config.min) // 设置按钮是否启用，当值大于最小值时启用\n\n      // 创建一个滑动条，显示当前值，并支持拖动改变值\n      Slider({\n        value: config.value,\n        min: config.min,\n        max: config.max,\n        step:config.step,\n      })\n        .width(config.max) // 设置滑动条宽度\n        .visibility((config.contentModifier as MySliderStyle).showSlider?Visibility.Visible:Visibility.Hidden) // 根据配置显示或隐藏滑动条\n        .showSteps(true) // 显示步长\n        .onChange((value: number, mode: SliderChangeMode) => {\n          config.triggerChange(value, mode)\n        })\n\n      // 显示当前滑动条的状态（Begin, Moving, End, Click）\n      Text('当前状态：' + ((config.contentModifier as MySliderStyle).sliderChangeMode==0?\"Begin\"\n        :((config.contentModifier as MySliderStyle).sliderChangeMode==1?\"Moving\"\n          :((config.contentModifier as MySliderStyle).sliderChangeMode==2?\"End\"\n            :((config.contentModifier as MySliderStyle).sliderChangeMode==3?\"Click\":\"无\")))))\n        .fontSize(10) // 设置文本字体大小\n\n      // 显示当前滑动条的进度值\n      Text('进度值：' + config.value)\n        .fontSize(10) // 设置文本字体大小\n\n      // 显示滑动条的最小值\n      Text('最小值：' + config.min)\n        .fontSize(10) // 设置文本字体大小\n\n      // 显示滑动条的最大值\n      Text('最大值：' + config.max)\n        .fontSize(10) // 设置文本字体大小\n\n      // 显示滑动条的步长\n      Text('步长：' + config.step)\n        .fontSize(10) // 设置文本字体大小\n    }\n    .width('80%') // 设置列的宽度为父容器的80%\n  }\n  .width('100%') // 设置行的宽度为父容器的100%\n}\n\n// 定义一个类，用于配置滑动条的显示和状态\nclass MySliderStyle implements ContentModifier<SliderConfiguration> {\n  showSlider:boolean = true // 是否显示滑动条\n  sliderChangeMode:number = 0 // 滑动条的状态\n  constructor(showSlider: boolean,sliderChangeMode:number) {\n    this.showSlider = showSlider\n    this.sliderChangeMode = sliderChangeMode\n  }\n  applyContent() : WrappedBuilder<[SliderConfiguration]> {\n    return wrapBuilder(buildSlider)\n  }\n}\n\n@Entry\n@Component\nstruct SliderExample {\n  @State showSlider:boolean = true // 是否显示滑动条\n  @State sliderValue: number = 0 // 滑动条的当前值\n  @State sliderMin: number = 10 // 滑动条的最小值\n  @State sliderMax: number = 100 // 滑动条的最大值\n  @State sliderStep: number = 20 // 滑动条的步长\n  @State sliderChangeMode: number = 0 // 滑动条的状态\n\n  build() {\n    Column({ space: 8 }) {\n      Row() {\n        // 创建一个滑动条，显示当前值，并支持拖动改变值\n        Slider({\n          value: this.sliderValue,\n          min: this.sliderMin,\n          max: this.sliderMax,\n          step:this.sliderStep,\n        })\n          .showSteps(true) // 显示步长\n          .onChange((value: number, mode: SliderChangeMode) => {\n            this.sliderValue = value\n            this.sliderChangeMode = mode\n            console.info('【SliderLog】value:' + value + 'mode:' + mode.toString())\n          })\n          .contentModifier(new MySliderStyle(this.showSlider,this.sliderChangeMode)) // 应用自定义样式\n      }\n      .width('100%') // 设置行的宽度为父容器的100%\n    }\n    .width('100%') // 设置列的宽度为父容器的100%\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个展示多种 Slider 组件样式和功能的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一个 Slider 组件。每个 Slider 组件的样式和功能各不相同，展示了不同的属性设置和交互效果。\n\n布局属性：\n- 使用 Column 布局，垂直排列各个子组件。\n- 每个子组件的宽度设置为 '90%'，确保在不同屏幕尺寸下都能良好显示。\n- 使用 space 属性设置子组件之间的间距为 8vp。\n- 使用 margin 属性设置标题的上下边距为 15vp。\n\n组件的样式和外观：\n- 标题使用 Text 组件，字体大小为 9vp，颜色为 0xCCCCCC，居中显示。\n- Slider 组件的样式包括 OutSet 和 InSet 两种，分别展示了不同的外观效果。\n- 通过 blockSize、blockBorderColor、blockBorderWidth 等属性自定义滑块的尺寸、边框颜色和宽度。\n- 通过 stepSize、stepColor 等属性自定义步长和步长颜色。\n- 通过 trackBorderRadius、selectedBorderRadius 等属性自定义轨道和选中部分的圆角。\n- 通过 blockStyle 属性自定义滑块的样式，包括默认样式、图片样式和自定义形状样式。\n- 通过 showTips 属性在滑块上显示提示信息，提示信息的内容为当前滑块的值。\n\n组件的排列和嵌套关系：\n- 使用 Column 布局，垂直排列各个子组件。\n- 每个子组件包含一个标题和一个 Slider 组件，标题在 Slider 组件的上方。\n- 使用 Divider 组件分隔不同的 Slider 组件部分，确保界面整洁。\n\n组件的功能和交互：\n- Slider 组件支持用户通过拖动滑块改变值，并实时更新显示的提示信息。\n- 通过 onChange 事件监听滑块值的变化，并将变化后的值更新到状态变量 tipsValue 中。\n- 通过 showTips 属性在滑块上显示提示信息，提示信息的内容为当前滑块的值。",
                "code": "@Entry\n@Component\nstruct SliderExample {\n  @State tipsValue: number = 40 // 初始化状态变量 tipsValue，用于存储滑块的当前值\n\n  build() {\n    Column({ space: 8 }) { // 使用 Column 布局，设置子组件之间的间距为 8vp\n      Text('block').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%') // 标题文本，字体大小为 9vp，颜色为 0xCCCCCC，上下边距为 15vp，宽度为 '90%'\n      Slider({ style: SliderStyle.OutSet, value: 40 }) // 创建一个 Slider 组件，样式为 OutSet，初始值为 40\n        .blockSize({ width: 40, height: 40 }) // 设置滑块的尺寸为 40x40vp\n        .blockBorderColor(Color.Red) // 设置滑块边框颜色为红色\n        .blockBorderWidth(5) // 设置滑块边框宽度为 5vp\n      Divider() // 分隔线，用于分隔不同的 Slider 组件部分\n      Text('step').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%') // 标题文本，字体大小为 9vp，颜色为 0xCCCCCC，上下边距为 15vp，宽度为 '90%'\n      Slider({ style: SliderStyle.InSet, value: 40, step: 10 }) // 创建一个 Slider 组件，样式为 InSet，初始值为 40，步长为 10\n        .showSteps(true) // 显示步长标记\n        .stepSize(8) // 设置步长标记的尺寸为 8vp\n        .stepColor(Color.Yellow) // 设置步长标记的颜色为黄色\n      Divider() // 分隔线，用于分隔不同的 Slider 组件部分\n      Text('track').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%') // 标题文本，字体大小为 9vp，颜色为 0xCCCCCC，上下边距为 15vp，宽度为 '90%'\n      Slider({ style: SliderStyle.InSet, value: 40 }) // 创建一个 Slider 组件，样式为 InSet，初始值为 40\n        .trackBorderRadius(2) // 设置轨道部分的圆角为 2vp\n      Divider() // 分隔线，用于分隔不同的 Slider 组件部分\n      Text('selected').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%') // 标题文本，字体大小为 9vp，颜色为 0xCCCCCC，上下边距为 15vp，宽度为 '90%'\n      Slider({ style: SliderStyle.InSet, value: 40 }) // 创建一个 Slider 组件，样式为 InSet，初始值为 40\n        .selectedBorderRadius(2) // 设置选中部分的圆角为 2vp\n      Divider() // 分隔线，用于分隔不同的 Slider 组件部分\n      Text('blockStyle').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%') // 标题文本，字体大小为 9vp，颜色为 0xCCCCCC，上下边距为 15vp，宽度为 '90%'\n      Slider({ style: SliderStyle.OutSet, value: 40 }) // 创建一个 Slider 组件，样式为 OutSet，初始值为 40\n        .blockStyle({ type: SliderBlockType.DEFAULT }) // 设置滑块样式为默认样式\n      Slider({ style: SliderStyle.OutSet, value: 40 }) // 创建一个 Slider 组件，样式为 OutSet，初始值为 40\n        .blockStyle({ type: SliderBlockType.IMAGE, image: $r('sys.media.ohos_app_icon') }) // 设置滑块样式为图片样式，图片资源为系统应用图标\n      Slider({ style: SliderStyle.OutSet, value: 40 }) // 创建一个 Slider 组件，样式为 OutSet，初始值为 40\n        .blockSize({ width: '60px', height: '60px' }) // 设置滑块的尺寸为 60x60vp\n        .blockColor(Color.Red) // 设置滑块颜色为红色\n        .blockStyle({ type: SliderBlockType.SHAPE, shape: new Path({ commands: 'M60 60 M30 30 L15 56 L45 56 Z' }) }) // 设置滑块样式为自定义形状样式，形状为自定义路径\n      Divider() // 分隔线，用于分隔不同的 Slider 组件部分\n      Text('tips').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%') // 标题文本，字体大小为 9vp，颜色为 0xCCCCCC，上下边距为 15vp，宽度为 '90%'\n      Slider({ style: SliderStyle.InSet, value: this.tipsValue }) // 创建一个 Slider 组件，样式为 InSet，初始值为状态变量 tipsValue\n        .showTips(true, this.tipsValue.toFixed()) // 显示提示信息，提示信息内容为当前滑块值\n        .onChange(value => { // 监听滑块值的变化事件\n          this.tipsValue = value // 更新状态变量 tipsValue 为当前滑块值\n        })\n    }\n  }\n}"
            },
            {
                "description": "该组件展示了多种类型的滑块（Slider）及其不同样式和方向的实现。布局宽度占据整个屏幕，通过 Column 和 Row 组件实现垂直和水平布局。滑块的样式包括 OutSet、InSet 和 NONE 三种风格，分别展示了水平和垂直方向的滑块。每个滑块组包含一个标题、滑块和显示当前值的文本组件。滑块的功能包括拖动滑块改变值、显示提示信息、显示步长等。滑块的样式和外观通过颜色、字体等属性进行自定义。",
                "code": "@Entry\n@Component\nstruct SliderExample {\n  @State outSetValueOne: number = 40 // 初始化滑块值\n  @State inSetValueOne: number = 40\n  @State noneValueOne: number = 40\n  @State outSetValueTwo: number = 40\n  @State inSetValueTwo: number = 40\n  @State vOutSetValueOne: number = 40\n  @State vInSetValueOne: number = 40\n  @State vOutSetValueTwo: number = 40\n  @State vInSetValueTwo: number = 40\n\n  build() {\n    Column({ space: 8 }) { // 主布局为垂直布局，间距为8\n      Text('outset slider').fontSize(9).fontColor(0xCCCCCC).width('90%').margin(15) // 标题文本，字体大小9，颜色0xCCCCCC，宽度90%，上下左右边距15\n      Row() { // 水平布局\n        Slider({\n          value: this.outSetValueOne, // 滑块当前值\n          min: 0, // 最小值\n          max: 100, // 最大值\n          style: SliderStyle.OutSet // 滑块风格为OutSet\n        })\n          .showTips(true) // 显示提示信息\n          .onChange((value: number, mode: SliderChangeMode) => { // 滑块值改变事件\n            this.outSetValueOne = value // 更新滑块值\n            console.info('value:' + value + 'mode:' + mode.toString()) // 打印滑块值和改变模式\n          })\n\n        Text(this.outSetValueOne.toFixed(0)).fontSize(12) // 显示滑块当前值的文本，字体大小12\n      }\n      .width('80%') // 宽度为80%\n      Row() {\n        Slider({\n          value: this.outSetValueTwo,\n          step: 10, // 步长为10\n          style: SliderStyle.OutSet\n        })\n          .showSteps(true) // 显示步长\n          .onChange((value: number, mode: SliderChangeMode) => {\n            this.outSetValueTwo = value\n            console.info('value:' + value + 'mode:' + mode.toString())\n          })\n        Text(this.outSetValueTwo.toFixed(0)).fontSize(12)\n      }\n      .width('80%')\n\n      Text('inset slider').fontSize(9).fontColor(0xCCCCCC).width('90%').margin(15)\n      Row() {\n        Slider({\n          value: this.inSetValueOne,\n          min: 0,\n          max: 100,\n          style: SliderStyle.InSet // 滑块风格为InSet\n        })\n          .blockColor('#191970') // 滑块颜色\n          .trackColor('#ADD8E6') // 轨道颜色\n          .selectedColor('#4169E1') // 选中部分颜色\n          .showTips(true)\n          .onChange((value: number, mode: SliderChangeMode) => {\n            this.inSetValueOne = value\n            console.info('value:' + value + 'mode:' + mode.toString())\n          })\n        Text(this.inSetValueOne.toFixed(0)).fontSize(12)\n      }\n      .width('80%')\n      Row() {\n        Slider({\n          value: this.inSetValueTwo,\n          step: 10,\n          style: SliderStyle.InSet\n        })\n          .blockColor('#191970')\n          .trackColor('#ADD8E6')\n          .selectedColor('#4169E1')\n          .showSteps(true)\n          .onChange((value: number, mode: SliderChangeMode) => {\n            this.inSetValueTwo = value\n            console.info('value:' + value + 'mode:' + mode.toString())\n          })\n        Text(this.inSetValueTwo.toFixed(0)).fontSize(12)\n      }\n      .width('80%')\n\n      Text('none slider').fontSize(9).fontColor(0xCCCCCC).width('90%').margin(15)\n      Row() {\n        Slider({\n          value: this.noneValueOne,\n          min: 0,\n          max: 100,\n          style: SliderStyle.NONE // 滑块风格为NONE\n        })\n          .blockColor('#191970')\n          .trackColor('#ADD8E6')\n          .selectedColor('#4169E1')\n          .showTips(true)\n          .onChange((value: number, mode: SliderChangeMode) => {\n            this.noneValueOne = value\n            console.info('value:' + value + 'mode:' + mode.toString())\n          })\n        Text(this.noneValueOne.toFixed(0)).fontSize(12)\n      }\n      .width('80%')\n\n      Row() {\n        Column() {\n          Text('vertical outset slider').fontSize(9).fontColor(0xCCCCCC).width('50%').margin(15)\n          Row() {\n            Text().width('10%')\n            Slider({\n              value: this.vOutSetValueOne,\n              style: SliderStyle.OutSet,\n              direction: Axis.Vertical // 垂直方向滑块\n            })\n              .blockColor('#191970')\n              .trackColor('#ADD8E6')\n              .selectedColor('#4169E1')\n              .showTips(true)\n              .onChange((value: number, mode: SliderChangeMode) => {\n                this.vOutSetValueOne = value\n                console.info('value:' + value + 'mode:' + mode.toString())\n              })\n            Slider({\n              value: this.vOutSetValueTwo,\n              step: 10,\n              style: SliderStyle.OutSet,\n              direction: Axis.Vertical\n            })\n              .blockColor('#191970')\n              .trackColor('#ADD8E6')\n              .selectedColor('#4169E1')\n              .showSteps(true)\n              .onChange((value: number, mode: SliderChangeMode) => {\n                this.vOutSetValueTwo = value\n                console.info('value:' + value + 'mode:' + mode.toString())\n              })\n          }\n        }.width('50%').height(300)\n\n        Column() {\n          Text('vertical inset slider').fontSize(9).fontColor(0xCCCCCC).width('50%').margin(15)\n          Row() {\n            Slider({\n              value: this.vInSetValueOne,\n              style: SliderStyle.InSet,\n              direction: Axis.Vertical,\n              reverse: true // 反向滑块\n            })\n              .showTips(true)\n              .onChange((value: number, mode: SliderChangeMode) => {\n                this.vInSetValueOne = value\n                console.info('value:' + value + 'mode:' + mode.toString())\n              })\n            Slider({\n              value: this.vInSetValueTwo,\n              step: 10,\n              style: SliderStyle.InSet,\n              direction: Axis.Vertical,\n              reverse: true\n            })\n              .showSteps(true)\n              .onChange((value: number, mode: SliderChangeMode) => {\n                this.vInSetValueTwo = value\n                console.info('value:' + value + 'mode:' + mode.toString())\n              })\n          }\n        }.width('50%').height(300)\n      }\n    }.width('100%') // 主布局宽度为100%\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "DownloadFileButton": {
        "description": "下载文件按钮，通过点击该下载按钮，可以获取到当前应用在Download公共目录中所属的存储路径。",
        "details": null,
        "interfaces": [
            {
                "description": "Downloadbutton(contentOptions?: DownloadContentOptions, styleOptions?: DownloadStyleOptions)",
                "params": {
                    "contentOptions": {
                        "type": "DownloadContentOptions",
                        "required": false,
                        "description": "创建包含指定元素内容的下载按钮。"
                    },
                    "styleOptions": {
                        "type": "DownloadStyleOptions",
                        "required": false,
                        "description": "创建包含指定元素样式的下载按钮。"
                    }
                }
            }
        ],
        "attributes": {
            "contentOptions": {
                "description": "下载文件按钮中显示的内容。",
                "params": {
                    "icon": {
                        "type": "DownloadIconStyle",
                        "required": false,
                        "description": "设置下载按钮的图标风格。"
                    },
                    "text": {
                        "type": "DownloadDescription",
                        "required": false,
                        "description": "设置下载按钮的文本描述。"
                    }
                }
            },
            "styleOptions": {
                "description": "下载文件按钮中图标和文字的样式。",
                "params": {
                    "iconSize": {
                        "type": "Dimension",
                        "required": false,
                        "description": "下载控件上图标的尺寸。",
                        "default": "16vp"
                    },
                    "layoutDirection": {
                        "type": "DownloadLayoutDirection",
                        "required": false,
                        "description": "下载控件上图标和文字分布的方向。",
                        "default": "DownloadLayoutDirection.HORIZONTAL"
                    },
                    "fontSize": {
                        "type": "Dimension",
                        "required": false,
                        "description": "下载控件上文字的尺寸。",
                        "default": "16fp"
                    },
                    "fontStyle": {
                        "type": "FontStyle",
                        "required": false,
                        "description": "下载控件上文字的样式。",
                        "default": "FontStyle.Normal"
                    },
                    "fontWeight": {
                        "type": [
                            "number",
                            "FontWeight",
                            "string"
                        ],
                        "required": false,
                        "description": "下载控件上文字粗细。",
                        "default": "FontWeight.Medium"
                    },
                    "fontFamily": {
                        "type": [
                            "string",
                            "Resource"
                        ],
                        "required": false,
                        "description": "下载控件上文字的字体。",
                        "default": "HarmonyOS Sans"
                    },
                    "fontColor": {
                        "type": "ResourceColor",
                        "required": false,
                        "description": "下载控件上文字的颜色。",
                        "default": "#ffffffff"
                    },
                    "iconColor": {
                        "type": "ResourceColor",
                        "required": false,
                        "description": "下载控件上图标的颜色。",
                        "default": "#ffffffff"
                    },
                    "textIconSpace": {
                        "type": "Dimension",
                        "required": false,
                        "description": "下载控件中图标和文字的间距。",
                        "default": "4vp"
                    }
                }
            }
        },
        "events": {
            "onClick": {
                "description": "点击事件。",
                "params": {}
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件实现了一个下载文件按钮的功能。布局上，按钮位于一个垂直布局的容器中，按钮的宽度、高度、边距、背景颜色、边框样式、字体样式等都进行了详细的设置。按钮的功能包括点击事件，点击后会触发下载操作。\n\n布局属性：\n- 按钮的宽度、高度通过 `constraintSize` 设置为默认值，具体大小由内容决定。\n- 按钮的边距通过 `padding` 设置为上下 12vp，左右 24vp。\n- 按钮的背景颜色通过 `backgroundColor` 设置为 '#007dff'。\n- 按钮的边框样式通过 `borderStyle` 设置为 `BorderStyle.Dotted`，边框宽度为 0，边框颜色为空。\n- 按钮的圆角通过 `borderRadius` 设置为 '24vp'。\n- 按钮的位置通过 `position` 和 `offset` 设置为 (0, 0)。\n\n组件的样式和外观：\n- 按钮的图标大小通过 `iconSize` 设置为 '16vp'。\n- 按钮的布局方向通过 `layoutDirection` 设置为 `DownloadLayoutDirection.HORIZONTAL`，即水平布局。\n- 按钮的字体大小通过 `fontSize` 设置为 '16vp'。\n- 按钮的字体样式通过 `fontStyle` 设置为 `FontStyle.Normal`。\n- 按钮的字体粗细通过 `fontWeight` 设置为 `FontWeight.Medium`。\n- 按钮的字体家族通过 `fontFamily` 设置为 'HarmonyOS Sans'。\n- 按钮的字体颜色和图标颜色通过 `fontColor` 和 `iconColor` 设置为 '#ffffffff'，即白色。\n- 按钮的文本和图标之间的间距通过 `textIconSpace` 设置为 '4vp'。\n\n组件的排列和嵌套关系：\n- 按钮位于一个 `Column` 布局中，`Column` 是垂直布局容器。\n\n组件的功能和交互：\n- 按钮的点击事件通过 `onClick` 绑定，点击后会调用 `downloadAction` 方法。\n- `downloadAction` 方法中，通过 `picker.DocumentViewPicker` 实现文件下载功能，下载完成后会在控制台输出下载结果。",
                "code": "import { picker } from '@kit.CoreFileKit'; // 导入文件选择器模块\nimport { BusinessError } from '@kit.BasicServicesKit'; // 导入业务错误模块\nimport { DownloadFileButton, DownloadLayoutDirection } from '@kit.ArkUI'; // 导入下载按钮和布局方向模块\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column() {\n      DownloadFileButton({\n        contentOptions: {\n          // icon: DownloadIconStyle.FULL_FILLED, // 图标样式（注释掉）\n          // text: DownloadDescription.DOWNLOAD // 文本内容（注释掉）\n        },\n        styleOptions: {\n          iconSize: '16vp', // 图标大小\n          layoutDirection: DownloadLayoutDirection.HORIZONTAL, // 布局方向：水平\n          fontSize: '16vp', // 字体大小\n          fontStyle: FontStyle.Normal, // 字体样式：正常\n          fontWeight: FontWeight.Medium, // 字体粗细：中等\n          fontFamily: 'HarmonyOS Sans', // 字体家族\n          fontColor: '#ffffffff', // 字体颜色：白色\n          iconColor: '#ffffffff', // 图标颜色：白色\n          textIconSpace: '4vp' // 文本和图标之间的间距\n        }\n      })\n        .backgroundColor('#007dff') // 背景颜色：蓝色\n        .borderStyle(BorderStyle.Dotted) // 边框样式：虚线（实际未显示）\n        .borderWidth(0) // 边框宽度：0\n        .borderColor('') // 边框颜色：空\n        .borderRadius('24vp') // 边框圆角：24vp\n        .position({ x: 0, y: 0 }) // 位置：(0, 0)\n        .markAnchor({ x: 0, y: 0 }) // 锚点：(0, 0)\n        .offset({ x: 0, y: 0 }) // 偏移：(0, 0)\n        .constraintSize({}) // 约束尺寸：默认\n        .padding({\n          top: '12vp', // 上边距：12vp\n          bottom: '12vp', // 下边距：12vp\n          left: '24vp', // 左边距：24vp\n          right: '24vp' // 右边距：24vp\n        })\n        .onClick(() => {\n          this.downloadAction(); // 点击事件：调用下载操作\n        })\n    }\n  }\n\n  downloadAction() {\n    try {\n      const document = new picker.DocumentSaveOptions(); // 创建文档保存选项\n      document.pickerMode = picker.DocumentPickerMode.DOWNLOAD; // 设置选择器模式为下载\n      new picker.DocumentViewPicker().save(document, (err: BusinessError, result: Array<string>) => {\n        if (err) {\n          return; // 如果有错误，直接返回\n        }\n        console.info(`downloadAction result:  ${JSON.stringify(result)}`); // 输出下载结果\n      });\n    } catch (e) {\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "ProgressButton": {
        "description": "文本下载按钮，可显示具体下载进度。",
        "interfaces": [
            {
                "description": "ProgressButton({progress: number, content: string, progressButtonWidth?: Length, clickCallback: () => void, enable: boolean})",
                "params": {
                    "progress": {
                        "type": "number",
                        "required": true,
                        "description": "下载按钮的当前进度值。"
                    },
                    "content": {
                        "type": "string",
                        "required": true,
                        "description": "下载按钮的文本。"
                    },
                    "progressButtonWidth": {
                        "type": [
                            "Length"
                        ],
                        "required": false,
                        "description": "下载按钮的宽度。",
                        "default": "44"
                    },
                    "clickCallback": {
                        "type": "() => void",
                        "required": true,
                        "description": "下载按钮的点击回调。"
                    },
                    "enable": {
                        "type": "boolean",
                        "required": true,
                        "description": "下载按钮是否可以点击。enable为true时，表示可以点击。enable为false时，表示不可点击。"
                    }
                }
            }
        ],
        "attributes": {},
        "events": {},
        "is_common_attrs": true,
        "examples": [
            {
                "description": "该组件通过 Column 布局实现了一个展示下载按钮及其进度条的界面。布局宽度占据整个屏幕，高度自适应内容，内边距为上下 20vp。组件的垂直方向上被分为两个部分：一个文本标签和一个按钮。文本标签显示“下载按钮”，按钮用于触发下载操作。按钮的样式包括背景颜色、边框圆角、宽度和高度等属性，支持不同的样式展示。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发下载操作，按钮也可以在启用或禁用状态下进行展示。\n\n进度条按钮通过 ProgressButton 组件实现，显示下载进度。进度条按钮的样式包括宽度、高度、背景颜色等属性，支持不同的样式展示。进度条按钮的功能包括点击事件和状态效果，用户可以通过点击进度条按钮暂停或继续下载操作。\n\n整个布局通过 Column 布局保证按钮和进度条在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { ProgressButton } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct Index {\n  @State halfProgress: number = 0 // 进度条的进度值，初始值为0\n  @State smallProgress: number = 0 // 另一个进度条的进度值，初始值为0\n  @State bigProgress: number = 0 // 另一个进度条的进度值，初始值为0\n  @State textState1: string = '' // 进度条按钮的文本内容，初始值为空字符串\n  @State isRunning1: boolean = false // 进度条是否在运行，初始值为false\n  @State enableState1: boolean = true // 进度条按钮是否启用，初始值为true\n  @State progressState: Visibility = Visibility.None // 进度条按钮的可见性状态，初始值为不可见\n  @State ButtonState: Visibility = Visibility.Visible // 按钮的可见性状态，初始值为可见\n  @State buttonText: string = '下载' // 按钮的文本内容，初始值为“下载”\n  @State buttonEnable: boolean = true // 按钮是否启用，初始值为true\n  @State isEnd: boolean = false // 下载是否结束，初始值为false\n\n  build() {\n    Column({space: 20}) { // 创建一个垂直布局，子组件之间的间距为20vp\n      Text('下载按钮') // 创建一个文本标签，显示“下载按钮”\n      Button(this.buttonText) // 创建一个按钮，按钮文本为buttonText的值\n        .fontSize($r('sys.float.ohos_id_text_size_button3')) // 设置按钮文本的字体大小\n        .fontWeight(FontWeight.Medium) // 设置按钮文本的字体粗细\n        .fontColor($r('sys.color.ohos_id_color_emphasize')) // 设置按钮文本的颜色\n        .padding({left: 8, right: 8}) // 设置按钮的内边距\n        .opacity(this.buttonEnable? 1: 0.4) // 设置按钮的透明度，根据buttonEnable的值决定\n        .enabled(this.buttonEnable) // 设置按钮是否启用，根据buttonEnable的值决定\n        .height(28) // 设置按钮的高度\n        .borderRadius(14) // 设置按钮的边框圆角\n        .width(60) // 设置按钮的宽度\n        .backgroundColor($r(\"sys.color.ohos_id_color_button_normal\")) // 设置按钮的背景颜色\n        .onClick(() => { // 设置按钮的点击事件\n          if(!this.isEnd) { // 如果下载未结束\n            this.buttonText = '等待中' // 设置按钮文本为“等待中”\n            let timer1 = setInterval(() => { // 创建一个定时器\n              this.progressState = Visibility.Visible // 设置进度条按钮的可见性为可见\n              this.ButtonState = Visibility.None // 设置按钮的可见性为不可见\n              clearInterval(timer1) // 清除定时器\n              this.isRunning1 = true // 设置进度条为运行状态\n              let timer = setInterval(() => { // 创建一个定时器\n                if (this.isRunning1) { // 如果进度条在运行\n                  if (this.halfProgress === 100) { // 如果进度条的进度值为100\n                    this.isEnd = true // 设置下载结束\n                  } else { // 如果进度条的进度值不为100\n                    this.halfProgress++ // 进度条的进度值加1\n                    if (this.halfProgress === 100) { // 如果进度条的进度值为100\n                      this.textState1 = '安装中' // 设置进度条按钮的文本为“安装中”\n                      this.enableState1 = false // 设置进度条按钮为不可用\n                      this.ButtonState = Visibility.Visible // 设置按钮的可见性为可见\n                      this.progressState = Visibility.None // 设置进度条按钮的可见性为不可见\n                      this.buttonEnable = false // 设置按钮为不可用\n                      this.buttonText = '安装中' // 设置按钮的文本为“安装中”\n                      let timer2 = setInterval(() => { // 创建一个定时器\n                        this.buttonText = '打开' // 设置按钮的文本为“打开”\n                        this.buttonEnable = true // 设置按钮为可用\n                        this.isEnd = true // 设置下载结束\n                        clearInterval(timer2) // 清除定时器\n                      }, 2000) // 定时器的时间间隔为2000毫秒\n                    }\n                    console.info('x progress++ = ' + this.halfProgress) // 输出进度条的进度值\n                  }\n                } else { // 如果进度条不在运行\n                  console.info('x isRunning = ' + false) // 输出进度条不在运行\n                  clearInterval(timer) // 清除定时器\n                }\n              }, 100) // 定时器的时间间隔为100毫秒\n            }, 2000) // 定时器的时间间隔为2000毫秒\n          }\n        }).visibility(this.ButtonState) // 设置按钮的可见性\n\n      ProgressButton({ // 创建一个进度条按钮\n        progress: this.halfProgress, // 进度条的进度值\n        progressButtonWidth: \"60\", // 进度条按钮的宽度\n        content: this.textState1, // 进度条按钮的文本内容\n        enable: this.enableState1, // 进度条按钮是否启用\n        clickCallback: () => { // 设置进度条按钮的点击事件\n          if (this.isRunning1 && this.halfProgress < 100) { // 如果进度条在运行且进度值小于100\n            this.textState1 = '继续' // 设置进度条按钮的文本为“继续”\n          }\n          this.isRunning1 = !this.isRunning1 // 切换进度条的运行状态\n          let timer = setInterval(() => { // 创建一个定时器\n            if (this.isRunning1) { // 如果进度条在运行\n              if (this.halfProgress === 100) { // 如果进度条的进度值为100\n              } else { // 如果进度条的进度值不为100\n                this.halfProgress++ // 进度条的进度值加1\n                if (this.halfProgress === 100) { // 如果进度条的进度值为100\n                  this.textState1 = '安装中' // 设置进度条按钮的文本为“安装中”\n                  this.enableState1 = false // 设置进度条按钮为不可用\n                  this.ButtonState = Visibility.Visible // 设置按钮的可见性为可见\n                  this.progressState = Visibility.None // 设置进度条按钮的可见性为不可见\n                  this.buttonEnable = false // 设置按钮为不可用\n                  this.buttonText = '安装中' // 设置按钮的文本为“安装中”\n                  let timer2 = setInterval(() => { // 创建一个定时器\n                    this.buttonText = '打开' // 设置按钮的文本为“打开”\n                    this.buttonEnable = true // 设置按钮为可用\n                    this.isEnd = true // 设置下载结束\n                    clearInterval(timer2) // 清除定时器\n                  }, 2000) // 定时器的时间间隔为2000毫秒\n                }\n                console.info('x progress++ = ' + this.halfProgress) // 输出进度条的进度值\n              }\n            } else { // 如果进度条不在运行\n              console.info('x isRunning = ' + false) // 输出进度条不在运行\n              clearInterval(timer) // 清除定时器\n            }\n          }, 100) // 定时器的时间间隔为100毫秒\n        }\n      }).visibility(this.progressState) // 设置进度条按钮的可见性\n    }.alignItems(HorizontalAlign.Center).width('100%') // 设置布局的对齐方式为居中，宽度为100%\n  }\n}"
            }
        ]
    },
    "SegmentButton": {
        "description": "分段按钮组件，包含页签类分段按钮、单选类分段按钮、多选类分段按钮。",
        "details": "该组件及其子组件从 API Version 11 开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "SegmentButton({ options: SegmentButtonOptions, selectedIndexes: number[] })",
                "params": {
                    "options": {
                        "type": "SegmentButtonOptions",
                        "required": true,
                        "description": "分段按钮选项。"
                    },
                    "selectedIndexes": {
                        "type": "number[]",
                        "required": true,
                        "description": "分段按钮的选中项编号，第一项的编号为0，之后顺序增加。"
                    }
                }
            }
        ],
        "attributes": {
            "options": {
                "description": "分段按钮选项类，用于为分段按钮提供初始数据和自定义属性。",
                "params": {
                    "type": {
                        "type": [
                            "tab",
                            "capsule"
                        ],
                        "description": "分段按钮的类型。"
                    },
                    "multiply": {
                        "type": "boolean",
                        "description": "是否可以多选。"
                    },
                    "buttons": {
                        "type": "SegmentButtonItemOptionsArray",
                        "description": "按钮信息，包括图标和文本信息。"
                    },
                    "fontColor": {
                        "type": "ResourceColor",
                        "description": "按钮未选中态的文本颜色。",
                        "default": "$r('sys.color.ohos_id_color_text_secondary')"
                    },
                    "selectedFontColor": {
                        "type": "ResourceColor",
                        "description": "按钮选中态的文本颜色。",
                        "default": {
                            "tab": "$r('sys.color.ohos_id_color_text_primary')",
                            "capsule": "$r('sys.color.ohos_id_color_foreground_contrary')"
                        }
                    },
                    "fontSize": {
                        "type": "DimensionNoPercentage",
                        "description": "按钮未选中态的字体大小（不支持百分比设置）。",
                        "default": "$r('sys.float.ohos_id_text_size_body2')"
                    },
                    "selectedFontSize": {
                        "type": "DimensionNoPercentage",
                        "description": "按钮选中态的字体大小（不支持百分比设置）。",
                        "default": "$r('sys.float.ohos_id_text_size_body2')"
                    },
                    "fontWeight": {
                        "type": "FontWeight",
                        "description": "按钮未选中态的字体粗细。",
                        "default": "FontWeight.Regular"
                    },
                    "selectedFontWeight": {
                        "type": "FontWeight",
                        "description": "按钮选中态的字体粗细。",
                        "default": "FontWeight.Medium"
                    },
                    "backgroundColor": {
                        "type": "ResourceColor",
                        "description": "底板颜色。",
                        "default": "$r('sys.color.ohos_id_color_button_normal')"
                    },
                    "selectedBackgroundColor": {
                        "type": "ResourceColor",
                        "description": "按钮选中态底板颜色。",
                        "default": {
                            "tab": "$r('sys.color.ohos_id_color_foreground_contrary')",
                            "capsule": "$r('sys.color.ohos_id_color_emphasize')"
                        }
                    },
                    "imageSize": {
                        "type": "SizeOptions",
                        "description": "图片尺寸。",
                        "default": {
                            "width": 24,
                            "height": 24
                        }
                    },
                    "buttonPadding": {
                        "type": [
                            "Padding",
                            "Dimension"
                        ],
                        "description": "按钮内边距。",
                        "default": {
                            "icon": {
                                "top": 4,
                                "right": 8,
                                "bottom": 4,
                                "left": 8
                            },
                            "text": {
                                "top": 6,
                                "right": 8,
                                "bottom": 6,
                                "left": 8
                            }
                        }
                    },
                    "textPadding": {
                        "type": [
                            "Padding",
                            "Dimension"
                        ],
                        "description": "文本内边距。",
                        "default": 0
                    },
                    "localizedButtonPadding12+": {
                        "type": "LocalizedPadding",
                        "description": "按钮内边距。",
                        "default": {
                            "icon": {
                                "top": "LengthMetrics.vp(4)",
                                "end": "LengthMetrics.vp(8)",
                                "bottom": "LengthMetrics.vp(4)",
                                "start": "LengthMetrics.vp(8)"
                            },
                            "text": {
                                "top": "LengthMetrics.vp(6)",
                                "end": "LengthMetrics.vp(8)",
                                "bottom": "LengthMetrics.vp(6)",
                                "start": "LengthMetrics.vp(8)"
                            }
                        }
                    },
                    "localizedTextPadding12+": {
                        "type": "LocalizedPadding",
                        "description": "文本内边距。",
                        "default": 0
                    },
                    "direction12+": {
                        "type": "Direction",
                        "description": "布局方向。",
                        "default": "Direction.Auto"
                    },
                    "backgroundBlurStyle": {
                        "type": "BlurStyle",
                        "description": "背景模糊材质。",
                        "default": "BlurStyle.NONE"
                    }
                }
            }
        },
        "events": {},
        "rules": [
            "分段按钮组件不支持通用属性。",
            "分段按钮组件使用当前区域可使用的最大宽度做为组件宽度，并且根据按钮个数平均分配每个按钮宽度；分段按钮组件高度根据按钮内容（文本及图片）自动适应，其最小高度为28vp。"
        ],
        "examples": [
            {
                "description": "该组件通过Row和Column布局实现了一个包含SegmentButton和多个Button的界面。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为多个部分，每个部分包含一个SegmentButton和一组操作按钮。SegmentButton的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\nSegmentButton的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。操作按钮组之间通过Column组件进行分隔。操作按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过Row和Column布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import {\n  SegmentButton,\n  SegmentButtonOptions,\n  SegmentButtonItemOptionsArray,\n  SegmentButtonItemTuple,\n  SegmentButtonItemOptions\n} from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  // 定义SegmentButton的选项，使用胶囊样式，按钮文本为'1'到'5'，不支持多选，背景模糊样式为BACKGROUND_THICK\n  @State singleSelectCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [{ text: '1' }, { text: '2' }, { text: '3' },\n      { text: '4' }, { text: '5' }] as SegmentButtonItemTuple,\n    multiply: false,\n    backgroundBlurStyle: BlurStyle.BACKGROUND_THICK\n  })\n  // 定义SegmentButton的选中索引，初始选中第一个按钮\n  @State capsuleSelectedIndexes: number[] = [0]\n\n  build() {\n    Row() {\n      Column() {\n        Column({ space: 10 }) {\n          // 创建SegmentButton组件，传入选项和选中索引\n          SegmentButton({ options: this.singleSelectCapsuleOptions,\n            selectedIndexes: $capsuleSelectedIndexes })\n          // 创建按钮，点击时删除SegmentButton的第一个按钮\n          Button(\"删除第一个按钮\")\n            .onClick(() => {\n              this.singleSelectCapsuleOptions.buttons.shift()\n            })\n          // 创建按钮，点击时删除SegmentButton的最后一个按钮\n          Button(\"删除最后一个按钮\")\n            .onClick(() => {\n              this.singleSelectCapsuleOptions.buttons.pop()\n            })\n          // 创建按钮，点击时在SegmentButton末尾增加一个按钮\n          Button(\"末尾增加一个按钮push\")\n            .onClick(() => {\n              this.singleSelectCapsuleOptions.buttons.push({ text: 'push' })\n            })\n          // 创建按钮，点击时在SegmentButton开头增加一个按钮\n          Button(\"开头增加一个按钮unshift\")\n            .onClick(() => {\n              this.singleSelectCapsuleOptions.buttons.unshift(({ text: 'unshift' }))\n            })\n          // 创建按钮，点击时将SegmentButton的第2、3个按钮替换为'splice1'和'splice2'\n          Button(\"将按钮2、3替换为splice1、splice2\")\n            .onClick(() => {\n              this.singleSelectCapsuleOptions.buttons.splice(1, 2, new SegmentButtonItemOptions({\n                text: 'splice1'\n              }), new SegmentButtonItemOptions({ text: 'splice2' }))\n            })\n          // 创建按钮，点击时更改SegmentButton的所有按钮文字为'a'到'e'\n          Button(\"更改所有按钮文字\")\n            .onClick(() => {\n              this.singleSelectCapsuleOptions.buttons =\n              SegmentButtonItemOptionsArray.create([{ text: 'a' }, { text: 'b' },\n                { text: 'c' }, { text: 'd' }, { text: 'e' }])\n            })\n        }.width('90%') // 设置Column的宽度为90%\n      }.width('100%') // 设置Column的宽度为100%\n    }.height('100%') // 设置Row的高度为100%\n  }\n}"
            },
            {
                "description": "该组件通过Flex布局实现了一个展示多种类型按钮（如页签按钮、单选按钮、多选按钮、图标按钮、图标文本按钮）及其状态效果的界面。布局宽度占据整个屏幕，高度设为100%，内边距为左右100%、顶部100%。组件的垂直方向上被分为多个部分，每个部分包含一组按钮。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Flex组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过Flex布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// 导入所需的组件和类型\nimport {\n  ItemRestriction,\n  SegmentButton,\n  SegmentButtonItemTuple,\n  SegmentButtonOptions,\n  SegmentButtonTextItem\n} from '@kit.ArkUI';\n\n// 主入口组件\n@Entry\n@Component\nstruct Index {\n  // 定义页签按钮的选项\n  @State tabOptions: SegmentButtonOptions = SegmentButtonOptions.tab({\n    buttons: [{ text: '页签按钮1' }, { text: '页签按钮2' }, { text: '页签按钮3' }] as ItemRestriction<SegmentButtonTextItem>,\n    backgroundBlurStyle: BlurStyle.BACKGROUND_THICK\n  })\n\n  // 定义单选胶囊按钮的选项\n  @State singleSelectCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [{ text: '单选按钮1' }, { text: '单选按钮2' }, { text: '单选按钮3' }] as SegmentButtonItemTuple,\n    multiply: false,\n    backgroundBlurStyle: BlurStyle.BACKGROUND_THICK\n  })\n\n  // 定义多选胶囊按钮的选项\n  @State multiplySelectCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [{ text: '多选按钮1' }, { text: '多选按钮2' }, { text: '多选按钮3' }] as SegmentButtonItemTuple,\n    multiply: true\n  })\n\n  // 定义图标胶囊按钮的选项\n  @State iconCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') }\n    ] as SegmentButtonItemTuple,\n    multiply: false,\n    backgroundBlurStyle: BlurStyle.BACKGROUND_THICK\n  })\n\n  // 定义图标文本胶囊按钮的选项\n  @State iconTextCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [\n      { text: '图标1', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标2', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标3', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标4', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标5', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') }\n    ] as SegmentButtonItemTuple,\n    multiply: true\n  })\n\n  // 定义页签按钮的选中索引\n  @State tabSelectedIndexes: number[] = [1]\n\n  // 定义单选胶囊按钮的选中索引\n  @State singleSelectCapsuleSelectedIndexes: number[] = [0]\n\n  // 定义多选胶囊按钮的选中索引\n  @State multiplySelectCapsuleSelectedIndexes: number[] = [0, 1]\n\n  // 定义单选图标胶囊按钮的选中索引\n  @State singleSelectIconCapsuleSelectedIndexes: number[] = [3]\n\n  // 定义多选图标文本胶囊按钮的选中索引\n  @State multiplySelectIconTextCapsuleSelectedIndexes: number[] = [1, 2]\n\n  // 构建UI\n  build() {\n    Row() {\n      Column() {\n        Column({ space: 25 }) {\n          // 创建页签按钮\n          SegmentButton({ options: this.tabOptions, selectedIndexes: $tabSelectedIndexes })\n\n          // 创建单选胶囊按钮\n          SegmentButton({ options: this.singleSelectCapsuleOptions, selectedIndexes: $singleSelectCapsuleSelectedIndexes })\n\n          // 创建多选胶囊按钮\n          SegmentButton({ options: this.multiplySelectCapsuleOptions, selectedIndexes: $multiplySelectCapsuleSelectedIndexes })\n\n          // 创建单选图标胶囊按钮\n          SegmentButton({ options: this.iconCapsuleOptions, selectedIndexes: $singleSelectIconCapsuleSelectedIndexes })\n\n          // 创建多选图标文本胶囊按钮\n          SegmentButton({ options: this.iconTextCapsuleOptions, selectedIndexes: $multiplySelectIconTextCapsuleSelectedIndexes })\n        }.width('90%')\n      }.width('100%')\n    }.height('100%')\n  }\n}"
            },
            {
                "description": "该组件通过Row和Column布局实现了一个展示多种类型SegmentButton的界面。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为多个部分，每个部分包含一组SegmentButton。每个SegmentButton组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\nSegmentButton的样式包括背景颜色、字体颜色、字体大小、字体粗细、按钮内边距、图标大小等属性，支持不同的样式展示。按钮组之间通过Column组件进行分隔。SegmentButton的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在选中或未选中状态下进行展示。\n整个布局通过Row和Column布局保证SegmentButton在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { LengthMetrics, SegmentButton, SegmentButtonOptions } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct Index {\n  // 定义SegmentButton的选项，包括按钮文本、方向、背景颜色、选中背景颜色、文本内边距等\n  @State tabOptions: SegmentButtonOptions = SegmentButtonOptions.tab({\n    buttons: [{ text: '页签按钮1' }, { text: '页签按钮2' }, { text: '页签按钮3' }],\n    direction: Direction.Rtl, // 按钮方向为从右到左\n    backgroundColor: Color.Green, // 按钮背景颜色为绿色\n    selectedBackgroundColor: Color.Orange, // 选中按钮背景颜色为橙色\n    localizedTextPadding: {\n      end: LengthMetrics.vp(10), // 文本右边距为10vp\n      start: LengthMetrics.vp(10) // 文本左边距为10vp\n    },\n  })\n\n  // 定义单选胶囊按钮的选项，包括按钮文本、方向、字体颜色、选中字体颜色、背景模糊样式等\n  @State singleSelectCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [{ text: '单选按钮1' }, { text: '单选按钮2' }, { text: '单选按钮3' }],\n    multiply: false, // 单选模式\n    direction: Direction.Rtl, // 按钮方向为从右到左\n    fontColor: Color.Black, // 按钮字体颜色为黑色\n    selectedFontColor: Color.Yellow, // 选中按钮字体颜色为黄色\n    backgroundBlurStyle: BlurStyle.BACKGROUND_THICK // 背景模糊样式为厚\n  })\n\n  // 定义多选胶囊按钮的选项，包括按钮文本、方向、字体大小、选中字体大小、字体粗细、选中字体粗细等\n  @State multiplySelectCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [{ text: '多选按钮1' }, { text: '多选按钮2' }, { text: '多选按钮3' }],\n    multiply: true, // 多选模式\n    direction: Direction.Rtl, // 按钮方向为从右到左\n    fontSize: 18, // 按钮字体大小为18\n    selectedFontSize: 18, // 选中按钮字体大小为18\n    fontWeight: FontWeight.Bolder, // 按钮字体粗细为更粗\n    selectedFontWeight: FontWeight.Lighter, // 选中按钮字体粗细为更细\n  })\n\n  // 定义图标胶囊按钮的选项，包括按钮图标、方向、图标大小、按钮内边距、背景模糊样式等\n  @State iconCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') }\n    ],\n    multiply: false, // 单选模式\n    direction: Direction.Rtl, // 按钮方向为从右到左\n    imageSize: { width: 40, height: 40 }, // 图标大小为40x40\n    localizedButtonPadding: {\n      end: LengthMetrics.vp(10), // 按钮右边距为10vp\n      start: LengthMetrics.vp(10) // 按钮左边距为10vp\n    },\n    backgroundBlurStyle: BlurStyle.BACKGROUND_THICK // 背景模糊样式为厚\n  })\n\n  // 定义图标文本胶囊按钮的选项，包括按钮文本、图标、方向、图标大小等\n  @State iconTextCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [\n      { text: '图标1', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标2', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标3', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标4', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标5', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') }\n    ],\n    multiply: true, // 多选模式\n    direction: Direction.Rtl, // 按钮方向为从右到左\n    imageSize: { width: 10, height: 10 }, // 图标大小为10x10\n  })\n\n  // 定义各个SegmentButton的选中索引\n  @State tabSelectedIndexes: number[] = [0]\n  @State singleSelectCapsuleSelectedIndexes: number[] = [0]\n  @State multiplySelectCapsuleSelectedIndexes: number[] = [0, 1]\n  @State singleSelectIconCapsuleSelectedIndexes: number[] = [3]\n  @State multiplySelectIconTextCapsuleSelectedIndexes: number[] = [1, 2]\n\n  build() {\n    Row() {\n      Column() {\n        Column({ space: 20 }) {\n          // 创建SegmentButton，绑定选项和选中索引\n          SegmentButton({ options: this.tabOptions, selectedIndexes: $tabSelectedIndexes })\n          SegmentButton({\n            options: this.singleSelectCapsuleOptions,\n            selectedIndexes: $singleSelectCapsuleSelectedIndexes\n          })\n          SegmentButton({\n            options: this.multiplySelectCapsuleOptions,\n            selectedIndexes: $multiplySelectCapsuleSelectedIndexes\n          })\n          SegmentButton({\n            options: this.iconCapsuleOptions,\n            selectedIndexes: $singleSelectIconCapsuleSelectedIndexes\n          })\n          SegmentButton({\n            options: this.iconTextCapsuleOptions,\n            selectedIndexes: $multiplySelectIconTextCapsuleSelectedIndexes\n          })\n        }.width('90%') // 设置Column的宽度为90%\n      }.width('100%') // 设置Column的宽度为100%\n    }.height('100%') // 设置Row的高度为100%\n  }\n}"
            },
            {
                "description": "该组件通过Flex布局实现了一个展示多种类型按钮（如页签按钮、单选按钮、多选按钮、图标按钮、图标文本按钮）及其状态效果的界面。布局宽度占据整个屏幕，高度设为100%，内边距为默认值。组件的垂直方向上被分为多个部分，每个部分包含一组按钮。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Flex组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过Flex布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import {\n  ItemRestriction,\n  SegmentButton,\n  SegmentButtonItemTuple,\n  SegmentButtonOptions,\n  SegmentButtonTextItem\n} from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  // 定义页签按钮的选项，包括按钮文本、背景颜色、选中背景颜色、文本内边距等\n  @State tabOptions: SegmentButtonOptions = SegmentButtonOptions.tab({\n    buttons: [{ text: '页签按钮1' }, { text: '页签按钮2' }, { text: '页签按钮3' }] as ItemRestriction<SegmentButtonTextItem>,\n    backgroundColor: Color.Green, // 按钮背景颜色为绿色\n    selectedBackgroundColor: Color.Orange, // 选中按钮背景颜色为橙色\n    textPadding: { top: 10, right: 10, bottom: 10, left: 10 }, // 文本内边距为10\n  })\n\n  // 定义单选胶囊按钮的选项，包括按钮文本、是否多选、字体颜色、选中字体颜色、背景模糊样式等\n  @State singleSelectCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [{ text: '单选按钮1' }, { text: '单选按钮2' }, { text: '单选按钮3' }] as SegmentButtonItemTuple,\n    multiply: false, // 单选模式\n    fontColor: Color.Black, // 字体颜色为黑色\n    selectedFontColor: Color.Yellow, // 选中字体颜色为黄色\n    backgroundBlurStyle: BlurStyle.BACKGROUND_THICK // 背景模糊样式为厚\n  })\n\n  // 定义多选胶囊按钮的选项，包括按钮文本、是否多选、字体大小、选中字体大小、字体粗细、选中字体粗细等\n  @State multiplySelectCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [{ text: '多选按钮1' }, { text: '多选按钮2' }, { text: '多选按钮3' }] as SegmentButtonItemTuple,\n    multiply: true, // 多选模式\n    fontSize: 18, // 字体大小为18\n    selectedFontSize: 18, // 选中字体大小为18\n    fontWeight: FontWeight.Bolder, // 字体粗细为更粗\n    selectedFontWeight: FontWeight.Lighter, // 选中字体粗细为更细\n  })\n\n  // 定义图标胶囊按钮的选项，包括按钮图标、选中图标、是否多选、图标大小、按钮内边距、背景模糊样式等\n  @State iconCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') }\n    ] as SegmentButtonItemTuple,\n    multiply: false, // 单选模式\n    imageSize: { width: 40, height: 40 }, // 图标大小为40x40\n    buttonPadding: { top: 6, right: 10, bottom: 6, left: 10 }, // 按钮内边距为6, 10, 6, 10\n    backgroundBlurStyle: BlurStyle.BACKGROUND_THICK // 背景模糊样式为厚\n  })\n\n  // 定义图标文本胶囊按钮的选项，包括按钮文本、图标、选中图标、是否多选、图标大小等\n  @State iconTextCapsuleOptions: SegmentButtonOptions = SegmentButtonOptions.capsule({\n    buttons: [\n      { text: '图标1', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标2', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标3', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标4', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') },\n      { text: '图标5', icon: $r('sys.media.ohos_ic_public_email'), selectedIcon: $r('sys.media.ohos_ic_public_clock') }\n    ] as SegmentButtonItemTuple,\n    multiply: true, // 多选模式\n    imageSize: { width: 10, height: 10 }, // 图标大小为10x10\n  })\n\n  // 定义页签按钮的选中索引，默认选中第一个\n  @State tabSelectedIndexes: number[] = [0]\n\n  // 定义单选胶囊按钮的选中索引，默认选中第一个\n  @State singleSelectCapsuleSelectedIndexes: number[] = [0]\n\n  // 定义多选胶囊按钮的选中索引，默认选中第一个和第二个\n  @State multiplySelectCapsuleSelectedIndexes: number[] = [0, 1]\n\n  // 定义图标胶囊按钮的选中索引，默认选中第四个\n  @State singleSelectIconCapsuleSelectedIndexes: number[] = [3]\n\n  // 定义图标文本胶囊按钮的选中索引，默认选中第二个和第三个\n  @State multiplySelectIconTextCapsuleSelectedIndexes: number[] = [1, 2]\n\n  build() {\n    Row() {\n      Column() {\n        Column({ space: 20 }) {\n          // 创建页签按钮组件，绑定选项和选中索引\n          SegmentButton({ options: this.tabOptions, selectedIndexes: $tabSelectedIndexes })\n          // 创建单选胶囊按钮组件，绑定选项和选中索引\n          SegmentButton({ options: this.singleSelectCapsuleOptions, selectedIndexes: $singleSelectCapsuleSelectedIndexes })\n          // 创建多选胶囊按钮组件，绑定选项和选中索引\n          SegmentButton({ options: this.multiplySelectCapsuleOptions, selectedIndexes: $multiplySelectCapsuleSelectedIndexes })\n          // 创建图标胶囊按钮组件，绑定选项和选中索引\n          SegmentButton({ options: this.iconCapsuleOptions, selectedIndexes: $singleSelectIconCapsuleSelectedIndexes })\n          // 创建图标文本胶囊按钮组件，绑定选项和选中索引\n          SegmentButton({ options: this.iconTextCapsuleOptions, selectedIndexes: $multiplySelectIconTextCapsuleSelectedIndexes })\n        }.width('90%') // 设置按钮组的宽度为90%\n      }.width('100%') // 设置列的宽度为100%\n    }.height('100%') // 设置行的宽度为100%\n  }\n}"
            }
        ],
        "is_common_attrs": false
    },
    "Filter": {
        "description": "可滚动的容器组件，当子组件的布局尺寸超过父组件的尺寸时，内容可以滚动，支持单个子组件。",
        "interfaces": [
            {
                "description": "Scroll(scroller?: Scroller)",
                "params": {
                    "scroller": {
                        "type": "Scroller",
                        "description": "可滚动组件的控制器。用于与可滚动组件进行绑定。"
                    }
                }
            }
        ],
        "attributes": {
            "scrollable": {
                "description": "设置滚动方向。",
                "params": {
                    "value": {
                        "type": "ScrollDirection",
                        "required": true,
                        "description": "滚动方向。",
                        "default": "ScrollDirection.Vertical"
                    }
                }
            }
        },
        "events": {
            "onScrollFrameBegin": {
                "description": "每帧开始滚动时触发，事件参数传入即将发生的滚动量，事件处理函数中可根据应用场景计算实际需要的滚动量并作为事件处理函数的返回值返回，Scroll将按照返回值的实际滚动量进行滚动。支持offsetRemain为负值。若通过onScrollFrameBegin事件和scrollBy方法实现容器嵌套滚动，需设置子滚动节点的EdgeEffect为None。如Scroll嵌套List滚动时，List组件的edgeEffect属性需设置为EdgeEffect.None。触发该事件的条件：1、滚动组件触发滚动时触发，包括键鼠操作等其他触发滚动的输入设置。2、调用控制器接口时不触发。3、越界回弹不触发。4、拖动滚动条不触发。",
                "params": {
                    "offset": {
                        "type": "number",
                        "required": true,
                        "description": "即将发生的滑动量，单位vp。"
                    },
                    "state": {
                        "type": "ScrollState",
                        "required": true,
                        "description": "当前滑动状态。"
                    }
                }
            }
        },
        "examples": []
    },
    "Text": {
        "description": "显示一段文本的组件。",
        "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "Text(content?: string | Resource, value?: TextOptions)",
                "params": {
                    "content": {
                        "type": [
                            "string",
                            "Resource"
                        ],
                        "description": "文本内容。包含子组件Span且未设置属性字符串时不生效，显示Span内容，并且此时text组件的样式不生效。"
                    },
                    "value": {
                        "type": "TextOptions",
                        "description": "文本组件初始化选项。"
                    }
                }
            }
        ],
        "attributes": {
            "textAlign": {
                "description": "设置文本段落在水平方向的对齐方式。",
                "params": {
                    "value": {
                        "type": "TextAlign",
                        "required": true,
                        "description": "文本段落在水平方向的对齐方式。",
                        "default": "TextAlign.Start"
                    }
                }
            },
            "textOverflow": {
                "description": "设置文本超长时的显示方式。",
                "params": {
                    "value": {
                        "type": {
                            "overflow": "TextOverflow"
                        },
                        "required": true,
                        "description": "文本超长时的显示方式。",
                        "default": {
                            "overflow": "TextOverflow.Clip"
                        }
                    }
                }
            },
            "maxLines": {
                "description": "设置文本的最大行数。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "文本的最大行数。"
                    }
                }
            },
            "lineHeight": {
                "description": "设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小，number类型时单位为fp。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "文本的文本行高。"
                    }
                }
            },
            "decoration": {
                "description": "设置文本装饰线样式及其颜色。",
                "params": {
                    "value": {
                        "type": "DecorationStyleInterface",
                        "required": true,
                        "description": "文本装饰线样式对象。",
                        "default": {
                            "type": "TextDecorationType.None",
                            "color": "Color.Black",
                            "style": "TextDecorationStyle.SOLID"
                        }
                    }
                }
            },
            "baselineOffset": {
                "description": "设置文本基线的偏移量，设置该值为百分比时，按默认值显示。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "文本基线的偏移量。",
                        "default": 0
                    }
                }
            },
            "letterSpacing": {
                "description": "设置文本字符间距。设置该值为百分比时，按默认值显示。设置该值为0时，按默认值显示。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "文本字符间距。"
                    }
                }
            },
            "minFontSize": {
                "description": "设置文本最小显示字号。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "文本最小显示字号。"
                    }
                }
            },
            "maxFontSize": {
                "description": "设置文本最大显示字号。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "文本最大显示字号。"
                    }
                }
            },
            "textCase": {
                "description": "设置文本大小写。",
                "params": {
                    "value": {
                        "type": "TextCase",
                        "required": true,
                        "description": "文本大小写。",
                        "default": "TextCase.Normal"
                    }
                }
            },
            "fontColor": {
                "description": "设置字体颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "字体颜色。"
                    }
                }
            },
            "fontSize": {
                "description": "设置字体大小。",
                "params": {
                    "value": {
                        "type": [
                            "Resource",
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "字体大小。fontSize为number类型时，使用fp单位。字体默认大小16fp。不支持设置百分比字符串。"
                    }
                }
            },
            "fontStyle": {
                "description": "设置字体样式。",
                "params": {
                    "value": {
                        "type": "FontStyle",
                        "required": true,
                        "description": "字体样式。",
                        "default": "FontStyle.Normal"
                    }
                }
            },
            "fontWeight": {
                "description": "设置文本字重，支持设置字体配置项。",
                "params": {
                    "weight": {
                        "type": [
                            "FontWeight",
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "文本的字体粗细。",
                        "default": "FontWeight.Normal"
                    },
                    "options": {
                        "type": "FontSettingOptions",
                        "description": "字体配置项。"
                    }
                }
            },
            "fontFamily": {
                "description": "设置字体列表。",
                "params": {
                    "value": {
                        "type": [
                            "Resource",
                            "string"
                        ],
                        "required": true,
                        "description": "字体列表。默认字体'HarmonyOS Sans'。",
                        "default": "HarmonyOS Sans"
                    }
                }
            },
            "copyOption": {
                "description": "设置组件是否支持文本可复制粘贴。设置copyOptions为CopyOptions.InApp或者CopyOptions.LocalDevice，长按文本，会弹出文本选择菜单，可选中文本并进行复制、全选操作。",
                "params": {
                    "value": {
                        "type": "CopyOptions",
                        "required": true,
                        "description": "组件是否支持文本可复制粘贴。",
                        "default": "CopyOptions.None"
                    }
                }
            },
            "draggable": {
                "description": "设置选中文本拖拽效果。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "选中文本拖拽效果。",
                        "default": false
                    }
                }
            },
            "fontFeature": {
                "description": "设置文字特性效果，比如数字等宽的特性。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "文字特性效果。"
                    }
                }
            },
            "textShadow": {
                "description": "设置文字阴影效果。",
                "params": {
                    "value": {
                        "type": [
                            "ShadowOptions",
                            [
                                "ShadowOptions"
                            ]
                        ],
                        "required": true,
                        "description": "文字阴影效果。"
                    }
                }
            },
            "heightAdaptivePolicy": {
                "description": "设置文本自适应高度的方式。",
                "params": {
                    "value": {
                        "type": "TextHeightAdaptivePolicy",
                        "required": true,
                        "description": "文本自适应高度的方式。"
                    }
                }
            },
            "textIndent": {
                "description": "设置首行文本缩进。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "首行文本缩进。",
                        "default": 0
                    }
                }
            },
            "wordBreak": {
                "description": "设置断行规则。",
                "params": {
                    "value": {
                        "type": "WordBreak",
                        "required": true,
                        "description": "断行规则。",
                        "default": "WordBreak.BREAK_WORD"
                    }
                }
            },
            "selection": {
                "description": "设置选中区域。选中区域高亮且显示手柄和文本选择菜单。",
                "params": {
                    "selectionStart": {
                        "type": "number",
                        "required": true,
                        "description": "所选文本的起始位置。",
                        "default": -1
                    },
                    "selectionEnd": {
                        "type": "number",
                        "required": true,
                        "description": "所选文本的结束位置。",
                        "default": -1
                    }
                }
            },
            "ellipsisMode": {
                "description": "设置省略位置。",
                "params": {
                    "value": {
                        "type": "EllipsisMode",
                        "required": true,
                        "description": "省略位置。",
                        "default": "EllipsisMode.END"
                    }
                }
            },
            "enableDataDetector": {
                "description": "设置是否进行文本特殊实体识别。",
                "params": {
                    "enable": {
                        "type": "boolean",
                        "required": true,
                        "description": "使能文本识别。",
                        "default": false
                    }
                }
            },
            "dataDetectorConfig": {
                "description": "设置文本识别配置。",
                "params": {
                    "config": {
                        "type": "TextDataDetectorConfig",
                        "required": true,
                        "description": "文本识别配置。"
                    }
                }
            },
            "bindSelectionMenu": {
                "description": "设置自定义选择菜单。",
                "params": {
                    "spanType": {
                        "type": "TextSpanType",
                        "required": true,
                        "description": "Span类型信息。"
                    },
                    "content": {
                        "type": "CustomBuilder",
                        "required": true,
                        "description": "自定义菜单内容。"
                    },
                    "responseType": {
                        "type": "TextResponseType",
                        "required": true,
                        "description": "触发菜单弹出的方式。"
                    },
                    "options": {
                        "type": "SelectionMenuOptions",
                        "description": "菜单选项。"
                    }
                }
            },
            "lineSpacing": {
                "description": "设置文本的行间距，设置值不大于0时，取默认值0。",
                "params": {
                    "value": {
                        "type": "LengthMetrics",
                        "required": true,
                        "description": "文本的行间距。"
                    }
                }
            },
            "privacySensitive": {
                "description": "设置是否支持卡片敏感隐私信息。",
                "params": {
                    "supported": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否支持卡片敏感隐私信息。",
                        "default": false
                    }
                }
            },
            "lineBreakStrategy": {
                "description": "设置折行规则。",
                "params": {
                    "strategy": {
                        "type": "LineBreakStrategy",
                        "required": true,
                        "description": "折行规则。"
                    }
                }
            },
            "textSelectable": {
                "description": "设置是否支持文本可选择、可获焦以及Touch后能否获取焦点。",
                "params": {
                    "mode": {
                        "type": "TextSelectableMode",
                        "required": true,
                        "description": "文本是否支持可选择、可获焦。",
                        "default": "TextSelectableMode.SELECTABLE_UNFOCUSABLE"
                    }
                }
            },
            "editMenuOptions": {
                "description": "设置自定义菜单扩展项，允许用户设置扩展项的文本内容、图标、回调方法。",
                "params": {
                    "editMenu": {
                        "type": "EditMenuOptions",
                        "required": true,
                        "description": "自定义菜单扩展项。"
                    }
                }
            },
            "minFontScale": {
                "description": "设置文本最小的字体缩放倍数。",
                "params": {
                    "scale": {
                        "type": [
                            "number",
                            "Resource"
                        ],
                        "required": true,
                        "description": "文本最小的字体缩放倍数。",
                        "default": 0
                    }
                }
            },
            "maxFontScale": {
                "description": "设置文本最大的字体缩放倍数。",
                "params": {
                    "scale": {
                        "type": [
                            "number",
                            "Resource"
                        ],
                        "required": true,
                        "description": "文本最大的字体缩放倍数。",
                        "default": 1
                    }
                }
            },
            "halfLeading": {
                "description": "设置文本是否将行间距平分至行的顶部与底部。",
                "params": {
                    "halfLeading": {
                        "type": "boolean",
                        "required": true,
                        "description": "文本是否将行间距平分至行的顶部与底部。",
                        "default": false
                    }
                }
            },
            "font": {
                "description": "设置文本样式，支持设置字体配置项。",
                "params": {
                    "fontValue": {
                        "type": "Font",
                        "required": true,
                        "description": "文本样式。"
                    },
                    "options": {
                        "type": "FontSettingOptions",
                        "description": "字体配置项。"
                    }
                }
            }
        },
        "events": {
            "onCopy": {
                "description": "长按文本内部区域弹出剪贴板后，点击剪切板复制按钮，触发该回调。目前文本复制仅支持文本。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "复制的文本内容。"
                    }
                }
            },
            "onTextSelectionChange": {
                "description": "文本选择的位置发生变化时，触发该回调。",
                "params": {
                    "selectionStart": {
                        "type": "number",
                        "required": true,
                        "description": "所选文本的起始位置。"
                    },
                    "selectionEnd": {
                        "type": "number",
                        "required": true,
                        "description": "所选文本的结束位置。"
                    }
                }
            }
        },
        "rules": [
            "不支持Text内同时存在文本内容和Span或ImageSpan子组件。如果同时存在，只显示Span或ImageSpan内的内容。",
            "字体排版引擎会对开发者传入的宽度[width]进行向下取整，保证是整型像素后进行排版。如果字体排版引擎向上取整，可能会出现文字右侧被截断。",
            "当多个Text组件在[Row]容器内布局且没有设置具体的布局分配信息时，Text会以Row的最大尺寸进行布局。如果需要子组件主轴累加的尺寸不超过Row容器主轴的尺寸，可以设置[layoutWeight]或者是以[Flex]布局来约束子组件的主轴尺寸。"
        ],
        "examples": [
            {
                "description": "该组件展示了如何配置隐私敏感信息的隐藏功能。组件通过 Column 布局实现了一个简单的界面，其中包含一个 Text 组件，用于显示隐私敏感信息。布局宽度占据整个屏幕，高度由内容自动调整。组件的垂直方向上仅包含一个 Text 组件，对齐方式为居中对齐。\n\nText 组件的样式包括字体、颜色等属性，支持隐私敏感信息的显示和隐藏。通过设置 `privacySensitive(true)`，Text 组件的内容在需要时会被隐藏，以保护用户隐私。组件的功能主要是展示隐私敏感信息的隐藏效果，用户无法直接看到被隐藏的内容。\n\n整个布局通过 Column 布局保证 Text 组件在垂直方向上居中显示，确保界面简洁明了。",
                "code": "@Entry\n@Component\nstruct ImageExample {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局的 Column 组件，子组件之间的间距为 10vp\n      Text(\"privacySensitive\") // 创建一个 Text 组件，显示文本 \"privacySensitive\"\n        .privacySensitive(true) // 设置 Text 组件为隐私敏感，内容在需要时会被隐藏\n        .margin({top :30}) // 设置 Text 组件的上边距为 30vp\n    }\n    .alignItems(HorizontalAlign.Center) // 设置 Column 组件的子组件在水平方向上居中对齐\n    .width(\"100%\") // 设置 Column 组件的宽度为 100%，占据整个屏幕宽度\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个展示可选择文本的界面。布局宽度占据整个屏幕，高度根据内容自适应，顶部外边距为 100vp。组件的垂直方向上包含一个 Text 组件，用于展示一段文本。\n\nText 组件的样式包括宽度为 300vp，高度为 100vp，最大显示行数为 5 行，字体颜色为黑色。文本内容为一段较长的字符串，支持在应用内复制（通过 copyOption 属性设置）。文本的选中范围通过 selection 属性设置为从第 3 个字符到第 8 个字符。\n\n组件的功能包括文本的可选择性，通过 textSelectable 属性设置为 TextSelectableMode.SELECTABLE_FOCUSABLE，使得文本在获得焦点时可以触发键盘框选文本功能。\n\n整个布局通过 Column 布局保证 Text 组件在垂直方向上居中显示，确保界面简洁明了。",
                "code": "@Entry\n@Component\nstruct TextExample10 {\n  @State message: string = 'TextTextTextTextTextTextTextText' + 'TextTextTextTextTextTextTextTextTextTextTextTextTextTextTextText';\n\n  build() {\n    Column() {\n      Text(this.message)\n        .width(300) // 设置 Text 组件的宽度为 300vp\n        .height(100) // 设置 Text 组件的高度为 100vp\n        .maxLines(5) // 设置 Text 组件的最大显示行数为 5 行\n        .fontColor(Color.Black) // 设置 Text 组件的字体颜色为黑色\n        .copyOption(CopyOptions.InApp) // 设置 Text 组件的复制选项为仅在应用内复制\n        .selection(3, 8) // 设置 Text 组件的选中范围为从第 3 个字符到第 8 个字符\n        .textSelectable(TextSelectableMode.SELECTABLE_FOCUSABLE) // 设置 Text 组件的可选择模式为 SELECTABLE_FOCUSABLE，使得文本在获得焦点时可以触发键盘框选文本功能\n    }.width('100%') // 设置 Column 组件的宽度为 100%\n    .margin({ top: 100 }) // 设置 Column 组件的顶部外边距为 100vp\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个展示文本样式的界面。布局宽度占据整个屏幕，内边距为 10vp。组件的垂直方向上被分为三个部分，每个部分包含一个 Text 组件。\n\n第一个 Text 组件用于显示标题 \"halfLeading\"，字体大小为 9vp，颜色为灰色（0xCCCCCC），外边距为 15vp，宽度占据父容器的 90%。\n\n第二个 Text 组件显示文本 \"This is the text with the halfLeading set.\"，行高为 60vp，启用了 halfLeading 属性，边框宽度为 1vp，宽度占据父容器的 80%。halfLeading 属性用于控制文本的行间距，当设置为 true 时，行间距会减半。\n\n第三个 Text 组件显示文本 \"This is the text without the halfLeading set.\"，行高为 60vp，禁用了 halfLeading 属性，边框宽度为 1vp，宽度占据父容器的 80%。当 halfLeading 属性设置为 false 时，行间距保持默认值。\n\n整个布局通过 Column 布局保证文本在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextExample12 {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局，子组件之间的间距为 10vp\n\n      Text('halfLeading') // 创建一个 Text 组件，显示标题 \"halfLeading\"\n        .fontSize(9) // 设置字体大小为 9vp\n        .fontColor(0xCCCCCC) // 设置字体颜色为灰色（0xCCCCCC）\n        .margin(15) // 设置外边距为 15vp\n        .width('90%') // 设置宽度为父容器的 90%\n\n      Text(\"This is the text with the halfLeading set.\") // 创建一个 Text 组件，显示文本 \"This is the text with the halfLeading set.\"\n        .lineHeight(60) // 设置行高为 60vp\n        .halfLeading(true) // 启用 halfLeading 属性，行间距减半\n        .borderWidth(1) // 设置边框宽度为 1vp\n        .width('80%') // 设置宽度为父容器的 80%\n\n      Text(\"This is the text without the halfLeading set.\") // 创建一个 Text 组件，显示文本 \"This is the text without the halfLeading set.\"\n        .lineHeight(60) // 设置行高为 60vp\n        .halfLeading(false) // 禁用 halfLeading 属性，行间距保持默认值\n        .borderWidth(1) // 设置边框宽度为 1vp\n        .width('80%') // 设置宽度为父容器的 80%\n    }\n  }\n}"
            },
            {
                "description": "该组件通过Row和Column布局实现了一个展示多种类型文本数据的界面。布局宽度占据整个屏幕，高度设为100%，内边距为10vp。组件的垂直方向上被分为一个部分，包含一个Text组件，用于展示电话号码、链接、邮箱、地址和时间信息。\nText组件的样式包括字体大小为16vp，文本对齐方式为居中对齐，边框宽度为1vp，宽度占据父容器的100%。Text组件的功能包括启用数据检测器（enableDataDetector），并配置数据检测器类型（dataDetectorConfig），以便在文本中检测并高亮显示电话号码、链接、邮箱、地址和时间信息。\n整个布局通过Row和Column布局保证文本在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextExample6 {\n  @State phoneNumber: string = '(86) (755) ********'; // 电话号码状态变量\n  @State url: string = 'www.*******.com'; // 链接状态变量\n  @State email: string = '***@example.com'; // 邮箱状态变量\n  @State address: string = 'XX省XX市XX区XXXX'; // 地址状态变量\n  @State datetime: string = 'XX年XX月XX日XXXX'; // 时间状态变量\n  @State enableDataDetector: boolean = true; // 是否启用数据检测器的状态变量\n  @State types: TextDataDetectorType[] = []; // 数据检测器类型的状态变量\n\n  build() {\n    Row() {\n      Column() {\n        Text(\n          '电话号码：' + this.phoneNumber + '\\n' +\n          '链接：' + this.url + '\\n' +\n          '邮箱：' + this.email + '\\n' +\n          '地址：' + this.address + '\\n' +\n          '时间：' + this.datetime\n        )\n          .fontSize(16) // 设置字体大小为16vp\n          .copyOption(CopyOptions.InApp) // 设置复制选项为仅在应用内复制\n          .enableDataDetector(this.enableDataDetector) // 启用数据检测器\n          .dataDetectorConfig({types : this.types, onDetectResultUpdate: (result: string)=>{}}) // 配置数据检测器类型\n          .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n          .borderWidth(1) // 设置边框宽度为1vp\n          .padding(10) // 设置内边距为10vp\n          .width('100%') // 设置宽度占据父容器的100%\n      }\n      .width('100%') // 设置宽度占据父容器的100%\n    }\n    .height('100%') // 设置高度占据父容器的100%\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示文本选择和复制功能的界面。布局宽度为 335vp，高度为 600vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为多个部分，包括一个文本展示区域、一个按钮和一个显示复制内容的文本区域。\n\n文本展示区域的文本内容为 \"This is set selection to Selection text content This is set selection to Selection text content.\"，字体大小为 12vp，行高为 20vp，边框宽度为 1vp，外边距为 30vp。文本内容支持在应用内复制（CopyOptions.InApp），并且可以通过设置起始和结束位置来选择文本。\n\n按钮的文本为 \"Set text selection\"，外边距为左 20vp。按钮的功能是点击后设置文本选择的起始位置为 10，结束位置为 30。\n\n显示复制内容的文本区域的文本内容为复制的内容，字体大小为 12vp，外边距为 10vp。\n\n整个布局通过 Flex 布局保证文本、按钮和显示复制内容的文本区域在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextExample5 {\n  @State onCopy: string = '' // 存储复制的文本内容\n  @State text: string = 'This is set selection to Selection text content This is set selection to Selection text content.' // 文本内容\n  @State start: number = 0 // 文本选择的起始位置\n  @State end: number = 20 // 文本选择的结束位置\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.Start }) {\n      Text(this.text)\n        .fontSize(12) // 设置字体大小为 12vp\n        .border({ width: 1 }) // 设置边框宽度为 1vp\n        .lineHeight(20) // 设置行高为 20vp\n        .margin(30) // 设置外边距为 30vp\n        .copyOption(CopyOptions.InApp) // 设置复制选项为仅在应用内复制\n        .selection(this.start, this.end) // 设置文本选择的起始和结束位置\n        .onCopy((value: string) => { // 当文本被复制时触发的事件\n          this.onCopy = value // 将复制的文本内容存储到 onCopy 变量中\n        })\n      Button('Set text selection')\n        .margin({left:20}) // 设置按钮的外边距为左 20vp\n        .onClick(() => { // 按钮点击事件\n          this.start = 10 // 设置文本选择的起始位置为 10\n          this.end = 30 // 设置文本选择的结束位置为 30\n        })\n      Text(this.onCopy).fontSize(12).margin(10).key('copy') // 显示复制的文本内容，字体大小为 12vp，外边距为 10vp\n    }.height(600).width(335).padding({ left: 35, right: 35, top: 35 }) // 设置布局的高度为 600vp，宽度为 335vp，内边距为左右 35vp、顶部 35vp\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示文本对齐方式、文本溢出处理和行高的界面。布局宽度为 340vp，高度为 600vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组文本。每个文本组的文本以不同的对齐方式排列，且对齐方式为居中对齐。\n文本的样式包括字体大小、边框、内边距、宽度和高度等属性，支持不同的样式展示。文本组之间通过 Flex 组件进行分隔。文本的功能包括文本对齐、文本溢出处理和行高设置，用户可以通过设置不同的属性来控制文本的展示效果。\n整个布局通过 Flex 布局保证文本在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Extend(Text)\nfunction style(TextAlign: TextAlign) {\n  .textAlign(TextAlign) // 设置文本对齐方式\n  .fontSize(12) // 设置字体大小为 12\n  .border({ width: 1 }) // 设置边框宽度为 1\n  .padding(10) // 设置内边距为 10\n  .width('100%') // 设置宽度为 100%\n}\n\n@Entry\n@Component\nstruct TextExample1 {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n\n      Text('textAlign').fontSize(9).fontColor(0xCCCCCC) // 设置标题文本，字体大小为 9，颜色为 0xCCCCCC\n      Text('TextAlign set to Center.')\n        .style(TextAlign.Center) // 设置文本对齐方式为居中\n      Text('TextAlign set to Start.')\n        .style(TextAlign.Start) // 设置文本对齐方式为开始\n      Text('TextAlign set to End.')\n        .style(TextAlign.End) // 设置文本对齐方式为结束\n\n      Text('This is the text content with textAlign set to Center.')\n        .style(TextAlign.Center) // 设置文本对齐方式为居中\n      Text('This is the text content with textAlign set to Start.')\n        .style(TextAlign.Start) // 设置文本对齐方式为开始\n      Text('This is the text content with textAlign set to End.')\n        .style(TextAlign.End) // 设置文本对齐方式为结束\n\n      Text('TextOverflow+maxLines').fontSize(9).fontColor(0xCCCCCC) // 设置标题文本，字体大小为 9，颜色为 0xCCCCCC\n\n      Text('This is the setting of textOverflow to Clip text content This is the setting of textOverflow to None text content. This is the setting of textOverflow to Clip text content This is the setting of textOverflow to None text content.')\n        .textOverflow({ overflow: TextOverflow.Clip }) // 设置文本溢出处理方式为剪切\n        .maxLines(1) // 设置最大行数为 1\n        .style(TextAlign.Start) // 设置文本对齐方式为开始\n\n      Text('This is set textOverflow to Ellipsis text content This is set textOverflow to Ellipsis text content.')\n        .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出处理方式为省略号\n        .maxLines(1) // 设置最大行数为 1\n        .style(TextAlign.Start) // 设置文本对齐方式为开始\n\n      Text('lineHeight').fontSize(9).fontColor(0xCCCCCC) // 设置标题文本，字体大小为 9，颜色为 0xCCCCCC\n      Text('This is the text with the line height set. This is the text with the line height set.')\n        .style(TextAlign.Start) // 设置文本对齐方式为开始\n      Text('This is the text with the line height set. This is the text with the line height set.')\n        .style(TextAlign.Start) // 设置文本对齐方式为开始\n        .lineHeight(20) // 设置行高为 20\n    }.height(600).width(340).padding({ left: 35, right: 35, top: 35 }) // 设置布局高度为 600vp，宽度为 340vp，内边距为左右 35vp、顶部 35vp\n  }\n}"
            },
            {
                "description": "该组件展示了一个带有自定义编辑菜单的文本组件。布局宽度占据屏幕的90%，高度由内容决定，内边距为左右5%。组件的垂直方向上包含一个文本组件，文本组件的顶部边距为100vp。\n文本组件的样式包括字体大小为20vp，支持本地设备的复制操作。文本组件的功能包括自定义编辑菜单，用户可以通过长按文本触发编辑菜单，菜单项包括自定义的文本内容、图标和回调方法。\n菜单项的排列和嵌套关系如下：首先遍历默认的菜单项，设置其图标和文本内容；然后添加两个自定义菜单项，分别插入到菜单项数组的末尾和开头。\n菜单项的功能包括点击事件，用户点击菜单项时会触发相应的回调方法，回调方法中根据菜单项的ID进行不同的处理，包括拦截或不拦截某些操作。\n整个布局通过Column布局保证文本组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextExample11 {\n  @State text: string = 'Text editMenuOptions' // 定义文本内容的状态变量\n\n  // 创建自定义菜单项的方法\n  onCreateMenu(menuItems: Array<TextMenuItem>) {\n    menuItems.forEach((value, index) => {\n      value.icon = $r('app.media.startIcon') // 设置菜单项的图标\n      if (value.id.equals(TextMenuItemId.COPY)) {\n        value.content = \"复制change\" // 修改复制菜单项的文本内容\n      }\n      if (value.id.equals(TextMenuItemId.SELECT_ALL)) {\n        value.content = \"全选change\" // 修改全选菜单项的文本内容\n      }\n    })\n    let item1: TextMenuItem = {\n      content: 'custom1', // 自定义菜单项1的文本内容\n      icon: $r('app.media.startIcon'), // 自定义菜单项1的图标\n      id: TextMenuItemId.of('custom1'), // 自定义菜单项1的ID\n    }\n    let item2: TextMenuItem = {\n      content: 'custom2', // 自定义菜单项2的文本内容\n      id: TextMenuItemId.of('custom2'), // 自定义菜单项2的ID\n      icon: $r('app.media.startIcon'), // 自定义菜单项2的图标\n    }\n    menuItems.push(item1) // 将自定义菜单项1添加到菜单项数组的末尾\n    menuItems.unshift(item2) // 将自定义菜单项2添加到菜单项数组的开头\n    return menuItems // 返回修改后的菜单项数组\n  }\n\n  build() {\n    Column() {\n      Text(this.text) // 显示文本内容\n        .fontSize(20) // 设置字体大小为20vp\n        .copyOption(CopyOptions.LocalDevice) // 设置支持本地设备的复制操作\n        .editMenuOptions({\n          onCreateMenu: this.onCreateMenu, // 设置创建自定义菜单项的方法\n          onMenuItemClick: (menuItem: TextMenuItem, textRange: TextRange) => { // 设置菜单项点击的回调方法\n            if (menuItem.id.equals(TextMenuItemId.of(\"custom2\"))) {\n              console.log(\"拦截 id: custom2 start:\" + textRange.start + \"; end:\" + textRange.end) // 拦截自定义菜单项2的点击事件\n              return true;\n            }\n            if (menuItem.id.equals(TextMenuItemId.COPY)) {\n              console.log(\"拦截 COPY start:\" + textRange.start + \"; end:\" + textRange.end) // 拦截复制菜单项的点击事件\n              return true;\n            }\n            if (menuItem.id.equals(TextMenuItemId.SELECT_ALL)) {\n              console.log(\"不拦截 SELECT_ALL start:\" + textRange.start + \"; end:\" + textRange.end) // 不拦截全选菜单项的点击事件\n              return false;\n            }\n            return false;\n          }\n        })\n        .margin({ top: 100 }) // 设置文本组件的顶部边距为100vp\n    }\n    .width(\"90%\") // 设置布局宽度为屏幕的90%\n    .margin(\"5%\") // 设置布局的内边距为左右5%\n  }\n}"
            },
            {
                "description": "该组件展示了一个文本组件（Text）及其相关信息的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组文本或按钮。每个部分的文本以垂直布局方式排列，文本之间的间距均匀分布，且对齐方式为居中对齐。\n\n文本组件的样式包括字体大小、颜色、边框宽度等属性，支持不同的样式展示。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n\n整个布局通过 Column 布局保证文本和按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextExample9 {\n  // 定义状态变量，用于存储文本组件的行数、字形位置信息和行度量信息\n  @State lineCount: string = \"\"\n  @State glyphPositionAtCoordinate: string = \"\"\n  @State lineMetrics: string = \"\"\n\n  // 创建一个 TextController 实例，用于控制文本组件\n  controller: TextController = new TextController()\n\n  // 定义文本内容\n  @State textStr: string = 'Hello World! 您好，世界！'\n\n  build() {\n    Scroll() {\n      Column() {\n        // 显示标题文本，字体大小为9，颜色为浅灰色，宽度为90%，内边距为10\n        Text('Text组件getLayoutManager接口获取段落相对组件的信息')\n          .fontSize(9)\n          .fontColor(0xCCCCCC)\n          .width('90%')\n          .padding(10)\n\n        // 显示文本内容，字体大小为25，边框宽度为1，当文本区域发生变化时获取行数\n        Text(this.textStr, { controller: this.controller })\n          .fontSize(25)\n          .borderWidth(1)\n          .onAreaChange(() => {\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            this.lineCount = \"LineCount: \" + layoutManager.getLineCount()\n          })\n\n        // 显示行数标题，字体大小为9，颜色为浅灰色，宽度为90%，内边距为10\n        Text('LineCount').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 显示行数信息\n        Text(this.lineCount)\n\n        // 显示字形位置标题，字体大小为9，颜色为浅灰色，宽度为90%，内边距为10\n        Text('GlyphPositionAtCoordinate').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 显示按钮，点击按钮时获取相对组件坐标[150,50]的字形信息\n        Button(\"相对组件坐标[150,50]字形信息\")\n          .onClick(() => {\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            let position: PositionWithAffinity = layoutManager.getGlyphPositionAtCoordinate(150, 50)\n            this.glyphPositionAtCoordinate =\n              \"相对组件坐标[150,50] glyphPositionAtCoordinate position: \" + position.position + \" affinity: \" +\n              position.affinity\n          })\n          .margin({ bottom: 20, top: 10 })\n\n        // 显示字形位置信息\n        Text(this.glyphPositionAtCoordinate)\n\n        // 显示行度量标题，字体大小为9，颜色为浅灰色，宽度为90%，内边距为10\n        Text('LineMetrics').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 显示按钮，点击按钮时获取首行行信息、文本样式信息、以及字体属性信息\n        Button(\"首行行信息、文本样式信息、以及字体属性信息\")\n          .onClick(() => {\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            let lineMetrics: LineMetrics = layoutManager.getLineMetrics(0)\n            this.lineMetrics = \"lineMetrics is \" + JSON.stringify(lineMetrics) + '\\\\n\\\\n'\n            let runMetrics = lineMetrics.runMetrics\n            runMetrics.forEach((value, key) => {\n              this.lineMetrics += \"runMetrics key is \" + key + \" \" + JSON.stringify(value) + \"\\\\n\\\\n\"\n            });\n          })\n          .margin({ bottom: 20, top: 10 })\n\n        // 显示行度量信息\n        Text(this.lineMetrics)\n      }\n      .margin({ top: 100, left: 8, right: 8 })\n    }\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个展示文本处理效果的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个文本展示区域和一组按钮。每个文本展示区域的文本以不同的省略号模式和断词模式进行展示，按钮用于切换这些模式。\n\n文本展示区域的样式包括字体大小、边框、行高、最大行数、宽度等属性，支持不同的样式展示。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Row组件进行分隔。\n\n按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。整个布局通过Column布局保证文本展示区域和按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextExample4 {\n  @State text: string =\n    'The text component is used to display a piece of textual information.Support universal attributes and universal text attributes.'\n  @State ellipsisModeIndex: number = 0;\n  @State ellipsisMode: EllipsisMode[] = [EllipsisMode.START, EllipsisMode.CENTER, EllipsisMode.END]\n  @State ellipsisModeStr: string[] = ['START', 'CENTER', 'END']\n  @State wordBreakIndex: number = 0;\n  @State wordBreak: WordBreak[] = [WordBreak.NORMAL, WordBreak.BREAK_ALL, WordBreak.BREAK_WORD]\n  @State wordBreakStr: string[] = ['NORMAL', 'BREAK_ALL', 'BREAK_WORD']\n  @State textClip: boolean = false\n\n  build() {\n    Column({ space: 10 }) {\n      // 第一个文本展示区域，展示省略号模式的效果\n      Text(this.text)\n        .fontSize(16) // 设置字体大小为16\n        .border({ width: 1 }) // 设置边框宽度为1\n        .lineHeight(20) // 设置行高为20\n        .maxLines(1) // 设置最大行数为1\n        .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n        .ellipsisMode(this.ellipsisMode[this.ellipsisModeIndex]) // 设置省略号模式\n        .width(300) // 设置宽度为300\n        .margin({ left: 20, top: 20 }) // 设置左边距和上边距为20\n\n      // 按钮区域，用于切换省略号模式\n      Row() {\n        Button('更改省略号位置：' + this.ellipsisModeStr[this.ellipsisModeIndex]).onClick(() => {\n          this.ellipsisModeIndex++\n          if (this.ellipsisModeIndex > (this.ellipsisModeStr.length - 1)) {\n            this.ellipsisModeIndex = 0\n          }\n        })\n      }\n\n      // 第二个文本展示区域，展示断词模式的效果\n      Text('This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.')\n        .fontSize(12) // 设置字体大小为12\n        .border({ width: 1 }) // 设置边框宽度为1\n        .wordBreak(WordBreak.NORMAL) // 设置断词模式为NORMAL\n        .lineHeight(20) // 设置行高为20\n        .maxLines(2) // 设置最大行数为2\n        .clip(this.textClip) // 设置是否裁剪文本\n        .width(260) // 设置宽度为260\n\n      // 按钮区域，用于切换裁剪模式\n      Row() {\n        Button('切换clip：' + this.textClip).onClick(() => {\n          this.textClip = !this.textClip\n        })\n      }\n\n      // 第三个文本展示区域，展示断词模式的效果\n      Text(this.text)\n        .fontSize(12) // 设置字体大小为12\n        .border({ width: 1 }) // 设置边框宽度为1\n        .maxLines(2) // 设置最大行数为2\n        .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n        .wordBreak(this.wordBreak[this.wordBreakIndex]) // 设置断词模式\n        .lineHeight(20) // 设置行高为20\n        .width(260) // 设置宽度为260\n\n      // 按钮区域，用于切换断词模式\n      Row() {\n        Button('更改wordBreak模式：' + this.wordBreakStr[this.wordBreakIndex]).onClick(() => {\n          this.wordBreakIndex++\n          if (this.wordBreakIndex > (this.wordBreakStr.length - 1)) {\n            this.wordBreakIndex = 0\n          }\n        })\n      }\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示文本样式和换行策略的界面。布局宽度为 350vp，高度为 600vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组文本。文本的排列方式为垂直布局，对齐方式为左对齐，且在垂直方向上均匀分布。\n\n文本的样式包括字体大小、颜色、行间距、换行策略等属性，支持不同的样式展示。文本组之间通过 Flex 组件进行分隔。文本的功能包括展示不同的行间距和换行策略，用户可以通过点击按钮切换不同的换行策略，文本也可以在不同的行间距设置下进行展示。\n\n整个布局通过 Flex 布局保证文本在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { LengthMetrics } from '@kit.ArkUI'\n\n// 自定义 Text 组件的行间距样式\n@Extend(Text) function lineSpacingValue(LineSpacing: LengthMetrics|undefined) {\n  .lineSpacing(LineSpacing) // 设置行间距\n  .fontSize(12) // 设置字体大小为 12\n  .border({ width: 1 }) // 设置文本边框宽度为 1\n}\n\n@Entry\n@Component\nstruct TextExample8 {\n  @State message1: string = \"They can be classified as built-in components–those directly provided by the ArkUI framework and custom components – those defined by developers\" +\n    \"The built-in components include buttons radio buttonsprogress indicators and text You can set the rendering effectof thesecomponents in method chaining mode,\" +\n    \"page components are divided into independent UI units to implementindependent creation development and reuse of different units on pages making pages more engineering-oriented.\";\n  @State lineBreakStrategyIndex: number = 0; // 当前换行策略索引\n  @State lineBreakStrategy: LineBreakStrategy[] = [LineBreakStrategy.GREEDY, LineBreakStrategy.HIGH_QUALITY, LineBreakStrategy.BALANCED] // 换行策略数组\n  @State lineBreakStrategyStr: string[] = ['GREEDY', 'HIGH_QUALITY', 'BALANCED'] // 换行策略字符串数组\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      Text('lineSpacing').fontSize(9).fontColor(0xCCCCCC) // 标题：行间距\n      Text('This is a context with no lineSpacing set.')\n        .lineSpacingValue(undefined) // 未设置行间距的文本\n      Text( 'This is a context with lineSpacing set to 20_px.')\n        .lineSpacingValue(LengthMetrics.px(20)) // 行间距设置为 20px 的文本\n      Text('This is the context with lineSpacing set to 20_vp.')\n        .lineSpacingValue(LengthMetrics.vp(20)) // 行间距设置为 20vp 的文本\n      Text('This is the context with lineSpacing set to 20_fp.')\n        .lineSpacingValue(LengthMetrics.fp(20)) // 行间距设置为 20fp 的文本\n      Text('This is the context with lineSpacing set to 20_lpx.')\n        .lineSpacingValue(LengthMetrics.lpx(20)) // 行间距设置为 20lpx 的文本\n      Text('This is the context with lineSpacing set to 100%.')\n        .lineSpacingValue(LengthMetrics.percent(1)) // 行间距设置为 100% 的文本\n      Text('fontFeature').fontSize(9).fontColor(0xCCCCCC) // 标题：字体特性\n      Text('This is ss01 on : 0123456789')\n        .fontSize(20)\n        .fontFeature(\"\\\"ss01\\\" on\") // 启用 ss01 字体特性的文本\n      Text('This is ss01 off: 0123456789')\n        .fontSize(20)\n        .fontFeature(\"\\\"ss01\\\" off\") // 禁用 ss01 字体特性的文本\n      Text('lineBreakStrategy').fontSize(9).fontColor(0xCCCCCC) // 标题：换行策略\n      Text(this.message1)\n        .fontSize(12)\n        .border({ width: 1 })\n        .padding(10)\n        .width('100%')\n        .lineBreakStrategy(this.lineBreakStrategy[this.lineBreakStrategyIndex]) // 根据当前换行策略索引设置换行策略的文本\n      Row() {\n        Button('当前lineBreakStrategy模式：' + this.lineBreakStrategyStr[this.lineBreakStrategyIndex]).onClick(() => {\n          this.lineBreakStrategyIndex++ // 切换到下一个换行策略\n          if(this.lineBreakStrategyIndex > (this.lineBreakStrategyStr.length - 1)) {\n            this.lineBreakStrategyIndex = 0 // 如果超出数组范围，重置为第一个换行策略\n          }\n        })\n      }\n    }.height(600).width(350).padding({ left: 35, right: 35, top: 35 })\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示多种文本样式和效果的界面。布局宽度为 350vp，高度为 700vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组文本内容。每个文本内容的样式通过不同的属性进行设置，包括文本装饰（如删除线、上划线、下划线）、基线偏移、字母间距和文本大小写转换。\n文本内容的排列方式为垂直布局，对齐方式为左对齐，且在垂直方向上均匀分布。每个文本内容的样式通过 @Extend 装饰器定义的 style 函数进行统一设置，包括字体大小、边框、内边距和宽度。文本装饰的样式包括颜色和线条样式（如实线、虚线、波浪线），基线偏移通过设置具体的数值来调整文本的垂直位置，字母间距通过设置具体的数值来调整字符之间的间距，文本大小写转换通过设置不同的枚举值来实现。\n整个布局通过 Flex 布局保证文本内容在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Extend(Text)\nfunction style() {\n  .fontSize(12) // 设置字体大小为 12\n  .border({ width: 1 }) // 设置边框宽度为 1\n  .padding(10) // 设置内边距为 10\n  .width('100%') // 设置宽度为 100%\n}\n\n@Entry\n@Component\nstruct TextExample2 {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      Text('decoration').fontSize(9).fontColor(0xCCCCCC) // 设置标题文本，字体大小为 9，颜色为灰色\n      Text('This is the text content with the decoration set to LineThrough and the color set to Red.')\n        .decoration({\n          type: TextDecorationType.LineThrough, // 设置文本装饰类型为删除线\n          color: Color.Red // 设置文本装饰颜色为红色\n        })\n        .style() // 应用统一的样式\n\n      Text('This is the text content with the decoration set to Overline and the color set to Red.')\n        .decoration({\n          type: TextDecorationType.Overline, // 设置文本装饰类型为上划线\n          color: Color.Red, // 设置文本装饰颜色为红色\n          style: TextDecorationStyle.DOTTED // 设置文本装饰样式为虚线\n        })\n        .style() // 应用统一的样式\n\n      Text('This is the text content with the decoration set to Underline and the color set to Red.')\n        .decoration({\n          type: TextDecorationType.Underline, // 设置文本装饰类型为下划线\n          color: Color.Red, // 设置文本装饰颜色为红色\n          style: TextDecorationStyle.WAVY // 设置文本装饰样式为波浪线\n        })\n        .style() // 应用统一的样式\n\n      Text('baselineOffset').fontSize(9).fontColor(0xCCCCCC) // 设置标题文本，字体大小为 9，颜色为灰色\n      Text('This is the text content with baselineOffset 0.')\n        .baselineOffset(0) // 设置基线偏移为 0\n        .style() // 应用统一的样式\n      Text('This is the text content with baselineOffset 30.')\n        .baselineOffset(30) // 设置基线偏移为 30\n        .style() // 应用统一的样式\n      Text('This is the text content with baselineOffset -20.')\n        .baselineOffset(-20) // 设置基线偏移为 -20\n        .style() // 应用统一的样式\n\n      Text('letterSpacing').fontSize(9).fontColor(0xCCCCCC) // 设置标题文本，字体大小为 9，颜色为灰色\n      Text('This is the text content with letterSpacing 0.')\n        .letterSpacing(0) // 设置字母间距为 0\n        .style() // 应用统一的样式\n      Text('This is the text content with letterSpacing 3.')\n        .letterSpacing(3) // 设置字母间距为 3\n        .style() // 应用统一的样式\n      Text('This is the text content with letterSpacing -1.')\n        .letterSpacing(-1) // 设置字母间距为 -1\n        .style() // 应用统一的样式\n\n      Text('textCase').fontSize(9).fontColor(0xCCCCCC) // 设置标题文本，字体大小为 9，颜色为灰色\n      Text('This is the text content with textCase set to Normal.')\n        .textCase(TextCase.Normal) // 设置文本大小写为正常\n        .style() // 应用统一的样式\n      Text('This is the text content with textCase set to LowerCase.')\n        .textCase(TextCase.LowerCase) // 设置文本大小写为小写\n        .style() // 应用统一的样式\n      Text('This is the text content with textCase set to UpperCase.')\n        .textCase(TextCase.UpperCase) // 设置文本大小写为大写\n        .style() // 应用统一的样式\n\n    }.height(700).width(350).padding({ left: 35, right: 35, top: 35 }) // 设置布局高度为 700vp，宽度为 350vp，内边距为左右 35vp、顶部 35vp\n  }\n}"
            },
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用Text组件的各种属性，包括textShadow、heightAdaptivePolicy和TextOverflow.MARQUEE。布局上，整个界面由一个Column组件包裹，内部包含多个Text组件，每个Text组件展示了不同的属性和效果。样式上，Text组件的宽度、高度、字体大小、颜色、边框等属性被设置，以展示不同的视觉效果。功能上，Text组件展示了文本阴影、高度自适应策略和文本溢出时的跑马灯效果。\n\n布局属性：\n- 整个布局由一个Column组件包裹，Column组件的子组件垂直排列。\n- 每个Text组件的宽度、高度、边距等属性被设置，以控制其在界面中的位置和大小。\n\n组件的样式和外观：\n- Text组件的字体大小、颜色、边框宽度、文本对齐方式等属性被设置，以展示不同的视觉效果。\n- textShadow属性用于设置文本阴影，包括阴影的半径、颜色和偏移量。\n- heightAdaptivePolicy属性用于设置文本高度自适应策略，包括最大行数优先、最小字体大小优先和布局约束优先。\n- textOverflow属性用于设置文本溢出时的处理方式，包括省略号和跑马灯效果。\n\n组件的排列和嵌套关系：\n- 所有Text组件都嵌套在一个Column组件中，Column组件的子组件垂直排列。\n- 每个Text组件的排列方式由其自身的属性决定，如宽度、高度、边距等。\n\n组件的功能和交互：\n- textShadow属性用于为文本添加阴影效果，增强文本的可读性和视觉效果。\n- heightAdaptivePolicy属性用于控制文本在高度受限时的自适应策略，确保文本在不同情况下都能正常显示。\n- textOverflow属性用于处理文本溢出时的显示方式，包括省略号和跑马灯效果，增强用户体验。",
                "code": "@Extend(Text)\nfunction style(HeightAdaptivePolicy: TextHeightAdaptivePolicy) {\n  .width('80%') // 设置Text组件的宽度为父容器的80%\n  .height(90) // 设置Text组件的高度为90vp\n  .borderWidth(1) // 设置Text组件的边框宽度为1vp\n  .minFontSize(10) // 设置Text组件的最小字体大小为10vp\n  .maxFontSize(30) // 设置Text组件的最大字体大小为30vp\n  .maxLines(2) // 设置Text组件的最大行数为2行\n  .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时的处理方式为省略号\n  .heightAdaptivePolicy(HeightAdaptivePolicy) // 设置文本高度自适应策略\n}\n\n@Entry\n@Component\nstruct TextExample3 {\n  build() {\n    Column() {\n      Text('textShadow').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%') // 显示标题“textShadow”，字体大小为9vp，颜色为灰色，边距为15vp，宽度为父容器的90%\n\n      Text('textShadow')\n        .width('80%') // 设置Text组件的宽度为父容器的80%\n        .height(55) // 设置Text组件的高度为55vp\n        .fontSize(40) // 设置Text组件的字体大小为40vp\n        .lineHeight(55) // 设置Text组件的行高为55vp\n        .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n        .textShadow({\n          radius: 10, // 设置文本阴影的半径为10vp\n          color: Color.Black, // 设置文本阴影的颜色为黑色\n          offsetX: 0, // 设置文本阴影的水平偏移量为0\n          offsetY: 0 // 设置文本阴影的垂直偏移量为0\n        })\n        .borderWidth(1) // 设置Text组件的边框宽度为1vp\n      Divider() // 添加分隔线\n\n      Text('heightAdaptivePolicy').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%') // 显示标题“heightAdaptivePolicy”，字体大小为9vp，颜色为灰色，边距为15vp，宽度为父容器的90%\n      Text('This is the text with the height adaptive policy set')\n        .style(TextHeightAdaptivePolicy.MAX_LINES_FIRST) // 设置文本高度自适应策略为最大行数优先\n      Text('This is the text with the height adaptive policy set')\n        .style(TextHeightAdaptivePolicy.MIN_FONT_SIZE_FIRST) // 设置文本高度自适应策略为最小字体大小优先\n      Text('This is the text with the height adaptive policy set')\n        .style(TextHeightAdaptivePolicy.LAYOUT_CONSTRAINT_FIRST) // 设置文本高度自适应策略为布局约束优先\n      Divider() // 添加分隔线\n      Text('marquee').fontSize(9).fontColor(0xCCCCCC).margin(15).width('90%') // 显示标题“marquee”，字体大小为9vp，颜色为灰色，边距为15vp，宽度为父容器的90%\n\n      Text('This is the text with the text overflow set marquee')\n        .width(300) // 设置Text组件的宽度为300vp\n        .borderWidth(1) // 设置Text组件的边框宽度为1vp\n        .textOverflow({ overflow: TextOverflow.MARQUEE }) // 设置文本溢出时的处理方式为跑马灯效果\n    }\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个包含文本和图像的展示界面。布局宽度占据整个屏幕，高度设为100%，内边距为25vp。组件的垂直方向上被分为两个部分，第一个部分包含一个带有边框的文本和图像区域，第二个部分包含一个自定义的菜单区域。\n文本和图像区域通过Column布局实现，宽度为200vp，高度为100vp，边框宽度为1vp，颜色为红色。文本和图像区域内的文本和图像通过Span和ImageSpan组件进行展示，文本内容为\"Hello World\"，图像内容为应用内的图标资源。文本和图像区域支持长按、右键点击和选择操作，分别触发不同的自定义菜单。\n自定义菜单区域通过Builder装饰器定义了三个不同的菜单，分别对应长按图像、右键点击文本和选择混合内容的操作。每个菜单包含一个Column布局，内部嵌套一个Menu组件，Menu组件内包含一个MenuItemGroup组件，MenuItemGroup组件内包含三个MenuItem组件。每个MenuItem组件包含一个图标、内容和点击事件，点击事件触发时关闭当前菜单。\n整个布局通过Column布局保证文本和图像区域在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextExample7 {\n  // 创建一个TextController实例，用于控制文本的选择和菜单的显示\n  controller: TextController = new TextController();\n  // 创建一个TextOptions实例，用于配置文本的控制器\n  options: TextOptions = { controller: this.controller };\n\n  build() {\n    Column() {\n      Column() {\n        // 创建一个Text组件，内容为undefined，使用options配置\n        Text(undefined, this.options) {\n          // 创建一个Span组件，内容为\"Hello World\"\n          Span('Hello World')\n          // 创建一个ImageSpan组件，内容为应用内的图标资源\n          ImageSpan($r('app.media.icon'))\n            .width('100px') // 设置图像宽度为100px\n            .height('100px') // 设置图像高度为100px\n            .objectFit(ImageFit.Fill) // 设置图像填充方式为完全填充\n            .verticalAlign(ImageSpanAlignment.CENTER) // 设置图像垂直对齐方式为居中\n        }\n        .copyOption(CopyOptions.InApp) // 设置文本的复制选项为仅在应用内复制\n        .bindSelectionMenu(TextSpanType.IMAGE, this.LongPressImageCustomMenu, TextResponseType.LONG_PRESS, {\n          onDisappear: () => {\n            console.info(`自定义选择菜单关闭时回调`); // 自定义选择菜单关闭时的回调函数\n          },\n          onAppear: () => {\n            console.info(`自定义选择菜单弹出时回调`); // 自定义选择菜单弹出时的回调函数\n          }\n        })\n        .bindSelectionMenu(TextSpanType.TEXT, this.RightClickTextCustomMenu, TextResponseType.RIGHT_CLICK) // 绑定文本的右键点击菜单\n        .bindSelectionMenu(TextSpanType.MIXED, this.SelectMixCustomMenu, TextResponseType.SELECT) // 绑定混合内容的选中菜单\n        .onTextSelectionChange((selectionStart: number, selectionEnd: number) => {\n          console.info(`文本选中区域变化回调, selectionStart: ${selectionStart}, selectionEnd: ${selectionEnd}`); // 文本选中区域变化时的回调函数\n        })\n        .borderWidth(1) // 设置边框宽度为1vp\n        .borderColor(Color.Red) // 设置边框颜色为红色\n        .width(200) // 设置宽度为200vp\n        .height(100) // 设置高度为100vp\n      }\n      .width('100%') // 设置宽度为100%\n      .backgroundColor(Color.White) // 设置背景颜色为白色\n      .alignItems(HorizontalAlign.Start) // 设置对齐方式为左对齐\n      .padding(25) // 设置内边距为25vp\n    }\n    .height('100%') // 设置高度为100%\n  }\n\n  // 定义右键点击文本时的自定义菜单\n  @Builder\n  RightClickTextCustomMenu() {\n    Column() {\n      Menu() {\n        MenuItemGroup() {\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: \"Right Click Menu 1\", labelInfo: \"\" })\n            .onClick((event) => {\n              this.controller.closeSelectionMenu(); // 点击菜单项时关闭菜单\n            })\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: \"Right Click Menu 2\", labelInfo: \"\" })\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: \"Right Click Menu 3\", labelInfo: \"\" })\n        }\n      }\n      .MenuStyles() // 应用菜单样式\n    }\n  }\n\n  // 定义长按图像时的自定义菜单\n  @Builder\n  LongPressImageCustomMenu() {\n    Column() {\n      Menu() {\n        MenuItemGroup() {\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: \"Long Press Image Menu 1\", labelInfo: \"\" })\n            .onClick((event) => {\n              this.controller.closeSelectionMenu(); // 点击菜单项时关闭菜单\n            })\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: \"Long Press Image Menu 2\", labelInfo: \"\" })\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: \"Long Press Image Menu 3\", labelInfo: \"\" })\n        }\n      }\n      .MenuStyles() // 应用菜单样式\n    }\n  }\n\n  // 定义选择混合内容时的自定义菜单\n  @Builder\n  SelectMixCustomMenu() {\n    Column() {\n      Menu() {\n        MenuItemGroup() {\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: \"Select Mixed Menu 1\", labelInfo: \"\" })\n            .onClick((event) => {\n              this.controller.closeSelectionMenu(); // 点击菜单项时关闭菜单\n            })\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: \"Select Mixed Menu 2\", labelInfo: \"\" })\n          MenuItem({ startIcon: $r('app.media.app_icon'), content: \"Select Mixed Menu 3\", labelInfo: \"\" })\n        }\n      }\n      .MenuStyles() // 应用菜单样式\n    }\n  }\n}\n\n// 定义菜单的样式\n@Extend(Menu)\nfunction MenuStyles() {\n  .radius($r('sys.float.ohos_id_corner_radius_card')) // 设置菜单的圆角半径\n  .clip(true) // 设置菜单的裁剪方式为裁剪\n  .backgroundColor('#F0F0F0') // 设置菜单的背景颜色为浅灰色\n}"
            }
        ],
        "is_common_attrs": true
    },
    "TextArea": {
        "description": "多行文本输入框组件，当输入的文本内容超过组件宽度时会自动换行显示。",
        "details": "高度未设置时，组件无默认高度，自适应内容高度。宽度未设置时，默认撑满最大宽度。",
        "interfaces": [
            {
                "description": "TextArea(value?: TextAreaOptions)",
                "params": {
                    "value": {
                        "type": "TextAreaOptions",
                        "description": "文本输入框的配置选项。"
                    }
                }
            }
        ],
        "attributes": {
            "placeholder": {
                "description": "设置无输入时的提示文本。输入内容后，提示文本不显示。",
                "params": {
                    "value": {
                        "type": "ResourceStr",
                        "description": "提示文本内容。"
                    }
                }
            },
            "text": {
                "description": "设置输入框当前的文本内容。",
                "params": {
                    "value": {
                        "type": "ResourceStr",
                        "description": "输入框的文本内容。"
                    }
                }
            },
            "controller": {
                "description": "设置TextArea控制器。",
                "params": {
                    "value": {
                        "type": "TextAreaController",
                        "description": "TextArea的控制器对象。"
                    }
                }
            },
            "placeholderColor": {
                "description": "设置placeholder文本颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "placeholder文本的颜色。"
                    }
                }
            },
            "placeholderFont": {
                "description": "设置placeholder文本样式，包括字体大小，字体粗细，字体族，字体风格。",
                "params": {
                    "value": {
                        "type": "Font",
                        "required": true,
                        "description": "placeholder文本的样式。"
                    }
                }
            },
            "textAlign": {
                "description": "设置文本在输入框中的水平对齐方式。",
                "params": {
                    "value": {
                        "type": "TextAlign",
                        "required": true,
                        "description": "文本在输入框中的水平对齐方式。",
                        "default": "TextAlign.Start"
                    }
                }
            },
            "caretColor": {
                "description": "设置输入框光标颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "输入框光标的颜色。"
                    }
                }
            },
            "fontColor": {
                "description": "设置字体颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "字体的颜色。"
                    }
                }
            },
            "fontSize": {
                "description": "设置字体大小。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "字体大小。fontSize为number类型时，使用fp单位。字体默认大小16fp。不支持设置百分比字符串。"
                    }
                }
            },
            "fontStyle": {
                "description": "设置字体样式。",
                "params": {
                    "value": {
                        "type": "FontStyle",
                        "required": true,
                        "description": "字体样式。",
                        "default": "FontStyle.Normal"
                    }
                }
            },
            "fontWeight": {
                "description": "设置文本的字体粗细，设置过大可能会在不同字体下有截断。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "FontWeight",
                            "string"
                        ],
                        "required": true,
                        "description": "文本的字体粗细，number类型取值[100, 900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如\"400\"，以及\"bold\"、\"bolder\"、\"lighter\"、\"regular\"、\"medium\"，分别对应FontWeight中相应的枚举值。",
                        "default": "FontWeight.Normal"
                    }
                }
            },
            "fontFamily": {
                "description": "设置字体列表。",
                "params": {
                    "value": {
                        "type": [
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "字体列表。默认字体'HarmonyOS Sans'。"
                    }
                }
            },
            "inputFilter": {
                "description": "通过正则表达式设置输入过滤器。匹配表达式的输入允许显示，不匹配的输入将被过滤。仅支持单个字符匹配，不支持字符串匹配。",
                "params": {
                    "value": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "正则表达式。"
                    },
                    "error": {
                        "type": "(value: string) => void",
                        "description": "正则匹配失败时，返回被过滤的内容。"
                    }
                }
            },
            "copyOption": {
                "description": "设置输入的文本是否可复制。设置CopyOptions.None时，当前TextArea中的文字无法被复制或剪切，仅支持粘贴。",
                "params": {
                    "value": {
                        "type": "CopyOptions",
                        "required": true,
                        "description": "输入的文本是否可复制。",
                        "default": "CopyOptions.LocalDevice"
                    }
                }
            },
            "maxLength": {
                "description": "设置文本的最大输入字符数。默认不设置最大输入字符数限制。到达文本最大字符限制，将无法继续输入字符，同时边框变为红色。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "文本的最大输入字符数。"
                    }
                }
            },
            "showCounter": {
                "description": "设置当通过InputCounterOptions输入的字符数超过阈值时显示计数器。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否显示计数器。"
                    },
                    "options": {
                        "type": "InputCounterOptions",
                        "description": "计数器的配置选项。"
                    }
                }
            },
            "style": {
                "description": "设置文本框多态样式，内联输入风格只支持TextAreaType.Normal类型。",
                "params": {
                    "value": {
                        "type": "TextContentStyle",
                        "required": true,
                        "description": "文本框的多态样式。"
                    }
                }
            },
            "enableKeyboardOnFocus": {
                "description": "设置TextArea通过点击以外的方式获焦时，是否绑定输入法。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否绑定输入法。",
                        "default": true
                    }
                }
            },
            "selectionMenuHidden": {
                "description": "设置是否不弹出系统文本选择菜单。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否不弹出系统文本选择菜单。",
                        "default": false
                    }
                }
            },
            "barState": {
                "description": "设置输入框编辑态时滚动条的显示模式。",
                "params": {
                    "value": {
                        "type": "BarState",
                        "required": true,
                        "description": "输入框编辑态时滚动条的显示模式。",
                        "default": "BarState.Auto"
                    }
                }
            },
            "maxLines": {
                "description": "配置textOverflow一起使用时，maxlines为可显示行数，超出截断；未配置textOverflow时，内联模式获焦状态下内容超出maxlines时，文本可滚动显示，内联模式非获焦状态下不生效maxlines，非内联模式按行截断。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "内联输入风格编辑态时文本可显示的最大行数。",
                        "default": 3
                    }
                }
            },
            "customKeyboard": {
                "description": "设置自定义键盘。",
                "params": {
                    "value": {
                        "type": "CustomBuilder",
                        "required": true,
                        "description": "自定义键盘的构建器。"
                    },
                    "options": {
                        "type": "KeyboardOptions",
                        "description": "自定义键盘的配置选项。"
                    }
                }
            },
            "type": {
                "description": "设置输入框类型。",
                "params": {
                    "value": {
                        "type": "TextAreaType",
                        "required": true,
                        "description": "输入框类型。",
                        "default": "TextAreaType.Normal"
                    }
                }
            },
            "enterKeyType": {
                "description": "设置输入法回车键类型。",
                "params": {
                    "value": {
                        "type": "EnterKeyType",
                        "required": true,
                        "description": "输入法回车键类型。",
                        "default": "EnterKeyType.NEW_LINE"
                    }
                }
            },
            "enableAutoFill": {
                "description": "设置是否启用自动填充。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否启用自动填充。",
                        "default": true
                    }
                }
            },
            "contentType": {
                "description": "设置自动填充类型。",
                "params": {
                    "contentType": {
                        "type": "ContentType",
                        "required": true,
                        "description": "自动填充类型。"
                    }
                }
            },
            "lineHeight": {
                "description": "设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小，number类型时单位为fp。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "文本的文本行高。"
                    }
                }
            },
            "decoration": {
                "description": "设置文本装饰线类型样式及其颜色。",
                "params": {
                    "value": {
                        "type": "TextDecorationOptions",
                        "required": true,
                        "description": "文本装饰线对象。",
                        "default": {
                            "type": "TextDecorationType.None",
                            "color": "Color.Black",
                            "style": "TextDecorationStyle.SOLID"
                        }
                    }
                }
            },
            "letterSpacing": {
                "description": "设置文本字符间距。设置该值为百分比时，按默认值显示。设置该值为0时，按默认值显示。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "文本字符间距。"
                    }
                }
            },
            "wordBreak": {
                "description": "设置文本断行规则。该属性对placeholder文本无效。",
                "params": {
                    "value": {
                        "type": "WordBreak",
                        "required": true,
                        "description": "文本断行规则。",
                        "default": "WordBreak.BREAK_WORD"
                    }
                }
            },
            "selectedBackgroundColor": {
                "description": "设置文本选中底板颜色。如果未设置不透明度，默认为20%不透明度。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "文本选中底板颜色。"
                    }
                }
            },
            "caretStyle": {
                "description": "设置光标风格。",
                "params": {
                    "value": {
                        "type": "CaretStyle",
                        "required": true,
                        "description": "光标风格。"
                    }
                }
            },
            "textIndent": {
                "description": "设置首行文本缩进。",
                "params": {
                    "value": {
                        "type": "Dimension",
                        "required": true,
                        "description": "首行文本缩进。"
                    }
                }
            },
            "textOverflow": {
                "description": "设置文本超长时的显示方式。",
                "params": {
                    "value": {
                        "type": "TextOverflow",
                        "required": true,
                        "description": "文本超长时的显示方式。",
                        "default": "TextOverflow.Clip"
                    }
                }
            },
            "minFontSize": {
                "description": "设置文本最小显示字号。需配合maxFontSize以及maxLines或布局大小限制使用，单独设置不生效。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "文本最小显示字号。"
                    }
                }
            },
            "maxFontSize": {
                "description": "设置文本最大显示字号。需配合minFontSize以及maxLines或布局大小限制使用，单独设置不生效。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "文本最大显示字号。"
                    }
                }
            },
            "heightAdaptivePolicy": {
                "description": "设置文本自适应高度的方式。",
                "params": {
                    "value": {
                        "type": "TextHeightAdaptivePolicy",
                        "required": true,
                        "description": "文本自适应高度的方式。"
                    }
                }
            },
            "lineSpacing": {
                "description": "设置文本的行间距，设置值不大于0时，取默认值0。",
                "params": {
                    "value": {
                        "type": "LengthMetrics",
                        "required": true,
                        "description": "文本的行间距。"
                    }
                }
            },
            "lineBreakStrategy": {
                "description": "设置折行规则。该属性在wordBreak不等于breakAll的时候生效，不支持连词符。",
                "params": {
                    "strategy": {
                        "type": "LineBreakStrategy",
                        "required": true,
                        "description": "折行规则。"
                    }
                }
            },
            "editMenuOptions": {
                "description": "设置自定义菜单扩展项，允许用户设置扩展项的文本内容、图标、回调方法。",
                "params": {
                    "editMenu": {
                        "type": "EditMenuOptions",
                        "required": true,
                        "description": "自定义菜单扩展项的配置。"
                    }
                }
            },
            "enablePreviewText": {
                "description": "设置是否开启输入预上屏。",
                "params": {
                    "enable": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否开启输入预上屏。",
                        "default": true
                    }
                }
            }
        },
        "events": {
            "onChange": {
                "description": "输入内容发生变化时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "EditableTextOnChangeCallback",
                        "required": true,
                        "description": "输入内容发生变化时的回调函数。"
                    }
                }
            },
            "onEditChange": {
                "description": "输入状态变化时，触发该回调。有光标时为编辑态，无光标时为非编辑态。isEditing为true表示正在输入。",
                "params": {
                    "callback": {
                        "type": "(isEditing: boolean) => void",
                        "required": true,
                        "description": "输入状态变化时的回调函数。"
                    }
                }
            },
            "onCopy": {
                "description": "进行复制操作时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "(value: string) => void",
                        "required": true,
                        "description": "进行复制操作时的回调函数。"
                    }
                }
            },
            "onCut": {
                "description": "进行剪切操作时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "(value: string) => void",
                        "required": true,
                        "description": "进行剪切操作时的回调函数。"
                    }
                }
            },
            "onPaste": {
                "description": "进行粘贴操作时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "(value: string, event: PasteEvent) => void",
                        "required": true,
                        "description": "进行粘贴操作时的回调函数。"
                    }
                }
            },
            "onTextSelectionChange": {
                "description": "文本选择的位置发生变化或编辑状态下光标位置发生变化时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "(selectionStart: number, selectionEnd: number) => void",
                        "required": true,
                        "description": "文本选择或光标位置变化时的回调函数。"
                    }
                }
            },
            "onContentScroll": {
                "description": "文本内容滚动时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "(totalOffsetX: number, totalOffsetY: number) => void",
                        "required": true,
                        "description": "文本内容滚动时的回调函数。"
                    }
                }
            },
            "onSubmit": {
                "description": "按下输入法回车键触发该回调。",
                "params": {
                    "callback": {
                        "type": "(enterKey: EnterKeyType) => void",
                        "required": true,
                        "description": "按下输入法回车键时的回调函数。"
                    }
                }
            },
            "onWillInsert": {
                "description": "在将要输入时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "Callback<InsertValue, boolean>",
                        "required": true,
                        "description": "在将要输入时的回调函数。"
                    }
                }
            },
            "onDidInsert": {
                "description": "在输入完成时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "Callback<InsertValue>",
                        "required": true,
                        "description": "在输入完成时的回调函数。"
                    }
                }
            },
            "onWillDelete": {
                "description": "在将要删除时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "Callback<DeleteValue, boolean>",
                        "required": true,
                        "description": "在将要删除时的回调函数。"
                    }
                }
            },
            "onDidDelete": {
                "description": "在删除完成时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "Callback<DeleteValue>",
                        "required": true,
                        "description": "在删除完成时的回调函数。"
                    }
                }
            }
        },
        "rules": [
            "组件不支持clip属性设置，设置该属性任意枚举值对组件文本截断无影响。",
            "TextArea组件不支持设置TextOverflow.MARQUEE模式,当设置为TextOverflow.MARQUEE模式时 显示为TextOverflow.Clip。"
        ],
        "examples": [
            {
                "description": "该组件实现了一个带有计数器的文本输入区域（TextArea）。布局宽度占据整个屏幕，高度设为 100%，背景颜色为 #F1F3F5。组件的垂直方向上包含一个 TextArea 组件，该组件的宽度为 336vp，高度为 56vp，最大输入长度为 6 个字符。TextArea 组件的占位符字体大小为 16，字体粗细为 400。TextArea 组件启用了计数器功能，当输入字符数超过最大长度的 50% 时，计数器会高亮显示。\n\nTextArea 组件的功能包括输入文本的实时更新，当用户输入或删除文本时，TextArea 的值会通过 onChange 事件实时更新到组件的状态变量 text 中。",
                "code": "@Entry\n@Component\nstruct TextAreaExample {\n  @State text: string = '' // 状态变量，用于存储 TextArea 的输入内容\n  controller: TextAreaController = new TextAreaController() // TextArea 的控制器，用于控制 TextArea 的行为\n\n  build() {\n    Column() {\n      TextArea({ text: this.text, controller: this.controller })\n        .placeholderFont({ size: 16, weight: 400 }) // 设置占位符字体大小和粗细\n        .width(336) // 设置 TextArea 的宽度\n        .height(56) // 设置 TextArea 的高度\n        .maxLength(6) // 设置 TextArea 的最大输入长度\n        .showCounter(true, { thresholdPercentage: 50, highlightBorder: true }) // 启用计数器功能，当输入字符数超过最大长度的 50% 时，计数器会高亮显示\n\n        .onChange((value: string) => { // 监听 TextArea 的输入变化事件\n          this.text = value // 更新状态变量 text 的值\n        })\n    }.width('100%').height('100%').backgroundColor('#F1F3F5') // 设置布局的宽度、高度和背景颜色\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个展示文本区域（TextArea）及其字体特征（fontFeature）效果的界面。布局宽度占据整个屏幕的 90%，内边距为左右 5%。组件的垂直方向上被分为两个部分，每个部分包含一个 TextArea 组件。每个 TextArea 组件的文本内容通过 @State 变量进行管理，分别展示了使用 ss01 字体特征和不使用 ss01 字体特征的效果。\n\nTextArea 组件的样式包括字体大小、边距等属性。第一个 TextArea 组件使用了 ss01 字体特征，第二个 TextArea 组件未使用 ss01 字体特征。组件的功能主要是展示不同字体特征对文本显示效果的影响。\n\n整个布局通过 Column 布局保证 TextArea 在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct textArea {\n  @State text1: string = 'This is ss01 on : 0123456789' // 定义一个状态变量 text1，用于存储第一个 TextArea 的文本内容\n  @State text2: string = 'This is ss01 off: 0123456789' // 定义一个状态变量 text2，用于存储第二个 TextArea 的文本内容\n\n  build() {\n    Column(){\n      TextArea({text: this.text1}) // 创建一个 TextArea 组件，显示 text1 的内容\n        .fontSize(20) // 设置字体大小为 20\n        .margin({top:200}) // 设置顶部边距为 200\n        .fontFeature(\"\\\\\"ss01\\\\\" on\") // 启用 ss01 字体特征\n      TextArea({text : this.text2}) // 创建另一个 TextArea 组件，显示 text2 的内容\n        .margin({top:10}) // 设置顶部边距为 10\n        .fontSize(20) // 设置字体大小为 20\n        .fontFeature(\"\\\\\"ss01\\\\\" off\") // 禁用 ss01 字体特征\n    }\n    .width(\"90%\") // 设置布局宽度为屏幕宽度的 90%\n    .margin(\"5%\") // 设置左右边距为屏幕宽度的 5%\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个包含两个 TextArea 输入框的界面。布局宽度占据整个屏幕，高度设为 100%，背景颜色为 #F1F3F5。组件的垂直方向上被分为两个部分，每个部分包含一个 TextArea 输入框。每个 TextArea 输入框的宽度为 95%，高度为 40vp，边距为 20vp。\nTextArea 输入框的样式包括占位符文本、内容类型、自动填充功能和最大输入长度等属性。第一个 TextArea 输入框用于输入电子邮件地址，第二个 TextArea 输入框用于输入街道地址。输入框的功能包括自动填充和输入长度限制，用户可以通过输入内容触发自动填充功能，并且输入长度不能超过 20 个字符。\n整个布局通过 Column 布局保证输入框在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextAreaExample {\n  @State text: string = '' // 定义一个状态变量 text，用于存储输入框的文本内容\n\n  build() {\n    Column() {\n      // 第一个 TextArea 输入框，用于输入电子邮件地址\n      TextArea({ placeholder: 'input your email...' })\n        .width('95%') // 设置输入框的宽度为 95%\n        .height(40) // 设置输入框的高度为 40vp\n        .margin(20) // 设置输入框的边距为 20vp\n        .contentType(ContentType.EMAIL_ADDRESS) // 设置输入框的内容类型为电子邮件地址\n        .enableAutoFill(true) // 启用自动填充功能\n        .maxLength(20) // 设置输入框的最大输入长度为 20 个字符\n\n      // 第二个 TextArea 输入框，用于输入街道地址\n      TextArea({ placeholder: 'input your street address...' })\n        .width('95%') // 设置输入框的宽度为 95%\n        .height(40) // 设置输入框的高度为 40vp\n        .margin(20) // 设置输入框的边距为 20vp\n        .contentType(ContentType.FULL_STREET_ADDRESS) // 设置输入框的内容类型为街道地址\n        .enableAutoFill(true) // 启用自动填充功能\n        .maxLength(20) // 设置输入框的最大输入长度为 20 个字符\n    }\n    .width('100%') // 设置 Column 的宽度为 100%\n    .height('100%') // 设置 Column 的高度为 100%\n    .backgroundColor('#F1F3F5') // 设置 Column 的背景颜色为 #F1F3F5\n  }\n}"
            },
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用TextArea组件绑定自定义键盘。布局上，TextArea组件占据垂直方向的主要空间，高度为200vp，带有1vp宽的边框。自定义键盘通过一个Column组件实现，包含一个关闭按钮和一个Grid组件，用于显示数字和符号按钮。Grid组件采用3列布局，每个按钮的宽度为110vp，按钮之间有10vp的列间距和行间距，整体背景颜色为灰色。\n\n组件的样式包括TextArea的边框样式、自定义键盘的背景颜色和按钮的宽度。组件的排列和嵌套关系为：TextArea位于Column的顶部，自定义键盘位于TextArea下方。组件的功能包括TextArea的输入控制和自定义键盘的按钮点击事件，用户可以通过点击自定义键盘的按钮来输入内容，并通过关闭按钮停止编辑。",
                "code": "@Entry\n@Component\nstruct TextAreaExample {\n  // 创建一个TextAreaController实例，用于控制TextArea的行为\n  controller: TextAreaController = new TextAreaController()\n  \n  // 定义一个状态变量inputValue，用于存储TextArea的输入内容\n  @State inputValue: string = \"\"\n\n  // 自定义键盘的构建器，返回一个包含关闭按钮和数字符号按钮的Column组件\n  @Builder CustomKeyboardBuilder() {\n    Column() {\n      // 关闭按钮，点击后调用controller的stopEditing方法停止编辑\n      Button('x').onClick(() => {\n        this.controller.stopEditing()\n      })\n      \n      // 数字符号按钮的Grid布局，包含12个按钮，每个按钮对应一个数字或符号\n      Grid() {\n        ForEach([1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'], (item: number | string) => {\n          GridItem() {\n            // 每个按钮显示对应的数字或符号，点击后将内容追加到inputValue中\n            Button(item + \"\")\n              .width(110).onClick(() => {\n                this.inputValue += item\n              })\n          }\n        })\n      }\n      .maxCount(3) // 设置Grid的最大列数为3\n      .columnsGap(10) // 设置列间距为10vp\n      .rowsGap(10) // 设置行间距为10vp\n      .padding(5) // 设置内边距为5vp\n    }\n    .backgroundColor(Color.Gray) // 设置自定义键盘的背景颜色为灰色\n  }\n\n  // 构建整个组件的UI结构\n  build() {\n    Column() {\n      // TextArea组件，绑定controller和inputValue，使用自定义键盘\n      TextArea({ controller: this.controller, text: this.inputValue})\n        .customKeyboard(this.CustomKeyboardBuilder()) // 设置自定义键盘\n        .margin(10) // 设置外边距为10vp\n        .border({ width: 1 }) // 设置边框宽度为1vp\n        .height(200) // 设置高度为200vp\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个包含 TextArea 和 Button 的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为两个部分：一个 TextArea 和一个 Button。TextArea 用于用户输入，Button 用于切换 TextArea 的 enterKeyType 属性。\n\nTextArea 的样式包括宽度为 380vp，占位符文本为“请输入用户名”，文本内容与 @State 变量 Text 绑定。TextArea 的 enterKeyType 属性根据 @State 变量 index 动态设置，支持多种 EnterKeyType 类型。TextArea 的功能包括文本输入和提交事件，用户输入的文本会实时更新到 @State 变量 Text，当用户按下回车键时会触发 onSubmit 事件。\n\nButton 的样式包括文本为“改变EnterKeyType”，宽度根据内容自适应。Button 的功能包括点击事件，点击按钮会切换 @State 变量 index 的值，从而改变 TextArea 的 enterKeyType 属性。\n\n整个布局通过 Column 布局保证 TextArea 和 Button 在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextInputExample {\n  @State Text: string = '' // 用于存储 TextArea 的输入文本\n  @State enterTypes: Array<EnterKeyType> = [EnterKeyType.Go, EnterKeyType.Search, EnterKeyType.Send, EnterKeyType.Done, EnterKeyType.Next, EnterKeyType.PREVIOUS, EnterKeyType.NEW_LINE] // 存储多种 EnterKeyType 类型\n  @State index: number = 0 // 用于索引当前的 EnterKeyType 类型\n\n  build() {\n    Column({ space: 20 }) { // 创建一个垂直布局，子组件之间的间距为 20vp\n      TextArea({ placeholder: '请输入用户名', text: this.Text }) // 创建一个 TextArea 组件，占位符为“请输入用户名”，文本内容与 @State 变量 Text 绑定\n        .width(380) // 设置 TextArea 的宽度为 380vp\n        .enterKeyType(this.enterTypes[this.index]) // 根据 @State 变量 index 设置 TextArea 的 enterKeyType 属性\n        .onChange((value: string) => { // 监听 TextArea 的文本变化事件\n          this.Text = value // 将输入的文本更新到 @State 变量 Text\n        })\n        .onSubmit((enterKey: EnterKeyType) => { // 监听 TextArea 的提交事件\n          console.log(\"trigger area onsubmit\" + enterKey); // 打印当前的 EnterKeyType 类型\n        })\n      Button('改变EnterKeyType').onClick(() => { // 创建一个 Button 组件，文本为“改变EnterKeyType”，点击事件用于切换 EnterKeyType 类型\n        this.index = (this.index + 1) % this.enterTypes.length; // 切换 @State 变量 index 的值，从而改变 TextArea 的 enterKeyType 属性\n      })\n    }.width('100%') // 设置 Column 的宽度为 100%\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个文本输入区域（TextArea）的界面。布局宽度占据整个屏幕，高度设为 100%，背景颜色为 #F1F3F5。组件的垂直方向上包含一个 TextArea 组件，该组件用于用户输入文本。\n\nTextArea 组件的宽度为 336vp，高度为 56vp，内边距为 20vp。组件的样式包括背景颜色为白色（#FFFFFF），字体大小为 16vp，字体颜色为 #182431。TextArea 组件的占位符文本为 \"The text area can hold an unlimited amount of text. input your word...\"，占位符文本的字体大小为 16vp，字体粗细为 400。\n\nTextArea 组件的功能包括最大输入长度限制为 4 个字符，并且显示字符计数器。当用户输入或修改文本时，TextArea 的 onChange 事件会被触发，更新组件的 text 状态。\n\n整个布局通过 Column 布局保证 TextArea 在垂直方向上居中显示，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextAreaExample {\n  @State text: string = 'test' // 初始化文本内容为 \"test\"\n  @State counterVisible: boolean = false // 初始化字符计数器可见性为 false\n  @State maxNumber: number = -1 // 初始化最大字符数为 -1\n  controller: TextAreaController = new TextAreaController() // 创建 TextArea 控制器实例\n\n  build() {\n    Column() {\n      TextArea({\n        text: this.text, // 绑定文本内容\n        placeholder: 'The text area can hold an unlimited amount of text. input your word...', // 设置占位符文本\n        controller: this.controller // 绑定 TextArea 控制器\n      })\n        .placeholderFont({ size: 16, weight: 400 }) // 设置占位符文本的字体大小和粗细\n        .width(336) // 设置 TextArea 的宽度为 336vp\n        .height(56) // 设置 TextArea 的高度为 56vp\n        .margin(20) // 设置 TextArea 的内边距为 20vp\n        .fontSize(16) // 设置 TextArea 的字体大小为 16vp\n        .fontColor('#182431') // 设置 TextArea 的字体颜色为 #182431\n        .maxLength(4) // 设置 TextArea 的最大输入长度为 4 个字符\n        .showCounter(true) // 显示字符计数器\n        .backgroundColor('#FFFFFF') // 设置 TextArea 的背景颜色为白色（#FFFFFF）\n        .onChange((value: string) => { // 监听 TextArea 的 onChange 事件\n          this.text = value // 更新 text 状态\n        })\n    }.width('100%').height('100%').backgroundColor('#F1F3F5') // 设置 Column 的宽度为 100%，高度为 100%，背景颜色为 #F1F3F5\n  }\n}"
            },
            {
                "description": "该组件通过 Row 和 Column 布局实现了一个展示三种不同高度自适应策略的文本区域的界面。布局宽度占据整个屏幕的 90%，高度设为 90%，内边距为 10vp。组件的垂直方向上被分为一个标题和三个文本区域。每个文本区域的宽度为 80%，高度为 90vp，边框宽度为 1vp，内边距为 1vp。\n文本区域的样式包括最小字体大小（4）、最大字体大小（40）、最大行数（3）以及三种不同的高度自适应策略（MAX_LINES_FIRST、MIN_FONT_SIZE_FIRST、LAYOUT_CONSTRAINT_FIRST）。文本区域的功能包括根据设置的策略自动调整字体大小以适应文本区域的高度，确保文本在有限的空间内显示完整。\n整个布局通过 Column 布局保证文本区域在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextAreaExample {\n  build() {\n    Row() {\n      Column() {\n        // 标题文本，字体大小为 9，颜色为 0xCCCCCC\n        Text('heightAdaptivePolicy').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 第一个文本区域，设置高度自适应策略为 MAX_LINES_FIRST\n        TextArea({text: 'This is the text with the height adaptive policy set'})\n          .width('80%').height(90).borderWidth(1).margin(1)\n          .minFontSize(4) // 设置最小字体大小为 4\n          .maxFontSize(40) // 设置最大字体大小为 40\n          .maxLines(3) // 设置最大行数为 3\n          .heightAdaptivePolicy(TextHeightAdaptivePolicy.MAX_LINES_FIRST) // 设置高度自适应策略为 MAX_LINES_FIRST\n        \n        // 第二个文本区域，设置高度自适应策略为 MIN_FONT_SIZE_FIRST\n        TextArea({text: 'This is the text with the height adaptive policy set'})\n          .width('80%').height(90).borderWidth(1).margin(1)\n          .minFontSize(4) // 设置最小字体大小为 4\n          .maxFontSize(40) // 设置最大字体大小为 40\n          .maxLines(3) // 设置最大行数为 3\n          .heightAdaptivePolicy(TextHeightAdaptivePolicy.MIN_FONT_SIZE_FIRST) // 设置高度自适应策略为 MIN_FONT_SIZE_FIRST\n        \n        // 第三个文本区域，设置高度自适应策略为 LAYOUT_CONSTRAINT_FIRST\n        TextArea({text: 'This is the text with the height adaptive policy set'})\n          .width('80%').height(90).borderWidth(1).margin(1)\n          .minFontSize(4) // 设置最小字体大小为 4\n          .maxFontSize(40) // 设置最大字体大小为 40\n          .maxLines(3) // 设置最大行数为 3\n          .heightAdaptivePolicy(TextHeightAdaptivePolicy.LAYOUT_CONSTRAINT_FIRST) // 设置高度自适应策略为 LAYOUT_CONSTRAINT_FIRST\n      }.height('90%') // 设置 Column 的高度为 90%\n    }\n    .width('90%') // 设置 Row 的宽度为 90%\n    .margin(10) // 设置 Row 的外边距为 10vp\n  }\n}"
            },
            {
                "description": "该组件通过 Row 和 Column 布局实现了一个展示两个 TextArea 组件及其回调信息的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为多个部分，每个部分包含一个 TextArea 组件和一个显示回调信息的 Text 组件。每个 TextArea 组件的宽度为 300vp，高度为 60vp，且支持插入和删除回调。\nTextArea 组件的样式包括宽度、高度等属性，支持不同的样式展示。Text 组件用于显示插入和删除的回调信息，包括插入的文本、插入的偏移量、删除的文本、删除的偏移量以及删除的方向。\n整个布局通过 Row 和 Column 布局保证组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextAreaExample {\n  // 插入的文本值\n  @State insertValue: string = \"\"\n  // 删除的文本值\n  @State deleteValue: string = \"\"\n  // 插入的偏移量\n  @State insertOffset: number = 0\n  // 删除的偏移量\n  @State deleteOffset: number = 0\n  // 删除的方向（0 表示 BACKWARD，1 表示 FORWARD）\n  @State deleteDirection: number = 0\n\n  build() {\n    Row() {\n      Column() {\n        // 第一个 TextArea 组件，支持插入回调\n        TextArea({ text: \"TextArea支持插入回调文本\" })\n          .width(300)  // 设置宽度为 300vp\n          .height(60)  // 设置高度为 60vp\n          .onWillInsert((info: InsertValue) => {\n            // 插入前的回调，设置插入的文本值\n            this.insertValue = info.insertValue\n            return true;  // 允许插入\n          })\n          .onDidInsert((info: InsertValue) => {\n            // 插入后的回调，设置插入的偏移量\n            this.insertOffset = info.insertOffset\n          })\n\n        // 显示插入的文本值和插入的偏移量\n        Text(\"insertValue:\" + this.insertValue + \"  insertOffset:\" + this.insertOffset).height(30)\n\n        // 第二个 TextArea 组件，支持删除回调\n        TextArea({ text: \"TextArea支持删除回调文本b\" })\n          .width(300)  // 设置宽度为 300vp\n          .height(60)  // 设置高度为 60vp\n          .onWillDelete((info: DeleteValue) => {\n            // 删除前的回调，设置删除的文本值和删除的方向\n            this.deleteValue = info.deleteValue\n            info.direction\n            return true;  // 允许删除\n          })\n          .onDidDelete((info: DeleteValue) => {\n            // 删除后的回调，设置删除的偏移量和删除的方向\n            this.deleteOffset = info.deleteOffset\n            this.deleteDirection = info.direction\n          })\n\n        // 显示删除的文本值和删除的偏移量\n        Text(\"deleteValue:\" + this.deleteValue + \"  deleteOffset:\" + this.deleteOffset).height(30)\n        // 显示删除的方向\n        Text(\"deleteDirection:\" + (this.deleteDirection == 0 ? \"BACKWARD\" : \"FORWARD\")).height(30)\n\n      }.width('100%')  // 设置 Column 的宽度为 100%\n    }\n    .height('100%')  // 设置 Row 的高度为 100%\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示 TextArea 组件在不同 lineSpacing 设置下的效果。布局宽度为 350vp，高度为 600vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组 TextArea。每个 TextArea 组的 TextArea 以垂直布局方式排列，TextArea 之间的间距均匀分布，且对齐方式为左对齐。\nTextArea 的样式包括字体大小、占位符文本等属性，支持不同的 lineSpacing 设置。TextArea 组之间通过 Flex 组件进行分隔。TextArea 的功能包括展示不同 lineSpacing 设置下的文本行间距效果，用户可以通过观察 TextArea 中的占位符文本在不同 lineSpacing 设置下的表现来理解 lineSpacing 的作用。\n整个布局通过 Flex 布局保证 TextArea 在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { LengthMetrics } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct LineSpacingExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      // 标题文本，字体大小为 9，颜色为 0xCCCCCC\n      Text('TextArea lineSpacing.').fontSize(9).fontColor(0xCCCCCC)\n      \n      // 第一个 TextArea，未设置 lineSpacing，字体大小为 12\n      TextArea({ placeholder: 'This is the TextArea with no lineSpacing set.' })\n        .fontSize(12)\n      \n      // 第二个 TextArea，设置 lineSpacing 为 20px，字体大小为 12\n      TextArea({ placeholder: 'This is the TextArea with lineSpacing set to 20_px.' })\n        .fontSize(12)\n        .lineSpacing(LengthMetrics.px(20))\n      \n      // 第三个 TextArea，设置 lineSpacing 为 20vp，字体大小为 12\n      TextArea({ placeholder: 'This is the TextArea with lineSpacing set to 20_vp.' })\n        .fontSize(12)\n        .lineSpacing(LengthMetrics.vp(20))\n      \n      // 第四个 TextArea，设置 lineSpacing 为 20fp，字体大小为 12\n      TextArea({ placeholder: 'This is the TextArea with lineSpacing set to 20_fp.' })\n        .fontSize(12)\n        .lineSpacing(LengthMetrics.fp(20))\n      \n      // 第五个 TextArea，设置 lineSpacing 为 20lpx，字体大小为 12\n      TextArea({ placeholder: 'This is the TextArea with lineSpacing set to 20_lpx.' })\n        .fontSize(12)\n        .lineSpacing(LengthMetrics.lpx(20))\n      \n      // 第六个 TextArea，设置 lineSpacing 为 100%，字体大小为 12\n      TextArea({ placeholder: 'This is the TextArea with lineSpacing set to 100%.' })\n        .fontSize(12)\n        .lineSpacing(LengthMetrics.percent(1))\n    }\n    .height(600) // 设置 Flex 容器的高度为 600vp\n    .width(350) // 设置 Flex 容器的宽度为 350vp\n    .padding({ left: 35, right: 35, top: 35 }) // 设置 Flex 容器的内边距为左右 35vp、顶部 35vp\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示不同 `lineBreakStrategy` 设置对文本换行效果影响的界面。布局宽度为 370vp，高度为 700vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为三个部分，每个部分包含一个标题和一个 `TextArea` 组件。每个 `TextArea` 组件的宽度占据整个父容器的宽度，高度根据内容自适应。\n\n`TextArea` 组件的样式包括字体大小为 12vp，边框宽度为 1vp，内边距为 10vp。每个 `TextArea` 组件的文本内容相同，但通过不同的 `lineBreakStrategy` 设置（`GREEDY`、`HIGH_QUALITY`、`BALANCED`）来展示不同的换行效果。标题部分的文本字体大小为 9vp，颜色为 0xCCCCCC，宽度为 90%，内边距为 10vp。\n\n整个布局通过 Flex 布局保证 `TextArea` 组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextExample1 {\n  @State message1: string = \"They can be classified as built-in components–those directly provided by the ArkUI framework and custom components – those defined by developers\" +\n    \"The built-in components include buttons radio buttonsprogress indicators and text You can set the rendering effectof thesecomponents in method chaining mode,\" +\n    \"page components are divided into independent UI units to implementindependent creation development and reuse of different units on pages making pages more engineering-oriented.\";\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start }) {\n      // 标题：显示 `lineBreakStrategy` 设置为 `GREEDY` 的效果\n      Text('LineBreakStrategy.GREEDY').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n      // `TextArea` 组件，显示文本内容，`lineBreakStrategy` 设置为 `GREEDY`\n      TextArea({text: this.message1})\n        .fontSize(12)\n        .border({ width: 1 })\n        .padding(10)\n        .width('100%')\n        .lineBreakStrategy(LineBreakStrategy.GREEDY)\n\n      // 标题：显示 `lineBreakStrategy` 设置为 `HIGH_QUALITY` 的效果\n      Text('LineBreakStrategy.HIGH_QUALITY').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n      // `TextArea` 组件，显示文本内容，`lineBreakStrategy` 设置为 `HIGH_QUALITY`\n      TextArea({text: this.message1})\n        .fontSize(12)\n        .border({ width: 1 })\n        .padding(10)\n        .width('100%')\n        .lineBreakStrategy(LineBreakStrategy.HIGH_QUALITY)\n\n      // 标题：显示 `lineBreakStrategy` 设置为 `BALANCED` 的效果\n      Text('LineBreakStrategy.BALANCED').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n      // `TextArea` 组件，显示文本内容，`lineBreakStrategy` 设置为 `BALANCED`\n      TextArea({text: this.message1})\n        .fontSize(12)\n        .border({ width: 1 })\n        .padding(10)\n        .width('100%')\n        .lineBreakStrategy(LineBreakStrategy.BALANCED)\n    }.height(700).width(370).padding({ left: 35, right: 35, top: 35 })\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个包含 TextArea 和两个按钮的界面。布局宽度占据整个屏幕，高度设为 100%，背景颜色为 #F1F3F5。组件的垂直方向上被分为多个部分，每个部分包含一个 TextArea 和两个按钮。TextArea 用于输入文本，按钮用于设置光标位置和获取光标偏移信息。\n\nTextArea 的样式包括宽度为 336vp，高度为 56vp，内边距为 20vp，字体大小为 16vp，字体颜色为 #182431，背景颜色为 #FFFFFF。TextArea 的占位符字体大小为 16vp，字体粗细为 400。TextArea 的占位符文本为 \"The text area can hold an unlimited amount of text. input your word...\"。\n\n按钮的样式包括背景颜色为 #007DFF，内边距为 15vp。按钮的功能包括点击事件，用户可以通过点击按钮设置 TextArea 的光标位置或获取光标偏移信息。\n\n整个布局通过 Column 布局保证 TextArea 和按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextAreaExample {\n  @State text: string = '' // 用于存储 TextArea 中的文本内容\n  @State positionInfo: CaretOffset = { index: 0, x: 0, y: 0 } // 用于存储光标偏移信息\n  controller: TextAreaController = new TextAreaController() // 用于控制 TextArea 的控制器\n\n  build() {\n    Column() {\n      TextArea({\n        text: this.text, // 绑定 TextArea 的文本内容\n        placeholder: 'The text area can hold an unlimited amount of text. input your word...', // 设置 TextArea 的占位符文本\n        controller: this.controller // 绑定 TextArea 的控制器\n      })\n        .placeholderFont({ size: 16, weight: 400 }) // 设置占位符字体大小和粗细\n        .width(336) // 设置 TextArea 的宽度\n        .height(56) // 设置 TextArea 的高度\n        .margin(20) // 设置 TextArea 的内边距\n        .fontSize(16) // 设置 TextArea 的字体大小\n        .fontColor('#182431') // 设置 TextArea 的字体颜色\n        .backgroundColor('#FFFFFF') // 设置 TextArea 的背景颜色\n        .onChange((value: string) => { // 监听 TextArea 的文本变化事件\n          this.text = value // 更新文本内容\n        })\n      Text(this.text) // 显示 TextArea 中的文本内容\n      Button('Set caretPosition 1') // 创建一个按钮，用于设置光标位置\n        .backgroundColor('#007DFF') // 设置按钮的背景颜色\n        .margin(15) // 设置按钮的内边距\n        .onClick(() => { // 监听按钮的点击事件\n          this.controller.caretPosition(1) // 设置 TextArea 的光标位置为 1\n        })\n      Button('Get CaretOffset') // 创建一个按钮，用于获取光标偏移信息\n        .backgroundColor('#007DFF') // 设置按钮的背景颜色\n        .margin(15) // 设置按钮的内边距\n        .onClick(() => { // 监听按钮的点击事件\n          this.positionInfo = this.controller.getCaretOffset() // 获取 TextArea 的光标偏移信息并更新状态\n        })\n    }.width('100%').height('100%').backgroundColor('#F1F3F5') // 设置 Column 的宽度、高度和背景颜色\n  }\n}"
            },
            {
                "description": "该组件展示了不同wordBreak属性的TextArea样式。布局采用垂直排列（Column），包含多个TextArea实例，每个实例展示不同的wordBreak属性效果。布局宽度未明确设置，默认撑满最大宽度；高度未设置，自适应内容高度。每个TextArea实例的文本内容较长，用于展示wordBreak属性对文本换行的影响。\n\n组件的样式包括字体大小、边框样式和颜色。字体大小统一设置为16，边框宽度为1，颜色未明确设置，使用默认颜色。每个TextArea实例上方都有一个Text组件，用于描述当前TextArea的wordBreak属性类型，字体大小为16，颜色为红色（0xFF0000）。\n\n组件的排列和嵌套关系如下：整个布局通过Column组件实现垂直排列，每个TextArea实例及其上方的Text组件依次排列。Text组件用于描述，TextArea组件用于展示实际效果。\n\n组件的功能和交互主要体现在TextArea的wordBreak属性上，该属性控制文本在超出宽度时的换行方式。通过设置不同的wordBreak属性，可以观察到文本在不同换行方式下的表现。",
                "code": "@Entry\n@Component\nstruct TextAreaExample {\n  build() {\n    Column() {\n      // 描述属性WordBreakType为NORMAL的样式\n      Text(\"属性WordBreakType为NORMAL的样式：\").fontSize(16).fontColor(0xFF0000)\n      TextArea({\n        text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'\n      })\n        .fontSize(16) // 设置字体大小为16\n        .border({ width: 1 }) // 设置边框宽度为1\n        .wordBreak(WordBreak.NORMAL) // 设置wordBreak属性为NORMAL\n\n      // 描述英文文本，属性WordBreakType为BREAK_ALL的样式\n      Text(\"英文文本，属性WordBreakType为BREAK_ALL的样式：\").fontSize(16).fontColor(0xFF0000)\n      TextArea({\n        text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'\n      })\n        .fontSize(16) // 设置字体大小为16\n        .border({ width: 1 }) // 设置边框宽度为1\n        .wordBreak(WordBreak.BREAK_ALL) // 设置wordBreak属性为BREAK_ALL\n\n      // 描述中文文本，属性WordBreakType为BREAK_ALL的样式\n      Text(\"中文文本，属性WordBreakType为BREAK_ALL的样式：\").fontSize(16).fontColor(0xFF0000)\n      TextArea({\n        text: '多行文本输入框组件，当输入的文本内容超过组件宽度时会自动换行显示。\\\\n高度未设置时，组件无默认高度，自适应内容高度。宽度未设置时，默认撑满最大宽度。'\n      })\n        .fontSize(16) // 设置字体大小为16\n        .border({ width: 1 }) // 设置边框宽度为1\n        .wordBreak(WordBreak.BREAK_ALL) // 设置wordBreak属性为BREAK_ALL\n\n      // 描述属性WordBreakType为BREAK_WORD的样式\n      Text(\"属性WordBreakType为BREAK_WORD的样式：\").fontSize(16).fontColor(0xFF0000)\n      TextArea({\n        text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'\n      })\n        .fontSize(16) // 设置字体大小为16\n        .border({ width: 1 }) // 设置边框宽度为1\n        .wordBreak(WordBreak.BREAK_WORD) // 设置wordBreak属性为BREAK_WORD\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个包含 TextArea 组件的界面。布局宽度占据整个屏幕的 90%，高度根据内容自适应，内边距为左右 5%。组件的垂直方向上包含一个 TextArea 组件，其宽度为 95%，高度为 56vp，顶部外边距为 100vp。\nTextArea 组件的样式包括默认文本内容、宽度和高度等属性。TextArea 组件的功能包括自定义编辑菜单选项，用户可以通过长按或右键点击 TextArea 触发编辑菜单，菜单项包括复制、全选以及两个自定义菜单项。每个菜单项可以设置自定义文本内容、图标和点击回调方法。\n整个布局通过 Column 布局保证 TextArea 在垂直方向上居中显示，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextAreaExample {\n  @State text: string = 'TextArea editMenuOptions' // 初始化 TextArea 的文本内容\n\n  // 自定义编辑菜单项的创建方法\n  onCreateMenu(menuItems: Array<TextMenuItem>) {\n    menuItems.forEach((value, index) => {\n      value.icon = $r('app.media.startIcon') // 设置菜单项的图标\n      if (value.id.equals(TextMenuItemId.COPY)) {\n        value.content = \"复制change\" // 修改复制菜单项的文本内容\n      }\n      if (value.id.equals(TextMenuItemId.SELECT_ALL)) {\n        value.content = \"全选change\" // 修改全选菜单项的文本内容\n      }\n    })\n    let item1: TextMenuItem = {\n      content: 'custom1', // 自定义菜单项1的文本内容\n      icon: $r('app.media.startIcon'), // 自定义菜单项1的图标\n      id: TextMenuItemId.of('custom1'), // 自定义菜单项1的唯一标识\n    }\n    let item2: TextMenuItem = {\n      content: 'custom2', // 自定义菜单项2的文本内容\n      id: TextMenuItemId.of('custom2'), // 自定义菜单项2的唯一标识\n      icon: $r('app.media.startIcon'), // 自定义菜单项2的图标\n    }\n    menuItems.push(item1) // 将自定义菜单项1添加到菜单项列表的末尾\n    menuItems.unshift(item2) // 将自定义菜单项2添加到菜单项列表的开头\n    return menuItems // 返回修改后的菜单项列表\n  }\n\n  build() {\n    Column() {\n      TextArea({ text: this.text }) // 创建 TextArea 组件，并设置初始文本内容\n        .width('95%') // 设置 TextArea 的宽度为 95%\n        .height(56) // 设置 TextArea 的高度为 56vp\n        .editMenuOptions({\n          onCreateMenu: this.onCreateMenu, // 设置自定义编辑菜单项的创建方法\n          onMenuItemClick: (menuItem: TextMenuItem, textRange: TextRange) => { // 设置菜单项点击回调方法\n            if (menuItem.id.equals(TextMenuItemId.of(\"custom2\"))) {\n              console.log(\"拦截 id: custom2 start:\" + textRange.start + \"; end:\" + textRange.end) // 拦截自定义菜单项2的点击事件\n              return true; // 返回 true 表示拦截该事件\n            }\n            if (menuItem.id.equals(TextMenuItemId.COPY)) {\n              console.log(\"拦截 COPY start:\" + textRange.start + \"; end:\" + textRange.end) // 拦截复制菜单项的点击事件\n              return true; // 返回 true 表示拦截该事件\n            }\n            if (menuItem.id.equals(TextMenuItemId.SELECT_ALL)) {\n              console.log(\"不拦截 SELECT_ALL start:\" + textRange.start + \"; end:\" + textRange.end) // 不拦截全选菜单项的点击事件\n              return false; // 返回 false 表示不拦截该事件\n            }\n            return false; // 默认返回 false 表示不拦截事件\n          }\n        })\n        .margin({ top: 100 }) // 设置 TextArea 的顶部外边距为 100vp\n    }\n    .width(\"90%\") // 设置 Column 的宽度为 90%\n    .margin(\"5%\") // 设置 Column 的左右外边距为 5%\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示文本行高、字符间距和文本装饰线样式的界面。布局宽度占据整个屏幕的 90%，高度设为 90%，内边距为 10vp。组件的垂直方向上被分为三个部分，每个部分包含一个标题和一组 TextArea 组件。每个 TextArea 组件以垂直布局方式排列，TextArea 之间的间距均匀分布，且对齐方式为居中对齐。\nTextArea 的样式包括边框宽度、内边距、外边距等属性，支持不同的文本行高、字符间距和文本装饰线样式展示。每个 TextArea 组件的功能包括展示不同的文本行高、字符间距和文本装饰线样式，用户可以通过观察 TextArea 组件的变化来理解这些属性的效果。\n整个布局通过 Flex 布局保证 TextArea 在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextAreaExample {\n  build() {\n    Row() {\n      Column() {\n        // 展示文本行高的标题\n        Text('lineHeight').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 未设置文本行高的 TextArea\n        TextArea({text: 'lineHeight unset'})\n          .border({ width: 1 }) // 设置边框宽度\n          .padding(10) // 设置内边距\n          .margin(5) // 设置外边距\n        \n        // 设置文本行高为 15 的 TextArea\n        TextArea({text: 'lineHeight 15'})\n          .border({ width: 1 }) // 设置边框宽度\n          .padding(10) // 设置内边距\n          .margin(5) // 设置外边距\n          .lineHeight(15) // 设置文本行高\n        \n        // 设置文本行高为 30 的 TextArea\n        TextArea({text: 'lineHeight 30'})\n          .border({ width: 1 }) // 设置边框宽度\n          .padding(10) // 设置内边距\n          .margin(5) // 设置外边距\n          .lineHeight(30) // 设置文本行高\n\n        // 展示字符间距的标题\n        Text('letterSpacing').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 设置字符间距为 0 的 TextArea\n        TextArea({text: 'letterSpacing 0'})\n          .border({ width: 1 }) // 设置边框宽度\n          .padding(5) // 设置内边距\n          .margin(5) // 设置外边距\n          .letterSpacing(0) // 设置字符间距\n        \n        // 设置字符间距为 3 的 TextArea\n        TextArea({text: 'letterSpacing 3'})\n          .border({ width: 1 }) // 设置边框宽度\n          .padding(5) // 设置内边距\n          .margin(5) // 设置外边距\n          .letterSpacing(3) // 设置字符间距\n        \n        // 设置字符间距为 -1 的 TextArea\n        TextArea({text: 'letterSpacing -1'})\n          .border({ width: 1 }) // 设置边框宽度\n          .padding(5) // 设置内边距\n          .margin(5) // 设置外边距\n          .letterSpacing(-1) // 设置字符间距\n\n        // 展示文本装饰线样式的标题\n        Text('decoration').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 设置文本装饰线为删除线、红色\n        TextArea({text: 'LineThrough, Red\\\\nsecond line'})\n          .border({ width: 1 }) // 设置边框宽度\n          .padding(5) // 设置内边距\n          .margin(5) // 设置外边距\n          .decoration({type: TextDecorationType.LineThrough, color: Color.Red}) // 设置文本装饰线\n        \n        // 设置文本装饰线为上划线、红色、点状\n        TextArea({text: 'Overline, Red, DOTTED\\\\nsecond line'})\n          .border({ width: 1 }) // 设置边框宽度\n          .padding(5) // 设置内边距\n          .margin(5) // 设置外边距\n          .decoration({type: TextDecorationType.Overline, color: Color.Red, style: TextDecorationStyle.DOTTED}) // 设置文本装饰线\n        \n        // 设置文本装饰线为下划线、红色、波浪状\n        TextArea({text: 'Underline, Red, WAVY\\\\nsecond line'})\n          .border({ width: 1 }) // 设置边框宽度\n          .padding(5) // 设置内边距\n          .margin(5) // 设置外边距\n          .decoration({type: TextDecorationType.Underline, color: Color.Red, style: TextDecorationStyle.WAVY}) // 设置文本装饰线\n      }.height('90%') // 设置 Column 的高度\n    }\n    .width('90%') // 设置 Row 的宽度\n    .margin(10) // 设置 Row 的外边距\n  }\n}"
            },
            {
                "description": "该组件实现了一个自定义键盘弹出时发生避让的示例。布局宽度占据整个屏幕，主要分为两个部分：顶部是一个按钮组，用于调整文本区域的高度；底部是一个文本输入区域，支持自定义键盘的弹出和避让功能。\n\n布局属性：\n- 按钮组的高度通过 `@State` 变量 `height1` 控制，初始值为 '80%'。\n- 文本输入区域的高度固定为 100vp。\n- 按钮组和文本输入区域之间有 50vp 的底部内边距。\n\n组件的样式和外观：\n- 按钮组的按钮字体大小为 24，点击时可以切换文本区域的高度。\n- 自定义键盘的背景颜色为灰色。\n- 文本输入区域的边框宽度为 1vp。\n\n组件的排列和嵌套关系：\n- 按钮组和文本输入区域都嵌套在 `Column` 布局中，垂直排列。\n- 按钮组内部的按钮通过 `Row` 布局水平排列，对齐方式为居中对齐。\n- 自定义键盘通过 `Grid` 布局实现，每行最多显示 3 个按钮，按钮之间有 10vp 的列间距和行间距。\n\n组件的功能和交互：\n- 点击按钮组中的按钮可以动态调整文本区域的高度。\n- 文本输入区域支持自定义键盘的弹出，键盘弹出时会根据 `supportAvoidance` 属性决定是否发生避让。\n- 自定义键盘的按钮点击事件会将对应的字符添加到文本输入区域中。\n- 点击自定义键盘的关闭按钮会停止编辑。",
                "code": "@Entry\n@Component\nstruct TextAreaExample {\n  controller: TextAreaController = new TextAreaController() // 创建一个 TextAreaController 实例，用于控制文本输入区域的行为\n  @State inputValue: string = \"\" // 定义一个状态变量，用于存储文本输入区域的值\n  @State height1: string | number = '80%' // 定义一个状态变量，用于控制按钮组的高度，初始值为 '80%'\n  @State height2: number = 100 // 定义一个状态变量，用于控制文本输入区域的高度，初始值为 100vp\n  @State supportAvoidance: boolean = true // 定义一个状态变量，用于控制自定义键盘弹出时是否发生避让，初始值为 true\n\n  @Builder CustomKeyboardBuilder() { // 定义一个自定义键盘的构建器\n    Column() {\n      Row() {\n        Button('x').onClick(() => { // 创建一个关闭按钮，点击时停止编辑\n          this.controller.stopEditing() // 调用 TextAreaController 的 stopEditing 方法停止编辑\n        }).margin(10) // 设置按钮的外边距为 10vp\n      }\n      Grid() {\n        ForEach([1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'], (item: number | string) => { // 遍历数字和符号数组，创建键盘按钮\n          GridItem() {\n            Button(item + \"\") // 创建一个按钮，显示当前遍历的数字或符号\n              .width(110).onClick(() => { // 设置按钮的宽度为 110vp，并绑定点击事件\n                this.inputValue += item // 点击按钮时，将对应的字符添加到文本输入区域中\n              })\n          }\n        })\n      }.maxCount(3).columnsGap(10).rowsGap(10).padding(5) // 设置 Grid 布局的属性：每行最多显示 3 个按钮，按钮之间的列间距和行间距为 10vp，内边距为 5vp\n    }.backgroundColor(Color.Gray) // 设置自定义键盘的背景颜色为灰色\n  }\n\n  build() {\n    Column() {\n      Row() {\n        Button(\"20%\") // 创建一个按钮，显示 \"20%\"\n          .fontSize(24) // 设置按钮的字体大小为 24\n          .onClick(() => { // 绑定点击事件\n            this.height1 = \"20%\" // 点击按钮时，将按钮组的高度设置为 \"20%\"\n          })\n        Button(\"80%\") // 创建一个按钮，显示 \"80%\"\n          .fontSize(24) // 设置按钮的字体大小为 24\n          .margin({ left: 20 }) // 设置按钮的左边距为 20vp\n          .onClick(() => { // 绑定点击事件\n            this.height1 = \"80%\" // 点击按钮时，将按钮组的高度设置为 \"80%\"\n          })\n      }\n      .justifyContent(FlexAlign.Center) // 设置按钮组的对齐方式为居中对齐\n      .alignItems(VerticalAlign.Bottom) // 设置按钮组的垂直对齐方式为底部对齐\n      .height(this.height1) // 设置按钮组的高度为 `height1` 的值\n      .width(\"100%\") // 设置按钮组的宽度为 100%\n      .padding({ bottom: 50 }) // 设置按钮组的底部内边距为 50vp\n      TextArea({ controller: this.controller, text: this.inputValue }) // 创建一个文本输入区域，绑定 TextAreaController 和输入值\n        .height(100) // 设置文本输入区域的高度为 100vp\n        .customKeyboard(this.CustomKeyboardBuilder(), { supportAvoidance: this.supportAvoidance }) // 设置自定义键盘，并根据 `supportAvoidance` 属性决定是否发生避让\n        .margin(10) // 设置文本输入区域的外边距为 10vp\n        .border({ width: 1 }) // 设置文本输入区域的边框宽度为 1vp\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "TextInput": {
        "description": "单行文本输入框组件。",
        "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "TextInput(value?: TextInputOptions)",
                "params": {
                    "value": {
                        "type": "TextInputOptions",
                        "description": "文本输入框的初始值。"
                    }
                }
            }
        ],
        "attributes": {
            "placeholder": {
                "description": "设置无输入时的提示文本。",
                "params": {
                    "value": {
                        "type": "ResourceStr",
                        "description": "提示文本内容。"
                    }
                }
            },
            "text": {
                "description": "设置输入框当前的文本内容。",
                "params": {
                    "value": {
                        "type": "ResourceStr",
                        "description": "输入框的文本内容。"
                    }
                }
            },
            "controller": {
                "description": "设置TextInput控制器。",
                "params": {
                    "value": {
                        "type": "TextInputController",
                        "description": "TextInput的控制器。"
                    }
                }
            },
            "type": {
                "description": "设置输入框类型。",
                "params": {
                    "value": {
                        "type": "InputType",
                        "required": true,
                        "description": "输入框类型。",
                        "default": "InputType.Normal"
                    }
                }
            },
            "placeholderColor": {
                "description": "设置placeholder文本颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "placeholder文本颜色。"
                    }
                }
            },
            "placeholderFont": {
                "description": "设置placeholder文本样式，包括字体大小，字体粗细，字体族，字体风格。",
                "params": {
                    "value": {
                        "type": "Font",
                        "description": "placeholder文本样式。"
                    }
                }
            },
            "enterKeyType": {
                "description": "设置输入法回车键类型。",
                "params": {
                    "value": {
                        "type": "EnterKeyType",
                        "required": true,
                        "description": "输入法回车键类型。",
                        "default": "EnterKeyType.Done"
                    }
                }
            },
            "caretColor": {
                "description": "设置输入框光标颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "输入框光标颜色。"
                    }
                }
            },
            "maxLength": {
                "description": "设置文本的最大输入字符数。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "文本的最大输入字符数。",
                        "default": "Infinity"
                    }
                }
            },
            "fontColor": {
                "description": "设置字体颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "字体颜色。"
                    }
                }
            },
            "fontSize": {
                "description": "设置字体大小。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "字体大小。fontSize为number类型时，使用fp单位。字体默认大小16fp。不支持设置百分比字符串。"
                    }
                }
            },
            "fontStyle": {
                "description": "设置字体样式。",
                "params": {
                    "value": {
                        "type": "FontStyle",
                        "required": true,
                        "description": "字体样式。",
                        "default": "FontStyle.Normal"
                    }
                }
            },
            "fontWeight": {
                "description": "设置文本的字体粗细，设置过大可能会在不同字体下有截断。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "FontWeight",
                            "string"
                        ],
                        "required": true,
                        "description": "文本的字体粗细，number类型取值[100, 900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如\"400\"，以及\"bold\"、\"bolder\"、\"lighter\"、\"regular\"、\"medium\"，分别对应FontWeight中相应的枚举值。",
                        "default": "FontWeight.Normal"
                    }
                }
            },
            "fontFamily": {
                "description": "设置字体列表。",
                "params": {
                    "value": {
                        "type": [
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "字体列表。默认字体'HarmonyOS Sans'。"
                    }
                }
            },
            "inputFilter": {
                "description": "通过正则表达式设置输入过滤器。匹配表达式的输入允许显示，不匹配的输入将被过滤。仅支持单个字符匹配，不支持字符串匹配。",
                "params": {
                    "value": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "正则表达式。"
                    },
                    "error": {
                        "type": "(value: string) => void",
                        "description": "正则匹配失败时，返回被过滤的内容。"
                    }
                }
            },
            "copyOption": {
                "description": "设置输入的文本是否可复制。设置CopyOptions.None时，当前TextInput中的文字无法被复制或剪切，仅支持粘贴。",
                "params": {
                    "value": {
                        "type": "CopyOptions",
                        "required": true,
                        "description": "输入的文本是否可复制。",
                        "default": "CopyOptions.LocalDevice"
                    }
                }
            },
            "showPasswordIcon": {
                "description": "设置当密码输入模式时，输入框末尾的图标是否显示。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "密码输入模式时，输入框末尾的图标是否显示。",
                        "default": true
                    }
                }
            },
            "style": {
                "description": "设置输入框为默认风格或内联输入风格，内联输入风格只支持InputType.Normal类型。",
                "params": {
                    "value": {
                        "type": [
                            "TextInputStyle",
                            "TextContentStyle"
                        ],
                        "required": true,
                        "description": "输入框风格。"
                    }
                }
            },
            "textAlign": {
                "description": "设置文本在输入框中的水平对齐方式。",
                "params": {
                    "value": {
                        "type": "TextAlign",
                        "required": true,
                        "description": "文本在输入框中的水平对齐方式。",
                        "default": "TextAlign.Start"
                    }
                }
            },
            "selectedBackgroundColor": {
                "description": "设置文本选中底板颜色。如果未设置不透明度，默认为20%不透明度。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "文本选中底板颜色。"
                    }
                }
            },
            "caretStyle": {
                "description": "设置光标风格。",
                "params": {
                    "value": {
                        "type": "CaretStyle",
                        "required": true,
                        "description": "光标风格。"
                    }
                }
            },
            "caretPosition": {
                "description": "设置光标位置。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "光标的位置。"
                    }
                }
            },
            "showUnit": {
                "description": "设置控件作为文本框单位。需搭配showUnderline使用，当showUnderline为true时生效。",
                "params": {
                    "value": {
                        "type": "CustomBuilder",
                        "required": true,
                        "description": "控件作为文本框单位。"
                    }
                }
            },
            "showError": {
                "description": "设置错误状态下提示的错误文本或者不显示错误状态。",
                "params": {
                    "value": {
                        "type": [
                            "ResourceStr",
                            "undefined"
                        ],
                        "description": "错误状态下提示的错误文本或者不显示错误状态。",
                        "default": "undefined"
                    }
                }
            },
            "showUnderline": {
                "description": "设置是否开启下划线。下划线默认颜色为'#33182431'，默认粗细为1px，文本框尺寸48vp，下划线只支持InputType.Normal类型。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否开启下划线。",
                        "default": false
                    }
                }
            },
            "passwordIcon": {
                "description": "设置当密码输入模式时，输入框末尾的图标。",
                "params": {
                    "value": {
                        "type": "PasswordIcon",
                        "required": true,
                        "description": "密码输入模式时，输入框末尾的图标。",
                        "default": "系统提供的密码图标。"
                    }
                }
            },
            "enableKeyboardOnFocus": {
                "description": "设置TextInput通过点击以外的方式获焦时，是否绑定输入法。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "通过点击以外的方式获焦时，是否绑定输入法。",
                        "default": true
                    }
                }
            },
            "selectionMenuHidden": {
                "description": "设置是否不弹出系统文本选择菜单。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否不弹出系统文本选择菜单。",
                        "default": false
                    }
                }
            },
            "barState": {
                "description": "设置内联输入风格编辑态时滚动条的显示模式。",
                "params": {
                    "value": {
                        "type": "BarState",
                        "required": true,
                        "description": "内联输入风格编辑态时滚动条的显示模式。",
                        "default": "BarState.Auto"
                    }
                }
            },
            "maxLines": {
                "description": "设置内联输入风格编辑态时文本可显示的最大行数。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "内联输入风格编辑态时文本可显示的最大行数。",
                        "default": 3
                    }
                }
            },
            "customKeyboard": {
                "description": "设置自定义键盘。",
                "params": {
                    "value": {
                        "type": "CustomBuilder",
                        "required": true,
                        "description": "自定义键盘。"
                    },
                    "options": {
                        "type": "KeyboardOptions",
                        "description": "自定义键盘的选项。"
                    }
                }
            },
            "enableAutoFill": {
                "description": "设置是否启用自动填充。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否启用自动填充。",
                        "default": true
                    }
                }
            },
            "passwordRules": {
                "description": "定义生成密码的规则。在触发自动填充时，所设置的密码规则会透传给密码保险箱，用于新密码的生成。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "定义生成密码的规则。"
                    }
                }
            },
            "cancelButton": {
                "description": "设置右侧清除按钮样式。不支持内联模式。",
                "params": {
                    "value": {
                        "type": {
                            "style": "CancelButtonStyle",
                            "icon": "IconOptions"
                        },
                        "required": true,
                        "description": "右侧清除按钮样式。"
                    }
                }
            },
            "selectAll": {
                "description": "设置当初始状态，是否全选文本。不支持内联模式。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否全选文本。",
                        "default": false
                    }
                }
            },
            "showCounter": {
                "description": "设置当通过InputCounterOptions输入的字符数超过阈值时显示计数器。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否显示计数器。",
                        "default": false
                    },
                    "options": {
                        "type": "InputCounterOptions",
                        "description": "计数器的选项。"
                    }
                }
            },
            "contentType": {
                "description": "设置自动填充类型。",
                "params": {
                    "value": {
                        "type": "ContentType",
                        "required": true,
                        "description": "自动填充类型。"
                    }
                }
            },
            "underlineColor": {
                "description": "开启下划线时，支持配置下划线颜色。",
                "params": {
                    "value": {
                        "type": [
                            "ResourceColor",
                            "UnderlineColor",
                            "undefined"
                        ],
                        "required": true,
                        "description": "设置下划线颜色。",
                        "default": "主题配置的下划线颜色。主题配置的默认下滑颜色为'#33182431'。"
                    }
                }
            },
            "lineHeight": {
                "description": "设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小，number类型时单位为fp。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "文本的文本行高。"
                    }
                }
            },
            "decoration": {
                "description": "设置文本装饰线类型样式及其颜色。密码模式不生效。",
                "params": {
                    "value": {
                        "type": "TextDecorationOptions",
                        "required": true,
                        "description": "文本装饰线对象。",
                        "default": {
                            "type": "TextDecorationType.None",
                            "color": "Color.Black",
                            "style": "TextDecorationStyle.SOLID"
                        }
                    }
                }
            },
            "letterSpacing": {
                "description": "设置文本字符间距。设置该值为百分比时，按默认值显示。设置该值为0时，按默认值显示。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "文本字符间距。"
                    }
                }
            },
            "fontFeature": {
                "description": "设置文字特性效果，比如数字等宽的特性。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "文字特性效果。"
                    }
                }
            },
            "wordBreak": {
                "description": "设置文本断行规则。该属性在组件设置内联模式时样式生效，但对placeholder文本无效。",
                "params": {
                    "value": {
                        "type": "WordBreak",
                        "required": true,
                        "description": "内联输入风格编辑态时断行规则。",
                        "default": "WordBreak.BREAK_WORD"
                    }
                }
            },
            "textOverflow": {
                "description": "设置文本超长时的显示方式。仅在内联模式的编辑态、非编辑态下支持。",
                "params": {
                    "value": {
                        "type": "TextOverflow",
                        "required": true,
                        "description": "文本超长时的显示方式。",
                        "default": {
                            "inline_non_editing": "TextOverflow.Ellipsis",
                            "inline_editing": "TextOverflow.Clip"
                        }
                    }
                }
            },
            "textIndent": {
                "description": "设置首行文本缩进。",
                "params": {
                    "value": {
                        "type": "Dimension",
                        "required": true,
                        "description": "首行文本缩进。"
                    }
                }
            },
            "minFontSize": {
                "description": "设置文本最小显示字号。需配合maxFontSize以及maxLines(组件设置为内联输入风格且编辑态时使用)或布局大小限制使用，单独设置不生效。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "文本最小显示字号。"
                    }
                }
            },
            "maxFontSize": {
                "description": "设置文本最大显示字号。需配合minFontSize以及maxLines(组件设置为内联输入风格且编辑态时使用)或布局大小限制使用，单独设置不生效。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "文本最大显示字号。"
                    }
                }
            },
            "heightAdaptivePolicy": {
                "description": "组件设置为内联输入风格时，设置文本自适应高度的方式。",
                "params": {
                    "value": {
                        "type": "TextHeightAdaptivePolicy",
                        "required": true,
                        "description": "文本自适应高度的方式。",
                        "default": "TextHeightAdaptivePolicy.MAX_LINES_FIRST"
                    }
                }
            },
            "showPassword": {
                "description": "设置密码的显隐状态。需组合密码模式才能生效，非密码输入模式不生效。",
                "params": {
                    "visible": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否显示密码。",
                        "default": false
                    }
                }
            },
            "lineBreakStrategy": {
                "description": "设置折行规则。该属性在wordBreak不等于breakAll的时候生效，不支持连词符。",
                "params": {
                    "strategy": {
                        "type": "LineBreakStrategy",
                        "required": true,
                        "description": "文本的折行规则。",
                        "default": "LineBreakStrategy.GREEDY"
                    }
                }
            },
            "editMenuOptions": {
                "description": "设置自定义菜单扩展项，允许用户设置扩展项的文本内容、图标、回调方法。",
                "params": {
                    "editMenu": {
                        "type": "EditMenuOptions",
                        "required": true,
                        "description": "自定义菜单扩展项。"
                    }
                }
            },
            "enablePreviewText": {
                "description": "设置是否开启输入预上屏。",
                "params": {
                    "enable": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否开启输入预上屏。",
                        "default": true
                    }
                }
            }
        },
        "events": {
            "onChange": {
                "description": "输入内容发生变化时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "EditableTextOnChangeCallback",
                        "required": true,
                        "description": "输入内容发生变化时的回调函数。"
                    }
                }
            },
            "onSubmit": {
                "description": "按下输入法回车键触发该回调。",
                "params": {
                    "callback": {
                        "type": "(enterKey: EnterKeyType, event: SubmitEvent) => void",
                        "required": true,
                        "description": "按下输入法回车键时的回调函数。"
                    }
                }
            },
            "onEditChanged": {
                "description": "输入状态变化时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "(isEditing: boolean) => void",
                        "required": true,
                        "description": "输入状态变化时的回调函数。"
                    }
                }
            },
            "onEditChange": {
                "description": "输入状态变化时，触发该回调。有光标时为编辑态，无光标时为非编辑态。isEditing为true表示正在输入。",
                "params": {
                    "callback": {
                        "type": "(isEditing: boolean) => void",
                        "required": true,
                        "description": "输入状态变化时的回调函数。"
                    }
                }
            },
            "onCopy": {
                "description": "进行复制操作时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "(value: string) => void",
                        "required": true,
                        "description": "进行复制操作时的回调函数。"
                    }
                }
            },
            "onCut": {
                "description": "进行剪切操作时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "(value: string) => void",
                        "required": true,
                        "description": "进行剪切操作时的回调函数。"
                    }
                }
            },
            "onPaste": {
                "description": "进行粘贴操作时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "(value: string, event: PasteEvent) => void",
                        "required": true,
                        "description": "进行粘贴操作时的回调函数。"
                    }
                }
            },
            "onTextSelectionChange": {
                "description": "文本选择的位置发生变化或编辑状态下光标位置发生变化时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "(selectionStart: number, selectionEnd: number) => void",
                        "required": true,
                        "description": "文本选择或光标位置变化时的回调函数。"
                    }
                }
            },
            "onContentScroll": {
                "description": "文本内容滚动时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "(totalOffsetX: number, totalOffsetY: number) => void",
                        "required": true,
                        "description": "文本内容滚动时的回调函数。"
                    }
                }
            },
            "onSecurityStateChange": {
                "description": "密码显隐状态切换时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "Callback<boolean>",
                        "required": true,
                        "description": "密码显隐状态切换时的回调函数。"
                    }
                }
            },
            "onWillInsert": {
                "description": "在将要输入时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "Callback<InsertValue, boolean>",
                        "required": true,
                        "description": "在将要输入时的回调函数。"
                    }
                }
            },
            "onDidInsert": {
                "description": "在输入完成时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "Callback<InsertValue>",
                        "required": true,
                        "description": "在输入完成时的回调函数。"
                    }
                }
            },
            "onWillDelete": {
                "description": "在将要删除时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "Callback<DeleteValue, boolean>",
                        "required": true,
                        "description": "在将要删除时的回调函数。"
                    }
                }
            },
            "onDidDelete": {
                "description": "在删除完成时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "Callback<DeleteValue>",
                        "required": true,
                        "description": "在删除完成时的回调函数。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Row 和 Column 布局实现了一个展示两个 TextInput 组件的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为一个 Column，其中包含两个 TextInput 组件。每个 TextInput 组件以垂直布局方式排列，且对齐方式为居中对齐。\nTextInput 组件的样式包括下划线的显示和颜色设置。第一个 TextInput 组件的下划线颜色根据不同的状态（正常、输入、错误、禁用）分别设置为橙色、绿色、红色和灰色。第二个 TextInput 组件的下划线颜色统一设置为灰色。\n整个布局通过 Row 和 Column 布局保证 TextInput 组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column() {\n        // 创建一个 TextInput 组件，设置提示文本内容为 '提示文本内容'\n        TextInput({placeholder:'提示文本内容'})\n          // 显示下划线\n          .showUnderline(true)\n          // 设置下划线颜色，根据不同状态分别设置颜色\n          .underlineColor({normal:Color.Orange, typing:Color.Green, error:Color.Red, disable:Color.Gray});\n        \n        // 创建另一个 TextInput 组件，设置提示文本内容为 '提示文本内容'\n        TextInput({placeholder:'提示文本内容'})\n          // 显示下划线\n          .showUnderline(true)\n          // 设置下划线颜色为灰色\n          .underlineColor(Color.Gray);\n      }\n      // 设置 Column 的宽度为 100%\n      .width('100%')\n    }\n    // 设置 Row 的高度为 100%\n    .height('100%')\n  }\n}"
            },
            {
                "description": "该组件展示了一个带有取消按钮的文本输入框。布局宽度为380vp，高度为60vp，文本输入框位于垂直布局的顶部。取消按钮的样式为常量（CONSTANT），图标大小为45vp，颜色为蓝色，图标资源名为'app.media.icon'。文本输入框的内容变化会实时更新到组件的状态变量'text'中。",
                "code": "@Entry\n@Component\nstruct ClearNodeExample {\n  @State text: string = '' // 定义一个状态变量'text'，用于存储文本输入框的内容\n  controller: TextInputController = new TextInputController() // 创建一个TextInputController实例，用于控制文本输入框的行为\n\n  build() {\n    Column() { // 使用Column布局组件，将子组件垂直排列\n      TextInput({ placeholder: 'input ...', controller: this.controller }) // 创建一个文本输入框，占位符为'input ...'，并使用之前创建的controller进行控制\n        .width(380) // 设置文本输入框的宽度为380vp\n        .height(60) // 设置文本输入框的高度为60vp\n        .cancelButton({ // 设置文本输入框的取消按钮\n          style: CancelButtonStyle.CONSTANT, // 设置取消按钮的样式为常量（CONSTANT）\n          icon: { // 设置取消按钮的图标\n            size: 45, // 设置图标的大小为45vp\n            src: $r('app.media.icon'), // 设置图标的资源名为'app.media.icon'\n            color: Color.Blue // 设置图标的颜色为蓝色\n          }\n        })\n        .onChange((value: string) => { // 监听文本输入框的内容变化事件\n          this.text = value // 将文本输入框的内容实时更新到状态变量'text'中\n        })\n    }\n  }\n}"
            },
            {
                "description": "该组件展示了两个 `TextInput` 组件，分别使用了 `fontFeature` 属性的 `ss01` 属性和不使用 `ss01` 属性的效果。布局宽度占据整个屏幕的 90%，内边距为左右 5%。组件的垂直方向上被分为两个部分，每个部分包含一个 `TextInput` 组件。每个 `TextInput` 组件的文本内容通过 `@State` 变量进行管理，并且设置了字体大小为 20vp。第一个 `TextInput` 组件的 `fontFeature` 属性设置为 `\"ss01\" on`，第二个 `TextInput` 组件的 `fontFeature` 属性设置为 `\"ss01\" off`。通过对比这两个 `TextInput` 组件的显示效果，可以直观地看到 `ss01` 属性对字体显示的影响。",
                "code": "@Entry\n@Component\nstruct textInput {\n  // 定义两个状态变量，分别用于存储两个 `TextInput` 组件的文本内容\n  @State text1: string = 'This is ss01 on : 0123456789'\n  @State text2: string = 'This is ss01 off: 0123456789'\n\n  build() {\n    Column() {\n      // 第一个 `TextInput` 组件，使用 `ss01` 属性开启\n      TextInput({ text: this.text1 })\n        .fontSize(20) // 设置字体大小为 20vp\n        .margin({ top: 200 }) // 设置顶部外边距为 200vp\n        .fontFeature(\"\\\\\"ss01\\\\\" on\") // 设置 `fontFeature` 属性为 `ss01` 开启\n\n      // 第二个 `TextInput` 组件，使用 `ss01` 属性关闭\n      TextInput({ text: this.text2 })\n        .margin({ top: 10 }) // 设置顶部外边距为 10vp\n        .fontSize(20) // 设置字体大小为 20vp\n        .fontFeature(\"\\\\\"ss01\\\\\" off\") // 设置 `fontFeature` 属性为 `ss01` 关闭\n    }\n    .width(\"90%\") // 设置组件宽度为屏幕宽度的 90%\n    .margin(\"5%\") // 设置左右外边距为屏幕宽度的 5%\n  }\n}"
            },
            {
                "description": "该组件实现了一个带有计数器的文本输入框。布局宽度占据整个屏幕，高度设为 100%，背景颜色为 #F1F3F5。组件的垂直方向上包含一个 TextInput 组件，该组件的宽度为 336vp，高度为 56vp，最大输入长度为 6 个字符。TextInput 组件下方显示一个计数器，当输入字符数超过最大长度的 50% 时，计数器会高亮显示。\n\nTextInput 组件的样式包括占位符字体大小为 16，字体粗细为 400，显示下划线，并且输入框下方显示计数器。计数器的功能是实时显示当前输入的字符数，并在输入字符数超过最大长度的 50% 时高亮显示。\n\n组件的功能包括用户输入文本时，实时更新文本内容，并触发 onChange 事件，更新组件的 @State 变量 text。",
                "code": "@Entry\n@Component\nstruct TextInputExample {\n  @State text: string = '' // 定义一个状态变量 text，用于存储用户输入的文本\n  controller: TextInputController = new TextInputController() // 创建一个 TextInputController 实例，用于控制 TextInput 组件的行为\n\n  build() {\n    Column() {\n      TextInput({ text: this.text, controller: this.controller }) // 创建一个 TextInput 组件，绑定 text 状态变量和 controller\n        .placeholderFont({ size: 16, weight: 400 }) // 设置占位符字体大小为 16，字体粗细为 400\n        .width(336) // 设置 TextInput 组件的宽度为 336vp\n        .height(56) // 设置 TextInput 组件的高度为 56vp\n        .maxLength(6) // 设置 TextInput 组件的最大输入长度为 6 个字符\n        .showUnderline(true) // 显示 TextInput 组件的下划线\n        .showCounter(true, { thresholdPercentage: 50, highlightBorder: true }) // 显示计数器，当输入字符数超过最大长度的 50% 时，计数器高亮显示\n\n        .onChange((value: string) => { // 监听 TextInput 组件的 onChange 事件\n          this.text = value // 更新 text 状态变量\n        })\n    }.width('100%').height('100%').backgroundColor('#F1F3F5') // 设置 Column 组件的宽度为 100%，高度为 100%，背景颜色为 #F1F3F5\n  }\n}"
            },
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用TextInput组件绑定自定义键盘。布局上，TextInput组件位于Column容器中，占据一定的宽度和高度，并设置了边框样式。自定义键盘通过@Builder装饰器定义，包含一个Column容器，内部嵌套了Grid组件用于排列数字和符号按钮。每个按钮的宽度和高度固定，按钮之间有间距，整体背景颜色为灰色。\n\n布局属性：\n- TextInput组件的宽度由父容器Column决定，高度为48vp，边距为10vp，边框宽度为1。\n- 自定义键盘的Grid组件最大列数为3，列间距和行间距均为10vp，内边距为5vp。\n\n组件的样式和外观：\n- TextInput组件的边框样式为宽度1的实线边框。\n- 自定义键盘的背景颜色为灰色。\n- 按钮的宽度为110vp，高度由内容决定。\n\n组件的排列和嵌套关系：\n- TextInput组件位于Column容器的顶部。\n- 自定义键盘通过@Builder装饰器定义，包含一个Column容器，内部嵌套了Grid组件用于排列按钮。\n\n组件的功能和交互：\n- TextInput组件绑定了一个自定义键盘，用户可以通过点击自定义键盘上的按钮输入内容。\n- 自定义键盘上的按钮点击事件会将对应的字符添加到TextInput的输入值中。\n- 自定义键盘上的'x'按钮点击事件会停止编辑。",
                "code": "@Entry\n@Component\nstruct TextInputExample {\n  // 创建一个TextInputController实例，用于控制TextInput组件的行为\n  controller: TextInputController = new TextInputController()\n  \n  // 定义一个状态变量inputValue，用于存储TextInput的输入值\n  @State inputValue: string = \"\"\n\n  // 使用@Builder装饰器定义自定义键盘的布局\n  @Builder CustomKeyboardBuilder() {\n    Column() {\n      // 创建一个按钮，点击时停止编辑\n      Button('x').onClick(() => {\n        this.controller.stopEditing()\n      })\n      \n      // 创建一个Grid组件，用于排列数字和符号按钮\n      Grid() {\n        // 使用ForEach循环生成按钮\n        ForEach([1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'], (item: number | string) => {\n          GridItem() {\n            // 创建一个按钮，点击时将对应的字符添加到inputValue中\n            Button(item + \"\")\n              .width(110).onClick(() => {\n                this.inputValue += item\n              })\n          }\n        })\n      }\n      // 设置Grid的最大列数为3，列间距和行间距均为10vp，内边距为5vp\n      .maxCount(3).columnsGap(10).rowsGap(10).padding(5)\n    }\n    // 设置自定义键盘的背景颜色为灰色\n    .backgroundColor(Color.Gray)\n  }\n\n  // 构建组件的布局\n  build() {\n    Column() {\n      // 创建一个TextInput组件，绑定controller和inputValue，并设置自定义键盘\n      TextInput({ controller: this.controller, text: this.inputValue })\n        .customKeyboard(this.CustomKeyboardBuilder())\n        .margin(10)\n        .border({ width: 1 })\n        .height('48vp')\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Row 和 Column 布局实现了一个展示两个 TextInput 组件及其回调功能的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为两个部分，每个部分包含一个 TextInput 组件和一个显示回调信息的 Text 组件。每个 TextInput 组件的高度为 60vp，显示的文本分别为 \"TextInput支持插入回调文本\" 和 \"TextInput支持删除回调文本b\"。\n\nTextInput 组件的样式包括高度属性，支持插入和删除回调。插入回调分为 onWillInsert 和 onDidInsert，分别在插入操作前和插入操作后触发。删除回调分为 onWillDelete 和 onDidDelete，分别在删除操作前和删除操作后触发。回调信息通过 Text 组件显示，包括插入的值、插入的偏移量、删除的值、删除的偏移量和删除的方向（向前或向后）。\n\n整个布局通过 Row 和 Column 布局保证组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextInputExample {\n  @State insertValue: string = \"\" // 存储插入的文本值\n  @State deleteValue: string = \"\" // 存储删除的文本值\n  @State insertOffset: number = 0 // 存储插入的偏移量\n  @State deleteOffset: number = 0 // 存储删除的偏移量\n  @State deleteDirection: number = 0 // 存储删除的方向，0 表示向后删除，1 表示向前删除\n\n  build() {\n    Row() {\n      Column() {\n        TextInput({ text: \"TextInput支持插入回调文本\" })\n          .height(60) // 设置 TextInput 的高度为 60vp\n          .onWillInsert((info: InsertValue) => { // 插入操作前的回调\n            this.insertValue = info.insertValue // 获取并存储插入的文本值\n            return true; // 返回 true 表示允许插入操作\n          })\n          .onDidInsert((info: InsertValue) => { // 插入操作后的回调\n            this.insertOffset = info.insertOffset // 获取并存储插入的偏移量\n          })\n\n        Text(\"insertValue:\" + this.insertValue + \"  insertOffset:\" + this.insertOffset).height(30) // 显示插入的文本值和偏移量\n\n        TextInput({ text: \"TextInput支持删除回调文本b\" })\n          .height(60) // 设置 TextInput 的高度为 60vp\n          .onWillDelete((info: DeleteValue) => { // 删除操作前的回调\n            this.deleteValue = info.deleteValue // 获取并存储删除的文本值\n            info.direction // 获取删除的方向\n            return true; // 返回 true 表示允许删除操作\n          })\n          .onDidDelete((info: DeleteValue) => { // 删除操作后的回调\n            this.deleteOffset = info.deleteOffset // 获取并存储删除的偏移量\n            this.deleteDirection = info.direction // 获取并存储删除的方向\n          })\n\n        Text(\"deleteValue:\" + this.deleteValue + \"  deleteOffset:\" + this.deleteOffset).height(30) // 显示删除的文本值和偏移量\n        Text(\"deleteDirection:\" + (this.deleteDirection == 0 ? \"BACKWARD\" : \"FORWARD\")).height(30) // 显示删除的方向\n\n      }.width('100%') // 设置 Column 的宽度为 100%\n    }\n    .height('100%') // 设置 Row 的高度为 100%\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示不同 `lineBreakStrategy` 设置效果的界面。布局宽度为 370vp，高度为 700vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为三个部分，每个部分包含一个标题和一个 `TextInput` 组件。每个 `TextInput` 组件的宽度占据整个父容器的宽度，高度根据内容自动调整，最大行数为 5 行。\n\n每个 `TextInput` 组件的样式包括字体大小为 12vp，边框宽度为 1vp，内边距为 10vp，背景颜色为默认白色。标题的样式包括字体大小为 9vp，字体颜色为 0xCCCCCC，宽度为 90%，内边距为 10vp。\n\n组件的功能是通过设置不同的 `lineBreakStrategy` 属性来展示文本在 `TextInput` 中的换行策略。`lineBreakStrategy` 属性有三种可选值：`GREEDY`、`HIGH_QUALITY` 和 `BALANCED`。每种策略的效果在 `TextInput` 中展示，用户可以通过对比不同策略的效果来选择合适的换行策略。",
                "code": "@Entry\n@Component\nstruct TextExample1 {\n  @State message1: string = \"They can be classified as built-in components–those directly provided by the ArkUI framework and custom components – those defined by developers\" +\n    \"The built-in components include buttons radio buttonsprogress indicators and text You can set the rendering effectof thesecomponents in method chaining mode,\" +\n    \"page components are divided into independent UI units to implementindependent creation development and reuse of different units on pages making pages more engineering-oriented.\";\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start }) {\n      // 标题：展示 `lineBreakStrategy` 设置为 `GREEDY` 的效果\n      Text('LineBreakStrategy.GREEDY').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n      // `TextInput` 组件，展示 `GREEDY` 策略的换行效果\n      TextInput({text: this.message1})\n        .fontSize(12)\n        .border({ width: 1 })\n        .padding(10)\n        .width('100%')\n        .maxLines(5)\n        .style(TextInputStyle.Inline)\n        .lineBreakStrategy(LineBreakStrategy.GREEDY)\n\n      // 标题：展示 `lineBreakStrategy` 设置为 `HIGH_QUALITY` 的效果\n      Text('LineBreakStrategy.HIGH_QUALITY').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n      // `TextInput` 组件，展示 `HIGH_QUALITY` 策略的换行效果\n      TextInput({text: this.message1})\n        .fontSize(12)\n        .border({ width: 1 })\n        .padding(10)\n        .width('100%')\n        .maxLines(5)\n        .style(TextInputStyle.Inline)\n        .lineBreakStrategy(LineBreakStrategy.HIGH_QUALITY)\n\n      // 标题：展示 `lineBreakStrategy` 设置为 `BALANCED` 的效果\n      Text('LineBreakStrategy.BALANCED').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n      // `TextInput` 组件，展示 `BALANCED` 策略的换行效果\n      TextInput({text: this.message1})\n        .fontSize(12)\n        .border({ width: 1 })\n        .padding(10)\n        .width('100%')\n        .maxLines(5)\n        .style(TextInputStyle.Inline)\n        .lineBreakStrategy(LineBreakStrategy.BALANCED)\n    }.height(700).width(370).padding({ left: 35, right: 35, top: 35 })\n  }\n}"
            },
            {
                "description": "该组件实现了一个自定义键盘弹出时发生避让的示例。布局宽度占据整个屏幕，高度根据状态变量 `height1` 动态调整，初始值为 80%。组件的垂直方向上被分为两个主要部分：顶部是一个包含两个按钮的行，用于动态调整高度；底部是一个 `TextInput` 组件，用于输入文本。\n\n顶部按钮行的高度由状态变量 `height1` 控制，初始值为 80%。按钮行中的两个按钮分别用于将高度设置为 20% 和 80%。按钮的排列方式为水平居中对齐，按钮之间的间距为 20vp。按钮的样式包括字体大小为 24vp，点击事件用于更新 `height1` 的值。\n\n底部的 `TextInput` 组件用于输入文本，其高度为自适应。`TextInput` 组件的边框宽度为 1vp，边距为 10vp。`TextInput` 组件支持自定义键盘，自定义键盘通过 `CustomKeyboardBuilder` 方法构建。自定义键盘的背景颜色为灰色，包含一个关闭按钮和一个数字键盘。数字键盘的布局为网格布局，每行最多显示 3 个按钮，按钮之间的列间距和行间距均为 10vp，内边距为 5vp。数字键盘的按钮宽度为 110vp，点击事件用于将数字添加到输入框中。\n\n整个布局通过 `Column` 布局保证按钮和输入框在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Input {\n  // 控制 TextInput 组件的控制器\n  controller: TextInputController = new TextInputController()\n  // 输入框的值\n  @State inputValue: string = \"\"\n  // 顶部按钮行的高度，初始值为 80%\n  @State height1: string | number = '80%'\n  // 是否支持键盘避让功能\n  @State supportAvoidance: boolean = true;\n\n  // 自定义键盘的构建方法\n  @Builder CustomKeyboardBuilder() {\n    Column() {\n      Row() {\n        // 关闭按钮，点击后停止编辑\n        Button('x').onClick(() => {\n          this.controller.stopEditing()\n        }).margin(10)\n      }\n      Grid() {\n        // 数字键盘的按钮，使用 ForEach 循环生成\n        ForEach([1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'], (item: number | string) => {\n          GridItem() {\n            Button(item + \"\")\n              .width(110).onClick(() => {\n                this.inputValue += item\n              })\n          }\n        })\n      }.maxCount(3).columnsGap(10).rowsGap(10).padding(5)\n    }.backgroundColor(Color.Gray)\n  }\n\n  build() {\n    Column() {\n      Row() {\n        // 设置高度为 20% 的按钮\n        Button(\"20%\")\n          .fontSize(24)\n          .onClick(() => {\n            this.height1 = \"20%\"\n          })\n        // 设置高度为 80% 的按钮\n        Button(\"80%\")\n          .fontSize(24)\n          .margin({ left: 20 })\n          .onClick(() => {\n            this.height1 = \"80%\"\n          })\n      }\n      .justifyContent(FlexAlign.Center)\n      .alignItems(VerticalAlign.Bottom)\n      .height(this.height1)\n      .width(\"100%\")\n      .padding({ bottom: 50 })\n\n      // 输入框组件，支持自定义键盘\n      TextInput({ controller: this.controller, text: this.inputValue })\n        .customKeyboard(this.CustomKeyboardBuilder(), { supportAvoidance: this.supportAvoidance })\n        .margin(10)\n        .border({ width: 1 })\n    }\n  }\n}"
            },
            {
                "description": "该组件展示了不同wordBreak属性的TextInput样式。布局采用Column组件，垂直排列多个TextInput实例，每个实例上方有一个描述文本。布局宽度未明确设置，默认撑满最大宽度。每个TextInput实例的高度自适应内容高度。\n组件的样式包括字体大小、字体颜色、TextInput的样式（Inline模式）以及wordBreak属性。字体大小统一设置为16，描述文本的字体颜色为红色（0xFF0000）。TextInput的样式为Inline模式，即内联模式，文本内容超过组件宽度时会自动换行显示。\n组件的排列和嵌套关系为：Column组件包含多个Text和TextInput组件，每个Text组件描述其下方的TextInput的样式和wordBreak属性。\n组件的功能和交互主要是展示不同wordBreak属性对文本换行方式的影响。wordBreak属性有四种类型：NORMAL、BREAK_ALL、BREAK_WORD，分别对应不同的换行规则。",
                "code": "@Entry\n@Component\nstruct TextInputExample {\n  build() {\n    Column() {\n      // 描述文本，字体大小为16，颜色为红色\n      Text(\"TextInput为inline模式，WordBreakType属性为NORMAL的样式：\").fontSize(16).fontColor(0xFF0000)\n      // TextInput组件，设置文本内容、字体大小、样式为Inline、wordBreak为NORMAL\n      TextInput({\n        text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'\n      })\n        .fontSize(16)\n        .style(TextInputStyle.Inline) \n        .wordBreak(WordBreak.NORMAL) \n\n      // 描述文本，字体大小为16，颜色为红色\n      Text(\"TextInput为inline模式，英文文本，WordBreakType属性为BREAK_ALL的样式：\").fontSize(16).fontColor(0xFF0000)\n      // TextInput组件，设置文本内容、字体大小、样式为Inline、wordBreak为BREAK_ALL\n      TextInput({\n        text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'\n      })\n        .fontSize(16)\n        .style(TextInputStyle.Inline)\n        .wordBreak(WordBreak.BREAK_ALL)\n\n      // 描述文本，字体大小为16，颜色为红色\n      Text(\"TextInput为inline模式，中文文本，WordBreakType属性为BREAK_ALL的样式：\").fontSize(16).fontColor(0xFF0000)\n      // TextInput组件，设置文本内容、字体大小、样式为Inline、wordBreak为BREAK_ALL\n      TextInput({\n        text: '多行文本输入框组件，当输入的文本内容超过组件宽度时会自动换行显示。\\\\n高度未设置时，组件无默认高度，自适应内容高度。宽度未设置时，默认撑满最大宽度。'\n      })\n        .fontSize(16)\n        .style(TextInputStyle.Inline)\n        .wordBreak(WordBreak.BREAK_ALL)\n\n      // 描述文本，字体大小为16，颜色为红色\n      Text(\"TextInput为inline模式，WordBreakType属性为BREAK_WORD的样式：\").fontSize(16).fontColor(0xFF0000)\n      // TextInput组件，设置文本内容、字体大小、样式为Inline、wordBreak为BREAK_WORD\n      TextInput({\n        text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'\n      })\n        .fontSize(16)\n        .style(TextInputStyle.Inline)\n        .wordBreak(WordBreak.BREAK_WORD)\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Row 和 Column 布局实现了一个展示文本输入框及其自适应字号策略的界面。布局宽度占据整个屏幕的 90%，高度设为 90%，内边距为 10vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组文本输入框。每个文本输入框组的文本输入框以垂直布局方式排列，文本输入框之间的间距均匀分布，且对齐方式为居中对齐。\n文本输入框的样式包括宽度、高度、边框宽度、边距等属性，支持不同的自适应字号策略展示。文本输入框组之间通过 Column 组件进行分隔。文本输入框的功能包括输入事件和自适应字号策略，用户可以通过输入文本触发相应操作，文本输入框也可以在不同的自适应字号策略下进行展示。\n整个布局通过 Row 和 Column 布局保证文本输入框在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextInputExample {\n  build() {\n    Row() {\n      Column() {\n        // 标题文本，显示 \"heightAdaptivePolicy\"，字体大小为 9，颜色为 0xCCCCCC\n        Text('heightAdaptivePolicy').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 第一个文本输入框，显示 \"This is the text without the height adaptive policy set\"，宽度为 80%，高度为 50vp，边框宽度为 1vp，边距为 1vp\n        TextInput({text: 'This is the text without the height adaptive policy set'})\n          .width('80%').height(50).borderWidth(1).margin(1)\n        \n        // 第二个文本输入框，显示 \"This is the text with the height adaptive policy set\"，宽度为 80%，高度为 50vp，边框宽度为 1vp，边距为 1vp，最小字体大小为 4，最大字体大小为 40，最大行数为 3，高度自适应策略为 MAX_LINES_FIRST\n        TextInput({text: 'This is the text with the height adaptive policy set'})\n          .width('80%').height(50).borderWidth(1).margin(1)\n          .minFontSize(4)\n          .maxFontSize(40)\n          .maxLines(3)\n          .heightAdaptivePolicy(TextHeightAdaptivePolicy.MAX_LINES_FIRST)\n        \n        // 第三个文本输入框，显示 \"This is the text with the height adaptive policy set\"，宽度为 80%，高度为 50vp，边框宽度为 1vp，边距为 1vp，最小字体大小为 4，最大字体大小为 40，最大行数为 3，高度自适应策略为 MIN_FONT_SIZE_FIRST\n        TextInput({text: 'This is the text with the height adaptive policy set'})\n          .width('80%').height(50).borderWidth(1).margin(1)\n          .minFontSize(4)\n          .maxFontSize(40)\n          .maxLines(3)\n          .heightAdaptivePolicy(TextHeightAdaptivePolicy.MIN_FONT_SIZE_FIRST)\n        \n        // 第四个文本输入框，显示 \"This is the text with the height adaptive policy set\"，宽度为 80%，高度为 50vp，边框宽度为 1vp，边距为 1vp，最小字体大小为 4，最大字体大小为 40，最大行数为 3，高度自适应策略为 LAYOUT_CONSTRAINT_FIRST\n        TextInput({text: 'This is the text with the height adaptive policy set'})\n          .width('80%').height(50).borderWidth(1).margin(1)\n          .minFontSize(4)\n          .maxFontSize(40)\n          .maxLines(3)\n          .heightAdaptivePolicy(TextHeightAdaptivePolicy.LAYOUT_CONSTRAINT_FIRST)\n      }.height('90%')\n    }\n    .width('90%')\n    .margin(10)\n  }\n}"
            },
            {
                "description": "该组件展示了一个带有自定义编辑菜单选项的文本输入框。布局宽度占据屏幕的90%，高度为50vp，内边距为顶部100vp，左右5%。文本输入框的宽度为95%，高度为50vp，位于垂直布局的顶部。\n组件的样式包括文本输入框的宽度和高度，以及外边距。文本输入框的排列方式为垂直布局，确保其在界面中的位置居中且顶部有足够的空间。\n组件的功能包括自定义编辑菜单选项的文本内容、图标和回调方法。用户可以通过点击菜单项触发相应的操作，并在控制台输出相关信息。",
                "code": "@Entry\n@Component\nstruct TextInputExample {\n  @State text: string = 'TextInput editMenuOptions' // 初始化文本输入框的默认文本内容\n\n  // 自定义菜单项的创建方法\n  onCreateMenu(menuItems: Array<TextMenuItem>) {\n    menuItems.forEach((value, index) => {\n      value.icon = $r('app.media.startIcon') // 设置菜单项的图标\n      if (value.id.equals(TextMenuItemId.COPY)) {\n        value.content = \"复制change\" // 修改复制菜单项的文本内容\n      }\n      if (value.id.equals(TextMenuItemId.SELECT_ALL)) {\n        value.content = \"全选change\" // 修改全选菜单项的文本内容\n      }\n    })\n    let item1: TextMenuItem = {\n      content: 'custom1', // 自定义菜单项1的文本内容\n      icon: $r('app.media.startIcon'), // 自定义菜单项1的图标\n      id: TextMenuItemId.of('custom1'), // 自定义菜单项1的唯一标识\n    }\n    let item2: TextMenuItem = {\n      content: 'custom2', // 自定义菜单项2的文本内容\n      id: TextMenuItemId.of('custom2'), // 自定义菜单项2的唯一标识\n      icon: $r('app.media.startIcon'), // 自定义菜单项2的图标\n    }\n    menuItems.push(item1) // 将自定义菜单项1添加到菜单项列表的末尾\n    menuItems.unshift(item2) // 将自定义菜单项2添加到菜单项列表的开头\n    return menuItems // 返回修改后的菜单项列表\n  }\n\n  build() {\n    Column() {\n      TextInput({ text: this.text }) // 创建一个文本输入框，初始文本为@State变量text的值\n        .width('95%') // 设置文本输入框的宽度为95%\n        .height(50) // 设置文本输入框的高度为50vp\n        .editMenuOptions({\n          onCreateMenu: this.onCreateMenu, // 设置自定义菜单项的创建方法\n          onMenuItemClick: (menuItem: TextMenuItem, textRange: TextRange) => { // 设置菜单项点击的回调方法\n            if (menuItem.id.equals(TextMenuItemId.of(\"custom2\"))) {\n              console.log(\"拦截 id: custom2 start:\" + textRange.start + \"; end:\" + textRange.end) // 拦截自定义菜单项2的点击事件，并输出相关信息\n              return true; // 返回true表示拦截该事件\n            }\n            if (menuItem.id.equals(TextMenuItemId.COPY)) {\n              console.log(\"拦截 COPY start:\" + textRange.start + \"; end:\" + textRange.end) // 拦截复制菜单项的点击事件，并输出相关信息\n              return true; // 返回true表示拦截该事件\n            }\n            if (menuItem.id.equals(TextMenuItemId.SELECT_ALL)) {\n              console.log(\"不拦截 SELECT_ALL start:\" + textRange.start + \"; end:\" + textRange.end) // 不拦截全选菜单项的点击事件，并输出相关信息\n              return false; // 返回false表示不拦截该事件\n            }\n            return false; // 默认返回false，不拦截其他菜单项的点击事件\n          }\n        })\n        .margin({ top: 100 }) // 设置文本输入框的上边距为100vp\n    }\n    .width(\"90%\") // 设置垂直布局的宽度为90%\n    .margin(\"5%\") // 设置垂直布局的左右边距为5%\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个包含多个TextInput组件的界面。布局宽度占据整个屏幕，每个TextInput组件的高度为60vp，宽度为380vp，组件之间的间距为20vp。组件的垂直方向上被分为三个部分，每个部分包含一个TextInput组件。\n\n第一个TextInput组件展示了自定义密码图标的功能。密码图标通过passwordIcon属性设置，当密码可见时显示PassWordSrc1图标，当密码不可见时显示PassWordSrc2图标。\n\n第二个TextInput组件展示了下划线样式和错误提示的功能。通过showUnderline属性设置为true，显示下划线样式。通过showError属性设置错误提示信息，并通过showUnit属性设置右侧的单位选择器。单位选择器通过Select组件实现，包含KB、MB、GB、TB四个选项，默认选中MB。单位选择器的样式包括高度、字体大小、字体颜色、背景颜色等。\n\n第三个TextInput组件展示了用户名输入和错误提示的功能。通过showUnderline属性设置为true，显示下划线样式。通过showError属性设置错误提示信息。用户输入用户名后，通过onChange事件监听输入内容，并通过onSubmit事件验证输入内容是否正确。如果输入内容与预设的用户名一致，则清除错误提示；否则，显示错误提示并清空输入内容。\n\n整个布局通过Column布局保证TextInput组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextInputExample {\n  @State PassWordSrc1: Resource = $r('app.media.onIcon') // 密码可见时的图标资源\n  @State PassWordSrc2: Resource = $r('app.media.offIcon') // 密码不可见时的图标资源\n  @State TextError: string = '' // 错误提示信息\n  @State Text: string = '' // 用户输入的文本\n  @State NameText: string = 'test' // 预设的用户名\n\n  @Builder itemEnd() {\n    Select([{ value: 'KB' },\n      { value: 'MB' },\n      { value: 'GB' },\n      { value: 'TB', }])\n      .height(\"48vp\") // 单位选择器的高度\n      .borderRadius(0) // 单位选择器的边框圆角\n      .selected(2) // 默认选中第三个选项\n      .align(Alignment.Center) // 对齐方式为居中对齐\n      .value('MB') // 默认选中的值\n      .font({ size: 20, weight: 500 }) // 字体大小和粗细\n      .fontColor('#182431') // 字体颜色\n      .selectedOptionFont({ size: 20, weight: 400 }) // 选中选项的字体大小和粗细\n      .optionFont({ size: 20, weight: 400 }) // 选项的字体大小和粗细\n      .backgroundColor(Color.Transparent) // 背景颜色为透明\n      .responseRegion({ height: \"40vp\", width: \"80%\", x: '10%', y: '6vp' }) // 响应区域\n      .onSelect((index: number) => {\n        console.info('Select:' + index) // 选中选项时的回调函数\n      })\n  }\n\n  build() {\n    Column({ space: 20 }) {\n\n      TextInput({ placeholder: 'user define password icon' })\n        .type(InputType.Password) // 输入类型为密码\n        .width(380) // 宽度\n        .height(60) // 高度\n        .passwordIcon({ onIconSrc: this.PassWordSrc1, offIconSrc: this.PassWordSrc2 }) // 密码图标\n\n      TextInput({ placeholder: 'underline style' })\n        .showUnderline(true) // 显示下划线样式\n        .width(380) // 宽度\n        .height(60) // 高度\n        .showError('Error') // 错误提示信息\n        .showUnit(this.itemEnd) // 右侧的单位选择器\n\n      Text(`用户名：${this.Text}`) // 显示用户名\n        .width('95%') // 宽度\n      TextInput({ placeholder: '请输入用户名', text: this.Text })\n        .showUnderline(true) // 显示下划线样式\n        .width(380) // 宽度\n        .showError(this.TextError) // 错误提示信息\n        .onChange((value: string) => {\n          this.Text = value // 监听输入内容\n        })\n        .onSubmit((enterKey: EnterKeyType, event: SubmitEvent) => {\n          if (this.Text == this.NameText) {\n            this.TextError = '' // 输入内容正确时清除错误提示\n          } else {\n            this.TextError = '用户名输入错误' // 输入内容错误时显示错误提示\n            this.Text = '' // 清空输入内容\n            event.keepEditableState() // 保持编辑状态\n          }\n        })\n\n    }.width('100%') // 布局宽度占据整个屏幕\n  }\n}"
            },
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用TextInput组件，包括基本输入框、密码输入框、邮箱输入框以及带有内联样式的输入框。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个TextInput组件。每个TextInput组件的宽度为95%，高度为40vp，内边距为20vp。\n\nTextInput组件的样式包括占位符颜色、占位符字体、光标颜色、字体大小、字体颜色等属性。组件的功能包括输入过滤、输入内容变化监听、光标位置控制、密码显示状态切换等。组件的排列和嵌套关系通过Column组件实现，确保输入框在垂直方向上有序排列，界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextInputExample {\n  @State text: string = '' // 用于存储用户输入的文本\n  @State positionInfo: CaretOffset = { index: 0, x: 0, y: 0 } // 用于存储光标位置信息\n  @State passwordState: boolean = false // 用于控制密码输入框的显示状态\n  controller: TextInputController = new TextInputController() // 用于控制TextInput组件的控制器\n\n  build() {\n    Column() {\n      TextInput({ text: this.text, placeholder: 'input your word...', controller: this.controller })\n        .placeholderColor(Color.Grey) // 设置占位符颜色为灰色\n        .placeholderFont({ size: 14, weight: 400 }) // 设置占位符字体大小为14，字重为400\n        .caretColor(Color.Blue) // 设置光标颜色为蓝色\n        .width('95%') // 设置输入框宽度为95%\n        .height(40) // 设置输入框高度为40vp\n        .margin(20) // 设置输入框内边距为20vp\n        .fontSize(14) // 设置输入框字体大小为14\n        .fontColor(Color.Black) // 设置输入框字体颜色为黑色\n        .inputFilter('[a-z]', (e) => { // 设置输入过滤，只允许输入小写字母\n          console.log(JSON.stringify(e)) // 打印过滤事件信息\n        })\n        .onChange((value: string) => { // 监听输入内容变化\n          this.text = value // 更新输入文本状态\n        })\n      Text(this.text) // 显示用户输入的文本\n      Button('Set caretPosition 1')\n        .margin(15) // 设置按钮内边距为15vp\n        .onClick(() => { // 监听按钮点击事件\n          this.controller.caretPosition(1) // 设置光标位置为1\n        })\n      Button('Get CaretOffset')\n        .margin(15) // 设置按钮内边距为15vp\n        .onClick(() => { // 监听按钮点击事件\n          this.positionInfo = this.controller.getCaretOffset() // 获取光标位置信息并更新状态\n        })\n\n      TextInput({ placeholder: 'input your password...' })\n        .width('95%') // 设置输入框宽度为95%\n        .height(40) // 设置输入框高度为40vp\n        .margin(20) // 设置输入框内边距为20vp\n        .type(InputType.Password) // 设置输入框类型为密码\n        .maxLength(9) // 设置最大输入长度为9\n        .showPasswordIcon(true) // 显示密码显示/隐藏图标\n        .showPassword(this.passwordState) // 根据状态控制密码显示/隐藏\n        .onSecurityStateChange((isShowPassword: boolean) => { // 监听密码显示状态变化\n          console.info('isShowPassword', isShowPassword) // 打印密码显示状态\n          this.passwordState = isShowPassword // 更新密码显示状态\n        })\n\n      TextInput({ placeholder: 'input your email...' })\n        .width('95%') // 设置输入框宽度为95%\n        .height(40) // 设置输入框高度为40vp\n        .margin(20) // 设置输入框内边距为20vp\n        .contentType(ContentType.EMAIL_ADDRESS) // 设置输入框内容类型为邮箱地址\n        .maxLength(9) // 设置最大输入长度为9\n\n      TextInput({ text: 'inline style' })\n        .width('95%') // 设置输入框宽度为95%\n        .height(50) // 设置输入框高度为50vp\n        .margin(20) // 设置输入框内边距为20vp\n        .borderRadius(0) // 设置输入框边框圆角为0\n        .style(TextInputStyle.Inline) // 设置输入框样式为内联样式\n    }.width('100%') // 设置Column组件宽度为100%\n  }\n}"
            },
            {
                "description": "该组件通过Flex布局实现了一个展示文本输入框及其相关属性的界面。布局宽度占据整个屏幕的90%，高度设为90%，内边距为左右10vp。组件的垂直方向上被分为三个部分，每个部分包含一个标题和一组文本输入框。每个文本输入框组的文本输入框以垂直布局方式排列，文本输入框之间的间距均匀分布，且对齐方式为居中对齐。\n文本输入框的样式包括边框宽度、内边距、外边距、行高、字符间距和装饰线等属性，支持不同的样式展示。文本输入框组之间通过Flex组件进行分隔。文本输入框的功能包括显示不同的行高、字符间距和装饰线样式，用户可以通过输入框查看不同样式效果。\n整个布局通过Flex布局保证文本输入框在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextInputExample {\n  build() {\n    Row() {\n      Column() {\n        // 标题：行高\n        Text('lineHeight').fontSize(9).fontColor(0xCCCCCC)\n        // 文本输入框：未设置行高\n        TextInput({text: 'lineHeight unset'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(10) // 设置内边距为10\n          .margin(5) // 设置外边距为5\n        // 文本输入框：行高为15\n        TextInput({text: 'lineHeight 15'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(10) // 设置内边距为10\n          .margin(5) // 设置外边距为5\n          .lineHeight(15) // 设置行高为15\n        // 文本输入框：行高为30\n        TextInput({text: 'lineHeight 30'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(10) // 设置内边距为10\n          .margin(5) // 设置外边距为5\n          .lineHeight(30) // 设置行高为30\n\n        // 标题：字符间距\n        Text('letterSpacing').fontSize(9).fontColor(0xCCCCCC)\n        // 文本输入框：字符间距为0\n        TextInput({text: 'letterSpacing 0'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .letterSpacing(0) // 设置字符间距为0\n        // 文本输入框：字符间距为3\n        TextInput({text: 'letterSpacing 3'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .letterSpacing(3) // 设置字符间距为3\n        // 文本输入框：字符间距为-1\n        TextInput({text: 'letterSpacing -1'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .letterSpacing(-1) // 设置字符间距为-1\n\n        // 标题：装饰线\n        Text('decoration').fontSize(9).fontColor(0xCCCCCC)\n        // 文本输入框：装饰线为贯穿线，红色\n        TextInput({text: 'LineThrough, Red'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .decoration({type: TextDecorationType.LineThrough, color: Color.Red}) // 设置装饰线为贯穿线，颜色为红色\n        // 文本输入框：装饰线为上划线，红色，虚线\n        TextInput({text: 'Overline, Red, DASHED'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .decoration({type: TextDecorationType.Overline, color: Color.Red, style: TextDecorationStyle.DASHED}) // 设置装饰线为上划线，颜色为红色，样式为虚线\n        // 文本输入框：装饰线为下划线，红色，波浪线\n        TextInput({text: 'Underline, Red, WAVY'})\n          .border({ width: 1 }) // 设置边框宽度为1\n          .padding(5) // 设置内边距为5\n          .margin(5) // 设置外边距为5\n          .decoration({type: TextDecorationType.Underline, color: Color.Red, style: TextDecorationStyle.WAVY}) // 设置装饰线为下划线，颜色为红色，样式为波浪线\n      }.height('90%') // 设置列的高度为90%\n    }\n    .width('90%') // 设置行的宽度为90%\n    .margin(10) // 设置行的外边距为10\n  }\n}"
            },
            {
                "description": "该组件通过Column和Row布局实现了一个电话号码输入框，并自动将输入的电话号码格式化为XXX XXXX XXXX的格式。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上包含一个Row，Row中嵌套了一个TextInput组件。TextInput的高度为48vp，用于输入电话号码。\nTextInput的样式包括输入类型为电话号码，高度为48vp。TextInput的功能包括输入事件和文本选择变化事件。输入事件会触发电话号码的格式化逻辑，文本选择变化事件会记录当前的文本选择位置。\n整个布局通过Column布局保证TextInput在垂直方向上居中，确保界面简洁美观。",
                "code": "@Entry\n@Component\nstruct phone_example {\n  @State submitValue: string = '' // 用于存储提交的电话号码\n  @State text: string = '' // 用于存储当前输入的电话号码\n  public readonly NUM_TEXT_MAXSIZE_LENGTH = 13 // 电话号码的最大长度（包括空格）\n  @State teleNumberNoSpace: string = \"\" // 用于存储去除空格后的电话号码\n  @State nextCaret: number = -1 // 用于存储下一个光标位置\n  @State actualCh: number = -1 // 用于存储实际字符位置\n  @State lastCaretPosition: number = 0 // 用于存储上一次的光标起始位置\n  @State lastCaretPositionEnd: number = 0 // 用于存储上一次的光标结束位置\n  controller: TextInputController = new TextInputController() // TextInput的控制器\n\n  // 判断字符串是否为空\n  isEmpty(str?: string): boolean {\n    return str == 'undefined' || !str || !new RegExp(\"[^\\\\s]\").test(str)\n  }\n\n  // 检查是否需要添加号码空格\n  checkNeedNumberSpace(numText: string) {\n    let isSpace: RegExp = new RegExp('[\\\\+;,#\\\\*]', 'g')\n    let isRule: RegExp = new RegExp('^\\\\+.*')\n\n    if (isSpace.test(numText)) {\n      if (isRule.test(numText)) {\n        return true\n      } else {\n        return false\n      }\n    }\n    return true;\n  }\n\n  // 去除字符串中的空格\n  removeSpace(str: string): string {\n    if (this.isEmpty(str)) {\n      return ''\n    }\n    return str.replace(new RegExp(\"[\\\\s]\", \"g\"), '')\n  }\n\n  // 设置光标位置\n  setCaret() {\n    if (this.nextCaret != -1) {\n      console.log(\"to keep caret position right, change caret to\", this.nextCaret)\n      this.controller.caretPosition(this.nextCaret)\n      this.nextCaret = -1\n    }\n  }\n\n  // 计算光标位置\n  calcCaretPosition(nextText: string) {\n    let befNumberNoSpace: string = this.removeSpace(this.text)\n    this.actualCh = 0\n    if (befNumberNoSpace.length < this.teleNumberNoSpace.length) { \n      for (let i = 0; i < this.lastCaretPosition; i++) {\n        if (this.text[i] != ' ') {\n          this.actualCh += 1\n        }\n      }\n      this.actualCh += this.teleNumberNoSpace.length - befNumberNoSpace.length\n      console.log(\"actualCh: \" + this.actualCh)\n      for (let i = 0; i < nextText.length; i++) {\n        if (nextText[i] != ' ') {\n          this.actualCh -= 1\n          if (this.actualCh <= 0) {\n            this.nextCaret = i + 1\n            break;\n          }\n        }\n      }\n    } else if (befNumberNoSpace.length > this.teleNumberNoSpace.length) { \n      if (this.lastCaretPosition === this.text.length) {\n        console.log(\"Caret at last, no need to change\")\n      } else if (this.lastCaretPosition === this.lastCaretPositionEnd) {\n        for (let i = this.lastCaretPosition; i < this.text.length; i++) {\n          if (this.text[i] != ' ') {\n            this.actualCh += 1\n          }\n        }\n        for (let i = nextText.length - 1; i >= 0; i--) {\n          if (nextText[i] != ' ') {\n            this.actualCh -= 1\n            if (this.actualCh <= 0) {\n              this.nextCaret = i\n              break;\n            }\n          }\n        }\n      } else {\n        this.nextCaret = this.lastCaretPosition \n      }\n    }\n  }\n\n  build() {\n    Column() {\n      Row() {\n        TextInput({ text: `${this.text}`, controller: this.controller }).type(InputType.PhoneNumber).height('48vp')\n          .onChange((number: string) => {\n            this.teleNumberNoSpace = this.removeSpace(number);\n            let nextText: string = \"\"\n            if (this.teleNumberNoSpace.length > this.NUM_TEXT_MAXSIZE_LENGTH - 2) {\n              nextText = this.teleNumberNoSpace\n            } else if (this.checkNeedNumberSpace(number)) {\n              if (this.teleNumberNoSpace.length <= 3) {\n                nextText = this.teleNumberNoSpace\n              } else {\n                let split1: string = this.teleNumberNoSpace.substring(0, 3)\n                let split2: string = this.teleNumberNoSpace.substring(3)\n                nextText = split1 + ' ' + split2\n                if (this.teleNumberNoSpace.length > 7) {\n                  split2 = this.teleNumberNoSpace.substring(3, 7)\n                  let split3: string = this.teleNumberNoSpace.substring(7)\n                  nextText = split1 + ' ' + split2 + ' ' + split3\n                }\n              }\n            } else {\n              nextText = number\n            }\n            console.log(\"onChange Triggered:\" + this.text + \"|\" + nextText + \"|\" + number)\n            if (this.text === nextText && nextText === number) {\n              this.setCaret()\n            } else {\n              this.calcCaretPosition(nextText)\n            }\n            this.text = nextText\n          })\n          .onTextSelectionChange((selectionStart, selectionEnd) => {\n            console.log(\"selection change: \", selectionStart, selectionEnd)\n            this.lastCaretPosition = selectionStart\n            this.lastCaretPositionEnd = selectionEnd\n          })\n      }\n    }\n    .width('100%')\n    .height(\"100%\")\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Search": {
        "description": "搜索框组件，适用于浏览器的搜索内容输入框等应用场景。",
        "interfaces": [
            {
                "description": "Search(options?: { value?: string, placeholder?: ResourceStr, icon?: string, controller?: SearchController })",
                "params": {
                    "options": {
                        "type": "object",
                        "description": "搜索框的配置选项。",
                        "params": {
                            "value": {
                                "type": "string",
                                "description": "设置当前显示的搜索文本内容。"
                            },
                            "placeholder": {
                                "type": "ResourceStr",
                                "description": "设置无输入时的提示文本。"
                            },
                            "icon": {
                                "type": "string",
                                "description": "设置搜索图标路径，默认使用系统搜索图标。"
                            },
                            "controller": {
                                "type": "SearchController",
                                "description": "设置Search组件控制器。"
                            }
                        }
                    }
                }
            }
        ],
        "attributes": {
            "searchButton": {
                "description": "设置搜索框末尾搜索按钮。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "搜索框末尾搜索按钮文本内容。"
                    },
                    "option": {
                        "type": "SearchButtonOptions",
                        "description": "配置搜索框文本样式。"
                    }
                }
            },
            "placeholderColor": {
                "description": "设置placeholder文本颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "placeholder文本颜色。"
                    }
                }
            },
            "placeholderFont": {
                "description": "设置placeholder文本样式，包括字体大小，字体粗细，字体族，字体风格。",
                "params": {
                    "value": {
                        "type": "Font",
                        "description": "placeholder文本样式。"
                    }
                }
            },
            "textFont": {
                "description": "设置搜索框内输入文本样式，包括字体大小，字体粗细，字体族，字体风格。",
                "params": {
                    "value": {
                        "type": "Font",
                        "description": "搜索框内输入文本样式。"
                    }
                }
            },
            "textAlign": {
                "description": "设置文本在搜索框中的对齐方式。",
                "params": {
                    "value": {
                        "type": "TextAlign",
                        "required": true,
                        "description": "文本在搜索框中的对齐方式。"
                    }
                }
            },
            "copyOption": {
                "description": "设置输入的文本是否可复制。",
                "params": {
                    "value": {
                        "type": "CopyOptions",
                        "required": true,
                        "description": "输入的文本是否可复制。"
                    }
                }
            },
            "searchIcon": {
                "description": "设置左侧搜索图标样式。",
                "params": {
                    "value": {
                        "type": [
                            "IconOptions",
                            "SymbolGlyphModifier"
                        ],
                        "required": true,
                        "description": "左侧搜索图标样式。"
                    }
                }
            },
            "cancelButton": {
                "description": "设置右侧清除按钮样式。",
                "params": {
                    "value": {
                        "type": [
                            "CancelButtonOptions",
                            "CancelButtonSymbolOptions"
                        ],
                        "required": true,
                        "description": "右侧清除按钮样式。"
                    }
                }
            },
            "fontColor": {
                "description": "设置输入文本的字体颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "输入文本的字体颜色。"
                    }
                }
            },
            "caretStyle": {
                "description": "设置光标样式。",
                "params": {
                    "value": {
                        "type": "CaretStyle",
                        "required": true,
                        "description": "光标样式。"
                    }
                }
            },
            "enableKeyboardOnFocus": {
                "description": "设置Search通过点击以外的方式获焦时，是否绑定输入法。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "Search获焦时，是否绑定输入法。"
                    }
                }
            },
            "selectionMenuHidden": {
                "description": "设置是否不弹出系统文本选择菜单。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否不弹出系统文本选择菜单。"
                    }
                }
            },
            "customKeyboard": {
                "description": "设置自定义键盘。",
                "params": {
                    "value": {
                        "type": "CustomBuilder",
                        "required": true,
                        "description": "自定义键盘的构建器。"
                    },
                    "options": {
                        "type": "KeyboardOptions",
                        "description": "自定义键盘的配置选项。"
                    }
                }
            },
            "type": {
                "description": "设置输入框类型。",
                "params": {
                    "value": {
                        "type": "SearchType",
                        "required": true,
                        "description": "输入框类型。"
                    }
                }
            },
            "maxLength": {
                "description": "设置文本的最大输入字符数。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "文本的最大输入字符数。"
                    }
                }
            },
            "enterKeyType": {
                "description": "设置输入法回车键类型。",
                "params": {
                    "value": {
                        "type": "EnterKeyType",
                        "required": true,
                        "description": "输入法回车键类型。"
                    }
                }
            },
            "lineHeight": {
                "description": "设置文本的文本行高。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "文本的文本行高。"
                    }
                }
            },
            "decoration": {
                "description": "设置文本装饰线类型样式及其颜色。",
                "params": {
                    "value": {
                        "type": "TextDecorationOptions",
                        "required": true,
                        "description": "文本装饰线对象。"
                    }
                }
            },
            "letterSpacing": {
                "description": "设置文本字符间距。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "文本字符间距。"
                    }
                }
            },
            "selectedBackgroundColor": {
                "description": "设置文本选中底板颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "文本选中底板颜色。"
                    }
                }
            },
            "inputFilter": {
                "description": "通过正则表达式设置输入过滤器。",
                "params": {
                    "value": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "正则表达式。"
                    },
                    "error": {
                        "type": "Callback<string>",
                        "description": "正则匹配失败时，返回被过滤的内容。"
                    }
                }
            },
            "textIndent": {
                "description": "设置首行文本缩进。",
                "params": {
                    "value": {
                        "type": "Dimension",
                        "required": true,
                        "description": "首行文本缩进。"
                    }
                }
            },
            "minFontSize": {
                "description": "设置文本最小显示字号。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "文本最小显示字号。"
                    }
                }
            },
            "maxFontSize": {
                "description": "设置文本最大显示字号。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "文本最大显示字号。"
                    }
                }
            },
            "editMenuOptions": {
                "description": "设置自定义菜单扩展项，允许用户设置扩展项的文本内容、图标、回调方法。",
                "params": {
                    "editMenu": {
                        "type": "EditMenuOptions",
                        "required": true,
                        "description": "自定义菜单扩展项的配置。"
                    }
                }
            },
            "enablePreviewText": {
                "description": "设置是否开启输入预上屏。",
                "params": {
                    "enable": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否开启输入预上屏。"
                    }
                }
            }
        },
        "events": {
            "onSubmit": {
                "description": "点击搜索图标、搜索按钮或者按下软键盘搜索按钮时触发该回调。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "当前搜索框中输入的文本内容。"
                    }
                }
            },
            "onChange": {
                "description": "输入内容发生变化时，触发该回调。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "当前输入的文本内容。"
                    }
                }
            },
            "onCopy": {
                "description": "进行复制操作时，触发该回调。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "复制的文本内容。"
                    }
                }
            },
            "onCut": {
                "description": "进行剪切操作时，触发该回调。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "剪切的文本内容。"
                    }
                }
            },
            "onPaste": {
                "description": "进行粘贴操作时，触发该回调。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "粘贴的文本内容。"
                    },
                    "event": {
                        "type": "PasteEvent",
                        "required": true,
                        "description": "用户自定义的粘贴事件。"
                    }
                }
            },
            "onTextSelectionChange": {
                "description": "文本选择的位置发生变化或编辑状态下光标位置发生变化时，触发该回调。",
                "params": {
                    "selectionStart": {
                        "type": "number",
                        "required": true,
                        "description": "文本选择区域起始位置，文本框中文字的起始位置为0。"
                    },
                    "selectionEnd": {
                        "type": "number",
                        "required": true,
                        "description": "文本选择区域结束位置。"
                    }
                }
            },
            "onContentScroll": {
                "description": "文本内容滚动时，触发该回调。",
                "params": {
                    "totalOffsetX": {
                        "type": "number",
                        "required": true,
                        "description": "文本在内容区的横坐标偏移，单位px。"
                    },
                    "totalOffsetY": {
                        "type": "number",
                        "required": true,
                        "description": "文本在内容区的纵坐标偏移，单位px。"
                    }
                }
            },
            "onEditChange": {
                "description": "输入状态变化时，触发该回调。有光标时为编辑态，无光标时为非编辑态。isEditing为true表示正在输入。",
                "params": {
                    "isEditing": {
                        "type": "boolean",
                        "required": true,
                        "description": "为true表示正在输入。"
                    }
                }
            },
            "onWillInsert": {
                "description": "在将要输入时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "Callback<InsertValue, boolean>",
                        "required": true,
                        "description": "在将要输入时调用的回调。在返回true时，表示正常插入，返回false时，表示不插入。在预上屏操作时，该回调不触发。仅支持系统输入法输入的场景。"
                    }
                }
            },
            "onDidInsert": {
                "description": "在输入完成时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "Callback<InsertValue>",
                        "required": true,
                        "description": "在输入完成时调用的回调。仅支持系统输入法输入的场景。"
                    }
                }
            },
            "onWillDelete": {
                "description": "在将要删除时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "Callback<DeleteValue, boolean>",
                        "required": true,
                        "description": "在将要删除时调用的回调。在返回true时，表示正常删除，返回false时，表示不删除。在预上屏删除操作时，该回调不触发。仅支持系统输入法输入的场景。"
                    }
                }
            },
            "onDidDelete": {
                "description": "在删除完成时，触发该回调。",
                "params": {
                    "callback": {
                        "type": "Callback<DeleteValue>",
                        "required": true,
                        "description": "在删除完成时调用的回调。仅支持系统输入法输入的场景。"
                    }
                }
            }
        },
        "examples": [
            {
                "description": "该示例通过使用 `minFontSize` 和 `maxFontSize` 属性实现了文本自适应字号的功能。布局采用 `Row` 和 `Column` 组件进行嵌套，形成一个垂直布局的界面。整体宽度占据屏幕的 90%，高度占据屏幕的 90%，并设置了 10vp 的边距。\n\n`Row` 组件用于水平布局，内部嵌套了一个 `Column` 组件，用于垂直布局。`Column` 组件内部包含一个 `Text` 组件和两个 `Search` 组件。`Text` 组件用于显示静态文本，设置了字体大小为 9vp，字体颜色为浅灰色（0xCCCCCC）。\n\n两个 `Search` 组件分别用于展示不同字体大小的文本。第一个 `Search` 组件没有设置 `minFontSize` 和 `maxFontSize`，因此文本字体大小保持默认。第二个 `Search` 组件设置了 `minFontSize` 为 4vp 和 `maxFontSize` 为 40vp，使得文本可以根据容器大小自适应调整字体大小。\n\n每个 `Search` 组件的宽度为 80%，高度为 90vp，并设置了 1vp 的边框宽度。`Column` 组件的高度为 90%，确保内部的组件在垂直方向上占据适当的空间。",
                "code": "@Entry\n@Component\nstruct SearchExample {\n  build() {\n    Row() {\n      Column() {\n        // 静态文本，字体大小为 9vp，颜色为浅灰色\n        Text('adaptive font').fontSize(9).fontColor(0xCCCCCC)\n\n        // 第一个 Search 组件，展示默认字体大小的文本\n        Search({value: 'This is the text without the adaptive font'})\n          .width('80%').height(90).borderWidth(1)\n\n        // 第二个 Search 组件，展示自适应字体大小的文本\n        Search({value: 'This is the text without the adaptive font'})\n          .width('80%').height(90).borderWidth(1)\n          .minFontSize(4) // 设置最小字体大小为 4vp\n          .maxFontSize(40) // 设置最大字体大小为 40vp\n      }.height('90%') // Column 组件的高度为 90%\n    }\n    .width('90%') // Row 组件的宽度为 90%\n    .margin(10) // 设置 10vp 的边距\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个展示字体特性（fontFeature）效果的界面。布局宽度占据屏幕的 90%，高度自适应内容，内边距为左右 5%。组件的垂直方向上被分为两个部分，每个部分包含一个 Search 组件。每个 Search 组件的文本内容通过 @State 变量进行管理，分别展示了使用 ss01 字体特性和不使用 ss01 字体特性的效果。\n\nSearch 组件的样式包括字体特性的设置（fontFeature），通过设置 \"ss01\" 属性为 \"on\" 或 \"off\" 来控制字体特性的开启与关闭。组件的排列和嵌套关系为垂直布局，两个 Search 组件之间通过 margin 属性设置了 10vp 的间距。\n\n组件的功能主要是展示不同字体特性对文本显示效果的影响。用户可以通过观察两个 Search 组件的文本内容，直观地看到 ss01 字体特性开启与关闭时的差异。",
                "code": "@Entry\n@Component\nstruct search {\n  @State text1: string = 'This is ss01 on : 0123456789' // 定义一个状态变量 text1，用于存储第一个 Search 组件的文本内容，展示 ss01 字体特性开启的效果\n  @State text2: string = 'This is ss01 off: 0123456789' // 定义一个状态变量 text2，用于存储第二个 Search 组件的文本内容，展示 ss01 字体特性关闭的效果\n\n  build() {\n    Column(){\n      Search({value: this.text1}) // 创建一个 Search 组件，文本内容为 text1，展示 ss01 字体特性开启的效果\n        .margin({top:200}) // 设置 Search 组件的上边距为 200vp，使其在垂直方向上与顶部保持一定距离\n        .fontFeature(\"\\\\\"ss01\\\\\" on\") // 设置 Search 组件的字体特性为 \"ss01\" 开启\n      Search({value: this.text2}) // 创建一个 Search 组件，文本内容为 text2，展示 ss01 字体特性关闭的效果\n        .margin({top:10}) // 设置 Search 组件的上边距为 10vp，使其在垂直方向上与前一个 Search 组件保持一定距离\n        .fontFeature(\"\\\\\"ss01\\\\\" off\") // 设置 Search 组件的字体特性为 \"ss01\" 关闭\n    }\n    .width(\"90%\") // 设置 Column 组件的宽度为屏幕宽度的 90%\n    .margin(\"5%\") // 设置 Column 组件的外边距为左右各 5%，使其在水平方向上居中\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个搜索输入框和按钮的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为两个部分：一个搜索输入框和一个按钮。搜索输入框的宽度为380vp，按钮的宽度为100%。\n搜索输入框的样式包括占位符文本“请输入文本”，输入框的值绑定到@State变量Text，输入框的enterKeyType属性根据@State变量index动态设置，支持多种EnterKeyType类型。输入框的功能包括输入文本的实时更新和提交事件的触发。\n按钮的样式包括文本“改变EnterKeyType”，按钮的功能是点击后改变输入框的enterKeyType属性。\n整个布局通过Column布局保证搜索输入框和按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct SearchExample {\n  @State Text: string = '' // 用于存储搜索输入框的文本内容\n  @State enterTypes: Array<EnterKeyType> = [EnterKeyType.Go, EnterKeyType.Search, EnterKeyType.Send, EnterKeyType.Done, EnterKeyType.Next, EnterKeyType.PREVIOUS, EnterKeyType.NEW_LINE] // 存储多种EnterKeyType类型\n  @State index: number = 0 // 用于记录当前使用的EnterKeyType类型的索引\n\n  build() {\n    Column({ space: 20 }) { // 使用Column布局，垂直方向上排列子组件，子组件间距为20vp\n      Search({ placeholder: '请输入文本', value: this.Text }) // 创建一个搜索输入框，占位符为“请输入文本”，值绑定到@State变量Text\n        .width(380) // 设置搜索输入框的宽度为380vp\n        .enterKeyType(this.enterTypes[this.index]) // 根据@State变量index动态设置输入框的enterKeyType属性\n        .onChange((value: string) => { // 监听输入框文本变化事件\n          this.Text = value // 更新@State变量Text的值\n        })\n        .onSubmit((value: String) => { // 监听输入框提交事件\n          console.log(\"trigger search onsubmit\" + value); // 打印提交的文本内容\n        })\n\n      Button('改变EnterKeyType').onClick(() => { // 创建一个按钮，文本为“改变EnterKeyType”，点击事件处理函数\n        this.index = (this.index + 1) % this.enterTypes.length; // 更新@State变量index的值，循环使用enterTypes数组中的EnterKeyType类型\n      })\n    }.width('100%') // 设置Column布局的宽度为100%\n  }\n}"
            },
            {
                "description": "该组件实现了一个带有自定义键盘的搜索框功能。布局上，搜索框位于页面的顶部，自定义键盘位于搜索框下方。搜索框的宽度为整个屏幕宽度，边距为10vp，边框宽度为1vp。自定义键盘的背景颜色为灰色，包含一个关闭按钮和一个数字键盘。数字键盘通过Grid布局实现，每行最多显示3个数字按钮，按钮之间的列间距和行间距均为10vp，内边距为5vp。\n\n搜索框的功能包括输入文本和使用自定义键盘进行输入。自定义键盘的功能包括点击数字按钮将数字添加到输入框中，点击关闭按钮停止编辑。整个布局通过Column组件实现垂直排列，确保搜索框和自定义键盘在垂直方向上有序排列。",
                "code": "@Entry\n@Component\nstruct SearchExample {\n  // 创建一个SearchController实例，用于控制搜索框的行为\n  controller: SearchController = new SearchController()\n  \n  // 定义一个状态变量inputValue，用于存储搜索框的输入值\n  @State inputValue: string = \"\"\n\n  // 自定义键盘的构建器，用于生成自定义键盘的UI\n  @Builder CustomKeyboardBuilder() {\n    Column() {\n      // 关闭按钮，点击后停止编辑\n      Button('x').onClick(() => {\n        this.controller.stopEditing()\n      })\n      \n      // 数字键盘，通过Grid布局实现\n      Grid() {\n        // 使用ForEach循环生成数字按钮\n        ForEach([1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'], (item: number | string) => {\n          GridItem() {\n            // 每个数字按钮的宽度为110vp，点击后将数字添加到输入框中\n            Button(item + \"\")\n              .width(110).onClick(() => {\n                this.inputValue += item\n              })\n          }\n        })\n      }\n      // 设置Grid的最大列数为3，列间距和行间距均为10vp，内边距为5vp\n      .maxCount(3).columnsGap(10).rowsGap(10).padding(5)\n    }\n    // 设置自定义键盘的背景颜色为灰色\n    .backgroundColor(Color.Gray)\n  }\n\n  // 构建页面的主方法\n  build() {\n    Column() {\n      // 创建一个Search组件，绑定SearchController和输入值，并设置自定义键盘\n      Search({ controller: this.controller, value: this.inputValue})\n        .customKeyboard(this.CustomKeyboardBuilder())\n        .margin(10) // 设置搜索框的边距为10vp\n        .border({ width: 1 }) // 设置搜索框的边框宽度为1vp\n    }\n  }\n}"
            },
            {
                "description": "该组件实现了一个搜索框的功能，包含输入框、搜索按钮、搜索图标和取消按钮。布局宽度占据整个屏幕，高度为400vp，内边距为左右35vp、顶部35vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组按钮。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Flex组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过Flex布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct SearchExample {\n  @State changeValue: string = '' // 用于存储搜索框的输入值\n  @State submitValue: string = '' // 用于存储提交的搜索值\n\n  build() {\n    Column() {\n      Text('onSubmit:' + this.submitValue) // 显示提交的搜索值\n        .fontSize(18) // 设置字体大小为18\n        .margin(15) // 设置上下左右边距为15\n\n      Search({ value: this.changeValue, placeholder: 'Type to search...' }) // 创建搜索框组件，初始值为changeValue，占位符为'Type to search...'\n        .searchButton('SEARCH') // 设置搜索按钮的文本为'SEARCH'\n        .searchIcon({\n          src: $r('app.media.search') // 设置搜索图标的资源路径\n        })\n        .cancelButton({\n          style: CancelButtonStyle.CONSTANT, // 设置取消按钮的样式为常量样式\n          icon: {\n            src: $r('app.media.cancel') // 设置取消按钮图标的资源路径\n          }\n        })\n        .width('90%') // 设置搜索框的宽度为90%\n        .height(40) // 设置搜索框的高度为40\n        .maxLength(20) // 设置搜索框的最大输入长度为20\n        .backgroundColor('#F5F5F5') // 设置搜索框的背景颜色为#F5F5F5\n        .placeholderColor(Color.Grey) // 设置占位符的文本颜色为灰色\n        .placeholderFont({ size: 14, weight: 400 }) // 设置占位符的字体大小为14，字体粗细为400\n        .textFont({ size: 14, weight: 400 }) // 设置输入文本的字体大小为14，字体粗细为400\n        .onSubmit((value: string) => { // 当用户提交搜索时触发的事件\n          this.submitValue = value // 将提交的值赋给submitValue\n        })\n        .onChange((value: string) => { // 当搜索框内容变化时触发的事件\n          this.changeValue = value // 将变化的值赋给changeValue\n        })\n        .margin(20) // 设置搜索框的上下左右边距为20\n    }.width('100%') // 设置Column组件的宽度为100%\n  }\n}"
            },
            {
                "description": "该组件实现了一个搜索框界面，通过Column布局将搜索框垂直居中显示在屏幕中央。搜索框的宽度为屏幕宽度的95%，高度为40vp，背景颜色为浅灰色（#F5F5F5），边距为10vp。搜索框的占位符文本颜色为灰色，字体大小为14，字重为400。输入文本的字体大小和字重与占位符文本一致。\n\n搜索框的左侧显示一个红色的搜索图标，图标使用系统资源'sys.symbol.magnifyingglass'。搜索框的右侧显示一个绿色的取消按钮，按钮样式为常驻显示（CancelButtonStyle.CONSTANT），图标使用系统资源'sys.symbol.xmark'。搜索框底部显示一个文本为'SEARCH'的搜索按钮。\n\n组件的功能包括用户输入搜索内容、点击取消按钮清空输入内容、点击搜索按钮提交搜索内容。",
                "code": "@Entry\n@Component\nstruct SearchExample {\n  // 创建一个SearchController实例，用于控制搜索框的行为\n  controller: SearchController = new SearchController()\n  \n  // 定义一个状态变量changeValue，用于存储用户输入的搜索内容\n  @State changeValue: string = ''\n  \n  // 定义一个状态变量submitValue，用于存储提交的搜索内容\n  @State submitValue: string = ''\n\n  build() {\n    Column() {\n      // 创建一个Search组件，绑定changeValue作为输入值，占位符文本为'Type to search...'，使用controller控制搜索框\n      Search({ value: this.changeValue, placeholder: 'Type to search...', controller: this.controller })\n        // 设置搜索框左侧的搜索图标，使用SymbolGlyphModifier设置图标样式，图标颜色为红色\n        .searchIcon(new SymbolGlyphModifier($r('sys.symbol.magnifyingglass')).fontColor([Color.Red]))\n        // 设置搜索框右侧的取消按钮，按钮样式为常驻显示，图标颜色为绿色\n        .cancelButton({\n          style: CancelButtonStyle.CONSTANT,\n          icon: new SymbolGlyphModifier($r('sys.symbol.xmark')).fontColor([Color.Green])\n        })\n        // 设置搜索框底部的搜索按钮文本为'SEARCH'\n        .searchButton('SEARCH')\n        // 设置搜索框的宽度为屏幕宽度的95%\n        .width('95%')\n        // 设置搜索框的高度为40vp\n        .height(40)\n        // 设置搜索框的背景颜色为浅灰色（#F5F5F5）\n        .backgroundColor('#F5F5F5')\n        // 设置搜索框占位符文本的颜色为灰色\n        .placeholderColor(Color.Grey)\n        // 设置搜索框占位符文本的字体大小为14，字重为400\n        .placeholderFont({ size: 14, weight: 400 })\n        // 设置搜索框输入文本的字体大小为14，字重为400\n        .textFont({ size: 14, weight: 400 })\n        // 设置搜索框的边距为10vp\n        .margin(10)\n    }\n    // 设置Column的宽度为屏幕宽度\n    .width('100%')\n    // 设置Column的高度为屏幕高度\n    .height('100%')\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示文本行高、字符间距和文本装饰线样式的界面。布局宽度占据整个屏幕的 90%，高度设为 90%，内边距为 10vp。组件的垂直方向上被分为三个部分，每个部分包含一个标题和一组文本展示。每个文本展示组的文本以垂直布局方式排列，文本之间的间距均匀分布，且对齐方式为居中对齐。\n文本的样式包括字体大小、字体颜色、行高、字符间距和装饰线样式等属性，支持不同的样式展示。文本组之间通过 Flex 组件进行分隔。文本的功能包括展示不同的行高、字符间距和装饰线样式，用户可以通过观察文本的展示效果来理解这些属性的作用。\n整个布局通过 Flex 布局保证文本在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct SearchExample {\n  build() {\n    Row() {\n      Column() {\n        // 展示文本行高的标题\n        Text('lineHeight').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 展示未设置行高的文本\n        Search({value: 'lineHeight unset'})\n          .border({ width: 1 }).padding(10)\n        \n        // 展示行高为 15 的文本\n        Search({value: 'lineHeight 15'})\n          .border({ width: 1 }).padding(10).lineHeight(15)\n        \n        // 展示行高为 30 的文本\n        Search({value: 'lineHeight 30'})\n          .border({ width: 1 }).padding(10).lineHeight(30)\n\n        // 展示字符间距的标题\n        Text('letterSpacing').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 展示字符间距为 0 的文本\n        Search({value: 'letterSpacing 0'})\n          .border({ width: 1 }).padding(5).letterSpacing(0)\n        \n        // 展示字符间距为 3 的文本\n        Search({value: 'letterSpacing 3'})\n          .border({ width: 1 }).padding(5).letterSpacing(3)\n        \n        // 展示字符间距为 -1 的文本\n        Search({value: 'letterSpacing -1'})\n          .border({ width: 1 }).padding(5).letterSpacing(-1)\n\n        // 展示文本装饰线样式的标题\n        Text('decoration').fontSize(9).fontColor(0xCCCCCC)\n        \n        // 展示带有删除线、红色装饰线的文本\n        Search({value: 'LineThrough, Red'})\n          .border({ width: 1 }).padding(5)\n          .decoration({type: TextDecorationType.LineThrough, color: Color.Red})\n        \n        // 展示带有上划线、红色、点状装饰线的文本\n        Search({value: 'Overline, Red, DOTTED'})\n          .border({ width: 1 }).padding(5)\n          .decoration({type: TextDecorationType.Overline, color: Color.Red, style: TextDecorationStyle.DOTTED})\n        \n        // 展示带有下划线、红色、波浪状装饰线的文本\n        Search({value: 'Underline, Red, WAVY'})\n          .border({ width: 1 }).padding(5)\n          .decoration({type: TextDecorationType.Underline, color: Color.Red, style: TextDecorationStyle.WAVY})\n      }.height('90%')\n    }\n    .width('90%')\n    .margin(10)\n  }\n}"
            },
            {
                "description": "该组件通过 Row 和 Column 布局实现了一个展示两个 Search 输入框及其插入和删除回调功能的界面。布局宽度占据整个屏幕，高度设为 100%，内边距为无。组件的垂直方向上被分为两个主要部分，每个部分包含一个 Search 输入框和相关的文本显示。每个 Search 输入框的高度为 60vp，文本显示的高度为 30vp。\n\nSearch 输入框的样式包括高度属性，支持插入和删除回调功能。插入回调功能通过 onWillInsert 和 onDidInsert 事件实现，删除回调功能通过 onWillDelete 和 onDidDelete 事件实现。插入和删除的回调信息通过文本显示组件展示，文本显示组件的样式包括高度属性。\n\n组件的功能包括插入和删除回调，用户可以通过输入或删除文本触发相应操作，回调信息通过文本显示组件展示。整个布局通过 Row 和 Column 布局保证输入框和文本显示在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct SearchExample {\n  @State insertValue: string = \"\" // 插入的文本值\n  @State deleteValue: string = \"\" // 删除的文本值\n  @State insertOffset: number = 0 // 插入的偏移量\n  @State deleteOffset: number = 0 // 删除的偏移量\n  @State deleteDirection: number = 0 // 删除的方向（0: BACKWARD, 1: FORWARD）\n\n  build() {\n    Row() {\n      Column() {\n        Search({ value: \"Search支持插入回调文本\" }) // 创建一个 Search 输入框，初始值为 \"Search支持插入回调文本\"\n          .height(60) // 设置输入框高度为 60vp\n          .onWillInsert((info: InsertValue) => { // 插入前的回调函数\n            this.insertValue = info.insertValue // 获取插入的文本值\n            return true; // 允许插入\n          })\n          .onDidInsert((info: InsertValue) => { // 插入后的回调函数\n            this.insertOffset = info.insertOffset // 获取插入的偏移量\n          })\n\n        Text(\"insertValue:\" + this.insertValue + \"  insertOffset:\" + this.insertOffset) // 显示插入的文本值和偏移量\n          .height(30) // 设置文本显示高度为 30vp\n\n        Search({ value: \"Search支持删除回调文本b\" }) // 创建另一个 Search 输入框，初始值为 \"Search支持删除回调文本b\"\n          .height(60) // 设置输入框高度为 60vp\n          .onWillDelete((info: DeleteValue) => { // 删除前的回调函数\n            this.deleteValue = info.deleteValue // 获取删除的文本值\n            info.direction // 获取删除的方向\n            return true; // 允许删除\n          })\n          .onDidDelete((info: DeleteValue) => { // 删除后的回调函数\n            this.deleteOffset = info.deleteOffset // 获取删除的偏移量\n            this.deleteDirection = info.direction // 获取删除的方向\n          })\n\n        Text(\"deleteValue:\" + this.deleteValue + \"  deleteOffset:\" + this.deleteOffset) // 显示删除的文本值和偏移量\n          .height(30) // 设置文本显示高度为 30vp\n\n        Text(\"deleteDirection:\" + (this.deleteDirection == 0 ? \"BACKWARD\" : \"FORWARD\")) // 显示删除的方向\n          .height(30) // 设置文本显示高度为 30vp\n\n      }.width('100%') // 设置 Column 宽度为 100%\n    }\n    .height('100%') // 设置 Row 高度为 100%\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个包含搜索框和按钮的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个文本显示区域和一个搜索框或按钮。\n搜索框的样式包括背景颜色、边框圆角、宽度和高度等属性，支持不同的样式展示。搜索框的功能包括输入事件和提交事件，用户可以通过输入文本触发相应操作，也可以通过点击搜索按钮提交搜索内容。\n按钮的样式包括背景颜色、边框圆角、宽度和高度等属性，支持不同的样式展示。按钮的功能包括点击事件，用户可以通过点击按钮触发相应操作。\n整个布局通过 Column 布局保证组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct SearchExample {\n  @State changeValue: string = '' // 用于存储搜索框的输入值\n  @State submitValue: string = '' // 用于存储搜索框的提交值\n  @State positionInfo: CaretOffset = { index: 0, x: 0, y: 0 } // 用于存储光标位置信息\n  controller: SearchController = new SearchController() // 搜索框的控制器，用于控制搜索框的行为\n\n  build() {\n    Column({space: 10}) { // 使用 Column 布局，组件之间的间距为 10vp\n      Text('onSubmit:' + this.submitValue) // 显示搜索框的提交值\n        .fontSize(18) // 字体大小为 18\n        .margin(15) // 上下左右边距为 15vp\n      Text('onChange:' + this.changeValue) // 显示搜索框的输入值\n        .fontSize(18) // 字体大小为 18\n        .margin(15) // 上下左右边距为 15vp\n      Search({ value: this.changeValue, placeholder: 'Type to search...', controller: this.controller }) // 创建搜索框，绑定输入值和控制器\n        .searchButton('SEARCH') // 设置搜索按钮的文本为 \"SEARCH\"\n        .width('95%') // 搜索框的宽度为父容器的 95%\n        .height(40) // 搜索框的高度为 40vp\n        .backgroundColor('#F5F5F5') // 搜索框的背景颜色为 #F5F5F5\n        .placeholderColor(Color.Grey) // 占位符文本颜色为灰色\n        .placeholderFont({ size: 14, weight: 400 }) // 占位符文本字体大小为 14，字体粗细为 400\n        .textFont({ size: 14, weight: 400 }) // 输入文本字体大小为 14，字体粗细为 400\n        .onSubmit((value: string) => { // 当用户提交搜索时触发的事件\n          this.submitValue = value // 更新提交值\n        })\n        .onChange((value: string) => { // 当用户输入时触发的事件\n          this.changeValue = value // 更新输入值\n        })\n        .margin(20) // 上下左右边距为 20vp\n      Button('Set caretPosition 1') // 创建按钮，文本为 \"Set caretPosition 1\"\n        .onClick(() => { // 当按钮被点击时触发的事件\n          this.controller.caretPosition(1) // 设置光标位置为 1\n        })\n      Button('Get CaretOffset') // 创建按钮，文本为 \"Get CaretOffset\"\n        .onClick(() => { // 当按钮被点击时触发的事件\n          this.positionInfo = this.controller.getCaretOffset() // 获取光标位置信息并更新状态\n        })\n    }.width('100%') // Column 布局的宽度为父容器的 100%\n  }\n}"
            },
            {
                "description": "该组件实现了一个自定义键盘弹出时发生避让的搜索示例。布局宽度占据整个屏幕，高度根据状态变量 `height1` 动态调整，初始值为 80%。组件的垂直方向上被分为两个主要部分：顶部是一个包含两个按钮的行，用于动态调整高度；底部是一个搜索框，支持自定义键盘输入。\n\n顶部按钮行的高度由状态变量 `height1` 控制，初始值为 80%，可以通过点击按钮分别设置为 20% 或 80%。按钮的排列方式为水平居中对齐，按钮之间的间距通过 `margin` 属性设置为 20vp。按钮的样式包括字体大小为 24vp，点击事件用于更新 `height1` 的值。\n\n底部搜索框的高度为自适应，宽度占据整个屏幕，内边距为底部 50vp。搜索框的样式包括边框宽度为 1vp，边距为 10vp。搜索框支持自定义键盘输入，键盘的样式为灰色背景，包含一个关闭按钮和数字键盘。数字键盘通过 `Grid` 组件实现，每行最多显示 3 个按钮，按钮之间的列间距和行间距均为 10vp，内边距为 5vp。\n\n自定义键盘的功能包括点击数字按钮时更新搜索框的输入值，点击关闭按钮时停止编辑。搜索框的输入值通过 `onChange` 事件实时更新状态变量 `inputValue`。",
                "code": "@Entry\n@Component\nstruct SearchExample {\n  controller: SearchController = new SearchController() // 搜索控制器，用于控制搜索框的行为\n  @State inputValue: string = \"\" // 搜索框的输入值，初始为空字符串\n  @State height1: string | number = '80%' // 顶部按钮行的高度，初始为 80%\n  @State supportAvoidance: boolean = true // 是否支持键盘避让，初始为 true\n\n  @Builder\n  CustomKeyboardBuilder() {\n    Column() {\n      Row() {\n        Button('x').onClick(() => {\n          this.controller.stopEditing() // 点击关闭按钮时停止编辑\n        }).margin(10) // 按钮的边距为 10vp\n      }\n\n      Grid() {\n        ForEach([1, 2, 3, 4, 5, 6, 7, 8, 9, '*', 0, '#'], (item: number | string) => {\n          GridItem() {\n            Button(item + \"\")\n              .width(110).onClick(() => {\n                this.inputValue += item // 点击数字按钮时更新搜索框的输入值\n              })\n          }\n        })\n      }.maxCount(3).columnsGap(10).rowsGap(10).padding(5) // 数字键盘的布局属性，每行最多显示 3 个按钮，列间距和行间距均为 10vp，内边距为 5vp\n    }\n    .backgroundColor(Color.Gray) // 自定义键盘的背景颜色为灰色\n  }\n\n  build() {\n    Column() {\n      Row() {\n        Button(\"20%\")\n          .fontSize(24)\n          .onClick(() => {\n            this.height1 = \"20%\" // 点击按钮时将顶部按钮行的高度设置为 20%\n          })\n        Button(\"80%\")\n          .fontSize(24)\n          .margin({ left: 20 }) // 按钮之间的间距为 20vp\n          .onClick(() => {\n            this.height1 = \"80%\" // 点击按钮时将顶部按钮行的高度设置为 80%\n          })\n      }\n      .justifyContent(FlexAlign.Center) // 按钮行在水平方向上居中对齐\n      .alignItems(VerticalAlign.Bottom) // 按钮行在垂直方向上底部对齐\n      .height(this.height1) // 按钮行的高度由状态变量 `height1` 控制\n      .width(\"100%\") // 按钮行的宽度占据整个屏幕\n      .padding({ bottom: 50 }) // 按钮行的底部内边距为 50vp\n\n      Search({ controller: this.controller, value: this.inputValue })\n        .customKeyboard(this.CustomKeyboardBuilder(), { supportAvoidance: this.supportAvoidance }) // 搜索框使用自定义键盘，并支持键盘避让\n        .margin(10) // 搜索框的边距为 10vp\n        .border({ width: 1 }) // 搜索框的边框宽度为 1vp\n        .onChange((value: string) => {\n          this.inputValue = value // 搜索框的输入值通过 `onChange` 事件实时更新状态变量 `inputValue`\n        })\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个包含搜索框的界面。布局宽度占据整个屏幕的 90%，高度自适应内容，内边距为左右 5%。组件的垂直方向上包含一个 Search 组件，该组件的宽度为 95%，顶部外边距为 100vp。\nSearch 组件的样式包括宽度、边距等属性，支持自定义菜单扩展项。Search 组件的功能包括文本输入和自定义菜单项的点击事件，用户可以通过点击菜单项触发相应操作，菜单项也可以在点击时进行拦截或不拦截。\n整个布局通过 Column 布局保证 Search 组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Index {\n  @State text: string = 'Search editMenuOptions' // 定义一个状态变量 text，初始值为 'Search editMenuOptions'\n\n  // 定义 onCreateMenu 方法，用于自定义菜单项的内容、图标和回调方法\n  onCreateMenu(menuItems: Array<TextMenuItem>) {\n    menuItems.forEach((value, index) => {\n      value.icon = $r('app.media.startIcon') // 为每个菜单项设置图标，图标资源名为 'app.media.startIcon'\n      if (value.id.equals(TextMenuItemId.COPY)) {\n        value.content = \"复制change\" // 如果菜单项的 id 为 COPY，则修改其内容为 \"复制change\"\n      }\n      if (value.id.equals(TextMenuItemId.SELECT_ALL)) {\n        value.content = \"全选change\" // 如果菜单项的 id 为 SELECT_ALL，则修改其内容为 \"全选change\"\n      }\n    })\n    let item1: TextMenuItem = {\n      content: 'custom1', // 定义一个自定义菜单项，内容为 'custom1'\n      icon: $r('app.media.startIcon'), // 设置图标，图标资源名为 'app.media.startIcon'\n      id: TextMenuItemId.of('custom1'), // 设置菜单项的 id 为 'custom1'\n    }\n    let item2: TextMenuItem = {\n      content: 'custom2', // 定义一个自定义菜单项，内容为 'custom2'\n      id: TextMenuItemId.of('custom2'), // 设置菜单项的 id 为 'custom2'\n      icon: $r('app.media.startIcon'), // 设置图标，图标资源名为 'app.media.startIcon'\n    }\n    menuItems.push(item1) // 将自定义菜单项 item1 添加到菜单项列表的末尾\n    menuItems.unshift(item2) // 将自定义菜单项 item2 添加到菜单项列表的开头\n    return menuItems // 返回修改后的菜单项列表\n  }\n\n  build() {\n    Column() {\n      Search({ value: this.text }) // 创建一个 Search 组件，绑定状态变量 text\n        .width('95%') // 设置 Search 组件的宽度为 95%\n        .editMenuOptions({\n          onCreateMenu: this.onCreateMenu, // 设置 onCreateMenu 回调方法，用于自定义菜单项\n          onMenuItemClick: (menuItem: TextMenuItem, textRange: TextRange) => { // 设置 onMenuItemClick 回调方法，用于处理菜单项点击事件\n            if (menuItem.id.equals(TextMenuItemId.of(\"custom2\"))) {\n              console.log(\"拦截 id: custom2 start:\" + textRange.start + \"; end:\" + textRange.end) // 如果点击的菜单项 id 为 'custom2'，则拦截并输出日志\n              return true; // 返回 true 表示拦截该点击事件\n            }\n            if (menuItem.id.equals(TextMenuItemId.COPY)) {\n              console.log(\"拦截 COPY start:\" + textRange.start + \"; end:\" + textRange.end) // 如果点击的菜单项 id 为 COPY，则拦截并输出日志\n              return true; // 返回 true 表示拦截该点击事件\n            }\n            if (menuItem.id.equals(TextMenuItemId.SELECT_ALL)) {\n              console.log(\"不拦截 SELECT_ALL start:\" + textRange.start + \"; end:\" + textRange.end) // 如果点击的菜单项 id 为 SELECT_ALL，则不拦截并输出日志\n              return false; // 返回 false 表示不拦截该点击事件\n            }\n            return false; // 默认返回 false，表示不拦截其他菜单项的点击事件\n          }\n        })\n        .margin({ top: 100 }) // 设置 Search 组件的顶部外边距为 100vp\n    }\n    .width(\"90%\") // 设置 Column 组件的宽度为 90%\n    .margin(\"5%\") // 设置 Column 组件的左右外边距为 5%\n  }\n}"
            }
        ]
    },
    "Span": {
        "description": "用于显示行内文本的组件，作为Text、ContainerSpan组件的子组件。",
        "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。该组件从API Version 10开始支持继承父组件Text的属性，即如果子组件未设置属性且父组件设置属性，则继承父组件设置的属性。支持继承的属性仅包括：fontColor、fontSize、fontStyle、fontWeight、decoration、letterSpacing、textCase、fontfamily、textShadow。",
        "interfaces": [
            {
                "description": "Span(value: string | Resource)",
                "params": {
                    "value": {
                        "type": [
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "文本内容。"
                    }
                }
            }
        ],
        "attributes": {
            "decoration": {
                "description": "设置文本装饰线样式及其颜色。",
                "params": {
                    "value": {
                        "type": "DecorationStyleInterface12+",
                        "required": true,
                        "description": "文本装饰线样式对象。",
                        "default": {
                            "type": "TextDecorationType.None",
                            "color": "Color.Black",
                            "style": "TextDecorationStyle.SOLID"
                        }
                    }
                }
            },
            "letterSpacing": {
                "description": "设置文本字符间距。取值小于0，字符聚集重叠，取值大于0且随着数值变大，字符间距越来越大，稀疏分布。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "文本字符间距。"
                    }
                }
            },
            "textCase": {
                "description": "设置文本大小写。",
                "params": {
                    "value": {
                        "type": "TextCase",
                        "required": true,
                        "description": "文本大小写。",
                        "default": "TextCase.Normal"
                    }
                }
            },
            "fontColor": {
                "description": "设置字体颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "字体颜色。"
                    }
                }
            },
            "fontSize": {
                "description": "设置字体大小。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "字体大小。fontSize为number类型时，使用fp单位。字体默认大小16fp。不支持设置百分比字符串。"
                    }
                }
            },
            "fontStyle": {
                "description": "设置字体样式。",
                "params": {
                    "value": {
                        "type": "FontStyle",
                        "required": true,
                        "description": "字体样式。",
                        "default": "FontStyle.Normal"
                    }
                }
            },
            "fontWeight": {
                "description": "设置文本的字体粗细，设置过大可能会在不同字体下有截断。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "FontWeight",
                            "string"
                        ],
                        "required": true,
                        "description": "文本的字体粗细，number类型取值[100, 900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如\"400\"，以及\"bold\"、\"bolder\"、\"lighter\"、\"regular\"、\"medium\"，分别对应FontWeight中相应的枚举值。",
                        "default": "FontWeight.Normal"
                    }
                }
            },
            "fontFamily": {
                "description": "设置字体列表。",
                "params": {
                    "value": {
                        "type": [
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "字体列表。默认字体'HarmonyOS Sans'。"
                    }
                }
            },
            "lineHeight10+": {
                "description": "设置文本行高。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "文本行高。"
                    }
                }
            },
            "font10+": {
                "description": "设置文本样式。包括字体大小、字体粗细、字体族和字体风格。",
                "params": {
                    "value": {
                        "type": "Font",
                        "required": true,
                        "description": "文本样式。"
                    }
                }
            },
            "textShadow11+": {
                "description": "设置文字阴影效果。该接口支持以数组形式入参，实现多重文字阴影。不支持fill字段, 不支持智能取色模式。",
                "params": {
                    "value": {
                        "type": [
                            "ShadowOptions",
                            [
                                "ShadowOptions"
                            ]
                        ],
                        "required": true,
                        "description": "文字阴影效果。"
                    }
                }
            },
            "textBackgroundStyle11+": {
                "description": "设置背景样式。作为ContainerSpan的子组件时可以继承它的此属性值，优先使用其自身的此属性。",
                "params": {
                    "style": {
                        "type": "TextBackgroundStyle",
                        "required": true,
                        "description": "背景样式。"
                    }
                }
            },
            "baselineOffset12+": {
                "description": "设置Span基线的偏移量。此属性与父组件的baselineOffset是共存的。",
                "params": {
                    "value": {
                        "type": "LengthMetrics",
                        "required": true,
                        "description": "设置Span基线的偏移量，设置该值为百分比时，按默认值显示。正数内容向上偏移，负数向下偏移。默认值：0。在ImageSpan中，设置为非0时会导致设置verticalAlign失效。"
                    }
                }
            }
        },
        "events": {
            "onClick": {
                "description": "通用事件仅支持点击事件。由于Span组件无尺寸信息，因此点击事件返回的ClickEvent对象的target属性无效。"
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Column 布局实现了一个简单的文本展示界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个 Text 组件，用于展示一段带有背景颜色的文本。文本内容为 \"Hello World !\"，字体大小为 20fp，字体颜色为白色，背景颜色为紫色，背景圆角半径为 5vp。文本组件居中对齐，下方留有 5vp 的边距。",
                "code": "@Component // 标记该结构体为一个组件\n@Entry // 标记该组件为入口组件，即应用启动时显示的第一个页面\nstruct Index {\n  build() {\n    Column() { // 创建一个垂直布局的容器\n      Text() { // 创建一个文本组件\n        Span('   Hello World !   ') // 设置文本内容，包含空格以增加间距\n          .fontSize('20fp') // 设置字体大小为 20fp\n          .textBackgroundStyle({color: \"#7F007DFF\", radius: \"5vp\"}) // 设置文本背景样式，颜色为紫色，圆角半径为 5vp\n          .fontColor(Color.White) // 设置字体颜色为白色\n      }\n    }.width('100%') // 设置容器的宽度为 100%，占据整个屏幕宽度\n     .margin({bottom: '5vp'}) // 设置容器的底部边距为 5vp\n     .alignItems(HorizontalAlign.Center) // 设置容器内的子组件水平居中对齐\n  }\n}"
            },
            {
                "description": "该组件通过Row和Column布局实现了一个包含文本和图像的复合文本展示界面。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为一个Column，其中包含一个Text组件，Text组件内部嵌套了多个Span组件和ImageSpan组件。每个Span组件和ImageSpan组件通过baselineOffset属性设置基线的偏移量，从而实现文本和图像在垂直方向上的对齐调整。\n\nText组件的背景颜色设置为灰色，用于突出显示文本和图像的布局效果。Span组件和ImageSpan组件的排列方式为水平布局，通过baselineOffset属性调整基线偏移量，使得文本和图像在垂直方向上对齐。\n\n组件的功能主要是展示文本和图像的基线对齐效果，通过设置不同的基线偏移量，可以实现文本和图像在垂直方向上的对齐调整。用户可以通过调整baselineOffset属性的值来改变文本和图像的垂直位置，从而实现不同的布局效果。",
                "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column() {\n        Text() {\n          Span('word1')\n            .baselineOffset(new LengthMetrics(20, LengthUnit.VP)) // 设置'word1'的基线偏移量为20vp，使其相对于默认基线上移\n          Span('word2')\n            .baselineOffset(new LengthMetrics(0, LengthUnit.VP)) // 设置'word2'的基线偏移量为0vp，使其保持在默认基线上\n          ImageSpan($r(\"app.media.icon\"))\n            .width('45px')\n            .baselineOffset(new LengthMetrics(-20, LengthUnit.VP)) // 设置图像的基线偏移量为-20vp，使其相对于默认基线下移\n        }\n        .backgroundColor(Color.Gray) // 设置Text组件的背景颜色为灰色\n      }\n      .width('100%') // 设置Column的宽度为100%，占据整个父容器的宽度\n    }\n    .height('100%') // 设置Row的高度为100%，占据整个父容器的高度\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个展示带有多个阴影效果的文本的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为两个部分，每个部分包含一个Text组件，用于展示文本内容。每个Text组件内部嵌套了一个Span组件，用于定义文本的具体内容和样式。\n\n组件的样式包括字体大小、文本阴影等属性。字体大小设置为50vp，文本阴影通过textShadows数组定义，包含多个阴影效果，每个阴影效果包括半径、颜色、水平偏移和垂直偏移等属性。阴影效果的颜色分别为红色、黑色、棕色、绿色和黄色，水平偏移逐渐增加，垂直偏移为0。\n\n组件的功能主要是展示带有多个阴影效果的文本，用户可以通过观察文本的阴影效果来了解不同颜色和偏移量的组合效果。整个布局通过Column布局保证文本在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry // 标记该组件为应用的入口组件\n@Component // 标记该结构体为一个自定义组件\nstruct TextSpanExample {\n  @State textShadows : ShadowOptions | Array<ShadowOptions> = [ // 定义一个状态变量textShadows，用于存储文本阴影的配置\n    { radius: 10, color: Color.Red, offsetX: 10, offsetY: 0 }, // 第一个阴影效果：半径10，红色，水平偏移10，垂直偏移0\n    { radius: 10, color: Color.Black, offsetX: 20, offsetY: 0 }, // 第二个阴影效果：半径10，黑色，水平偏移20，垂直偏移0\n    { radius: 10, color: Color.Brown, offsetX: 30, offsetY: 0 }, // 第三个阴影效果：半径10，棕色，水平偏移30，垂直偏移0\n    { radius: 10, color: Color.Green, offsetX: 40, offsetY: 0 }, // 第四个阴影效果：半径10，绿色，水平偏移40，垂直偏移0\n    { radius: 10, color: Color.Yellow, offsetX: 100, offsetY: 0 } // 第五个阴影效果：半径10，黄色，水平偏移100，垂直偏移0\n  ]\n\n  build() {\n    Column({ space: 8 }) { // 创建一个垂直布局的Column组件，子组件之间的间距为8vp\n      Text() { // 创建一个Text组件，用于展示文本内容\n        Span('123456789').fontSize(50).textShadow(this.textShadows) // 创建一个Span组件，内容为'123456789'，字体大小为50vp，应用textShadows定义的阴影效果\n      }\n      Text() { // 创建另一个Text组件，用于展示文本内容\n        Span('123456789') // 创建一个Span组件，内容为'123456789'\n      }.fontSize(50).textShadow(this.textShadows) // 设置Text组件的字体大小为50vp，应用textShadows定义的阴影效果\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示多种文本样式和效果的界面。布局宽度占据整个屏幕，高度设为 250vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组文本。每个文本组的文本以水平布局方式排列，文本之间的间距均匀分布，且对齐方式为居中对齐。\n文本的样式包括字体大小、颜色、装饰线（如下划线、删除线、上划线）、字母间距、文本大小写等属性，支持不同的样式展示。文本组之间通过 Flex 组件进行分隔。文本的功能包括展示不同的样式效果，用户可以通过视觉观察到不同的文本样式。\n整个布局通过 Flex 布局保证文本在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct SpanExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      // 标题：基本用法\n      Text('Basic Usage').fontSize(9).fontColor(0xCCCCCC)\n      // 使用 Span 组件展示基本文本\n      Text() {\n        Span('In Line')\n        Span(' Component')\n        Span(' !')\n      }\n\n      // 标题：文本装饰\n      Text('Text Decoration').fontSize(9).fontColor(0xCCCCCC)\n      // 使用 Span 组件展示带有下划线波浪线的文本\n      Text() {\n        Span('I am Underline-WAVY-span').decoration({ type: TextDecorationType.Underline, color: Color.Red, style: TextDecorationStyle.WAVY }).fontSize(12)\n      }\n      // 使用 Span 组件展示带有删除线点线的文本\n      Text() {\n        Span('I am LineThrough-DOTTED-span')\n          .decoration({ type: TextDecorationType.LineThrough, color: Color.Red, style: TextDecorationStyle.DOTTED })\n          .fontSize(12)\n      }\n      // 使用 Span 组件展示带有上划线虚线的文本\n      Text() {\n        Span('I am Overline-DASHED-span').decoration({ type: TextDecorationType.Overline, color: Color.Red, style: TextDecorationStyle.DASHED }).fontSize(12)\n      }\n\n      // 标题：字母间距\n      Text('LetterSpacing').fontSize(9).fontColor(0xCCCCCC)\n      // 使用 Span 组件展示字母间距为0的文本\n      Text() {\n        Span('span letter spacing')\n          .letterSpacing(0)\n          .fontSize(12)\n      }\n      // 使用 Span 组件展示字母间距为-2的文本\n      Text() {\n        Span('span letter spacing')\n          .letterSpacing(-2)\n          .fontSize(12)\n      }\n      // 使用 Span 组件展示字母间距为3的文本\n      Text() {\n        Span('span letter spacing')\n          .letterSpacing(3)\n          .fontSize(12)\n      }\n\n      // 标题：文本大小写\n      Text('Text Case').fontSize(9).fontColor(0xCCCCCC)\n      // 使用 Span 组件展示小写文本\n      Text() {\n        Span('I am Lower-span').fontSize(12)\n          .textCase(TextCase.LowerCase)\n          .decoration({ type: TextDecorationType.None })\n      }\n      // 使用 Span 组件展示大写文本\n      Text() {\n        Span('I am Upper-span').fontSize(12)\n          .textCase(TextCase.UpperCase)\n          .decoration({ type: TextDecorationType.None })\n      }\n    }.width('100%').height(250).padding({ left: 35, right: 35, top: 35 })\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "ImageSpan": {
        "description": "用于显示行内图片的组件，是Text和ContainerSpan组件的子组件。",
        "details": null,
        "interfaces": [
            {
                "description": "ImageSpan(value: ResourceStr | PixelMap)",
                "params": {
                    "value": {
                        "type": [
                            "ResourceStr",
                            "PixelMap"
                        ],
                        "required": true,
                        "description": "图片的数据源，支持本地图片和网络图片。"
                    }
                }
            }
        ],
        "attributes": {
            "alt": {
                "description": "设置图片加载时显示的占位图。",
                "params": {
                    "value": {
                        "type": "PixelMap",
                        "required": true,
                        "description": "占位图的数据源。"
                    }
                }
            },
            "verticalAlign": {
                "description": "设置图片基于行高的对齐方式。",
                "params": {
                    "value": {
                        "type": "ImageSpanAlignment",
                        "required": true,
                        "description": "对齐方式。"
                    }
                }
            },
            "objectFit": {
                "description": "设置图片的缩放类型。",
                "params": {
                    "value": {
                        "type": "ImageFit",
                        "required": true,
                        "description": "图片的缩放类型。",
                        "default": "ImageFit.Cover"
                    }
                }
            }
        },
        "events": {
            "onComplete": {
                "description": "图片数据加载成功和解码成功时均触发该回调，返回成功加载的图片尺寸。",
                "params": {
                    "callback": {
                        "type": "ImageCompleteCallback",
                        "required": true,
                        "description": "图片加载成功和解码成功时的回调函数。"
                    }
                }
            },
            "onError": {
                "description": "图片加载异常时触发该回调。",
                "params": {
                    "callback": {
                        "type": "ImageErrorCallback",
                        "required": true,
                        "description": "图片加载异常时的回调函数。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Column 布局实现了一个展示带有背景样式的 ImageSpan 图片的界面。布局宽度占据整个屏幕，高度由内容自动调整。组件的垂直方向上包含一个 Text 组件，Text 组件内部嵌套了一个 ImageSpan 组件。ImageSpan 组件用于显示应用图标，并设置了其宽度、高度、垂直对齐方式以及背景样式。\n\n布局属性方面，Column 组件的宽度设置为 100%，确保其占据整个屏幕宽度，同时通过 alignItems 属性设置为 HorizontalAlign.Center，使得内部内容在水平方向上居中对齐。\n\n组件的样式和外观方面，ImageSpan 组件的宽度设置为 60vp，高度设置为 60vp，垂直对齐方式设置为 ImageSpanAlignment.CENTER，确保图片在文本中垂直居中显示。背景样式通过 textBackgroundStyle 方法设置，背景颜色为绿色（Color.Green），背景圆角半径为 5vp，使得图片背景呈现圆角矩形的绿色背景。\n\n组件的排列和嵌套关系方面，Column 组件作为根布局，内部包含一个 Text 组件，Text 组件内部嵌套了 ImageSpan 组件。这种嵌套关系确保了 ImageSpan 图片在 Text 组件中正确显示，并且通过 Column 布局使得整个组件在垂直方向上居中对齐。\n\n组件的功能和交互方面，该示例主要展示了如何通过 ImageSpan 组件显示图片，并通过 textBackgroundStyle 方法设置图片的背景样式，没有涉及复杂的交互功能。",
                "code": "@Component\n@Entry\nstruct Index {\n  build() {\n    Column() {\n      Text() {\n        ImageSpan($r('app.media.app_icon')) // 使用 ImageSpan 组件显示应用图标，资源名为 app.media.app_icon\n          .width('60vp') // 设置 ImageSpan 的宽度为 60vp\n          .height('60vp') // 设置 ImageSpan 的高度为 60vp\n          .verticalAlign(ImageSpanAlignment.CENTER) // 设置 ImageSpan 的垂直对齐方式为居中\n          .textBackgroundStyle({color: Color.Green, radius: \"5vp\"}) // 设置 ImageSpan 的背景样式，背景颜色为绿色，圆角半径为 5vp\n      }\n    }.width('100%').alignItems(HorizontalAlign.Center) // 设置 Column 的宽度为 100%，内部内容在水平方向上居中对齐\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个展示网络图片加载效果的界面。布局宽度占据整个屏幕，高度设为250vp，内边距为左右35vp、顶部35vp。组件的垂直方向上被分为两个部分：一个按钮和一个Text组件。按钮用于触发网络图片的加载请求，Text组件用于展示加载的图片。\n按钮的样式包括默认的背景颜色、边框圆角、宽度和高度等属性，支持点击事件。Text组件内部嵌套了一个ImageSpan组件，用于展示网络图片。ImageSpan组件设置了宽度为300vp，高度为300vp，并支持占位图功能。\n组件的功能包括点击按钮触发网络图片的加载请求，并在加载成功后展示图片。如果加载失败，则展示占位图。整个布局通过Column布局保证按钮和图片在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct SpanExample {\n  @State imageAlt: PixelMap | undefined = undefined // 用于存储加载的图片数据\n\n  httpRequest() {\n    // 发起HTTP请求获取网络图片\n    http.createHttp().request(\"https://www.example.com/xxx.png\", (error: BusinessError, data: http.HttpResponse) => {\n      if (error) {\n        // 请求失败时输出错误信息\n        console.error(`http request failed with. Code: ${error.code}, message: ${error.message}`)\n      } else {\n        // 请求成功时输出成功信息\n        console.log(`http request success.`)\n        let imageData: ArrayBuffer = data.result as ArrayBuffer\n        let imageSource: image.ImageSource = image.createImageSource(imageData)\n\n        class tmp {\n          height: number = 100\n          width: number = 100\n        }\n\n        let option: Record<string, number | boolean | tmp> = {\n          'alphaType': 0, \n          'editable': false, \n          'pixelFormat': 3, \n          'scaleMode': 1, \n          'size': { height: 100, width: 100 }\n        }\n\n        imageSource.createPixelMap(option).then((pixelMap: PixelMap) => {\n          // 将加载的图片数据存储到状态变量中\n          this.imageAlt = pixelMap\n        })\n      }\n    })\n  }\n\n  build() {\n    Column() {\n      Button(\"获取网络图片\")\n        .onClick(() => {\n          // 点击按钮触发网络图片的加载请求\n          this.httpRequest()\n        })\n\n      Text() {\n        ImageSpan('https://www.example.com/xxx.png')\n          .alt(this.imageAlt) // 设置占位图\n          .width(300) // 设置图片宽度\n          .height(300) // 设置图片高度\n      }\n    }.width('100%').height(250).padding({ left: 35, right: 35, top: 35 })\n  }\n}"
            },
            {
                "description": "该示例通过 Flex 布局实现了一个展示文本和图片混合排版的界面。布局宽度占据整个屏幕，高度设为 100%，内边距为左右 0、顶部 0。组件的垂直方向上被分为两个主要部分：一个居中的文本段落和一个包含多个 ImageSpan 和 Span 组件的文本段落。\n\n第一个文本段落居中显示，字体大小为 25，文本颜色为粉色，无装饰线。第二个文本段落包含多个 ImageSpan 和 Span 组件，每个 ImageSpan 和 Span 组件通过不同的垂直对齐方式（如居中、顶部、基线、底部）进行排列。每个 ImageSpan 的图片大小和样式不同，Span 组件的文本装饰线（如删除线、下划线）和颜色也不同。\n\n整个布局通过 Flex 布局保证文本和图片在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct SpanExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建一个居中的文本段落，字体大小为 25，文本颜色为粉色，无装饰线\n      Text() {\n        Span('This is the Span and ImageSpan component').fontSize(25).textCase(TextCase.Normal)\n          .decoration({ type: TextDecorationType.None, color: Color.Pink })\n      }.width('100%').textAlign(TextAlign.Center)\n\n      // 创建一个包含多个 ImageSpan 和 Span 组件的文本段落\n      Text() {\n        // 插入一个宽度为 200px，高度为 200px 的 ImageSpan，图片填充方式为完全填充，垂直对齐方式为居中\n        ImageSpan($r('app.media.icon'))\n          .width('200px')\n          .height('200px')\n          .objectFit(ImageFit.Fill)\n          .verticalAlign(ImageSpanAlignment.CENTER)\n        // 插入一个带有删除线的 Span 组件，字体大小为 25，颜色为红色\n        Span('I am LineThrough-span')\n          .decoration({ type: TextDecorationType.LineThrough, color: Color.Red }).fontSize(25)\n        // 插入一个宽度为 50px，高度为 50px 的 ImageSpan，垂直对齐方式为顶部\n        ImageSpan($r('app.media.icon'))\n          .width('50px')\n          .height('50px')\n          .verticalAlign(ImageSpanAlignment.TOP)\n        // 插入一个带有下划线的 Span 组件，字体大小为 25，颜色为红色\n        Span('I am Underline-span')\n          .decoration({ type: TextDecorationType.Underline, color: Color.Red }).fontSize(25)\n        // 插入一个宽度为 100px，高度为 100px 的 ImageSpan，垂直对齐方式为基线\n        ImageSpan($r('app.media.icon'))\n          .size({ width: '100px', height: '100px' })\n          .verticalAlign(ImageSpanAlignment.BASELINE)\n        // 插入一个带有下划线的 Span 组件，字体大小为 25，颜色为红色\n        Span('I am Underline-span')\n          .decoration({ type: TextDecorationType.Underline, color: Color.Red }).fontSize(25)\n        // 插入一个宽度为 70px，高度为 70px 的 ImageSpan，垂直对齐方式为底部\n        ImageSpan($r('app.media.icon'))\n          .width('70px')\n          .height('70px')\n          .verticalAlign(ImageSpanAlignment.BOTTOM)\n        // 插入一个带有下划线的 Span 组件，字体大小为 50，颜色为红色\n        Span('I am Underline-span')\n          .decoration({ type: TextDecorationType.Underline, color: Color.Red }).fontSize(50)\n      }\n      .width('100%')\n      .textIndent(50) // 设置文本缩进为 50\n    }.width('100%').height('100%').padding({ left: 0, right: 0, top: 0 })\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "ContainerSpan": {
        "description": "Text组件的子组件，用于统一管理多个Span、ImageSpan的背景色及圆角弧度。",
        "details": "该组件从API Version 11开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "ContainerSpan()",
                "params": {}
            }
        ],
        "attributes": {
            "textBackgroundStyle": {
                "description": "设置文本背景样式。子组件在不设置该属性时，将继承此属性值。",
                "params": {
                    "style": {
                        "type": "TextBackgroundStyle",
                        "required": true,
                        "description": "文本背景样式。"
                    }
                }
            },
            "attributeModifier12+": {
                "description": "设置组件的动态属性。",
                "params": {
                    "modifier": {
                        "type": "AttributeModifier<ContainerSpanAttribute>",
                        "required": true,
                        "description": "动态设置组件的属性。"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过Column布局实现了一个包含文本和图像的复合文本展示界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个Text组件，Text组件内部嵌套了一个ContainerSpan组件，用于组合图像和文本。图像和文本的排列方式为水平布局，图像位于文本的左侧，图像和文本之间有一定的间距。\n\n组件的样式包括背景颜色、字体颜色、字体大小、图像的宽度和高度等属性。文本的背景颜色为紫色，带有圆角边框，文本内容为白色，字体大小为16fp。图像的宽度和高度均为40vp，垂直对齐方式为居中对齐。\n\n组件的功能主要是展示一个带有图像的文本内容，图像和文本组合在一起形成一个整体，图像用于增强文本的视觉效果。整个布局通过Column布局保证内容在垂直方向上居中对齐，确保界面整洁美观。",
                "code": "// xxx.ets\n@Component\n@Entry\nstruct Index {\n  build() {\n    Column() {\n      Text() {\n        ContainerSpan() {\n          ImageSpan($r('app.media.app_icon')) // 使用ImageSpan组件嵌入图像，图像资源名为app_icon\n            .width('40vp') // 设置图像的宽度为40vp\n            .height('40vp') // 设置图像的高度为40vp\n            .verticalAlign(ImageSpanAlignment.CENTER) // 设置图像的垂直对齐方式为居中对齐\n          Span('   Hello World !   ') // 使用Span组件嵌入文本内容，文本内容为\"Hello World !\"\n            .fontSize('16fp') // 设置文本的字体大小为16fp\n            .fontColor(Color.White) // 设置文本的字体颜色为白色\n        }.textBackgroundStyle({color: \"#7F007DFF\", radius: \"12vp\"}) // 设置文本的背景样式，背景颜色为紫色，圆角半径为12vp\n      }\n    }.width('100%') // 设置Column组件的宽度为100%\n     .alignItems(HorizontalAlign.Center) // 设置Column组件的子元素水平居中对齐\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "SymbolSpan": {
        "description": "作为Text组件的子组件，用于显示图标小符号的组件。",
        "details": "该组件从API Version 11开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。该组件支持继承父组件Text的属性，即如果子组件未设置属性且父组件设置属性，则继承父组件设置的全部属性。SymbolSpan拖拽不会置灰显示。",
        "interfaces": [
            {
                "description": "SymbolSpan(value: Resource)",
                "params": {
                    "value": {
                        "type": "Resource",
                        "required": true,
                        "description": "SymbolSpan组件的资源名，如 $r('sys.symbol.ohos_wifi')。"
                    }
                }
            }
        ],
        "attributes": {
            "fontColor": {
                "description": "设置SymbolSpan组件颜色。",
                "params": {
                    "value": {
                        "type": [
                            "ResourceColor"
                        ],
                        "required": true,
                        "description": "SymbolSpan组件颜色。"
                    }
                }
            },
            "fontSize": {
                "description": "设置SymbolSpan组件大小。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "SymbolSpan组件大小。"
                    }
                }
            },
            "fontWeight": {
                "description": "设置SymbolSpan组件粗细。number类型取值[100,900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如“400”，以及“bold”、“bolder”、“lighter”、“regular” 、“medium”分别对应FontWeight中相应的枚举值。sys.symbol.ohos_lungs图标不支持设置fontWeight。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "FontWeight",
                            "string"
                        ],
                        "required": true,
                        "description": "SymbolSpan组件粗细。",
                        "default": "FontWeight.Normal"
                    }
                }
            },
            "renderingStrategy": {
                "description": "设置SymbolSpan渲染策略。",
                "params": {
                    "value": {
                        "type": "SymbolRenderingStrategy",
                        "required": true,
                        "description": "SymbolSpan渲染策略。"
                    }
                }
            },
            "effectStrategy": {
                "description": "设置SymbolSpan动效策略。",
                "params": {
                    "value": {
                        "type": "SymbolEffectStrategy",
                        "required": true,
                        "description": "SymbolSpan动效策略。"
                    }
                }
            },
            "attributeModifier": {
                "description": "设置组件的动态属性。",
                "params": {
                    "modifier": {
                        "type": "AttributeModifier<SymbolSpanAttribute>",
                        "required": true,
                        "description": "组件的动态属性。"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过嵌套的Column和Row布局实现了一个展示不同字体权重、符号渲染策略和符号效果策略的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为三个主要部分，每个部分包含一个标题和一组符号展示。每个符号组的符号以水平布局方式排列，符号之间的间距均匀分布，且对齐方式为居中对齐。\n符号的样式包括字体大小、字体颜色、字体权重等属性，支持不同的样式展示。符号组之间通过Row组件进行分隔。符号的功能包括不同的渲染策略和效果策略，用户可以通过不同的策略展示符号的不同效果。\n整个布局通过Column和Row布局保证符号在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Column() {\n      Row() {\n        Column() {\n          Text(\"Light\") // 显示文本“Light”\n          Text() {\n            SymbolSpan($r('sys.symbol.ohos_trash')) // 使用系统符号“ohos_trash”\n              .fontWeight(FontWeight.Lighter) // 设置字体权重为Lighter\n              .fontSize(96) // 设置字体大小为96\n          }\n        }\n\n        Column() {\n          Text(\"Normal\") // 显示文本“Normal”\n          Text() {\n            SymbolSpan($r('sys.symbol.ohos_trash')) // 使用系统符号“ohos_trash”\n              .fontWeight(FontWeight.Normal) // 设置字体权重为Normal\n              .fontSize(96) // 设置字体大小为96\n          }\n        }\n\n        Column() {\n          Text(\"Bold\") // 显示文本“Bold”\n          Text() {\n            SymbolSpan($r('sys.symbol.ohos_trash')) // 使用系统符号“ohos_trash”\n              .fontWeight(FontWeight.Bold) // 设置字体权重为Bold\n              .fontSize(96) // 设置字体大小为96\n          }\n        }\n      }\n\n      Row() {\n        Column() {\n          Text(\"单色\") // 显示文本“单色”\n          Text() {\n            SymbolSpan($r('sys.symbol.ohos_folder_badge_plus')) // 使用系统符号“ohos_folder_badge_plus”\n              .fontSize(96) // 设置字体大小为96\n              .renderingStrategy(SymbolRenderingStrategy.SINGLE) // 设置渲染策略为单色\n              .fontColor([Color.Black, Color.Green, Color.White]) // 设置字体颜色为黑色、绿色、白色\n          }\n        }\n\n        Column() {\n          Text(\"多色\") // 显示文本“多色”\n          Text() {\n            SymbolSpan($r('sys.symbol.ohos_folder_badge_plus')) // 使用系统符号“ohos_folder_badge_plus”\n              .fontSize(96) // 设置字体大小为96\n              .renderingStrategy(SymbolRenderingStrategy.MULTIPLE_COLOR) // 设置渲染策略为多色\n              .fontColor([Color.Black, Color.Green, Color.White]) // 设置字体颜色为黑色、绿色、白色\n          }\n        }\n\n        Column() {\n          Text(\"分层\") // 显示文本“分层”\n          Text() {\n            SymbolSpan($r('sys.symbol.ohos_folder_badge_plus')) // 使用系统符号“ohos_folder_badge_plus”\n              .fontSize(96) // 设置字体大小为96\n              .renderingStrategy(SymbolRenderingStrategy.MULTIPLE_OPACITY) // 设置渲染策略为分层\n              .fontColor([Color.Black, Color.Green, Color.White]) // 设置字体颜色为黑色、绿色、白色\n          }\n        }\n      }\n\n      Row() {\n        Column() {\n          Text(\"无动效\") // 显示文本“无动效”\n          Text() {\n            SymbolSpan($r('sys.symbol.ohos_wifi')) // 使用系统符号“ohos_wifi”\n              .fontSize(96) // 设置字体大小为96\n              .effectStrategy(SymbolEffectStrategy.NONE) // 设置效果策略为无动效\n          }\n        }\n\n        Column() {\n          Text(\"整体缩放动效\") // 显示文本“整体缩放动效”\n          Text() {\n            SymbolSpan($r('sys.symbol.ohos_wifi')) // 使用系统符号“ohos_wifi”\n              .fontSize(96) // 设置字体大小为96\n              .effectStrategy(1) // 设置效果策略为整体缩放动效\n          }\n        }\n\n        Column() {\n          Text(\"层级动效\") // 显示文本“层级动效”\n          Text() {\n            SymbolSpan($r('sys.symbol.ohos_wifi')) // 使用系统符号“ohos_wifi”\n              .fontSize(96) // 设置字体大小为96\n              .effectStrategy(2) // 设置效果策略为层级动效\n          }\n        }\n      }\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "SymbolGlyph": {
        "description": "显示图标小符号的组件。",
        "details": "该组件从API Version 11开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "SymbolGlyph(value?: Resource)",
                "params": {
                    "value": {
                        "type": "Resource",
                        "required": false,
                        "description": "SymbolGlyph组件的资源名,如 $r('sys.symbol.ohos_wifi')。"
                    }
                }
            }
        ],
        "attributes": {
            "fontColor": {
                "description": "设置SymbolGlyph组件颜色。",
                "params": {
                    "value": {
                        "type": "Array<ResourceColor>",
                        "required": true,
                        "description": "SymbolGlyph组件颜色。"
                    }
                }
            },
            "fontSize": {
                "description": "设置SymbolGlyph组件大小。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "SymbolGlyph组件大小。"
                    }
                }
            },
            "fontWeight": {
                "description": "设置SymbolGlyph组件粗细。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "FontWeight"
                        ],
                        "required": true,
                        "description": "SymbolGlyph组件粗细。",
                        "default": "FontWeight.Normal"
                    }
                }
            },
            "renderingStrategy": {
                "description": "设置SymbolGlyph组件渲染策略。",
                "params": {
                    "value": {
                        "type": "SymbolRenderingStrategy",
                        "required": true,
                        "description": "SymbolGlyph组件渲染策略。"
                    }
                }
            },
            "effectStrategy": {
                "description": "设置SymbolGlyph组件动效策略。",
                "params": {
                    "value": {
                        "type": "SymbolEffectStrategy",
                        "required": true,
                        "description": "SymbolGlyph组件动效策略。"
                    }
                }
            },
            "symbolEffect": {
                "description": "设置SymbolGlyph组件动效策略及播放状态。",
                "params": {
                    "symbolEffect": {
                        "type": "SymbolEffect",
                        "required": true,
                        "description": "SymbolGlyph组件动效策略。"
                    },
                    "isActive": {
                        "type": "boolean",
                        "required": false,
                        "description": "SymbolGlyph组件动效播放状态。",
                        "default": false
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过Column和Row布局实现了一个展示可变颜色动效和替换动效的界面。布局宽度占据整个屏幕，高度根据内容自适应，内边距为左30vp、顶部50vp。组件的垂直方向上被分为两个部分，每个部分包含一个标题、一个SymbolGlyph图标和一个按钮。每个部分的图标和按钮以水平布局方式排列，图标和按钮之间的间距为20vp，且对齐方式为居中对齐。\n\nSymbolGlyph图标的样式包括字体大小为96vp，支持不同的动效展示。第一个SymbolGlyph图标展示了可变颜色动效，通过HierarchicalSymbolEffect实现，动效类型为EffectFillStyle.ITERATIVE，用户可以通过点击按钮切换动效的播放和关闭状态。第二个SymbolGlyph图标展示了替换动效，通过ReplaceSymbolEffect实现，动效类型为EffectScope.WHOLE，用户可以通过点击按钮触发图标的替换动效，并切换图标的显示内容。\n\n整个布局通过Column和Row布局保证图标和按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Index {\n  @State isActive: boolean = true; // 控制可变颜色动效的播放状态\n  @State triggerValueReplace: number = 0; // 触发替换动效的值\n  replaceFlag: boolean = true; // 控制替换动效的图标显示内容\n\n  build() {\n    Column() {\n      Row() {\n        Column() {\n          Text(\"可变颜色动效\") // 标题，显示“可变颜色动效”\n          SymbolGlyph($r('sys.symbol.ohos_wifi')) // 显示系统图标“wifi”\n            .fontSize(96) // 设置图标字体大小为96vp\n            .symbolEffect(new HierarchicalSymbolEffect(EffectFillStyle.ITERATIVE), this.isActive) // 设置图标的可变颜色动效，动效类型为EffectFillStyle.ITERATIVE，动效状态由isActive控制\n          Button(this.isActive ? '关闭' : '播放').onClick(() => { // 按钮，点击事件切换isActive的值，从而切换动效的播放和关闭状态\n            this.isActive = !this.isActive;\n          })\n        }.margin({right:20}) // 设置右侧边距为20vp\n\n        Column() {\n          Text(\"替换动效\") // 标题，显示“替换动效”\n          SymbolGlyph(this.replaceFlag ? $r('sys.symbol.checkmark_circle') : $r('sys.symbol.repeat_1')) // 根据replaceFlag的值显示不同的系统图标\n            .fontSize(96) // 设置图标字体大小为96vp\n            .symbolEffect(new ReplaceSymbolEffect(EffectScope.WHOLE), this.triggerValueReplace) // 设置图标的替换动效，动效类型为EffectScope.WHOLE，动效触发值由triggerValueReplace控制\n          Button('trigger').onClick(() => { // 按钮，点击事件切换replaceFlag的值，并增加triggerValueReplace的值，从而触发替换动效并切换图标的显示内容\n            this.replaceFlag = !this.replaceFlag;\n            this.triggerValueReplace = this.triggerValueReplace + 1;\n          })\n        }\n      }\n    }.margin({\n      left:30, // 设置左侧边距为30vp\n      top:50 // 设置顶部边距为50vp\n    })\n  }\n}"
            },
            {
                "description": "该组件通过嵌套的Column和Row布局实现了一个展示不同字体权重、渲染策略和效果策略的SymbolGlyph图标的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为三个部分，每个部分包含一个标题和一组SymbolGlyph图标。每个SymbolGlyph图标组的图标以水平布局方式排列，图标之间的间距均匀分布，且对齐方式为居中对齐。\nSymbolGlyph图标的样式包括字体大小、字体颜色、字体权重、渲染策略和效果策略等属性，支持不同的样式展示。图标组之间通过Row组件进行分隔。图标的功能包括展示不同的字体权重、渲染策略和效果策略，用户可以通过观察图标的变化来理解不同策略的效果。\n整个布局通过Column和Row布局保证图标在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Index {\n  build() {\n    Column() {\n      Row() {\n        Column() {\n          Text(\"Light\") // 显示文本\"Light\"\n          SymbolGlyph($r('sys.symbol.ohos_trash')) // 显示系统图标\"ohos_trash\"\n            .fontWeight(FontWeight.Lighter) // 设置字体权重为\"Lighter\"\n            .fontSize(96) // 设置字体大小为96\n        }\n\n        Column() {\n          Text(\"Normal\") // 显示文本\"Normal\"\n          SymbolGlyph($r('sys.symbol.ohos_trash')) // 显示系统图标\"ohos_trash\"\n            .fontWeight(FontWeight.Normal) // 设置字体权重为\"Normal\"\n            .fontSize(96) // 设置字体大小为96\n        }\n\n        Column() {\n          Text(\"Bold\") // 显示文本\"Bold\"\n          SymbolGlyph($r('sys.symbol.ohos_trash')) // 显示系统图标\"ohos_trash\"\n            .fontWeight(FontWeight.Bold) // 设置字体权重为\"Bold\"\n            .fontSize(96) // 设置字体大小为96\n        }\n      }\n\n      Row() {\n        Column() {\n          Text(\"单色\") // 显示文本\"单色\"\n          SymbolGlyph($r('sys.symbol.ohos_folder_badge_plus')) // 显示系统图标\"ohos_folder_badge_plus\"\n            .fontSize(96) // 设置字体大小为96\n            .renderingStrategy(SymbolRenderingStrategy.SINGLE) // 设置渲染策略为\"SINGLE\"\n            .fontColor([Color.Black, Color.Green, Color.White]) // 设置字体颜色为黑色、绿色和白色\n        }\n\n        Column() {\n          Text(\"多色\") // 显示文本\"多色\"\n          SymbolGlyph($r('sys.symbol.ohos_folder_badge_plus')) // 显示系统图标\"ohos_folder_badge_plus\"\n            .fontSize(96) // 设置字体大小为96\n            .renderingStrategy(SymbolRenderingStrategy.MULTIPLE_COLOR) // 设置渲染策略为\"MULTIPLE_COLOR\"\n            .fontColor([Color.Black, Color.Green, Color.White]) // 设置字体颜色为黑色、绿色和白色\n        }\n\n        Column() {\n          Text(\"分层\") // 显示文本\"分层\"\n          SymbolGlyph($r('sys.symbol.ohos_folder_badge_plus')) // 显示系统图标\"ohos_folder_badge_plus\"\n            .fontSize(96) // 设置字体大小为96\n            .renderingStrategy(SymbolRenderingStrategy.MULTIPLE_OPACITY) // 设置渲染策略为\"MULTIPLE_OPACITY\"\n            .fontColor([Color.Black, Color.Green, Color.White]) // 设置字体颜色为黑色、绿色和白色\n        }\n      }\n\n      Row() {\n        Column() {\n          Text(\"无动效\") // 显示文本\"无动效\"\n          SymbolGlyph($r('sys.symbol.ohos_wifi')) // 显示系统图标\"ohos_wifi\"\n            .fontSize(96) // 设置字体大小为96\n            .effectStrategy(SymbolEffectStrategy.NONE) // 设置效果策略为\"NONE\"\n        }\n\n        Column() {\n          Text(\"整体缩放动效\") // 显示文本\"整体缩放动效\"\n          SymbolGlyph($r('sys.symbol.ohos_wifi')) // 显示系统图标\"ohos_wifi\"\n            .fontSize(96) // 设置字体大小为96\n            .effectStrategy(1) // 设置效果策略为\"1\"\n        }\n\n        Column() {\n          Text(\"层级动效\") // 显示文本\"层级动效\"\n          SymbolGlyph($r('sys.symbol.ohos_wifi')) // 显示系统图标\"ohos_wifi\"\n            .fontSize(96) // 设置字体大小为96\n            .effectStrategy(2) // 设置效果策略为\"2\"\n        }\n      }\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Hyperlink": {
        "description": "超链接组件，组件宽高范围内点击实现跳转。",
        "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。该组件仅支持与系统浏览器配合使用。",
        "interfaces": [
            {
                "description": "Hyperlink(address: string | Resource, content?: string | Resource)",
                "params": {
                    "address": {
                        "type": [
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "Hyperlink组件跳转的网页。"
                    },
                    "content": {
                        "type": [
                            "string",
                            "Resource"
                        ],
                        "required": false,
                        "description": "Hyperlink组件中超链接显示文本。组件内有子组件时，不显示超链接文本。"
                    }
                }
            }
        ],
        "attributes": {
            "color": {
                "description": "设置超链接文本的颜色。",
                "params": {
                    "value": {
                        "type": [
                            "Color",
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "超链接文本的颜色。",
                        "default": "default"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Flex 布局实现了一个包含两个 Hyperlink 组件的界面。布局宽度占据整个屏幕，高度设为 100%，内容在垂直方向上居中对齐。组件的垂直方向上被分为两个部分，每个部分包含一个 Hyperlink 组件。\n\n第一个 Hyperlink 组件包含一个 Image 组件，点击 Hyperlink 可以跳转到指定的 URL。Image 组件的宽度为 200vp，高度为 100vp，显示的图片资源名为 'app.media.bg'。\n\n第二个 Hyperlink 组件包含一个文本标签 'Go to the developer website'，点击 Hyperlink 可以跳转到指定的 URL。Hyperlink 的文本颜色为蓝色。\n\n整个布局通过 Flex 布局保证 Hyperlink 组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct HyperlinkExample {\n  build() {\n    Column() {\n      Column() {\n        Hyperlink('https://example.com/') {\n          Image($r('app.media.bg')) // 显示名为 'app.media.bg' 的图片资源\n            .width(200) // 设置图片宽度为 200vp\n            .height(100) // 设置图片高度为 100vp\n        }\n      }\n\n      Column() {\n        Hyperlink('https://example.com/', 'Go to the developer website') {\n        }\n        .color(Color.Blue) // 设置 Hyperlink 文本颜色为蓝色\n      }\n    }.width('100%').height('100%').justifyContent(FlexAlign.Center) // 设置布局宽度为 100%，高度为 100%，内容在垂直方向上居中对齐\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "RichText": {
        "description": "富文本组件，解析并显示HTML格式文本。",
        "details": "RichText组件适用于加载与显示一段HTML字符串，且不需要对显示效果进行较多自定义的应用场景。RichText组件仅支持有限的通用属性和事件。具体见[属性](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richtext-V5#%E5%B1%9E%E6%80%A7)与[事件](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richtext-V5#%E4%BA%8B%E4%BB%B6)小节。RichText组件底层复用了Web组件来提供基础能力，包括但不限于HTML页面的解析、渲染等。因此使用RichText组件需要遵循Web约束条件。常见典型约束如下：移动设备的视口默认值大小为980px，默认值可以确保大部分网页在移动设备下可以正常浏览。如果RichText组件宽度低于这个值，content内部的HTML则可能会产生一个可以滑动的页面被RichText组件包裹。如果想替换默认值，可以在content中添加以下标签：<meta name=\"viewport\" content=\"width=device-width\">。RichText组件不适用于对HTML字符串的显示效果进行较多自定义的应用场景。例如RichText组件不支持通过设置属性与事件，来修改背景颜色、字体颜色、字体大小、动态改变内容等。在这种情况下，推荐使用[Web组件](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-web-V5#web)。RichText组件比较消耗内存资源，而且有一些重复使用RichText组件的场景下，比如在List下循环重复使用RichText时，会出现卡顿、滑动响应慢等现象。在这种情况下，推荐使用[RichEditor组件](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditor)。",
        "interfaces": [
            {
                "description": "RichText(content: string)",
                "params": {
                    "content": {
                        "type": "string",
                        "required": true,
                        "description": "表示HTML格式的字符串。"
                    }
                }
            }
        ],
        "attributes": {
            "width": {
                "description": "设置组件的宽度。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "宽度值。"
                    }
                }
            },
            "height": {
                "description": "设置组件的高度。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "高度值。"
                    }
                }
            },
            "size": {
                "description": "设置组件的尺寸。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "尺寸值。"
                    }
                }
            },
            "layoutWeight": {
                "description": "设置组件的布局权重。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "布局权重值。"
                    }
                }
            }
        },
        "events": {
            "onStart": {
                "description": "加载网页时触发。",
                "params": {
                    "callback": {
                        "type": "() => void",
                        "required": true,
                        "description": "加载网页时的回调函数。"
                    }
                }
            },
            "onComplete": {
                "description": "网页加载结束时触发。",
                "params": {
                    "callback": {
                        "type": "() => void",
                        "required": true,
                        "description": "网页加载结束时的回调函数。"
                    }
                }
            }
        },
        "rules": [
            "该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
            "该组件无法根据内容自适应设置宽高属性，需要开发者设置显示布局。"
        ],
        "examples": [
            {
                "description": "该组件通过 Flex 布局实现了一个展示多种类型文本及其样式效果的界面。布局宽度为 500vp，高度为 500vp，背景颜色为 0XBDDB69。组件的垂直方向上被分为多个部分，每个部分包含一个 RichText 组件，用于展示不同样式的文本内容。\nRichText 组件的样式包括文本对齐方式、字体大小、颜色、背景颜色、行高等属性，支持不同的样式展示。文本内容包括标题、斜体、下划线、段落等，通过 HTML 标签进行定义。\n组件的功能包括在文本加载开始和完成时触发相应的事件，用户可以通过控制台查看事件的触发情况。\n整个布局通过 Flex 布局保证文本在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct RichTextExample {\n  @State data: string = '<h1 style=\"text-align: center;\">h1标题</h1>' +\n    '<h1 style=\"text-align: center;\"><i>h1斜体</i></h1>' +\n    '<h1 style=\"text-align: center;\"><u>h1下划线</u></h1>' +\n    '<h2 style=\"text-align: center;\">h2标题</h2>' +\n    '<h3 style=\"text-align: center;\">h3标题</h3>' +\n    '<p style=\"text-align: center;\">p常规</p><hr/>' +\n    '<div style=\"width: 500px;height: 500px;border: 1px solid;margin: 0 auto;\">' +\n    '<p style=\"font-size: 35px;text-align: center;font-weight: bold; color: rgb(24,78,228)\">字体大小35px,行高45px</p>' +\n    '<p style=\"background-color: #e5e5e5;line-height: 45px;font-size: 35px;text-indent: 2em;\">' +\n    '<p>这是一段文字这是一段文字这是一段文字这是一段文字这是一段文字这是一段文字这是一段文字这是一段文字这是一段文字</p>';\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center,\n      justifyContent: FlexAlign.Center }) {\n      RichText(this.data)\n        .onStart(() => {\n          console.info('RichText onStart');\n        })\n        .onComplete(() => {\n          console.info('RichText onComplete');\n        })\n        .width(500)\n        .height(500)\n        .backgroundColor(0XBDDB69)\n      // RichText 组件展示带有不同样式的文本内容，宽度为 500vp，高度为 500vp，背景颜色为 0XBDDB69\n\n      RichText('layoutWeight(1)')\n        .onStart(() => {\n          console.info('RichText onStart');\n        })\n        .onComplete(() => {\n          console.info('RichText onComplete');\n        })\n        .size({ width: '100%', height: 110 })\n        .backgroundColor(0X92D6CC)\n        .layoutWeight(1)\n      // RichText 组件展示文本内容 \"layoutWeight(1)\"，宽度为 100%，高度为 110vp，背景颜色为 0X92D6CC，布局权重为 1\n\n      RichText('layoutWeight(2)')\n        .onStart(() => {\n          console.info('RichText onStart');\n        })\n        .onComplete(() => {\n          console.info('RichText onComplete');\n        })\n        .size({ width: '100%', height: 110 })\n        .backgroundColor(0X92C48D)\n        .layoutWeight(2)\n      // RichText 组件展示文本内容 \"layoutWeight(2)\"，宽度为 100%，高度为 110vp，背景颜色为 0X92C48D，布局权重为 2\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": false
    },
    "SelectionMenu": {
        "description": "文本选择菜单，适用于富文本组件通过bindSelectionMenu绑定自定义文本选择菜单，建议绑定鼠标右键或者鼠标选中方式弹出，不支持作为普通组件单独使用。",
        "details": "该组件从API Version 11开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "SelectionMenu(options: SelectionMenuOptions)",
                "params": {
                    "options": {
                        "type": "SelectionMenuOptions",
                        "description": "SelectionMenu的可选菜单类型项及其具体配置参数。"
                    }
                }
            }
        ],
        "attributes": {
            "editorMenuOptions": {
                "description": "编辑菜单。",
                "params": {
                    "value": {
                        "type": "Array<EditorMenuOptions>",
                        "description": "编辑菜单选项。"
                    }
                }
            },
            "expandedMenuOptions": {
                "description": "扩展下拉菜单。",
                "params": {
                    "value": {
                        "type": "Array<ExpandedMenuOptions>",
                        "description": "扩展下拉菜单选项。"
                    }
                }
            },
            "controller": {
                "description": "富文本控制器。",
                "params": {
                    "value": {
                        "type": "RichEditorController",
                        "description": "富文本控制器。"
                    }
                }
            }
        },
        "events": {
            "onCopy": {
                "description": "替代内置系统菜单复制项的事件回调。",
                "params": {
                    "event": {
                        "type": "EditorEventInfo",
                        "description": "返回信息。"
                    }
                }
            },
            "onPaste": {
                "description": "替代内置系统菜单粘贴项的事件回调。",
                "params": {
                    "event": {
                        "type": "EditorEventInfo",
                        "description": "返回信息。"
                    }
                }
            },
            "onCut": {
                "description": "替代内置系统菜单剪切项的事件回调。",
                "params": {
                    "event": {
                        "type": "EditorEventInfo",
                        "description": "返回信息。"
                    }
                }
            },
            "onSelectAll": {
                "description": "替代内置系统菜单全选项的事件回调。",
                "params": {
                    "event": {
                        "type": "EditorEventInfo",
                        "description": "返回信息。"
                    }
                }
            }
        },
        "rules": [
            "点击自定义文本选择菜单内置复制功能选项后，自定义菜单消失选中文本高亮保留。",
            "点击自定义文本选择菜单内置全选功能选项后，自定义菜单消失文本全选高亮。",
            "点击自定义文本选择菜单内置粘贴功能选项后，空白处粘贴或者选中文本替换粘贴均是保留被复制文本的样式。",
            "当富文本组件RichEditor的copyOptions属性设置为CopyOptions.None时，内置的复制剪切功能不会被限制。"
        ],
        "examples": [
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用RichEditor组件实现一个富文本编辑器，并结合SelectionMenu组件提供丰富的文本编辑功能。布局上，整个界面由一个Column组件包裹，包含一个Button组件和一个RichEditor组件。Button组件用于设置文本选择范围，RichEditor组件用于显示和编辑富文本内容。RichEditor组件内部绑定了多个SelectionMenu组件，用于提供不同的文本编辑操作菜单。\n\n样式上，RichEditor组件设置了红色边框，宽度为200vp，高度为200vp。SelectionMenu组件的宽度为256vp，背景颜色为透明。SliderPanel组件用于调整文本大小，包含一个Slider组件和一个Flex布局，Slider组件的宽度为210vp，Flex布局的子元素包括两个Text组件和一个Slider组件，分别用于显示文本大小和调整文本大小。\n\n功能上，Button组件点击后会设置RichEditor的文本选择范围。RichEditor组件在准备好后会添加两段不同样式的文本，并在文本选择变化时更新选择范围的状态。RichEditor组件绑定了三个不同的SelectionMenu组件，分别在右键点击、文本选择和默认情况下显示不同的编辑菜单。编辑菜单提供了加粗、斜体、下划线、文本颜色和文本大小调整等功能。",
                "code": "import { SelectionMenu, EditorMenuOptions, ExpandedMenuOptions, EditorEventInfo, SelectionMenuOptions } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct Index {\n  @State select: boolean = true\n  controller: RichEditorController = new RichEditorController();\n  options: RichEditorOptions = { controller: this.controller }\n  @State message: string = 'Hello word'\n  @State textSize: number = 30\n  @State fontWeight: FontWeight = FontWeight.Normal\n  @State start: number = -1\n  @State end: number = -1\n  @State visibleValue: Visibility = Visibility.Visible\n  @State colorTransparent: Color = Color.Transparent\n  @State textStyle: RichEditorTextStyle = {}\n  private editorMenuOptions: Array<EditorMenuOptions> =\n    [\n      { icon: $r(\"app.media.ic_notepad_textbold\"), action: () => {\n        if (this.controller) {\n          let selection = this.controller.getSelection();\n          let spans = selection.spans\n          spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n            if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n              let span = item as RichEditorTextSpanResult\n              this.textStyle = span.textStyle\n              let start = span.offsetInSpan[0]\n              let end = span.offsetInSpan[1]\n              let offset = span.spanPosition.spanRange[0]\n              if (this.textStyle.fontWeight != 11) {\n                this.textStyle.fontWeight = FontWeight.Bolder\n              } else {\n                this.textStyle.fontWeight = FontWeight.Normal\n              }\n              this.controller.updateSpanStyle({\n                start: offset + start,\n                end: offset + end,\n                textStyle: this.textStyle\n              })\n            }\n          })\n        }\n      } },\n      { icon: $r(\"app.media.ic_notepad_texttilt\"), action: () => {\n        if (this.controller) {\n          let selection = this.controller.getSelection();\n          let spans = selection.spans\n          spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n            if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n              let span = item as RichEditorTextSpanResult\n              this.textStyle = span.textStyle\n              let start = span.offsetInSpan[0]\n              let end = span.offsetInSpan[1]\n              let offset = span.spanPosition.spanRange[0]\n              if (this.textStyle.fontStyle == FontStyle.Italic) {\n                this.textStyle.fontStyle = FontStyle.Normal\n              } else {\n                this.textStyle.fontStyle = FontStyle.Italic\n              }\n              this.controller.updateSpanStyle({\n                start: offset + start,\n                end: offset + end,\n                textStyle: this.textStyle\n              })\n            }\n          })\n        }\n      } },\n      { icon: $r(\"app.media.ic_notepad_underline\"),\n        action: () => {\n          if (this.controller) {\n            let selection = this.controller.getSelection();\n            let spans = selection.spans\n            spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n              if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n                let span = item as RichEditorTextSpanResult\n                this.textStyle = span.textStyle\n                let start = span.offsetInSpan[0]\n                let end = span.offsetInSpan[1]\n                let offset = span.spanPosition.spanRange[0]\n                if (this.textStyle.decoration) {\n                  if (this.textStyle.decoration.type == TextDecorationType.Underline) {\n                    this.textStyle.decoration.type = TextDecorationType.None\n                  } else {\n                    this.textStyle.decoration.type = TextDecorationType.Underline\n                  }\n                } else {\n                  this.textStyle.decoration = { type: TextDecorationType.Underline, color: Color.Black }\n                }\n                this.controller.updateSpanStyle({\n                  start: offset + start,\n                  end: offset + end,\n                  textStyle: this.textStyle\n                })\n              }\n            })\n          }\n        }\n      },\n      { icon: $r(\"app.media.app_icon\"), action: () => {\n      }, builder: (): void => this.sliderPanel() },\n      { icon: $r(\"app.media.ic_notepad_textcolor\"), action: () => {\n        if (this.controller) {\n          let selection = this.controller.getSelection();\n          let spans = selection.spans\n          spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n            if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n              let span = item as RichEditorTextSpanResult\n              this.textStyle = span.textStyle\n              let start = span.offsetInSpan[0]\n              let end = span.offsetInSpan[1]\n              let offset = span.spanPosition.spanRange[0]\n              if (this.textStyle.fontColor == Color.Orange || this.textStyle.fontColor == '#FFFFA500') {\n                this.textStyle.fontColor = Color.Black\n              } else {\n                this.textStyle.fontColor = Color.Orange\n              }\n              this.controller.updateSpanStyle({\n                start: offset + start,\n                end: offset + end,\n                textStyle: this.textStyle\n              })\n            }\n          })\n        }\n      } }]\n  private expandedMenuOptions: Array<ExpandedMenuOptions> =\n    [{ startIcon: $r(\"app.media.icon\"), content: '词典', action: () => {\n    } }, { startIcon: $r(\"app.media.icon\"), content: '翻译', action: () => {\n    } }, { startIcon: $r(\"app.media.icon\"), content: '搜索', action: () => {\n    } }]\n  private expandedMenuOptions1: Array<ExpandedMenuOptions> = []\n  private editorMenuOptions1: Array<EditorMenuOptions> = []\n  private selectionMenuOptions: SelectionMenuOptions = {\n    editorMenuOptions: this.editorMenuOptions,\n    expandedMenuOptions: this.expandedMenuOptions,\n    controller: this.controller,\n    onCut: (event?: EditorEventInfo) => {\n      if (event && event.content) {\n        event.content.spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n          if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n            let span = item as RichEditorTextSpanResult\n            console.info('test cut' + span.value)\n            console.info('test start ' + span.offsetInSpan[0] + ' end: ' + span.offsetInSpan[1])\n          }\n        })\n      }\n    },\n    onPaste: (event?: EditorEventInfo) => {\n      if (event && event.content) {\n        event.content.spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n          if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n            let span = item as RichEditorTextSpanResult\n            console.info('test onPaste' + span.value)\n            console.info('test start ' + span.offsetInSpan[0] + ' end: ' + span.offsetInSpan[1])\n          }\n        })\n      }\n    },\n    onCopy: (event?: EditorEventInfo) => {\n      if (event && event.content) {\n        event.content.spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n          if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n            let span = item as RichEditorTextSpanResult\n            console.info('test cut' + span.value)\n            console.info('test start ' + span.offsetInSpan[0] + ' end: ' + span.offsetInSpan[1])\n          }\n        })\n      }\n    },\n    onSelectAll: (event?: EditorEventInfo) => {\n      if (event && event.content) {\n        event.content.spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n          if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n            let span = item as RichEditorTextSpanResult\n            console.info('test onPaste' + span.value)\n            console.info('test start ' + span.offsetInSpan[0] + ' end: ' + span.offsetInSpan[1])\n          }\n        })\n      }\n    }\n  }\n\n  @Builder sliderPanel() {\n    Column() {\n      Flex({ justifyContent: FlexAlign.SpaceBetween, alignItems: ItemAlign.Center }) {\n        Text('A').fontSize(15)\n        Slider({ value: this.textSize, step: 10, style: SliderStyle.InSet })\n          .width(210)\n          .onChange((value: number, mode: SliderChangeMode) => {\n            if (this.controller) {\n              let selection = this.controller.getSelection();\n              if (mode == SliderChangeMode.End) {\n                if (this.textSize == undefined) {\n                  this.textSize = 0\n                }\n                let spans = selection.spans\n                spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) => {\n                  if (typeof (item as RichEditorTextSpanResult)['textStyle'] != 'undefined') {\n                    this.textSize = Math.max(this.textSize, (item as RichEditorTextSpanResult).textStyle.fontSize)\n                  }\n                })\n              }\n              if (mode == SliderChangeMode.Moving || mode == SliderChangeMode.Click) {\n                this.start = selection.selection[0]\n                this.end = selection.selection[1]\n                this.textSize = value\n                this.controller.updateSpanStyle({\n                  start: this.start,\n                  end: this.end,\n                  textStyle: { fontSize: this.textSize }\n                })\n              }\n            }\n          })\n        Text('A').fontSize(20).fontWeight(FontWeight.Medium)\n      }.borderRadius($r('sys.float.ohos_id_corner_radius_card'))\n    }\n    .shadow(ShadowStyle.OUTER_DEFAULT_MD)\n    .backgroundColor(Color.White)\n    .borderRadius($r('sys.float.ohos_id_corner_radius_card'))\n    .padding(15)\n    .height(48)\n  }\n\n  @Builder\n  MyMenu() {\n    Column() {\n      SelectionMenu(this.selectionMenuOptions)\n    }\n    .width(256)\n    .backgroundColor(Color.Transparent)\n  }\n\n  @Builder\n  MyMenu2() {\n    Column() {\n      SelectionMenu({\n        editorMenuOptions: this.editorMenuOptions,\n        expandedMenuOptions: this.expandedMenuOptions1,\n        controller: this.controller,\n      })\n    }\n    .width(256)\n    .backgroundColor(Color.Transparent)\n  }\n\n  @Builder\n  MyMenu3() {\n    Column() {\n      SelectionMenu({\n        editorMenuOptions: this.editorMenuOptions1,\n        expandedMenuOptions: this.expandedMenuOptions,\n        controller: this.controller,\n      })\n    }\n    .width(256)\n    .backgroundColor(Color.Transparent)\n  }\n\n  build() {\n    Column() {\n      Button(\"SetSelection\")\n        .onClick((event: ClickEvent) => {\n          if (this.controller) {\n            this.controller.setSelection(0, 2)\n          }\n        })\n\n      RichEditor(this.options)\n        .onReady(() => {\n          this.controller.addTextSpan(this.message, { style: { fontColor: Color.Orange, fontSize: 30 } })\n          this.controller.addTextSpan(this.message, { style: { fontColor: Color.Black, fontSize: 25 } })\n        })\n        .onSelect((value: RichEditorSelection) => {\n          if (value.selection[0] == -1 && value.selection[1] == -1) {\n            return\n          }\n          this.start = value.selection[0]\n          this.end = value.selection[1]\n        })\n        .bindSelectionMenu(RichEditorSpanType.TEXT, this.MyMenu3(), RichEditorResponseType.RIGHT_CLICK)\n        .bindSelectionMenu(RichEditorSpanType.TEXT, this.MyMenu2(), RichEditorResponseType.SELECT)\n        .borderWidth(1)\n        .borderColor(Color.Red)\n        .width(200)\n        .height(200)\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": false
    },
    "Image": {
        "description": "图片组件，常用于在应用中显示图片。支持加载PixelMap、ResourceStr和DrawableDescriptor类型的数据源，支持png、jpg、jpeg、bmp、svg、webp、gif和heif类型的图片格式。",
        "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "Image(src: PixelMap | ResourceStr | DrawableDescriptor)",
                "params": {
                    "src": {
                        "type": [
                            "PixelMap",
                            "ResourceStr",
                            "DrawableDescriptor"
                        ],
                        "required": true,
                        "description": "图片的数据源，支持本地图片和网络图片，引用方式请参考[加载图片资源](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-graphics-display-V5#%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90)。"
                    }
                }
            },
            {
                "description": "Image(src: PixelMap | ResourceStr | DrawableDescriptor | ImageContent)",
                "params": {
                    "src": {
                        "type": [
                            "PixelMap",
                            "ResourceStr",
                            "DrawableDescriptor",
                            "ImageContent"
                        ],
                        "required": true,
                        "description": "图片的数据源，支持本地图片和网络图片，引用方式请参考[加载图片资源](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-graphics-display-V5#%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90)。"
                    }
                }
            },
            {
                "description": "Image(src: PixelMap | ResourceStr | DrawableDescriptor, imageAIOptions: ImageAIOptions)",
                "params": {
                    "src": {
                        "type": [
                            "PixelMap",
                            "ResourceStr",
                            "DrawableDescriptor"
                        ],
                        "required": true,
                        "description": "图片的数据源，支持本地图片和网络图片，引用方式请参考[加载图片资源](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-graphics-display-V5#%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90)。"
                    },
                    "imageAIOptions": {
                        "type": "ImageAIOptions",
                        "required": true,
                        "description": "给组件设置一个AI分析选项，通过此项可配置分析类型或绑定一个分析控制器。"
                    }
                }
            }
        ],
        "attributes": {
            "alt": {
                "description": "设置图片加载时显示的占位图。",
                "params": {
                    "value": {
                        "type": [
                            "string",
                            "Resource",
                            "PixelMap"
                        ],
                        "required": true,
                        "description": "加载时显示的占位图，支持本地图片（png、jpg、bmp、svg、gif和heif类型）,支持PixelMap类型图片，不支持网络图片。"
                    }
                }
            },
            "objectFit": {
                "description": "设置图片的填充效果。",
                "params": {
                    "value": {
                        "type": "ImageFit",
                        "required": true,
                        "description": "图片的填充效果。",
                        "default": "ImageFit.Cover"
                    }
                }
            },
            "objectRepeat": {
                "description": "设置图片的重复样式，从中心点向两边重复，剩余空间不足放下一张图片时会截断。svg类型图源不支持该属性。",
                "params": {
                    "value": {
                        "type": "ImageRepeat",
                        "required": true,
                        "description": "图片的重复样式。",
                        "default": "ImageRepeat.NoRepeat"
                    }
                }
            },
            "interpolation": {
                "description": "设置图片的插值效果，即缓解图片在缩放时的锯齿问题。svg类型图源不支持该属性。",
                "params": {
                    "value": {
                        "type": "ImageInterpolation",
                        "required": true,
                        "description": "图片的插值效果。"
                    }
                }
            },
            "renderMode": {
                "description": "设置图片的渲染模式。svg类型图源不支持该属性。",
                "params": {
                    "value": {
                        "type": "ImageRenderMode",
                        "required": true,
                        "description": "图片的渲染模式为原色或黑白。",
                        "default": "ImageRenderMode.Original"
                    }
                }
            },
            "sourceSize": {
                "description": "设置图片解码尺寸。仅在目标尺寸小于图源尺寸时生效。svg类型图源和PixelMap资源不支持该属性。",
                "params": {
                    "value": {
                        "type": {
                            "width": "number",
                            "height": "number"
                        },
                        "required": true,
                        "description": "图片解码尺寸，降低图片的分辨率，常用于需要让图片显示尺寸比组件尺寸更小的场景。"
                    }
                }
            },
            "matchTextDirection": {
                "description": "设置图片是否跟随系统语言方向，在RTL语言环境下显示镜像翻转显示效果。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "图片是否跟随系统语言方向。",
                        "default": false
                    }
                }
            },
            "fitOriginalSize": {
                "description": "设置图片的显示尺寸是否跟随图源尺寸。图片组件尺寸未设置时，其显示尺寸是否跟随图源尺寸。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "图片的显示尺寸是否跟随图源尺寸",
                        "default": false
                    }
                }
            },
            "fillColor": {
                "description": "设置填充颜色，设置后填充颜色会覆盖在图片上。仅对svg图源生效，设置后会替换svg图片的填充颜色。如需对png图片进行修改颜色，可以使用colorFilter。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "填充颜色。"
                    }
                }
            },
            "autoResize": {
                "description": "设置图片解码过程中是否对图源自动缩放。降采样解码时图片的部分信息丢失，因此可能会导致图片质量的下降（如：出现锯齿），这时可以选择把autoResize设为false，按原图尺寸解码，提升显示效果，但会增加内存占用。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "图片解码过程中是否对图源自动缩放。设置为true时，组件会根据显示区域的尺寸决定用于绘制的图源尺寸，有利于减少内存占用。",
                        "default": false
                    }
                }
            },
            "syncLoad": {
                "description": "设置是否同步加载图片。建议加载尺寸较小的本地图片时将syncLoad设为true，因为耗时较短，在主线程上执行即可。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否同步加载图片，默认是异步加载。同步加载时阻塞UI线程，不会显示占位图。",
                        "default": false
                    }
                }
            },
            "copyOption": {
                "description": "设置图片是否可复制。当copyOption设置为非CopyOptions.None时，支持使用长按、鼠标右击、快捷组合键'CTRL+C'等方式进行复制。svg图片不支持复制。",
                "params": {
                    "value": {
                        "type": "CopyOptions",
                        "required": true,
                        "description": "图片是否可复制。",
                        "default": "CopyOptions.None"
                    }
                }
            },
            "colorFilter": {
                "description": "为图像设置颜色滤镜效果。",
                "params": {
                    "value": {
                        "type": [
                            "ColorFilter",
                            "DrawingColorFilter"
                        ],
                        "required": true,
                        "description": "给图像设置颜色滤镜效果，入参为一个的4x5的RGBA转换矩阵。"
                    }
                }
            },
            "draggable": {
                "description": "设置组件默认拖拽效果。不能和onDragStart事件同时使用。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "组件默认拖拽效果，设置为true时，组件可拖拽，绑定的长按手势不生效。",
                        "default": true
                    }
                }
            },
            "enableAnalyzer": {
                "description": "设置组件支持AI分析，当前支持主体识别、文字识别和对象查找等功能。具体使用指导请参考[AI识图](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/vision-imageanalyzer-V5)",
                "params": {
                    "enable": {
                        "type": "boolean",
                        "required": true,
                        "description": "组件支持AI分析，设置为true时，组件可进行AI分析。",
                        "default": false
                    }
                }
            },
            "resizable": {
                "description": "设置图像拉伸时可调整大小的图像选项。拉伸对拖拽缩略图以及占位图有效。",
                "params": {
                    "value": {
                        "type": "ResizableOptions",
                        "required": true,
                        "description": "图像拉伸时可调整大小的图像选项。"
                    }
                }
            },
            "privacySensitive": {
                "description": "设置是否支持卡片敏感隐私信息。",
                "params": {
                    "supported": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否支持卡片敏感隐私信息。",
                        "default": false
                    }
                }
            },
            "dynamicRangeMode": {
                "description": "设置期望展示的图像动态范围。",
                "params": {
                    "value": {
                        "type": "DynamicRangeMode",
                        "required": true,
                        "description": "期望展示的图像动态范围。"
                    }
                }
            }
        },
        "events": {
            "onComplete": {
                "description": "图片数据加载成功和解码成功时均触发该回调，返回成功加载的图片尺寸。",
                "params": {
                    "width": {
                        "type": "number",
                        "required": true,
                        "description": "图片的宽。"
                    },
                    "height": {
                        "type": "number",
                        "required": true,
                        "description": "图片的高。"
                    },
                    "componentWidth": {
                        "type": "number",
                        "required": true,
                        "description": "组件的宽。"
                    },
                    "componentHeight": {
                        "type": "number",
                        "required": true,
                        "description": "组件的高。"
                    },
                    "loadingStatus": {
                        "type": "number",
                        "required": true,
                        "description": "图片加载成功的状态值。返回的状态值为0时，表示图片数据加载成功。返回的状态值为1时，表示图片解码成功。"
                    },
                    "contentWidth": {
                        "type": "number",
                        "required": true,
                        "description": "图片实际绘制的宽度。仅在loadingStatus返回1时有效。"
                    },
                    "contentHeight": {
                        "type": "number",
                        "required": true,
                        "description": "图片实际绘制的高度。仅在loadingStatus返回1时有效。"
                    },
                    "contentOffsetX": {
                        "type": "number",
                        "required": true,
                        "description": "实际绘制内容相对于组件自身的x轴偏移。仅在loadingStatus返回1时有效。"
                    },
                    "contentOffsetY": {
                        "type": "number",
                        "required": true,
                        "description": "实际绘制内容相对于组件自身的y轴偏移。仅在loadingStatus返回1时有效。"
                    }
                }
            },
            "onError": {
                "description": "图片加载异常时触发该回调。",
                "params": {
                    "componentWidth": {
                        "type": "number",
                        "required": true,
                        "description": "组件的宽。"
                    },
                    "componentHeight": {
                        "type": "number",
                        "required": true,
                        "description": "组件的高。"
                    },
                    "message": {
                        "type": "string",
                        "required": true,
                        "description": "报错信息。"
                    }
                }
            },
            "onFinish": {
                "description": "当加载的源文件为带动效的svg格式图片时，svg动效播放完成时会触发这个回调。如果动效为无限循环动效，则不会触发这个回调。",
                "params": {}
            }
        },
        "rules": [
            "使用网络图片时，需要申请权限ohos.permission.INTERNET。具体申请方式请参考[声明权限](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/declare-permissions-V5)。",
            "如果下载的网络图片大于10MB或一次下载的网络图片数量较多，建议使用[HTTP](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/http-request-V5)工具提前预下载，提高图片加载性能，方便应用侧管理数据。",
            "如果SVG图片没有原生大小，需要给Image组件设置宽高，否则不显示。",
            "如果SVG图片通过image标签引用本地其他图片，被引用的图片不支持svg格式和gif格式。",
            "src由有效切换为无效时，图片保持不动。"
        ],
        "examples": [
            {
                "description": "该组件展示了一个带有隐私隐藏配置的图像组件。布局宽度占据整个屏幕，图像组件的宽度为50vp，高度为50vp，顶部边距为30vp。图像组件的排列方式为垂直布局，对齐方式为水平居中对齐。\n图像组件的样式包括宽度、高度、边距等属性，支持隐私敏感配置。图像组件的功能包括隐私敏感配置，当配置为true时，图像内容在某些场景下会被模糊处理或隐藏，以保护用户隐私。\n整个布局通过Column组件实现，确保图像组件在垂直方向上居中对齐，界面简洁明了。",
                "code": "@Entry\n@Component\nstruct ImageExample {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局的Column组件，子组件之间的间距为10vp\n      Image($r(\"app.media.startIcon\")) // 创建一个图像组件，资源路径为app.media.startIcon\n        .width(50) // 设置图像组件的宽度为50vp\n        .height(50) // 设置图像组件的高度为50vp\n        .margin({top :30}) // 设置图像组件的顶部边距为30vp\n        .privacySensitive(true) // 设置图像组件为隐私敏感，当配置为true时，图像内容在某些场景下会被模糊处理或隐藏\n    }\n    .alignItems(HorizontalAlign.Center) // 设置Column组件的子组件在水平方向上居中对齐\n    .width(\"100%\") // 设置Column组件的宽度占据整个屏幕\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个展示两张图片的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为两个部分，每个部分包含一张图片。每张图片的宽度为 100vp，高度为 100vp。\n图片的样式包括宽度、高度等属性，支持不同的样式展示。图片的功能包括点击事件和动画结束事件，用户可以通过点击图片触发相应操作，图片也可以在动画结束后进行状态切换。\n整个布局通过 Column 布局保证图片在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ImageExample3 {\n  // 定义三张图片资源\n  private imageOne: Resource = $r('app.media.earth');\n  private imageTwo: Resource = $r('app.media.star');\n  private imageThree: Resource = $r('app.media.moveStar');\n\n  // 定义两个状态变量，用于控制图片的显示\n  @State src: Resource = this.imageOne;\n  @State src2: Resource = this.imageThree;\n\n  build() {\n    Column() {\n      // 第一张图片，点击后切换为第二张图片\n      Image(this.src)\n        .width(100) // 设置图片宽度为 100vp\n        .height(100) // 设置图片高度为 100vp\n        .onClick(() => {\n          // 点击事件，切换图片为第二张图片\n          this.src = this.imageTwo;\n        })\n\n      // 第二张图片，动画结束后切换为第一张图片\n      Image(this.src2)\n        .width(100) // 设置图片宽度为 100vp\n        .height(100) // 设置图片高度为 100vp\n        .onFinish(() => {\n          // 动画结束事件，切换图片为第一张图片\n          this.src2 = this.imageOne;\n        })\n    }\n    .width('100%') // 设置布局宽度为 100%\n    .height('100%') // 设置布局高度为 100%\n  }\n}"
            },
            {
                "description": "该组件展示了一个通过点击按钮切换图片源的功能。布局宽度占据整个屏幕，内边距为20vp。组件的垂直方向上包含一个图片和一个按钮。图片的宽度为100vp，高度为100vp，按钮的宽度为100%，内边距为20vp。按钮的文本为“点击切换Image的src”，点击按钮时会切换图片的源。\n图片的源可以是ResourceStr类型或ImageContent类型，通过@State变量imageSrcIndex来控制当前显示的图片源。当点击按钮时，imageSrcIndex会递增并取模于imageSrcList的长度，从而实现图片源的切换。",
                "code": "@Entry\n@Component\nstruct ImageContentExample {\n  // 定义一个状态变量imageSrcIndex，用于控制当前显示的图片源索引，初始值为0\n  @State imageSrcIndex: number = 0;\n  \n  // 定义一个状态变量imageSrcList，用于存储图片源列表，包含一个ResourceStr类型和一个ImageContent类型\n  @State imageSrcList: (ResourceStr | ImageContent)[] = [$r('app.media.app_icon'), ImageContent.EMPTY];\n\n  build() {\n    Column({ space: 10 }) {\n      // 创建一个Image组件，显示当前索引对应的图片源，宽度为100vp，高度为100vp\n      Image(this.imageSrcList[this.imageSrcIndex])\n        .width(100)\n        .height(100)\n      \n      // 创建一个Button组件，文本为“点击切换Image的src”，内边距为20vp，点击时触发onClick事件\n      Button('点击切换Image的src')\n        .padding(20)\n        .onClick(() => {\n          // 点击按钮时，imageSrcIndex递增并取模于imageSrcList的长度，实现图片源的切换\n          this.imageSrcIndex = (this.imageSrcIndex + 1) % this.imageSrcList.length;\n        })\n    }\n    // 设置Column组件的宽度为100%，内边距为20vp\n    .width('100%')\n    .padding(20)\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示多种类型图片（如 PNG、GIF、SVG、JPG）的界面。布局宽度为 360vp，高度为 320vp，内边距为右 10vp、顶部 10vp。组件的垂直方向上被分为两个部分，每个部分包含两张图片。每张图片以水平布局方式排列，图片之间的间距均匀分布，且对齐方式为居中对齐。\n图片的样式包括宽度、高度、边距等属性，每张图片的宽度为 110vp，高度为 110vp，边距为 15vp。图片的功能包括加载不同类型的图片资源，并通过 overlay 方法在图片底部添加文本标签，标签内容为图片的文件类型（如 PNG、GIF、SVG、JPG），标签的对齐方式为底部对齐，偏移量为 y 轴方向 20vp。\n整个布局通过 Flex 布局保证图片在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ImageExample1 {\n  build() {\n    Column() {\n      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start }) {\n        Row() {\n          // 加载 PNG 图片，设置图片的宽度、高度和边距，并在图片底部添加文本标签 \"png\"\n          Image($r('app.media.ic_camera_master_ai_leaf'))\n            .width(110).height(110).margin(15)\n            .overlay('png', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n\n          // 加载 GIF 图片，设置图片的宽度、高度和边距，并在图片底部添加文本标签 \"gif\"\n          Image($r('app.media.loading'))\n            .width(110).height(110).margin(15)\n            .overlay('gif', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n        }\n        Row() {\n          // 加载 SVG 图片，设置图片的宽度、高度和边距，并在图片底部添加文本标签 \"svg\"\n          Image($r('app.media.ic_camera_master_ai_clouded'))\n            .width(110).height(110).margin(15)\n            .overlay('svg', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n\n          // 加载 JPG 图片，设置图片的宽度、高度和边距，并在图片底部添加文本标签 \"jpg\"\n          Image($r('app.media.ic_public_favor_filled'))\n            .width(110).height(110).margin(15)\n            .overlay('jpg', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n        }\n      }\n    }.height(320).width(360).padding({ right: 10, top: 10 })\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个加载网络图片的界面。布局宽度占据整个屏幕，高度设为100%，内边距为0。组件的垂直方向上包含一个Image组件，用于展示加载的网络图片。\nImage组件的宽度为100%，高度为100%，图片的适应模式为None，即图片保持原始尺寸显示。当网络图片加载失败或加载过程中，Image组件会显示一个占位图，占位图的资源名为$r('app.media.img')。\n组件的功能包括从指定的URL加载图片，并将图片数据解码为PixelMap格式，最终显示在Image组件中。如果加载失败，会在控制台输出错误信息。",
                "code": "import { http } from '@kit.NetworkKit'; // 导入网络请求工具包\nimport { BusinessError } from '@kit.BasicServicesKit'; // 导入业务错误处理工具包\nimport { image } from '@kit.ImageKit'; // 导入图片处理工具包\n\n@Entry\n@Component\nstruct ImageExample2 {\n  @State pixelMapImg: PixelMap | undefined = undefined; // 定义一个状态变量，用于存储图片的PixelMap数据\n\n  aboutToAppear() {\n    this.requestImageUrl('https://www.example.com/xxx.png'); // 组件即将显示时，调用请求图片URL的方法\n  }\n\n  requestImageUrl(url: string) {\n    http.createHttp().request(url, (error: BusinessError, data: http.HttpResponse) => { // 发送网络请求，获取图片数据\n      if (error) {\n        console.error(`request image failed: url: ${url}, code: ${error.code}, message: ${error.message}`); // 如果请求失败，输出错误信息\n      } else {\n        let imgData: ArrayBuffer = data.result as ArrayBuffer; // 将返回的数据转换为ArrayBuffer格式\n        console.info(`request image success, size: ${imgData.byteLength}`); // 输出图片数据的大小\n        let imgSource: image.ImageSource = image.createImageSource(imgData); // 创建ImageSource对象\n        class sizeTmp {\n          height: number = 100\n          width: number = 100\n        }\n        let options: Record<string, number | boolean | sizeTmp> = { // 定义图片解码选项\n          'alphaType': 0, // 透明度类型\n          'editable': false, // 是否可编辑\n          'pixelFormat': 3, // 像素格式\n          'scaleMode': 1, // 缩放模式\n          'size': { height: 100, width: 100 } // 图片尺寸\n        }\n        imgSource.createPixelMap(options).then((pixelMap: PixelMap) => { // 将ImageSource解码为PixelMap\n          console.error('image createPixelMap success'); // 输出解码成功信息\n          this.pixelMapImg = pixelMap; // 将解码后的PixelMap赋值给状态变量\n        })\n      }\n    })\n  }\n\n  build() {\n    Column() { // 使用Column布局\n      Image(this.pixelMapImg) // 创建Image组件，显示加载的图片\n        .alt($r('app.media.img')) // 设置占位图，当图片加载失败或加载过程中显示\n        .objectFit(ImageFit.None) // 设置图片适应模式为None，保持原始尺寸\n        .width('100%') // 设置图片宽度为100%\n        .height('100%') // 设置图片高度为100%\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示图片及其调整拉伸效果的界面。布局宽度占据整个屏幕，高度设为 100%，内边距为 0。组件的垂直方向上被分为多个部分，每个部分包含一个图片和一组按钮。每个图片组的图片以固定宽度和高度（200vp）展示，图片之间的间距为 5vp，且对齐方式为居中对齐。\n图片的样式包括边框颜色和宽度（粉色，2vp），支持不同的图片适应方式（如包含、覆盖等）。图片组之间通过 Flex 组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过 Flex 布局保证图片在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Index {\n  @State top: number = 40 // 定义图片顶部拉伸区域的初始值\n  @State bottom: number = 5 // 定义图片底部拉伸区域的初始值\n  @State left: number = 40 // 定义图片左侧拉伸区域的初始值\n  @State right: number = 10 // 定义图片右侧拉伸区域的初始值\n\n  build() {\n    Column({ space: 5 }) { // 创建一个垂直布局，组件之间的间距为 5vp\n\n      Image($r(\"app.media.sky\")) // 加载名为 \"sky\" 的图片资源\n        .width(200).height(200) // 设置图片的宽度和高度为 200vp\n        .border({ width: 2, color: Color.Pink }) // 设置图片的边框宽度和颜色（粉色，2vp）\n        .objectFit(ImageFit.Contain) // 设置图片的适应方式为包含（保持图片比例，尽可能填充区域）\n\n      Image($r(\"app.media.sky\")) // 加载名为 \"sky\" 的图片资源\n        .resizable({ // 设置图片的可调整拉伸区域\n          slice: {\n            left: this.left, // 设置图片左侧拉伸区域的宽度\n            right: this.right, // 设置图片右侧拉伸区域的宽度\n            top: this.top, // 设置图片顶部拉伸区域的高度\n            bottom: this.bottom // 设置图片底部拉伸区域的高度\n          }\n        })\n        .width(200) // 设置图片的宽度为 200vp\n        .height(200) // 设置图片的高度为 200vp\n        .border({ width: 2, color: Color.Pink }) // 设置图片的边框宽度和颜色（粉色，2vp）\n        .objectFit(ImageFit.Contain) // 设置图片的适应方式为包含（保持图片比例，尽可能填充区域）\n\n      Row() { // 创建一个水平布局\n        Button(\"add top to \" + this.top).fontSize(10) // 创建一个按钮，点击后增加顶部拉伸区域的高度\n          .onClick(() => {\n            this.top += 2 // 每次点击增加 2vp\n          })\n        Button(\"add bottom to \" + this.bottom).fontSize(10) // 创建一个按钮，点击后增加底部拉伸区域的高度\n          .onClick(() => {\n            this.bottom += 2 // 每次点击增加 2vp\n          })\n      }\n\n      Row() { // 创建一个水平布局\n        Button(\"add left to \" + this.left).fontSize(10) // 创建一个按钮，点击后增加左侧拉伸区域的宽度\n          .onClick(() => {\n            this.left += 2 // 每次点击增加 2vp\n          })\n        Button(\"add right to \" + this.right).fontSize(10) // 创建一个按钮，点击后增加右侧拉伸区域的宽度\n          .onClick(() => {\n            this.right += 2 // 每次点击增加 2vp\n          })\n      }\n\n    }\n    .justifyContent(FlexAlign.Start).width('100%').height('100%') // 设置布局的对齐方式为开始对齐，宽度为 100%，高度为 100%\n  }\n}"
            },
            {
                "description": "该组件展示了一个图像分析示例，通过使用鸿蒙ArkUI的Image组件和AI分析功能，实现了对图像的加载、显示以及AI分析。布局上，组件采用垂直布局（Column），包含一个Image组件和一个Button组件。Image组件用于显示加载的图像，并支持AI分析功能，Button组件用于触发获取支持的AI分析类型。\n\n布局属性方面，Image组件的宽度设置为200vp，高度设置为300vp，左侧边距为10vp。Button组件的文本为“getTypes”，点击后会触发获取支持的AI分析类型。\n\n组件的样式和外观方面，Image组件的图像适应方式为“Contain”，即保持图像的宽高比，尽可能完整地显示图像。Button组件的文本颜色和背景颜色未明确设置，使用默认样式。\n\n组件的排列和嵌套关系方面，Image组件和Button组件在垂直方向上依次排列，Image组件在上，Button组件在下。\n\n组件的功能和交互方面，Image组件支持AI分析功能，可以通过enableAnalyzer属性开启。Button组件的点击事件会调用aiController的getImageAnalyzerSupportTypes方法，获取当前支持的AI分析类型。",
                "code": "import { image } from '@kit.ImageKit' // 导入ImageKit模块中的image组件\n\n@Entry\n@Component\nstruct ImageExample4 {\n  @State imagePixelMap: image.PixelMap | undefined = undefined // 定义一个状态变量imagePixelMap，用于存储图像的PixelMap数据\n  private aiController: ImageAnalyzerController = new ImageAnalyzerController() // 创建一个ImageAnalyzerController实例，用于控制图像分析\n  private options: ImageAIOptions = { // 定义图像分析的选项\n    types: [ImageAnalyzerType.SUBJECT, ImageAnalyzerType.TEXT], // 设置分析类型为图像主体和文本\n    aiController: this.aiController // 绑定AI分析控制器\n  }\n\n  async aboutToAppear() { // 组件生命周期方法，在组件即将显示时执行\n    this.imagePixelMap = await this.getPixmapFromMedia($r('app.media.img')) // 异步加载图像的PixelMap数据\n  }\n\n  build() {\n    Column() { // 创建一个垂直布局\n      Image(this.imagePixelMap, this.options) // 创建一个Image组件，显示加载的图像并启用AI分析\n        .enableAnalyzer(true) // 开启AI分析功能\n        .objectFit(ImageFit.Contain) // 设置图像适应方式为“Contain”\n        .width(200) // 设置图像宽度为200vp\n        .height(300) // 设置图像高度为300vp\n        .margin({left: 10}) // 设置图像左侧边距为10vp\n      Button('getTypes') // 创建一个Button组件，文本为“getTypes”\n        .onClick(() => { // 设置Button的点击事件\n          this.aiController.getImageAnalyzerSupportTypes() // 点击后调用aiController的getImageAnalyzerSupportTypes方法，获取支持的AI分析类型\n        })\n    }\n  }\n\n  private async getPixmapFromMedia(resource: Resource) { // 异步方法，用于从资源中获取图像的PixelMap数据\n    let unit8Array = await getContext(this)?.resourceManager?.getMediaContent({ // 异步获取资源的二进制数据\n      bundleName: resource.bundleName, // 资源所在的bundle名称\n      moduleName: resource.moduleName, // 资源所在的模块名称\n      id: resource.id // 资源的ID\n    })\n    let imageSource = image.createImageSource(unit8Array.buffer.slice(0, unit8Array.buffer.byteLength)) // 创建ImageSource对象\n    let createPixelMap: image.PixelMap = await imageSource.createPixelMap({ // 异步创建PixelMap对象\n      desiredPixelFormat: image.PixelMapFormat.RGBA_8888 // 设置期望的像素格式为RGBA_8888\n    })\n    await imageSource.release() // 释放ImageSource对象\n    return createPixelMap // 返回创建的PixelMap对象\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示多种图像及其 objectFit 效果的界面。布局宽度为 360vp，高度为 320vp，内边距为右侧 10vp、顶部 10vp。组件的垂直方向上被分为两个部分，每个部分包含两张图像。每张图像的宽度为 110vp，高度为 110vp，外边距为 15vp。图像的边框宽度为 2vp，颜色为粉色。图像的 objectFit 属性分别设置为不同的值，以展示不同的图像适应效果。\n图像的排列方式为水平布局，每行包含两张图像，图像之间的间距均匀分布，且对齐方式为居中对齐。图像的样式包括边框颜色、宽度和高度等属性，支持不同的样式展示。图像的功能包括 objectFit 效果，用户可以通过设置不同的 objectFit 属性来调整图像的显示效果。\n整个布局通过 Flex 布局保证图像在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ImageExample {\n  build() {\n    Column() {\n      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start }) {\n        Row() {\n          // 第一张图像，资源名为 app.media.sky，宽度为 110vp，高度为 110vp，外边距为 15vp，边框宽度为 2vp，颜色为粉色，objectFit 属性设置为 ImageFit.TOP_START\n          Image($r('app.media.sky'))\n            .width(110).height(110).margin(15)\n            .overlay('png', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n            .border({ width: 2, color: Color.Pink })\n            .objectFit(ImageFit.TOP_START)\n\n          // 第二张图像，资源名为 app.media.loading，宽度为 110vp，高度为 110vp，外边距为 15vp，边框宽度为 2vp，颜色为粉色，objectFit 属性设置为 ImageFit.BOTTOM_START\n          Image($r('app.media.loading'))\n            .width(110).height(110).margin(15)\n            .overlay('gif', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n            .border({ width: 2, color: Color.Pink })\n            .objectFit(ImageFit.BOTTOM_START)\n        }\n        Row() {\n          // 第三张图像，资源名为 app.media.svg，宽度为 110vp，高度为 110vp，外边距为 15vp，边框宽度为 2vp，颜色为粉色，objectFit 属性设置为 ImageFit.TOP_END\n          Image($r('app.media.svg'))\n            .width(110).height(110).margin(15)\n            .overlay('svg', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n            .border({ width: 2, color: Color.Pink })\n            .objectFit(ImageFit.TOP_END)\n\n          // 第四张图像，资源名为 app.media.jpg，宽度为 110vp，高度为 110vp，外边距为 15vp，边框宽度为 2vp，颜色为粉色，objectFit 属性设置为 ImageFit.CENTER\n          Image($r('app.media.jpg'))\n            .width(110).height(110).margin(15)\n            .overlay('jpg', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n            .border({ width: 2, color: Color.Pink })\n            .objectFit(ImageFit.CENTER)\n        }\n      }\n    }.height(320).width(360).padding({ right: 10, top: 10 })\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个展示图像并为其设置颜色滤镜效果的界面。布局宽度为100vp，高度为100vp，内边距为15vp。组件的垂直方向上被分为三个部分，每个部分包含一个图像。每个图像的宽度为100vp，高度为100vp，且通过点击事件触发颜色滤镜效果的设置。\n图像的样式包括宽度、高度、边距等属性，支持不同的颜色滤镜效果展示。图像组之间通过Column组件进行分隔。图像的功能包括点击事件和颜色滤镜效果，用户可以通过点击图像触发相应颜色滤镜的设置，图像也可以在不同的颜色滤镜效果下进行展示。\n整个布局通过Column布局保证图像在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { drawing, common2D } from '@kit.ArkGraphics2D'; // 导入ArkGraphics2D库中的drawing和common2D模块\n\n@Entry\n@Component\nstruct ImageExample3 {\n  private imageOne: Resource = $r('app.media.1'); // 定义私有变量imageOne，用于存储资源名为'1'的图像资源\n  private imageTwo: Resource = $r('app.media.2'); // 定义私有变量imageTwo，用于存储资源名为'2'的图像资源\n  @State src: Resource = this.imageOne // 定义状态变量src，初始值为imageOne\n  @State src2: Resource = this.imageTwo // 定义状态变量src2，初始值为imageTwo\n  private ColorFilterMatrix: number[] = [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0]; // 定义私有变量ColorFilterMatrix，用于存储颜色滤镜矩阵\n  private color: common2D.Color = { alpha: 255, red: 255, green: 0, blue: 0 }; // 定义私有变量color，用于存储颜色值，alpha为255，红色为255，绿色为0，蓝色为0\n  @State DrawingColorFilterFirst: ColorFilter | undefined = undefined // 定义状态变量DrawingColorFilterFirst，初始值为undefined\n  @State DrawingColorFilterSecond: ColorFilter | undefined = undefined // 定义状态变量DrawingColorFilterSecond，初始值为undefined\n  @State DrawingColorFilterThird: ColorFilter | undefined = undefined // 定义状态变量DrawingColorFilterThird，初始值为undefined\n\n  build() {\n    Column() {\n      Image(this.src) // 创建一个Image组件，显示src变量对应的图像\n        .width(100) // 设置图像宽度为100vp\n        .height(100) // 设置图像高度为100vp\n        .colorFilter(this.DrawingColorFilterFirst) // 设置图像的颜色滤镜为DrawingColorFilterFirst\n        .onClick(() => { // 设置图像的点击事件\n          this.DrawingColorFilterFirst = drawing.ColorFilter.createBlendModeColorFilter(this.color, drawing.BlendMode.SRC_IN); // 点击后设置DrawingColorFilterFirst为通过createBlendModeColorFilter方法创建的颜色滤镜\n        })\n\n      Image(this.src2) // 创建一个Image组件，显示src2变量对应的图像\n        .width(100) // 设置图像宽度为100vp\n        .height(100) // 设置图像高度为100vp\n        .colorFilter(this.DrawingColorFilterSecond) // 设置图像的颜色滤镜为DrawingColorFilterSecond\n        .onClick(() => { // 设置图像的点击事件\n          this.DrawingColorFilterSecond = new ColorFilter(this.ColorFilterMatrix); // 点击后设置DrawingColorFilterSecond为通过ColorFilterMatrix创建的颜色滤镜\n        })\n\n      Image($r('app.media.test_self')) // 创建一个Image组件，显示资源名为'test_self'的图像\n        .width(110).height(110).margin(15) // 设置图像宽度为110vp，高度为110vp，边距为15vp\n        .colorFilter(this.DrawingColorFilterThird) // 设置图像的颜色滤镜为DrawingColorFilterThird\n        .onClick(() => { // 设置图像的点击事件\n          this.DrawingColorFilterThird = drawing.ColorFilter.createBlendModeColorFilter(this.color, drawing.BlendMode.SRC_IN); // 点击后设置DrawingColorFilterThird为通过createBlendModeColorFilter方法创建的颜色滤镜\n        })\n    }\n  }\n}"
            },
            {
                "description": "该组件通过Column和Row布局实现了一个展示PixelMap数组动画的界面。布局宽度占据整个屏幕的50%，高度设为屏幕的50%。组件的垂直方向上被分为两个部分：第一部分是一个展示动画的Image组件，第二部分是两个按钮，分别用于控制动画的播放次数。\n\nImage组件的宽度为500px，高度为500px，展示一个PixelMap数组动画。动画播放完成后会触发onFinish事件，输出\"finish\"到控制台。\n\n按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。按钮的样式包括宽度为100px，内边距为5px，外边距为5px。按钮的功能包括点击事件，用户可以通过点击按钮触发相应操作，改变动画的播放次数。\n\n整个布局通过Column和Row布局保证组件在垂直和水平方向上有序排列，确保界面整洁美观。",
                "code": "import {AnimationOptions, AnimatedDrawableDescriptor} from '@kit.ArkUI' // 导入动画相关的接口和类\nimport { image } from '@kit.ImageKit' // 导入图像处理相关的接口和类\n\n@Entry\n@Component\nstruct ImageExample {\n  pixelmaps: Array<PixelMap\\>  = \\[\\]; // 定义一个PixelMap数组，用于存储动画帧\n  options: AnimationOptions = {duration:2000, iterations:1}; // 定义动画选项，设置动画持续时间和播放次数\n  @State animated: AnimatedDrawableDescriptor | undefined = undefined; // 定义一个状态变量，用于存储动画描述符\n\n  async aboutToAppear() {\n    this.pixelmaps = await this.getPixelMaps(); // 异步获取PixelMap数组\n    this.animated = new AnimatedDrawableDescriptor(this.pixelmaps, this.options); // 创建动画描述符\n  }\n\n  build() {\n    Column() {\n      Row() {\n        Image(this.animated) // 创建一个Image组件，展示动画\n          .width('500px').height('500px') // 设置Image组件的宽度和高度\n          .onFinish(() =\\> { // 设置动画播放完成后的回调函数\n            console.info(\"finish\") // 输出\"finish\"到控制台\n          })\n      }.height('50%') // 设置Row组件的高度为屏幕的50%\n      Row() {\n        Button('once').width(100).padding(5).onClick(() =\\> { // 创建一个按钮，设置宽度、内边距和点击事件\n          this.options = {duration:2000, iterations:1}; // 设置动画选项，播放一次\n          this.animated = new AnimatedDrawableDescriptor(this.pixelmaps, this.options); // 更新动画描述符\n        }).margin(5) // 设置按钮的外边距\n        Button('infinite').width(100).padding(5).onClick(() =\\> { // 创建另一个按钮，设置宽度、内边距和点击事件\n          this.options = {duration:2000, iterations:-1}; // 设置动画选项，无限循环播放\n          this.animated = new AnimatedDrawableDescriptor(this.pixelmaps, this.options); // 更新动画描述符\n        }).margin(5) // 设置按钮的外边距\n      }\n    }.width('50%') // 设置Column组件的宽度为屏幕的50%\n  }\n\n  private async getPixmapListFromMedia(resource: Resource) {\n    let unit8Array = await getContext(this)?.resourceManager?.getMediaContent({ // 异步获取媒体内容\n      bundleName: resource.bundleName,\n      moduleName: resource.moduleName,\n      id: resource.id\n    })\n    let imageSource = image.createImageSource(unit8Array.buffer.slice(0, unit8Array.buffer.byteLength)) // 创建图像源\n    let createPixelMap: Array<image.PixelMap\\> = await imageSource.createPixelMapList({ // 异步创建PixelMap数组\n      desiredPixelFormat: image.PixelMapFormat.RGBA\\_8888\n    })\n    await imageSource.release() // 释放图像源\n    return createPixelMap // 返回PixelMap数组\n  }\n\n  private async getPixmapFromMedia(resource: Resource) {\n    let unit8Array = await getContext(this)?.resourceManager?.getMediaContent({ // 异步获取媒体内容\n      bundleName: resource.bundleName,\n      moduleName: resource.moduleName,\n      id: resource.id\n    })\n    let imageSource = image.createImageSource(unit8Array.buffer.slice(0, unit8Array.buffer.byteLength)) // 创建图像源\n    let createPixelMap: image.PixelMap = await imageSource.createPixelMap({ // 异步创建PixelMap\n      desiredPixelFormat: image.PixelMapFormat.RGBA\\_8888\n    })\n    await imageSource.release() // 释放图像源\n    return createPixelMap // 返回PixelMap\n  }\n\n  private async getPixelMaps() {\n    let Mypixelmaps:Array<PixelMap\\> = await this.getPixmapListFromMedia($r('app.media.view')) // 异步获取PixelMap数组\n    Mypixelmaps.push(await this.getPixmapFromMedia($r('app.media.icon'))) // 异步获取PixelMap并添加到数组中\n    return Mypixelmaps; // 返回PixelMap数组\n  }\n}"
            },
            {
                "description": "该组件实现了一个带有扫光效果的图片展示界面。布局宽度为 450vp，高度为 200vp，内边距为顶部 20vp、左右 20vp。组件的垂直方向上包含一个 Column 布局，内部嵌套一个 Row 布局，Row 布局中包含一个 Stack 布局。Stack 布局中包含一个 Image 组件和一个 Row 组件，用于实现扫光效果。\n\nImage 组件用于展示图片，宽度为 450vp，高度为 200vp，图片的显示方式为包含（ImageFit.Contain），初始状态下图片不可见（Visibility.Hidden）。当图片加载完成或加载失败时，图片会变为可见状态（Visibility.Visible）。\n\nRow 组件用于实现扫光效果，宽度为 450vp，高度为 200vp，初始状态下不可见（Visibility.Hidden）。Row 组件的背景为一个线性渐变，方向为从左到右（GradientDirection.Right），渐变颜色从 #E1E4E9 到 #FFFFFF 再到 #E1E4E9，透明度为 0.5。扫光效果通过动画控制 Row 组件的位置（position）来实现，动画持续时间为 1500 毫秒，使用三次贝塞尔曲线（cubicBezier）进行平滑过渡，动画无限循环（iterationsTimes = -1）。\n\n整个布局通过 Stack 布局将图片和扫光效果叠加在一起，确保扫光效果在图片上显示。组件的背景颜色为 #E1E4E9，边框圆角为 20vp，内容被裁剪以适应圆角边框。组件在初始化时会自动触发扫光动画。",
                "code": "import { curves } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct ImageExample11 {\n  private curve = curves.cubicBezier(0.33, 0, 0.67, 1); // 定义三次贝塞尔曲线，用于动画的平滑过渡\n  @State moveImg: string[] = ['imageScanEffect']; // 用于存储扫光效果的标识符\n  @State moveImgVisible: Visibility = Visibility.Visible; // 控制扫光效果的可见性\n  @State durationTime: number = 1500; // 动画持续时间，单位为毫秒\n  @State iterationsTimes: number = -1; // 动画循环次数，-1 表示无限循环\n  @State private opacityValue: number = 0.5; // 扫光效果的透明度\n  @State imageWidth: number = 450; // 图片的宽度\n  @State visible: Visibility = Visibility.Hidden; // 控制图片的可见性\n  @State stackBackgroundColor: string = '#E1E4E9'; // Stack 布局的背景颜色\n  @State linePositionX: number = 0 - this.imageWidth; // 扫光效果的初始位置，X 轴坐标\n  @State linePositionY: number = 0; // 扫光效果的初始位置，Y 轴坐标\n  @State imgResource: Resource | undefined = undefined; // 图片资源\n\n  startupAnimate() {\n    this.moveImg.pop(); // 移除扫光效果的标识符\n    this.moveImg.push('imageScanEffect'); // 重新添加扫光效果的标识符\n    setTimeout(() => {\n      this.imgResource = $r('app.media.img'); // 延迟 3000 毫秒后加载图片资源\n    }, 3000);\n    animateTo({\n      duration: this.durationTime, // 动画持续时间\n      curve: this.curve, // 动画曲线\n      tempo: 1, // 动画速度\n      iterations: this.iterationsTimes, // 动画循环次数\n      delay: 0 // 动画延迟时间\n    }, () => {\n      this.linePositionX = this.imageWidth; // 动画结束时，扫光效果的位置移动到图片的右侧\n    })\n  }\n\n  build() {\n    Column() {\n      Row() {\n        Stack() {\n          Image(this.imgResource)\n            .width(this.imageWidth) // 图片宽度\n            .height(200) // 图片高度\n            .objectFit(ImageFit.Contain) // 图片显示方式\n            .visibility(this.visible) // 图片可见性\n            .onComplete(() => {\n              this.visible = Visibility.Visible; // 图片加载完成时，设置图片可见\n              this.moveImg.pop(); // 移除扫光效果的标识符\n            })\n            .onError(() => {\n              setTimeout(() => {\n                this.visible = Visibility.Visible; // 图片加载失败时，延迟 2600 毫秒后设置图片可见\n                this.moveImg.pop(); // 移除扫光效果的标识符\n              }, 2600)\n            })\n          ForEach(this.moveImg, (item: string) => {\n            Row()\n              .width(this.imageWidth) // 扫光效果的宽度\n              .height(200) // 扫光效果的高度\n              .visibility(this.moveImgVisible) // 扫光效果的可见性\n              .position({ x: this.linePositionX, y: this.linePositionY }) // 扫光效果的位置\n              .linearGradient({\n                direction: GradientDirection.Right, // 渐变方向\n                repeating: false, // 是否重复渐变\n                colors: [[0xE1E4E9, 0], [0xFFFFFF, 0.75], [0xE1E4E9, 1]] // 渐变颜色\n              })\n              .opacity(this.opacityValue) // 扫光效果的透明度\n          })\n        }\n        .backgroundColor(this.visible ? this.stackBackgroundColor : undefined) // Stack 布局的背景颜色\n        .margin({top: 20, left: 20, right: 20}) // Stack 布局的外边距\n        .borderRadius(20) // Stack 布局的边框圆角\n        .clip(true) // 裁剪内容以适应边框圆角\n        .onAppear(() => {\n          this.startupAnimate(); // 组件初始化时触发扫光动画\n        })\n      }\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "ImageAnimator": {
        "description": "提供帧动画组件来实现逐帧播放图片的能力，可以配置需要播放的图片列表，每张图片可以配置时长。",
        "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "ImageAnimator()",
                "params": {}
            }
        ],
        "attributes": {
            "images": {
                "description": "设置图片帧信息集合。不支持动态更新。",
                "params": {
                    "value": {
                        "type": "Array<ImageFrameInfo>",
                        "required": true,
                        "description": "设置图片帧信息集合。每一帧的帧信息(ImageFrameInfo)包含图片路径、图片大小、图片位置和图片播放时长信息，详见ImageFrameInfo属性说明。",
                        "default": "[]"
                    }
                }
            },
            "state": {
                "description": "控制播放状态。",
                "params": {
                    "value": {
                        "type": "AnimationStatus",
                        "required": true,
                        "description": "默认为初始状态，用于控制播放状态。",
                        "default": "AnimationStatus.Initial"
                    }
                }
            },
            "duration": {
                "description": "设置播放时长。当Images中任意一帧图片设置了单独的duration后，该属性设置无效。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "播放时长。value为0时，不播放图片。value的改变只会在下一次循环开始时生效。单位：毫秒",
                        "default": "1000ms"
                    }
                }
            },
            "reverse": {
                "description": "设置播放方向。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "播放方向。false表示从第1张图片播放到最后1张图片，true表示从最后1张图片播放到第1张图片。",
                        "default": "false"
                    }
                }
            },
            "fixedSize": {
                "description": "设置图片大小是否固定为组件大小。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "设置图片大小是否固定为组件大小。 true表示图片大小与组件大小一致，此时设置图片的width 、height 、top 和left属性是无效的。false表示每一张图片的width 、height 、top和left属性都要单独设置。",
                        "default": "true"
                    }
                }
            },
            "fillMode": {
                "description": "设置当前播放方向下，动画开始前和结束后的状态。动画结束后的状态由fillMode和reverse属性共同决定。例如，fillMode为Forwards表示停止时维持动画最后一个关键帧的状态，若reverse为false则维持正播的最后一帧，即最后一张图，若reverse为true则维持逆播的最后一帧，即第一张图。",
                "params": {
                    "value": {
                        "type": "FillMode",
                        "required": true,
                        "description": "当前播放方向下，动画开始前和结束后的状态。",
                        "default": "FillMode.Forwards"
                    }
                }
            },
            "iterations": {
                "description": "设置播放次数。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "默认播放一次，设置为-1时表示无限次播放。",
                        "default": "1"
                    }
                }
            }
        },
        "events": {
            "onStart": {
                "description": "状态回调，动画开始播放时触发。",
                "params": {}
            },
            "onPause": {
                "description": "状态回调，动画暂停播放时触发。",
                "params": {}
            },
            "onRepeat": {
                "description": "状态回调，动画重复播放时触发。",
                "params": {}
            },
            "onCancel": {
                "description": "状态回调，动画返回最初状态时触发。",
                "params": {}
            },
            "onFinish": {
                "description": "状态回调，动画播放完成时或者停止播放时触发。",
                "params": {}
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过Column布局实现了一个展示Resource动画和PixelMap动画的界面。布局宽度占据整个屏幕，高度设为100%，内边距为顶部100vp。组件的垂直方向上被分为两个主要部分：动画展示区域和控制按钮区域。\n\n动画展示区域使用ImageAnimator组件来展示动画，动画的图片资源通过images属性传入，动画的持续时间通过duration属性设置为2000毫秒。动画的状态（如运行、暂停、停止）通过state属性控制，动画的播放方向通过reverse属性控制，动画的重复次数通过iterations属性控制。动画的宽度为340vp，高度为240vp，顶部边距为100vp。\n\n控制按钮区域使用Row布局来排列按钮，按钮之间的间距均匀分布，且对齐方式为居中对齐。按钮的样式包括宽度为100vp，内边距为5vp，外边距为5vp。按钮的功能包括点击事件，用户可以通过点击按钮来控制动画的播放状态（如开始、暂停、停止）和播放方向（如正向、反向）以及重复次数（如一次、无限次）。\n\n整个布局通过Column布局保证动画展示区域和控制按钮区域在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ImageAnimatorExample {\n  @State state: AnimationStatus = AnimationStatus.Initial // 动画状态，初始为Initial\n  @State reverse: boolean = false // 动画播放方向，初始为正向\n  @State iterations: number = 1 // 动画重复次数，初始为1次\n\n  build() {\n    Column({ space: 10 }) {\n      ImageAnimator()\n        .images([ // 设置动画的图片资源\n          {\n            src: $r('app.media.img1') // 第一帧图片资源\n          },\n          {\n            src: $r('app.media.img2') // 第二帧图片资源\n          },\n          {\n            src: $r('app.media.img3') // 第三帧图片资源\n          },\n          {\n            src: $r('app.media.img4') // 第四帧图片资源\n          }\n        ])\n        .duration(2000) // 设置动画的持续时间为2000毫秒\n        .state(this.state) // 设置动画的状态\n        .reverse(this.reverse) // 设置动画的播放方向\n        .fillMode(FillMode.None) // 设置动画的填充模式为None\n        .iterations(this.iterations) // 设置动画的重复次数\n        .width(340) // 设置动画的宽度为340vp\n        .height(240) // 设置动画的高度为240vp\n        .margin({ top: 100 }) // 设置动画的顶部边距为100vp\n        .onStart(() => { // 动画开始时的回调\n          console.info('Start')\n        })\n        .onPause(() => { // 动画暂停时的回调\n          console.info('Pause')\n        })\n        .onRepeat(() => { // 动画重复时的回调\n          console.info('Repeat')\n        })\n        .onCancel(() => { // 动画取消时的回调\n          console.info('Cancel')\n        })\n        .onFinish(() => { // 动画结束时的回调\n          console.info('Finish')\n          this.state = AnimationStatus.Stopped // 动画结束后将状态设置为Stopped\n        })\n\n      Row() { // 控制按钮区域\n        Button('start').width(100).padding(5).onClick(() => { // 开始按钮\n          this.state = AnimationStatus.Running // 点击后将动画状态设置为Running\n        }).margin(5)\n        Button('pause').width(100).padding(5).onClick(() => { // 暂停按钮\n          this.state = AnimationStatus.Paused // 点击后将动画状态设置为Paused\n        }).margin(5)\n        Button('stop').width(100).padding(5).onClick(() => { // 停止按钮\n          this.state = AnimationStatus.Stopped // 点击后将动画状态设置为Stopped\n        }).margin(5)\n      }\n\n      Row() { // 控制按钮区域\n        Button('reverse').width(100).padding(5).onClick(() => { // 反向播放按钮\n          this.reverse = !this.reverse // 点击后切换动画的播放方向\n        }).margin(5)\n        Button('once').width(100).padding(5).onClick(() => { // 播放一次按钮\n          this.iterations = 1 // 点击后将动画的重复次数设置为1次\n        }).margin(5)\n        Button('infinite').width(100).padding(5).onClick(() => { // 无限播放按钮\n          this.iterations = -1 // 点击后将动画的重复次数设置为无限次\n        }).margin(5)\n      }\n    }.width('100%').height('100%') // 设置布局的宽度和高度为100%\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Video": {
        "description": "用于播放视频文件并控制其播放状态的组件。",
        "details": null,
        "interfaces": [
            {
                "description": "Video(value: VideoOptions)",
                "params": {
                    "value": {
                        "type": "VideoOptions",
                        "required": true,
                        "description": "视频组件的配置选项。"
                    }
                }
            }
        ],
        "attributes": {
            "muted": {
                "description": "设置是否静音。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否静音。",
                        "default": false
                    }
                }
            },
            "autoPlay": {
                "description": "设置是否自动播放。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否自动播放。",
                        "default": false
                    }
                }
            },
            "controls": {
                "description": "设置控制视频播放的控制栏是否显示。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "控制视频播放的控制栏是否显示。",
                        "default": true
                    }
                }
            },
            "objectFit": {
                "description": "设置视频显示模式。",
                "params": {
                    "value": {
                        "type": "ImageFit",
                        "required": true,
                        "description": "视频显示模式。",
                        "default": "Cover"
                    }
                }
            },
            "loop": {
                "description": "设置是否单个视频循环播放。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否单个视频循环播放。",
                        "default": false
                    }
                }
            },
            "enableAnalyzer": {
                "description": "设置组件支持AI分析。使能后，视频播放暂停时自动进入分析状态，开始分析当前画面帧，视频继续播放后自动退出分析状态。",
                "params": {
                    "enable": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否启用AI分析功能。"
                    }
                }
            },
            "analyzerConfig": {
                "description": "设置AI分析识别类型，包括主体识别和文字识别功能，默认全部开启。",
                "params": {
                    "config": {
                        "type": "ImageAnalyzerConfig",
                        "required": true,
                        "description": "AI分析配置。"
                    }
                }
            }
        },
        "events": {
            "onStart": {
                "description": "播放时触发该事件。",
                "params": {}
            },
            "onPause": {
                "description": "暂停时触发该事件。",
                "params": {}
            },
            "onFinish": {
                "description": "播放结束时触发该事件。",
                "params": {}
            },
            "onError": {
                "description": "播放失败时触发该事件。",
                "params": {}
            },
            "onStop": {
                "description": "播放停止时触发该事件(当stop()方法被调用后触发)。",
                "params": {}
            },
            "onPrepared": {
                "description": "视频准备完成时触发该事件。",
                "params": {
                    "duration": {
                        "type": "number",
                        "required": true,
                        "description": "当前视频的时长，单位为秒。"
                    }
                }
            },
            "onSeeking": {
                "description": "操作进度条过程时上报时间信息。",
                "params": {
                    "time": {
                        "type": "number",
                        "required": true,
                        "description": "当前视频播放的进度，单位为秒。"
                    }
                }
            },
            "onSeeked": {
                "description": "操作进度条完成后，上报播放时间信息。",
                "params": {
                    "time": {
                        "type": "number",
                        "required": true,
                        "description": "当前视频播放的进度，单位为秒。"
                    }
                }
            },
            "onUpdate": {
                "description": "播放进度变化时触发该事件。",
                "params": {
                    "time": {
                        "type": "number",
                        "required": true,
                        "description": "当前视频播放的进度，单位为秒。"
                    }
                }
            },
            "onFullscreenChange": {
                "description": "在全屏播放与非全屏播放状态之间切换时触发该事件。",
                "params": {
                    "fullscreen": {
                        "type": "boolean",
                        "required": true,
                        "description": "为true表示进入全屏播放状态，为false则表示非全屏播放。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "示例1的功能是创建一个视频播放组件，并提供了多种控制视频播放的功能。布局上，组件主要由一个垂直排列的Column组件构成，其中包含一个Video组件和多个Row组件。Video组件用于播放视频，Row组件用于放置控制视频播放的按钮。\n\nVideo组件的宽度设置为100%，高度为600vp，占据整个父容器的宽度，并具有固定的高度。视频的自动播放状态由isAutoPlay控制，控制条的显示由showControls控制。视频播放过程中会触发多个事件，如开始播放、暂停、完成、错误等，这些事件会在控制台输出相应的信息。\n\nRow组件中的按钮用于控制视频的源、预览图、控制条显示状态，以及视频的播放、暂停、停止、重置和设置播放时间等功能。按钮的排列方式为水平排列，按钮之间的间距通过margin属性设置为5vp。\n\n布局的样式和外观方面，Video组件的宽度和高度固定，按钮的样式通过margin属性设置间距，确保按钮在水平方向上有适当的间隔。按钮的功能包括点击事件，用户可以通过点击按钮触发相应的视频控制操作。",
                "code": "@Entry\n@Component\nstruct VideoCreateComponent {\n  @State videoSrc: Resource = $rawfile('video1.mp4') // 视频源文件路径\n  @State previewUri: Resource = $r('app.media.poster1') // 视频预览图路径\n  @State curRate: PlaybackSpeed = PlaybackSpeed.Speed_Forward_1_00_X // 当前播放速度\n  @State isAutoPlay: boolean = false // 是否自动播放\n  @State showControls: boolean = true // 是否显示控制条\n  controller: VideoController = new VideoController() // 视频控制器实例\n\n  build() {\n    Column() {\n      Video({\n        src: this.videoSrc, // 视频源\n        previewUri: this.previewUri, // 视频预览图\n        currentProgressRate: this.curRate, // 当前播放速度\n        controller: this.controller // 视频控制器\n      })\n        .width('100%') // 视频宽度占满父容器\n        .height(600) // 视频高度固定为600vp\n        .autoPlay(this.isAutoPlay) // 是否自动播放\n        .controls(this.showControls) // 是否显示控制条\n        .onStart(() => {\n          console.info('onStart') // 视频开始播放时触发\n        })\n        .onPause(() => {\n          console.info('onPause') // 视频暂停时触发\n        })\n        .onFinish(() => {\n          console.info('onFinish') // 视频播放完成时触发\n        })\n        .onError(() => {\n          console.info('onError') // 视频播放出错时触发\n        })\n        .onStop(() => {\n          console.info('onStop') // 视频停止时触发\n        })\n        .onPrepared((e?: DurationObject) => {\n          if (e != undefined) {\n            console.info('onPrepared is ' + e.duration) // 视频准备完成时触发，输出视频时长\n          }\n        })\n        .onSeeking((e?: TimeObject) => {\n          if (e != undefined) {\n            console.info('onSeeking is ' + e.time) // 视频跳转时触发，输出跳转时间\n          }\n        })\n        .onSeeked((e?: TimeObject) => {\n          if (e != undefined) {\n            console.info('onSeeked is ' + e.time) // 视频跳转完成时触发，输出跳转时间\n          }\n        })\n        .onUpdate((e?: TimeObject) => {\n          if (e != undefined) {\n            console.info('onUpdate is ' + e.time) // 视频更新时触发，输出当前时间\n          }\n        })\n\n      Row() {\n        Button('src').onClick(() => {\n          this.videoSrc = $rawfile('video2.mp4') // 切换视频源\n        }).margin(5) // 按钮间距为5vp\n        Button('previewUri').onClick(() => {\n          this.previewUri = $r('app.media.poster2') // 切换预览图\n        }).margin(5) // 按钮间距为5vp\n        Button('controls').onClick(() => {\n          this.showControls = !this.showControls // 切换控制条显示状态\n        }).margin(5) // 按钮间距为5vp\n      }\n\n      Row() {\n        Button('start').onClick(() => {\n          this.controller.start() // 开始播放视频\n        }).margin(2) // 按钮间距为2vp\n        Button('pause').onClick(() => {\n          this.controller.pause() // 暂停播放视频\n        }).margin(2) // 按钮间距为2vp\n        Button('stop').onClick(() => {\n          this.controller.stop() // 停止播放视频\n        }).margin(2) // 按钮间距为2vp\n        Button('reset').onClick(() => {\n          this.controller.reset() // 重置视频播放状态\n        }).margin(2) // 按钮间距为2vp\n        Button('setTime').onClick(() => {\n          this.controller.setCurrentTime(10, SeekMode.Accurate) // 设置视频播放时间为10秒\n        }).margin(2) // 按钮间距为2vp\n      }\n\n      Row() {\n        Button('rate 0.75').onClick(() => {\n          this.curRate = PlaybackSpeed.Speed_Forward_0_75_X // 设置播放速度为0.75倍\n        }).margin(5) // 按钮间距为5vp\n        Button('rate 1').onClick(() => {\n          this.curRate = PlaybackSpeed.Speed_Forward_1_00_X // 设置播放速度为1倍\n        }).margin(5) // 按钮间距为5vp\n        Button('rate 2').onClick(() => {\n          this.curRate = PlaybackSpeed.Speed_Forward_2_00_X // 设置播放速度为2倍\n        }).margin(5) // 按钮间距为5vp\n      }\n    }\n  }\n}\n\ninterface DurationObject {\n  duration: number; // 视频时长\n}\n\ninterface TimeObject {\n  time: number; // 时间点\n}\n\n/*\n示例2的功能是创建一个带有图像分析功能的视频播放组件。布局上，组件主要由一个垂直排列的Column组件构成，其中包含一个Video组件和一个Row组件。Video组件用于播放视频，Row组件用于放置控制视频播放的按钮。\n\nVideo组件的宽度设置为100%，高度为600vp，占据整个父容器的宽度，并具有固定的高度。视频的控制条默认不显示，图像分析功能通过enableAnalyzer和analyzerConfig属性开启，并配置了图像分析的类型。\n\nRow组件中的按钮用于控制视频的播放、暂停，以及获取图像分析支持的类型。按钮的排列方式为水平排列，按钮之间的间距通过margin属性设置为5vp。\n\n布局的样式和外观方面，Video组件的宽度和高度固定，按钮的样式通过margin属性设置间距，确保按钮在水平方向上有适当的间隔。按钮的功能包括点击事件，用户可以通过点击按钮触发相应的视频控制操作。\n*/\n\n@Entry\n@Component\nstruct ImageAnalyzerExample {\n  @State videoSrc: Resource = $rawfile('video1.mp4') // 视频源文件路径\n  @State previewUri: Resource = $r('app.media.poster1') // 视频预览图路径\n  @State showControls: boolean = true // 是否显示控制条\n  controller: VideoController = new VideoController() // 视频控制器实例\n  config: ImageAnalyzerConfig = {\n    types: [ImageAnalyzerType.SUBJECT, ImageAnalyzerType.TEXT] // 图像分析类型配置\n  }\n  private aiController: ImageAnalyzerController = new ImageAnalyzerController() // 图像分析控制器实例\n  private options: ImageAIOptions = {\n    types: [ImageAnalyzerType.SUBJECT, ImageAnalyzerType.TEXT], // 图像分析类型\n    aiController: this.aiController // 图像分析控制器\n  }\n\n  build() {\n    Column() {\n      Video({\n        src: this.videoSrc, // 视频源\n        previewUri: this.previewUri, // 视频预览图\n        controller: this.controller, // 视频控制器\n        imageAIOptions: this.options // 图像分析选项\n      })\n        .width('100%') // 视频宽度占满父容器\n        .height(600) // 视频高度固定为600vp\n        .controls(false) // 不显示控制条\n        .enableAnalyzer(true) // 开启图像分析功能\n        .analyzerConfig(this.config) // 配置图像分析\n        .onStart(() => {\n          console.info('onStart') // 视频开始播放时触发\n        })\n        .onPause(() => {\n          console.info('onPause') // 视频暂停时触发\n        })\n\n      Row() {\n        Button('start').onClick(() => {\n          this.controller.start() // 开始播放视频\n        }).margin(5) // 按钮间距为5vp\n        Button('pause').onClick(() => {\n          this.controller.pause() // 暂停播放视频\n        }).margin(5) // 按钮间距为5vp\n        Button('getTypes').onClick(() => {\n          this.aiController.getImageAnalyzerSupportTypes() // 获取图像分析支持的类型\n        }).margin(5) // 按钮间距为5vp\n      }\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "AlphabetIndexer": {
        "description": "可以与容器组件联动用于按逻辑结构快速定位容器显示区域的组件。",
        "details": null,
        "interfaces": [
            {
                "description": "AlphabetIndexer(value: {arrayValue: Array<string>, selected: number})",
                "params": {
                    "value": {
                        "type": {
                            "arrayValue": {
                                "type": "Array<string>",
                                "required": true,
                                "description": "字母索引字符串数组，不可设置为空。"
                            },
                            "selected": {
                                "type": "number",
                                "required": true,
                                "description": "初始选中项索引值，若超出索引值范围，则取默认值0。",
                                "default": 0
                            }
                        },
                        "required": true,
                        "description": "组件的初始化参数。"
                    }
                }
            }
        ],
        "attributes": {
            "color": {
                "description": "设置文字颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "文字颜色。"
                    }
                }
            },
            "selectedColor": {
                "description": "设置选中项文字颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "选中项文字颜色。"
                    }
                }
            },
            "popupColor": {
                "description": "设置提示弹窗文字颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "提示弹窗文字颜色。"
                    }
                }
            },
            "selectedBackgroundColor": {
                "description": "设置选中项背景颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "选中项背景颜色。"
                    }
                }
            },
            "popupBackground": {
                "description": "设置提示弹窗背景色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "提示弹窗背景色。",
                        "default": "#66808080"
                    }
                }
            },
            "usingPopup": {
                "description": "设置是否使用提示弹窗。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否使用提示弹窗。",
                        "default": false
                    }
                }
            },
            "selectedFont": {
                "description": "设置选中项文字样式。",
                "params": {
                    "value": {
                        "type": "Font",
                        "required": true,
                        "description": "选中项文字样式。",
                        "default": {
                            "size": "10.0vp",
                            "style": "FontStyle.Normal",
                            "weight": "FontWeight.Medium",
                            "family": "HarmonyOS Sans"
                        }
                    }
                }
            },
            "popupFont": {
                "description": "设置提示弹窗字体样式。",
                "params": {
                    "value": {
                        "type": "Font",
                        "required": true,
                        "description": "提示弹窗字体样式。",
                        "default": {
                            "size": "24.0vp",
                            "style": "FontStyle.Normal",
                            "weight": "FontWeight.Normal",
                            "family": "HarmonyOS Sans"
                        }
                    }
                }
            },
            "font": {
                "description": "设置字母索引条默认字体样式。",
                "params": {
                    "value": {
                        "type": "Font",
                        "required": true,
                        "description": "字母索引条默认字体样式。",
                        "default": {
                            "size": "10.0vp",
                            "style": "FontStyle.Normal",
                            "weight": "FontWeight.Medium",
                            "family": "HarmonyOS Sans"
                        }
                    }
                }
            },
            "itemSize": {
                "description": "设置字母索引条字母区域大小。",
                "params": {
                    "value": {
                        "type": [
                            "string",
                            "number"
                        ],
                        "required": true,
                        "description": "字母索引条字母区域大小，字母区域为正方形，即正方形边长。不支持设置为百分比。",
                        "default": 16.0
                    }
                }
            },
            "alignStyle": {
                "description": "设置字母索引条弹框的对齐样式。",
                "params": {
                    "value": {
                        "type": "IndexerAlign",
                        "required": true,
                        "description": "字母索引条弹框的对齐样式，支持弹窗显示在索引条右侧和左侧。",
                        "default": "IndexerAlign.END"
                    },
                    "offset": {
                        "type": "Length",
                        "required": false,
                        "description": "提示弹窗与索引条之间间距，大于等于0为有效值，在不设置或设置为小于0的情况下间距与popupPosition.x相同。与popupPosition同时设置时，水平方向上offset生效，竖直方向上popupPosition.y生效。"
                    }
                }
            },
            "selected": {
                "description": "设置选中项索引值。",
                "params": {
                    "index": {
                        "type": "number",
                        "required": true,
                        "description": "选中项索引值。",
                        "default": 0
                    }
                }
            },
            "popupPosition": {
                "description": "设置弹出窗口相对于索引器条上边框中点的位置。",
                "params": {
                    "value": {
                        "type": "Position",
                        "required": true,
                        "description": "弹出窗口相对于索引器条上边框中点的位置。",
                        "default": {
                            "x": 60.0,
                            "y": 48.0
                        }
                    }
                }
            },
            "popupSelectedColor": {
                "description": "设置提示弹窗非字母部分选中文字色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "提示弹窗非字母部分选中文字色。"
                    }
                }
            },
            "popupUnselectedColor": {
                "description": "设置提示弹窗非字母部分未选中文字色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "提示弹窗非字母部分未选中文字色。",
                        "default": "#FF182431"
                    }
                }
            },
            "popupItemFont": {
                "description": "设置提示弹窗非字母部分字体样式。",
                "params": {
                    "value": {
                        "type": "Font",
                        "required": true,
                        "description": "提示弹窗非字母部分字体样式。",
                        "default": {
                            "size": 24,
                            "weight": "FontWeight.Medium"
                        }
                    }
                }
            },
            "popupItemBackgroundColor": {
                "description": "设置提示弹窗非字母部分背景色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "提示弹窗非字母部分背景色。",
                        "default": "#00000000"
                    }
                }
            },
            "autoCollapse": {
                "description": "设置是否使用自适应折叠模式。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否使用自适应折叠模式。",
                        "default": true
                    }
                }
            },
            "popupItemBorderRadius": {
                "description": "设置提示弹窗索引项背板圆角半径。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "提示弹窗索引项背板圆角半径。",
                        "default": 24
                    }
                }
            },
            "itemBorderRadius": {
                "description": "设置索引项背板圆角半径。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "索引项背板圆角半径。",
                        "default": 8
                    }
                }
            },
            "popupBackgroundBlurStyle": {
                "description": "设置提示弹窗的背景模糊材质。",
                "params": {
                    "value": {
                        "type": "BlurStyle",
                        "required": true,
                        "description": "提示弹窗的背景模糊材质。",
                        "default": "COMPONENT_REGULAR"
                    }
                }
            },
            "popupTitleBackground": {
                "description": "设置提示弹窗首个索引项背板颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "提示弹窗首个索引项背板颜色。",
                        "default": "#0c182431"
                    }
                }
            },
            "enableHapticFeedback": {
                "description": "支持触控反馈。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否支持触控反馈。",
                        "default": true
                    }
                }
            }
        },
        "events": {
            "onSelected": {
                "description": "索引条选中回调，返回值为当前选中索引。",
                "params": {
                    "index": {
                        "type": "number",
                        "required": true,
                        "description": "当前选中的索引。"
                    }
                }
            },
            "onSelect": {
                "description": "索引条选中回调，返回值为当前选中索引。",
                "params": {
                    "index": {
                        "type": "number",
                        "required": true,
                        "description": "当前选中的索引。"
                    }
                }
            },
            "onRequestPopupData": {
                "description": "选中字母索引后，请求索引提示弹窗显示内容回调。",
                "params": {
                    "index": {
                        "type": "number",
                        "required": true,
                        "description": "当前选中的索引。"
                    }
                },
                "returns": {
                    "type": "Array<string>",
                    "description": "索引对应的字符串数组，此字符串数组在弹窗中竖排显示，字符串列表最多显示5个，超出部分可以滑动显示。"
                }
            },
            "onPopupSelect": {
                "description": "字母索引提示弹窗字符串列表选中回调。",
                "params": {
                    "index": {
                        "type": "number",
                        "required": true,
                        "description": "当前选中的索引。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过Stack布局实现了一个包含字母索引器和列表的界面。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为两个主要部分：左侧是一个列表，右侧是一个包含字母索引器和模糊材质切换按钮的列。\n\n左侧列表部分通过List组件展示了一系列汉字，每个汉字以ListItem的形式展示，宽度为80%，高度为5%，字体大小为30，文本居中对齐。列表的宽度为30%，高度为100%。\n\n右侧列部分包含两个子列：第一个子列用于切换模糊材质，包含一个文本和两个按钮，按钮的宽度为200，点击按钮可以切换模糊材质样式。第二个子列包含一个字母索引器，字母索引器的宽度为70%，高度为80%。字母索引器支持弹出框显示，弹出框的背景模糊样式可以通过左侧按钮切换。字母索引器的事件包括选择字母和弹出框选择事件，用户可以通过点击字母索引器触发相应操作。\n\n整个布局通过Stack布局保证列表和字母索引器在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct AlphabetIndexerSample {\n  private arrayA: string[] = ['安']\n  private arrayB: string[] = ['卜', '白', '包', '毕', '丙']\n  private arrayC: string[] = ['曹', '成', '陈', '催']\n  private arrayL: string[] = ['刘', '李', '楼', '梁', '雷', '吕', '柳', '卢']\n  private value: string[] = ['#', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n    'H', 'I', 'J', 'K', 'L', 'M', 'N',\n    'O', 'P', 'Q', 'R', 'S', 'T', 'U',\n    'V', 'W', 'X', 'Y', 'Z']\n  @State customBlurStyle: BlurStyle = BlurStyle.NONE;\n\n  build() {\n    Stack({ alignContent: Alignment.Start }) {\n      Row() {\n        List({ space: 20, initialIndex: 0 }) {\n          ForEach(this.arrayA, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%') // 文本宽度为80%\n                .height('5%') // 文本高度为5%\n                .fontSize(30) // 字体大小为30\n                .textAlign(TextAlign.Center) // 文本居中对齐\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayB, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayC, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayL, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n        }\n        .width('30%') // 列表宽度为30%\n        .height('100%') // 列表高度为100%\n\n        Column() {\n          Column() {\n            Text('切换模糊材质: ')\n              .fontSize(24) // 字体大小为24\n              .fontColor(0xcccccc) // 字体颜色为0xcccccc\n              .width('100%') // 文本宽度为100%\n            Button('COMPONENT_REGULAR')\n              .margin('5vp') // 按钮外边距为5vp\n              .width(200) // 按钮宽度为200\n              .onClick(() => {\n                this.customBlurStyle = BlurStyle.COMPONENT_REGULAR; // 点击按钮切换模糊材质样式\n              })\n            Button('BACKGROUND_THIN')\n              .margin('5vp')\n              .width(200)\n              .onClick(() => {\n                this.customBlurStyle = BlurStyle.BACKGROUND_THIN; // 点击按钮切换模糊材质样式\n              })\n          }.height('20%') // 第一个子列高度为20%\n\n          Column() {\n            AlphabetIndexer({ arrayValue: this.value, selected: 0 })\n              .usingPopup(true) // 启用弹出框\n              .alignStyle(IndexerAlign.Left) // 字母索引器对齐方式为左对齐\n              .popupItemBorderRadius(24) // 弹出框项的边框圆角为24\n              .itemBorderRadius(14) // 字母索引器项的边框圆角为14\n              .popupBackgroundBlurStyle(this.customBlurStyle) // 弹出框背景模糊样式\n              .popupTitleBackground(0xCCCCCC) // 弹出框标题背景颜色为0xCCCCCC\n              .onSelect((index: number) => {\n                console.info(this.value[index] + ' Selected!') // 选择字母时触发事件\n              })\n              .onRequestPopupData((index: number) => {\n                if (this.value[index] == 'A') {\n                  return this.arrayA // 根据选择的字母返回对应的数据\n                } else if (this.value[index] == 'B') {\n                  return this.arrayB\n                } else if (this.value[index] == 'C') {\n                  return this.arrayC\n                } else if (this.value[index] == 'L') {\n                  return this.arrayL\n                } else {\n                  return []\n                }\n              })\n              .onPopupSelect((index: number) => {\n                console.info('onPopupSelected:' + index) // 弹出框选择时触发事件\n              })\n          }\n          .height('80%') // 第二个子列高度为80%\n        }\n        .width('70%') // 右侧列宽度为70%\n      }\n      .width('100%') // Row宽度为100%\n      .height('100%') // Row高度为100%\n      .backgroundImage($r(\"app.media.image\")) // 背景图片\n    }\n  }\n}"
            },
            {
                "description": "该组件通过Stack布局实现了一个包含字母索引和列表展示的界面。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为两个主要部分：左侧是一个列表，右侧是一个字母索引器。\n\n列表部分通过Row布局嵌套List组件实现，宽度占据屏幕的50%，高度为100%。列表内部通过ForEach循环遍历不同的字符串数组（如arrayA、arrayB、arrayC、arrayL），并在每个数组项上生成一个ListItem组件。每个ListItem包含一个Text组件，用于显示字符串内容。Text组件的宽度为80%，高度为5%，字体大小为30，文本居中对齐。\n\n字母索引器部分通过AlphabetIndexer组件实现，宽度占据屏幕的50%，高度为100%。字母索引器显示一个包含字母和特殊符号的数组（如value数组），并支持用户点击选择字母。字母索引器的样式包括选中颜色、弹出颜色、选中背景颜色、弹出背景颜色等。字母索引器还支持弹出窗口显示，当用户点击某个字母时，会弹出一个窗口显示该字母对应的内容。弹出窗口的样式包括背景颜色、字体大小、字体粗细等。\n\n字母索引器的功能包括点击事件和弹出窗口事件。用户可以通过点击字母索引器中的字母触发onSelect事件，并在控制台输出选中的字母。当用户点击字母时，字母索引器会根据选中的字母请求对应的弹出窗口数据，并在弹出窗口中显示对应的内容。用户还可以在弹出窗口中选择某个项目，触发onPopupSelect事件，并在控制台输出选中的项目索引。",
                "code": "@Entry\n@Component\nstruct AlphabetIndexerSample {\n  private arrayA: string[] = ['安']\n  private arrayB: string[] = ['卜', '白', '包', '毕', '丙']\n  private arrayC: string[] = ['曹', '成', '陈', '催']\n  private arrayL: string[] = ['刘', '李', '楼', '梁', '雷', '吕', '柳', '卢']\n  private value: string[] = ['#', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n    'H', 'I', 'J', 'K', 'L', 'M', 'N',\n    'O', 'P', 'Q', 'R', 'S', 'T', 'U',\n    'V', 'W', 'X', 'Y', 'Z']\n\n  build() {\n    Stack({ alignContent: Alignment.Start }) {\n      Row() {\n        List({ space: 20, initialIndex: 0 }) {\n          ForEach(this.arrayA, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%') // 设置文本宽度为80%\n                .height('5%') // 设置文本高度为5%\n                .fontSize(30) // 设置字体大小为30\n                .textAlign(TextAlign.Center) // 设置文本居中对齐\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayB, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayC, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayL, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n        }\n        .width('50%') // 设置列表宽度为50%\n        .height('100%') // 设置列表高度为100%\n\n        AlphabetIndexer({ arrayValue: this.value, selected: 0 })\n          .autoCollapse(false) // 设置字母索引器不自动折叠\n          .selectedColor(0xFFFFFF) // 设置选中字母的颜色为白色\n          .popupColor(0xFFFAF0) // 设置弹出窗口的颜色为淡黄色\n          .selectedBackgroundColor(0xCCCCCC) // 设置选中字母的背景颜色为灰色\n          .popupBackground(0xD2B48C) // 设置弹出窗口的背景颜色为棕色\n          .usingPopup(true) // 启用弹出窗口\n          .selectedFont({ size: 16, weight: FontWeight.Bolder }) // 设置选中字母的字体大小和粗细\n          .popupFont({ size: 30, weight: FontWeight.Bolder }) // 设置弹出窗口的字体大小和粗细\n          .itemSize(28) // 设置字母索引器中每个字母的大小\n          .alignStyle(IndexerAlign.Left) // 设置字母索引器对齐方式为左侧对齐\n          .popupItemBorderRadius(24) // 设置弹出窗口中每个项目的边框圆角\n          .itemBorderRadius(14) // 设置字母索引器中每个字母的边框圆角\n          .popupBackgroundBlurStyle(BlurStyle.NONE) // 设置弹出窗口背景无模糊效果\n          .popupTitleBackground(0xCCCCCC) // 设置弹出窗口标题背景颜色为灰色\n          .popupSelectedColor(0x00FF00) // 设置弹出窗口中选中项目的颜色为绿色\n          .popupUnselectedColor(0x0000FF) // 设置弹出窗口中未选中项目的颜色为蓝色\n          .popupItemFont({ size: 30, style: FontStyle.Normal }) // 设置弹出窗口中每个项目的字体大小和样式\n          .popupItemBackgroundColor(0xCCCCCC) // 设置弹出窗口中每个项目的背景颜色为灰色\n          .onSelect((index: number) => {\n            console.info(this.value[index] + ' Selected!') // 当用户点击字母索引器中的字母时，输出选中的字母\n          })\n          .onRequestPopupData((index: number) => {\n            if (this.value[index] == 'A') {\n              return this.arrayA // 当用户点击字母'A'时，返回arrayA数组\n            } else if (this.value[index] == 'B') {\n              return this.arrayB // 当用户点击字母'B'时，返回arrayB数组\n            } else if (this.value[index] == 'C') {\n              return this.arrayC // 当用户点击字母'C'时，返回arrayC数组\n            } else if (this.value[index] == 'L') {\n              return this.arrayL // 当用户点击字母'L'时，返回arrayL数组\n            } else {\n              return [] // 当用户点击其他字母时，返回空数组\n            }\n          })\n          .onPopupSelect((index: number) => {\n            console.info('onPopupSelected:' + index) // 当用户在弹出窗口中选择某个项目时，输出选中的项目索引\n          })\n      }\n      .width('100%') // 设置Row布局宽度为100%\n      .height('100%') // 设置Row布局高度为100%\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Stack 和 Row 布局实现了一个包含字母索引和列表展示的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为两个主要部分：左侧是一个列表展示区，右侧是一个字母索引区。\n\n左侧的列表展示区通过 List 组件实现，列表项通过 ForEach 循环动态生成，每个列表项包含一个 Text 组件，用于显示汉字。列表项的宽度为 80%，高度为 5%，字体大小为 30，文本居中对齐。列表的宽度为 50%，高度为 100%。\n\n右侧的字母索引区通过 AlphabetIndexer 组件实现，字母索引条的高度为 75%，可以通过按钮动态调整。字母索引条的样式包括选中颜色、弹出颜色、选中背景颜色、弹出背景颜色、弹出字体样式、弹出项字体样式等。字母索引条的功能包括点击事件、弹出数据请求事件和弹出项选中事件。用户可以通过点击字母索引条触发相应操作，字母索引条也可以在折叠模式下进行展示。\n\n底部通过 Column 布局实现了一个按钮区，包含三个按钮，分别用于切换折叠模式和调整字母索引条的高度。按钮的样式包括边距和点击事件。\n\n整个布局通过 Stack 和 Row 布局保证列表和字母索引在水平方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct AlphabetIndexerSample {\n  private arrayA: string[] = ['安']\n  private arrayB: string[] = ['卜', '白', '包', '毕', '丙']\n  private arrayC: string[] = ['曹', '成', '陈', '催']\n  private arrayJ: string[] = ['嘉', '贾']\n  private value: string[] = ['#', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n    'H', 'I', 'J', 'K', 'L', 'M', 'N',\n    'O', 'P', 'Q', 'R', 'S', 'T', 'U',\n    'V', 'W', 'X', 'Y', 'Z']\n  @State isNeedAutoCollapse: boolean = false;\n  @State indexerHeight: string = '75%';\n\n  build() {\n    Stack({ alignContent: Alignment.Start }) {\n      Row() {\n        List({ space: 20, initialIndex: 0 }) {\n          ForEach(this.arrayA, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%') // 设置文本宽度为 80%\n                .height('5%') // 设置文本高度为 5%\n                .fontSize(30) // 设置字体大小为 30\n                .textAlign(TextAlign.Center) // 设置文本居中对齐\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayB, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayC, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n\n          ForEach(this.arrayJ, (item: string) => {\n            ListItem() {\n              Text(item)\n                .width('80%')\n                .height('5%')\n                .fontSize(30)\n                .textAlign(TextAlign.Center)\n            }\n          }, (item: string) => item)\n        }\n        .width('50%') // 设置列表宽度为 50%\n        .height('100%') // 设置列表高度为 100%\n\n        Column() {\n          Column() {\n            AlphabetIndexer({ arrayValue: this.value, selected: 0 })\n              .autoCollapse(this.isNeedAutoCollapse) // 设置是否自动折叠\n              .height(this.indexerHeight) // 设置字母索引条高度\n              .selectedColor(0xFFFFFF) // 设置选中颜色\n              .popupColor(0xFFFAF0) // 设置弹出颜色\n              .selectedBackgroundColor(0xCCCCCC) // 设置选中背景颜色\n              .popupBackground(0xD2B48C) // 设置弹出背景颜色\n              .usingPopup(true) // 设置是否使用弹出\n              .selectedFont({ size: 16, weight: FontWeight.Bolder }) // 设置选中字体样式\n              .popupFont({ size: 30, weight: FontWeight.Bolder }) // 设置弹出字体样式\n              .itemSize(28) // 设置项大小\n              .alignStyle(IndexerAlign.Right) // 设置对齐方式\n              .popupTitleBackground(\"#D2B48C\") // 设置弹出标题背景颜色\n              .popupSelectedColor(0x00FF00) // 设置弹出选中颜色\n              .popupUnselectedColor(0x0000FF) // 设置弹出未选中颜色\n              .popupItemFont({ size: 30, style: FontStyle.Normal }) // 设置弹出项字体样式\n              .popupItemBackgroundColor(0xCCCCCC) // 设置弹出项背景颜色\n              .onSelect((index: number) => {\n                console.info(this.value[index] + ' Selected!'); // 选中事件\n              })\n              .onRequestPopupData((index: number) => {\n                if (this.value[index] == 'A') {\n                  return this.arrayA; // 请求弹出数据\n                } else if (this.value[index] == 'B') {\n                  return this.arrayB;\n                } else if (this.value[index] == 'C') {\n                  return this.arrayC;\n                } else if (this.value[index] == 'J') {\n                  return this.arrayJ;\n                } else {\n                  return [];\n                }\n              })\n              .onPopupSelect((index: number) => {\n                console.info('onPopupSelected:' + index); // 弹出项选中事件\n              })\n          }\n          .height('80%') // 设置字母索引条高度为 80%\n          .justifyContent(FlexAlign.Center) // 设置内容居中对齐\n\n          Column() {\n            Button('切换成折叠模式')\n              .margin('5vp') // 设置按钮边距\n              .onClick(() => {\n                this.isNeedAutoCollapse = true; // 切换成折叠模式\n              })\n            Button('切换索引条高度到30%')\n              .margin('5vp')\n              .onClick(() => {\n                this.indexerHeight = '30%'; // 切换索引条高度到 30%\n              })\n            Button('切换索引条高度到70%')\n              .margin('5vp')\n              .onClick(() => {\n                this.indexerHeight = '70%'; // 切换索引条高度到 70%\n              })\n          }.height('20%') // 设置按钮区高度为 20%\n        }\n        .width('50%') // 设置右侧区域宽度为 50%\n        .justifyContent(FlexAlign.Center) // 设置内容居中对齐\n      }\n      .width('100%') // 设置整体宽度为 100%\n      .height('100%') // 设置整体高度为 100%\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Badge": {
        "description": "可以附加在单个组件上用于信息标记的容器组件。",
        "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "Badge(value: BadgeParamWithNumber)",
                "params": {
                    "value": {
                        "type": "BadgeParamWithNumber",
                        "required": true,
                        "description": "创建数字标记组件。"
                    }
                }
            },
            {
                "description": "Badge(value: BadgeParamWithString)",
                "params": {
                    "value": {
                        "type": "BadgeParamWithString",
                        "required": true,
                        "description": "根据字符串创建标记组件。"
                    }
                }
            }
        ],
        "attributes": {
            "position": {
                "description": "设置提示点显示位置。",
                "params": {
                    "value": {
                        "type": [
                            "BadgePosition",
                            "Position10+"
                        ],
                        "required": false,
                        "description": "提示点显示位置。",
                        "default": "BadgePosition.RightTop"
                    }
                }
            },
            "style": {
                "description": "Badge组件可设置样式，支持设置文本颜色、尺寸、圆点颜色和尺寸。",
                "params": {
                    "color": {
                        "type": "ResourceColor",
                        "required": false,
                        "description": "文本颜色。",
                        "default": "Color.White"
                    },
                    "fontSize": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": false,
                        "description": "文本大小。",
                        "default": "10"
                    },
                    "badgeSize": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": false,
                        "description": "Badge的大小。",
                        "default": "16"
                    },
                    "badgeColor": {
                        "type": "ResourceColor",
                        "required": false,
                        "description": "Badge的颜色。",
                        "default": "Color.Red"
                    },
                    "fontWeight10+": {
                        "type": [
                            "number",
                            "FontWeight",
                            "string"
                        ],
                        "required": false,
                        "description": "设置文本的字体粗细。",
                        "default": "FontWeight.Normal"
                    },
                    "borderColor10+": {
                        "type": "ResourceColor",
                        "required": false,
                        "description": "底板描边颜色。",
                        "default": "Color.Red"
                    },
                    "borderWidth10+": {
                        "type": "Length",
                        "required": false,
                        "description": "底板描边粗细。",
                        "default": "1"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Column 布局实现了一个展示带有徽章（Badge）的图标以及两个按钮的界面。布局宽度占据整个屏幕，高度根据内容自适应，顶部外边距为 20vp。组件的垂直方向上被分为三个部分：一个带有徽章的图标和两个按钮。图标和按钮之间的间距为 40vp，且对齐方式为居中对齐。\n\n图标的样式包括宽度为 50vp，高度为 50vp，徽章的位置为右上角。按钮的样式包括默认的背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮的功能包括点击事件，用户可以通过点击按钮改变徽章的计数值。\n\n整个布局通过 Column 布局保证图标和按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Index {\n  @State badgeCount: number = 1 // 徽章的计数值，初始值为1\n\n  build() {\n    Column({ space: 40 }) { // 创建一个垂直布局，组件之间的间距为40vp\n      Badge({\n        count: this.badgeCount, // 徽章的计数值，绑定到状态变量badgeCount\n        style: {}, // 徽章的样式，此处为空对象，表示使用默认样式\n        position: BadgePosition.RightTop, // 徽章的位置，设置为右上角\n      }) {\n        Image($r(\"app.media.icon\")) // 加载应用资源中的图标\n          .width(50) // 图标的宽度为50vp\n          .height(50) // 图标的高度为50vp\n      }\n      .width(55) // 徽章组件的总宽度为55vp\n\n      Button('count 0').onClick(() => { // 创建一个按钮，文本为'count 0'，点击事件处理函数\n        this.badgeCount = 0 // 点击按钮后，将徽章的计数值设置为0\n      })\n\n      Button('count 1').onClick(() => { // 创建一个按钮，文本为'count 1'，点击事件处理函数\n        this.badgeCount = 1 // 点击按钮后，将徽章的计数值设置为1\n      })\n    }\n    .margin({top: 20}) // 设置Column组件的顶部外边距为20vp\n  }\n}"
            },
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用Badge组件来实现不同类型的徽章（如点状徽章、字符串徽章、数字徽章）。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组徽章示例。每个徽章示例以水平布局方式排列，徽章之间的间距均匀分布，且对齐方式为居中对齐。\n徽章的样式包括背景颜色、大小、位置等属性，支持不同的样式展示。徽章的功能包括显示不同的内容（如空字符串、字符串、数字），用户可以通过徽章的样式和内容来识别不同的状态或通知。\n整个布局通过Flex布局保证徽章在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct BadgeExample {\n  // 定义一个Builder方法，用于生成Tab的UI\n  @Builder tabBuilder(index: number) {\n    Column() {\n      // 当index为2时，显示带有点状徽章的图标\n      if (index === 2) {\n        Badge({\n          value: '', // 徽章内容为空字符串，表示点状徽章\n          style: { badgeSize: 6, badgeColor: '#FA2A2D' } // 徽章大小为6，颜色为红色\n        }) {\n          Image('/common/public_icon_off.svg') // 显示图标\n            .width(24)\n            .height(24)\n        }\n        .width(24)\n        .height(24)\n        .margin({ bottom: 4 }) // 底部外边距为4\n      } else {\n        // 其他情况下，仅显示图标\n        Image('/common/public_icon_off.svg')\n          .width(24)\n          .height(24)\n          .margin({ bottom: 4 }) // 底部外边距为4\n      }\n      Text('Tab') // 显示Tab文本\n        .fontColor('#182431') // 文本颜色为深灰色\n        .fontSize(10) // 字体大小为10\n        .fontWeight(500) // 字体粗细为500\n        .lineHeight(14) // 行高为14\n    }.width('100%').height('100%').justifyContent(FlexAlign.Center) // 宽度、高度均为100%，内容居中对齐\n  }\n\n  // 定义一个Builder方法，用于生成列表项的UI\n  @Builder itemBuilder(value: string) {\n    Row() {\n      Image('common/public_icon.svg') // 显示图标\n        .width(32)\n        .height(32)\n        .opacity(0.6) // 图标透明度为0.6\n      Text(value) // 显示文本\n        .width(177)\n        .height(21)\n        .margin({ left: 15, right: 76 }) // 左右外边距分别为15和76\n        .textAlign(TextAlign.Start) // 文本左对齐\n        .fontColor('#182431') // 文本颜色为深灰色\n        .fontWeight(500) // 字体粗细为500\n        .fontSize(16) // 字体大小为16\n        .opacity(0.9) // 文本透明度为0.9\n      Image('common/public_icon_arrow_right.svg') // 显示右箭头图标\n        .width(12)\n        .height(24)\n        .opacity(0.6) // 图标透明度为0.6\n    }.width('100%').padding({ left: 12, right: 12 }).height(56) // 宽度为100%，左右内边距为12，高度为56\n  }\n\n  // 构建主界面的UI\n  build() {\n    Column() {\n      Text('dotsBadge') // 显示标题\n        .fontSize(18) // 字体大小为18\n        .fontColor('#182431') // 文本颜色为深灰色\n        .fontWeight(500) // 字体粗细为500\n        .margin(24) // 外边距为24\n      Tabs() {\n        TabContent()\n          .tabBar(this.tabBuilder(0)) // 使用tabBuilder生成Tab的UI\n        TabContent()\n          .tabBar(this.tabBuilder(1))\n        TabContent()\n          .tabBar(this.tabBuilder(2))\n        TabContent()\n          .tabBar(this.tabBuilder(3))\n      }\n      .width(360) // 宽度为360\n      .height(56) // 高度为56\n      .backgroundColor('#F1F3F5') // 背景颜色为浅灰色\n\n      Column() {\n        Text('stringBadge') // 显示标题\n          .fontSize(18)\n          .fontColor('#182431')\n          .fontWeight(500)\n          .margin(24)\n        List({ space: 12 }) {\n          ListItem() {\n            Text('list1') // 显示文本\n              .fontSize(14)\n              .fontColor('#182431')\n              .margin({ left: 12 }) // 左外边距为12\n          }\n          .width('100%')\n          .height(56)\n          .backgroundColor('#FFFFFF') // 背景颜色为白色\n          .borderRadius(24) // 边框圆角为24\n          .align(Alignment.Start) // 内容左对齐\n\n          ListItem() {\n            Badge({\n              value: 'New', // 徽章内容为\"New\"\n              position: BadgePosition.Right, // 徽章位置在右侧\n              style: { badgeSize: 16, badgeColor: '#FA2A2D' } // 徽章大小为16，颜色为红色\n            }) {\n              Text('list2') // 显示文本\n                .width(27)\n                .height(19)\n                .fontSize(14)\n                .fontColor('#182431')\n            }.width(49.5).height(19)\n            .margin({ left: 12 }) // 左外边距为12\n          }\n          .width('100%')\n          .height(56)\n          .backgroundColor('#FFFFFF')\n          .borderRadius(24)\n          .align(Alignment.Start)\n        }.width(336)\n\n        Text('numberBadge') // 显示标题\n          .fontSize(18)\n          .fontColor('#182431')\n          .fontWeight(500)\n          .margin(24)\n        List() {\n          ListItem() {\n            this.itemBuilder('list1') // 使用itemBuilder生成列表项的UI\n          }\n\n          ListItem() {\n            Row() {\n              Image('common/public_icon.svg') // 显示图标\n                .width(32)\n                .height(32)\n                .opacity(0.6)\n              Badge({\n                count: 1, // 徽章内容为数字1\n                position: BadgePosition.Right, // 徽章位置在右侧\n                style: { badgeSize: 16, badgeColor: '#FA2A2D' } // 徽章大小为16，颜色为红色\n              }) {\n                Text('list2') // 显示文本\n                  .width(177)\n                  .height(21)\n                  .textAlign(TextAlign.Start)\n                  .fontColor('#182431')\n                  .fontWeight(500)\n                  .fontSize(16)\n                  .opacity(0.9)\n              }.width(240).height(21).margin({ left: 15, right: 11 }) // 左右外边距分别为15和11\n\n              Image('common/public_icon_arrow_right.svg') // 显示右箭头图标\n                .width(12)\n                .height(24)\n                .opacity(0.6)\n            }.width('100%').padding({ left: 12, right: 12 }).height(56) // 宽度为100%，左右内边距为12，高度为56\n          }\n\n          ListItem() {\n            this.itemBuilder('list3') // 使用itemBuilder生成列表项的UI\n          }\n\n          ListItem() {\n            this.itemBuilder('list4') // 使用itemBuilder生成列表项的UI\n          }\n        }\n        .width(336)\n        .height(232)\n        .backgroundColor('#FFFFFF')\n        .borderRadius(24)\n        .padding({ top: 4, bottom: 4 }) // 上下内边距为4\n        .divider({ strokeWidth: 0.5, color: 'rgba(0,0,0,0.1)', startMargin: 60, endMargin: 12 }) // 分割线样式\n      }.width('100%').backgroundColor('#F1F3F5').padding({ bottom: 12 }) // 宽度为100%，背景颜色为浅灰色，底部内边距为12\n    }.width('100%')\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Chip": {
        "description": "操作块组件，用于搜索框历史记录或者邮件发送列表等场景。",
        "details": "该组件从API Version 11开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "Chip({options: ChipOptions})",
                "params": {
                    "options": {
                        "type": "ChipOptions",
                        "required": true,
                        "description": "定义chip组件的参数。"
                    }
                }
            }
        ],
        "attributes": {
            "size": {
                "description": "操作块尺寸。",
                "params": {
                    "value": {
                        "type": [
                            "ChipSize",
                            "SizeOptions"
                        ],
                        "required": false,
                        "description": "操作块尺寸。默认值：ChipSize.NORMAL。SizeOptions类型参数不支持百分比设置。"
                    }
                }
            },
            "enabled": {
                "description": "操作块是否可选中。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": false,
                        "description": "操作块是否可选中。默认值：true。"
                    }
                }
            },
            "activated12+": {
                "description": "操作块是否为激活态。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": false,
                        "description": "操作块是否为激活态。默认值：false。"
                    }
                }
            },
            "prefixIcon": {
                "description": "前缀图标属性。",
                "params": {
                    "value": {
                        "type": "PrefixIconOptions",
                        "required": false,
                        "description": "前缀图标属性。"
                    }
                }
            },
            "prefixSymbol12+": {
                "description": "前缀图标属性，symbol类型。",
                "params": {
                    "value": {
                        "type": "ChipSymbolGlyphOptions",
                        "required": false,
                        "description": "前缀图标属性，symbol类型。"
                    }
                }
            },
            "label": {
                "description": "文本属性。",
                "params": {
                    "value": {
                        "type": "LabelOptions",
                        "required": true,
                        "description": "文本属性。"
                    }
                }
            },
            "suffixIcon": {
                "description": "后缀图标属性。",
                "params": {
                    "value": {
                        "type": "SuffixIconOptions",
                        "required": false,
                        "description": "后缀图标属性。"
                    }
                }
            },
            "suffixSymbol12+": {
                "description": "后缀图标属性，symbol类型。",
                "params": {
                    "value": {
                        "type": "ChipSymbolGlyphOptions",
                        "required": false,
                        "description": "后缀图标属性，symbol类型。"
                    }
                }
            },
            "backgroundColor": {
                "description": "操作块背景颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": false,
                        "description": "操作块背景颜色。默认值：$r('sys.color.ohos_id_color_button_normal')。"
                    }
                }
            },
            "activatedBackgroundColor12+": {
                "description": "操作块激活时的背景颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": false,
                        "description": "操作块激活时的背景颜色。默认值：$r('sys.color.ohos_id_color_emphasize')。"
                    }
                }
            },
            "borderRadius": {
                "description": "操作块背景圆角半径大小，不支持百分比。",
                "params": {
                    "value": {
                        "type": "Dimension",
                        "required": false,
                        "description": "操作块背景圆角半径大小，不支持百分比。默认值：$r('sys.float.ohos_id_corner_radius_button')。"
                    }
                }
            },
            "allowClose": {
                "description": "删除图标是否显示。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": false,
                        "description": "删除图标是否显示。默认值：true。"
                    }
                }
            },
            "direction12+": {
                "description": "布局方向。",
                "params": {
                    "value": {
                        "type": "Direction",
                        "required": false,
                        "description": "布局方向。默认值：Direction.Auto。"
                    }
                }
            }
        },
        "events": {
            "onClose": {
                "description": "默认删除图标点击事件。",
                "params": {}
            },
            "onClicked12+": {
                "description": "操作块点击事件。",
                "params": {}
            }
        },
        "rules": [
            "suffixSymbol有传入参数时，suffixIcon和allowClose不生效；suffixSymbol没有传入参数、suffixIcon有传入参数时，allowClose不生效；suffixSymbol和suffixIcon都没有传入参数时，allowClose决定是否显示删除图标。",
            "backgroundColor和activatedBackgroundColor赋值undefined时，显示默认背景颜色，赋值非法值时，背景色透明。",
            "prefixSymbol/suffixSymbol的fontColor默认值，normalFontColor: [$r('sys.color.ohos_id_color_primary')]、activatedFontColor: [$r('sys.color.ohos_id_color_text_primary_contrary')]。fontColor默认值为16。",
            "prefixIcon的fillColor默认值：$r('sys.color.ohos_id_color_secondary')，suffixIcon的fillColor默认值：$r('sys.color.ohos_id_color_primary')。fillColor对颜色的解析与Image组件保持一致。",
            "prefixIcon的activatedFillColor默认值：$r('sys.color.ohos_id_color_text_primary_contrary')，suffixIcon的activatedFillColor默认值：$r('sys.color.ohos_id_color_text_primary_contrary')。activatedFillColor对颜色的解析与Image组件保持一致。"
        ],
        "examples": [
            {
                "description": "该组件通过自定义Chip组件实现了一个带有删除图标的操作块。布局上，操作块采用垂直布局，包含一个前缀图标、标签文本和一个后缀图标。前缀图标和后缀图标分别位于操作块的左侧和右侧，标签文本位于中间。操作块的背景颜色和边框圆角通过系统资源进行设置，确保与系统风格一致。\n\n组件的样式包括图标的尺寸、颜色、标签文本的字体、颜色、字体家族以及标签文本的左右边距。操作块的大小为正常尺寸，允许关闭功能被禁用，确保操作块在启用状态下展示。\n\n组件的功能主要是展示一个带有删除图标的操作块，用户可以通过点击删除图标进行删除操作。操作块的背景颜色和边框圆角通过系统资源进行设置，确保与系统风格一致。",
                "code": "import { Chip, ChipSize } from '@kit.ArkUI'; // 导入Chip组件及其尺寸枚举\n\n@Entry // 标记该组件为入口组件\n@Component // 标记该结构体为组件\nstruct Index {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局的容器，子组件之间的间距为10\n      Chip({\n        prefixIcon: {\n          src: $r('app.media.chips'), // 设置前缀图标的资源路径\n          size: { width: 16, height: 16 }, // 设置前缀图标的尺寸为16x16\n          fillColor: Color.Red // 设置前缀图标的填充颜色为红色\n        },\n        label: {\n          text: \"操作块\", // 设置标签文本内容为\"操作块\"\n          fontSize: 12, // 设置标签文本的字体大小为12\n          fontColor: Color.Blue, // 设置标签文本的字体颜色为蓝色\n          fontFamily: \"HarmonyOS Sans\", // 设置标签文本的字体家族为HarmonyOS Sans\n          labelMargin: { left: 20, right: 30 } // 设置标签文本的左右边距分别为20和30\n        },\n        suffixIcon: {\n          src: $r('app.media.close'), // 设置后缀图标的资源路径\n          size: { width: 16, height: 16 }, // 设置后缀图标的尺寸为16x16\n          fillColor: Color.Red // 设置后缀图标的填充颜色为红色\n        },\n        size: ChipSize.NORMAL, // 设置操作块的尺寸为正常尺寸\n        allowClose: false, // 禁用操作块的关闭功能\n        enabled: true, // 设置操作块为启用状态\n        backgroundColor: $r('sys.color.ohos_id_color_button_normal'), // 设置操作块的背景颜色为系统按钮的正常颜色\n        borderRadius: $r('sys.float.ohos_id_corner_radius_button') // 设置操作块的边框圆角为系统按钮的圆角\n      })\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个 Chip 组件的镜像化展示。布局宽度占据整个屏幕，高度设为 100%，内边距为 0。组件的垂直方向上仅包含一个 Chip 组件，该 Chip 组件的排列方式为居中对齐。\nChip 组件的样式包括背景颜色、边框圆角、宽度、高度等属性，支持不同的样式展示。Chip 组件的功能包括显示前缀图标、标签文本和后缀图标，用户可以通过点击 Chip 组件触发相应操作，Chip 组件也可以在启用或禁用状态下进行展示。\n整个布局通过 Column 布局保证 Chip 组件在垂直方向上居中对齐，确保界面整洁美观。",
                "code": "import { Chip, ChipSize, LengthMetrics } from '@kit.ArkUI'; // 导入 Chip 组件及其相关属性\n\n@Entry\n@Component\nstruct ChipPage {\n  @State message: string = 'Hello World'; // 定义一个状态变量 message，初始值为 'Hello World'\n\n  build() {\n    Column() {\n      Chip({\n        direction: Direction.Rtl, // 设置 Chip 组件的布局方向为从右到左（镜像化）\n        prefixIcon: {\n          src: $r('app.media.chips'), // 设置前缀图标的资源路径\n          size: { width: 16, height: 16 }, // 设置前缀图标的宽度和高度\n          fillColor: Color.Red, // 设置前缀图标的填充颜色为红色\n        },\n        label: {\n          text: \"操作块\", // 设置 Chip 组件的标签文本\n          fontSize: 12, // 设置标签文本的字体大小\n          fontColor: Color.Blue, // 设置标签文本的字体颜色为蓝色\n          fontFamily: \"HarmonyOS Sans\", // 设置标签文本的字体族\n          localizedLabelMargin: { start: LengthMetrics.vp(20), end: LengthMetrics.vp(20) }, // 设置标签文本的左右边距\n        },\n        suffixIcon: {\n          src: $r('app.media.close'), // 设置后缀图标的资源路径\n          size: { width: 16, height: 16 }, // 设置后缀图标的宽度和高度\n          fillColor: Color.Red, // 设置后缀图标的填充颜色为红色\n        },\n        size: ChipSize.NORMAL, // 设置 Chip 组件的大小为正常尺寸\n        allowClose: false, // 设置 Chip 组件是否允许关闭\n        enabled: true, // 设置 Chip 组件是否启用\n        backgroundColor: $r('sys.color.ohos\\_id\\_color\\_button\\_normal'), // 设置 Chip 组件的背景颜色，使用系统资源\n        borderRadius: $r('sys.float.ohos\\_id\\_corner\\_radius\\_button') // 设置 Chip 组件的边框圆角，使用系统资源\n      })\n    }.justifyContent(FlexAlign.Center) // 设置 Column 组件的内容居中对齐\n    .width('100%') // 设置 Column 组件的宽度为 100%\n    .height('100%') // 设置 Column 组件的高度为 100%\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个带有默认删除图标的操作块。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个 Chip 组件，Chip 组件内部包含一个前缀图标和一个标签文本。Chip 组件的样式包括背景颜色、边框圆角、宽度和高度等属性，支持不同的样式展示。Chip 组件的功能包括点击事件和删除操作，用户可以通过点击删除图标触发删除操作。\n\n布局属性：\n- 组件的宽度占据整个屏幕，高度根据内容自适应。\n- Chip 组件的宽度根据内容自适应，高度为 ChipSize.NORMAL 的大小。\n\n组件的样式和外观：\n- 前缀图标的源文件为 app.media.chips，大小为 16x16vp，填充颜色为蓝色。\n- 标签文本的字体大小为 12vp，字体颜色为蓝色，字体家族为 \"HarmonyOS Sans\"，标签文本的左右边距分别为 20vp 和 30vp。\n- Chip 组件的背景颜色为系统默认的按钮背景颜色，边框圆角为系统默认的按钮圆角。\n\n组件的排列和嵌套关系：\n- 整个组件通过 Column 布局实现，Chip 组件位于 Column 内部。\n- Chip 组件内部包含一个前缀图标和一个标签文本，前缀图标位于标签文本的左侧。\n\n组件的功能和交互：\n- Chip 组件支持删除操作，用户可以通过点击删除图标触发删除操作。\n- Chip 组件在启用状态下展示，用户可以点击 Chip 组件进行交互。",
                "code": "import { Chip, ChipSize } from '@kit.ArkUI'; // 导入 Chip 组件及其相关属性\n\n@Entry // 标记该组件为入口组件\n@Component // 标记该组件为一个自定义组件\nstruct Index {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局的 Column 组件，组件之间的间距为 10vp\n      Chip({\n        prefixIcon: {\n          src: $r('app.media.chips'), // 设置前缀图标的源文件为 app.media.chips\n          size: { width: 16, height: 16 }, // 设置前缀图标的大小为 16x16vp\n          fillColor: Color.Blue // 设置前缀图标的填充颜色为蓝色\n        },\n        label: {\n          text: \"操作块\", // 设置标签文本为 \"操作块\"\n          fontSize: 12, // 设置标签文本的字体大小为 12vp\n          fontColor: Color.Blue, // 设置标签文本的字体颜色为蓝色\n          fontFamily: \"HarmonyOS Sans\", // 设置标签文本的字体家族为 \"HarmonyOS Sans\"\n          labelMargin: { left: 20, right: 30 } // 设置标签文本的左右边距分别为 20vp 和 30vp\n        },\n        size: ChipSize.NORMAL, // 设置 Chip 组件的大小为正常大小\n        allowClose: true, // 允许 Chip 组件显示删除图标\n        enabled: true, // 设置 Chip 组件为启用状态\n        backgroundColor: $r('sys.color.ohos_id_color_button_normal'), // 设置 Chip 组件的背景颜色为系统默认的按钮背景颜色\n        borderRadius: $r('sys.float.ohos_id_corner_radius_button') // 设置 Chip 组件的边框圆角为系统默认的按钮圆角\n      })\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个不显示删除图标的操作块。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个 Chip 组件，Chip 组件内部包含一个前缀图标和一个标签文本。Chip 组件的样式包括背景颜色、边框圆角、宽度和高度等属性，支持不同的样式展示。Chip 组件的功能包括点击事件和状态效果，用户可以通过点击 Chip 组件触发相应操作，Chip 组件也可以在启用或禁用状态下进行展示。\n\n布局属性：\n- 组件的宽度占据整个屏幕，高度根据内容自适应。\n- Chip 组件的宽度根据内容自适应，高度为 ChipSize.SMALL 定义的高度。\n\n组件的样式和外观：\n- Chip 组件的背景颜色为系统定义的颜色 $r('sys.color.ohos\\_id\\_color\\_button\\_normal')。\n- Chip 组件的边框圆角为系统定义的圆角 $r('sys.float.ohos\\_id\\_corner\\_radius\\_button')。\n- 前缀图标的颜色为蓝色，大小为 16x16 像素。\n- 标签文本的字体大小为 12，颜色为蓝色，字体家族为 \"HarmonyOS Sans\"，标签文本的左右边距分别为 20 和 30 像素。\n\n组件的排列和嵌套关系：\n- 组件通过 Column 布局实现，Chip 组件位于 Column 内部。\n- Chip 组件内部包含前缀图标和标签文本，前缀图标位于标签文本的左侧。\n\n组件的功能和交互：\n- Chip 组件支持点击事件，但在此示例中未定义具体的点击事件处理逻辑。\n- Chip 组件的删除图标被禁用，即 allowClose 属性设置为 false，因此不会显示删除图标。\n- Chip 组件的状态为启用状态，即 enabled 属性设置为 true。",
                "code": "import { Chip, ChipSize } from '@kit.ArkUI'; // 导入 Chip 组件及其相关属性\n\n@Entry // 标记该组件为入口组件\n@Component // 标记该组件为一个可渲染的组件\nstruct Index {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局的 Column 组件，组件之间的间距为 10 像素\n      Chip({\n        prefixIcon: {\n          src: $r('app.media.chips'), // 设置前缀图标的资源路径\n          size: { width: 16, height: 16 }, // 设置前缀图标的大小为 16x16 像素\n          fillColor: Color.Blue // 设置前缀图标的填充颜色为蓝色\n        },\n        label: {\n          text: \"操作块\", // 设置标签文本内容为 \"操作块\"\n          fontSize: 12, // 设置标签文本的字体大小为 12\n          fontColor: Color.Blue, // 设置标签文本的颜色为蓝色\n          fontFamily: \"HarmonyOS Sans\", // 设置标签文本的字体家族为 \"HarmonyOS Sans\"\n          labelMargin: { left: 20, right: 30 } // 设置标签文本的左右边距分别为 20 和 30 像素\n        },\n        size: ChipSize.SMALL, // 设置 Chip 组件的大小为 ChipSize.SMALL\n        allowClose: false, // 禁用 Chip 组件的删除图标\n        enabled: true, // 设置 Chip 组件为启用状态\n        backgroundColor: $r('sys.color.ohos\\_id\\_color\\_button\\_normal'), // 设置 Chip 组件的背景颜色为系统定义的颜色\n        borderRadius: $r('sys.float.ohos\\_id\\_corner\\_radius\\_button'), // 设置 Chip 组件的边框圆角为系统定义的圆角\n        onClose:()=>{\n          console.log(\"chip on close\") // 定义 Chip 组件的关闭事件处理逻辑，此处仅打印日志\n        }\n      })\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个包含 Chip 组件和 Button 组件的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为两个部分，第一部分是一个 Chip 组件，第二部分是一个 Button 组件。Chip 组件用于展示一个带有图标和文本的操作块，支持激活态和非激活态的切换，并且可以点击和关闭。Button 组件用于切换 Chip 组件的激活状态。\n\nChip 组件的样式包括背景颜色、边框圆角、图标和文本的颜色、字体大小、字体家族等属性，支持不同的样式展示。Chip 组件的功能包括点击事件和关闭事件，用户可以通过点击 Chip 组件触发相应操作，也可以通过点击关闭按钮关闭 Chip 组件。\n\nButton 组件的样式包括文本颜色、字体大小、字体家族等属性，支持不同的样式展示。Button 组件的功能包括点击事件，用户可以通过点击 Button 组件切换 Chip 组件的激活状态。\n\n整个布局通过 Column 布局保证 Chip 组件和 Button 组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { Chip, ChipSize } from '@kit.ArkUI'; // 导入 Chip 组件和 ChipSize 枚举\n\n@Entry\n@Component\nstruct Index {\n  @State isActivated: boolean = false; // 定义一个状态变量 isActivated，用于控制 Chip 组件的激活状态，初始值为 false\n\n  build() {\n    Column({ space: 10 }) { // 创建一个 Column 布局，设置子组件之间的间距为 10vp\n      Chip({\n        prefixIcon: {\n          src: $r('app.media.chips'), // 设置 Chip 组件的前缀图标资源路径\n          size: { width: 16, height: 16 }, // 设置图标的宽度和高度为 16vp\n          fillColor: Color.Blue, // 设置图标的填充颜色为蓝色\n          activatedFillColor: $r('sys.color.ohos_id_color_text_primary_contrary') // 设置激活状态下图标的填充颜色为系统定义的颜色\n        },\n        label: {\n          text: \"操作块\", // 设置 Chip 组件的文本内容为 \"操作块\"\n          fontSize: 12, // 设置文本的字体大小为 12vp\n          fontColor: Color.Blue, // 设置文本的颜色为蓝色\n          activatedFontColor: $r('sys.color.ohos_id_color_text_primary_contrary'), // 设置激活状态下文本的颜色为系统定义的颜色\n          fontFamily: \"HarmonyOS Sans\", // 设置文本的字体家族为 \"HarmonyOS Sans\"\n          labelMargin: { left: 20, right: 30 } // 设置文本的左右边距分别为 20vp 和 30vp\n        },\n        size: ChipSize.NORMAL, // 设置 Chip 组件的大小为正常大小\n        allowClose: true, // 允许 Chip 组件显示关闭按钮\n        enabled: true, // 启用 Chip 组件的交互功能\n        activated: this.isActivated, // 根据 isActivated 状态变量控制 Chip 组件的激活状态\n        backgroundColor: $r('sys.color.ohos_id_color_button_normal'), // 设置 Chip 组件的背景颜色为系统定义的颜色\n        activatedBackgroundColor: $r('sys.color.ohos_id_color_emphasize'), // 设置激活状态下 Chip 组件的背景颜色为系统定义的颜色\n        borderRadius: $r('sys.float.ohos_id_corner_radius_button'), // 设置 Chip 组件的边框圆角为系统定义的圆角\n        onClose:()=>{\n          console.log(\"chip on close\") // 定义 Chip 组件的关闭事件处理函数，点击关闭按钮时输出日志\n        },\n        onClicked:()=>{\n          console.log(\"chip on clicked\") // 定义 Chip 组件的点击事件处理函数，点击 Chip 组件时输出日志\n        }\n      })\n\n      Button('改变激活状态').onClick(()=>{\n        this.isActivated = !this.isActivated; // 定义 Button 组件的点击事件处理函数，点击 Button 组件时切换 isActivated 状态变量的值\n      })\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个包含 Chip 组件和 Button 组件的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为两个部分，第一部分是一个 Chip 组件，第二部分是一个 Button 组件。\n\nChip 组件的样式包括背景颜色、边框圆角、宽度和高度等属性，支持不同的样式展示。Chip 组件的功能包括点击事件和状态效果，用户可以通过点击 Chip 组件触发相应操作，Chip 组件也可以在激活或未激活状态下进行展示。\n\nButton 组件的样式包括背景颜色、边框圆角、宽度和高度等属性，支持不同的样式展示。Button 组件的功能包括点击事件，用户可以通过点击 Button 组件触发相应操作。\n\n整个布局通过 Column 布局保证 Chip 组件和 Button 组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { Chip, ChipSize, SymbolGlyphModifier } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  @State isActivated: boolean = false; // 定义一个状态变量 isActivated，用于控制 Chip 组件的激活状态\n\n  build() {\n    Column({ space: 10 }) { // 使用 Column 布局，设置子组件之间的间距为 10vp\n      Chip({\n        prefixIcon: {\n          src: $r('app.media.chips'), // 设置 Chip 组件前缀图标的资源路径\n          size: { width: 16, height: 16 }, // 设置前缀图标的宽度和高度为 16vp\n          fillColor: Color.Blue, // 设置前缀图标的填充颜色为蓝色\n          activatedFillColor: $r('sys.color.ohos_id_color_text_primary_contrary') // 设置激活状态下前缀图标的填充颜色为系统定义的颜色\n        },\n        prefixSymbol: {\n          normal: new SymbolGlyphModifier($r('sys.symbol.ohos_star')).fontSize(16).fontColor([Color.Green]), // 设置 Chip 组件前缀符号的正常状态，使用系统符号资源，字体大小为 16vp，字体颜色为绿色\n          activated: new SymbolGlyphModifier($r('sys.symbol.ohos_star')).fontSize(16).fontColor([Color.Red]), // 设置 Chip 组件前缀符号的激活状态，使用系统符号资源，字体大小为 16vp，字体颜色为红色\n        },\n        label: {\n          text: \"操作块\", // 设置 Chip 组件的标签文本为 \"操作块\"\n          fontSize: 12, // 设置标签文本的字体大小为 12vp\n          fontColor: Color.Blue, // 设置标签文本的字体颜色为蓝色\n          activatedFontColor: $r('sys.color.ohos_id_color_text_primary_contrary'), // 设置激活状态下标签文本的字体颜色为系统定义的颜色\n          fontFamily: \"HarmonyOS Sans\", // 设置标签文本的字体为 HarmonyOS Sans\n          labelMargin: { left: 20, right: 30 }, // 设置标签文本的左右边距分别为 20vp 和 30vp\n        },\n        size: ChipSize.NORMAL, // 设置 Chip 组件的大小为正常大小\n        allowClose: true, // 允许 Chip 组件显示关闭按钮\n        enabled: true, // 设置 Chip 组件为启用状态\n        activated: this.isActivated, // 根据 isActivated 状态变量设置 Chip 组件的激活状态\n        backgroundColor: $r('sys.color.ohos_id_color_button_normal'), // 设置 Chip 组件的背景颜色为系统定义的颜色\n        activatedBackgroundColor: $r('sys.color.ohos_id_color_emphasize'), // 设置激活状态下 Chip 组件的背景颜色为系统定义的颜色\n        borderRadius: $r('sys.float.ohos_id_corner_radius_button'), // 设置 Chip 组件的边框圆角为系统定义的圆角\n        onClose:()=>{\n          console.log(\"chip on close\") // 定义 Chip 组件的关闭事件回调函数，打印 \"chip on close\"\n        },\n        onClicked:()=>{\n          console.log(\"chip on clicked\") // 定义 Chip 组件的点击事件回调函数，打印 \"chip on clicked\"\n        }\n      })\n\n      Button('改变激活状态').onClick(()=>{\n        this.isActivated = !this.isActivated; // 定义 Button 组件的点击事件回调函数，切换 isActivated 状态变量的值\n      })\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "ChipGroup": {
        "description": "ChipGroup高级组件，提供操作块群组，用于对文件或者资源内容进行分类等场景。",
        "details": null,
        "interfaces": [
            {
                "description": "ChipGroup({ items: ChipGroupItemOptions[], itemStyle?: ChipItemStyle, selectedIndexes?: Array<number>, multiple?: boolean, chipGroupSpace?: ChipGroupSpaceOptions, chipGroupPadding?: ChipGroupPaddingOptions, onChange?: (selectedIndexes: Array<number>) => void, suffix?: Callback<void> })",
                "params": {
                    "items": {
                        "type": "ChipGroupItemOptions[]",
                        "required": true,
                        "description": "定义每个chip的非共通属性。"
                    },
                    "itemStyle": {
                        "type": "ChipItemStyle",
                        "required": false,
                        "description": "定义chip的共通属性。"
                    },
                    "selectedIndexes": {
                        "type": "Array<number>",
                        "required": false,
                        "description": "选中的chip索引数组。"
                    },
                    "multiple": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否允许多选。"
                    },
                    "chipGroupSpace": {
                        "type": "ChipGroupSpaceOptions",
                        "required": false,
                        "description": "定义chipGroup左右内边距，以及chip与chip之间的间距。"
                    },
                    "chipGroupPadding": {
                        "type": "ChipGroupPaddingOptions",
                        "required": false,
                        "description": "定义chipGroup上下内边距，以便控制chipGroup的整体高度。"
                    },
                    "onChange": {
                        "type": "(selectedIndexes: Array<number>) => void",
                        "required": false,
                        "description": "当chip选中状态改变时触发的回调函数。"
                    },
                    "suffix": {
                        "type": "Callback<void>",
                        "required": false,
                        "description": "自定义suffix的回调函数。"
                    }
                }
            }
        ],
        "attributes": {
            "ChipGroupItemOptions": {
                "description": "定义每个chip的非共通属性。",
                "params": {
                    "suffixIcon": {
                        "type": "IconOptions",
                        "required": false,
                        "description": "suffix图标。"
                    },
                    "allowClose": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否显示删除图标。"
                    }
                }
            },
            "ChipItemStyle": {
                "description": "定义chip的共通属性。",
                "params": {
                    "size": {
                        "type": "ChipSize | SizeOptions",
                        "required": false,
                        "description": "chip尺寸。",
                        "default": "ChipSize.NORMAL"
                    },
                    "backgroundColor": {
                        "type": "ResourceColor",
                        "required": false,
                        "description": "chip背景颜色。",
                        "default": "$r('sys.color.ohos_id_color_button_normal')"
                    },
                    "fontColor": {
                        "type": "ResourceColor",
                        "required": false,
                        "description": "chip文字颜色。",
                        "default": "$r('sys.color.ohos_id_color_text_primary')"
                    },
                    "selectedFontColor": {
                        "type": "ResourceColor",
                        "required": false,
                        "description": "chip激活时的文字颜色。",
                        "default": "$r('sys.color.ohos_id_color_text_primary_contrary')"
                    },
                    "selectedBackgroundColor": {
                        "type": "ResourceColor",
                        "required": false,
                        "description": "chip激活时的背景颜色。",
                        "default": "$r('sys.color.ohos_id_color_emphasize')"
                    }
                }
            },
            "ChipGroupSpaceOptions": {
                "description": "定义chipGroup左右内边距，以及chip与chip之间的间距。",
                "params": {
                    "itemSpace": {
                        "type": "string | number",
                        "required": false,
                        "description": "chip与chip之间的间距。",
                        "default": "8"
                    },
                    "startSpace": {
                        "type": "Length",
                        "required": false,
                        "description": "左侧内边距。",
                        "default": "16"
                    },
                    "endSpace": {
                        "type": "Length",
                        "required": false,
                        "description": "右侧内边距。",
                        "default": "16"
                    }
                }
            },
            "ChipGroupPaddingOptions": {
                "description": "定义chipGroup上下内边距，以便控制chipGroup的整体高度。",
                "params": {
                    "top": {
                        "type": "Length",
                        "required": true,
                        "description": "chipGroup的上方内边距。",
                        "default": "14"
                    },
                    "bottom": {
                        "type": "Length",
                        "required": true,
                        "description": "chipGroup的下方内边距。",
                        "default": "14"
                    }
                }
            }
        },
        "events": {
            "onChange": {
                "description": "当chip选中状态改变时触发的回调函数。",
                "params": {
                    "selectedIndexes": {
                        "type": "Array<number>",
                        "required": true,
                        "description": "选中的chip索引数组。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 ChipGroup 组件实现了一个展示多个操作块的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个 ChipGroup 组件，ChipGroup 组件内部包含多个 Chip 组件，每个 Chip 组件代表一个操作块。\n\nChipGroup 组件的样式包括背景颜色、字体颜色、选中背景颜色、选中字体颜色等属性，支持不同的样式展示。ChipGroup 组件的排列方式为水平布局，Chip 组件之间的间距为 8vp，ChipGroup 组件的上下内边距为 10vp。\n\nChip 组件的功能包括点击事件和关闭功能，用户可以通过点击 Chip 组件触发相应操作，Chip 组件也可以在允许关闭的状态下进行展示。整个布局通过 ChipGroup 组件保证 Chip 组件在水平方向上有序排列，确保界面整洁美观。",
                "code": "import { ChipSize, ChipGroup } from '@kit.ArkUI'\n\n@Entry\n@Preview\n@Component\nstruct Index {\n  @State selected_index: Array<number> = [0, 1, 2, 3, 4, 5, 6] // 定义选中状态的索引数组\n\n  build() {\n    Column() {\n      ChipGroup({\n        items: [\n          {\n            prefixIcon: { src: $r('app.media.icon') }, // 设置 Chip 组件的前缀图标\n            label: { text: \"操作块1\" }, // 设置 Chip 组件的标签文本\n            suffixIcon: { src: $r('sys.media.ohos_ic_public_cut') }, // 设置 Chip 组件的后缀图标\n            allowClose: false // 设置 Chip 组件不允许关闭\n          },\n          {\n            prefixIcon: { src: $r('sys.media.ohos_ic_public_copy') }, // 设置 Chip 组件的前缀图标\n            label: { text: \"操作块2\" }, // 设置 Chip 组件的标签文本\n            allowClose: true // 设置 Chip 组件允许关闭\n          },\n          {\n            prefixIcon: { src: $r('sys.media.ohos_ic_public_clock') }, // 设置 Chip 组件的前缀图标\n            label: { text: \"操作块3\" }, // 设置 Chip 组件的标签文本\n            allowClose: true // 设置 Chip 组件允许关闭\n          },\n          {\n            prefixIcon: { src: $r('sys.media.ohos_ic_public_cast_stream') }, // 设置 Chip 组件的前缀图标\n            label: { text: \"操作块4\" }, // 设置 Chip 组件的标签文本\n            allowClose: true // 设置 Chip 组件允许关闭\n          },\n          {\n            prefixIcon: { src: $r('sys.media.ohos_ic_public_cast_mirror') }, // 设置 Chip 组件的前缀图标\n            label: { text: \"操作块5\" }, // 设置 Chip 组件的标签文本\n            allowClose: true // 设置 Chip 组件允许关闭\n          },\n          {\n            prefixIcon: { src: $r('sys.media.ohos_ic_public_cast_stream') }, // 设置 Chip 组件的前缀图标\n            label: { text: \"操作块6\" }, // 设置 Chip 组件的标签文本\n            allowClose: true // 设置 Chip 组件允许关闭\n          },\n        ],\n        itemStyle: {\n          size: ChipSize.SMALL, // 设置 Chip 组件的大小为小号\n          backgroundColor: $r('sys.color.ohos_id_color_button_normal'), // 设置 Chip 组件的背景颜色\n          fontColor: $r('sys.color.ohos_id_color_text_primary'), // 设置 Chip 组件的字体颜色\n          selectedBackgroundColor: $r('sys.color.ohos_id_color_emphasize'), // 设置 Chip 组件选中时的背景颜色\n          selectedFontColor: $r('sys.color.ohos_id_color_text_primary_contrary'), // 设置 Chip 组件选中时的字体颜色\n        },\n        selectedIndexes: this.selected_index, // 设置 ChipGroup 组件的选中索引\n        multiple: false, // 设置 ChipGroup 组件不允许多选\n        chipGroupSpace: { itemSpace: 8, endSpace: 0 }, // 设置 ChipGroup 组件的间距\n        chipGroupPadding: { top: 10, bottom: 10 }, // 设置 ChipGroup 组件的上下内边距\n        onChange: (activatedChipsIndex:Array<number>) => {\n          console.log('chips on clicked, activated index ' + activatedChipsIndex) // 设置 ChipGroup 组件的点击事件回调函数\n        },\n      })\n    }\n  }\n}"
            },
            {
                "description": "该示例通过使用鸿蒙ArkUI框架中的ChipGroup和IconGroupSuffix组件，实现了一个包含多个操作块（Chip）的界面。每个操作块可以包含前缀图标（prefixSymbol或prefixIcon）和后缀图标（suffixSymbol），并且支持点击事件和状态切换。布局上，操作块以水平布局方式排列，每个操作块之间的间距为8vp，操作块组的上下内边距为10vp。操作块的样式包括背景颜色、字体颜色、选中状态的背景颜色和字体颜色等。操作块的功能包括点击事件，用户可以通过点击操作块触发相应操作，操作块也可以在选中或未选中状态下进行展示。",
                "code": "import { ChipSize, ChipGroup, IconGroupSuffix, SymbolGlyphModifier } from '@kit.ArkUI'\n\n@Entry\n@Preview\n@Component\nstruct Index {\n  // 定义一个状态变量，用于存储选中的操作块索引\n  @State selected_index: Array<number> = [0, 1, 2, 3, 4, 5, 6];\n  // 定义一个状态变量，用于表示当前选中的状态\n  @State selected_state: boolean = true;\n  // 定义一个状态变量，用于存储前缀图标的正常状态样式\n  @State prefixModifierNormal: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_star'));\n  // 定义一个状态变量，用于存储前缀图标的激活状态样式\n  @State prefixModifierActivated: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_star')).fontColor([Color.Red]);\n  // 定义一个状态变量，用于存储后缀图标的正常状态样式\n  @State suffixModifierNormal: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_wifi'));\n  // 定义一个状态变量，用于存储后缀图标的激活状态样式\n  @State suffixModifierActivated: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_wifi')).fontColor([Color.Red]);\n\n  // 定义一个本地构建器，用于生成ChipGroup的后缀图标\n  @LocalBuilder\n  ChipGroupSuffix(): void {\n    IconGroupSuffix({\n      items: [\n        new SymbolGlyphModifier($r('sys.symbol.magnifyingglass'))\n          .onClick(() => {\n            // 点击后缀图标时，切换选中的状态\n            if (this.selected_state == false) {\n              this.selected_index = [0, 1, 2, 3, 4, 5, 6];\n              this.selected_state = true;\n            } else {\n              this.selected_index = [];\n              this.selected_state = false;\n            }\n          })\n      ]\n    })\n  }\n\n  build() {\n    Column() {\n      ChipGroup({\n        items: [\n          {\n            // 设置操作块1的前缀图标和后缀图标\n            prefixSymbol: { normal: this.prefixModifierNormal, activated: this.prefixModifierActivated },\n            label: { text: \"操作块1\" },\n            suffixSymbol: { normal: this.suffixModifierNormal, activated: this.suffixModifierActivated },\n            allowClose: false,\n          },\n          {\n            // 设置操作块2的前缀图标\n            prefixSymbol: { normal: this.prefixModifierNormal, activated: this.prefixModifierActivated },\n            label: { text: \"操作块2\" },\n            allowClose: true,\n          },\n          {\n            // 设置操作块3的前缀图标\n            prefixIcon: { src: $r('sys.media.ohos_ic_public_clock') },\n            label: { text: \"操作块3\" },\n            allowClose: true,\n          },\n          {\n            // 设置操作块4的前缀图标\n            prefixIcon: { src: $r('sys.media.ohos_ic_public_cast_stream') },\n            label: { text: \"操作块4\" },\n            allowClose: true,\n          },\n          {\n            // 设置操作块5的前缀图标\n            prefixIcon: { src: $r('sys.media.ohos_ic_public_cast_mirror') },\n            label: { text: \"操作块5\" },\n            allowClose: true,\n          },\n          {\n            // 设置操作块6的前缀图标\n            prefixIcon: { src: $r('sys.media.ohos_ic_public_cast_stream') },\n            label: { text: \"操作块6\" },\n            allowClose: true,\n          },\n        ],\n        itemStyle: {\n          // 设置操作块的大小为NORMAL\n          size: ChipSize.NORMAL,\n          // 设置操作块的背景颜色\n          backgroundColor: $r('sys.color.ohos_id_color_button_normal'),\n          // 设置操作块的字体颜色\n          fontColor: $r('sys.color.ohos_id_color_text_primary'),\n          // 设置操作块选中状态的背景颜色\n          selectedBackgroundColor: $r('sys.color.ohos_id_color_emphasize'),\n          // 设置操作块选中状态的字体颜色\n          selectedFontColor: $r('sys.color.ohos_id_color_text_primary_contrary'),\n        },\n        // 设置初始选中的操作块索引\n        selectedIndexes: this.selected_index,\n        // 设置操作块组支持多选\n        multiple: true,\n        // 设置操作块组内操作块之间的间距和操作块组两端的间距\n        chipGroupSpace: { itemSpace: 8, endSpace: 0 },\n        // 设置操作块组的上下内边距\n        chipGroupPadding: { top: 10, bottom: 10 },\n        // 设置操作块组选中状态变化时的回调函数\n        onChange: (activatedChipsIndex: Array<number>) => {\n          console.log('chips on clicked, activated index ' + activatedChipsIndex)\n        },\n        // 设置操作块组的后缀图标\n        suffix: this.ChipGroupSuffix\n      })\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Counter": {
        "description": "计数器组件，提供相应的增加或者减少的计数操作。",
        "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "Counter()",
                "params": {}
            }
        ],
        "attributes": {
            "enableInc": {
                "description": "设置增加按钮禁用或使能。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "增加按钮禁用或使能。",
                        "default": true
                    }
                }
            },
            "enableDec": {
                "description": "设置减少按钮禁用或使能。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "减少按钮禁用或使能。",
                        "default": true
                    }
                }
            }
        },
        "events": {
            "onInc": {
                "description": "监听数值增加事件。",
                "params": {}
            },
            "onDec": {
                "description": "监听数值减少事件。",
                "params": {}
            }
        },
        "examples": [
            {
                "description": "该组件实现了一个简单的计数器应用。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个计数器显示区域和一个计数器操作区域。计数器显示区域的文本内容为当前计数值，操作区域包含增加和减少计数值的功能。\n\n布局属性：\n- 宽度：占据整个屏幕宽度（100%）。\n- 高度：根据内容自适应。\n- 边距：计数器显示区域有100vp的边距。\n\n组件的样式和外观：\n- 文本内容：显示当前计数值，使用默认字体和颜色。\n- 边距：计数器显示区域有100vp的边距，确保与其他组件有一定的间距。\n\n组件的排列和嵌套关系：\n- 垂直布局：整个组件使用Column布局，确保内容在垂直方向上排列。\n- 嵌套关系：Counter组件嵌套在Column布局中，Counter组件内部包含一个Text组件用于显示计数值。\n\n组件的功能和交互：\n- 点击事件：通过onInc和onDec事件处理函数，实现计数值的增加和减少。\n- 状态管理：使用@State装饰器管理计数值的状态，确保计数值的变化能够实时反映在界面上。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct CounterExample {\n  @State value: number = 0 // 使用@State装饰器管理计数值的状态，初始值为0\n\n  build() {\n    Column() {\n      Counter() {\n        Text(this.value.toString()) // 显示当前计数值的文本组件\n      }.margin(100) // 设置计数器显示区域的边距为100vp\n      .onInc(() => {\n        this.value++ // 增加计数值的事件处理函数\n      })\n      .onDec(() => {\n        this.value-- // 减少计数值的事件处理函数\n      })\n    }.width(\"100%\") // 设置整个组件的宽度占据整个屏幕宽度\n  }\n}"
            }
        ]
    },
    "advanced.Counter": {
        "description": "Counter是用于精确调节数值的组件。",
        "details": "该组件从API Version 11开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "CounterComponent({ options: CounterOptions })",
                "params": {
                    "options": {
                        "type": "CounterOptions",
                        "required": true,
                        "description": "Counter的类型及具体式样参数。"
                    }
                }
            }
        ],
        "attributes": {
            "CounterOptions": {
                "description": "CounterOptions定义Counter的类型及具体式样参数。",
                "params": {
                    "type": {
                        "type": [
                            "CounterType.LIST",
                            "CounterType.COMPACT",
                            "CounterType.INLINE",
                            "CounterType.INLINE_DATE"
                        ],
                        "required": true,
                        "description": "Counter的类型。"
                    },
                    "numberOptions": {
                        "type": "NumberStyleOptions",
                        "required": false,
                        "description": "当类型为LIST或COMPACT时，使用NumberStyleOptions。"
                    },
                    "inlineOptions": {
                        "type": "InlineStyleOptions",
                        "required": false,
                        "description": "当类型为INLINE时，使用InlineStyleOptions。"
                    },
                    "dateOptions": {
                        "type": "DateStyleOptions",
                        "required": false,
                        "description": "当类型为INLINE_DATE时，使用DateStyleOptions。"
                    }
                }
            },
            "CommonOptions": {
                "description": "CommonOptions定义Counter的共通属性和事件。",
                "params": {
                    "focusable": {
                        "type": "boolean",
                        "required": false,
                        "description": "设置Counter是否可以获焦。",
                        "default": true
                    },
                    "step": {
                        "type": "number",
                        "required": false,
                        "description": "设置Counter的步长。",
                        "default": 1
                    },
                    "onHoverIncrease": {
                        "type": "(isHover: boolean) => void",
                        "required": false,
                        "description": "鼠标进入或退出Counter组件的增加按钮触发该回调。"
                    },
                    "onHoverDecrease": {
                        "type": "(isHover: boolean) => void",
                        "required": false,
                        "description": "鼠标进入或退出Counter组件的减小按钮触发该回调。"
                    }
                }
            },
            "InlineStyleOptions": {
                "description": "InlineStyleOptions定义Inline Style（数值内联型Counter）的属性和事件。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": false,
                        "description": "设置Counter的初始值。",
                        "default": 0
                    },
                    "min": {
                        "type": "number",
                        "required": false,
                        "description": "设置Counter的最小值。",
                        "default": 0
                    },
                    "max": {
                        "type": "number",
                        "required": false,
                        "description": "设置Counter的最大值。",
                        "default": 999
                    },
                    "textWidth": {
                        "type": "number",
                        "required": false,
                        "description": "设置数值文本的宽度。",
                        "default": 0
                    },
                    "onChange": {
                        "type": "(value: number) => void",
                        "required": false,
                        "description": "当数值改变时，返回当前值。"
                    }
                }
            },
            "NumberStyleOptions": {
                "description": "NumberStyleOptions定义Number style（列表型Counter和紧凑型Counter）的属性和事件。",
                "params": {
                    "label": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "设置Counter的说明文本。"
                    },
                    "onFocusIncrease": {
                        "type": "() => void",
                        "required": false,
                        "description": "当前Counter组件增加按钮获取焦点时触发的回调。"
                    },
                    "onFocusDecrease": {
                        "type": "() => void",
                        "required": false,
                        "description": "当前Counter组件减小按钮获取焦点时触发的回调。"
                    },
                    "onBlurIncrease": {
                        "type": "() => void",
                        "required": false,
                        "description": "当前Counter组件增加按钮失去焦点时触发的回调。"
                    },
                    "onBlurDecrease": {
                        "type": "() => void",
                        "required": false,
                        "description": "当前Counter组件减小按钮失去焦点时触发的回调。"
                    }
                }
            },
            "DateStyleOptions": {
                "description": "DateStyleOptions定义Date style（日期内联型Counter）的属性和事件。",
                "params": {
                    "year": {
                        "type": "number",
                        "required": false,
                        "description": "设置日期内联型初始年份。",
                        "default": 1
                    },
                    "month": {
                        "type": "number",
                        "required": false,
                        "description": "设置日期内联型初始月份。",
                        "default": 1
                    },
                    "day": {
                        "type": "number",
                        "required": false,
                        "description": "设置日期内联型初始日。",
                        "default": 1
                    },
                    "onDateChange": {
                        "type": "(date: DateData) => void",
                        "required": false,
                        "description": "当日期改变时，返回当前日期。"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Column 布局实现了一个展示日期选择器的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个日期选择器组件。日期选择器的类型为 INLINE_DATE，表示日期选择器以行内形式展示。日期选择器的初始年份设置为 2016 年，当日期发生变化时，会触发 onDateChange 事件，并在控制台输出当前选择的日期。\n日期选择器的样式包括默认的背景颜色、字体颜色等，支持用户自定义样式。日期选择器的排列方式为垂直布局，确保日期选择器在垂直方向上有序排列，界面整洁美观。",
                "code": "import { CounterType, CounterComponent, DateData } from '@kit.ArkUI'; // 导入 CounterType、CounterComponent 和 DateData 类型\n\n@Entry // 标记该组件为入口组件\n@Component // 标记该结构体为组件\nstruct DataStyleExample {\n  build() {\n    Column() { // 创建一个垂直布局的容器\n\n      CounterComponent({ // 创建一个日期选择器组件\n        options: {\n          type: CounterType.INLINE_DATE, // 设置日期选择器的类型为行内日期选择器\n          dateOptions: {\n            year: 2016, // 设置日期选择器的初始年份为 2016 年\n            onDateChange: (date: DateData) => { // 设置日期变化时的回调函数\n              console.log(\"onDateChange Date: \" + date.toString()); // 在控制台输出当前选择的日期\n            }\n          }\n        }\n      })\n    }\n  }\n}"
            },
            {
                "description": "该示例展示了一个计数器组件的使用，通过 `CounterComponent` 组件实现了一个列表类型的计数器。布局采用垂直布局（`Column`），组件宽度占据整个父容器的宽度，高度根据内容自适应。组件的样式和外观包括计数器的标签、最小值、当前值和最大值的设置。计数器的排列和嵌套关系为垂直布局，标签和计数器值的排列为水平布局，标签位于左侧，计数器值位于右侧。计数器的功能包括点击事件，用户可以通过点击计数器的增减按钮来调整计数器的值，计数器的值会在最小值和最大值之间进行限制。",
                "code": "// 导入计数器组件及其类型\nimport { CounterType, CounterComponent } from '@kit.ArkUI';\n\n// 定义一个入口组件\n@Entry\n// 定义一个组件结构\n@Component\nstruct ListCounterExample {\n  // 构建组件的 UI 结构\n  build() {\n    // 使用垂直布局\n    Column() {\n      // 创建一个计数器组件，类型为列表类型\n      CounterComponent({\n        options: {\n          // 设置计数器类型为列表类型\n          type: CounterType.LIST,\n          // 设置计数器的具体选项\n          numberOptions: {\n            // 设置计数器的标签为 \"价格\"\n            label: \"价格\",\n            // 设置计数器的最小值为 0\n            min: 0,\n            // 设置计数器的当前值为 5\n            value: 5,\n            // 设置计数器的最大值为 10\n            max: 10\n          }\n        }\n      })\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个紧凑型的计数器界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个 CounterComponent 组件，该组件用于展示和操作计数器的值。\nCounterComponent 组件的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。计数器的值通过按钮进行增减操作，按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过 Column 布局保证计数器在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// 导入 CounterType 和 CounterComponent 组件\nimport { CounterType, CounterComponent } from '@kit.ArkUI';\n\n// 使用 @Entry 和 @Component 装饰器定义一个名为 CompactCounterExample 的组件\n@Entry\n@Component\nstruct CompactCounterExample {\n  // 构建组件的 UI 结构\n  build() {\n    // 使用 Column 布局，垂直排列子组件\n    Column() {\n      // 创建一个 CounterComponent 组件，并传入配置选项\n      CounterComponent({\n        options: {\n          // 设置计数器的类型为 COMPACT\n          type: CounterType.COMPACT,\n          // 配置计数器的具体选项\n          numberOptions: {\n            // 设置计数器的标签为 \"数量\"\n            label: \"数量\",\n            // 设置计数器的初始值为 10\n            value: 10,\n            // 设置计数器的最小值为 0\n            min: 0,\n            // 设置计数器的最大值为 100\n            max: 100,\n            // 设置计数器的步长为 10\n            step: 10\n          }\n        }\n      })\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个计数器组件的展示界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个 CounterComponent 组件，该组件用于展示和控制计数器的值。\n\nCounterComponent 组件的样式和外观包括：\n- 计数器的初始值为 100，最小值为 10，最大值为 1000，步长为 2。\n- 计数器的文本宽度为 100vp，用于控制显示区域的宽度。\n- 计数器的类型为 INLINE，表示计数器以行内形式展示。\n\n组件的排列和嵌套关系为：\n- 整个界面通过 Column 组件进行垂直布局，确保 CounterComponent 组件在垂直方向上居中显示。\n\n组件的功能和交互包括：\n- 计数器的值可以通过点击加减按钮进行调整，每次调整的步长为 2。\n- 当计数器的值发生变化时，会触发 onChange 事件，并在控制台输出当前的计数值。\n\n整个布局通过 Column 布局保证计数器在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { CounterType, CounterComponent } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct NumberStyleExample {\n  build() {\n    Column() {\n      // 创建一个 CounterComponent 组件，用于展示和控制计数器的值\n      CounterComponent({\n        options: {\n          type: CounterType.INLINE, // 设置计数器类型为 INLINE，表示以行内形式展示\n          inlineOptions: {\n            value: 100, // 设置计数器的初始值为 100\n            min: 10, // 设置计数器的最小值为 10\n            step: 2, // 设置计数器的步长为 2，即每次调整的增量或减量为 2\n            max: 1000, // 设置计数器的最大值为 1000\n            textWidth: 100, // 设置计数器文本显示区域的宽度为 100vp\n            onChange: (value: number) => {\n              // 当计数器的值发生变化时，触发 onChange 事件，并在控制台输出当前的计数值\n              console.log(\"onDateChange Date: \" + value.toString());\n            }\n          }\n        }\n      })\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个展示多种类型计数器（如列表型、紧凑型、数字内联型、日期内联型）的界面。布局宽度占据整个屏幕，高度设为 100%，内边距为无。组件的垂直方向上被分为多个部分，每个部分包含一个计数器组件。每个计数器组件以垂直布局方式排列，计数器之间的间距通过 margin 属性设置为 20vp，且对齐方式为居中对齐。\n计数器的样式包括宽度、高度、边距等属性，支持不同的样式展示。计数器组件之间通过 Column 组件进行分隔。计数器的功能包括点击事件和状态效果，用户可以通过点击计数器触发相应操作，计数器也可以在启用或禁用状态下进行展示。\n整个布局通过 Column 布局保证计数器在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { CounterType, CounterComponent, DateData } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct CounterPage {\n  @State currentDirection: Direction = Direction.Rtl // 定义当前的布局方向，默认为从右到左（RTL）\n\n  build() {\n    Column({}) {\n      // 列表型计数器组件\n      CounterComponent({\n        options: {\n          direction: this.currentDirection, // 设置计数器的布局方向\n          type: CounterType.LIST, // 设置计数器的类型为列表型\n          numberOptions: {\n            label: \"价格\", // 设置计数器的标签\n            min: 0, // 设置计数器的最小值\n            value: 5, // 设置计数器的当前值\n            max: 10, // 设置计数器的最大值\n          }\n        }\n      })\n      .width('80%') // 设置计数器的宽度为父容器的80%\n\n      // 紧凑型计数器组件\n      CounterComponent({\n        options: {\n          direction: this.currentDirection, // 设置计数器的布局方向\n          type: CounterType.COMPACT, // 设置计数器的类型为紧凑型\n          numberOptions: {\n            label: \"数量\", // 设置计数器的标签\n            value: 10, // 设置计数器的当前值\n            min: 0, // 设置计数器的最小值\n            max: 100, // 设置计数器的最大值\n            step: 10 // 设置计数器的步长\n          }\n        }\n      }).margin({ top: 20 }) // 设置计数器的上边距为20vp\n\n      // 数字内联型计数器组件\n      CounterComponent({\n        options: {\n          type: CounterType.INLINE, // 设置计数器的类型为数字内联型\n          direction: this.currentDirection, // 设置计数器的布局方向\n          inlineOptions: {\n            value: 100, // 设置计数器的当前值\n            min: 10, // 设置计数器的最小值\n            step: 2, // 设置计数器的步长\n            max: 1000, // 设置计数器的最大值\n            textWidth: 100, // 设置计数器文本的宽度\n            onChange: (value: number) => {\n              console.log(\"onDateChange Date: \" + value.toString()); // 设置计数器值变化时的回调函数\n            }\n          }\n        }\n      }).margin({ top: 20 }) // 设置计数器的上边距为20vp\n\n      // 日期内联型计数器组件\n      CounterComponent({\n        options: {\n          direction: this.currentDirection, // 设置计数器的布局方向\n          type: CounterType.INLINE_DATE, // 设置计数器的类型为日期内联型\n          dateOptions: {\n            year: 2024, // 设置计数器的年份\n            onDateChange: (date: DateData) => {\n              console.log(\"onDateChange Date: \" + date.toString()); // 设置计数器日期变化时的回调函数\n            }\n          }\n        }\n      }).margin({ top: 20 }) // 设置计数器的上边距为20vp\n    }\n    .width('100%') // 设置列的宽度为100%\n    .height('100%') // 设置列的高度为100%\n    .justifyContent(FlexAlign.Center) // 设置列的内容在垂直方向上居中对齐\n    .alignItems(HorizontalAlign.Center) // 设置列的内容在水平方向上居中对齐\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "DataPanel": {
        "description": "数据面板组件，用于将多个数据占比情况使用占比图进行展示。",
        "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "DataPanel(options: DataPanelOptions)",
                "params": {
                    "options": {
                        "type": "DataPanelOptions",
                        "required": true,
                        "description": "数据面板的配置选项。"
                    }
                }
            }
        ],
        "attributes": {
            "values": {
                "description": "数据值列表，最多包含9个数据，大于9个数据则取前9个数据。若数据值小于0则置为0。",
                "params": {
                    "values": {
                        "type": "number[]",
                        "required": true,
                        "description": "数据值列表。"
                    }
                }
            },
            "max": {
                "description": "数据的最大值。max大于0，表示数据的最大值；max小于等于0，max等于value数组各项的和，按比例显示。",
                "params": {
                    "max": {
                        "type": "number",
                        "required": false,
                        "description": "数据的最大值。",
                        "default": 100
                    }
                }
            },
            "type": {
                "description": "数据面板的类型（不支持动态修改）。",
                "params": {
                    "type": {
                        "type": [
                            "DataPanelType.Line",
                            "DataPanelType.Circle"
                        ],
                        "required": false,
                        "description": "数据面板的类型。",
                        "default": "DataPanelType.Circle"
                    }
                }
            },
            "closeEffect": {
                "description": "设置关闭数据占比图表旋转动效和投影效果。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "关闭数据占比图表旋转动效和投影效果。",
                        "default": false
                    }
                }
            },
            "valueColors": {
                "description": "设置各数据段颜色。",
                "params": {
                    "value": {
                        "type": [
                            "ResourceColor",
                            "LinearGradient"
                        ],
                        "required": true,
                        "description": "各数据段颜色。"
                    }
                }
            },
            "trackBackgroundColor": {
                "description": "设置底板颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "底板颜色。",
                        "default": "#08182431"
                    }
                }
            },
            "strokeWidth": {
                "description": "设置圆环粗细。数据面板的类型为DataPanelType.Line时该属性不生效。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "圆环粗细。",
                        "default": 24
                    }
                }
            },
            "trackShadow": {
                "description": "设置投影样式。",
                "params": {
                    "value": {
                        "type": "DataPanelShadowOptions",
                        "required": true,
                        "description": "投影样式。"
                    }
                }
            },
            "contentModifier": {
                "description": "定制DataPanel内容区的方法。",
                "params": {
                    "modifier": {
                        "type": "ContentModifier<DataPanelConfiguration>",
                        "required": true,
                        "description": "定制DataPanel内容区的方法。"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过Column和Row布局实现了一个数据面板展示界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个数据面板和相关文本信息。数据面板以圆形和线条形式展示数据，文本信息包括数值和描述。\n\n布局属性：\n- 整体布局使用Column组件，宽度为100%，顶部边距为5vp。\n- 内部包含两个Row组件，第一个Row组件包含两个Stack组件，每个Stack组件内嵌一个圆形DataPanel和相关文本信息。第二个Row组件包含一个线条DataPanel。\n- 每个Stack组件的宽度为168vp，高度为168vp，右侧边距为44vp。\n- 线条DataPanel的宽度为300vp，高度为20vp。\n\n组件的样式和外观：\n- 文本使用Text组件，字体大小、颜色、行高、字体粗细和透明度等属性根据不同文本内容进行设置。\n- 圆形DataPanel的背景颜色为透明，线条DataPanel的背景颜色为透明。\n- 文本的颜色为#182431，透明度为0.6。\n\n组件的排列和嵌套关系：\n- 整体布局使用Column组件，垂直排列。\n- 内部使用Row组件，水平排列。\n- Stack组件用于将DataPanel和文本信息叠加在一起。\n\n组件的功能和交互：\n- DataPanel组件用于展示数据，支持圆形和线条两种类型。\n- 文本信息用于描述数据面板中的数值和相关信息。",
                "code": "@Entry\n@Component\nstruct DataPanelExample {\n  public valueArr: number[] = [10, 10, 10, 10, 10, 10, 10, 10, 10]\n\n  build() {\n    Column({ space: 5 }) { // 使用Column布局，设置组件间距为5vp\n      Row() { // 使用Row布局，水平排列\n        Stack() { // 使用Stack布局，将DataPanel和文本信息叠加在一起\n          DataPanel({ values: [30], max: 100, type: DataPanelType.Circle }) // 创建一个圆形DataPanel，最大值为100，类型为圆形\n            .width(168) // 设置宽度为168vp\n            .height(168) // 设置高度为168vp\n          Column() { // 使用Column布局，垂直排列\n            Text('30') // 显示数值30\n              .fontSize(35) // 设置字体大小为35vp\n              .fontColor('#182431') // 设置字体颜色为#182431\n            Text('1.0.0') // 显示版本号1.0.0\n              .fontSize(9.33) // 设置字体大小为9.33vp\n              .lineHeight(12.83) // 设置行高为12.83vp\n              .fontWeight(500) // 设置字体粗细为500\n              .opacity(0.6) // 设置透明度为0.6\n          }\n          Text('%') // 显示百分号\n            .fontSize(9.33) // 设置字体大小为9.33vp\n            .lineHeight(12.83) // 设置行高为12.83vp\n            .fontWeight(500) // 设置字体粗细为500\n            .opacity(0.6) // 设置透明度为0.6\n            .position({ x: 104.42, y: 78.17 }) // 设置位置为(104.42, 78.17)\n        }.margin({ right: 44 }) // 设置右侧边距为44vp\n\n        Stack() { // 使用Stack布局，将DataPanel和文本信息叠加在一起\n          DataPanel({ values: [50, 12, 8, 5], max: 100, type: DataPanelType.Circle }) // 创建一个圆形DataPanel，最大值为100，类型为圆形\n            .width(168) // 设置宽度为168vp\n            .height(168) // 设置高度为168vp\n          Column() { // 使用Column布局，垂直排列\n            Text('75') // 显示数值75\n              .fontSize(35) // 设置字体大小为35vp\n              .fontColor('#182431') // 设置字体颜色为#182431\n            Text('已使用98GB/128GB') // 显示已使用空间信息\n              .fontSize(8.17) // 设置字体大小为8.17vp\n              .lineHeight(11.08) // 设置行高为11.08vp\n              .fontWeight(500) // 设置字体粗细为500\n              .opacity(0.6) // 设置透明度为0.6\n          }\n          Text('%') // 显示百分号\n            .fontSize(9.33) // 设置字体大小为9.33vp\n            .lineHeight(12.83) // 设置行高为12.83vp\n            .fontWeight(500) // 设置字体粗细为500\n            .opacity(0.6) // 设置透明度为0.6\n            .position({ x: 104.42, y: 78.17 }) // 设置位置为(104.42, 78.17)\n        }\n      }.margin({ bottom: 59 }) // 设置底部边距为59vp\n\n      DataPanel({ values: this.valueArr, max: 100, type: DataPanelType.Line }) // 创建一个线条DataPanel，最大值为100，类型为线条\n        .width(300) // 设置宽度为300vp\n        .height(20) // 设置高度为20vp\n    }.width('100%').margin({ top: 5 }) // 设置整体布局宽度为100%，顶部边距为5vp\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个展示线性渐变数据面板的界面。布局宽度占据整个屏幕，内边距为顶部5vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和数据面板。\n标题部分使用Text组件展示文字“LinearGradient”，字体大小为9vp，字体颜色为0xCCCCCC，文本对齐方式为左对齐，宽度占据100%，外边距为顶部20vp、左侧20vp。\n数据面板部分使用DataPanel组件展示一组数值（values1），最大值为100，类型为圆形（DataPanelType.Circle）。数据面板的宽度为300vp，高度为300vp，使用valueColors属性设置渐变颜色数组，使用trackShadow属性设置阴影效果，包括阴影半径、阴影颜色数组、阴影偏移量X和Y。数据面板的描边宽度为30vp，背景颜色为bgColor。\n整个布局通过Column布局保证标题和数据面板在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct LinearGradientDataPanelExample {\n  // 定义一组数值，用于展示在数据面板中\n  public values1: number[] = [20, 20, 20, 20]\n  \n  // 定义第一个线性渐变颜色，从#65EEC9A3到#FFEF629F\n  public color1: LinearGradient = new LinearGradient([{ color: \"#65EEC9A3\", offset: 0 }, { color: \"#FFEF629F\", offset: 1 }])\n  \n  // 定义第二个线性渐变颜色，从#FF67F9D4到#FFFF9554\n  public color2: LinearGradient = new LinearGradient([{ color: \"#FF67F9D4\", offset: 0 }, { color: \"#FFFF9554\", offset: 1 }])\n  \n  // 定义第一个阴影的线性渐变颜色，从#65EEC9A3到#65EF629F\n  public colorShadow1: LinearGradient = new LinearGradient([{ color: \"#65EEC9A3\", offset: 0 }, { color: \"#65EF629F\", offset: 1 }])\n  \n  // 定义第二个阴影的线性渐变颜色，从#65e26709到#65efbd08\n  public colorShadow2: LinearGradient = new LinearGradient([{ color: \"#65e26709\", offset: 0 }, { color: \"#65efbd08\", offset: 1 }])\n  \n  // 定义第三个阴影的线性渐变颜色，从#6572B513到#6508efa6\n  public colorShadow3: LinearGradient = new LinearGradient([{ color: \"#6572B513\", offset: 0 }, { color: \"#6508efa6\", offset: 1 }])\n  \n  // 定义第四个阴影的线性渐变颜色，从#65ed08f5到#65ef0849\n  public colorShadow4: LinearGradient = new LinearGradient([{ color: \"#65ed08f5\", offset: 0 }, { color: \"#65ef0849\", offset: 1 }])\n  \n  // 定义一个状态变量，用于存储颜色值，初始值为#00FF00\n  @State color3: string = '#00FF00'\n  \n  // 定义一个状态变量，用于存储颜色值，初始值为#20FF0000\n  @State color4: string = '#20FF0000'\n  \n  // 定义一个状态变量，用于存储背景颜色值，初始值为#08182431\n  @State bgColor: string = '#08182431'\n  \n  // 定义一个状态变量，用于存储阴影偏移量X，初始值为15\n  @State offsetX: number = 15\n  \n  // 定义一个状态变量，用于存储阴影偏移量Y，初始值为15\n  @State offsetY: number = 15\n  \n  // 定义一个状态变量，用于存储阴影半径，初始值为5\n  @State radius: number = 5\n  \n  // 定义一个状态变量，用于存储颜色数组，包含两个线性渐变颜色和两个固定颜色\n  @State colorArray: Array<LinearGradient | ResourceColor> = [this.color1, this.color2, this.color3, this.color4]\n  \n  // 定义一个状态变量，用于存储阴影颜色数组，包含四个线性渐变颜色\n  @State shadowColorArray: Array<LinearGradient | ResourceColor> = [this.colorShadow1, this.colorShadow2, this.colorShadow3, this.colorShadow4]\n\n  build() {\n    Column({ space: 5 }) {\n      // 使用Text组件展示标题文字“LinearGradient”\n      Text('LinearGradient')\n        .fontSize(9) // 设置字体大小为9vp\n        .fontColor(0xCCCCCC) // 设置字体颜色为0xCCCCCC\n        .textAlign(TextAlign.Start) // 设置文本对齐方式为左对齐\n        .width('100%') // 设置宽度占据100%\n        .margin({ top: 20, left: 20 }) // 设置外边距为顶部20vp、左侧20vp\n      \n      // 使用DataPanel组件展示数据面板\n      DataPanel({ values: this.values1, max: 100, type: DataPanelType.Circle })\n        .width(300) // 设置宽度为300vp\n        .height(300) // 设置高度为300vp\n        .valueColors(this.colorArray) // 设置数据面板的渐变颜色数组\n        .trackShadow({\n          radius: this.radius, // 设置阴影半径\n          colors: this.shadowColorArray, // 设置阴影颜色数组\n          offsetX: this.offsetX, // 设置阴影偏移量X\n          offsetY: this.offsetY // 设置阴影偏移量Y\n        })\n        .strokeWidth(30) // 设置描边宽度为30vp\n        .trackBackgroundColor(this.bgColor) // 设置背景颜色\n    }\n    .width('100%') // 设置Column的宽度占据100%\n    .margin({ top: 5 }) // 设置Column的外边距为顶部5vp\n  }\n}"
            },
            {
                "description": "该组件实现了一个数据面板（DataPanel）的展示界面。数据面板通过垂直布局（Column）组织内容，包含多个子项（ChildItem），每个子项代表一个数据值。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为三个主要部分：数据值展示区、分隔线和数据统计信息展示区。\n\n数据值展示区通过ForEach循环遍历配置中的数据值数组（config.values），并为每个数据值生成一个ChildItem组件。每个ChildItem组件包含一个矩形条（Rect）和一个文本标签（Text），矩形条的高度和颜色根据数据值和最大值（config.maxValue）动态计算，文本标签显示数据值。\n\n分隔线部分通过Line组件绘制一条水平线，宽度为100%，颜色为深灰色（#ff373737），用于分隔数据值展示区和数据统计信息展示区。\n\n数据统计信息展示区通过Row布局展示两个文本标签，分别显示数据值数组的长度和最大值。文本标签的排列方式为水平排列，对齐方式为左对齐。\n\n整个布局通过Column布局保证内容在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Builder\nfunction buildDataPanel(config: DataPanelConfiguration) {\n  Column() {\n    // 数据值展示区\n    Column() {\n      ForEach(config.values, (item: number, index: number) => {\n        ChildItem({ item: item, index: index, max: config.maxValue })\n      }, (item: string) => item)\n    }.padding(10) // 内边距为10vp\n\n    // 分隔线\n    Column() {\n      Line().width(\"100%\").backgroundColor(\"#ff373737\").margin({ bottom: 5 })\n    }.padding({ left: 20, right: 20 }) // 左右内边距为20vp\n\n    // 数据统计信息展示区\n    Row() {\n      Text('Length=' + config.values.length + '    ').margin({ left: 10 }).align(Alignment.Start)\n      Text('Max=' + config.maxValue).margin({ left: 10 }).align(Alignment.Start)\n    }\n  }\n}\n\n/*\nDataPanelBuilder类实现了ContentModifier接口，用于将buildDataPanel函数封装为一个可复用的内容构建器。通过applyContent方法返回一个WrappedBuilder，该构建器可以接收DataPanelConfiguration配置对象，并生成对应的数据面板内容。\n*/\n\nclass DataPanelBuilder implements ContentModifier<DataPanelConfiguration> {\n  constructor() {\n  }\n  applyContent(): WrappedBuilder<[DataPanelConfiguration]> {\n    return wrapBuilder(buildDataPanel)\n  }\n}\n\n/*\nIndex组件是应用的入口组件，通过Column布局组织内容。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个标题（Text）和一个数据面板（DataPanel）。\n\n标题部分通过Text组件显示“Data panel”，内边距为顶部12vp。\n\n数据面板部分通过DataPanel组件展示一组数据值（values）和最大值（max），类型为圆形（DataPanelType.Circle）。数据面板的宽度为400vp，高度为260vp，最大宽度为100%，内边距为顶部10vp。数据面板的内容通过DataPanelBuilder构建器生成。\n\n整个布局通过Column布局保证内容在垂直方向上有序排列，确保界面整洁美观。\n*/\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column() {\n      Text(\"Data panel\").margin({ top: 12 }) // 标题，内边距为顶部12vp\n      Row() {\n        DataPanel({ values: [12.3, 21.1, 13.4, 35.2, 26.0, 32.0], max: 140, type: DataPanelType.Circle })\n          .width(400).height(260) // 数据面板的宽度为400vp，高度为260vp\n          .constraintSize({ maxWidth: \"100%\" }) // 最大宽度为100%\n          .padding({ top: 10 }) // 内边距为顶部10vp\n          .contentModifier(new DataPanelBuilder()) // 使用DataPanelBuilder构建器生成内容\n      }.margin(15).backgroundColor(\"#fff5f5f5\") // 外边距为15vp，背景颜色为浅灰色（#fff5f5f5）\n    }\n  }\n}\n\n/*\nChildItem组件是一个自定义组件，用于展示单个数据值。组件通过RelativeContainer布局组织内容，包含一个矩形条（Rect）和一个文本标签（Text）。\n\n矩形条的高度根据数据值和最大值动态计算，宽度为数据值乘以600除以最大值，颜色从预定义的颜色数组（colorArray）中选择。矩形条的圆角半径为5vp，对齐方式为左对齐。\n\n文本标签显示数据值，字体大小为17vp。\n\n整个布局通过RelativeContainer布局保证内容在垂直方向上有序排列，确保界面整洁美观。\n*/\n\n@Component\nstruct ChildItem {\n  @Prop item: number; // 数据值\n  @Prop index: number; // 数据值的索引\n  @Prop max: number; // 最大值\n  public color1: string = \"#65ff00dd\" // 颜色1\n  public color2: string = \"#6500ff99\" // 颜色2\n  public color3: string = \"#65ffe600\" // 颜色3\n  public color4: string = \"#6595ff00\" // 颜色4\n  public color5: string = \"#65000dff\" // 颜色5\n  public color6: string = \"#650099ff\" // 颜色6\n  public colorArray: Array<string> = [this.color1, this.color2, this.color3, this.color4, this.color5, this.color6] // 颜色数组\n\n  build() {\n    RelativeContainer() {\n      Row() {\n        Rect().height(25).width(this.item * 600 / this.max).foregroundColor(this.colorArray[this.index]).radius(5) // 矩形条的高度为25vp，宽度为数据值乘以600除以最大值，颜色从颜色数组中选择，圆角半径为5vp\n          .align(Alignment.Start) // 对齐方式为左对齐\n        Text(\" \" + this.item) // 文本标签显示数据值\n          .fontSize(17) // 字体大小为17vp\n      }\n    }.height(28) // 高度为28vp\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "ExceptionPrompt": {
        "description": "异常提示，适用于有异常需要提示异常内容的情况。",
        "details": "该组件从API Version 11开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "ExceptionPrompt({ options: PromptOptions, onTipClick?: () => void, onActionTextClick?: () => void })",
                "params": {
                    "options": {
                        "type": "PromptOptions",
                        "required": true,
                        "description": "指定当前异常提示的配置信息。"
                    },
                    "onTipClick": {
                        "type": "() => void",
                        "required": false,
                        "description": "点击左侧提示文本的回调函数。"
                    },
                    "onActionTextClick": {
                        "type": "() => void",
                        "required": false,
                        "description": "点击右侧图标按钮的回调函数。"
                    }
                }
            }
        ],
        "attributes": {
            "options": {
                "description": "指定当前异常提示的配置信息。",
                "params": {
                    "icon": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "指定当前异常提示的异常图标式样。"
                    },
                    "tip": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "指定当前异常提示的文字提示内容。"
                    },
                    "marginType": {
                        "type": "MarginType",
                        "required": true,
                        "description": "指定当前异常提示的边距样式。"
                    },
                    "actionText": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "指定当前异常提示的右侧图标按钮的文字内容。"
                    },
                    "marginTop": {
                        "type": "Dimension",
                        "required": true,
                        "description": "指定当前异常提示的距离顶部的位置。"
                    },
                    "isShown": {
                        "type": "boolean",
                        "required": false,
                        "description": "指定当前异常提示的显隐状态。",
                        "default": "true"
                    }
                }
            }
        },
        "events": {
            "onTipClick": {
                "description": "点击左侧提示文本的回调函数。",
                "params": {}
            },
            "onActionTextClick": {
                "description": "点击右侧图标按钮的回调函数。",
                "params": {}
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过Column布局实现了一个异常提示的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个ExceptionPrompt组件，用于展示异常提示信息。\nExceptionPrompt组件的样式包括图标、提示文本、操作按钮文本、边距类型、顶部边距和是否显示等属性。图标和提示文本用于展示异常信息，操作按钮文本用于提供用户操作选项。边距类型和顶部边距用于控制组件的布局位置，是否显示属性用于控制组件的可见性。\n组件的功能包括点击提示文本和操作按钮文本的事件处理，用户可以通过点击操作按钮触发相应操作。\n整个布局通过Column布局保证ExceptionPrompt组件在垂直方向上居中显示，确保界面整洁美观。",
                "code": "import { ExceptionPrompt, PromptOptions, MarginType } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct Index {\n  // 定义PromptOptions类型的状态变量options，用于配置ExceptionPrompt组件的属性\n  @State options: PromptOptions = {\n    icon: $r('sys.media.ohos_ic_public_fail'), // 设置异常提示图标，资源名为'sys.media.ohos_ic_public_fail'\n    tip: '异常提示', // 设置异常提示文本为'异常提示'\n    marginType: MarginType.DEFAULT_MARGIN, // 设置边距类型为默认边距\n    actionText: '设置网络', // 设置操作按钮文本为'设置网络'\n    marginTop: 80, // 设置顶部边距为80vp\n    isShown: true // 设置组件是否显示为true\n  }\n\n  build() {\n    Column() {\n      ExceptionPrompt({\n        options: this.options, // 传递配置好的PromptOptions对象给ExceptionPrompt组件\n        onTipClick: () => {\n          // 点击提示文本时的回调函数，此处为空函数\n        },\n        onActionTextClick: () => {\n          // 点击操作按钮文本时的回调函数，此处为空函数\n        },\n      })\n    }\n  }\n}"
            },
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用自定义对话框（CustomDialog）和异常提示组件（ExceptionPrompt）。布局主要由一个按钮和一个自定义对话框组成。按钮用于触发对话框的显示，对话框内部包含一个异常提示组件、一个文本输入框和两个按钮（取消和确认）。\n\n布局属性：\n- 按钮的宽度为30%，高度为自适应，顶部边距为420vp，zIndex为999，确保按钮在其他组件之上。\n- 对话框的布局宽度为100%，高度为100%，内部组件通过Column和Flex布局进行排列。\n\n组件的样式和外观：\n- 按钮的背景颜色为白色（0xffffff），字体颜色为黑色（Color.Black）。\n- 确认按钮的字体颜色为红色（Color.Red）。\n- 文本输入框的高度为60vp，宽度为90%，顶部边距为70vp。\n\n组件的排列和嵌套关系：\n- 对话框内部通过Column布局，垂直排列异常提示组件、文本输入框和按钮组。\n- 按钮组通过Flex布局，水平排列取消和确认按钮，按钮之间的间距均匀分布，对齐方式为SpaceAround。\n\n组件的功能和交互：\n- 点击按钮会触发对话框的显示。\n- 文本输入框支持输入文本，输入内容会实时更新到绑定的状态变量中。\n- 点击取消按钮会关闭对话框并调用取消回调函数。\n- 点击确认按钮会将文本输入框的内容更新到绑定的状态变量中，并关闭对话框，调用确认回调函数。",
                "code": "import { ExceptionPrompt, PromptOptions, MarginType } from '@kit.ArkUI'\n\n@CustomDialog\nstruct CustomDialogExample {\n  @Link textValue: string // 绑定文本输入框的值\n  @Link inputValue: string // 绑定确认按钮点击后的输入值\n  @State options: PromptOptions = {\n    icon: $r('app.media.ic_public_fail'), // 异常提示图标\n    tip: '异常提示！', // 异常提示文本\n    marginType: MarginType.DEFAULT_MARGIN, // 默认边距类型\n    actionText: '设置', // 操作按钮文本\n    marginTop: 5, // 顶部边距\n    isShown: true // 是否显示\n  }\n  cancel: () => void = () => {} // 取消按钮回调函数\n  confirm: () => void = () => {} // 确认按钮回调函数\n  controller: CustomDialogController // 对话框控制器\n\n  build() {\n    Column() {\n      ExceptionPrompt({\n        options: this.options, // 异常提示组件的配置选项\n      })\n      TextInput({ placeholder: '', text: this.textValue }) // 文本输入框\n        .margin({top:70}) // 顶部边距\n        .height(60) // 高度\n        .width('90%') // 宽度\n        .onChange((value: string) => { // 输入框内容变化时的回调\n          this.textValue = value // 更新文本输入框的值\n        })\n      Text('Whether to change a text?') // 提示文本\n        .fontSize(16) // 字体大小\n        .margin({ bottom: 10 }) // 底部边距\n      Flex({ justifyContent: FlexAlign.SpaceAround }) { // 按钮组布局\n        Button('cancel') // 取消按钮\n          .onClick(() => { // 点击事件\n            this.controller.close() // 关闭对话框\n            this.cancel() // 调用取消回调函数\n          })\n          .backgroundColor(0xffffff) // 背景颜色\n          .fontColor(Color.Black) // 字体颜色\n        Button('confirm') // 确认按钮\n          .onClick(() => { // 点击事件\n            this.inputValue = this.textValue // 更新输入值\n            this.controller.close() // 关闭对话框\n            this.confirm() // 调用确认回调函数\n          })\n          .backgroundColor(0xffffff) // 背景颜色\n          .fontColor(Color.Red) // 字体颜色\n      }\n      .margin({ bottom: 10 }) // 底部边距\n    }\n  }\n}\n\n@Entry\n@Component\nstruct Index1 {\n  @State ButtonText: string = '' // 按钮文本\n  @State MAP_HEIGHT: string = '30%' // 地图高度\n  @State duration: number = 2500 // 动画持续时间\n  @State tips: string = '' // 提示文本\n  @State actionText: string = '' // 操作按钮文本\n  controller: TextInputController = new TextInputController() // 文本输入控制器\n  cancel: () => void = () => {} // 取消按钮回调函数\n  confirm: () => void = () => {} // 确认按钮回调函数\n  @State options: PromptOptions = {\n    icon: $r('app.media.ic_public_fail'), // 异常提示图标\n    tip: '', // 异常提示文本\n    marginType: MarginType.DEFAULT_MARGIN, // 默认边距类型\n    actionText: '', // 操作按钮文本\n    marginTop: 80, // 顶部边距\n    isShown: true // 是否显示\n  }\n  @State textValue: string = '' // 文本输入框的值\n  @State inputValue: string = 'click me' // 确认按钮点击后的输入值\n  dialogController: CustomDialogController | undefined = new CustomDialogController({\n    builder: CustomDialogExample({\n      cancel: this.onCancel, // 取消按钮回调函数\n      confirm: this.onAccept, // 确认按钮回调函数\n      textValue: $textValue, // 绑定文本输入框的值\n      inputValue: $inputValue // 绑定确认按钮点击后的输入值\n    }),\n    cancel: this.existApp, // 取消对话框的回调函数\n    autoCancel: true, // 是否自动取消\n    alignment: DialogAlignment.Bottom, // 对话框对齐方式\n    offset: { dx: 0, dy: -20 }, // 对话框偏移量\n    gridCount: 4, // 网格数量\n    customStyle: false // 是否自定义样式\n  })\n\n  aboutToDisappear() {\n    this.dialogController = undefined // 页面消失时清空对话框控制器\n  }\n\n  onCancel() {\n    console.info('Callback when the first button is clicked') // 取消按钮点击回调\n  }\n\n  onAccept() {\n    console.info('Callback when the second button is clicked') // 确认按钮点击回调\n  }\n\n  existApp() {\n    console.info('Click the callback in the blank area') // 空白区域点击回调\n  }\n\n  build() {\n    Column() {\n      Button('Click Me') // 按钮\n        .width('30%') // 宽度\n        .margin({top:420}) // 顶部边距\n        .zIndex(999) // z轴索引\n        .onClick(()=>{ // 点击事件\n          if (this.dialogController != undefined) {\n            this.dialogController.open() // 打开对话框\n          }\n        })\n    }\n    .height('100%') // 高度\n    .width('100%') // 宽度\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Gauge": {
        "description": "数据量规图表组件，用于将数据展示为环形图表。",
        "details": "可以包含单个子组件。建议使用文本组件构建当前数值文本和辅助文本。若子组件宽高为百分比形式，则基准范围为以外圆环做为内切圆的矩形。",
        "interfaces": [
            {
                "description": "Gauge(options:{value: number, min?: number, max?: number})",
                "params": {
                    "options": {
                        "type": {
                            "value": "number",
                            "min": "number",
                            "max": "number"
                        },
                        "required": true,
                        "description": "创建数据量规图表组件。"
                    }
                }
            }
        ],
        "attributes": {
            "value": {
                "description": "设置量规图的数据值。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "量规图的数据值，可用于动态修改量规图的数据值。",
                        "default": 0
                    }
                }
            },
            "startAngle": {
                "description": "设置起始角度位置。",
                "params": {
                    "angle": {
                        "type": "number",
                        "required": true,
                        "description": "起始角度位置，时钟0点为0度，顺时针方向为正角度。",
                        "default": 0
                    }
                }
            },
            "endAngle": {
                "description": "设置终止角度位置。",
                "params": {
                    "angle": {
                        "type": "number",
                        "required": true,
                        "description": "终止角度位置，时钟0点为0度，顺时针方向为正角度。",
                        "default": 360
                    }
                }
            },
            "colors": {
                "description": "设置量规图的颜色。",
                "params": {
                    "colors": {
                        "type": [
                            "ResourceColor",
                            "LinearGradient",
                            {
                                "ResourceColor": "number",
                                "LinearGradient": "number"
                            }
                        ],
                        "required": true,
                        "description": "量规图的颜色。"
                    }
                }
            },
            "strokeWidth": {
                "description": "设置环形量规图的环形厚度。",
                "params": {
                    "length": {
                        "type": "Length",
                        "required": true,
                        "description": "环形量规图的环形厚度。",
                        "default": 4
                    }
                }
            },
            "description": {
                "description": "设置说明内容。",
                "params": {
                    "value": {
                        "type": "CustomBuilder",
                        "required": true,
                        "description": "说明内容。"
                    }
                }
            },
            "trackShadow": {
                "description": "设置阴影样式。",
                "params": {
                    "value": {
                        "type": "GaugeShadowOptions",
                        "required": true,
                        "description": "阴影样式。"
                    }
                }
            },
            "indicator": {
                "description": "设置指针样式。",
                "params": {
                    "value": {
                        "type": "GaugeIndicatorOptions",
                        "required": true,
                        "description": "指针样式。"
                    }
                }
            },
            "privacySensitive": {
                "description": "设置隐私敏感。",
                "params": {
                    "isPrivacySensitiveMode": {
                        "type": "Optional<boolean>",
                        "required": true,
                        "description": "设置隐私敏感，隐私模式下Gauge指针指向0位置，最大值最小值文本将被遮罩，量程显示灰色或者底色。"
                    }
                }
            },
            "contentModifier": {
                "description": "定制Slider内容区的方法。",
                "params": {
                    "modifier": {
                        "type": "ContentModifier<GaugeConfiguration>",
                        "required": true,
                        "description": "定制内容区的方法。"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中配置隐私隐藏功能，并使用Gauge组件展示数据。布局采用Scroll和Column嵌套，确保内容在垂直方向上可滚动，并且各组件之间有适当的间距。Gauge组件用于展示一个从1到100的数值，当前值为50。Gauge组件的外观通过设置起始角度、结束角度、颜色、宽度、高度、描边宽度、阴影等属性进行定制。Text组件嵌套在Gauge组件内部，用于显示具体的数值，并通过设置字体大小、颜色、对齐方式、溢出处理等属性进行样式定制。整个布局通过Row组件进行水平排列，确保Gauge组件在水平方向上居中显示。隐私隐藏功能通过设置privacySensitive属性为true来实现，确保在需要时隐藏敏感数据。",
                "code": "@Entry\n@Component\nstruct GaugeExample {\n  build() {\n    Scroll() { // 创建一个可滚动的容器\n      Column({ space: 15 }) { // 创建一个垂直布局的容器，组件之间间距为15vp\n        Row() { // 创建一个水平布局的容器\n          Gauge({ value: 50, min: 1, max: 100 }) { // 创建一个Gauge组件，当前值为50，最小值为1，最大值为100\n            Column() { // 创建一个垂直布局的容器\n              Text('60') // 创建一个Text组件，显示数值60\n                .maxFontSize(\"180sp\") // 设置字体最大尺寸为180sp\n                .minFontSize(\"160.0vp\") // 设置字体最小尺寸为160vp\n                .fontWeight(FontWeight.Medium) // 设置字体粗细为中等\n                .fontColor(\"#ff182431\") // 设置字体颜色为#ff182431\n                .width('40%') // 设置Text组件的宽度为父容器的40%\n                .height('30%') // 设置Text组件的高度为父容器的30%\n                .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n                .margin({ top: '22.2%' }) // 设置顶部外边距为父容器的22.2%\n                .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n                .maxLines(1) // 设置最大显示行数为1行\n            }.width('100%').height('100%') // 设置Column容器的宽度和高度为父容器的100%\n          }\n          .startAngle(225) // 设置Gauge组件的起始角度为225度\n          .endAngle(135) // 设置Gauge组件的结束角度为135度\n          .colors(Color.Red) // 设置Gauge组件的颜色为红色\n          .width('80%') // 设置Gauge组件的宽度为父容器的80%\n          .height('80%') // 设置Gauge组件的高度为父容器的80%\n          .strokeWidth(18) // 设置Gauge组件的描边宽度为18vp\n          .trackShadow({ radius: 7, offsetX: 7, offsetY: 7 }) // 设置Gauge组件的阴影效果，半径为7vp，偏移量为(7vp, 7vp)\n          .padding(18) // 设置Gauge组件的内边距为18vp\n          .privacySensitive(true) // 设置Gauge组件为隐私敏感，启用隐私隐藏功能\n        }\n      }\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个展示当前数值的仪表盘界面。布局宽度占据整个屏幕，高度设为 100%，内边距为顶部 40vp。组件的垂直方向上被分为一个部分，包含一个 Gauge 组件和一个 Text 组件。\nGauge 组件用于展示当前数值，其宽度为 80%，高度为 80%，颜色为红色，指示器为空，线条宽度为 18vp，轨道阴影半径为 7vp，偏移量为 7vp。Gauge 组件的开始角度为 225 度，结束角度为 135 度，表示一个半圆形的仪表盘。\nText 组件用于显示当前数值，其字体大小范围为 30.0vp 到 60sp，字体颜色为 #ff182431，字体粗细为中等，宽度为 62%，文本对齐方式为居中，文本溢出时显示省略号，最大行数为 1。Text 组件的顶部边距为 35%，确保其在 Gauge 组件的中心位置显示。\n整个布局通过 Column 布局保证 Gauge 和 Text 组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Gauge7 {\n  build() {\n    Column() {\n      Gauge({ value: 50, min: 1, max: 100 }) { // 创建一个 Gauge 组件，当前值为 50，最小值为 1，最大值为 100\n        Column() {\n          Text('50') // 创建一个 Text 组件，显示当前值 50\n            .maxFontSize('60sp') // 设置 Text 组件的最大字体大小为 60sp\n            .minFontSize('30.0vp') // 设置 Text 组件的最小字体大小为 30.0vp\n            .fontWeight(FontWeight.Medium) // 设置 Text 组件的字体粗细为中等\n            .fontColor(\"#ff182431\") // 设置 Text 组件的字体颜色为 #ff182431\n            .width('62%') // 设置 Text 组件的宽度为 62%\n            .textAlign(TextAlign.Center) // 设置 Text 组件的文本对齐方式为居中\n            .margin({ top: '35%' }) // 设置 Text 组件的顶部边距为 35%\n            .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置 Text 组件的文本溢出时显示省略号\n            .maxLines(1) // 设置 Text 组件的最大行数为 1\n        }.width('100%').height('100%') // 设置 Column 组件的宽度和高度为 100%\n      }\n      .startAngle(225) // 设置 Gauge 组件的开始角度为 225 度\n      .endAngle(135) // 设置 Gauge 组件的结束角度为 135 度\n      .colors(Color.Red) // 设置 Gauge 组件的颜色为红色\n      .width('80%') // 设置 Gauge 组件的宽度为 80%\n      .height('80%') // 设置 Gauge 组件的高度为 80%\n      .indicator(null) // 设置 Gauge 组件的指示器为空\n      .strokeWidth(18) // 设置 Gauge 组件的线条宽度为 18vp\n      .trackShadow({ radius: 7, offsetX: 7, offsetY: 7 }) // 设置 Gauge 组件的轨道阴影半径为 7vp，偏移量为 7vp\n      .padding(18) // 设置 Gauge 组件的内边距为 18vp\n    }.margin({ top: 40 }).width('100%').height('100%') // 设置 Column 组件的顶部边距为 40vp，宽度和高度为 100%\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个带有图标和数值的仪表盘界面。布局宽度占据整个屏幕，高度设为 100%，内边距为顶部 40vp。组件的垂直方向上被分为两个主要部分：一个 Gauge 组件和一个 Image 组件。\n\nGauge 组件用于展示当前数值，其宽度为 80%，高度为 80%，内边距为 18vp。Gauge 组件的样式包括颜色、起始角度、结束角度、描边宽度等属性。数值文本通过 Text 组件展示，字体颜色为 #ff182431，字体大小在 30.0vp 到 60.0vp 之间动态调整，文本对齐方式为居中对齐，最大行数为 1，文本溢出时显示省略号。\n\nImage 组件用于展示图标，宽度为 72vp，高度为 72vp。图标的资源名为 $r('sys.media.ohos_ic_public_clock')。\n\n整个布局通过 Column 布局保证 Gauge 和 Image 在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Gauge2 {\n  // 定义一个 Builder 方法，用于生成 Image 组件\n  @Builder descriptionBuilderImage() {\n    Image($r('sys.media.ohos_ic_public_clock')) // 使用系统资源中的图标\n      .width(72) // 设置图标的宽度为 72vp\n      .height(72) // 设置图标的高度为 72vp\n  }\n\n  build() {\n    Column() {\n      Gauge({ value: 50, min: 1, max: 100 }) { // 创建一个 Gauge 组件，当前值为 50，最小值为 1，最大值为 100\n        Column() {\n          Text('50') // 显示当前数值 50\n            .fontWeight(FontWeight.Medium) // 设置字体粗细为中等\n            .width('62%') // 设置文本宽度为 62%\n            .fontColor(\"#ff182431\") // 设置字体颜色为 #ff182431\n            .maxFontSize(\"60.0vp\") // 设置最大字体大小为 60.0vp\n            .minFontSize(\"30.0vp\") // 设置最小字体大小为 30.0vp\n            .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n            .margin({ top: '35%' }) // 设置顶部边距为 35%\n            .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n            .maxLines(1) // 设置最大行数为 1\n        }.width('100%').height('100%') // 设置 Column 的宽度和高度为 100%\n      }\n      .startAngle(210) // 设置 Gauge 的起始角度为 210 度\n      .endAngle(150) // 设置 Gauge 的结束角度为 150 度\n      .colors('#cca5d61d') // 设置 Gauge 的颜色为 #cca5d61d\n      .width('80%') // 设置 Gauge 的宽度为 80%\n      .height('80%') // 设置 Gauge 的高度为 80%\n      .strokeWidth(18) // 设置 Gauge 的描边宽度为 18vp\n      .description(this.descriptionBuilderImage) // 设置 Gauge 的描述为 descriptionBuilderImage 方法生成的 Image 组件\n      .padding(18) // 设置 Gauge 的内边距为 18vp\n    }.margin({ top: 40 }) // 设置 Column 的顶部边距为 40vp\n    .width('100%') // 设置 Column 的宽度为 100%\n    .height('100%') // 设置 Column 的高度为 100%\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个展示当前数值的仪表盘界面。布局宽度占据整个屏幕，高度设为 100%，内边距为顶部 40vp。组件的垂直方向上被分为一个 Gauge 组件和一个嵌套的 Text 组件。Gauge 组件用于展示当前数值的进度条，Text 组件用于显示当前数值。\n\nGauge 组件的布局宽度为 80%，高度为 80%，内边距为 18vp。Gauge 组件的进度条从 225 度开始，到 135 度结束，形成一个半圆形的进度条。进度条的颜色通过 LinearGradient 实现，从红色（#e84026）到黄色（#f7ce00）再到绿色（#64bb5c）渐变。进度条的宽度为 18vp，并带有阴影效果，阴影半径为 7vp，偏移量为 (7vp, 7vp)。\n\nText 组件的布局宽度为 40%，高度为 30%，字体大小在 60.0vp 到 80sp 之间动态调整，字体颜色为 #ff182431，字体粗细为 Medium。文本内容居中对齐，最大显示行数为 1 行，超出部分以省略号显示。文本组件的顶部外边距为 22.2%。\n\n整个布局通过 Column 布局保证 Gauge 和 Text 组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Gauge5 {\n  build() {\n    Column() {\n      Gauge({ value: 50, min: 1, max: 100 }) { // 创建一个 Gauge 组件，当前值为 50，最小值为 1，最大值为 100\n        Column() {\n          Text('50') // 创建一个 Text 组件，显示当前值 50\n            .maxFontSize(\"80sp\") // 设置 Text 组件的最大字体大小为 80sp\n            .minFontSize(\"60.0vp\") // 设置 Text 组件的最小字体大小为 60.0vp\n            .fontWeight(FontWeight.Medium) // 设置 Text 组件的字体粗细为 Medium\n            .fontColor(\"#ff182431\") // 设置 Text 组件的字体颜色为 #ff182431\n            .width('40%') // 设置 Text 组件的宽度为 40%\n            .height('30%') // 设置 Text 组件的高度为 30%\n            .textAlign(TextAlign.Center) // 设置 Text 组件的文本对齐方式为居中对齐\n            .margin({ top: '22.2%' }) // 设置 Text 组件的顶部外边距为 22.2%\n            .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置 Text 组件的文本溢出处理方式为省略号\n            .maxLines(1) // 设置 Text 组件的最大显示行数为 1 行\n        }.width('100%').height('100%') // 设置 Column 组件的宽度为 100%，高度为 100%\n      }\n      .startAngle(225) // 设置 Gauge 组件的起始角度为 225 度\n      .endAngle(135) // 设置 Gauge 组件的结束角度为 135 度\n      .colors(new LinearGradient([{ color: \"#e84026\", offset: 0 }, // 设置 Gauge 组件的颜色渐变，从红色 (#e84026) 开始\n        { color: \"#f7ce00\", offset: 0.6 }, // 到黄色 (#f7ce00)，偏移量为 0.6\n        { color: \"#64bb5c\", offset: 1 }])) // 到绿色 (#64bb5c)，偏移量为 1\n      .width('80%') // 设置 Gauge 组件的宽度为 80%\n      .height('80%') // 设置 Gauge 组件的高度为 80%\n      .strokeWidth(18) // 设置 Gauge 组件的进度条宽度为 18vp\n      .trackShadow({ radius: 7, offsetX: 7, offsetY: 7 }) // 设置 Gauge 组件的进度条阴影效果，阴影半径为 7vp，偏移量为 (7vp, 7vp)\n      .padding(18) // 设置 Gauge 组件的内边距为 18vp\n    }.margin({ top: 40 }).width('100%').height('100%') // 设置 Column 组件的顶部外边距为 40vp，宽度为 100%，高度为 100%\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个包含Gauge（仪表盘）和按钮的界面。布局宽度占据整个屏幕，内边距为20vp，外边距顶部为5vp。组件的垂直方向上被分为两个主要部分：Gauge显示部分和按钮操作部分。\n\nGauge显示部分包含一个Gauge组件，其宽度为50%，显示当前值、最小值和最大值。Gauge组件的值、最小值和最大值通过@State变量动态更新。Gauge组件的样式通过自定义的MyGaugeStyle类进行修饰，该类实现了ContentModifier接口，用于在Gauge组件上应用自定义的样式和内容。\n\n按钮操作部分包含两个按钮，分别用于增加和减少Gauge的值。按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮的功能包括点击事件，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n\n整个布局通过Column布局保证Gauge和按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Builder\nfunction buildGauge(config: GaugeConfiguration) {\n  Column({ space: 30 }) {\n    Row() {\n      Text('【ContentModifier】 value：' + JSON.stringify((config.contentModifier as MyGaugeStyle).value) +\n        '  min：' + JSON.stringify((config.contentModifier as MyGaugeStyle).min) +\n        '  max：' + JSON.stringify((config.contentModifier as MyGaugeStyle).max))\n        .fontSize(12) // 设置文本字体大小为12\n    }\n\n    Text('【Config】value：' + config.value + '  min：' + config.min + '  max：' + config.max).fontSize(12) // 设置文本字体大小为12\n    Gauge({\n      value: config.value, // 设置Gauge的当前值\n      min: config.min, // 设置Gauge的最小值\n      max: config.max // 设置Gauge的最大值\n    }).width(\"50%\") // 设置Gauge的宽度为50%\n  }\n  .width(\"100%\") // 设置Column的宽度为100%\n  .padding(20) // 设置Column的内边距为20vp\n  .margin({ top: 5 }) // 设置Column的上外边距为5vp\n  .alignItems(HorizontalAlign.Center) // 设置Column的子组件水平居中对齐\n}\n\nclass MyGaugeStyle implements ContentModifier<GaugeConfiguration> {\n  value: number = 0 // 初始化Gauge的当前值\n  min: number = 0 // 初始化Gauge的最小值\n  max: number = 0 // 初始化Gauge的最大值\n\n  constructor(value: number, min: number, max: number) {\n    this.value = value // 设置Gauge的当前值\n    this.min = min // 设置Gauge的最小值\n    this.max = max // 设置Gauge的最大值\n  }\n\n  applyContent(): WrappedBuilder<[GaugeConfiguration]> {\n    return wrapBuilder(buildGauge) // 返回一个包装后的buildGauge函数，用于应用自定义样式\n  }\n}\n\n@Entry\n@Component\nstruct refreshExample {\n  @State gaugeValue: number = 20 // 初始化Gauge的当前值为20\n  @State gaugeMin: number = 0 // 初始化Gauge的最小值为0\n  @State gaugeMax: number = 100 // 初始化Gauge的最大值为100\n\n  build() {\n    Column({ space: 20 }) {\n      Gauge({\n        value: this.gaugeValue, // 设置Gauge的当前值\n        min: this.gaugeMin, // 设置Gauge的最小值\n        max: this.gaugeMax // 设置Gauge的最大值\n      })\n        .contentModifier(new MyGaugeStyle(30, 10, 100)) // 应用自定义的MyGaugeStyle样式\n\n      Column({ space: 20 }) {\n        Row({ space: 20 }) {\n          Button('增加').onClick(() => {\n            if (this.gaugeValue < this.gaugeMax) {\n              this.gaugeValue += 1 // 增加Gauge的当前值\n            }\n          })\n          Button('减少').onClick(() => {\n            if (this.gaugeValue > this.gaugeMin) {\n              this.gaugeValue -= 1 // 减少Gauge的当前值\n            }\n          })\n        }\n      }.width('100%') // 设置Column的宽度为100%\n    }.width('100%').margin({ top: 5 }) // 设置Column的宽度为100%，上外边距为5vp\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个带有刻度盘（Gauge）的界面，刻度盘用于显示当前数值，并附带辅助文本。布局宽度占据整个屏幕，高度设为 100%，内边距为顶部 40vp。组件的垂直方向上被分为一个 Gauge 组件和一个包含两个 Text 组件的 Column 组件。Gauge 组件的宽度为 80%，高度为 80%，刻度盘的起始角度为 225 度，结束角度为 135 度，颜色为红色，指示器为空，线条宽度为 18vp，轨道阴影半径为 7vp，偏移量为 (7vp, 7vp)，内边距为 18vp。\n\nGauge 组件内部嵌套了一个 Column 组件，用于显示当前数值和辅助文本。当前数值的 Text 组件字体大小范围为 30.0vp 到 60sp，字体颜色为 #ff182431，宽度为 62%，文本对齐方式为居中对齐，上边距为 35%，文本溢出时显示省略号，最大行数为 1。辅助文本的 Text 组件字体大小范围为 10.0vp 到 16sp，字体颜色为系统颜色 $r('sys.color.ohos_id_color_text_secondary')，宽度为 67.4%，高度为 9.5%，文本对齐方式为居中对齐。\n\n整个布局通过 Column 布局保证 Gauge 和 Text 组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Gauge6 {\n  build() {\n    Column() {\n      Gauge({ value: 50, min: 1, max: 100 }) { // 创建一个 Gauge 组件，当前值为 50，最小值为 1，最大值为 100\n        Column() {\n          Text('50') // 显示当前数值的 Text 组件\n            .maxFontSize('60sp') // 设置最大字体大小为 60sp\n            .minFontSize('30.0vp') // 设置最小字体大小为 30.0vp\n            .fontWeight(FontWeight.Medium) // 设置字体粗细为中等\n            .fontColor(\"#ff182431\") // 设置字体颜色为 #ff182431\n            .width('62%') // 设置宽度为 62%\n            .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n            .margin({ top: '35%' }) // 设置上边距为 35%\n            .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n            .maxLines(1) // 设置最大行数为 1\n          Text('辅助文本') // 显示辅助文本的 Text 组件\n            .maxFontSize('16sp') // 设置最大字体大小为 16sp\n            .minFontSize(\"10.0vp\") // 设置最小字体大小为 10.0vp\n            .fontColor($r('sys.color.ohos_id_color_text_secondary')) // 设置字体颜色为系统次要文本颜色\n            .fontWeight(FontWeight.Regular) // 设置字体粗细为常规\n            .width('67.4%') // 设置宽度为 67.4%\n            .height('9.5%') // 设置高度为 9.5%\n            .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n        }.width('100%').height('100%') // 设置 Column 组件的宽度和高度为 100%\n      }\n      .startAngle(225) // 设置 Gauge 的起始角度为 225 度\n      .endAngle(135) // 设置 Gauge 的结束角度为 135 度\n      .colors(Color.Red) // 设置 Gauge 的颜色为红色\n      .width('80%') // 设置 Gauge 的宽度为 80%\n      .height('80%') // 设置 Gauge 的高度为 80%\n      .indicator(null) // 设置 Gauge 的指示器为空\n      .strokeWidth(18) // 设置 Gauge 的线条宽度为 18vp\n      .trackShadow({ radius: 7, offsetX: 7, offsetY: 7 }) // 设置 Gauge 的轨道阴影半径为 7vp，偏移量为 (7vp, 7vp)\n      .padding(18) // 设置 Gauge 的内边距为 18vp\n    }.margin({ top: 40 }).width('100%').height('100%') // 设置 Column 组件的上边距为 40vp，宽度和高度为 100%\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个带有说明文本和当前数值的仪表盘界面。布局宽度占据整个屏幕，高度设为100%，内边距为18vp。组件的垂直方向上被分为两个部分：一个包含当前数值的仪表盘，另一个是说明文本。\n\n仪表盘部分通过Gauge组件实现，宽度为80%，高度为80%，内边距为18vp。仪表盘的样式包括渐变颜色、起始角度、结束角度、描边宽度等属性，支持不同的样式展示。仪表盘的当前数值显示在中心位置，字体颜色为深蓝色，字体大小根据屏幕大小自适应调整。\n\n说明文本部分通过Text组件实现，宽度为100%，高度为100%，字体颜色为红色，字体大小根据屏幕大小自适应调整，文本居中对齐。\n\n整个布局通过Column布局保证仪表盘和说明文本在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Gauge3 {\n  // 定义一个Builder方法，用于生成说明文本\n  @Builder descriptionBuilder() {\n    Text('说明文本')\n      .maxFontSize('30sp') // 设置最大字体大小为30sp\n      .minFontSize(\"10.0vp\") // 设置最小字体大小为10.0vp\n      .fontColor(\"#fffa2a2d\") // 设置字体颜色为红色\n      .fontWeight(FontWeight.Medium) // 设置字体粗细为中等\n      .width('100%') // 设置宽度为100%\n      .height(\"100%\") // 设置高度为100%\n      .textAlign(TextAlign.Center) // 设置文本居中对齐\n  }\n\n  build() {\n    Column() {\n      Column() {\n        Gauge({ value: 50, min: 1, max: 100 }) {\n          Column() {\n            Text('50')\n              .fontWeight(FontWeight.Medium) // 设置字体粗细为中等\n              .width('62%') // 设置宽度为62%\n              .fontColor(\"#ff182431\") // 设置字体颜色为深蓝色\n              .maxFontSize(\"60.0vp\") // 设置最大字体大小为60.0vp\n              .minFontSize(\"30.0vp\") // 设置最小字体大小为30.0vp\n              .textAlign(TextAlign.Center) // 设置文本居中对齐\n              .margin({ top: '35%' }) // 设置上边距为35%\n              .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n              .maxLines(1) // 设置最大行数为1\n          }.width('100%').height('100%') // 设置宽度为100%，高度为100%\n        }\n        .startAngle(210) // 设置仪表盘的起始角度为210度\n        .endAngle(150) // 设置仪表盘的结束角度为150度\n        .colors([\n          [new LinearGradient([{ color: \"#deb6fb\", offset: 0 }, { color: \"#ac49f5\", offset: 1 }]), 9],\n          [new LinearGradient([{ color: \"#bbb7fc\", offset: 0 }, { color: \"#564af7\", offset: 1 }]), 8],\n          [new LinearGradient([{ color: \"#f5b5c2\", offset: 0 }, { color: \"#e64566\", offset: 1 }]), 7],\n          [new LinearGradient([{ color: \"#f8c5a6\", offset: 0 }, { color: \"#ed6f21\", offset: 1 }]), 6],\n          [new LinearGradient([{ color: \"#fceb99\", offset: 0 }, { color: \"#f7ce00\", offset: 1 }]), 5],\n          [new LinearGradient([{ color: \"#dbefa5\", offset: 0 }, { color: \"#a5d61d\", offset: 1 }]), 4],\n          [new LinearGradient([{ color: \"#c1e4be\", offset: 0 }, { color: \"#64bb5c\", offset: 1 }]), 3],\n          [new LinearGradient([{ color: \"#c0ece5\", offset: 0 }, { color: \"#61cfbe\", offset: 1 }]), 2],\n          [new LinearGradient([{ color: \"#b5e0f4\", offset: 0 }, { color: \"#46b1e3\", offset: 1 }]), 1]\n        ]) // 设置仪表盘的渐变颜色\n        .width('80%') // 设置宽度为80%\n        .height('80%') // 设置高度为80%\n        .strokeWidth(18) // 设置描边宽度为18\n        .description(this.descriptionBuilder) // 设置仪表盘的说明文本\n        .trackShadow({ radius: 7, offsetX: 7, offsetY: 7 }) // 设置仪表盘的阴影效果\n        .padding(18) // 设置内边距为18vp\n      }.margin({ top: 40 }).width('100%').height('100%') // 设置上边距为40vp，宽度为100%，高度为100%\n    }\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个带有刻度盘（Gauge）和辅助文本的界面。布局宽度占据整个屏幕，高度设为100%，内边距为顶部40vp。组件的垂直方向上被分为一个Gauge组件和一个包含当前数值和辅助文本的Column组件。\n\nGauge组件的样式包括刻度盘的开始角度（startAngle）和结束角度（endAngle），刻度盘的颜色通过线性渐变（LinearGradient）实现，刻度盘的宽度（strokeWidth）为18vp，刻度盘的阴影效果通过trackShadow属性设置。Gauge组件的宽度为80%，高度为80%，内边距为18vp。\n\n当前数值和辅助文本通过Text组件展示，当前数值的文本大小范围为10.0vp到72.0vp，字体颜色为#ff182431，文本对齐方式为居中对齐，文本溢出时显示省略号，最大行数为1。辅助文本的文本大小范围为18.0vp到30.0vp，字体加粗，字体颜色为系统次要文本颜色（$r('sys.color.ohos_id_color_text_secondary')），文本对齐方式为居中对齐。\n\n整个布局通过Column布局保证Gauge和文本在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Gauge4 {\n  build() {\n    Column() {\n      Gauge({ value: 50, min: 1, max: 100 }) { // 创建一个刻度盘组件，当前值为50，最小值为1，最大值为100\n        Column() {\n          Text('50') // 显示当前数值\n            .maxFontSize(\"72.0vp\") // 设置文本最大字体大小为72.0vp\n            .minFontSize(\"10.0vp\") // 设置文本最小字体大小为10.0vp\n            .fontColor(\"#ff182431\") // 设置文本颜色为#ff182431\n            .width('40%') // 设置文本宽度为40%\n            .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n            .margin({ top: '35%' }) // 设置文本顶部外边距为35%\n            .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n            .maxLines(1) // 设置文本最大行数为1\n          Text('辅助文本') // 显示辅助文本\n            .maxFontSize(\"30.0vp\") // 设置文本最大字体大小为30.0vp\n            .minFontSize(\"18.0vp\") // 设置文本最小字体大小为18.0vp\n            .fontWeight(FontWeight.Medium) // 设置文本字体加粗\n            .fontColor($r('sys.color.ohos_id_color_text_secondary')) // 设置文本颜色为系统次要文本颜色\n            .width('62%') // 设置文本宽度为62%\n            .height('15.9%') // 设置文本高度为15.9%\n            .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n        }.width('100%').height('100%') // 设置Column的宽度和高度为100%\n      }\n      .startAngle(210) // 设置刻度盘的开始角度为210度\n      .endAngle(150) // 设置刻度盘的结束角度为150度\n      .colors([[new LinearGradient([{ color: \"#deb6fb\", offset: 0 }, { color: \"#ac49f5\", offset: 1 }]), 9], // 设置刻度盘的颜色为线性渐变，从#deb6fb到#ac49f5，对应值为9\n               [new LinearGradient([{ color: \"#bbb7fc\", offset: 0 }, { color: \"#564af7\", offset: 1 }]), 8], // 设置刻度盘的颜色为线性渐变，从#bbb7fc到#564af7，对应值为8\n               [new LinearGradient([{ color: \"#f5b5c2\", offset: 0 }, { color: \"#e64566\", offset: 1 }]), 7], // 设置刻度盘的颜色为线性渐变，从#f5b5c2到#e64566，对应值为7\n               [new LinearGradient([{ color: \"#f8c5a6\", offset: 0 }, { color: \"#ed6f21\", offset: 1 }]), 6], // 设置刻度盘的颜色为线性渐变，从#f8c5a6到#ed6f21，对应值为6\n               [new LinearGradient([{ color: \"#fceb99\", offset: 0 }, { color: \"#f7ce00\", offset: 1 }]), 5], // 设置刻度盘的颜色为线性渐变，从#fceb99到#f7ce00，对应值为5\n               [new LinearGradient([{ color: \"#dbefa5\", offset: 0 }, { color: \"#a5d61d\", offset: 1 }]), 4], // 设置刻度盘的颜色为线性渐变，从#dbefa5到#a5d61d，对应值为4\n               [new LinearGradient([{ color: \"#c1e4be\", offset: 0 }, { color: \"#64bb5c\", offset: 1 }]), 3], // 设置刻度盘的颜色为线性渐变，从#c1e4be到#64bb5c，对应值为3\n               [new LinearGradient([{ color: \"#c0ece5\", offset: 0 }, { color: \"#61cfbe\", offset: 1 }]), 2], // 设置刻度盘的颜色为线性渐变，从#c0ece5到#61cfbe，对应值为2\n               [new LinearGradient([{ color: \"#b5e0f4\", offset: 0 }, { color: \"#46b1e3\", offset: 1 }]), 1]]) // 设置刻度盘的颜色为线性渐变，从#b5e0f4到#46b1e3，对应值为1\n      .width('80%') // 设置刻度盘的宽度为80%\n      .height('80%') // 设置刻度盘的高度为80%\n      .strokeWidth(18) // 设置刻度盘的宽度为18vp\n      .description(null) // 设置刻度盘的描述为空\n      .trackShadow({ radius: 7, offsetX: 7, offsetY: 7 }) // 设置刻度盘的阴影效果，阴影半径为7，偏移量为(7, 7)\n      .padding(18) // 设置刻度盘的内边距为18vp\n    }.margin({ top: 40 }).width('100%').height('100%') // 设置Column的顶部外边距为40vp，宽度和高度为100%\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个带有刻度盘（Gauge）的界面，用于展示当前数值、说明文本和辅助文本。布局宽度占据整个屏幕，高度设为100%，内边距为顶部40vp。组件的垂直方向上被分为两个主要部分：刻度盘和说明文本。\n\n刻度盘部分使用Gauge组件，宽度为80%，高度为80%，刻度盘的刻度范围从1到100，当前值为50。刻度盘的样式包括渐变颜色、刻度宽度、刻度阴影等属性。刻度盘的刻度颜色通过多个线性渐变（LinearGradient）定义，每个渐变对应一个刻度值，颜色从浅到深变化。刻度盘的刻度宽度为18vp，刻度阴影的半径为7vp，偏移量为7vp。\n\n刻度盘内部嵌套了一个Column布局，用于展示当前数值和辅助文本。当前数值以Text组件展示，字体大小范围为30.0vp到60.0vp，字体颜色为深蓝色，字体加粗，宽度为62%，高度为100%，文本居中对齐，顶部外边距为35%。辅助文本以Text组件展示，字体大小范围为10.0vp到16.0fp，字体颜色为系统次要文本颜色，字体常规，宽度为67.4%，高度为9.5%，文本居中对齐。\n\n说明文本部分使用@Builder装饰器定义了一个descriptionBuilder方法，用于生成说明文本的Text组件。说明文本的字体大小范围为10.0vp到30sp，字体颜色为红色，字体加粗，宽度为100%，高度为100%，文本居中对齐。\n\n整个布局通过Column布局保证刻度盘和说明文本在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Gauge1 {\n  @Builder descriptionBuilder() {\n    Text('说明文本')\n      .maxFontSize('30sp') // 设置文本最大字体大小为30sp\n      .minFontSize(\"10.0vp\") // 设置文本最小字体大小为10.0vp\n      .fontColor(\"#fffa2a2d\") // 设置文本颜色为红色\n      .fontWeight(FontWeight.Medium) // 设置文本字体加粗\n      .width('100%') // 设置文本宽度为100%\n      .height(\"100%\") // 设置文本高度为100%\n      .textAlign(TextAlign.Center) // 设置文本居中对齐\n  }\n\n  build() {\n    Column() {\n      Gauge({ value: 50, min: 1, max: 100 }) { // 创建一个刻度盘，当前值为50，最小值为1，最大值为100\n        Column() {\n          Text('50') // 展示当前数值\n            .fontWeight(FontWeight.Medium) // 设置文本字体加粗\n            .width('62%') // 设置文本宽度为62%\n            .fontColor(\"#ff182431\") // 设置文本颜色为深蓝色\n            .maxFontSize(\"60.0vp\") // 设置文本最大字体大小为60.0vp\n            .minFontSize(\"30.0vp\") // 设置文本最小字体大小为30.0vp\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n            .margin({ top: '35%' }) // 设置文本顶部外边距为35%\n            .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n            .maxLines(1) // 设置文本最大行数为1\n          Text('辅助文本') // 展示辅助文本\n            .maxFontSize(\"16.0fp\") // 设置文本最大字体大小为16.0fp\n            .minFontSize(\"10.0vp\") // 设置文本最小字体大小为10.0vp\n            .fontColor($r('sys.color.ohos_id_color_text_secondary')) // 设置文本颜色为系统次要文本颜色\n            .fontWeight(FontWeight.Regular) // 设置文本字体常规\n            .width('67.4%') // 设置文本宽度为67.4%\n            .height('9.5%') // 设置文本高度为9.5%\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n        }.width('100%').height('100%') // 设置Column的宽度和高度为100%\n      }\n      .value(50) // 设置刻度盘的当前值为50\n      .startAngle(210) // 设置刻度盘的起始角度为210度\n      .endAngle(150) // 设置刻度盘的结束角度为150度\n      .colors([ // 设置刻度盘的渐变颜色\n        [new LinearGradient([{ color: \"#deb6fb\", offset: 0 }, { color: \"#ac49f5\", offset: 1 }]), 9],\n        [new LinearGradient([{ color: \"#bbb7fc\", offset: 0 }, { color: \"#564af7\", offset: 1 }]), 8],\n        [new LinearGradient([{ color: \"#f5b5c2\", offset: 0 }, { color: \"#e64566\", offset: 1 }]), 7],\n        [new LinearGradient([{ color: \"#f8c5a6\", offset: 0 }, { color: \"#ed6f21\", offset: 1 }]), 6],\n        [new LinearGradient([{ color: \"#fceb99\", offset: 0 }, { color: \"#f7ce00\", offset: 1 }]), 5],\n        [new LinearGradient([{ color: \"#dbefa5\", offset: 0 }, { color: \"#a5d61d\", offset: 1 }]), 4],\n        [new LinearGradient([{ color: \"#c1e4be\", offset: 0 }, { color: \"#64bb5c\", offset: 1 }]), 3],\n        [new LinearGradient([{ color: \"#c0ece5\", offset: 0 }, { color: \"#61cfbe\", offset: 1 }]), 2],\n        [new LinearGradient([{ color: \"#b5e0f4\", offset: 0 }, { color: \"#46b1e3\", offset: 1 }]), 1]\n      ])\n      .width('80%') // 设置刻度盘的宽度为80%\n      .height('80%') // 设置刻度盘的高度为80%\n      .strokeWidth(18) // 设置刻度盘的刻度宽度为18vp\n      .trackShadow({ radius: 7, offsetX: 7, offsetY: 7 }) // 设置刻度盘的刻度阴影\n      .description(this.descriptionBuilder) // 设置刻度盘的说明文本\n      .padding(18) // 设置刻度盘的内边距为18vp\n    }.margin({ top: 40 }).width('100%').height('100%') // 设置Column的顶部外边距为40vp，宽度和高度为100%\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "LoadingProgress": {
        "description": "用于显示加载动效的组件。",
        "details": null,
        "interfaces": [
            {
                "description": "LoadingProgress()",
                "params": {}
            }
        ],
        "attributes": {
            "color": {
                "description": "设置加载进度条前景色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "加载进度条的前景色。",
                        "default": "#ff666666"
                    }
                }
            },
            "enableLoading": {
                "description": "设置LoadingProgress动画显示或者不显示。LoadingProgress动画不显示时，该组件依旧占位。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "LoadingProgress动画是否显示。",
                        "default": true
                    }
                }
            },
            "contentModifier": {
                "description": "定制LoadingProgress内容区的方法。",
                "params": {
                    "modifier": {
                        "type": "ContentModifier<LoadingProgressConfiguration>",
                        "required": true,
                        "description": "定制LoadingProgress内容区的方法。"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件展示了一个带有文本和加载进度条的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为两个部分：一个文本部分和一个加载进度条部分。文本部分包含一个描述性的文本，字体大小为9，颜色为浅灰色，宽度占据90%的父容器宽度。加载进度条部分使用默认的LoadingProgress组件，颜色设置为蓝色，占据剩余的垂直空间。\n组件的排列和嵌套关系如下：整个布局通过Column组件进行垂直排列，Column组件的子元素包括一个Text组件和一个LoadingProgress组件。Text组件位于顶部，LoadingProgress组件位于底部。Column组件的宽度设置为100%，顶部有5个单位的边距。\n加载进度条的功能是展示一个动态的加载效果，颜色为蓝色，通过layoutWeight属性设置为1，使其占据剩余的垂直空间。",
                "code": "@Entry\n@Component\nstruct LoadingProgressExample {\n  build() {\n    Column({ space: 5 }) { // 创建一个垂直布局的Column组件，子元素之间的间距为5个单位\n      Text('Orbital LoadingProgress ') // 创建一个文本组件，内容为'Orbital LoadingProgress '\n        .fontSize(9) // 设置文本的字体大小为9\n        .fontColor(0xCCCCCC) // 设置文本的颜色为浅灰色（0xCCCCCC）\n        .width('90%') // 设置文本的宽度为父容器的90%\n      LoadingProgress() // 创建一个加载进度条组件\n        .color(Color.Blue) // 设置加载进度条的颜色为蓝色\n        .layoutWeight(1) // 设置加载进度条的布局权重为1，使其占据剩余的垂直空间\n    }\n    .width('100%') // 设置Column组件的宽度为100%\n    .margin({ top: 5 }) // 设置Column组件的顶部边距为5个单位\n  }\n}"
            },
            {
                "description": "该组件通过Column和Row布局实现了一个展示加载进度及其状态效果的界面。布局宽度占据整个屏幕，内边距为10vp。组件的垂直方向上被分为多个部分，每个部分包含一个Circle、Button、Gauge和List组件。每个组件组的组件以水平布局方式排列，组件之间的间距均匀分布，且对齐方式为居中对齐。\n\nCircle组件的样式包括宽度、高度和填充颜色等属性，支持不同的样式展示。Button组件的样式包括字体颜色、背景颜色和点击事件等属性，用户可以通过点击按钮触发相应操作。Gauge组件的样式包括宽度、高度、颜色和阴影等属性，支持不同的样式展示。List组件的样式包括高度、宽度、字体颜色、背景颜色和边框等属性，支持不同的样式展示。\n\n整个布局通过Column和Row布局保证组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// 导入性能分析工具\nimport { hilog } from '@kit.PerformanceAnalysisKit'\n// 导入ArkUI的提示动作工具\nimport { promptAction } from '@kit.ArkUI'\n\n// 定义一个自定义的加载进度样式类\nclass MyLoadingProgressStyle implements ContentModifier<LoadingProgressConfiguration> {\n  // 是否启用加载进度\n  enableLoading: boolean = false\n\n  // 构造函数，初始化enableLoading属性\n  constructor(enableLoading: boolean) {\n    this.enableLoading = enableLoading\n  }\n\n  // 应用内容修改器，返回一个WrappedBuilder\n  applyContent(): WrappedBuilder<[LoadingProgressConfiguration]> {\n    return wrapBuilder(buildLoadingProgress)\n  }\n}\n\n// 定义两个字符串数组\nlet arr1: string[] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"]\nlet arr2: string[] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n\n// 定义一个Builder函数，用于构建加载进度组件\n@Builder\nfunction buildLoadingProgress(config: LoadingProgressConfiguration) {\n  Column({ space: 8 }) {\n    Row() {\n      Column() {\n        Circle({\n          width: ((config.contentModifier as MyLoadingProgressStyle).enableLoading) ? 100 : 80, // 根据enableLoading属性设置Circle的宽度\n          height: ((config.contentModifier as MyLoadingProgressStyle).enableLoading) ? 100 : 80 // 根据enableLoading属性设置Circle的高度\n        })\n          .fill(((config.contentModifier as MyLoadingProgressStyle).enableLoading) ? Color.Grey : 0x2577e3) // 根据enableLoading属性设置Circle的填充颜色\n      }.width('50%')\n\n      Column() {\n        Button('' + ((config.contentModifier as MyLoadingProgressStyle).enableLoading)) // 根据enableLoading属性设置Button的文本\n          .onClick((event: ClickEvent) => {\n            promptAction.showToast({\n              message: ((config.contentModifier as MyLoadingProgressStyle).enableLoading) + '' // 显示enableLoading属性的值\n            })\n          })\n          .fontColor(Color.White) // 设置Button的字体颜色为白色\n          .backgroundColor(((config.contentModifier as MyLoadingProgressStyle).enableLoading) ? Color.Grey : 0x2577e3) // 根据enableLoading属性设置Button的背景颜色\n      }.width('50%')\n    }\n\n    Row() {\n      Column() {\n        Gauge({\n          value: (config.contentModifier as MyLoadingProgressStyle).enableLoading?50:30, // 根据enableLoading属性设置Gauge的值\n          min: 11, // 设置Gauge的最小值\n          max: 100 // 设置Gauge的最大值\n        }) {\n          Column() {\n            Text('60')\n              .maxFontSize(\"180sp\") // 设置Text的最大字体大小\n              .minFontSize(\"160.0vp\") // 设置Text的最小字体大小\n              .fontWeight(FontWeight.Medium) // 设置Text的字体粗细\n              .fontColor(\"#ff182431\") // 设置Text的字体颜色\n              .width('40%') // 设置Text的宽度\n              .height('30%') // 设置Text的高度\n              .textAlign(TextAlign.Center) // 设置Text的对齐方式为居中\n              .margin({ top: '22.2%' }) // 设置Text的上边距\n              .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置Text的溢出处理方式为省略号\n              .maxLines(1) // 设置Text的最大行数为1\n          }.width('100%').height('100%')\n        }\n        .colors(((config.contentModifier as MyLoadingProgressStyle).enableLoading) ? Color.Grey : 0x2577e3) // 根据enableLoading属性设置Gauge的颜色\n        .width(200) // 设置Gauge的宽度\n        .strokeWidth(18) // 设置Gauge的描边宽度\n        .padding(5) // 设置Gauge的内边距\n        .trackShadow({ radius: 7, offsetX: 7, offsetY: 7 }) // 设置Gauge的阴影\n        .height(200) // 设置Gauge的高度\n      }.width('100%')\n    }\n\n    Column() {\n      List({ space: 20, initialIndex: 0 }) {\n        ForEach(arr2, (item: string) => {\n          ListItem() {\n            Text((config.contentModifier as MyLoadingProgressStyle).enableLoading ? '' + item : Number(item) * 2 + '') // 根据enableLoading属性设置Text的文本\n              .width('100%') // 设置Text的宽度\n              .height('100%') // 设置Text的高度\n              .fontColor((config.contentModifier as MyLoadingProgressStyle).enableLoading ? Color.White : Color.Orange) // 根据enableLoading属性设置Text的字体颜色\n              .fontSize((config.contentModifier as MyLoadingProgressStyle).enableLoading ? 16 : 20) // 根据enableLoading属性设置Text的字体大小\n              .textAlign(TextAlign.Center) // 设置Text的对齐方式为居中\n              .backgroundColor((config.contentModifier as MyLoadingProgressStyle).enableLoading ? Color.Grey : 0x2577e3) // 根据enableLoading属性设置Text的背景颜色\n          }\n          .height(110) // 设置ListItem的高度\n          .border({\n            width: 2, // 设置ListItem的边框宽度\n            color: Color.White // 设置ListItem的边框颜色\n          })\n        }, (item: string) => item)\n      }\n      .height(200) // 设置List的高度\n      .width('100%') // 设置List的宽度\n      .friction(0.6) // 设置List的摩擦系数\n      .lanes({ minLength: (config.contentModifier as MyLoadingProgressStyle).enableLoading?40:80, maxLength: (config.contentModifier as MyLoadingProgressStyle).enableLoading?40:80 }) // 根据enableLoading属性设置List的行长度\n      .scrollBar(BarState.Off) // 设置List的滚动条状态为关闭\n    }\n  }.width(\"100%\").padding(10) // 设置Column的宽度为100%，内边距为10vp\n}\n\n// 定义一个入口组件\n@Entry\n@Component\nstruct LoadingProgressDemoExample {\n  // 定义一个状态变量，用于存储加载进度列表\n  @State loadingProgressList: (boolean | undefined | null)[] = [undefined, true, null, false]\n  // 定义一个状态变量，用于存储宽度列表\n  @State widthList: (number | string)[] = ['110%', 220, '40%', 80]\n  // 定义一个状态变量，用于存储加载进度索引\n  @State loadingProgressIndex: number = 0\n  // 定义一个状态变量，用于存储点击标志\n  @State clickFlag: number = 0\n  // 定义一个Scroller对象\n  scroller: Scroller = new Scroller()\n\n  // 构建组件\n  build() {\n    Column() {\n      Scroll(this.scroller) {\n        Column({ space: 5 }) {\n          Column() {\n            LoadingProgress()\n              .color('#106836') // 设置LoadingProgress的颜色\n              .size({ width: '100%' }) // 设置LoadingProgress的宽度为100%\n              .contentModifier(new MyLoadingProgressStyle(this.loadingProgressList[this.loadingProgressIndex])) // 设置LoadingProgress的内容修改器\n          }.width('100%').backgroundColor(0xdcdcdc) // 设置Column的宽度为100%，背景颜色为0xdcdcdc\n        }.width('100%').margin({ top: 5 }) // 设置Column的宽度为100%，上边距为5vp\n      }.height('85%') // 设置Scroll的高度为85%\n\n      Button('点击切换config.enableloading').onClick(() => {\n        this.clickFlag++ // 增加点击标志\n        this.loadingProgressIndex = (this.loadingProgressIndex + 1) % this.loadingProgressList.length // 更新加载进度索引\n        console.log('enableLoading:' + this.loadingProgressList[this.loadingProgressIndex]) // 打印enableLoading的值\n      }).margin(20) // 设置Button的上边距为20vp\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Marquee": {
        "description": "跑马灯组件，用于滚动展示一段单行文本。仅当文本内容宽度超过跑马灯组件宽度时滚动，不超过时不滚动。",
        "details": "该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。为了不影响滚动帧率，建议在滚动类组件中Marquee的个数不超过4个，或者使用Text组件的TextOverflow.MARQUEE替代。",
        "interfaces": [
            {
                "description": "Marquee(value: { start: boolean, step?: number, loop?: number, fromStart?: boolean, src: string })",
                "params": {
                    "value": {
                        "type": {
                            "start": "boolean",
                            "step": "number",
                            "loop": "number",
                            "fromStart": "boolean",
                            "src": "string"
                        },
                        "required": true,
                        "description": "配置跑马灯组件的参数。start控制跑马灯是否进入播放状态。step滚动动画文本滚动步长，当step大于Marquee的文本宽度时，取默认值。loop设置重复滚动的次数，小于等于零时无限循环。fromStart设置文本从头开始滚动或反向滚动。src需要滚动的文本。"
                    }
                }
            }
        ],
        "attributes": {
            "fontColor": {
                "description": "设置字体颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "字体颜色。"
                    }
                }
            },
            "fontSize": {
                "description": "设置字体大小。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "字体大小。fontSize为number类型时，使用fp单位。字体默认大小16fp。不支持设置百分比字符串。"
                    }
                }
            },
            "fontWeight": {
                "description": "设置文本的字体粗细，设置过大可能会在不同字体下有截断。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "FontWeight",
                            "string"
                        ],
                        "required": true,
                        "description": "文本的字体粗细，number类型取值[100, 900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如\"400\"，以及\"bold\"、\"bolder\"、\"lighter\"、\"regular\"、\"medium\"，分别对应FontWeight中相应的枚举值。"
                    }
                }
            },
            "fontFamily": {
                "description": "设置字体列表。",
                "params": {
                    "value": {
                        "type": [
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "字体列表。默认字体'HarmonyOS Sans'。应用当前支持'HarmonyOS Sans'字体和注册自定义字体。卡片当前仅支持'HarmonyOS Sans'字体。"
                    }
                }
            },
            "allowScale": {
                "description": "设置是否允许文本缩放。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否允许文本缩放。仅当fontSize为fp单位时生效。"
                    }
                }
            },
            "marqueeUpdateStrategy12+": {
                "description": "跑马灯组件属性更新后，跑马灯的滚动策略。(当跑马灯为播放状态，且文本内容宽度超过跑马灯组件宽度时，该属性生效。)",
                "params": {
                    "value": {
                        "type": "MarqueeUpdateStrategy",
                        "required": true,
                        "description": "跑马灯组件属性更新后的滚动策略。"
                    }
                }
            }
        },
        "events": {
            "onStart": {
                "description": "当滚动的文本内容变化或者开始滚动时触发回调。",
                "params": null
            },
            "onBounce": {
                "description": "完成一次滚动时触发，若循环次数不为1，则该事件会多次触发。",
                "params": null
            },
            "onFinish": {
                "description": "滚动全部循环次数完成时触发回调。",
                "params": null
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Flex 布局实现了一个包含跑马灯（Marquee）和按钮的界面。布局宽度占据整个屏幕，高度设为 100%，内边距为 0。组件的垂直方向上被分为多个部分，每个部分包含一个跑马灯和一个按钮。跑马灯和按钮以垂直布局方式排列，对齐方式为居中对齐。\n跑马灯的样式包括宽度为 300vp，高度为 80vp，背景颜色为 #182431，字体颜色为 #FFFFFF，字体大小为 48，字体粗细为 700，底部边距为 40vp。跑马灯的功能包括开始、反弹和结束事件的回调函数，用户可以通过点击按钮触发跑马灯动画。\n按钮的样式包括宽度为 120vp，高度为 40vp，背景颜色为 #007DFF，字体大小为 16，字体粗细为 500。按钮的功能包括点击事件，用户可以通过点击按钮启动跑马灯动画。\n整个布局通过 Flex 布局保证跑马灯和按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct MarqueeExample {\n  @State start: boolean = false // 控制跑马灯动画是否开始的标志\n  @State src: string = '' // 用于存储时间格式的字符串\n  @State marqueeText: string = 'Running Marquee' // 跑马灯显示的文本\n  private fromStart: boolean = true // 控制跑马灯动画是否从开始位置开始\n  private step: number = 10 // 跑马灯动画的步长\n  private loop: number = Number.POSITIVE_INFINITY // 跑马灯动画的循环次数，设置为无限循环\n  controller: TextClockController = new TextClockController() // 控制时间显示的控制器\n\n  // 将时间戳转换为时间格式的字符串\n  convert2time(value: number): string{\n    let date = new Date(Number(value+'000'));\n    let hours = date.getHours().toString().padStart(2, '0');\n    let minutes = date.getMinutes().toString().padStart(2, '0');\n    let seconds = date.getSeconds().toString().padStart(2, '0');\n    return hours+ \":\" + minutes + \":\" + seconds;\n  }\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Marquee({\n        start: this.start, // 控制跑马灯动画是否开始\n        step: this.step, // 跑马灯动画的步长\n        loop: this.loop, // 跑马灯动画的循环次数\n        fromStart: this.fromStart, // 控制跑马灯动画是否从开始位置开始\n        src: this.marqueeText + this.src // 跑马灯显示的文本内容\n      })\n        .marqueeUpdateStrategy(MarqueeUpdateStrategy.PRESERVE_POSITION) // 跑马灯更新策略，保持当前位置\n        .width(300) // 跑马灯宽度\n        .height(80) // 跑马灯高度\n        .fontColor('#FFFFFF') // 跑马灯字体颜色\n        .fontSize(48) // 跑马灯字体大小\n        .fontWeight(700) // 跑马灯字体粗细\n        .backgroundColor('#182431') // 跑马灯背景颜色\n        .margin({ bottom: 40 }) // 跑马灯底部边距\n        .onStart(() => {\n          console.info('Marquee animation complete onStart') // 跑马灯动画开始时的回调函数\n        })\n        .onBounce(() => {\n          console.info('Marquee animation complete onBounce') // 跑马灯动画反弹时的回调函数\n        })\n        .onFinish(() => {\n          console.info('Marquee animation complete onFinish') // 跑马灯动画结束时的回调函数\n        })\n      Button('Start')\n        .onClick(() => {\n          this.start = true // 设置跑马灯动画开始标志\n          this.controller.start() // 启动时间显示控制器\n        })\n        .width(120) // 按钮宽度\n        .height(40) // 按钮高度\n        .fontSize(16) // 按钮字体大小\n        .fontWeight(500) // 按钮字体粗细\n        .backgroundColor('#007DFF') // 按钮背景颜色\n      TextClock({ timeZoneOffset: -8, controller: this.controller }) // 时间显示组件，时区偏移为-8小时\n        .format('hms') // 时间格式为小时:分钟:秒\n        .onDateChange((value: number) => {\n          this.src = this.convert2time(value); // 时间变化时的回调函数，更新时间字符串\n        })\n        .margin(20) // 时间显示组件的边距\n        .fontSize(30) // 时间显示组件的字体大小\n    }\n    .width('100%') // 布局宽度\n    .height('100%') // 布局高度\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "PatternLock": {
        "description": "图案密码锁组件，以九宫格图案的方式输入密码，用于密码验证场景。手指在PatternLock组件区域按下时开始进入输入状态，手指离开屏幕时结束输入状态完成密码输入。",
        "details": null,
        "interfaces": [
            {
                "description": "PatternLock(controller?: PatternLockController)",
                "params": {
                    "controller": {
                        "type": "PatternLockController",
                        "description": "PatternLock组件的控制器，用于控制组件状态。"
                    }
                }
            }
        ],
        "attributes": {
            "sideLength": {
                "description": "设置组件的宽度和高度（宽高相同）。设置为0或负数时组件不显示。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "组件的宽度和高度。",
                        "default": "288vp"
                    }
                }
            },
            "circleRadius": {
                "description": "设置宫格中圆点的半径。设置为0或负数时取默认值。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "宫格中圆点的半径。",
                        "default": "6vp"
                    }
                }
            },
            "backgroundColor": {
                "description": "设置背景颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "背景颜色。"
                    }
                }
            },
            "regularColor": {
                "description": "设置宫格圆点在“未选中”状态的填充颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "宫格圆点在“未选中”状态的填充颜色。",
                        "default": "'#ff182431'"
                    }
                }
            },
            "selectedColor": {
                "description": "设置宫格圆点在“选中”状态的填充颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "宫格圆点在“选中”状态的填充颜色。",
                        "default": "'#ff182431'"
                    }
                }
            },
            "activeColor": {
                "description": "设置宫格圆点在“激活”状态的填充颜色，“激活”状态为手指经过圆点但还未选中的状态。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "宫格圆点在“激活”状态的填充颜色。",
                        "default": "'#ff182431'"
                    }
                }
            },
            "pathColor": {
                "description": "设置连线的颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "连线的颜色。"
                    }
                }
            },
            "pathStrokeWidth": {
                "description": "设置连线的宽度。设置为0或负数时连线不显示。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "连线的宽度。",
                        "default": "12vp"
                    }
                }
            },
            "autoReset": {
                "description": "设置在完成密码输入后再次在组件区域按下时是否重置组件状态。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "在完成密码输入后再次在组件区域按下时是否重置组件状态。",
                        "default": true
                    }
                }
            },
            "activateCircleStyle": {
                "description": "设置宫格圆点在“激活”状态的背景圆环样式。",
                "params": {
                    "options": {
                        "type": "Optional<CircleStyleOptions>",
                        "required": true,
                        "description": "宫格圆点在“激活”状态的背景圆环样式。"
                    }
                }
            }
        },
        "events": {
            "onPatternComplete": {
                "description": "密码输入结束时触发该回调。",
                "params": {
                    "input": {
                        "type": "Array<number>",
                        "required": true,
                        "description": "与选中宫格圆点顺序一致的数字数组，数字为选中宫格圆点的索引值（第一行圆点从左往右依次为0、1、2，第二行圆点依次为3、4、5，第三行圆点依次为6、7、8）。"
                    }
                }
            },
            "onDotConnect": {
                "description": "密码输入选中宫格圆点时触发该回调。",
                "params": {
                    "index": {
                        "type": "number",
                        "required": true,
                        "description": "选中宫格圆点顺序的数字，数字为选中宫格圆点的索引值（第一行圆点从左往右依次为0、1、2，第二行圆点依次为3、4、5，第三行圆点依次为6、7、8）。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件实现了一个图案锁（Pattern Lock）的示例应用。布局宽度占据整个屏幕，高度设为 100%，内边距为 20vp。组件的垂直方向上被分为两个主要部分：顶部是一个文本提示信息，底部是一个图案锁组件和一个重置按钮。\n\n文本提示信息用于显示用户操作的反馈，如密码输入的提示或错误信息。文本居中对齐，字体大小为 20，边距为 20vp。\n\n图案锁组件是一个自定义的组件，用于用户绘制图案密码。组件的宽度为 200vp，高度根据宽度自适应。图案锁的圆点半径为 9vp，路径宽度为 18vp。激活状态的圆点颜色为 '#B0C4DE'，选中状态的圆点颜色为 '#228B22'，路径颜色为 '#90EE90'，背景颜色为 '#F5F5F5'。激活状态的圆点样式包括颜色、半径（16vp）和波纹效果。\n\n图案锁组件支持自动重置功能，当用户完成一次图案绘制后，如果密码不符合要求，图案会自动重置。组件还支持两个主要的事件回调：`onDotConnect` 和 `onPatternComplete`。`onDotConnect` 事件在用户连接每个圆点时触发，`onPatternComplete` 事件在用户完成图案绘制时触发。\n\n重置按钮用于重置图案锁和相关状态。按钮的文本为 'Reset PatternLock'，边距为 30vp。点击按钮会重置图案锁控制器，清空密码状态，并将提示信息重置为初始状态。\n\n整个布局通过 Column 组件保证文本提示信息、图案锁组件和重置按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { LengthUnit } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct PatternLockExample {\n  @State passwords: Number[] = [] // 存储用户输入的密码\n  @State message: string = 'please input password!' // 显示给用户的提示信息\n  private patternLockController: PatternLockController = new PatternLockController() // 控制图案锁的控制器\n\n  build() {\n    Column() {\n      Text(this.message) // 显示提示信息\n        .textAlign(TextAlign.Center) // 文本居中对齐\n        .margin(20) // 文本上下边距为 20vp\n        .fontSize(20) // 文本字体大小为 20\n\n      PatternLock(this.patternLockController) // 创建图案锁组件\n        .sideLength(200) // 图案锁的边长为 200vp\n        .circleRadius(9) // 圆点半径为 9vp\n        .pathStrokeWidth(18) // 路径宽度为 18vp\n        .activeColor('#B0C4DE') // 激活状态的圆点颜色\n        .selectedColor('#228B22') // 选中状态的圆点颜色\n        .pathColor('#90EE90') // 路径颜色\n        .backgroundColor('#F5F5F5') // 背景颜色\n        .autoReset(true) // 自动重置功能\n        .activateCircleStyle({\n          color: '#90EE90', // 激活状态的圆点颜色\n          radius: { value: 16, unit: LengthUnit.VP }, // 激活状态的圆点半径为 16vp\n          enableWaveEffect: true // 启用波纹效果\n        })\n        .onDotConnect((index: number) => {\n          console.log(\"onDotConnect index: \" + index) // 连接圆点时触发的事件\n        })\n        .onPatternComplete((input: Array<number>) => {\n          if (input === null || input === undefined || input.length < 5) {\n            this.message = 'The password length needs to be greater than 5, please enter again.' // 密码长度不足时的提示信息\n            return\n          }\n\n          if (this.passwords.length > 0) {\n            if (this.passwords.toString() === input.toString()) {\n              this.passwords = input // 更新密码\n              this.message = 'Set password successfully: ' + this.passwords.toString() // 设置密码成功时的提示信息\n              this.patternLockController.setChallengeResult(PatternLockChallengeResult.CORRECT) // 设置挑战结果为正确\n            } else {\n              this.message = 'Inconsistent passwords, please enter again.' // 密码不一致时的提示信息\n              this.patternLockController.setChallengeResult(PatternLockChallengeResult.WRONG) // 设置挑战结果为错误\n            }\n          } else {\n            this.passwords = input // 更新密码\n            this.message = \"Please enter again.\" // 提示用户再次输入\n          }\n        })\n\n      Button('Reset PatternLock') // 重置按钮\n        .margin(30) // 按钮上下边距为 30vp\n        .onClick(() => {\n          this.patternLockController.reset() // 重置图案锁控制器\n          this.passwords = [] // 清空密码\n          this.message = 'Please input password' // 重置提示信息\n        })\n    }.width('100%').height('100%') // 布局宽度占据整个屏幕，高度设为 100%\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Progress": {
        "description": "进度条组件，用于显示内容加载或操作处理等进度。",
        "details": "该组件从API version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "Progress(options: ProgressOptions)",
                "params": {
                    "options": {
                        "type": "ProgressOptions",
                        "required": true,
                        "description": "创建进度条组件的参数。"
                    }
                }
            }
        ],
        "attributes": {
            "value": {
                "description": "设置当前进度值。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "当前进度值。设置小于0的数值时置为0，设置大于total的数值时置为total。",
                        "default": 0
                    }
                }
            },
            "total": {
                "description": "设置进度总长。",
                "params": {
                    "total": {
                        "type": "number",
                        "required": false,
                        "description": "进度总长。设置小于等于0的数值时置为100。",
                        "default": 100
                    }
                }
            },
            "type": {
                "description": "设置进度条类型。",
                "params": {
                    "type": {
                        "type": [
                            "ProgressType"
                        ],
                        "required": false,
                        "description": "进度条类型。",
                        "default": "ProgressType.Linear"
                    }
                }
            },
            "style": {
                "description": "设置进度条样式。",
                "params": {
                    "style": {
                        "type": [
                            "ProgressStyle"
                        ],
                        "required": false,
                        "description": "进度条样式。该参数从API version8开始废弃，建议使用type替代。",
                        "default": "ProgressStyle.Linear"
                    }
                }
            },
            "color": {
                "description": "设置进度条前景色。",
                "params": {
                    "value": {
                        "type": [
                            "ResourceColor",
                            "LinearGradient"
                        ],
                        "required": true,
                        "description": "进度条前景色。从API version 10开始支持利用LinearGradient设置Ring样式的渐变色。"
                    }
                }
            },
            "contentModifier": {
                "description": "定制progress内容区的方法。",
                "params": {
                    "modifier": {
                        "type": "ContentModifier<ProgressConfiguration>",
                        "required": true,
                        "description": "定制progress内容区的方法。"
                    }
                }
            },
            "privacySensitive": {
                "description": "设置隐私敏感。",
                "params": {
                    "isPrivacySensitiveMode": {
                        "type": [
                            "Optional<boolean>"
                        ],
                        "required": true,
                        "description": "设置隐私敏感，隐私模式下进度清零，文字将被遮罩。设置null则不敏感。"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Scroll 和 Column 布局实现了一个展示进度条的界面。布局宽度占据整个屏幕，高度设为 400vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组按钮。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过 Flex 组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过 Flex 布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ProgressExample {\n  build() {\n    Scroll() { // 创建一个可滚动的容器\n      Column({ space: 15 }) { // 创建一个垂直布局的容器，子组件之间的间距为15vp\n        Row() { // 创建一个水平布局的容器\n          Progress({ value: 50, total: 100, type: ProgressType.Capsule }) // 创建一个进度条组件，当前值为50，总进度为100，类型为胶囊形\n            .width(100) // 设置进度条的宽度为100vp\n            .height(50) // 设置进度条的高度为50vp\n            .style({\n              borderColor: Color.Blue, // 设置进度条的边框颜色为蓝色\n              borderWidth: 1, // 设置进度条的边框宽度为1vp\n              content: 'Installing...', // 设置进度条的文本内容为\"Installing...\"\n              font: { size: 13, style: FontStyle.Normal }, // 设置进度条文本的字体大小为13，样式为正常\n              fontColor: Color.Gray, // 设置进度条文本的颜色为灰色\n              enableScanEffect: false, // 禁用扫描效果\n              showDefaultPercentage: true // 显示默认的百分比\n            })\n            .privacySensitive(true) // 设置进度条为隐私敏感内容，隐藏具体进度值\n        }\n      }\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 和 Row 布局实现了一个胶囊形进度条的展示界面。布局宽度占据整个屏幕，内边距为顶部 5vp。组件的垂直方向上包含一个 Row 布局，Row 布局中包含一个 Progress 组件。\n\nProgress 组件的样式包括宽度为 100vp，高度为 50vp，类型为胶囊形（ProgressType.Capsule）。进度条的边框颜色为蓝色，边框宽度为 1vp，内容文本为 \"Installing...\"，字体大小为 13vp，字体样式为正常（FontStyle.Normal），字体颜色为灰色。进度条不启用扫描效果（enableScanEffect: false），并且不显示默认的百分比（showDefaultPercentage: false）。\n\n整个布局通过 Column 和 Row 布局保证进度条在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ProgressExample {\n  build() {\n    Column({ space: 15 }) { // 创建一个垂直布局，子组件之间的间距为 15vp\n      Row({ space: 40 }) { // 创建一个水平布局，子组件之间的间距为 40vp\n        Progress({ value: 100, total: 100, type: ProgressType.Capsule }) // 创建一个胶囊形进度条，当前值为 100，总值为 100\n          .width(100) // 设置进度条的宽度为 100vp\n          .height(50) // 设置进度条的高度为 50vp\n          .style({\n            borderColor: Color.Blue, // 设置进度条的边框颜色为蓝色\n            borderWidth: 1, // 设置进度条的边框宽度为 1vp\n            content: 'Installing...', // 设置进度条的内容文本为 \"Installing...\"\n            font: { size: 13, style: FontStyle.Normal }, // 设置进度条内容文本的字体大小为 13vp，字体样式为正常\n            fontColor: Color.Gray, // 设置进度条内容文本的字体颜色为灰色\n            enableScanEffect: false, // 禁用进度条的扫描效果\n            showDefaultPercentage: false // 不显示默认的百分比\n          })\n      }\n    }.width('100%') // 设置整个布局的宽度为 100%\n     .padding({ top: 5 }) // 设置整个布局的上内边距为 5vp\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个展示环形进度条的界面。布局宽度占据整个屏幕，内边距为顶部 5vp。组件的垂直方向上被分为两个部分，每个部分包含一个标题和一个环形进度条。每个环形进度条以水平布局方式排列，进度条之间的间距均匀分布，且对齐方式为居中对齐。\n环形进度条的样式包括宽度、颜色、描边宽度等属性，支持不同的样式展示。第一个进度条使用了渐变色作为进度条的颜色，第二个进度条使用了单一颜色并启用了阴影效果。进度条的功能包括展示当前进度值和总进度值，用户可以通过观察进度条的填充情况来了解当前进度。\n整个布局通过 Column 布局保证进度条在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ProgressExample {\n  // 定义一个渐变色对象，用于设置进度条的颜色\n  private gradientColor: LinearGradient = new LinearGradient([{ color: Color.Yellow, offset: 0.5 },\n                                                              { color: Color.Orange, offset: 1.0 }])\n\n  build() {\n    Column({ space: 15 }) {\n      // 标题文本，字体大小为 9，颜色为 0xCCCCCC，宽度为 90%\n      Text('Gradient Color').fontSize(9).fontColor(0xCCCCCC).width('90%')\n      \n      // 环形进度条，当前值为 70，总进度为 100，类型为环形\n      Progress({ value: 70, total: 100, type: ProgressType.Ring })\n        .width(100) // 进度条宽度为 100vp\n        .style({ strokeWidth: 20 }) // 进度条描边宽度为 20vp\n        .color(this.gradientColor) // 进度条颜色为渐变色\n\n      // 标题文本，字体大小为 9，颜色为 0xCCCCCC，宽度为 90%\n      Text('Shadow').fontSize(9).fontColor(0xCCCCCC).width('90%')\n      \n      // 环形进度条，当前值为 70，总进度为 100，类型为环形\n      Progress({ value: 70, total: 100, type: ProgressType.Ring })\n        .width(120) // 进度条宽度为 120vp\n        .color(Color.Orange) // 进度条颜色为橙色\n        .style({ strokeWidth: 20, shadow: true }) // 进度条描边宽度为 20vp，启用阴影效果\n    }.width('100%').padding({ top: 5 }) // 整个 Column 的宽度为 100%，顶部内边距为 5vp\n  }\n}"
            },
            {
                "description": "该组件展示了一个进度条滑动效果的示例。布局宽度占据屏幕的50%，高度为100%，左侧有20vp的边距。组件的垂直方向上被分为三个部分：两个进度条和一个按钮。每个进度条的样式包括线条宽度、平滑效果的启用状态等属性。按钮的样式包括宽度、高度和字体大小等属性。按钮的功能包括点击事件，用户可以通过点击按钮增加进度条的值。",
                "code": "@Entry\n@Component\nstruct Index {\n  @State value: number = 0 // 定义一个状态变量value，初始值为0，用于控制进度条的值\n\n  build() {\n    Column({space: 10}) { // 创建一个垂直布局的容器，子组件之间的间距为10vp\n      Text('enableSmoothEffect: true').fontSize(9).fontColor(0xCCCCCC).width('90%').margin(5)\n        .margin({top: 20}) // 创建一个文本组件，显示\"enableSmoothEffect: true\"，字体大小为9，颜色为0xCCCCCC，宽度为90%，上下左右边距为5vp，顶部额外增加20vp的边距\n      Progress({value: this.value, total: 100, type:ProgressType.Linear})\n        .style({strokeWidth: 10, enableSmoothEffect: true}) // 创建一个进度条组件，当前值为value，总长度为100，类型为线性，线条宽度为10vp，启用平滑效果\n\n      Text('enableSmoothEffect: false').fontSize(9).fontColor(0xCCCCCC).width('90%').margin(5)\n        .margin({top: 20}) // 创建一个文本组件，显示\"enableSmoothEffect: false\"，字体大小为9，颜色为0xCCCCCC，宽度为90%，上下左右边距为5vp，顶部额外增加20vp的边距\n      Progress({value: this.value, total: 100, type:ProgressType.Linear})\n        .style({strokeWidth: 10, enableSmoothEffect: false}) // 创建一个进度条组件，当前值为value，总长度为100，类型为线性，线条宽度为10vp，禁用平滑效果\n\n      Button('value +10').onClick(() => {\n        this.value += 10 // 创建一个按钮组件，显示\"value +10\"，点击按钮时将value增加10\n      })\n        .width(75) // 按钮宽度为75vp\n        .height(15) // 按钮高度为15vp\n        .fontSize(9) // 按钮字体大小为9\n    }\n    .width('50%') // 容器宽度为屏幕的50%\n    .height('100%') // 容器高度为屏幕的100%\n    .margin({left:20}) // 容器左侧边距为20vp\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个展示两种不同效果的环形进度条的界面。布局宽度占据整个屏幕，内边距为顶部 5vp。组件的垂直方向上被分为两个部分，每个部分包含一个标题和一个环形进度条。每个环形进度条以水平布局方式排列，进度条之间的间距均匀分布，且对齐方式为居中对齐。\n\n标题的样式包括字体大小为 9vp，字体颜色为 0xCCCCCC，宽度为 90%。进度条的样式包括宽度为 100vp，颜色分别为蓝色和橙色，线条宽度为 20vp。进度条的功能包括加载效果和扫描效果，用户可以通过观察进度条的动画效果来了解当前的进度状态。\n\n整个布局通过 Column 布局保证标题和进度条在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ProgressExample {\n  // 定义一个线性渐变颜色，从黄色（偏移量0.5）到橙色（偏移量1.0）\n  private gradientColor: LinearGradient = new LinearGradient([{ color: Color.Yellow, offset: 0.5 },\n                                                              { color: Color.Orange, offset: 1.0 }])\n  build() {\n    Column({ space: 15 }) {\n      // 创建一个文本组件，显示 \"Loading Effect\"，字体大小为 9vp，颜色为 0xCCCCCC，宽度为 90%\n      Text('Loading Effect').fontSize(9).fontColor(0xCCCCCC).width('90%')\n      \n      // 创建一个环形进度条，初始值为 0，总进度为 100，类型为环形\n      Progress({ value: 0, total: 100, type: ProgressType.Ring })\n        .width(100) // 设置进度条宽度为 100vp\n        .color(Color.Blue) // 设置进度条颜色为蓝色\n        .style({ strokeWidth: 20, status: ProgressStatus.LOADING }) // 设置进度条线条宽度为 20vp，状态为加载中\n\n      // 创建一个文本组件，显示 \"Scan Effect\"，字体大小为 9vp，颜色为 0xCCCCCC，宽度为 90%\n      Text('Scan Effect').fontSize(9).fontColor(0xCCCCCC).width('90%')\n      \n      // 创建一个环形进度条，初始值为 30，总进度为 100，类型为环形\n      Progress({ value: 30, total: 100, type: ProgressType.Ring })\n        .width(100) // 设置进度条宽度为 100vp\n        .color(Color.Orange) // 设置进度条颜色为橙色\n        .style({ strokeWidth: 20, enableScanEffect: true }) // 设置进度条线条宽度为 20vp，启用扫描效果\n    }.width('100%').padding({ top: 5 }) // 设置整个 Column 的宽度为 100%，顶部内边距为 5vp\n  }\n}"
            },
            {
                "description": "该组件实现了一个自定义进度条的功能，进度条以星形图案表示，总进度为3，当前进度值可通过按钮进行增减。进度条的每个星形图案根据当前进度值进行填充，填充颜色由自定义的 `MyProgressModifier` 类决定。布局上，进度条和按钮垂直排列，按钮用于控制进度值的增减。进度条的星形图案通过 `Path` 组件绘制，每个星形图案的填充颜色根据当前进度值动态变化。\n\n布局属性：\n- 进度条和按钮的布局宽度占据整个屏幕，高度为100%。\n- 进度条和按钮通过 `Column` 组件垂直排列。\n- 按钮的宽度为30%。\n\n组件的样式和外观：\n- 进度条的星形图案通过 `Path` 组件绘制，每个星形图案的填充颜色根据当前进度值动态变化。\n- 星形图案的边框颜色为黑色，边框宽度为3。\n- 按钮的文本颜色为默认颜色，背景颜色为默认颜色。\n\n组件的排列和嵌套关系：\n- 进度条和按钮通过 `Column` 组件垂直排列。\n- 进度条内部的星形图案通过 `Row` 组件水平排列。\n- 星形图案通过 `Flex` 组件进行对齐，对齐方式为 `SpaceBetween`。\n\n组件的功能和交互：\n- 进度条的当前进度值通过按钮进行增减。\n- 按钮的点击事件用于增加或减少进度值。\n- 进度条的星形图案根据当前进度值动态填充颜色。",
                "code": "// 自定义进度条修饰器类，用于设置进度条的填充颜色\nclass MyProgressModifier implements ContentModifier<ProgressConfiguration> {\n  color: Color = Color.White; // 默认颜色为白色\n\n  // 构造函数，接收颜色参数并赋值给 color 属性\n  constructor(color: Color) {\n    this.color = color;\n  }\n\n  // 应用内容修饰器，返回一个 WrappedBuilder\n  applyContent(): WrappedBuilder<[ProgressConfiguration]> {\n    return wrapBuilder(myProgress); // 返回 myProgress 构建器\n  }\n}\n\n// 自定义进度条构建器函数，接收 ProgressConfiguration 参数\n@Builder function myProgress(config: ProgressConfiguration) {\n  Column({ space: 30 }) { // 创建一个垂直布局，间距为30\n    Text(\"当前进度：\" + config.value + \"/\" + config.total).fontSize(20) // 显示当前进度值和总进度值，字体大小为20\n    Row() { // 创建一个水平布局\n      Flex({ justifyContent: FlexAlign.SpaceBetween }) { // 创建一个 Flex 布局，对齐方式为 SpaceBetween\n        Path() // 创建一个 Path 组件，绘制星形图案\n          .width('30%') // 宽度为30%\n          .height('30%') // 高度为30%\n          .commands('M108 0 L141 70 L218 78.3 L162 131 L175 205 L108 170 L41.2 205 L55 131 L1 78 L75 68 L108 0 Z') // 绘制星形路径\n          .fill(config.enabled && config.value >= 1 ? (config.contentModifier as MyProgressModifier).color : Color.White) // 根据进度值填充颜色\n          .stroke(Color.Black) // 边框颜色为黑色\n          .strokeWidth(3) // 边框宽度为3\n        Path() // 创建一个 Path 组件，绘制星形图案\n          .width('30%') // 宽度为30%\n          .height('30%') // 高度为30%\n          .commands('M108 0 L141 70 L218 78.3 L162 131 L175 205 L108 170 L41.2 205 L55 131 L1 78 L75 68 L108 0 Z') // 绘制星形路径\n          .fill(config.enabled && config.value >= 2 ? (config.contentModifier as MyProgressModifier).color : Color.White) // 根据进度值填充颜色\n          .stroke(Color.Black) // 边框颜色为黑色\n          .strokeWidth(3) // 边框宽度为3\n        Path() // 创建一个 Path 组件，绘制星形图案\n          .width('30%') // 宽度为30%\n          .height('30%') // 高度为30%\n          .commands('M108 0 L141 70 L218 78.3 L162 131 L175 205 L108 170 L41.2 205 L55 131 L1 78 L75 68 L108 0 Z') // 绘制星形路径\n          .fill(config.enabled && config.value >= 3 ? (config.contentModifier as MyProgressModifier).color : Color.White) // 根据进度值填充颜色\n          .stroke(Color.Black) // 边框颜色为黑色\n          .strokeWidth(3) // 边框宽度为3\n      }.width('100%') // Flex 布局宽度为100%\n    }\n  }.margin({ bottom: 100 }) // 垂直布局的下边距为100\n}\n\n// 入口组件，定义进度条和按钮\n@Entry\n@Component\nstruct Index {\n  @State currentValue: number = 0; // 当前进度值，初始值为0\n  modifier = new MyProgressModifier(Color.Red); // 创建一个 MyProgressModifier 实例，颜色为红色\n  @State myModifier: (MyProgressModifier | undefined) = this.modifier; // 定义一个状态变量，用于存储 MyProgressModifier 实例\n\n  build() {\n    Column() { // 创建一个垂直布局\n      Progress({ value: this.currentValue, total: 3, type: ProgressType.Ring }).contentModifier(this.modifier) // 创建一个进度条，当前值为 currentValue，总进度为3，类型为 Ring，内容修饰器为 modifier\n      Button('Progress++').onClick(() => { // 创建一个按钮，文本为 \"Progress++\"，点击事件为增加进度值\n        if (this.currentValue < 3) { // 如果当前进度值小于3\n          this.currentValue += 1; // 增加进度值\n        }\n      }).width('30%') // 按钮宽度为30%\n      Button('addProgress--').onClick(() => { // 创建一个按钮，文本为 \"addProgress--\"，点击事件为减少进度值\n        if (this.currentValue > 0) { // 如果当前进度值大于0\n          this.currentValue -= 1; // 减少进度值\n        }\n      }).width('30%') // 按钮宽度为30%\n    }.width('100%').height('100%') // 垂直布局宽度为100%，高度为100%\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个展示多种类型进度条（如线性进度条、环形进度条、胶囊进度条等）及其不同属性效果的界面。布局宽度占据整个屏幕，内边距为顶部 30vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组进度条。每个进度条组的进度条以水平布局方式排列，进度条之间的间距均匀分布，且对齐方式为居中对齐。\n进度条的样式包括颜色、宽度、高度、描边宽度、刻度数量、刻度宽度等属性，支持不同的样式展示。进度条组之间通过 Column 组件进行分隔。进度条的功能包括显示当前进度值和总进度值，用户可以通过这些进度条直观地了解任务的完成情况。\n整个布局通过 Column 布局保证进度条在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ProgressExample {\n  build() {\n    Column({ space: 15 }) { // 使用 Column 布局，设置子组件之间的间距为 15vp\n      Text('Linear Progress').fontSize(9).fontColor(0xCCCCCC).width('90%') // 显示标题 \"Linear Progress\"，字体大小为 9，颜色为灰色，宽度为 90%\n      Progress({ value: 10, type: ProgressType.Linear }).width(200) // 创建一个线性进度条，当前值为 10，宽度为 200vp\n      Progress({ value: 20, total: 150, type: ProgressType.Linear }).color(Color.Grey).value(50).width(200) // 创建一个线性进度条，当前值为 50，总进度为 150，颜色为灰色，宽度为 200vp\n\n      Text('Eclipse Progress').fontSize(9).fontColor(0xCCCCCC).width('90%') // 显示标题 \"Eclipse Progress\"，字体大小为 9，颜色为灰色，宽度为 90%\n      Row({ space: 40 }) { // 使用 Row 布局，设置子组件之间的间距为 40vp\n        Progress({ value: 10, type: ProgressType.Eclipse }).width(100) // 创建一个环形进度条，当前值为 10，宽度为 100vp\n        Progress({ value: 20, total: 150, type: ProgressType.Eclipse }).color(Color.Grey).value(50).width(100) // 创建一个环形进度条，当前值为 50，总进度为 150，颜色为灰色，宽度为 100vp\n      }\n\n      Text('ScaleRing Progress').fontSize(9).fontColor(0xCCCCCC).width('90%') // 显示标题 \"ScaleRing Progress\"，字体大小为 9，颜色为灰色，宽度为 90%\n      Row({ space: 40 }) { // 使用 Row 布局，设置子组件之间的间距为 40vp\n        Progress({ value: 10, type: ProgressType.ScaleRing }).width(100) // 创建一个刻度环形进度条，当前值为 10，宽度为 100vp\n        Progress({ value: 20, total: 150, type: ProgressType.ScaleRing })\n          .color(Color.Grey).value(50).width(100)\n          .style({ strokeWidth: 15, scaleCount: 15, scaleWidth: 5 }) // 创建一个刻度环形进度条，当前值为 50，总进度为 150，颜色为灰色，宽度为 100vp，描边宽度为 15vp，刻度数量为 15，刻度宽度为 5vp\n      }\n\n      Row({ space: 40 }) { // 使用 Row 布局，设置子组件之间的间距为 40vp\n        Progress({ value: 20, total: 150, type: ProgressType.ScaleRing })\n          .color(Color.Grey).value(50).width(100)\n          .style({ strokeWidth: 20, scaleCount: 20, scaleWidth: 5 }) // 创建一个刻度环形进度条，当前值为 50，总进度为 150，颜色为灰色，宽度为 100vp，描边宽度为 20vp，刻度数量为 20，刻度宽度为 5vp\n        Progress({ value: 20, total: 150, type: ProgressType.ScaleRing })\n          .color(Color.Grey).value(50).width(100)\n          .style({ strokeWidth: 20, scaleCount: 30, scaleWidth: 3 }) // 创建一个刻度环形进度条，当前值为 50，总进度为 150，颜色为灰色，宽度为 100vp，描边宽度为 20vp，刻度数量为 30，刻度宽度为 3vp\n      }\n\n      Text('Ring Progress').fontSize(9).fontColor(0xCCCCCC).width('90%') // 显示标题 \"Ring Progress\"，字体大小为 9，颜色为灰色，宽度为 90%\n      Row({ space: 40 }) { // 使用 Row 布局，设置子组件之间的间距为 40vp\n        Progress({ value: 10, type: ProgressType.Ring }).width(100) // 创建一个环形进度条，当前值为 10，宽度为 100vp\n        Progress({ value: 20, total: 150, type: ProgressType.Ring })\n          .color(Color.Grey).value(50).width(100)\n          .style({ strokeWidth: 20 }) // 创建一个环形进度条，当前值为 50，总进度为 150，颜色为灰色，宽度为 100vp，描边宽度为 20vp\n      }\n\n      Text('Capsule Progress').fontSize(9).fontColor(0xCCCCCC).width('90%') // 显示标题 \"Capsule Progress\"，字体大小为 9，颜色为灰色，宽度为 90%\n      Row({ space: 40 }) { // 使用 Row 布局，设置子组件之间的间距为 40vp\n        Progress({ value: 10, type: ProgressType.Capsule }).width(100).height(50) // 创建一个胶囊形进度条，当前值为 10，宽度为 100vp，高度为 50vp\n        Progress({ value: 20, total: 150, type: ProgressType.Capsule })\n          .color(Color.Grey)\n          .value(50)\n          .width(100)\n          .height(50) // 创建一个胶囊形进度条，当前值为 50，总进度为 150，颜色为灰色，宽度为 100vp，高度为 50vp\n      }\n    }.width('100%').margin({ top: 30 }) // 设置整个 Column 布局的宽度为 100%，顶部外边距为 30vp\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Popup": {
        "description": "可滚动的容器组件，当子组件的布局尺寸超过父组件的尺寸时，内容可以滚动，支持单个子组件。",
        "interfaces": [
            {
                "description": "Scroll(scroller?: Scroller)",
                "params": {
                    "scroller": {
                        "type": "Scroller",
                        "description": "可滚动组件的控制器。用于与可滚动组件进行绑定。"
                    }
                }
            }
        ],
        "attributes": {
            "scrollable": {
                "description": "设置滚动方向。",
                "params": {
                    "value": {
                        "type": "ScrollDirection",
                        "required": true,
                        "description": "滚动方向。",
                        "default": "ScrollDirection.Vertical"
                    }
                }
            }
        },
        "events": {
            "onScrollFrameBegin": {
                "description": "每帧开始滚动时触发，事件参数传入即将发生的滚动量，事件处理函数中可根据应用场景计算实际需要的滚动量并作为事件处理函数的返回值返回，Scroll将按照返回值的实际滚动量进行滚动。支持offsetRemain为负值。若通过onScrollFrameBegin事件和scrollBy方法实现容器嵌套滚动，需设置子滚动节点的EdgeEffect为None。如Scroll嵌套List滚动时，List组件的edgeEffect属性需设置为EdgeEffect.None。触发该事件的条件：1、滚动组件触发滚动时触发，包括键鼠操作等其他触发滚动的输入设置。2、调用控制器接口时不触发。3、越界回弹不触发。4、拖动滚动条不触发。",
                "params": {
                    "offset": {
                        "type": "number",
                        "required": true,
                        "description": "即将发生的滑动量，单位vp。"
                    },
                    "state": {
                        "type": "ScrollState",
                        "required": true,
                        "description": "当前滑动状态。"
                    }
                }
            }
        },
        "examples": []
    },
    "QRCode": {
        "description": "用于显示单个二维码的组件。",
        "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。二维码组件的像素点数量与内容有关，当组件尺寸过小时，可能出现无法展示内容的情况，此时需要适当调整组件尺寸。",
        "interfaces": [
            {
                "description": "QRCode(value: string)",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "二维码内容字符串。最大支持512个字符，若超出，则截取前512个字符。"
                    }
                }
            }
        ],
        "attributes": {
            "color": {
                "description": "设置二维码颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "二维码颜色。",
                        "default": "default"
                    }
                }
            },
            "backgroundColor": {
                "description": "设置二维码背景颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "二维码背景颜色。",
                        "default": "default"
                    }
                }
            },
            "contentOpacity": {
                "description": "设置二维码内容颜色的不透明度。不透明度最小值为0，最大值为1。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "Resource"
                        ],
                        "required": true,
                        "description": "二维码内容颜色的不透明度。",
                        "default": 1
                    }
                }
            }
        },
        "events": {
            "onClick": {
                "description": "点击事件。",
                "params": {}
            },
            "onTouch": {
                "description": "触摸事件。",
                "params": {}
            },
            "onAppear": {
                "description": "挂载事件。",
                "params": {}
            },
            "onDisappear": {
                "description": "卸载事件。",
                "params": {}
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Column 布局实现了一个展示不同样式二维码的界面。布局宽度占据整个屏幕，内边距为顶部 5vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和对应的二维码。每个二维码的宽度和高度均为 140vp，且二维码之间的间距为 5vp。\n标题的样式为字体大小 30vp，宽度为 90%，字体颜色为 0xCCCCCC。二维码的样式包括颜色、背景色和不透明度等属性，支持不同的样式展示。二维码的功能包括生成不同颜色、背景色和不透明度的二维码，用户可以通过界面展示的二维码样式进行参考。\n整个布局通过 Column 布局保证二维码在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct QRCodeExample {\n  private value: string = 'hello world' // 定义二维码的内容，默认为 'hello world'\n\n  build() {\n    Column({ space: 5 }) { // 使用 Column 布局，设置组件之间的间距为 5vp\n      Text('normal').fontSize(9).width('90%').fontColor(0xCCCCCC).fontSize(30) // 显示标题 'normal'，字体大小为 30vp，宽度为 90%，字体颜色为 0xCCCCCC\n      QRCode(this.value).width(140).height(140) // 生成默认样式的二维码，宽度和高度均为 140vp\n\n      // 设置二维码颜色\n      Text('color').fontSize(9).width('90%').fontColor(0xCCCCCC).fontSize(30) // 显示标题 'color'，字体大小为 30vp，宽度为 90%，字体颜色为 0xCCCCCC\n      QRCode(this.value).color(0xF7CE00).width(140).height(140) // 生成颜色为 0xF7CE00 的二维码，宽度和高度均为 140vp\n\n      // 设置二维码背景色\n      Text('backgroundColor').fontSize(9).width('90%').fontColor(0xCCCCCC).fontSize(30) // 显示标题 'backgroundColor'，字体大小为 30vp，宽度为 90%，字体颜色为 0xCCCCCC\n      QRCode(this.value).width(140).height(140).backgroundColor(Color.Orange) // 生成背景色为橙色的二维码，宽度和高度均为 140vp\n\n      // 设置二维码不透明度\n      Text('contentOpacity').fontSize(9).width('90%').fontColor(0xCCCCCC).fontSize(30) // 显示标题 'contentOpacity'，字体大小为 30vp，宽度为 90%，字体颜色为 0xCCCCCC\n      QRCode(this.value).width(140).height(140).color(Color.Black).contentOpacity(0.1) // 生成颜色为黑色、不透明度为 0.1 的二维码，宽度和高度均为 140vp\n    }.width('100%').margin({ top: 5 }) // 设置 Column 布局的宽度为 100%，顶部边距为 5vp\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "TextClock": {
        "description": "TextClock组件通过文本将当前系统时间显示在设备上。支持不同时区的时间显示，最高精度到秒级。",
        "details": "在组件不可见时时间变动将停止，组件的可见状态基于onVisibleAreaChange处理，可见阈值ratios大于0即视为可见状态。",
        "interfaces": [
            {
                "description": "TextClock(options?: { timeZoneOffset?: number, controller?: TextClockController })",
                "params": {
                    "options": {
                        "type": "object",
                        "description": "TextClock组件的配置选项。",
                        "params": {
                            "timeZoneOffset": {
                                "type": "number",
                                "description": "设置时区偏移量。取值范围为[-14, 12]，表示东十二区到西十二区，其中负值表示东时区，正值表示西时区，比如东八区为-8。设置值为该取值范围内的浮点数时会进行取整，舍弃小数部分。对横跨国际日界线的国家或地区，用-13（UTC+13）和-14（UTC+14）来保证整个国家或者区域处在相同的时间，当设置的值不在取值范围内时，将使用当前系统的时区偏移量。",
                                "default": "当前系统的时区偏移量"
                            },
                            "controller": {
                                "type": "TextClockController",
                                "description": "绑定一个控制器，用来控制文本时钟的状态。"
                            }
                        }
                    }
                }
            }
        ],
        "attributes": {
            "format": {
                "description": "设置显示时间格式，如“yyyy/MM/dd”、“yyyy-MM-dd”。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "显示时间格式。"
                    }
                }
            },
            "fontColor": {
                "description": "设置字体颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "字体颜色。"
                    }
                }
            },
            "fontSize": {
                "description": "设置字体大小。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "字体大小。fontSize为number类型时，使用fp单位。字体默认大小16fp。不支持设置百分比字符串。"
                    }
                }
            },
            "fontStyle": {
                "description": "设置字体样式。",
                "params": {
                    "value": {
                        "type": "FontStyle",
                        "required": true,
                        "description": "字体样式。",
                        "default": "FontStyle.Normal"
                    }
                }
            },
            "fontWeight": {
                "description": "设置文本的字体粗细，设置过大可能会在不同字体下有截断。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "FontWeight",
                            "string"
                        ],
                        "required": true,
                        "description": "文本的字体粗细，number类型取值[100, 900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如\"400\"，以及\"bold\"、\"bolder\"、\"lighter\"、\"regular\"、\"medium\"，分别对应FontWeight中相应的枚举值。",
                        "default": "FontWeight.Normal"
                    }
                }
            },
            "fontFamily": {
                "description": "设置字体列表。",
                "params": {
                    "value": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "字体列表。默认字体'HarmonyOS Sans'。"
                    }
                }
            },
            "textShadow": {
                "description": "设置文字阴影效果。该接口支持以数组形式入参，实现多重文字阴影。不支持fill字段, 不支持智能取色模式。",
                "params": {
                    "value": {
                        "type": [
                            "ShadowOptions",
                            "Array<ShadowOptions>"
                        ],
                        "required": true,
                        "description": "文字阴影效果。"
                    }
                }
            },
            "fontFeature": {
                "description": "设置文字特性效果，比如数字等宽的特性。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "文字特性效果。"
                    }
                }
            },
            "contentModifier": {
                "description": "定制TextClock内容区的方法。",
                "params": {
                    "modifier": {
                        "type": "ContentModifier<TextClockConfiguration>",
                        "required": true,
                        "description": "定制TextClock内容区的方法。"
                    }
                }
            },
            "dateTimeOptions": {
                "description": "设置小时是否显示前导0。",
                "params": {
                    "dateTimeOptions": {
                        "type": "Optional<DateTimeOptions>",
                        "required": true,
                        "description": "设置小时是否显示前导0，只支持设置hour参数，参数值为{hour: \"2-digit\"}时表示显示前导0，参数值为{hour: \"numeric\"}时表示不显示前导0。",
                        "default": "undefined，由组件根据应用设置格式自行判断是否显示前导0。"
                    }
                }
            }
        },
        "events": {
            "onDateChange": {
                "description": "提供时间变化回调，该事件回调间隔为秒。组件不可见时不回调。非卡片中使用时，该事件回调间隔为秒。卡片中使用时，该事件回调间隔为分钟。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "Unix Time Stamp，即自1970年1月1日（UTC）起经过的秒数。"
                    }
                }
            }
        },
        "rules": [
            "该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
            "该组件支持在ArkTS卡片中使用。",
            "该组件支持在元服务中使用。"
        ],
        "examples": [
            {
                "description": "该组件通过 Column 布局实现了一个展示带有多个阴影效果的文本时钟界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上仅包含一个 TextClock 组件，该组件以水平布局方式排列，且对齐方式为居中对齐。\nTextClock 组件的样式包括字体大小、文本阴影等属性，支持不同的样式展示。文本阴影通过多个 ShadowOptions 对象定义，每个对象包含阴影的半径、颜色、水平偏移量和垂直偏移量等属性。\n整个布局通过 Column 布局保证 TextClock 组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry // 标记该组件为入口组件\n@Component // 标记该组件为一个自定义组件\nstruct TextClockExample {\n  @State textShadows : ShadowOptions | Array<ShadowOptions> = [ // 定义一个状态变量 textShadows，用于存储文本阴影的配置\n    { radius: 10, color: Color.Red, offsetX: 10, offsetY: 0 }, // 第一个阴影配置：红色，半径10，水平偏移10，垂直偏移0\n    { radius: 10, color: Color.Black, offsetX: 20, offsetY: 0 }, // 第二个阴影配置：黑色，半径10，水平偏移20，垂直偏移0\n    { radius: 10, color: Color.Brown, offsetX: 30, offsetY: 0 }, // 第三个阴影配置：棕色，半径10，水平偏移30，垂直偏移0\n    { radius: 10, color: Color.Green, offsetX: 40, offsetY: 0 }, // 第四个阴影配置：绿色，半径10，水平偏移40，垂直偏移0\n    { radius: 10, color: Color.Yellow, offsetX: 100, offsetY: 0 } // 第五个阴影配置：黄色，半径10，水平偏移100，垂直偏移0\n  ]\n\n  build() {\n    Column({ space: 8 }) { // 创建一个垂直布局的 Column 组件，组件之间的间距为8\n      TextClock() // 创建一个 TextClock 组件，用于显示当前时间\n        .fontSize(50) // 设置 TextClock 组件的字体大小为50\n        .textShadow(this.textShadows) // 设置 TextClock 组件的文本阴影效果，使用 textShadows 变量中的配置\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个展示时间格式的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为两个部分，每个部分包含一个标题和一个 TextClock 组件。每个部分的标题和 TextClock 组件以水平布局方式排列，标题和 TextClock 组件之间的间距均匀分布，且对齐方式为居中对齐。\n\nTextClock 组件的样式包括字体大小、时间格式等属性，支持不同的样式展示。第一个 TextClock 组件展示了 24 小时制的时间格式，并通过 dateTimeOptions 属性去除了前导 0。第二个 TextClock 组件展示了 12 小时制的时间格式，并通过 dateTimeOptions 属性增加了前导 0。\n\n整个布局通过 Column 布局保证标题和 TextClock 组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct TextClockExample {\n  build() {\n    Column({ space: 8 }) { // 创建一个垂直布局的 Column 组件，设置组件之间的间距为 8vp\n      Row() { // 创建一个水平布局的 Row 组件\n        Text(\"24小时制去除前导0：\") // 创建一个 Text 组件，显示文本内容为 \"24小时制去除前导0：\"\n          .fontSize(20) // 设置字体大小为 20\n        TextClock() // 创建一个 TextClock 组件，用于显示时间\n          .fontSize(20) // 设置字体大小为 20\n          .format(\"HH:mm:ss\") // 设置时间格式为 \"HH:mm:ss\"，表示 24 小时制的时间格式\n          .dateTimeOptions({hour: \"numeric\"}) // 设置 dateTimeOptions 属性，去除小时字段的前导 0\n      }\n      Row() { // 创建一个水平布局的 Row 组件\n        Text(\"12小时制增加前导0：\") // 创建一个 Text 组件，显示文本内容为 \"12小时制增加前导0：\"\n          .fontSize(20) // 设置字体大小为 20\n        TextClock() // 创建一个 TextClock 组件，用于显示时间\n          .fontSize(20) // 设置字体大小为 20\n          .format(\"aa hh:mm:ss\") // 设置时间格式为 \"aa hh:mm:ss\"，表示 12 小时制的时间格式，并带有上午/下午标识\n          .dateTimeOptions({hour: \"2-digit\"}) // 设置 dateTimeOptions 属性，增加小时字段的前导 0\n      }\n    }\n    .alignItems(HorizontalAlign.Start) // 设置 Column 组件的子组件在水平方向上左对齐\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示当前时间（以毫秒为单位）的界面，并提供了启动和停止时钟的功能。布局宽度占据整个屏幕，高度设为 100%，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题、一个时钟显示和一个按钮组。时钟显示以文本形式展示当前时间的毫秒数，按钮组包含两个按钮，分别用于启动和停止时钟。\n时钟显示的样式包括字体大小为 30，边距为 20，字体大小为 20。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过 Flex 组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过 Flex 布局保证时钟和按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Second {\n  @State accumulateTime: number = 0 // 用于存储当前时间的毫秒数\n\n  controller: TextClockController = new TextClockController() // 创建一个 TextClock 控制器，用于控制时钟的启动和停止\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Text('Current milliseconds is ' + this.accumulateTime) // 显示当前时间的毫秒数\n        .fontSize(20) // 设置字体大小为 20\n\n      TextClock({ timeZoneOffset: -8, controller: this.controller }) // 创建一个 TextClock 组件，设置时区偏移为 -8，并绑定控制器\n        .format('aa hh:mm:ss') // 设置时间格式为 \"上午/下午 小时:分钟:秒\"\n        .onDateChange((value: number) => { // 当时间变化时，更新 accumulateTime 的值\n          this.accumulateTime = value\n        })\n        .margin(20) // 设置边距为 20\n        .fontSize(30) // 设置字体大小为 30\n\n      Button(\"start TextClock\") // 创建一个按钮，用于启动时钟\n        .margin({ bottom: 10 }) // 设置底部边距为 10\n        .onClick(() => { // 点击按钮时，启动时钟\n          this.controller.start()\n        })\n\n      Button(\"stop TextClock\") // 创建一个按钮，用于停止时钟\n        .onClick(() => { // 点击按钮时，停止时钟\n          this.controller.stop()\n        })\n    }\n    .width('100%') // 设置宽度为 100%\n    .height('100%') // 设置高度为 100%\n  }\n}"
            },
            {
                "description": "该示例实现了一个自定义文本时钟样式的功能，通过自定义样式实现了一个时间选择器组件。布局采用 Flex 布局，宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为多个部分，每个部分包含一个文本时钟和两个按钮。文本时钟的样式包括字体大小、边距等属性，支持不同的样式展示。按钮的功能包括点击事件，用户可以通过点击按钮启动或停止文本时钟。\n\n布局属性：\n- 宽度：100%\n- 高度：100%\n- 边距：文本时钟和按钮的边距分别为 20vp 和 20vp、30vp\n\n组件的样式和外观：\n- 字体大小：文本时钟的字体大小为 30vp，按钮的字体大小为默认值\n- 边距：文本时钟和按钮的边距分别为 20vp 和 20vp、30vp\n\n组件的排列和嵌套关系：\n- 垂直布局：通过 Flex 布局实现，垂直方向上排列文本时钟和按钮\n- 对齐方式：居中对齐\n\n组件的功能和交互：\n- 点击事件：按钮点击事件用于启动或停止文本时钟\n- 输入验证：无",
                "code": "// 自定义文本时钟样式类，实现 ContentModifier 接口\nclass MyTextClockStyle implements ContentModifier<TextClockConfiguration> {\n  // 当前时区偏移量，单位为小时\n  currentTimeZoneOffset: number = new Date().getTimezoneOffset() / 60\n  // 标题文本\n  title: string = ''\n\n  // 构造函数，初始化标题文本\n  constructor(title: string) {\n    this.title = title\n  }\n\n  // 应用内容修饰器，返回一个 WrappedBuilder\n  applyContent(): WrappedBuilder<[TextClockConfiguration]> {\n    return wrapBuilder(buildTextClock)\n  }\n}\n\n// 构建文本时钟的 Builder 函数\n@Builder\nfunction buildTextClock(config: TextClockConfiguration) {\n  Row() {\n    Column() {\n      // 显示标题文本\n      Text((config.contentModifier as MyTextClockStyle).title)\n        .fontSize(20)\n        .margin(20)\n      // 时间选择器组件，根据时区偏移量和 UTC 秒数动态改变选中值\n      TimePicker({\n        selected: (new Date(config.timeValue * 1000 + ((config.contentModifier as MyTextClockStyle).currentTimeZoneOffset - config.timeZoneOffset) * 60 * 60 * 1000)),\n        format: TimePickerFormat.HOUR_MINUTE_SECOND\n      })\n        .useMilitaryTime(!config.started) // 根据文本时钟的启动状态切换 12 小时制与 24 小时制\n    }\n  }\n}\n\n// 入口组件，实现文本时钟示例\n@Entry\n@Component\nstruct TextClockExample {\n  // 累计时间，单位为毫秒\n  @State accumulateTime1: number = 0\n  // 时区偏移量，单位为小时\n  @State timeZoneOffset: number = -8\n  // 文本时钟控制器\n  controller1: TextClockController = new TextClockController()\n  controller2: TextClockController = new TextClockController()\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 显示当前累计时间\n      Text('Current milliseconds is ' + this.accumulateTime1)\n        .fontSize(20)\n        .margin({ top: 20 })\n      // 第一个文本时钟组件\n      TextClock({ timeZoneOffset: this.timeZoneOffset, controller: this.controller1 })\n        .format('aa hh:mm:ss')\n        .onDateChange((value: number) => {\n          this.accumulateTime1 = value\n        })\n        .margin(20)\n        .fontSize(30)\n      // 第二个文本时钟组件，使用自定义样式\n      TextClock({ timeZoneOffset: this.timeZoneOffset, controller: this.controller2 })\n        .format('aa hh:mm:ss')\n        .fontSize(30)\n        .contentModifier(new MyTextClockStyle('ContentModifier:'))\n      // 启动文本时钟的按钮\n      Button(\"start TextClock\")\n        .margin({ top: 20, bottom: 10 })\n        .onClick(() => {\n          this.controller1.start()\n          this.controller2.start()\n        })\n      // 停止文本时钟的按钮\n      Button(\"stop TextClock\")\n        .margin({ bottom: 30 })\n        .onClick(() => {\n          this.controller1.stop()\n          this.controller2.stop()\n        })\n    }\n    .width('100%')\n    .height('100%')\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "TextTimer": {
        "description": "通过文本显示计时信息并控制其计时器状态的组件。",
        "details": "在组件不可见时时间变动将停止，组件的可见状态基于onVisibleAreaChange处理，可见阈值ratios大于0即视为可见状态。",
        "interfaces": [
            {
                "description": "TextTimer(options?: TextTimerOptions)",
                "params": {
                    "options": {
                        "type": "TextTimerOptions",
                        "description": "TextTimer的选项对象。"
                    }
                }
            }
        ],
        "attributes": {
            "isCountDown": {
                "description": "是否倒计时。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "description": "是否倒计时。",
                        "default": false
                    }
                }
            },
            "count": {
                "description": "倒计时时间（isCountDown为true时生效），单位为毫秒。最长不超过86400000毫秒（24小时）。",
                "params": {
                    "value": {
                        "type": "number",
                        "description": "倒计时时间，单位为毫秒。",
                        "default": 60000
                    }
                }
            },
            "controller": {
                "description": "TextTimer控制器。",
                "params": {
                    "value": {
                        "type": "TextTimerController",
                        "description": "TextTimer控制器。"
                    }
                }
            },
            "format": {
                "description": "设置自定义格式，需至少包含一个HH、mm、ss、SS中的关键字。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "自定义格式。",
                        "default": "HH:mm:ss.SS"
                    }
                }
            },
            "fontColor": {
                "description": "设置字体颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "字体颜色。"
                    }
                }
            },
            "fontSize": {
                "description": "设置字体大小。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "字体大小。fontSize为number类型时，使用fp单位。字体默认大小16fp。不支持设置百分比字符串。"
                    }
                }
            },
            "fontStyle": {
                "description": "设置字体样式。",
                "params": {
                    "value": {
                        "type": "FontStyle",
                        "required": true,
                        "description": "字体样式。",
                        "default": "FontStyle.Normal"
                    }
                }
            },
            "fontWeight": {
                "description": "设置文本的字体粗细，设置过大可能会在不同字体下有截断。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "FontWeight",
                            "string"
                        ],
                        "required": true,
                        "description": "文本的字体粗细，number类型取值[100, 900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如\"400\"，以及\"bold\"、\"bolder\"、\"lighter\"、\"regular\"、\"medium\"，分别对应FontWeight中相应的枚举值。",
                        "default": "FontWeight.Normal"
                    }
                }
            },
            "fontFamily": {
                "description": "设置字体列表。",
                "params": {
                    "value": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "字体列表。默认字体'HarmonyOS Sans'。"
                    }
                }
            },
            "textShadow": {
                "description": "设置文字阴影效果。该接口支持以数组形式入参，实现多重文字阴影。不支持fill字段, 不支持智能取色模式。",
                "params": {
                    "value": {
                        "type": [
                            "ShadowOptions",
                            "Array<ShadowOptions>"
                        ],
                        "required": true,
                        "description": "文字阴影效果。"
                    }
                }
            },
            "contentModifier": {
                "description": "定制TextTimer内容区的方法。",
                "params": {
                    "modifier": {
                        "type": "ContentModifier<TextTimerConfiguration>",
                        "required": true,
                        "description": "定制TextTimer内容区的方法。"
                    }
                }
            }
        },
        "events": {
            "onTimer": {
                "description": "时间文本发生变化时触发。锁屏状态和应用后台状态下不会触发该事件。设置高精度的format（SSS、SS）时，回调间隔可能会出现波动。",
                "params": {
                    "utc": {
                        "type": "number",
                        "required": true,
                        "description": "Linux时间戳，即自1970年1月1日起经过的时间，单位为设置格式的最小单位。"
                    },
                    "elapsedTime": {
                        "type": "number",
                        "required": true,
                        "description": "计时器经过的时间，单位为设置格式的最小单位。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Column 布局实现了一个倒计时计时器的界面。布局高度占据整个屏幕的 20%，内边距为 0。组件的垂直方向上包含一个 Scroll 组件和一个 TextTimer 组件。Scroll 组件用于在需要时滚动内容，TextTimer 组件用于显示倒计时时间。\nTextTimer 组件的样式包括字体颜色为黑色、字体大小为 50vp。TextTimer 组件的功能包括倒计时、格式化时间显示、以及在计时器启动时触发的事件。计时器在组件出现时自动启动，并通过控制器进行管理。\n整个布局通过 Column 布局保证组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct textTimerStart {\n  // 创建一个 TextTimerController 实例，用于控制计时器的启动和停止\n  textTimerController: TextTimerController = new TextTimerController()\n  \n  // 定义计时器的时间格式，初始值为 'mm:ss.SS'，表示分钟、秒和毫秒\n  @State format: string = 'mm:ss.SS'\n\n  build() {\n    Column() {\n      // 创建一个 Scroll 组件，用于在内容超出高度时进行滚动\n      Scroll()\n        .height('20%') // 设置 Scroll 组件的高度为屏幕高度的 20%\n      \n      // 创建一个 TextTimer 组件，用于显示倒计时时间\n      TextTimer({ \n        isCountDown: true, // 设置计时器为倒计时模式\n        count: 30000, // 设置倒计时的总时间为 30000 毫秒（30 秒）\n        controller: this.textTimerController // 绑定计时器控制器\n      })\n        .format(this.format) // 设置计时器的时间显示格式\n        .fontColor(Color.Black) // 设置计时器文本颜色为黑色\n        .fontSize(50) // 设置计时器文本字体大小为 50vp\n        .onTimer((utc: number, elapsedTime: number) => {\n          // 当计时器更新时触发的事件，输出当前的 UTC 时间和已过去的时间\n          console.info('textTimer notCountDown utc is：' + utc + ', elapsedTime: ' + elapsedTime)\n        })\n        .onAppear(() => {\n          // 当组件出现时触发的事件，启动计时器\n          this.textTimerController.start()\n        })\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个展示带有多个阴影效果的文本计时器的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上仅包含一个 TextTimer 组件，该组件通过设置字体大小和文本阴影效果来展示动态的文本内容。\n\nTextTimer 组件的样式包括字体大小和文本阴影。字体大小设置为 50vp，使得文本内容在屏幕上显得较大且易于阅读。文本阴影效果通过 @State 变量 textShadows 来定义，该变量包含多个 ShadowOptions 对象，每个对象定义了一个阴影的颜色、半径和偏移量。这些阴影效果叠加在一起，形成了一个多层次的阴影效果，增强了文本的视觉效果。\n\n组件的功能主要是展示一个带有动态阴影效果的文本计时器。TextTimer 组件会根据内部逻辑更新文本内容，并通过设置的阴影效果展示出来。用户可以看到文本内容随着时间变化而动态更新，同时阴影效果也会随之变化，增强了界面的动态感和视觉效果。",
                "code": "@Entry\n@Component\nstruct TextTimerExample {\n  // @State 变量 textShadows 用于存储文本阴影的配置，支持单个 ShadowOptions 或多个 ShadowOptions 数组\n  @State textShadows : ShadowOptions | Array<ShadowOptions> = [\n    { radius: 10, color: Color.Red, offsetX: 10, offsetY: 0 }, // 红色阴影，半径 10，水平偏移 10，垂直偏移 0\n    { radius: 10, color: Color.Black, offsetX: 20, offsetY: 0 }, // 黑色阴影，半径 10，水平偏移 20，垂直偏移 0\n    { radius: 10, color: Color.Brown, offsetX: 30, offsetY: 0 }, // 棕色阴影，半径 10，水平偏移 30，垂直偏移 0\n    { radius: 10, color: Color.Green, offsetX: 40, offsetY: 0 }, // 绿色阴影，半径 10，水平偏移 40，垂直偏移 0\n    { radius: 10, color: Color.Yellow, offsetX: 100, offsetY: 0 } // 黄色阴影，半径 10，水平偏移 100，垂直偏移 0\n  ]\n\n  build() {\n    Column({ space: 8 }) { // Column 布局，垂直排列子组件，子组件间距为 8vp\n      TextTimer() // TextTimer 组件，用于展示动态文本内容\n        .fontSize(50) // 设置字体大小为 50vp\n        .textShadow(this.textShadows) // 设置文本阴影效果，使用 @State 变量 textShadows 中的配置\n    }\n  }\n}"
            },
            {
                "description": "该组件实现了一个倒计时文本计时器，并提供了控制按钮来启动、暂停和重置计时器。布局采用垂直布局（Column），包含一个TextTimer组件和一个水平布局（Row），其中水平布局包含三个按钮。\n\n布局属性：\n- 整个布局宽度占据整个屏幕，高度根据内容自适应。\n- 垂直布局（Column）用于将TextTimer和按钮组垂直排列。\n- 水平布局（Row）用于将三个按钮水平排列。\n\n组件的样式和外观：\n- TextTimer组件的文本颜色为黑色（Color.Black），字体大小为50vp。\n- 按钮的样式未明确指定，但通常按钮会有默认的背景颜色和边框样式。\n\n组件的排列和嵌套关系：\n- TextTimer组件位于垂直布局的顶部。\n- 三个按钮（start、pause、reset）位于垂直布局的底部，并以水平布局方式排列。\n\n组件的功能和交互：\n- TextTimer组件用于显示倒计时，初始倒计时时间为30000毫秒（30秒）。\n- 按钮组提供了启动、暂停和重置计时器的功能。\n- 点击“start”按钮会启动计时器。\n- 点击“pause”按钮会暂停计时器。\n- 点击“reset”按钮会重置计时器到初始状态。\n- TextTimer组件还提供了onTimer事件，用于在计时器运行时输出当前的UTC时间和已流逝的时间。",
                "code": "@Entry\n@Component\nstruct TextTimerExample {\n  // 创建一个TextTimerController实例，用于控制计时器\n  textTimerController: TextTimerController = new TextTimerController()\n  \n  // 定义计时器的格式，初始值为'mm:ss.SS'\n  @State format: string = 'mm:ss.SS'\n\n  build() {\n    Column() {\n      // 创建一个TextTimer组件，设置为倒计时模式，初始倒计时时间为30000毫秒，并绑定控制器\n      TextTimer({ isCountDown: true, count: 30000, controller: this.textTimerController })\n        .format(this.format) // 设置计时器的显示格式\n        .fontColor(Color.Black) // 设置计时器文本颜色为黑色\n        .fontSize(50) // 设置计时器文本字体大小为50vp\n        .onTimer((utc: number, elapsedTime: number) => {\n          // 当计时器运行时，输出当前的UTC时间和已流逝的时间\n          console.info('textTimer notCountDown utc is：' + utc + ', elapsedTime: ' + elapsedTime)\n        })\n      \n      Row() {\n        // 创建一个按钮，点击时启动计时器\n        Button(\"start\").onClick(() => {\n          this.textTimerController.start()\n        })\n        \n        // 创建一个按钮，点击时暂停计时器\n        Button(\"pause\").onClick(() => {\n          this.textTimerController.pause()\n        })\n        \n        // 创建一个按钮，点击时重置计时器\n        Button(\"reset\").onClick(() => {\n          this.textTimerController.reset()\n        })\n      }\n    }\n  }\n}"
            },
            {
                "description": "该示例实现了一个包含两个简易秒表的界面，其中一个为倒计时器，另一个为正计时器。界面背景为浅灰色，计时器开始后会实时显示时间变化。倒计时器开始后，背景会变成黑色，正计时器开始后，背景会变成灰色。\n\n布局属性：\n- 整个界面采用Row布局，高度占据整个屏幕。\n- 内部包含一个Column布局，宽度占据整个屏幕。\n- 两个TextTimer组件分别用于倒计时和正计时，通过Column布局垂直排列。\n- 按钮组采用Row布局，水平排列，按钮之间有10vp的间距，按钮组与计时器之间有20vp的间距。\n\n组件的样式和外观：\n- 计时器背景为一个圆形，倒计时器开始后背景为黑色（0xFF232323），正计时器开始后背景为灰色（0xFF717171），未开始时背景为浅灰色（0xFF929292）。\n- 计时器内部的文本颜色为白色（Color.White）。\n- 按钮的样式包括背景颜色、边框圆角、宽度和高度等属性，支持不同的样式展示。\n\n组件的排列和嵌套关系：\n- 整个界面采用Row布局，内部包含一个Column布局。\n- Column布局中包含两个TextTimer组件和一个按钮组。\n- 按钮组采用Row布局，水平排列，按钮之间有10vp的间距。\n\n组件的功能和交互：\n- 计时器开始后会实时显示时间变化，倒计时器显示剩余时间，正计时器显示已经过去的时间。\n- 按钮组包含三个按钮：“start”、“pause”和“reset”，分别用于启动、暂停和重置计时器。\n- 点击“start”按钮后，两个计时器开始计时；点击“pause”按钮后，两个计时器暂停计时；点击“reset”按钮后，两个计时器重置为初始状态。",
                "code": "// 自定义ContentModifier类，用于修改TextTimer组件的内容\nclass MyTextTimerModifier implements ContentModifier<TextTimerConfiguration> {\n  constructor() {\n  }\n  // 应用内容修改器，返回一个WrappedBuilder对象\n  applyContent() : WrappedBuilder<[TextTimerConfiguration]> {\n    return wrapBuilder(buildTextTimer)\n  }\n}\n\n// 构建TextTimer组件的Builder函数\n@Builder function buildTextTimer(config: TextTimerConfiguration) {\n  Column() {\n    // 使用Stack布局，内容居中对齐\n    Stack({ alignContent: Alignment.Center }) {\n      // 绘制一个圆形背景，根据计时器状态设置不同的背景颜色\n      Circle({ width: 150, height: 150 }).fill(config.started ? (config.isCountDown ? 0xFF232323 : 0xFF717171) : 0xFF929292)\n      Column(){\n        // 显示计时器类型（倒计时或正计时），文本颜色为白色\n        Text(config.isCountDown ? \"倒计时\" : \"正计时\").fontColor(Color.White)\n        // 显示计时器时间，文本颜色为白色\n        Text(\n          (config.isCountDown ? \"剩余\" : \"已经过去了\") + (config.isCountDown?\n            (Math.max(config.count / 1000 - config.elapsedTime / 100,0)).toFixed(1) + \"/\" + (config.count / 1000).toFixed(0)\n            :((config.elapsedTime / 100).toFixed(0))\n          ) + \"秒\"\n        ).fontColor(Color.White)\n      }\n    }\n  }\n}\n\n// 主入口组件\n@Entry\n@Component\nstruct Index {\n  // 倒计时器的初始时间，单位为毫秒\n  @State count: number = 10000\n  // 自定义的TextTimer内容修改器\n  @State myTimerModifier: MyTextTimerModifier = new MyTextTimerModifier()\n  // 倒计时器的控制器\n  countDownTextTimerController: TextTimerController = new TextTimerController()\n  // 正计时器的控制器\n  countUpTextTimerController: TextTimerController = new TextTimerController()\n\n  build() {\n    Row() {\n      Column() {\n        // 倒计时器组件，使用自定义内容修改器，监听计时器事件\n        TextTimer({isCountDown: true, count: this.count, controller: this.countDownTextTimerController})\n          .contentModifier(this.myTimerModifier)\n          .onTimer((utc: number, elapsedTime: number) => {\n            console.info('textTimer onTimer utc is：' + utc + ', elapsedTime: ' + elapsedTime)\n          })\n          .margin(10)\n        // 正计时器组件，使用自定义内容修改器，监听计时器事件\n        TextTimer({isCountDown: false, controller: this.countUpTextTimerController})\n          .contentModifier(this.myTimerModifier)\n          .onTimer((utc: number, elapsedTime: number) => {\n            console.info('textTimer onTimer utc is：' + utc + ', elapsedTime: ' + elapsedTime)\n          })\n        // 按钮组，用于控制计时器的启动、暂停和重置\n        Row() {\n          Button(\"start\").onClick(()=>{\n            this.countDownTextTimerController.start()\n            this.countUpTextTimerController.start()\n          }).margin(10)\n          Button(\"pause\").onClick(()=>{\n            this.countDownTextTimerController.pause()\n            this.countUpTextTimerController.pause()\n          }).margin(10)\n          Button(\"reset\").onClick(()=>{\n            this.countDownTextTimerController.reset()\n            this.countUpTextTimerController.reset()\n          }).margin(10)\n        }.margin(20)\n      }.width('100%')\n    }.height('100%')\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "TreeView": {
        "description": "树视图作为一种分层显示的列表，适合显示嵌套结构。拥有父列表项和子列表项，可展开或折叠。用于效率型应用，如备忘录、电子邮件、图库中的侧边导航栏中。",
        "details": "该组件从API Version 10开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "TreeView({ treeController: TreeController })",
                "params": {
                    "treeController": {
                        "type": "TreeController",
                        "required": true,
                        "description": "树视图组件的控制器，可以将此对象绑定至树视图组件，然后通过它控制树的节点信息，同一个控制器不可以控制多个树视图组件。"
                    }
                }
            }
        ],
        "attributes": {
            "TreeController": {
                "description": "树视图组件的控制器，可以将此对象绑定至树视图组件，然后通过它控制树的节点信息，同一个控制器不可以控制多个树视图组件。",
                "params": {}
            },
            "TreeListenerManager": {
                "description": "树视图组件的监听器，可以将此对象绑定至树视图组件，然后通过它监听树的节点的变化，同一个监听器不可以控制多个树视图组件。",
                "params": {}
            }
        },
        "events": {
            "addNode": {
                "description": "点击某个节点后，调用该方法可以触发新增孩子节点。",
                "params": {
                    "nodeParam": {
                        "type": "NodeParam",
                        "required": false,
                        "description": "新增节点的参数。"
                    }
                }
            },
            "removeNode": {
                "description": "点击某个节点后，调用该方法可以触发删除该节点。",
                "params": {}
            },
            "modifyNode": {
                "description": "点击某个节点后，调用该方法可以触发修改该节点。",
                "params": {}
            },
            "buildDone": {
                "description": "建立树视图。节点增加完毕后，必须调用该方法，触发树信息的保存。",
                "params": {}
            },
            "refreshNode": {
                "description": "更新树视图。调用该方法，更新当前节点的信息。",
                "params": {
                    "parentId": {
                        "type": "number",
                        "required": true,
                        "description": "父节点Id。"
                    },
                    "parentSubTitle": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "父节点副文本。"
                    },
                    "currentSubtitle": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "当前节点副文本。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用TreeView组件来实现一个树形结构的视图，并提供了对树节点进行增删改操作的功能。布局上，TreeView组件嵌套在SideBarContainer中，左侧显示树形结构，右侧显示操作按钮。样式上，按钮具有统一的背景颜色和圆角边框，文本居中对齐。功能上，用户可以通过点击按钮来添加、修改或删除树节点，树节点的点击事件会更新显示的节点ID。",
                "code": "import { TreeController, TreeListener, TreeListenerManager, TreeListenType, NodeParam, TreeView, CallbackParam } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct TreeViewDemo {\n  private treeController: TreeController = new TreeController(); // 创建TreeController实例，用于管理树节点的操作\n  private treeListener: TreeListener = TreeListenerManager.getInstance().getTreeListener(); // 获取TreeListener实例，用于监听树节点的事件\n  @State clickNodeId: number = 0; // 状态变量，用于存储当前点击的节点ID\n\n  aboutToDisappear(): void {\n    // 组件即将消失时，取消所有树节点事件的监听\n    this.treeListener.off(TreeListenType.NODE_CLICK, undefined);\n    this.treeListener.off(TreeListenType.NODE_ADD, undefined);\n    this.treeListener.off(TreeListenType.NODE_DELETE, undefined);\n    this.treeListener.off(TreeListenType.NODE_MOVE, undefined);\n  }\n\n  @Builder menuBuilder1() {\n    // 构建一个菜单栏，包含新增、删除和重命名三个按钮\n    Flex({ direction: FlexDirection.Column, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n      Text('新增').fontSize(16).width(100).height(30).textAlign(TextAlign.Center)\n        .onClick((event: ClickEvent) => {\n          this.treeController.addNode(); // 点击“新增”按钮时，调用treeController的addNode方法添加节点\n        })\n      Divider() // 分隔线\n      Text('删除').fontSize(16).width(100).height(30).textAlign(TextAlign.Center)\n        .onClick((event: ClickEvent) => {\n          this.treeController.removeNode(); // 点击“删除”按钮时，调用treeController的removeNode方法删除节点\n        })\n      Divider() // 分隔线\n      Text('重命名').fontSize(16).width(100).height(30).textAlign(TextAlign.Center)\n        .onClick((event: ClickEvent) => {\n          this.treeController.modifyNode(); // 点击“重命名”按钮时，调用treeController的modifyNode方法修改节点\n        })\n    }.width(100).border({width: 1, color: 0x80808a, radius: '16dp'}) // 设置菜单栏的宽度、边框宽度和颜色、圆角半径\n  }\n\n  aboutToAppear(): void {\n    // 组件即将显示时，设置树节点事件的监听\n    this.treeListener.on(TreeListenType.NODE_CLICK, (callbackParam: CallbackParam) => {\n      this.clickNodeId = callbackParam.currentNodeId; // 监听节点点击事件，更新clickNodeId状态变量\n    })\n    this.treeListener.on(TreeListenType.NODE_ADD, (callbackParam: CallbackParam) => {\n      this.clickNodeId = callbackParam.currentNodeId; // 监听节点添加事件，更新clickNodeId状态变量\n    })\n    this.treeListener.on(TreeListenType.NODE_DELETE, (callbackParam: CallbackParam) => {\n      this.clickNodeId = callbackParam.currentNodeId; // 监听节点删除事件，更新clickNodeId状态变量\n    })\n    this.treeListener.once(TreeListenType.NODE_MOVE, (callbackParam: CallbackParam) => {\n      this.clickNodeId = callbackParam.currentNodeId; // 监听节点移动事件，更新clickNodeId状态变量\n    })\n\n    let normalResource: Resource = $r('app.media.ic_public_collect_normal'); // 获取普通状态下的图标资源\n    let selectedResource: Resource = $r('app.media.ic_public_collect_selected'); // 获取选中状态下的图标资源\n    let editResource: Resource = $r('app.media.ic_public_collect_edit'); // 获取编辑状态下的图标资源\n    let nodeParam: NodeParam = { parentNodeId:-1, currentNodeId: 1, isFolder: true, icon: normalResource, selectedIcon: selectedResource,\n      editIcon: editResource, primaryTitle: \"目录1验证悬浮框自适应效果是否OK\",\n      secondaryTitle: \"6\" }; // 创建一个树节点参数对象\n    this.treeController\n      .addNode(nodeParam) // 添加根节点\n      .addNode({parentNodeId:1, currentNodeId: 2, isFolder: false, primaryTitle: \"项目1_1\" }) // 添加子节点\n      .addNode({ parentNodeId:-1, currentNodeId: 7, isFolder: true, primaryTitle: \"目录2\" }) // 添加根节点\n      .addNode({ parentNodeId:-1, currentNodeId: 23, isFolder: true, icon: normalResource, selectedIcon: selectedResource,\n        editIcon: editResource, primaryTitle: \"目录3\" }) // 添加根节点\n      .addNode({ parentNodeId:-1, currentNodeId: 24, isFolder: false, primaryTitle: \"项目4\" }) // 添加根节点\n      .addNode({ parentNodeId:-1, currentNodeId: 31, isFolder: true, icon: normalResource, selectedIcon: selectedResource,\n        editIcon: editResource, primaryTitle: \"目录5\", secondaryTitle: \"0\" }) // 添加根节点\n      .addNode({ parentNodeId:-1, currentNodeId: 32, isFolder: true, icon: normalResource, selectedIcon: selectedResource,\n        editIcon: editResource, primaryTitle: \"目录6\", secondaryTitle: \"0\" }) // 添加根节点\n      .addNode({ parentNodeId:32, currentNodeId: 35, isFolder: true, icon: normalResource, selectedIcon: selectedResource,\n        editIcon: editResource, primaryTitle: \"目录6-1\", secondaryTitle: \"0\" }) // 添加子节点\n      .addNode({ parentNodeId:-1, currentNodeId: 33, isFolder: true, icon: normalResource, selectedIcon: selectedResource,\n        editIcon: editResource, primaryTitle: \"目录7\", secondaryTitle: \"0\" }) // 添加根节点\n      .addNode({ parentNodeId:33, currentNodeId: 34, isFolder: false, primaryTitle: \"项目8\" }) // 添加子节点\n      .addNode({ parentNodeId:-1, currentNodeId: 36, isFolder: false, primaryTitle: \"项目9\" }) // 添加根节点\n      .buildDone(); // 完成树节点的构建\n    this.treeController.refreshNode(-1, \"父节点\", \"子节点\"); // 刷新树节点\n  }\n\n  build() {\n    Column(){\n      SideBarContainer(SideBarContainerType.Embed) // 创建一个嵌入式的侧边栏容器\n      {\n        TreeView({ treeController: this.treeController }) // 创建TreeView组件，绑定treeController\n        Row() {\n          Divider().vertical(true).strokeWidth(2).color(0x000000).lineCap(LineCapStyle.Round) // 创建垂直分隔线\n          Column({ space: 30 }) {\n            Text('ClickNodeId=' + this.clickNodeId).fontSize('16fp') // 显示当前点击的节点ID\n            Button('Add', { type: ButtonType.Normal, stateEffect: true })\n              .borderRadius(8).backgroundColor(0x317aff).width(90)\n              .onClick((event: ClickEvent) => {\n                this.treeController.addNode(); // 点击“Add”按钮时，调用treeController的addNode方法添加节点\n              })\n            Button('Modify', { type: ButtonType.Normal, stateEffect: true })\n              .borderRadius(8).backgroundColor(0x317aff).width(90)\n              .onClick((event: ClickEvent) => {\n                this.treeController.modifyNode(); // 点击“Modify”按钮时，调用treeController的modifyNode方法修改节点\n              })\n            Button('Remove', { type: ButtonType.Normal, stateEffect: true })\n              .borderRadius(8).backgroundColor(0x317aff).width(120)\n              .onClick((event: ClickEvent) => {\n                this.treeController.removeNode(); // 点击“Remove”按钮时，调用treeController的removeNode方法删除节点\n              })\n          }.height('100%').width('70%').alignItems(HorizontalAlign.Start).margin(10) // 设置按钮列的高度、宽度、对齐方式和边距\n        }\n      }\n      .focusable(true) // 设置侧边栏容器可聚焦\n      .showControlButton(false) // 隐藏控制按钮\n      .showSideBar(true) // 显示侧边栏\n    }\n  }}"
            }
        ],
        "is_common_attrs": true
    },
    "Blank": {
        "description": "空白填充组件，在容器主轴方向上，空白填充组件具有自动填充容器空余部分的能力。仅当父组件为Row、Column、Flex时生效。",
        "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "Blank(min?: number | string)",
                "params": {
                    "min": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": false,
                        "description": "空白填充组件在容器主轴上的最小大小。",
                        "default": 0
                    }
                }
            }
        ],
        "attributes": {
            "color": {
                "description": "设置空白填充的填充颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "空白填充的填充颜色。",
                        "default": "Color.Transparent"
                    }
                }
            }
        },
        "events": {
            "通用事件": {
                "description": "支持通用事件。"
            }
        },
        "rules": [
            "不支持设置百分比。",
            "负值使用默认值。",
            "当最小值大于容器可用空间时，使用最小值作为自身大小并超出容器。"
        ],
        "examples": [
            {
                "description": "该组件通过Column和Row布局实现了一个简单的界面，展示了如何在横竖屏状态下使用Blank组件来占满空余空间。布局宽度占据整个屏幕，内边距为20vp。组件的垂直方向上包含一个Row组件，Row组件内部包含一个Text组件、一个Blank组件和一个Toggle组件。Text组件用于显示文本内容，Toggle组件用于切换开关状态。Blank组件用于在Text和Toggle组件之间占满剩余空间，使得Toggle组件始终位于Row的右侧。\n\n布局属性：\n- Column组件：宽度占据整个屏幕，背景颜色为0xEFEFEF，内边距为20vp。\n- Row组件：宽度占据整个屏幕，背景颜色为0xFFFFFF，边框圆角为15vp，内边距为左侧12vp。\n- Text组件：字体大小为18vp。\n- Toggle组件：类型为Switch，内边距为顶部14vp、底部14vp、左侧6vp、右侧6vp。\n\n组件的样式和外观：\n- Column组件：背景颜色为0xEFEFEF，内边距为20vp。\n- Row组件：背景颜色为0xFFFFFF，边框圆角为15vp，内边距为左侧12vp。\n- Text组件：字体大小为18vp。\n- Toggle组件：类型为Switch，内边距为顶部14vp、底部14vp、左侧6vp、右侧6vp。\n\n组件的排列和嵌套关系：\n- Column组件包含一个Row组件。\n- Row组件内部包含一个Text组件、一个Blank组件和一个Toggle组件。\n- Text组件和Toggle组件之间通过Blank组件进行分隔。\n\n组件的功能和交互：\n- Toggle组件用于切换开关状态，用户可以通过点击Toggle组件来切换开关状态。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct BlankExample {\n  build() {\n    Column() {\n      Row() {\n        Text('Bluetooth').fontSize(18) // 显示文本内容，字体大小为18vp\n        Blank() // 占满Text和Toggle组件之间的剩余空间\n        Toggle({ type: ToggleType.Switch }).margin({ top: 14, bottom: 14, left: 6, right: 6 }) // 切换开关状态，内边距为顶部14vp、底部14vp、左侧6vp、右侧6vp\n      }.width('100%').backgroundColor(0xFFFFFF).borderRadius(15).padding({ left: 12 }) // Row组件宽度占据整个屏幕，背景颜色为0xFFFFFF，边框圆角为15vp，内边距为左侧12vp\n    }.backgroundColor(0xEFEFEF).padding(20) // Column组件宽度占据整个屏幕，背景颜色为0xEFEFEF，内边距为20vp\n  }\n}"
            },
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用Blank组件来控制组件之间的空白填充。Blank组件通常用于在布局中创建空白间隔，以便更好地组织和排列组件。示例中包含两个Row组件，每个Row组件内部包含一个Text组件、一个Blank组件和一个Toggle组件。第一个Row组件中的Blank组件未设置宽度，而第二个Row组件中的Blank组件设置了最小宽度为160。通过这种方式，可以观察到Blank组件在父组件未设置宽度时的行为以及min参数的效果。\n\n布局属性：\n- Column组件：作为根布局，设置了内边距为20，背景颜色为0xEFEFEF，宽度为100%。\n- Row组件：作为子布局，设置了背景颜色为0xFFFFFF，边框圆角为15，内边距为左12。\n- Blank组件：用于创建空白间隔，第一个Blank组件未设置宽度，第二个Blank组件设置了最小宽度为160。\n\n组件的样式和外观：\n- Text组件：字体大小为18。\n- Toggle组件：类型为Switch，设置了上下左右的外边距为14、14、6、6。\n- Blank组件：颜色为黄色。\n\n组件的排列和嵌套关系：\n- Column组件包含两个Row组件，每个Row组件内部依次包含一个Text组件、一个Blank组件和一个Toggle组件。\n- Row组件内部的组件按水平布局排列。\n\n组件的功能和交互：\n- Toggle组件：支持开关类型的交互，用户可以通过点击Toggle组件来切换开关状态。\n- Blank组件：用于在组件之间创建空白间隔，通过设置min参数可以控制空白间隔的最小宽度。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct BlankExample {\n  build() {\n    Column({ space: 20 }) {\n      // blank父组件不设置宽度时，Blank失效，可以通过设置min最小宽度填充固定宽度\n      Row() {\n        Text('Bluetooth').fontSize(18) // 显示文本“Bluetooth”，字体大小为18\n        Blank().color(Color.Yellow) // 创建一个未设置宽度的Blank组件，颜色为黄色\n        Toggle({ type: ToggleType.Switch }).margin({ top: 14, bottom: 14, left: 6, right: 6 }) // 创建一个开关类型的Toggle组件，设置上下左右的外边距\n      }.backgroundColor(0xFFFFFF).borderRadius(15).padding({ left: 12 }) // Row组件的背景颜色为白色，边框圆角为15，左内边距为12\n\n      Row() {\n        Text('Bluetooth').fontSize(18) // 显示文本“Bluetooth”，字体大小为18\n        // 设置最小宽度为160\n        Blank('160').color(Color.Yellow) // 创建一个最小宽度为160的Blank组件，颜色为黄色\n        Toggle({ type: ToggleType.Switch }).margin({ top: 14, bottom: 14, left: 6, right: 6 }) // 创建一个开关类型的Toggle组件，设置上下左右的外边距\n      }.backgroundColor(0xFFFFFF).borderRadius(15).padding({ left: 12 }) // Row组件的背景颜色为白色，边框圆角为15，左内边距为12\n\n    }.backgroundColor(0xEFEFEF).padding(20).width('100%') // Column组件的背景颜色为浅灰色，内边距为20，宽度为100%\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Divider": {
        "description": "提供分隔器组件，分隔不同内容块/内容元素。",
        "details": null,
        "interfaces": [
            {
                "description": "Divider()",
                "params": {}
            }
        ],
        "attributes": {
            "vertical": {
                "description": "设置分割线的方向。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "使用水平分割线还是垂直分割线。",
                        "default": false
                    }
                }
            },
            "color": {
                "description": "设置分割线的颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "分割线颜色。",
                        "default": "#33182431"
                    }
                }
            },
            "strokeWidth": {
                "description": "设置分割线的宽度。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "分割线宽度。",
                        "default": "1px"
                    }
                }
            },
            "lineCap": {
                "description": "设置分割线的端点样式。",
                "params": {
                    "value": {
                        "type": "LineCapStyle",
                        "required": true,
                        "description": "分割线的端点样式。",
                        "default": "LineCapStyle.Butt"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件展示了如何在鸿蒙ArkUI中使用Divider组件来实现水平和垂直分割线。布局宽度占据整个屏幕，内边距为顶部24vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组列表或按钮。列表和按钮以垂直布局方式排列，列表项之间的间距均匀分布，且对齐方式为居中对齐。\n\n水平分割线用于分隔不同的列表部分，分割线的颜色为#F1F3F5，宽度为8vp。垂直分割线用于分隔按钮，分割线的颜色为#182431，高度为22vp，垂直方向上居中对齐，且左右有8vp的边距。\n\n列表项的样式包括背景颜色、字体大小、字体颜色、文本对齐方式等属性，支持不同的样式展示。按钮的样式包括背景颜色、边框圆角、宽度和高度、字体大小、字体颜色等属性，支持不同的样式展示。按钮组之间通过Flex组件进行分隔。\n\n整个布局通过Column布局保证列表和按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct DividerExample {\n  build() {\n    Column() {\n      // 使用横向分割线场景\n      Text('Horizontal divider').fontSize(9).fontColor(0xCCCCCC) // 标题文本，字体大小为9，颜色为#CCCCCC\n      List() {\n        ForEach([1, 2, 3], (item: number) => {\n          ListItem() {\n            Text('list' + item).width('100%').fontSize(14).fontColor('#182431').textAlign(TextAlign.Start) // 列表项文本，宽度为100%，字体大小为14，颜色为#182431，文本左对齐\n          }.width(244).height(48) // 列表项宽度为244vp，高度为48vp\n        }, (item: number) => item.toString())\n      }.padding({ left: 24, bottom: 8 }) // 列表左内边距为24vp，底部内边距为8vp\n\n      Divider().strokeWidth(8).color('#F1F3F5') // 水平分割线，宽度为8vp，颜色为#F1F3F5\n      List() {\n        ForEach([4, 5], (item: number) => {\n          ListItem() {\n            Text('list' + item).width('100%').fontSize(14).fontColor('#182431').textAlign(TextAlign.Start) // 列表项文本，宽度为100%，字体大小为14，颜色为#182431，文本左对齐\n          }.width(244).height(48) // 列表项宽度为244vp，高度为48vp\n        }, (item: number) => item.toString())\n      }.padding({ left: 24, top: 8 }) // 列表左内边距为24vp，顶部内边距为8vp\n\n      // 使用纵向分割线场景\n      Text('Vertical divider').fontSize(9).fontColor(0xCCCCCC) // 标题文本，字体大小为9，颜色为#CCCCCC\n      Column() {\n        Column() {\n          Row().width(288).height(64).backgroundColor('#30C9F0').opacity(0.3) // 背景行，宽度为288vp，高度为64vp，背景颜色为#30C9F0，透明度为0.3\n          Row() {\n            Button('Button')\n              .width(136)\n              .height(22)\n              .fontSize(16)\n              .fontColor('#007DFF')\n              .fontWeight(500)\n              .backgroundColor(Color.Transparent) // 按钮，宽度为136vp，高度为22vp，字体大小为16，颜色为#007DFF，字体粗细为500，背景透明\n            Divider().vertical(true).height(22).color('#182431').opacity(0.6).margin({ left: 8, right: 8 }) // 垂直分割线，高度为22vp，颜色为#182431，透明度为0.6，左右边距为8vp\n            Button('Button')\n              .width(136)\n              .height(22)\n              .fontSize(16)\n              .fontColor('#007DFF')\n              .fontWeight(500)\n              .backgroundColor(Color.Transparent) // 按钮，宽度为136vp，高度为22vp，字体大小为16，颜色为#007DFF，字体粗细为500，背景透明\n          }.margin({ top: 17 }) // 按钮行，顶部外边距为17vp\n        }\n        .width(336)\n        .height(152)\n        .backgroundColor('#FFFFFF')\n        .borderRadius(24)\n        .padding(24) // 按钮列，宽度为336vp，高度为152vp，背景颜色为#FFFFFF，边框圆角为24vp，内边距为24vp\n      }\n      .width('100%')\n      .height(168)\n      .backgroundColor('#F1F3F5')\n      .justifyContent(FlexAlign.Center)\n      .margin({ top: 8 }) // 按钮列容器，宽度为100%，高度为168vp，背景颜色为#F1F3F5，内容居中对齐，顶部外边距为8vp\n    }.width('100%').padding({ top: 24 }) // 主列，宽度为100%，顶部内边距为24vp\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Canvas": {
        "description": "提供画布组件，用于自定义绘制图形。",
        "details": "该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "Canvas(context?: CanvasRenderingContext2D | DrawingRenderingContext)",
                "params": {
                    "context": {
                        "type": [
                            "CanvasRenderingContext2D",
                            "DrawingRenderingContext"
                        ],
                        "description": "CanvasRenderingContext2D: 不支持多个Canvas共用一个CanvasRenderingContext2D对象，具体描述见CanvasRenderingContext2D对象。DrawingRenderingContext: 不支持多个Canvas共用一个DrawingRenderingContext对象，具体描述见DrawingRenderingContext对象。"
                    }
                }
            },
            {
                "description": "Canvas(context: CanvasRenderingContext2D | DrawingRenderingContext, imageAIOptions: ImageAIOptions)",
                "params": {
                    "context": {
                        "type": [
                            "CanvasRenderingContext2D",
                            "DrawingRenderingContext"
                        ],
                        "required": true,
                        "description": "CanvasRenderingContext2D: 不支持多个Canvas共用一个CanvasRenderingContext2D对象，具体描述见CanvasRenderingContext2D对象。DrawingRenderingContext: 不支持多个Canvas共用一个DrawingRenderingContext对象，具体描述见DrawingRenderingContext对象。"
                    },
                    "imageAIOptions": {
                        "type": "ImageAIOptions",
                        "required": true,
                        "description": "给组件设置一个AI分析选项，通过此项可配置分析类型或绑定一个分析控制器。"
                    }
                }
            }
        ],
        "attributes": {
            "enableAnalyzer12+": {
                "description": "设置组件支持AI分析，需要搭配context中的StartImageAnalyzer和StopImageAnalyzer一起使用。不能和overlay属性同时使用，两者同时设置时overlay中CustomBuilder属性将失效。该特性依赖设备能力。",
                "params": {
                    "enable": {
                        "type": "boolean",
                        "required": true,
                        "description": "组件支持AI分析，设置为true时，组件可进行AI分析。"
                    }
                }
            }
        },
        "events": {
            "onReady": {
                "description": "Canvas组件初始化完成时或者Canvas组件发生大小变化时的事件回调，当该事件被触发时画布被清空，该事件之后Canvas组件宽高确定且可获取，可使用Canvas相关API进行绘制。当Canvas组件仅发生位置变化时，只触发onAreaChange事件、不触发onReady事件。onAreaChange事件在onReady事件后触发。",
                "params": {
                    "event": {
                        "type": "() => void",
                        "required": true,
                        "description": "事件回调函数。"
                    }
                }
            }
        },
        "examples": []
    },
    "CanvasGradient": {
        "description": "渐变对象。",
        "details": "从 API Version 8 开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "addColorStop(offset: number, color: string): void",
                "params": {
                    "offset": {
                        "type": "number",
                        "required": true,
                        "description": "设置渐变点距离起点的位置占总体长度的比例，范围为0到1。"
                    },
                    "color": {
                        "type": "string",
                        "required": true,
                        "description": "设置渐变的颜色。颜色格式参考[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)中string类型说明"
                    }
                }
            }
        ],
        "attributes": {},
        "events": {},
        "examples": []
    },
    "CanvasPattern": {
        "description": "一个Object对象，使用createPattern方法创建，通过指定图像和重复方式创建图片填充的模板。",
        "details": null,
        "interfaces": [
            {
                "description": "setTransform(transform?: Matrix2D): void",
                "params": {
                    "transform": {
                        "type": "Matrix2D",
                        "required": false,
                        "description": "转换矩阵。"
                    }
                }
            }
        ],
        "attributes": {},
        "events": {},
        "rules": null,
        "examples": [],
        "is_common_attrs": true
    },
    "CanvasRenderingContext2D": {
        "description": "使用RenderingContext在Canvas组件上进行绘制，绘制对象可以是矩形、文本、图片等。",
        "details": null,
        "interfaces": [
            {
                "description": "CanvasRenderingContext2D(settings?: RenderingContextSettings, unit?: LengthMetricsUnit)",
                "params": {
                    "settings": {
                        "type": "RenderingContextSettings",
                        "required": false,
                        "description": "用来配置CanvasRenderingContext2D对象的参数，见RenderingContextSettings。"
                    },
                    "unit": {
                        "type": "LengthMetricsUnit",
                        "required": false,
                        "description": "用来配置CanvasRenderingContext2D对象的单位模式，配置后无法更改，见LengthMetricsUnit。",
                        "default": "DEFAULT"
                    }
                }
            }
        ],
        "attributes": {
            "fillStyle": {
                "description": "填充颜色或样式。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "填充颜色或样式。"
                    }
                }
            },
            "lineWidth": {
                "description": "线条宽度。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "线条宽度。"
                    }
                }
            },
            "strokeStyle": {
                "description": "描边颜色或样式。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "描边颜色或样式。"
                    }
                }
            },
            "lineCap": {
                "description": "线条端点样式。",
                "params": {
                    "value": {
                        "type": "CanvasLineCap",
                        "required": true,
                        "description": "线条端点样式。"
                    }
                }
            },
            "lineJoin": {
                "description": "线条连接样式。",
                "params": {
                    "value": {
                        "type": "CanvasLineJoin",
                        "required": true,
                        "description": "线条连接样式。"
                    }
                }
            },
            "miterLimit": {
                "description": "斜接面限制比例。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "斜接面限制比例。"
                    }
                }
            },
            "font": {
                "description": "字体样式。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "字体样式。"
                    }
                }
            },
            "textAlign": {
                "description": "文本对齐方式。",
                "params": {
                    "value": {
                        "type": "CanvasTextAlign",
                        "required": true,
                        "description": "文本对齐方式。"
                    }
                }
            },
            "textBaseline": {
                "description": "文本基线对齐方式。",
                "params": {
                    "value": {
                        "type": "CanvasTextBaseline",
                        "required": true,
                        "description": "文本基线对齐方式。"
                    }
                }
            },
            "globalAlpha": {
                "description": "全局透明度。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "全局透明度。"
                    }
                }
            },
            "lineDashOffset": {
                "description": "虚线偏移量。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "虚线偏移量。"
                    }
                }
            },
            "globalCompositeOperation": {
                "description": "全局合成操作。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "全局合成操作。"
                    }
                }
            },
            "shadowBlur": {
                "description": "阴影模糊级别。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "阴影模糊级别。"
                    }
                }
            },
            "shadowColor": {
                "description": "阴影颜色。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "阴影颜色。"
                    }
                }
            },
            "shadowOffsetX": {
                "description": "阴影水平偏移。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "阴影水平偏移。"
                    }
                }
            },
            "shadowOffsetY": {
                "description": "阴影垂直偏移。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "阴影垂直偏移。"
                    }
                }
            },
            "imageSmoothingEnabled": {
                "description": "是否启用图像平滑。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否启用图像平滑。"
                    }
                }
            },
            "height": {
                "description": "画布高度。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "画布高度。"
                    }
                }
            },
            "width": {
                "description": "画布宽度。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "画布宽度。"
                    }
                }
            },
            "imageSmoothingQuality": {
                "description": "图像平滑质量。",
                "params": {
                    "value": {
                        "type": "ImageSmoothingQuality",
                        "required": true,
                        "description": "图像平滑质量。"
                    }
                }
            },
            "direction": {
                "description": "文本方向。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "文本方向。"
                    }
                }
            },
            "filter": {
                "description": "图像滤镜。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "图像滤镜。"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [],
        "is_common_attrs": true
    },
    "DrawingRenderingContext": {
        "description": "使用DrawingRenderingContext在Canvas组件上进行绘制，绘制对象可以是矩形、文本、图片等。",
        "details": "从API Version 12开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "DrawingRenderingContext(unit?: LengthMetricsUnit)",
                "params": {
                    "unit": {
                        "type": "LengthMetricsUnit",
                        "description": "用来配置DrawingRenderingContext对象的单位模式，配置后无法更改，配置方法同CanvasRenderingContext2D。",
                        "default": "DEFAULT"
                    }
                }
            }
        ],
        "attributes": {
            "size": {
                "description": "Context大小的宽和高。默认单位为vp。",
                "params": {
                    "width": {
                        "type": "number",
                        "description": "Context的宽度。"
                    },
                    "height": {
                        "type": "number",
                        "description": "Context的高度。"
                    }
                }
            },
            "canvas": {
                "description": "绘制模块的Canvas对象，具体描述见绘制模块中的Canvas对象。",
                "params": {
                    "value": {
                        "type": "Canvas",
                        "description": "Canvas对象。"
                    }
                }
            }
        },
        "events": {
            "invalidate": {
                "description": "使组件无效，触发组件的重新渲染。",
                "params": {}
            }
        },
        "examples": []
    },
    "ImageBitmap": {
        "description": "ImageBitmap对象可以存储canvas渲染的像素数据。",
        "details": null,
        "interfaces": [
            {
                "description": "ImageBitmap(data: PixelMap, unit?: LengthMetricsUnit)",
                "params": {
                    "data": {
                        "type": "PixelMap",
                        "required": true,
                        "description": "通过PixelMap创建ImageBitmap对象。"
                    },
                    "unit": {
                        "type": "LengthMetricsUnit",
                        "required": false,
                        "description": "用来配置ImageBitmap对象的单位模式，配置后无法动态更改，配置方法同CanvasRenderingContext2D。",
                        "default": "DEFAULT"
                    }
                }
            },
            {
                "description": "ImageBitmap(src: string, unit?: LengthMetricsUnit)",
                "params": {
                    "src": {
                        "type": "string",
                        "required": true,
                        "description": "图片的数据源支持本地图片。string格式用于加载本地图片，例如ImageBitmap(\"common/images/example.jpg\")，支持本地图片类型：bmp、jpg、png、svg和webp类型。"
                    },
                    "unit": {
                        "type": "LengthMetricsUnit",
                        "required": false,
                        "description": "用来配置ImageBitmap对象的单位模式，配置后无法动态更改，配置方法同CanvasRenderingContext2D。",
                        "default": "DEFAULT"
                    }
                }
            }
        ],
        "attributes": {
            "width": {
                "description": "ImageBitmap的像素宽度。默认单位为vp。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "ImageBitmap的像素宽度。"
                    }
                }
            },
            "height": {
                "description": "ImageBitmap的像素高度。默认单位为vp。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "ImageBitmap的像素高度。"
                    }
                }
            }
        },
        "events": {
            "close": {
                "description": "close(): void\n释放ImageBitmap对象相关联的所有图形资源，并将ImageBitmap对象的宽高置为0。",
                "params": {}
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Flex 布局实现了一个展示图像的界面。布局宽度占据整个屏幕，高度设为 100%，背景颜色为黄色。组件的垂直方向上居中对齐，包含一个 Canvas 组件用于绘制图像。\nCanvas 组件的宽度为 100%，高度为 100%，背景颜色为黄色。图像通过 CanvasRenderingContext2D 的 drawImage 方法绘制在 Canvas 上，图像的原始尺寸为 500x500，绘制时缩放为 400x200。\n图像绘制完成后，调用 ImageBitmap 的 close 方法释放资源。",
                "code": "@Entry\n@Component\nstruct ImageExample {\n  // 创建 RenderingContextSettings 对象，设置是否支持 HiDPI\n  private settings: RenderingContextSettings = new RenderingContextSettings(true)\n  // 创建 CanvasRenderingContext2D 对象，用于绘制图像\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)\n  // 创建 ImageBitmap 对象，加载图像资源\n  private img: ImageBitmap = new ImageBitmap(\"common/images/example.jpg\")\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建 Canvas 组件，绑定 CanvasRenderingContext2D 对象\n      Canvas(this.context)\n        .width('100%') // 设置 Canvas 宽度为 100%\n        .height('100%') // 设置 Canvas 高度为 100%\n        .backgroundColor('#ffff00') // 设置 Canvas 背景颜色为黄色\n        .onReady(() => {\n          // 在 Canvas 准备好后，绘制图像\n          this.context.drawImage(this.img, 0, 0, 500, 500, 0, 0, 400, 200)\n          // 绘制完成后，释放 ImageBitmap 资源\n          this.img.close()\n        })\n    }\n    .width('100%') // 设置 Flex 容器宽度为 100%\n    .height('100%') // 设置 Flex 容器高度为 100%\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示 Canvas 绘图效果的界面。布局宽度占据整个屏幕，高度设为 100%，内边距为 0。组件的垂直方向上被分为一个部分，包含一个 Canvas 组件。Canvas 组件的宽度占据整个屏幕的宽度，高度占据屏幕高度的 50%。Canvas 组件的背景颜色为黄色（#ffff00）。\n\nCanvas 组件的功能包括绘制一个绿色的矩形，并将其转换为图像，然后在 Canvas 上绘制该图像。具体实现是通过 CanvasRenderingContext2D 上下文对象进行绘图操作。首先，设置填充颜色为绿色（#00ff00），然后绘制一个 100x100 像素的矩形。接着，通过 getPixelMap 方法获取矩形的像素数据，并将其转换为 ImageBitmap 对象。最后，使用 drawImage 方法将该图像绘制到 Canvas 上的指定位置。\n\n整个布局通过 Flex 布局保证 Canvas 在垂直方向上居中对齐，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Demo {\n  // 创建 RenderingContextSettings 对象，设置是否支持 HiDPI\n  private settings: RenderingContextSettings = new RenderingContextSettings(true)\n  // 创建 CanvasRenderingContext2D 对象，用于绘图操作\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建 Canvas 组件，绑定绘图上下文\n      Canvas(this.context)\n        .width('100%') // 设置 Canvas 宽度为 100%\n        .height('50%') // 设置 Canvas 高度为 50%\n        .backgroundColor('#ffff00') // 设置 Canvas 背景颜色为黄色\n        .onReady(() => {\n          // 设置填充颜色为绿色\n          this.context.fillStyle = \"#00ff00\"\n          // 绘制一个 100x100 像素的矩形\n          this.context.fillRect(0, 0, 100, 100)\n          // 获取矩形的像素数据\n          let pixel = this.context.getPixelMap(0, 0, 100, 100)\n          // 将像素数据转换为 ImageBitmap 对象\n          let image = new ImageBitmap(pixel)\n          // 将图像绘制到 Canvas 上的指定位置\n          this.context.drawImage(image, 100, 100)\n        })\n    }\n    .width('100%') // 设置 Flex 容器宽度为 100%\n    .height('100%') // 设置 Flex 容器高度为 100%\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示图像处理效果的界面。布局宽度占据整个屏幕，高度设为 100%，背景颜色为黄色（#ffff00）。组件的垂直方向上居中对齐，包含一个 Canvas 组件用于绘制图像。\nCanvas 组件的宽度为 100%，高度为 100%，背景颜色为黄色。Canvas 组件的功能是通过 Web Worker 线程处理图像，并将处理后的图像绘制到 Canvas 上。\n图像处理逻辑在 Worker 线程中进行，Worker 线程接收到主线程发送的 ImageBitmap 后，使用 OffscreenCanvas 进行图像处理，并将处理后的 ImageBitmap 发送回主线程，主线程再将图像绘制到 Canvas 上。\n整个布局通过 Flex 布局保证 Canvas 在垂直方向上居中对齐，确保界面整洁美观。",
                "code": "import worker from '@ohos.worker'; // 导入 Web Worker API\n\n@Entry\n@Component\nstruct imageBitmapExamplePage {\n  private settings: RenderingContextSettings = new RenderingContextSettings(true); // 创建 Canvas 渲染上下文设置，启用抗锯齿\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings); // 创建 Canvas 渲染上下文\n  private myWorker = new worker.ThreadWorker('entry/ets/workers/Worker.ts'); // 创建 Web Worker 线程\n  private img: ImageBitmap = new ImageBitmap(\"common/images/example.jpg\"); // 加载图像资源\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Canvas(this.context) // 创建 Canvas 组件\n        .width('100%') // 设置 Canvas 宽度为 100%\n        .height('100%') // 设置 Canvas 高度为 100%\n        .backgroundColor('#ffff00') // 设置 Canvas 背景颜色为黄色\n        .onReady(() => { // Canvas 准备就绪时触发的事件\n          this.myWorker.postMessage({ myImage: this.img }); // 向 Worker 线程发送图像数据\n          this.myWorker.onmessage = (e): void => { // 监听 Worker 线程的消息\n            if (e.data.myImage) { // 如果消息中包含处理后的图像数据\n              let image: ImageBitmap = e.data.myImage; // 获取处理后的图像数据\n              this.context.transferFromImageBitmap(image); // 将处理后的图像绘制到 Canvas 上\n            }\n          }\n        })\n    }\n    .width('100%') // 设置 Flex 容器宽度为 100%\n    .height('100%') // 设置 Flex 容器高度为 100%\n  }\n}\n\n/*\nWorker 线程在 onmessage 中接收到主线程 postMessage 发送的 ImageBitmap，并进行绘制。\n*/\n\nworkerPort.onmessage = function (e: MessageEvents) { // 监听主线程的消息\n  if (e.data.myImage) { // 如果消息中包含图像数据\n    let img = e.data.myImage; // 获取图像数据\n    let offCanvas = new OffscreenCanvas(600, 600); // 创建 OffscreenCanvas 用于图像处理\n    let offContext = offCanvas.getContext(\"2d\"); // 获取 OffscreenCanvas 的 2D 渲染上下文\n    offContext.drawImage(img, 0, 0, 500, 500, 0, 0, 400, 200); // 在 OffscreenCanvas 上绘制图像\n    let image = offCanvas.transferToImageBitmap(); // 将 OffscreenCanvas 转换为 ImageBitmap\n    workerPort.postMessage({ myImage: image }); // 将处理后的 ImageBitmap 发送回主线程\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "ImageData": {
        "description": "ImageData对象可以存储canvas渲染的像素数据。",
        "details": null,
        "interfaces": [
            {
                "description": "constructor(width: number, height: number, data?: Uint8ClampedArray, unit?: LengthMetricsUnit)",
                "params": {
                    "width": {
                        "type": "number",
                        "required": true,
                        "description": "矩形区域实际像素宽度，默认单位为vp。"
                    },
                    "height": {
                        "type": "number",
                        "required": true,
                        "description": "矩形区域实际像素高度，默认单位为vp。"
                    },
                    "data": {
                        "type": "Uint8ClampedArray",
                        "required": false,
                        "description": "一维数组，保存了相应的颜色数据，数据值范围为0到255。"
                    },
                    "unit": {
                        "type": "LengthMetricsUnit",
                        "required": false,
                        "description": "用来配置ImageData对象的单位模式，配置后无法动态更改，配置方法同CanvasRenderingContext2D。",
                        "default": "DEFAULT"
                    }
                }
            }
        ],
        "attributes": {
            "width": {
                "description": "矩形区域实际像素宽度。单位为px。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "矩形区域实际像素宽度。单位为px。"
                    }
                }
            },
            "height": {
                "description": "矩形区域实际像素高度。单位为px。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "矩形区域实际像素高度。单位为px。"
                    }
                }
            },
            "data": {
                "description": "一维数组，保存了相应的颜色数据，数据值范围为0到255。",
                "params": {
                    "value": {
                        "type": "Uint8ClampedArray",
                        "required": true,
                        "description": "一维数组，保存了相应的颜色数据，数据值范围为0到255。"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [],
        "is_common_attrs": true
    },
    "Matrix2D": {
        "description": "矩阵对象，可以对矩阵进行缩放、旋转、平移等变换。",
        "details": "从 API Version 8 开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "Matrix2D(unit?: LengthMetricsUnit)",
                "params": {
                    "unit": {
                        "type": "LengthMetricsUnit",
                        "description": "矩阵的度量单位。"
                    }
                }
            }
        ],
        "attributes": {
            "scaleX": {
                "description": "水平缩放比例系数。",
                "params": {
                    "value": {
                        "type": "number",
                        "description": "水平缩放比例系数。"
                    }
                }
            },
            "scaleY": {
                "description": "垂直缩放比例系数。",
                "params": {
                    "value": {
                        "type": "number",
                        "description": "垂直缩放比例系数。"
                    }
                }
            },
            "rotateX": {
                "description": "水平旋转角度。",
                "params": {
                    "value": {
                        "type": "number",
                        "description": "水平旋转角度。"
                    }
                }
            },
            "rotateY": {
                "description": "垂直旋转角度。",
                "params": {
                    "value": {
                        "type": "number",
                        "description": "垂直旋转角度。"
                    }
                }
            },
            "translateX": {
                "description": "水平平移距离。",
                "params": {
                    "value": {
                        "type": "number",
                        "description": "水平平移距离。"
                    }
                }
            },
            "translateY": {
                "description": "垂直平移距离。",
                "params": {
                    "value": {
                        "type": "number",
                        "description": "垂直平移距离。"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [],
        "is_common_attrs": true
    },
    "OffscreenCanvas": {
        "description": "OffscreenCanvas组件用于自定义绘制图形。",
        "details": "使用Canvas组件或Canvas API时，渲染、动画和用户交互通常发生在应用程序的主线程上，与画布动画和渲染相关的计算可能会影响应用程序性能。OffscreenCanvas提供了一个可以在屏幕外渲染的画布，这样可以在单独的线程中运行一些任务，从而避免影响应用程序主线程性能。",
        "interfaces": [
            {
                "description": "OffscreenCanvas(width: number, height: number, unit?: LengthMetricsUnit)",
                "params": {
                    "width": {
                        "type": "number",
                        "required": true,
                        "description": "OffscreenCanvas组件的宽度。默认单位为vp。"
                    },
                    "height": {
                        "type": "number",
                        "required": true,
                        "description": "OffscreenCanvas组件的高度。默认单位为vp。"
                    },
                    "unit": {
                        "type": "LengthMetricsUnit",
                        "required": false,
                        "description": "用来配置OffscreenCanvas对象的单位模式，配置后无法动态更改，配置方法同CanvasRenderingContext2D。默认值：DEFAULT。"
                    }
                }
            }
        ],
        "attributes": {
            "width": {
                "description": "OffscreenCanvas组件的宽度。默认单位为vp。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "OffscreenCanvas组件的宽度。"
                    }
                }
            },
            "height": {
                "description": "OffscreenCanvas组件的高度。默认单位为vp。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "OffscreenCanvas组件的高度。"
                    }
                }
            }
        },
        "events": {
            "transferToImageBitmap": {
                "description": "transferToImageBitmap(): ImageBitmap",
                "params": {},
                "returns": {
                    "type": "ImageBitmap",
                    "description": "从OffscreenCanvas组件中最近渲染的图像创建一个ImageBitmap对象。"
                }
            },
            "getContext": {
                "description": "getContext(contextType: \"2d\", options?: RenderingContextSettings): OffscreenCanvasRenderingContext2D",
                "params": {
                    "contextType": {
                        "type": "string",
                        "required": true,
                        "description": "绘图上下文的类型，当前仅支持\"2d\"。"
                    },
                    "options": {
                        "type": "RenderingContextSettings",
                        "required": false,
                        "description": "绘图上下文的设置选项。"
                    }
                },
                "returns": {
                    "type": "OffscreenCanvasRenderingContext2D",
                    "description": "返回OffscreenCanvas组件的绘图上下文。"
                }
            }
        },
        "rules": [
            "OffscreenCanvas对象使用getContext获取绘图上下文后，不允许通过postMessage传该对象给其他线程，否则抛出异常。",
            "已经通过postMessage传OffscreenCanvas对象到某一线程，声明该对象的线程不允许该对象使用getContext和transferToImageBitmap方法，否则抛出异常。",
            "已经通过postMessage传OffscreenCanvas对象到某一线程，不允许再将该对象通过postMessage传给其他线程，否则抛出异常。"
        ],
        "examples": [],
        "is_common_attrs": true
    },
    "Path2D": {
        "description": "路径对象，支持通过对象的接口进行路径的描述，并通过Canvas的stroke接口或者fill接口进行绘制。",
        "details": "从 API Version 8 开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "Path2D(unit?: LengthMetricsUnit)",
                "params": {
                    "unit": {
                        "type": "LengthMetricsUnit",
                        "description": "路径的单位。"
                    }
                }
            },
            {
                "description": "Path2D(description: string, unit?: LengthMetricsUnit)",
                "params": {
                    "description": {
                        "type": "string",
                        "required": true,
                        "description": "符合SVG路径描述规范的路径字符串。"
                    },
                    "unit": {
                        "type": "LengthMetricsUnit",
                        "description": "路径的单位。"
                    }
                }
            }
        ],
        "attributes": {
            "addPath": {
                "description": "将另一个路径添加到当前的路径对象中。",
                "params": {
                    "path": {
                        "type": "Path2D",
                        "required": true,
                        "description": "需要添加到当前路径的路径对象，路径单位：px。"
                    },
                    "transform": {
                        "type": "Matrix2D",
                        "description": "新增路径的变换矩阵对象。"
                    }
                }
            },
            "closePath": {
                "description": "将路径的当前点移回到路径的起点，当前点到起点间画一条直线。如果形状已经闭合或只有一个点，则此功能不执行任何操作。"
            },
            "moveTo": {
                "description": "将路径的当前坐标点移动到目标点，移动过程中不绘制线条。",
                "params": {
                    "x": {
                        "type": "number",
                        "required": true,
                        "description": "目标点X轴坐标。"
                    },
                    "y": {
                        "type": "number",
                        "required": true,
                        "description": "目标点Y轴坐标。"
                    }
                }
            },
            "lineTo": {
                "description": "从当前点绘制一条直线到目标点。",
                "params": {
                    "x": {
                        "type": "number",
                        "required": true,
                        "description": "目标点X轴坐标。"
                    },
                    "y": {
                        "type": "number",
                        "required": true,
                        "description": "目标点Y轴坐标。"
                    }
                }
            },
            "bezierCurveTo": {
                "description": "创建三次贝赛尔曲线的路径。",
                "params": {
                    "cp1x": {
                        "type": "number",
                        "required": true,
                        "description": "第一个贝塞尔参数的x坐标值。"
                    },
                    "cp1y": {
                        "type": "number",
                        "required": true,
                        "description": "第一个贝塞尔参数的y坐标值。"
                    },
                    "cp2x": {
                        "type": "number",
                        "required": true,
                        "description": "第二个贝塞尔参数的x坐标值。"
                    },
                    "cp2y": {
                        "type": "number",
                        "required": true,
                        "description": "第二个贝塞尔参数的y坐标值。"
                    },
                    "x": {
                        "type": "number",
                        "required": true,
                        "description": "路径结束时的x坐标值。"
                    },
                    "y": {
                        "type": "number",
                        "required": true,
                        "description": "路径结束时的y坐标值。"
                    }
                }
            },
            "quadraticCurveTo": {
                "description": "创建二次贝赛尔曲线的路径。",
                "params": {
                    "cpx": {
                        "type": "number",
                        "required": true,
                        "description": "贝塞尔参数的x坐标值。"
                    },
                    "cpy": {
                        "type": "number",
                        "required": true,
                        "description": "贝塞尔参数的y坐标值。"
                    },
                    "x": {
                        "type": "number",
                        "required": true,
                        "description": "路径结束时的x坐标值。"
                    },
                    "y": {
                        "type": "number",
                        "required": true,
                        "description": "路径结束时的y坐标值。"
                    }
                }
            },
            "arc": {
                "description": "绘制弧线路径。",
                "params": {
                    "x": {
                        "type": "number",
                        "required": true,
                        "description": "弧线圆心的x坐标值。"
                    },
                    "y": {
                        "type": "number",
                        "required": true,
                        "description": "弧线圆心的y坐标值。"
                    },
                    "radius": {
                        "type": "number",
                        "required": true,
                        "description": "弧线的圆半径。"
                    },
                    "startAngle": {
                        "type": "number",
                        "required": true,
                        "description": "弧线的起始弧度。"
                    },
                    "endAngle": {
                        "type": "number",
                        "required": true,
                        "description": "弧线的终止弧度。"
                    },
                    "counterclockwise": {
                        "type": "boolean",
                        "description": "是否逆时针绘制圆弧。"
                    }
                }
            },
            "arcTo": {
                "description": "依据圆弧经过的点和圆弧半径创建圆弧路径。",
                "params": {
                    "x1": {
                        "type": "number",
                        "required": true,
                        "description": "圆弧经过的第一个点的x坐标值。"
                    },
                    "y1": {
                        "type": "number",
                        "required": true,
                        "description": "圆弧经过的第一个点的y坐标值。"
                    },
                    "x2": {
                        "type": "number",
                        "required": true,
                        "description": "圆弧经过的第二个点的x坐标值。"
                    },
                    "y2": {
                        "type": "number",
                        "required": true,
                        "description": "圆弧经过的第二个点的y坐标值。"
                    },
                    "radius": {
                        "type": "number",
                        "required": true,
                        "description": "圆弧的圆半径值。"
                    }
                }
            },
            "ellipse": {
                "description": "在规定的矩形区域绘制一个椭圆。",
                "params": {
                    "x": {
                        "type": "number",
                        "required": true,
                        "description": "椭圆圆心的x轴坐标。"
                    },
                    "y": {
                        "type": "number",
                        "required": true,
                        "description": "椭圆圆心的y轴坐标。"
                    },
                    "radiusX": {
                        "type": "number",
                        "required": true,
                        "description": "椭圆x轴的半径长度。"
                    },
                    "radiusY": {
                        "type": "number",
                        "required": true,
                        "description": "椭圆y轴的半径长度。"
                    },
                    "rotation": {
                        "type": "number",
                        "required": true,
                        "description": "椭圆的旋转角度。"
                    },
                    "startAngle": {
                        "type": "number",
                        "required": true,
                        "description": "椭圆绘制的起始点角度。"
                    },
                    "endAngle": {
                        "type": "number",
                        "required": true,
                        "description": "椭圆绘制的结束点角度。"
                    },
                    "counterclockwise": {
                        "type": "boolean",
                        "description": "是否以逆时针方向绘制椭圆。"
                    }
                }
            },
            "rect": {
                "description": "创建矩形路径。",
                "params": {
                    "x": {
                        "type": "number",
                        "required": true,
                        "description": "指定矩形的左上角x坐标值。"
                    },
                    "y": {
                        "type": "number",
                        "required": true,
                        "description": "指定矩形的左上角y坐标值。"
                    },
                    "w": {
                        "type": "number",
                        "required": true,
                        "description": "指定矩形的宽度。"
                    },
                    "h": {
                        "type": "number",
                        "required": true,
                        "description": "指定矩形的高度。"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [],
        "is_common_attrs": true
    },
    "Circle": {
        "description": "用于绘制圆形的组件。",
        "details": null,
        "interfaces": [
            {
                "description": "Circle(value?: CircleOptions)",
                "params": {
                    "value": {
                        "type": "CircleOptions",
                        "required": false,
                        "description": "设置圆形尺寸"
                    }
                }
            }
        ],
        "attributes": {
            "fill": {
                "description": "设置填充区域颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "填充区域颜色。"
                    }
                }
            },
            "fillOpacity": {
                "description": "设置填充区域透明度。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "填充区域透明度。",
                        "default": 1
                    }
                }
            },
            "stroke": {
                "description": "设置边框颜色，不设置时，默认没有边框。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "边框颜色。"
                    }
                }
            },
            "strokeDashArray": {
                "description": "设置边框间隙。",
                "params": {
                    "value": {
                        "type": "Array<any>",
                        "required": true,
                        "description": "边框间隙。"
                    }
                }
            },
            "strokeDashOffset": {
                "description": "设置边框绘制起点的偏移量。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "边框绘制起点的偏移量。",
                        "default": 0
                    }
                }
            },
            "strokeLineCap": {
                "description": "设置边框端点绘制样式。",
                "params": {
                    "value": {
                        "type": "LineCapStyle",
                        "required": true,
                        "description": "边框端点绘制样式。",
                        "default": "LineCapStyle.Butt"
                    }
                }
            },
            "strokeLineJoin": {
                "description": "设置边框拐角绘制样式。Circle组件无法形成拐角，该属性设置无效。",
                "params": {
                    "value": {
                        "type": "LineJoinStyle",
                        "required": true,
                        "description": "边框拐角绘制样式。",
                        "default": "LineJoinStyle.Miter"
                    }
                }
            },
            "strokeMiterLimit": {
                "description": "设置斜接长度与边框宽度比值的极限值。Circle组件无法设置尖角图形，该属性设置无效。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "斜接长度与边框宽度比值的极限值。",
                        "default": 4
                    }
                }
            },
            "strokeOpacity": {
                "description": "设置边框透明度。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "边框透明度。",
                        "default": 1
                    }
                }
            },
            "strokeWidth": {
                "description": "设置边框宽度。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "边框宽度。",
                        "default": 1
                    }
                }
            },
            "antiAlias": {
                "description": "设置是否开启抗锯齿效果。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否开启抗锯齿效果。",
                        "default": true
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Column 布局实现了一个展示两个圆形图形的界面。布局宽度占据整个屏幕，高度由内容自动调整。组件的垂直方向上包含两个圆形图形，每个圆形图形之间有 10vp 的间距。\n第一个圆形图形是一个填充的圆形，直径为 150vp，没有边框。第二个圆形图形是一个圆环，直径为 150vp，线条为红色虚线，线条宽度为 3vp。圆环的填充透明度为 0，表示没有填充颜色。\n整个布局通过 Column 布局保证圆形图形在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct CircleExample {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局，子组件之间的间距为 10vp\n      // 绘制一个直径为 150 的圆\n      Circle({ width: 150, height: 150 }) // 创建一个宽度为 150vp，高度为 150vp 的圆形图形\n\n      // 绘制一个直径为 150、线条为红色虚线的圆环（宽高设置不一致时以短边为直径）\n      Circle()\n        .width(150) // 设置圆环的宽度为 150vp\n        .height(200) // 设置圆环的高度为 200vp，但由于宽高不一致，实际直径为 150vp\n        .fillOpacity(0) // 设置圆环的填充透明度为 0，表示没有填充颜色\n        .strokeWidth(3) // 设置圆环的线条宽度为 3vp\n        .stroke(Color.Red) // 设置圆环的线条颜色为红色\n        .strokeDashArray([1, 2]) // 设置圆环的线条为虚线，虚线长度为 1vp，间隔为 2vp\n    }.width('100%') // 设置整个 Column 布局的宽度为 100%\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Ellipse": {
        "description": "椭圆绘制组件。",
        "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。从API version 11开始，该接口支持在元服务中使用。",
        "interfaces": [
            {
                "description": "Ellipse(options?: {width?: string | number, height?: string | number})",
                "params": {
                    "options": {
                        "type": "object",
                        "description": "椭圆的宽度和高度选项。",
                        "params": {
                            "width": {
                                "type": [
                                    "string",
                                    "number"
                                ],
                                "description": "宽度。",
                                "default": 0
                            },
                            "height": {
                                "type": [
                                    "string",
                                    "number"
                                ],
                                "description": "高度。",
                                "default": 0
                            }
                        }
                    }
                }
            }
        ],
        "attributes": {
            "fill": {
                "description": "设置填充区域颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "填充区域颜色。",
                        "default": "Color.Black"
                    }
                }
            },
            "fillOpacity": {
                "description": "设置填充区域透明度。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "填充区域透明度。",
                        "default": 1
                    }
                }
            },
            "stroke": {
                "description": "设置边框颜色，不设置时，默认没有边框。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "边框颜色。"
                    }
                }
            },
            "strokeDashArray": {
                "description": "设置边框间隙。",
                "params": {
                    "value": {
                        "type": "Array<any>",
                        "required": true,
                        "description": "边框间隙。",
                        "default": []
                    }
                }
            },
            "strokeDashOffset": {
                "description": "设置边框绘制起点的偏移量。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "边框绘制起点的偏移量。",
                        "default": 0
                    }
                }
            },
            "strokeLineCap": {
                "description": "设置边框端点绘制样式。",
                "params": {
                    "value": {
                        "type": "LineCapStyle",
                        "required": true,
                        "description": "边框端点绘制样式。",
                        "default": "LineCapStyle.Butt"
                    }
                }
            },
            "strokeLineJoin": {
                "description": "设置边框拐角绘制样式。Ellipse组件无法形成拐角，该属性设置无效。",
                "params": {
                    "value": {
                        "type": "LineJoinStyle",
                        "required": true,
                        "description": "边框拐角绘制样式。",
                        "default": "LineJoinStyle.Miter"
                    }
                }
            },
            "strokeMiterLimit": {
                "description": "设置斜接长度与边框宽度比值的极限值。Ellipse组件无法设置尖角图形，该属性设置无效。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "斜接长度与边框宽度比值的极限值。",
                        "default": 4
                    }
                }
            },
            "strokeOpacity": {
                "description": "设置边框透明度。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "边框透明度。",
                        "default": 1
                    }
                }
            },
            "strokeWidth": {
                "description": "设置边框宽度。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "边框宽度。",
                        "default": 1
                    }
                }
            },
            "antiAlias": {
                "description": "设置是否开启抗锯齿效果。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否开启抗锯齿效果。",
                        "default": true
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Column 布局实现了一个展示两个椭圆形状的界面。布局宽度占据整个屏幕，高度由内容自动调整。组件的垂直方向上被分为两个部分，每个部分包含一个椭圆。\n第一个椭圆的宽度为 150vp，高度为 80vp，填充颜色为默认颜色（通常为黑色）。第二个椭圆的宽度为 150vp，高度为 100vp，填充透明度为 0（即无填充颜色），边框颜色为蓝色，边框宽度为 3vp。\n椭圆的排列方式为垂直排列，每个椭圆之间有 10vp 的间距。整个布局通过 Column 布局保证椭圆在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct EllipseExample {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局，子组件之间的间距为 10vp\n      // 绘制一个 150 * 80 的椭圆\n      Ellipse({ width: 150, height: 80 }) // 创建一个宽度为 150vp，高度为 80vp 的椭圆，填充颜色为默认颜色\n      \n      // 绘制一个 150 * 100 、线条为蓝色的椭圆环\n      Ellipse()\n        .width(150) // 设置椭圆的宽度为 150vp\n        .height(100) // 设置椭圆的高度为 100vp\n        .fillOpacity(0) // 设置椭圆的填充透明度为 0，即无填充颜色\n        .stroke(Color.Blue) // 设置椭圆的边框颜色为蓝色\n        .strokeWidth(3) // 设置椭圆的边框宽度为 3vp\n    }.width('100%') // 设置 Column 的宽度为 100%，占据整个屏幕宽度\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Line": {
        "description": "直线绘制组件。",
        "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "Line(value?: {width?: string | number, height?: string | number})",
                "params": {
                    "value": {
                        "type": {
                            "width": [
                                "string",
                                "number"
                            ],
                            "height": [
                                "string",
                                "number"
                            ]
                        },
                        "description": "组件的宽度和高度。"
                    }
                }
            }
        ],
        "attributes": {
            "startPoint": {
                "description": "设置直线起点坐标点（相对坐标），异常值按照默认值处理。",
                "params": {
                    "value": {
                        "type": "Array<Length>",
                        "required": true,
                        "description": "直线起点坐标点（相对坐标），单位vp。",
                        "default": [
                            0,
                            0
                        ]
                    }
                }
            },
            "endPoint": {
                "description": "设置直线终点坐标点（相对坐标），异常值按照默认值处理。",
                "params": {
                    "value": {
                        "type": "Array<Length>",
                        "required": true,
                        "description": "直线终点坐标点（相对坐标），单位vp。",
                        "default": [
                            0,
                            0
                        ]
                    }
                }
            },
            "fill": {
                "description": "设置填充区域颜色。Line组件无法形成闭合区域，该属性设置无效。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "填充区域颜色。"
                    }
                }
            },
            "fillOpacity": {
                "description": "设置填充区域透明度。Line组件无法形成闭合区域，该属性设置无效。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "填充区域透明度。",
                        "default": 1
                    }
                }
            },
            "stroke": {
                "description": "设置边框颜色，不设置时，默认没有边框。异常值不会绘制边框线条。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "边框颜色。"
                    }
                }
            },
            "strokeDashArray": {
                "description": "设置边框间隙。线段相交时可能会出现重叠现象。异常值按照默认值处理。",
                "params": {
                    "value": {
                        "type": "Array<Length>",
                        "required": true,
                        "description": "边框间隙。",
                        "default": []
                    }
                }
            },
            "strokeDashOffset": {
                "description": "设置边框绘制起点的偏移量。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "边框绘制起点的偏移量。",
                        "default": 0
                    }
                }
            },
            "strokeLineCap": {
                "description": "设置边框端点绘制样式。",
                "params": {
                    "value": {
                        "type": "LineCapStyle",
                        "required": true,
                        "description": "边框端点绘制样式。",
                        "default": "LineCapStyle.Butt"
                    }
                }
            },
            "strokeLineJoin": {
                "description": "设置边框拐角绘制样式。Line组件无法形成拐角，该属性设置无效。",
                "params": {
                    "value": {
                        "type": "LineJoinStyle",
                        "required": true,
                        "description": "边框拐角绘制样式。",
                        "default": "LineJoinStyle.Miter"
                    }
                }
            },
            "strokeMiterLimit": {
                "description": "设置锐角绘制成斜角的极限值。Line组件无法设置锐角图形，该属性设置无效。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "锐角绘制成斜角的极限值。",
                        "default": 4
                    }
                }
            },
            "strokeOpacity": {
                "description": "设置边框透明度。该属性的取值范围是[0.0, 1.0]，若给定值小于0.0，则取值为0.0；若给定值大于1.0，则取值为1.0，其余异常值按1.0处理。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "边框透明度。",
                        "default": 1
                    }
                }
            },
            "strokeWidth": {
                "description": "设置边框宽度。该属性若为string类型, 暂不支持百分比，百分比按照1px处理。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "边框宽度。",
                        "default": 1
                    }
                }
            },
            "antiAlias": {
                "description": "设置是否开启抗锯齿效果。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否开启抗锯齿效果。",
                        "default": true
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Row 布局实现了一个展示三种不同线型样式的界面。布局宽度占据整个屏幕，高度设为 200vp，内边距为左右 10vp。组件的垂直方向上被分为三个部分，每个部分包含一个 Line 组件。每个 Line 组件以水平布局方式排列，Line 组件之间的间距均匀分布，且对齐方式为居中对齐。\nLine 组件的样式包括宽度、高度、起始点、结束点、描边颜色、描边宽度、描边线帽样式等属性，支持不同的样式展示。每个 Line 组件的功能是绘制一条从起始点到结束点的直线，并通过不同的描边线帽样式（如 Butt、Round、Square）展示不同的线型效果。\n整个布局通过 Row 布局保证 Line 组件在水平方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct LineExample1 {\n  build() {\n    Row({ space: 10 }) { // 创建一个水平布局的 Row 组件，组件之间的间距为 10vp\n\n      Line()\n        .width(100) // 设置 Line 组件的宽度为 100vp\n        .height(200) // 设置 Line 组件的高度为 200vp\n        .startPoint([50, 50]) // 设置 Line 组件的起始点为 (50, 50)\n        .endPoint([50, 200]) // 设置 Line 组件的结束点为 (50, 200)\n        .stroke(Color.Black) // 设置 Line 组件的描边颜色为黑色\n        .strokeWidth(20) // 设置 Line 组件的描边宽度为 20vp\n        .strokeLineCap(LineCapStyle.Butt) // 设置 Line 组件的描边线帽样式为 Butt\n        .backgroundColor('#F5F5F5') // 设置 Line 组件的背景颜色为 #F5F5F5\n        .margin(10) // 设置 Line 组件的外边距为 10vp\n\n      Line()\n        .width(100) // 设置 Line 组件的宽度为 100vp\n        .height(200) // 设置 Line 组件的高度为 200vp\n        .startPoint([50, 50]) // 设置 Line 组件的起始点为 (50, 50)\n        .endPoint([50, 200]) // 设置 Line 组件的结束点为 (50, 200)\n        .stroke(Color.Black) // 设置 Line 组件的描边颜色为黑色\n        .strokeWidth(20) // 设置 Line 组件的描边宽度为 20vp\n        .strokeLineCap(LineCapStyle.Round) // 设置 Line 组件的描边线帽样式为 Round\n        .backgroundColor('#F5F5F5') // 设置 Line 组件的背景颜色为 #F5F5F5\n\n      Line()\n        .width(100) // 设置 Line 组件的宽度为 100vp\n        .height(200) // 设置 Line 组件的高度为 200vp\n        .startPoint([50, 50]) // 设置 Line 组件的起始点为 (50, 50)\n        .endPoint([50, 200]) // 设置 Line 组件的结束点为 (50, 200)\n        .stroke(Color.Black) // 设置 Line 组件的描边颜色为黑色\n        .strokeWidth(20) // 设置 Line 组件的描边宽度为 20vp\n        .strokeLineCap(LineCapStyle.Square) // 设置 Line 组件的描边线帽样式为 Square\n        .backgroundColor('#F5F5F5') // 设置 Line 组件的背景颜色为 #F5F5F5\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个展示多种类型线条的界面。布局宽度占据整个屏幕，高度根据内容自适应，内边距为 10vp。组件的垂直方向上被分为多个部分，每个部分包含一个 Line 组件。每个 Line 组件以水平布局方式排列，线条之间的间距均匀分布，且对齐方式为居中对齐。\n线条的样式包括宽度、高度、起点、终点、颜色、透明度、线宽、虚线样式等属性，支持不同的样式展示。线条组之间通过 Column 组件进行分隔。线条的功能包括展示不同样式的线条，用户可以通过界面直观地看到不同线条的效果。\n整个布局通过 Column 布局保证线条在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct LineExample {\n  build() {\n    Column({ space: 10 }) { // 使用 Column 布局，设置组件之间的间距为 10vp\n\n      Line()\n        .width(200) // 设置线条的宽度为 200vp\n        .height(150) // 设置线条的高度为 150vp\n        .startPoint([0, 0]) // 设置线条的起点为 (0, 0)\n        .endPoint([50, 100]) // 设置线条的终点为 (50, 100)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .backgroundColor('#F5F5F5') // 设置线条的背景颜色为 #F5F5F5\n\n      Line()\n        .width(200) // 设置线条的宽度为 200vp\n        .height(150) // 设置线条的高度为 150vp\n        .startPoint([50, 50]) // 设置线条的起点为 (50, 50)\n        .endPoint([150, 150]) // 设置线条的终点为 (150, 150)\n        .strokeWidth(5) // 设置线条的宽度为 5vp\n        .stroke(Color.Orange) // 设置线条的颜色为橙色\n        .strokeOpacity(0.5) // 设置线条的透明度为 0.5\n        .backgroundColor('#F5F5F5') // 设置线条的背景颜色为 #F5F5F5\n\n      Line()\n        .width(200) // 设置线条的宽度为 200vp\n        .height(150) // 设置线条的高度为 150vp\n        .startPoint([0, 0]) // 设置线条的起点为 (0, 0)\n        .endPoint([100, 100]) // 设置线条的终点为 (100, 100)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(3) // 设置线条的宽度为 3vp\n        .strokeDashArray([10, 3]) // 设置线条的虚线样式为 [10, 3]\n        .strokeDashOffset(5) // 设置线条的虚线偏移量为 5\n        .backgroundColor('#F5F5F5') // 设置线条的背景颜色为 #F5F5F5\n\n      Line()\n        .width(50) // 设置线条的宽度为 50vp\n        .height(50) // 设置线条的高度为 50vp\n        .startPoint([0, 0]) // 设置线条的起点为 (0, 0)\n        .endPoint([100, 100]) // 设置线条的终点为 (100, 100)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(3) // 设置线条的宽度为 3vp\n        .strokeDashArray([10, 3]) // 设置线条的虚线样式为 [10, 3]\n        .backgroundColor('#F5F5F5') // 设置线条的背景颜色为 #F5F5F5\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个展示多种类型线条（如实线、虚线）及其样式效果的界面。布局宽度为 300vp，高度为 30vp，内边距为 0。组件的垂直方向上被分为多个部分，每个部分包含一个 Line 组件。每个 Line 组件以水平布局方式排列，线条之间的间距均匀分布，且对齐方式为居中对齐。\n线条的样式包括宽度、高度、起点、终点、颜色、粗细和虚线样式等属性，支持不同的样式展示。线条组之间通过 Column 组件进行分隔。线条的功能包括展示不同样式的线条，用户可以通过观察线条的样式来理解其设计意图。\n整个布局通过 Column 布局保证线条在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct LineExample {\n  build() {\n    Column() {\n      // 第一条实线\n      Line()\n        .width(300) // 设置线条的宽度为 300vp\n        .height(30) // 设置线条的高度为 30vp\n        .startPoint([50, 30]) // 设置线条的起点坐标为 (50, 30)\n        .endPoint([300, 30]) // 设置线条的终点坐标为 (300, 30)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(10) // 设置线条的粗细为 10vp\n\n      // 第二条虚线，虚线样式为 [50]\n      Line()\n        .width(300) // 设置线条的宽度为 300vp\n        .height(30) // 设置线条的高度为 30vp\n        .startPoint([50, 20]) // 设置线条的起点坐标为 (50, 20)\n        .endPoint([300, 20]) // 设置线条的终点坐标为 (300, 20)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(10) // 设置线条的粗细为 10vp\n        .strokeDashArray([50]) // 设置线条的虚线样式为 [50]，即 50vp 的实线，50vp 的空白\n\n      // 第三条虚线，虚线样式为 [50, 10]\n      Line()\n        .width(300) // 设置线条的宽度为 300vp\n        .height(30) // 设置线条的高度为 30vp\n        .startPoint([50, 20]) // 设置线条的起点坐标为 (50, 20)\n        .endPoint([300, 20]) // 设置线条的终点坐标为 (300, 20)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(10) // 设置线条的粗细为 10vp\n        .strokeDashArray([50, 10]) // 设置线条的虚线样式为 [50, 10]，即 50vp 的实线，10vp 的空白\n\n      // 第四条虚线，虚线样式为 [50, 10, 20]\n      Line()\n        .width(300) // 设置线条的宽度为 300vp\n        .height(30) // 设置线条的高度为 30vp\n        .startPoint([50, 20]) // 设置线条的起点坐标为 (50, 20)\n        .endPoint([300, 20]) // 设置线条的终点坐标为 (300, 20)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(10) // 设置线条的粗细为 10vp\n        .strokeDashArray([50, 10, 20]) // 设置线条的虚线样式为 [50, 10, 20]，即 50vp 的实线，10vp 的空白，20vp 的实线\n\n      // 第五条虚线，虚线样式为 [50, 10, 20, 30]\n      Line()\n        .width(300) // 设置线条的宽度为 300vp\n        .height(30) // 设置线条的高度为 30vp\n        .startPoint([50, 20]) // 设置线条的起点坐标为 (50, 20)\n        .endPoint([300, 20]) // 设置线条的终点坐标为 (300, 20)\n        .stroke(Color.Black) // 设置线条的颜色为黑色\n        .strokeWidth(10) // 设置线条的粗细为 10vp\n        .strokeDashArray([50, 10, 20, 30]) // 设置线条的虚线样式为 [50, 10, 20, 30]，即 50vp 的实线，10vp 的空白，20vp 的实线，30vp 的空白\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Polyline": {
        "description": "折线绘制组件。",
        "details": null,
        "interfaces": [
            {
                "description": "Polyline(value?: {width?: string | number, height?: string | number})",
                "params": {
                    "value": {
                        "type": {
                            "width": [
                                "string",
                                "number"
                            ],
                            "height": [
                                "string",
                                "number"
                            ]
                        },
                        "required": false,
                        "description": "组件的宽度和高度。"
                    }
                }
            }
        ],
        "attributes": {
            "points": {
                "description": "设置折线经过坐标点列表。",
                "params": {
                    "value": {
                        "type": "Array<[Point]>",
                        "required": true,
                        "description": "折线经过坐标点列表。",
                        "default": []
                    }
                }
            },
            "fill": {
                "description": "设置填充区域颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "填充区域颜色。"
                    }
                }
            },
            "fillOpacity": {
                "description": "设置填充区域透明度。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "填充区域透明度。",
                        "default": 1
                    }
                }
            },
            "stroke": {
                "description": "设置边框颜色，不设置时，默认没有边框线条。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "边框颜色。"
                    }
                }
            },
            "strokeDashArray": {
                "description": "设置线条间隙。",
                "params": {
                    "value": {
                        "type": "Array<any>",
                        "required": true,
                        "description": "线条间隙。",
                        "default": []
                    }
                }
            },
            "strokeDashOffset": {
                "description": "设置线条绘制起点的偏移量。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "线条绘制起点的偏移量。",
                        "default": 0
                    }
                }
            },
            "strokeLineCap": {
                "description": "设置线条端点绘制样式。",
                "params": {
                    "value": {
                        "type": "LineCapStyle",
                        "required": true,
                        "description": "线条端点绘制样式。",
                        "default": "LineCapStyle.Butt"
                    }
                }
            },
            "strokeLineJoin": {
                "description": "设置线条拐角绘制样式。",
                "params": {
                    "value": {
                        "type": "LineJoinStyle",
                        "required": true,
                        "description": "线条拐角绘制样式。",
                        "default": "LineJoinStyle.Miter"
                    }
                }
            },
            "strokeMiterLimit": {
                "description": "设置斜接长度与边框宽度比值的极限值。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "斜接长度与边框宽度比值的极限值。",
                        "default": 4
                    }
                }
            },
            "strokeOpacity": {
                "description": "设置线条透明度。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "线条透明度。",
                        "default": 1
                    }
                }
            },
            "strokeWidth": {
                "description": "设置线条宽度。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "线条宽度。",
                        "default": 1
                    }
                }
            },
            "antiAlias": {
                "description": "设置是否开启抗锯齿效果。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否开启抗锯齿效果。",
                        "default": true
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过Column布局实现了一个展示两条折线（Polyline）的界面。布局宽度占据整个屏幕，高度由内容自动调整。组件的垂直方向上被分为两个部分，每个部分包含一个Polyline组件。每个Polyline组件的宽度为100vp，高度为100vp，且通过points属性定义了折线的顶点坐标。\n\n第一条折线的样式包括填充透明度为0（即不填充），线条颜色为蓝色，线条宽度为3vp。第二条折线的样式包括填充透明度为0（即不填充），线条颜色为红色，线条宽度为8vp，线条连接处和线条端点的样式均为圆角。\n\n整个布局通过Column布局保证Polyline组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct PolylineExample {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局，组件之间的间距为10vp\n\n      Polyline({ width: 100, height: 100 }) // 创建一个宽度为100vp，高度为100vp的Polyline组件\n        .points([[0, 0], [20, 60], [100, 100]]) // 设置折线的顶点坐标\n        .fillOpacity(0) // 设置填充透明度为0，即不填充\n        .stroke(Color.Blue) // 设置线条颜色为蓝色\n        .strokeWidth(3) // 设置线条宽度为3vp\n\n      Polyline() // 创建一个Polyline组件\n        .width(100) // 设置宽度为100vp\n        .height(100) // 设置高度为100vp\n        .fillOpacity(0) // 设置填充透明度为0，即不填充\n        .stroke(Color.Red) // 设置线条颜色为红色\n        .strokeWidth(8) // 设置线条宽度为8vp\n        .points([[20, 0], [0, 100], [100, 90]]) // 设置折线的顶点坐标\n        .strokeLineJoin(LineJoinStyle.Round) // 设置线条连接处的样式为圆角\n        .strokeLineCap(LineCapStyle.Round) // 设置线条端点的样式为圆角\n    }.width('100%') // 设置Column布局的宽度为100%\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Polygon": {
        "description": "多边形绘制组件。",
        "details": null,
        "interfaces": [
            {
                "description": "Polygon(value?: {width?: string | number, height?: string | number})",
                "params": {
                    "value": {
                        "type": {
                            "width": [
                                "string",
                                "number"
                            ],
                            "height": [
                                "string",
                                "number"
                            ]
                        },
                        "required": false,
                        "description": "组件的宽度和高度。"
                    }
                }
            }
        ],
        "attributes": {
            "points": {
                "description": "设置多边形的顶点坐标列表。",
                "params": {
                    "value": {
                        "type": "Array<Point>",
                        "required": true,
                        "description": "多边形的顶点坐标列表。",
                        "default": []
                    }
                }
            },
            "fill": {
                "description": "设置填充区域颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "填充区域颜色。"
                    }
                }
            },
            "fillOpacity": {
                "description": "设置填充区域透明度。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "填充区域透明度。",
                        "default": 1
                    }
                }
            },
            "stroke": {
                "description": "设置边框颜色，不设置时，默认没有边框。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "边框颜色。"
                    }
                }
            },
            "strokeDashArray": {
                "description": "设置边框间隙。",
                "params": {
                    "value": {
                        "type": "Array<any>",
                        "required": true,
                        "description": "边框间隙。",
                        "default": []
                    }
                }
            },
            "strokeDashOffset": {
                "description": "设置边框绘制起点的偏移量。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "边框绘制起点的偏移量。",
                        "default": 0
                    }
                }
            },
            "strokeLineCap": {
                "description": "设置边框端点绘制样式。",
                "params": {
                    "value": {
                        "type": "LineCapStyle",
                        "required": true,
                        "description": "边框端点绘制样式。",
                        "default": "LineCapStyle.Butt"
                    }
                }
            },
            "strokeLineJoin": {
                "description": "设置边框拐角绘制样式。",
                "params": {
                    "value": {
                        "type": "LineJoinStyle",
                        "required": true,
                        "description": "边框拐角绘制样式。",
                        "default": "LineJoinStyle.Miter"
                    }
                }
            },
            "strokeMiterLimit": {
                "description": "设置斜接长度与边框宽度比值的极限值。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "斜接长度与边框宽度比值的极限值。",
                        "default": 4
                    }
                }
            },
            "strokeOpacity": {
                "description": "设置边框透明度。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "边框透明度。",
                        "default": 1
                    }
                }
            },
            "strokeWidth": {
                "description": "设置边框宽度。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "边框宽度。",
                        "default": 1
                    }
                }
            },
            "antiAlias": {
                "description": "设置是否开启抗锯齿效果。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否开启抗锯齿效果。",
                        "default": true
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Column 布局实现了一个展示三种不同形状的多边形的界面。布局宽度占据整个屏幕，内边距为顶部 10vp。组件的垂直方向上被分为三个部分，每个部分包含一个 Polygon 组件。每个 Polygon 组件的宽度和高度均为 100vp，且通过 points 属性定义了不同的顶点坐标，从而形成不同的多边形形状。\n\n第一个 Polygon 组件是一个三角形，填充颜色为绿色。第二个 Polygon 组件是一个矩形，填充颜色为透明，边框宽度为 5vp，边框颜色为蓝色。第三个 Polygon 组件是一个不规则多边形，填充颜色为红色，填充透明度为 0.6。\n\n整个布局通过 Column 布局保证多边形在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct PolygonExample {\n  build() {\n    Column({ space: 10 }) {\n\n      // 第一个 Polygon 组件，绘制一个三角形\n      Polygon({ width: 100, height: 100 })\n        .points([[0, 0], [50, 100], [100, 0]]) // 定义三角形的顶点坐标\n        .fill(Color.Green) // 设置填充颜色为绿色\n\n      // 第二个 Polygon 组件，绘制一个矩形\n      Polygon().width(100).height(100)\n        .points([[0, 0], [0, 100], [100, 100], [100, 0]]) // 定义矩形的顶点坐标\n        .fillOpacity(0) // 设置填充颜色为透明\n        .strokeWidth(5) // 设置边框宽度为 5vp\n        .stroke(Color.Blue) // 设置边框颜色为蓝色\n\n      // 第三个 Polygon 组件，绘制一个不规则多边形\n      Polygon().width(100).height(100)\n        .points([[50, 0], [0, 50], [20, 100], [80, 100], [100, 50]]) // 定义不规则多边形的顶点坐标\n        .fill(Color.Red) // 设置填充颜色为红色\n        .fillOpacity(0.6) // 设置填充透明度为 0.6\n\n    }.width('100%').margin({ top: 10 }) // 设置布局宽度为 100%，顶部边距为 10vp\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Path": {
        "description": "路径绘制组件，根据绘制路径生成封闭的自定义形状。",
        "details": "该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "Path(value?: { width?: number | string; height?: number | string; commands?: string })",
                "params": {
                    "value": {
                        "type": {
                            "width": [
                                "number",
                                "string"
                            ],
                            "height": [
                                "number",
                                "string"
                            ],
                            "commands": "string"
                        },
                        "description": "路径绘制组件的参数。"
                    }
                }
            }
        ],
        "attributes": {
            "commands": {
                "description": "设置路径绘制的命令字符串。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "路径绘制的命令字符串。",
                        "default": "default"
                    }
                }
            },
            "fill": {
                "description": "设置填充区域颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "填充区域颜色。"
                    }
                }
            },
            "fillOpacity": {
                "description": "设置填充区域透明度。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "填充区域透明度。",
                        "default": 1
                    }
                }
            },
            "stroke": {
                "description": "设置边框颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "边框颜色。"
                    }
                }
            },
            "strokeDashArray": {
                "description": "设置线条间隙。",
                "params": {
                    "value": {
                        "type": "Array<any>",
                        "required": true,
                        "description": "线条间隙。",
                        "default": []
                    }
                }
            },
            "strokeDashOffset": {
                "description": "设置线条绘制起点的偏移量。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "线条绘制起点的偏移量。",
                        "default": 0
                    }
                }
            },
            "strokeLineCap": {
                "description": "设置线条端点绘制样式。",
                "params": {
                    "value": {
                        "type": "LineCapStyle",
                        "required": true,
                        "description": "线条端点绘制样式。",
                        "default": "LineCapStyle.Butt"
                    }
                }
            },
            "strokeLineJoin": {
                "description": "设置线条拐角绘制样式。",
                "params": {
                    "value": {
                        "type": "LineJoinStyle",
                        "required": true,
                        "description": "线条拐角绘制样式。",
                        "default": "LineJoinStyle.Miter"
                    }
                }
            },
            "strokeMiterLimit": {
                "description": "设置斜接长度与边框宽度比值的极限值。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "斜接长度与边框宽度比值的极限值。",
                        "default": 4
                    }
                }
            },
            "strokeOpacity": {
                "description": "设置线条透明度。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "线条透明度。",
                        "default": 1
                    }
                }
            },
            "strokeWidth": {
                "description": "设置线条宽度。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "线条宽度。",
                        "default": 1
                    }
                }
            },
            "antiAlias": {
                "description": "设置是否开启抗锯齿效果。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否开启抗锯齿效果。",
                        "default": true
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Column 布局实现了一个展示多种类型路径图形的界面。布局宽度占据整个屏幕，内边距为顶部 5vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组路径图形。每个路径图形组的图形以水平布局方式排列，图形之间的间距均匀分布，且对齐方式为两端对齐。\n路径图形的样式包括宽度、高度、填充颜色、描边颜色、描边宽度等属性，支持不同的样式展示。路径图形组之间通过 Flex 组件进行分隔。路径图形的功能包括展示不同的路径形状，用户可以通过路径命令（commands）定义不同的路径形状。\n整个布局通过 Column 布局保证路径图形在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct PathExample {\n  build() {\n    Column({ space: 10 }) { // 使用 Column 布局，设置子组件之间的间距为 10vp\n      Text('Straight line') // 显示文本 \"Straight line\"\n        .fontSize(11) // 设置字体大小为 11\n        .fontColor(0xCCCCCC) // 设置字体颜色为浅灰色\n        .width('90%') // 设置文本宽度为父容器的 90%\n\n      Path() // 创建一个路径图形\n        .width('600px') // 设置路径图形的宽度为 600px\n        .height('10px') // 设置路径图形的高度为 10px\n        .commands('M0 0 L600 0') // 设置路径命令，绘制一条从 (0, 0) 到 (600, 0) 的直线\n        .stroke(Color.Black) // 设置描边颜色为黑色\n        .strokeWidth(3) // 设置描边宽度为 3px\n\n      Text('Straight line graph') // 显示文本 \"Straight line graph\"\n        .fontSize(11) // 设置字体大小为 11\n        .fontColor(0xCCCCCC) // 设置字体颜色为浅灰色\n        .width('90%') // 设置文本宽度为父容器的 90%\n\n      Flex({ justifyContent: FlexAlign.SpaceBetween }) { // 使用 Flex 布局，设置子组件之间的间距均匀分布\n        Path() // 创建一个路径图形\n          .width('210px') // 设置路径图形的宽度为 210px\n          .height('310px') // 设置路径图形的高度为 310px\n          .commands('M100 0 L200 240 L0 240 Z') // 设置路径命令，绘制一个三角形\n          .fillOpacity(0) // 设置填充透明度为 0，即不填充颜色\n          .stroke(Color.Black) // 设置描边颜色为黑色\n          .strokeWidth(3) // 设置描边宽度为 3px\n        Path() // 创建一个路径图形\n          .width('210px') // 设置路径图形的宽度为 210px\n          .height('310px') // 设置路径图形的高度为 310px\n          .commands('M0 0 H200 V200 H0 Z') // 设置路径命令，绘制一个矩形\n          .fillOpacity(0) // 设置填充透明度为 0，即不填充颜色\n          .stroke(Color.Black) // 设置描边颜色为黑色\n          .strokeWidth(3) // 设置描边宽度为 3px\n        Path() // 创建一个路径图形\n          .width('210px') // 设置路径图形的宽度为 210px\n          .height('310px') // 设置路径图形的高度为 310px\n          .commands('M100 0 L0 100 L50 200 L150 200 L200 100 Z') // 设置路径命令，绘制一个五边形\n          .fillOpacity(0) // 设置填充透明度为 0，即不填充颜色\n          .stroke(Color.Black) // 设置描边颜色为黑色\n          .strokeWidth(3) // 设置描边宽度为 3px\n      }.width('95%') // 设置 Flex 容器的宽度为父容器的 95%\n\n      Text('Curve graphics').fontSize(11).fontColor(0xCCCCCC).width('90%') // 显示文本 \"Curve graphics\"，设置字体大小、颜色和宽度\n\n      Flex({ justifyContent: FlexAlign.SpaceBetween }) { // 使用 Flex 布局，设置子组件之间的间距均匀分布\n        Path() // 创建一个路径图形\n          .width('250px') // 设置路径图形的宽度为 250px\n          .height('310px') // 设置路径图形的高度为 310px\n          .commands(\"M0 300 S100 0 240 300 Z\") // 设置路径命令，绘制一条曲线\n          .fillOpacity(0) // 设置填充透明度为 0，即不填充颜色\n          .stroke(Color.Black) // 设置描边颜色为黑色\n          .strokeWidth(3) // 设置描边宽度为 3px\n        Path() // 创建一个路径图形\n          .width('210px') // 设置路径图形的宽度为 210px\n          .height('310px') // 设置路径图形的高度为 310px\n          .commands('M0 150 C0 100 140 0 200 150 L100 300 Z') // 设置路径命令，绘制一条曲线\n          .fillOpacity(0) // 设置填充透明度为 0，即不填充颜色\n          .stroke(Color.Black) // 设置描边颜色为黑色\n          .strokeWidth(3) // 设置描边宽度为 3px\n        Path() // 创建一个路径图形\n          .width('210px') // 设置路径图形的宽度为 210px\n          .height('310px') // 设置路径图形的高度为 310px\n          .commands('M0 100 A30 20 20 0 0 200 100 Z') // 设置路径命令，绘制一条曲线\n          .fillOpacity(0) // 设置填充透明度为 0，即不填充颜色\n          .stroke(Color.Black) // 设置描边颜色为黑色\n          .strokeWidth(3) // 设置描边宽度为 3px\n      }.width('95%') // 设置 Flex 容器的宽度为父容器的 95%\n    }.width('100%') // 设置 Column 容器的宽度为父容器的 100%\n    .margin({ top: 5 }) // 设置顶部外边距为 5vp\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Rect": {
        "description": "矩形绘制组件。",
        "details": null,
        "interfaces": [
            {
                "description": "Rect(value?: {width?: string | number,height?: string | number,radius?: string | number | Array<string | number>} | {width?: string | number,height?: string | number,radiusWidth?: string | number,radiusHeight?: string | number})",
                "params": {
                    "value": {
                        "type": [
                            {
                                "width": [
                                    "string",
                                    "number"
                                ],
                                "height": [
                                    "string",
                                    "number"
                                ],
                                "radius": [
                                    "string",
                                    "number",
                                    [
                                        "string",
                                        "number"
                                    ]
                                ]
                            },
                            {
                                "width": [
                                    "string",
                                    "number"
                                ],
                                "height": [
                                    "string",
                                    "number"
                                ],
                                "radiusWidth": [
                                    "string",
                                    "number"
                                ],
                                "radiusHeight": [
                                    "string",
                                    "number"
                                ]
                            }
                        ],
                        "description": "矩形组件的参数。"
                    }
                }
            }
        ],
        "attributes": {
            "width": {
                "description": "宽度。",
                "params": {
                    "value": {
                        "type": [
                            "string",
                            "number"
                        ],
                        "description": "宽度。",
                        "default": "0"
                    }
                }
            },
            "height": {
                "description": "高度。",
                "params": {
                    "value": {
                        "type": [
                            "string",
                            "number"
                        ],
                        "description": "高度。",
                        "default": "0"
                    }
                }
            },
            "radius": {
                "description": "圆角半径，支持分别设置四个角的圆角度数。",
                "params": {
                    "value": {
                        "type": [
                            "string",
                            "number",
                            [
                                "string",
                                "number"
                            ]
                        ],
                        "description": "圆角半径。",
                        "default": "0"
                    }
                }
            },
            "radiusWidth": {
                "description": "圆角宽度。",
                "params": {
                    "value": {
                        "type": [
                            "string",
                            "number"
                        ],
                        "description": "圆角宽度。",
                        "default": "0"
                    }
                }
            },
            "radiusHeight": {
                "description": "圆角高度。",
                "params": {
                    "value": {
                        "type": [
                            "string",
                            "number"
                        ],
                        "description": "圆角高度。",
                        "default": "0"
                    }
                }
            },
            "fill": {
                "description": "设置填充区域颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "description": "填充区域颜色。"
                    }
                }
            },
            "fillOpacity": {
                "description": "设置填充区域透明度。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "description": "填充区域透明度。",
                        "default": "1"
                    }
                }
            },
            "stroke": {
                "description": "设置边框颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "description": "边框颜色。"
                    }
                }
            },
            "strokeDashArray": {
                "description": "设置边框间隙。",
                "params": {
                    "value": {
                        "type": [
                            "any"
                        ],
                        "description": "边框间隙。",
                        "default": "[]"
                    }
                }
            },
            "strokeDashOffset": {
                "description": "设置边框绘制起点的偏移量。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "description": "边框绘制起点的偏移量。",
                        "default": "0"
                    }
                }
            },
            "strokeLineCap": {
                "description": "设置边框端点绘制样式。",
                "params": {
                    "value": {
                        "type": "LineCapStyle",
                        "description": "边框端点绘制样式。",
                        "default": "LineCapStyle.Butt"
                    }
                }
            },
            "strokeLineJoin": {
                "description": "设置边框拐角绘制样式。",
                "params": {
                    "value": {
                        "type": "LineJoinStyle",
                        "description": "边框拐角绘制样式。",
                        "default": "LineJoinStyle.Miter"
                    }
                }
            },
            "strokeMiterLimit": {
                "description": "设置斜接长度与边框宽度比值的极限值。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "description": "斜接长度与边框宽度比值的极限值。",
                        "default": "4"
                    }
                }
            },
            "strokeOpacity": {
                "description": "设置边框透明度。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "description": "边框透明度。",
                        "default": "1"
                    }
                }
            },
            "strokeWidth": {
                "description": "设置边框宽度。",
                "params": {
                    "value": {
                        "type": "Length",
                        "description": "边框宽度。",
                        "default": "1"
                    }
                }
            },
            "antiAlias": {
                "description": "设置是否开启抗锯齿效果。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "description": "是否开启抗锯齿效果。",
                        "default": "true"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过Column布局实现了一个展示两个矩形元素的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为两个部分，每个部分包含一个矩形元素。\n第一个矩形元素通过Column组件实现，宽度为100vp，高度为100vp，背景使用线性渐变填充，渐变方向为从左到右，颜色从红色（0xff0000）到蓝色（0x0000ff）再到黄色（0xffff00），渐变位置分别为0.0、0.3和1.0。矩形元素的边角通过clip方法裁剪为圆角矩形，圆角半径为40vp。\n第二个矩形元素通过Rect组件实现，宽度为100vp，高度为100vp，背景颜色为粉色（Color.Pink），边角半径为40vp，边框颜色为黑色（Color.Black），边框宽度为默认值。矩形元素的背景同样使用线性渐变填充，渐变方向为从左到右，颜色从红色（0xff0000）到蓝色（0x0000ff）再到黄色（0xffff00），渐变位置分别为0.0、0.3和1.0。\n整个布局通过Column布局保证两个矩形元素在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct RectExample {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局的容器，子元素之间的间距为10vp\n      Column()\n        .width(100) // 设置Column组件的宽度为100vp\n        .height(100) // 设置Column组件的高度为100vp\n        .linearGradient({ // 设置Column组件的背景为线性渐变\n          direction: GradientDirection.Right, // 渐变方向为从左到右\n          colors: [[0xff0000, 0.0], [0x0000ff, 0.3], [0xffff00, 1.0]] // 渐变颜色及位置，从红色到蓝色再到黄色\n        })\n        .clip(new Rect({ width: 100, height: 100, radius: 40 })) // 裁剪Column组件为圆角矩形，圆角半径为40vp\n\n      Rect() // 创建一个Rect组件\n        .width(100) // 设置Rect组件的宽度为100vp\n        .height(100) // 设置Rect组件的高度为100vp\n        .fill(Color.Pink) // 设置Rect组件的背景颜色为粉色\n        .radius(40) // 设置Rect组件的边角半径为40vp\n        .stroke(Color.Black) // 设置Rect组件的边框颜色为黑色\n        .linearGradient({ // 设置Rect组件的背景为线性渐变\n          direction: GradientDirection.Right, // 渐变方向为从左到右\n          colors: [[0xff0000, 0.0], [0x0000ff, 0.3], [0xffff00, 1.0]] // 渐变颜色及位置，从红色到蓝色再到黄色\n        })\n    }\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个展示多种类型矩形（如普通矩形、带圆角矩形、带不同圆角矩形的矩形）及其样式效果的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组矩形。每个矩形组的矩形以垂直布局方式排列，矩形之间的间距均匀分布，且对齐方式为居中对齐。\n矩形的样式包括背景颜色、边框颜色、边框宽度、圆角半径、宽度和高度等属性，支持不同的样式展示。矩形组之间通过Column组件进行分隔。矩形的功能包括展示不同的样式效果，用户可以通过视觉观察矩形的不同样式。\n整个布局通过Column布局保证矩形在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct RectExample {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局的Column组件，组件之间的间距为10vp\n      Text('normal').fontSize(11).fontColor(0xCCCCCC).width('90%') // 创建一个文本组件，显示“normal”，字体大小为11vp，字体颜色为灰色，宽度为90%\n\n      Column({ space: 5 }) { // 创建一个垂直布局的Column组件，组件之间的间距为5vp\n        Text('normal').fontSize(9).fontColor(0xCCCCCC).width('90%') // 创建一个文本组件，显示“normal”，字体大小为9vp，字体颜色为灰色，宽度为90%\n\n        Rect({ width: '90%', height: 50 }) // 创建一个矩形组件，宽度为90%，高度为50vp\n          .fill(Color.Pink) // 设置矩形的填充颜色为粉色\n\n        Rect() // 创建一个矩形组件\n          .width('90%') // 设置矩形的宽度为90%\n          .height(50) // 设置矩形的高度为50vp\n          .fillOpacity(0) // 设置矩形的填充透明度为0（完全透明）\n          .stroke(Color.Red) // 设置矩形的边框颜色为红色\n          .strokeWidth(3) // 设置矩形的边框宽度为3vp\n\n        Text('with rounded corners').fontSize(11).fontColor(0xCCCCCC).width('90%') // 创建一个文本组件，显示“with rounded corners”，字体大小为11vp，字体颜色为灰色，宽度为90%\n\n        Rect({ width: '90%', height: 80 }) // 创建一个矩形组件，宽度为90%，高度为80vp\n          .radiusHeight(20) // 设置矩形的圆角高度为20vp\n          .radiusWidth(40) // 设置矩形的圆角宽度为40vp\n          .fill(Color.Pink) // 设置矩形的填充颜色为粉色\n\n        Rect({ width: '90%', height: 80 }) // 创建一个矩形组件，宽度为90%，高度为80vp\n          .radius(20) // 设置矩形的圆角半径为20vp\n          .fill(Color.Pink) // 设置矩形的填充颜色为粉色\n          .stroke(Color.Transparent) // 设置矩形的边框颜色为透明\n      }.width('100%').margin({ top: 10 }) // 设置Column组件的宽度为100%，顶部外边距为10vp\n\n      Rect({ width: '90%', height: 80 }) // 创建一个矩形组件，宽度为90%，高度为80vp\n        .radius([[40, 40], [20, 20], [40, 40], [20, 20]]) // 设置矩形的圆角半径，分别为左上、右上、右下、左下的圆角半径\n        .fill(Color.Pink) // 设置矩形的填充颜色为粉色\n    }.width('100%').margin({ top: 5 }) // 设置Column组件的宽度为100%，顶部外边距为5vp\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Shape": {
        "description": "绘制组件的父组件，实现类似SVG的效果。绘制组件单独使用，用于在页面上绘制指定的图形。",
        "interfaces": [
            {
                "description": "Shape(value?: PixelMap)",
                "params": {
                    "value": {
                        "type": "PixelMap",
                        "required": false,
                        "description": "绘制目标，可将图形绘制在指定的PixelMap对象中，若未设置，则在当前绘制目标中进行绘制。"
                    }
                }
            }
        ],
        "attributes": {
            "viewPort": {
                "description": "设置形状的视口。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "形状的视口。",
                        "default": {
                            "x": 0,
                            "y": 0,
                            "width": 0,
                            "height": 0
                        }
                    }
                }
            },
            "fill": {
                "description": "设置填充区域颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "填充区域颜色。"
                    }
                }
            },
            "fillOpacity": {
                "description": "设置填充区域透明度。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "填充区域透明度。",
                        "default": 1
                    }
                }
            },
            "stroke": {
                "description": "设置边框颜色，不设置时，默认没有边框。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "边框颜色。"
                    }
                }
            },
            "strokeDashArray": {
                "description": "设置边框间隙。",
                "params": {
                    "value": {
                        "type": "Array<any>",
                        "required": true,
                        "description": "边框间隙。",
                        "default": []
                    }
                }
            },
            "strokeDashOffset": {
                "description": "设置边框绘制起点的偏移量。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "边框绘制起点的偏移量。",
                        "default": 0
                    }
                }
            },
            "strokeLineCap": {
                "description": "设置边框端点绘制样式。",
                "params": {
                    "value": {
                        "type": "LineCapStyle",
                        "required": true,
                        "description": "边框端点绘制样式。",
                        "default": "LineCapStyle.Butt"
                    }
                }
            },
            "strokeLineJoin": {
                "description": "设置边框拐角绘制样式。",
                "params": {
                    "value": {
                        "type": "LineJoinStyle",
                        "required": true,
                        "description": "边框拐角绘制样式。",
                        "default": "LineJoinStyle.Miter"
                    }
                }
            },
            "strokeMiterLimit": {
                "description": "设置斜接长度与边框宽度比值的极限值。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": true,
                        "description": "斜接长度与边框宽度比值的极限值。",
                        "default": 4
                    }
                }
            },
            "strokeOpacity": {
                "description": "设置边框透明度。",
                "params": {
                    "value": {
                        "type": [
                            "number",
                            "string",
                            "Resource"
                        ],
                        "required": true,
                        "description": "边框透明度。",
                        "default": 1
                    }
                }
            },
            "strokeWidth": {
                "description": "设置边框宽度。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "边框宽度。",
                        "default": 1
                    }
                }
            },
            "antiAlias": {
                "description": "设置是否开启抗锯齿效果。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否开启抗锯齿效果。",
                        "default": true
                    }
                }
            },
            "mesh": {
                "description": "设置mesh效果。",
                "params": {
                    "value": {
                        "type": "Array<number>",
                        "required": true,
                        "description": "长度（column + 1）* （row + 1）* 2的数组，它记录了扭曲后的位图各个顶点位置。"
                    },
                    "column": {
                        "type": "number",
                        "required": true,
                        "description": "mesh矩阵列数。"
                    },
                    "row": {
                        "type": "number",
                        "required": true,
                        "description": "mesh矩阵行数。"
                    }
                }
            }
        },
        "events": {},
        "examples": [
            {
                "description": "该组件通过Column布局实现了一个展示多种形状（如矩形、椭圆、路径）及其样式效果的界面。布局宽度占据整个屏幕，高度根据内容自适应，顶部外边距为15vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组形状。每个形状组的形状以垂直布局方式排列，形状之间的间距均匀分布，且对齐方式为居中对齐。\n形状的样式包括填充颜色、边框颜色、边框宽度、边框虚线样式、边框线帽样式、边框线连接样式等属性，支持不同的样式展示。形状组之间通过Column组件进行分隔。形状的功能包括展示不同的几何图形和路径，用户可以通过视觉观察形状的样式变化。\n整个布局通过Column布局保证形状在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ShapeExample {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局的容器，子组件之间的间距为10vp\n      Text('basic').fontSize(11).fontColor(0xCCCCCC).width(320) // 创建一个文本组件，显示\"basic\"，字体大小为11，颜色为灰色，宽度为320vp\n\n      Shape() { // 创建一个形状组件，包含多个几何图形\n        Rect().width(300).height(50) // 创建一个矩形，宽度为300vp，高度为50vp\n        Ellipse().width(300).height(50).offset({ x: 0, y: 60 }) // 创建一个椭圆，宽度为300vp，高度为50vp，相对于上一个图形向下偏移60vp\n        Path().width(300).height(10).commands('M0 0 L900 0').offset({ x: 0, y: 120 }) // 创建一个路径，宽度为300vp，高度为10vp，路径命令为从(0,0)到(900,0)，相对于上一个图形向下偏移120vp\n      }\n      .width(350) // 设置形状组件的宽度为350vp\n      .height(140) // 设置形状组件的高度为140vp\n      .viewPort({ x: -2, y: -2, width: 304, height: 130 }) // 设置形状组件的视口，视口位置为(-2,-2)，视口宽度为304vp，高度为130vp\n      .fill(0x317AF7) // 设置形状组件的填充颜色为蓝色\n      .stroke(Color.Black) // 设置形状组件的边框颜色为黑色\n      .strokeWidth(4) // 设置形状组件的边框宽度为4vp\n      .strokeDashArray([20]) // 设置形状组件的边框虚线样式，虚线长度为20vp\n      .strokeDashOffset(10) // 设置形状组件的边框虚线偏移量为10vp\n      .strokeLineCap(LineCapStyle.Round) // 设置形状组件的边框线帽样式为圆角\n      .strokeLineJoin(LineJoinStyle.Round) // 设置形状组件的边框线连接样式为圆角\n      .antiAlias(true) // 开启形状组件的抗锯齿效果\n\n      Shape() { // 创建一个形状组件，包含一个矩形\n        Rect().width(300).height(50) // 创建一个矩形，宽度为300vp，高度为50vp\n      }\n      .width(350) // 设置形状组件的宽度为350vp\n      .height(80) // 设置形状组件的高度为80vp\n      .viewPort({ x: 0, y: 0, width: 320, height: 70 }) // 设置形状组件的视口，视口位置为(0,0)，视口宽度为320vp，高度为70vp\n      .fill(0x317AF7) // 设置形状组件的填充颜色为蓝色\n      .stroke(Color.Black) // 设置形状组件的边框颜色为黑色\n      .strokeWidth(10) // 设置形状组件的边框宽度为10vp\n\n      Shape() { // 创建一个形状组件，包含一个矩形\n        Rect().width(300).height(50) // 创建一个矩形，宽度为300vp，高度为50vp\n      }\n      .width(350) // 设置形状组件的宽度为350vp\n      .height(80) // 设置形状组件的高度为80vp\n      .viewPort({ x: -5, y: -5, width: 320, height: 70 }) // 设置形状组件的视口，视口位置为(-5,-5)，视口宽度为320vp，高度为70vp\n      .fill(0x317AF7) // 设置形状组件的填充颜色为蓝色\n      .stroke(Color.Black) // 设置形状组件的边框颜色为黑色\n      .strokeWidth(10) // 设置形状组件的边框宽度为10vp\n\n      Text('path').fontSize(11).fontColor(0xCCCCCC).width(320) // 创建一个文本组件，显示\"path\"，字体大小为11，颜色为灰色，宽度为320vp\n\n      Shape() { // 创建一个形状组件，包含一个路径\n        Path().width(300).height(10).commands('M0 0 L900 0') // 创建一个路径，宽度为300vp，高度为10vp，路径命令为从(0,0)到(900,0)\n      }\n      .width(350) // 设置形状组件的宽度为350vp\n      .height(20) // 设置形状组件的高度为20vp\n      .viewPort({ x: 0, y: -5, width: 300, height: 20 }) // 设置形状组件的视口，视口位置为(0,-5)，视口宽度为300vp，高度为20vp\n      .stroke(0xEE8443) // 设置形状组件的边框颜色为橙色\n      .strokeWidth(10) // 设置形状组件的边框宽度为10vp\n      .strokeDashArray([20]) // 设置形状组件的边框虚线样式，虚线长度为20vp\n\n      Shape() { // 创建一个形状组件，包含一个路径\n        Path().width(300).height(10).commands('M0 0 L900 0') // 创建一个路径，宽度为300vp，高度为10vp，路径命令为从(0,0)到(900,0)\n      }\n      .width(350) // 设置形状组件的宽度为350vp\n      .height(20) // 设置形状组件的高度为20vp\n      .viewPort({ x: 0, y: -5, width: 300, height: 20 }) // 设置形状组件的视口，视口位置为(0,-5)，视口宽度为300vp，高度为20vp\n      .stroke(0xEE8443) // 设置形状组件的边框颜色为橙色\n      .strokeWidth(10) // 设置形状组件的边框宽度为10vp\n      .strokeDashArray([20]) // 设置形状组件的边框虚线样式，虚线长度为20vp\n      .strokeDashOffset(10) // 设置形状组件的边框虚线偏移量为10vp\n\n      Shape() { // 创建一个形状组件，包含一个路径\n        Path().width(300).height(10).commands('M0 0 L900 0') // 创建一个路径，宽度为300vp，高度为10vp，路径命令为从(0,0)到(900,0)\n      }\n      .width(350) // 设置形状组件的宽度为350vp\n      .height(20) // 设置形状组件的高度为20vp\n      .viewPort({ x: 0, y: -5, width: 300, height: 20 }) // 设置形状组件的视口，视口位置为(0,-5)，视口宽度为300vp，高度为20vp\n      .stroke(0xEE8443) // 设置形状组件的边框颜色为橙色\n      .strokeWidth(10) // 设置形状组件的边框宽度为10vp\n      .strokeOpacity(0.5) // 设置形状组件的边框透明度为0.5\n\n      Shape() { // 创建一个形状组件，包含一个路径\n        Path().width(300).height(10).commands('M0 0 L900 0') // 创建一个路径，宽度为300vp，高度为10vp，路径命令为从(0,0)到(900,0)\n      }\n      .width(350) // 设置形状组件的宽度为350vp\n      .height(20) // 设置形状组件的高度为20vp\n      .viewPort({ x: 0, y: -5, width: 300, height: 20 }) // 设置形状组件的视口，视口位置为(0,-5)，视口宽度为300vp，高度为20vp\n      .stroke(0xEE8443) // 设置形状组件的边框颜色为橙色\n      .strokeWidth(10) // 设置形状组件的边框宽度为10vp\n      .strokeDashArray([20]) // 设置形状组件的边框虚线样式，虚线长度为20vp\n      .strokeLineCap(LineCapStyle.Round) // 设置形状组件的边框线帽样式为圆角\n\n      Shape() { // 创建一个形状组件，包含一个路径\n        Path().width(200).height(60).commands('M0 0 L400 0 L400 150 Z') // 创建一个路径，宽度为200vp，高度为60vp，路径命令为从(0,0)到(400,0)再到(400,150)并闭合\n      }\n      .width(300) // 设置形状组件的宽度为300vp\n      .height(200) // 设置形状组件的高度为200vp\n      .viewPort({ x: -20, y: -5, width: 310, height: 90 }) // 设置形状组件的视口，视口位置为(-20,-5)，视口宽度为310vp，高度为90vp\n      .fill(0x317AF7) // 设置形状组件的填充颜色为蓝色\n      .stroke(0xEE8443) // 设置形状组件的边框颜色为橙色\n      .strokeWidth(10) // 设置形状组件的边框宽度为10vp\n      .strokeLineJoin(LineJoinStyle.Miter) // 设置形状组件的边框线连接样式为斜接\n      .strokeMiterLimit(5) // 设置形状组件的边框斜接限制为5\n    }.width('100%').margin({ top: 15 }) // 设置Column容器的宽度为100%，顶部外边距为15vp\n  }\n}"
            }
        ]
    },
    "XComponent": {
        "description": "提供用于图形绘制和媒体数据写入的Surface，XComponent负责将其嵌入到视图中，支持应用自定义Surface位置和大小。",
        "details": null,
        "interfaces": [
            {
                "description": "XComponent(options: XComponentOptions)",
                "params": {
                    "options": {
                        "type": "XComponentOptions",
                        "required": true,
                        "description": "XComponent的具体配置参数。"
                    }
                }
            },
            {
                "description": "XComponent(value: {id: string, type: XComponentType, libraryname?: string, controller?: XComponentController})",
                "params": {
                    "value": {
                        "type": {
                            "id": "string",
                            "type": "XComponentType",
                            "libraryname": "string",
                            "controller": "XComponentController"
                        },
                        "required": true,
                        "description": "XComponent的配置参数。"
                    }
                }
            },
            {
                "description": "XComponent(value: {id: string, type: string, libraryname?: string, controller?: XComponentController})",
                "params": {
                    "value": {
                        "type": {
                            "id": "string",
                            "type": "string",
                            "libraryname": "string",
                            "controller": "XComponentController"
                        },
                        "required": true,
                        "description": "XComponent的配置参数。"
                    }
                }
            }
        ],
        "attributes": {
            "enableAnalyzer": {
                "description": "设置组件支持AI分析，当前支持主体识别、文字识别和对象查找等功能。",
                "params": {
                    "enable": {
                        "type": "boolean",
                        "required": true,
                        "description": "是否启用图像分析功能。"
                    }
                }
            }
        },
        "events": {
            "onLoad": {
                "description": "插件加载完成时回调事件。",
                "params": {
                    "event": {
                        "type": "object",
                        "required": false,
                        "description": "获取XComponent实例对象的context，context上挂载的方法由开发者在c++层定义。"
                    }
                }
            },
            "onDestroy": {
                "description": "插件卸载完成时回调事件。",
                "params": {
                    "event": {
                        "type": "function",
                        "required": true,
                        "description": "插件卸载完成时回调函数。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "示例1描述：\n该组件通过Column布局实现了一个图像AI分析功能的界面。布局宽度占据整个屏幕，包含多个按钮和一个XComponent组件。按钮的排列方式为垂直布局，按钮之间的间距为5vp。按钮的样式包括背景颜色、边框圆角、宽度和高度等属性，支持不同的样式展示。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，如改变XComponent的尺寸、启动和停止AI分析、获取支持的分析类型等。XComponent组件用于显示图像分析的结果，其宽度和高度可以通过按钮动态调整。整个布局通过Column布局保证按钮和XComponent在垂直方向上有序排列，确保界面整洁美观。",
                "code": "/*\n示例2描述：\n该组件通过Flex布局实现了一个surface旋转过程中锁定功能的界面。布局宽度占据整个屏幕，高度设为100%，包含一个XComponent组件。XComponent组件的排列方式为垂直布局，对齐方式为居中对齐。XComponent组件的样式包括宽度和高度等属性，支持动态调整。XComponent组件的功能包括在加载时设置surface的旋转锁定状态，并通过控制器获取当前的锁定状态。整个布局通过Flex布局保证XComponent在垂直方向上居中对齐，确保界面整洁美观。\n*/\n\n/*\n示例1代码：\n*/\n\nimport { BusinessError } from '@kit.BasicServicesKit'; // 导入BusinessError类，用于处理业务错误\n\nclass CustomXComponentController extends XComponentController {\n  onSurfaceCreated(surfaceId: string): void {\n    console.log(`onSurfaceCreated surfaceId: ${surfaceId}`) // 当surface创建时，输出surfaceId\n  }\n\n  onSurfaceChanged(surfaceId: string, rect: SurfaceRect): void {\n    console.log(`onSurfaceChanged surfaceId: ${surfaceId}, rect: ${JSON.stringify(rect)}`) // 当surface改变时，输出surfaceId和rect信息\n  }\n\n  onSurfaceDestroyed(surfaceId: string): void {\n    console.log(`onSurfaceDestroyed surfaceId: ${surfaceId}`) // 当surface销毁时，输出surfaceId\n  }\n}\n\n@Entry\n@Component\nstruct XComponentExample {\n  xComponentController: XComponentController = new CustomXComponentController() // 创建XComponentController实例\n  private config: ImageAnalyzerConfig = {\n    types: [ImageAnalyzerType.SUBJECT, ImageAnalyzerType.TEXT] // 配置图像分析类型\n  }\n  private aiController: ImageAnalyzerController = new ImageAnalyzerController() // 创建ImageAnalyzerController实例\n  private options: ImageAIOptions = {\n    types: [ImageAnalyzerType.SUBJECT, ImageAnalyzerType.TEXT], // 配置图像分析类型\n    aiController: this.aiController // 设置AI控制器\n  }\n  @State xcWidth: string = \"320px\" // 初始化XComponent的宽度\n  @State xcHeight: string = \"480px\" // 初始化XComponent的高度\n\n  build() {\n    Column({ space: 5 }) { // 创建一个垂直布局，按钮之间的间距为5vp\n      Button(\"change size\")\n        .onClick(() => {\n          this.xcWidth = \"640px\" // 点击按钮时，改变XComponent的宽度\n          this.xcHeight = \"720px\" // 点击按钮时，改变XComponent的高度\n        })\n      Button('start AI analyze')\n        .onClick(() => {\n          this.xComponentController.startImageAnalyzer(this.config) // 点击按钮时，启动图像分析\n            .then(() => {\n              console.log(\"analysis complete\") // 分析完成后，输出提示信息\n            })\n            .catch((error: BusinessError) => {\n              console.log(\"error code: \" + error.code) // 分析失败时，输出错误代码\n            })\n        })\n      Button('stop AI analyze')\n        .onClick(() => {\n          this.xComponentController.stopImageAnalyzer() // 点击按钮时，停止图像分析\n        })\n      Button('get analyzer types')\n        .onClick(() => {\n          this.aiController.getImageAnalyzerSupportTypes() // 点击按钮时，获取支持的分析类型\n        })\n      XComponent({\n        type: XComponentType.SURFACE, // 设置XComponent的类型为SURFACE\n        controller: this.xComponentController, // 设置XComponent的控制器\n        imageAIOptions: this.options // 设置图像分析选项\n      })\n        .width(this.xcWidth) // 设置XComponent的宽度\n        .height(this.xcHeight) // 设置XComponent的高度\n    }\n    .width(\"100%\") // 设置布局宽度为100%\n  }\n}\n\n/*\n示例2代码：\n*/\n\n@Entry\n@Component\nstruct Index{\n  @State isLock: boolean = true; // 初始化surface旋转锁定状态\n  @State xc_width: number = 500; // 初始化XComponent的宽度\n  @State xc_height: number = 700; // 初始化XComponent的高度\n  myXComponentController: XComponentController = new XComponentController(); // 创建XComponentController实例\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Start }) { // 创建一个垂直布局，对齐方式为居中对齐\n      XComponent({\n        id: 'xComponentId', // 设置XComponent的ID\n        type: XComponentType.SURFACE, // 设置XComponent的类型为SURFACE\n        libraryname: 'nativerender', // 设置XComponent的库名\n        controller: this.myXComponentController // 设置XComponent的控制器\n      })\n      .width(this.xc_width) // 设置XComponent的宽度\n      .height(this.xc_height) // 设置XComponent的高度\n      .onLoad(() => {\n        let surfaceRotation: SurfaceRotationOptions = { lock: this.isLock }; // 设置surface旋转锁定状态\n        this.myXComponentController.setXComponentSurfaceRotation(surfaceRotation); // 设置surface旋转锁定状态\n        console.log(\"Surface getXComponentSurfaceRotation lock = \" +\n          this.myXComponentController.getXComponentSurfaceRotation().lock); // 输出当前的surface旋转锁定状态\n      })\n    }\n    .width('100%') // 设置布局宽度为100%\n    .height('100%') // 设置布局高度为100%\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Component3D": {
        "description": "3D渲染组件，可以加载3D模型资源并做自定义渲染，通常用于3D动效场景。",
        "details": "该组件从API Version 11开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "Component3D((sceneOptions?: SceneOptions))",
                "params": {
                    "sceneOptions": {
                        "type": "SceneOptions",
                        "required": false,
                        "description": "3D场景配置选项。"
                    }
                }
            }
        ],
        "attributes": {
            "environment": {
                "description": "设置3D环境资源。",
                "params": {
                    "uri": {
                        "type": "Resource",
                        "required": true,
                        "description": "3D环境资源文件。"
                    }
                }
            },
            "customRender": {
                "description": "设置三维场景渲染的渲染管道。",
                "params": {
                    "uri": {
                        "type": "Resource",
                        "required": true,
                        "description": "自定义渲染管线的配置文件。"
                    },
                    "selfRenderUpdate": {
                        "type": "boolean",
                        "required": true,
                        "description": "当设置为true时外部UI没有更新时也能触发动效渲染。当设置为false时只有外部UI更新才能触发渲染。"
                    }
                }
            },
            "shader": {
                "description": "设置自定义渲染的shader文件资源。",
                "params": {
                    "uri": {
                        "type": "Resource",
                        "required": true,
                        "description": "自定义渲染的shader文件资源。"
                    }
                }
            },
            "shaderImageTexture": {
                "description": "设置自定义渲染用到的纹理资源。",
                "params": {
                    "uri": {
                        "type": "Resource",
                        "required": true,
                        "description": "自定义渲染用到的纹理资源。"
                    }
                }
            },
            "shaderInputBuffer": {
                "description": "设置自定义渲染用到的动效参数。",
                "params": {
                    "buffer": {
                        "type": "Array<number>",
                        "required": true,
                        "description": "自定义渲染用到的动效参数。"
                    }
                }
            },
            "renderWidth": {
                "description": "设置3D渲染分辨率的宽度。",
                "params": {
                    "value": {
                        "type": "Dimension",
                        "required": true,
                        "description": "3D渲染分辨率的宽度。"
                    }
                }
            },
            "renderHeight": {
                "description": "设置3D渲染分辨率的长度。",
                "params": {
                    "value": {
                        "type": "Dimension",
                        "required": true,
                        "description": "3D渲染分辨率的长度。"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "GLTF模型加载示例。\n该组件通过Row和Column布局实现了一个展示GLTF模型的界面。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为一个标题和一个3D模型展示区域。标题文本位于顶部，3D模型展示区域位于下方。\n标题文本的样式包括默认字体和颜色，宽度占据整个Column的100%。3D模型展示区域的宽度为90%，高度为90%，通过Component3D组件加载并渲染GLTF模型。环境贴图通过environment方法加载，模型类型为SURFACE。\n整个布局通过Row和Column布局保证标题和3D模型在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Index {\n  // 定义SceneOptions对象，包含GLTF模型的路径和模型类型\n  scene: SceneOptions = { scene: $rawfile('gltf/DamageHemlt/glTF/DamagedHelmet.gltf'), modelType: ModelType.SURFACE};\n\n  build() {\n    Row() {\n      Column() {\n        // 显示标题文本\n        Text('GLTF Example')\n        // 使用Component3D组件加载并渲染GLTF模型\n        Component3D( this.scene )\n          .environment($rawfile('gltf/Environment/glTF/Environment.gltf')) // 加载环境贴图\n          .renderWidth('90%').renderHeight('90%') // 设置渲染区域的宽度和高度\n      }.width('100%') // Column的宽度占据整个Row的100%\n    }\n    .height('100%') // Row的高度占据整个屏幕的100%\n  }\n}\n\n/*\n自定义渲染示例。\n该组件通过Row和Column布局实现了一个展示自定义渲染效果的界面。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为一个标题和一个自定义渲染区域。标题文本位于顶部，自定义渲染区域位于下方。\n标题文本的样式包括默认字体和颜色，宽度占据整个Column的100%。自定义渲染区域的宽度为50%，高度为50%，通过Component3D组件加载并渲染自定义渲染效果。自定义渲染效果通过shader、shaderImageTexture、shaderInputBuffer和customRender方法实现。\n整个布局通过Row和Column布局保证标题和自定义渲染区域在垂直方向上有序排列，确保界面整洁美观。\n*/\n\nimport { Animator as animator, AnimatorResult } from '@kit.ArkUI';\n\n// 定义EngineTime类，用于管理时间相关的变量\nclass EngineTime {\n  totalTimeUs = 0; // 总时间，单位为微秒\n  deltaTimeUs = 0; // 时间增量，单位为微秒\n};\n\nlet engineTime = new EngineTime(); // 创建EngineTime实例\nlet frameCount: number = 0; // 帧计数器\n\n// 定义TickFrame函数，用于更新时间变量\nfunction TickFrame() {\n  if (frameCount == 10) {\n    engineTime.totalTimeUs += 1.0; // 每10帧增加总时间\n    engineTime.deltaTimeUs += 1.0; // 每10帧增加时间增量\n    frameCount = 0; // 重置帧计数器\n  } else {\n    frameCount++; // 帧计数器递增\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  // 定义SceneOptions对象，包含GLTF模型的路径和模型类型\n  scene: SceneOptions = { scene: $rawfile('gltf/DamageHemlt/glTF/DamagedHelmet.gltf'), modelType: ModelType.SURFACE};\n  // 创建AnimatorResult对象，用于管理动画效果\n  backAnimator: AnimatorResult = animator.create({\n    duration: 2000, // 动画持续时间，单位为毫秒\n    easing: \"ease\", // 动画缓动效果\n    delay: 0, // 动画延迟时间，单位为毫秒\n    fill: \"none\", // 动画填充模式\n    direction: \"normal\", // 动画播放方向\n    iterations: -1, // 动画循环次数，-1表示无限循环\n    begin: 100, // 动画起始值\n    end: 200, // 动画结束值\n  });\n  @State timeDelta: number[] = [1.0, 2.0]; // 定义状态变量，用于存储时间增量\n\n  create() {\n    // 设置动画结束时的回调函数\n    this.backAnimator.onfinish = () => {\n      console.log('backAnimator onfinish'); // 打印日志\n    }\n    // 设置动画每一帧的回调函数\n    this.backAnimator.onframe = value => {\n      TickFrame(); // 更新时间变量\n      this.timeDelta[0] = engineTime.deltaTimeUs; // 更新时间增量\n    }\n  }\n\n  build() {\n    Row() {\n      Column() {\n        // 显示标题文本\n        Text('custom rendering')\n        // 使用Component3D组件加载并渲染自定义渲染效果\n        Component3D()\n          .shader($rawfile('assets/app/shaders/shader/London.shader')) // 加载自定义着色器\n          .shaderImageTexture($rawfile('assets/London.jpg')) // 加载纹理图片\n          .shaderInputBuffer(this.timeDelta) // 传递时间增量\n          .customRender($rawfile('assets/app/rendernodegraphs/London.rng'), true) // 加载自定义渲染节点图\n          .renderWidth('90%').renderHeight('90%') // 设置渲染区域的宽度和高度\n          .onAppear(() => {\n            this.create(); // 初始化动画\n            this.backAnimator.play(); // 播放动画\n          }).width('50%').height('50%') // 设置Component3D的宽度和高度\n      }.width('100%') // Column的宽度占据整个Row的100%\n    }\n    .height('100%') // Row的高度占据整个屏幕的100%\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "EmbeddedComponent": {
        "description": "用于在当前页面嵌入本应用内其他EmbeddedUIExtensionAbility提供的UI。EmbeddedUIExtensionAbility在独立进程中运行，完成页面布局和渲染。通常用于有进程隔离诉求的模块化开发场景。",
        "details": "该组件从API Version 12开始支持。EmbeddedComponent仅支持在拥有多进程权限的设备上使用。EmbeddedComponent只能在UIAbility中使用，且被拉起的EmbeddedUIExtensionAbility需与UIAbility属于同一应用。",
        "interfaces": [
            {
                "description": "EmbeddedComponent(loader: Want, type: EmbeddedType)",
                "params": {
                    "loader": {
                        "type": "Want",
                        "required": true,
                        "description": "要加载的EmbeddedUIExtensionAbility。"
                    },
                    "type": {
                        "type": "EmbeddedType",
                        "required": true,
                        "description": "提供方的类型。"
                    }
                }
            }
        ],
        "attributes": {
            "通用属性": {
                "description": "支持通用属性。",
                "params": {}
            }
        },
        "events": {
            "onTerminated": {
                "description": "被拉起的EmbeddedUIExtensionAbility通过调用terminateSelfWithResult或者terminateSelf正常退出时，触发本回调函数。",
                "params": {
                    "callback": {
                        "type": "Callback<TerminationInfo>",
                        "required": true,
                        "description": "回调函数，接收TerminationInfo作为参数。"
                    }
                }
            },
            "onError": {
                "description": "被拉起的EmbeddedUIExtensionAbility在运行过程中发生异常时触发本回调。",
                "params": {
                    "callback": {
                        "type": "ErrorCallback",
                        "required": true,
                        "description": "回调函数，接收错误信息作为参数。"
                    }
                }
            }
        },
        "rules": [
            "EmbeddedComponent仅支持在拥有多进程权限的设备上使用。",
            "EmbeddedComponent只能在UIAbility中使用，且被拉起的EmbeddedUIExtensionAbility需与UIAbility属于同一应用。"
        ],
        "examples": [
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用EmbeddedComponent组件和EmbeddedUIExtensionAbility。示例应用的bundleName为\"com.example.embeddeddemo\"，被拉起的EmbeddedUIExtensionAbility为\"ExampleEmbeddedAbility\"。\n\n布局属性：\n- 主页面（Index）采用Row和Column布局，宽度占据整个屏幕，高度为100%。\n- EmbeddedComponent组件的宽度为100%，高度为90%。\n\n组件的样式和外观：\n- Text组件的字体大小为30。\n- EmbeddedComponent组件的宽度和高度分别设置为100%和90%。\n\n组件的排列和嵌套关系：\n- 主页面采用Row布局，内部嵌套Column布局。\n- Column布局中包含一个Text组件和一个EmbeddedComponent组件。\n\n组件的功能和交互：\n- Text组件用于显示消息。\n- EmbeddedComponent组件用于拉起EmbeddedUIExtensionAbility，并监听其生命周期事件（如终止和错误）。\n- EmbeddedUIExtensionAbility的生命周期方法（如onCreate、onForeground、onBackground、onDestroy）用于管理其生命周期。\n- onSessionCreate方法用于创建会话并加载内容。\n- onSessionDestroy方法用于销毁会话。\n- EmbeddedUIExtensionAbility的入口页面（extension.ets）包含一个Text组件和一个Button组件，Button组件用于终止自身并返回结果。",
                "code": "// 导入Want模块\nimport { Want } from '@kit.AbilityKit';\n\n// 定义Index组件\n@Entry\n@Component\nstruct Index {\n  // 定义状态变量message，用于显示消息\n  @State message: string = 'Message: '\n  \n  // 定义want对象，指定要拉起的EmbeddedUIExtensionAbility\n  private want: Want = {\n    bundleName: \"com.example.embeddeddemo\",\n    abilityName: \"ExampleEmbeddedAbility\",\n  }\n\n  // 构建页面布局\n  build() {\n    Row() {\n      Column() {\n        // 显示消息的Text组件\n        Text(this.message).fontSize(30)\n        \n        // 使用EmbeddedComponent组件拉起EmbeddedUIExtensionAbility\n        EmbeddedComponent(this.want, EmbeddedType.EMBEDDED_UI_EXTENSION)\n          .width('100%') // 设置宽度为100%\n          .height('90%') // 设置高度为90%\n          .onTerminated((info) => {\n            // 监听EmbeddedUIExtensionAbility的终止事件\n            this.message = 'Termination: code = ' + info.code + ', want = ' + JSON.stringify(info.want);\n          })\n          .onError((error) => {\n            // 监听EmbeddedUIExtensionAbility的错误事件\n            this.message = 'Error: code = ' + error.code;\n          })\n      }\n      .width('100%') // 设置Column的宽度为100%\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}\n\n/*\n该示例展示了如何在鸿蒙ArkUI中实现一个EmbeddedUIExtensionAbility。EmbeddedUIExtensionAbility的生命周期方法（如onCreate、onForeground、onBackground、onDestroy）用于管理其生命周期。onSessionCreate方法用于创建会话并加载内容，onSessionDestroy方法用于销毁会话。\n\n布局属性：\n- EmbeddedUIExtensionAbility的入口页面（extension.ets）采用Column布局，宽度占据整个屏幕，高度为100%。\n\n组件的样式和外观：\n- Text组件的字体大小为20，字体加粗。\n- Button组件的字体大小为20。\n\n组件的排列和嵌套关系：\n- 入口页面采用Column布局，内部包含一个Text组件和一个Button组件。\n\n组件的功能和交互：\n- Text组件用于显示消息。\n- Button组件用于终止自身并返回结果。\n*/\n\n// 导入EmbeddedUIExtensionAbility和UIExtensionContentSession模块\nimport { EmbeddedUIExtensionAbility, UIExtensionContentSession, Want } from '@kit.AbilityKit';\n\n// 定义TAG常量，用于日志输出\nconst TAG: string = '[ExampleEmbeddedAbility]'\n\n// 定义ExampleEmbeddedAbility类，继承自EmbeddedUIExtensionAbility\nexport default class ExampleEmbeddedAbility extends EmbeddedUIExtensionAbility {\n\n  // 生命周期方法：创建时调用\n  onCreate() {\n    console.log(TAG, `onCreate`);\n  }\n\n  // 生命周期方法：进入前台时调用\n  onForeground() {\n    console.log(TAG, `onForeground`);\n  }\n\n  // 生命周期方法：进入后台时调用\n  onBackground() {\n    console.log(TAG, `onBackground`);\n  }\n\n  // 生命周期方法：销毁时调用\n  onDestroy() {\n    console.log(TAG, `onDestroy`);\n  }\n\n  // 会话创建时调用\n  onSessionCreate(want: Want, session: UIExtensionContentSession) {\n    console.log(TAG, `onSessionCreate, want: ${JSON.stringify(want)}`);\n    let param: Record<string, UIExtensionContentSession> = {\n      'session': session\n    };\n    let storage: LocalStorage = new LocalStorage(param);\n    session.loadContent('pages/extension', storage);\n  }\n\n  // 会话销毁时调用\n  onSessionDestroy(session: UIExtensionContentSession) {\n    console.log(TAG, `onSessionDestroy`);\n  }\n}\n\n/*\n该示例展示了如何在鸿蒙ArkUI中实现EmbeddedUIExtensionAbility的入口页面。入口页面包含一个Text组件和一个Button组件，Button组件用于终止自身并返回结果。\n\n布局属性：\n- 入口页面采用Column布局，宽度占据整个屏幕，高度为100%。\n\n组件的样式和外观：\n- Text组件的字体大小为20，字体加粗。\n- Button组件的字体大小为20。\n\n组件的排列和嵌套关系：\n- 入口页面采用Column布局，内部包含一个Text组件和一个Button组件。\n\n组件的功能和交互：\n- Text组件用于显示消息。\n- Button组件用于终止自身并返回结果。\n*/\n\n// 导入UIExtensionContentSession模块\nimport { UIExtensionContentSession } from '@kit.AbilityKit';\n\n// 获取共享的LocalStorage\nlet storage = LocalStorage.getShared()\n\n// 定义Extension组件\n@Entry(storage)\n@Component\nstruct Extension {\n  // 定义状态变量message，用于显示消息\n  @State message: string = 'EmbeddedUIExtensionAbility Index';\n  \n  // 获取UIExtensionContentSession对象\n  private session: UIExtensionContentSession | undefined = storage.get<UIExtensionContentSession>('session');\n\n  // 构建页面布局\n  build() {\n    Column() {\n      // 显示消息的Text组件\n      Text(this.message)\n        .fontSize(20) // 设置字体大小为20\n        .fontWeight(FontWeight.Bold) // 设置字体加粗\n      \n      // 用于终止自身的Button组件\n      Button(\"terminateSelfWithResult\").fontSize(20).onClick(() => {\n        this.session?.terminateSelfWithResult({\n          resultCode: 1,\n          want: {\n            bundleName: \"com.example.embeddeddemo\",\n            abilityName: \"ExampleEmbeddedAbility\",\n          }});\n      })\n    }.width('100%').height('100%') // 设置Column的宽度和高度为100%\n  }\n}\n\n/*\n该示例展示了如何在module.json5中配置EmbeddedUIExtensionAbility。配置项包括name、srcEntry和type。\n\n配置项：\n- name：指定EmbeddedUIExtensionAbility的名称。\n- srcEntry：指定EmbeddedUIExtensionAbility的入口文件路径。\n- type：指定EmbeddedUIExtensionAbility的类型为\"embeddedUI\"。\n*/\n\n{\n  \"name\": \"ExampleEmbeddedAbility\",\n  \"srcEntry\": \"./ets/extensionAbility/ExampleEmbeddedAbility.ets\",\n  \"type\": \"embeddedUI\"\n}"
            }
        ],
        "is_common_attrs": true
    },
    "ComposeTitleBar": {
        "description": "一种普通标题栏，支持设置标题、头像（可选）和副标题（可选），可用于一级页面、二级及其以上界面配置返回键。",
        "details": "该组件从API Version 10开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "ComposeTitleBar({item?: ComposeTitleBarMenuItem, title: ResourceStr, subtitle?: ResourceStr, menuItems?: Array<ComposeTitleBarMenuItem>})",
                "params": {
                    "item": {
                        "type": "ComposeTitleBarMenuItem",
                        "required": false,
                        "description": "用于左侧头像的单个菜单项目。"
                    },
                    "title": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "标题。"
                    },
                    "subtitle": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "副标题。"
                    },
                    "menuItems": {
                        "type": [
                            "Array",
                            "ComposeTitleBarMenuItem"
                        ],
                        "required": false,
                        "description": "右侧菜单项目列表。"
                    }
                }
            }
        ],
        "attributes": {
            "ComposeTitleBarMenuItem": {
                "description": "ComposeTitleBarMenuItem",
                "params": {
                    "value": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "图标资源。"
                    },
                    "isEnabled": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否启用，默认禁用。",
                        "default": false
                    },
                    "action": {
                        "type": "() => void",
                        "required": false,
                        "description": "触发时的动作闭包，item属性不支持触发action事件。"
                    }
                }
            }
        },
        "events": {},
        "is_common_attrs": false,
        "examples": [
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用`ComposeTitleBar`组件来创建带有标题、副标题和菜单项的标题栏。布局采用`Row`和`Column`嵌套的方式，确保内容在垂直方向上排列。每个`ComposeTitleBar`组件之间通过`Divider`进行分隔，形成清晰的视觉分界线。\n\n布局属性方面，整个布局占据整个屏幕的高度（`height('100%')`），确保内容在垂直方向上完全展开。`Divider`的高度为2vp，颜色为0xCCCCCC，用于分隔不同的`ComposeTitleBar`组件。\n\n组件的样式和外观方面，`ComposeTitleBar`组件的标题和副标题文本样式未明确指定，但通常会使用系统默认的字体和颜色。菜单项的图标资源通过`$r('app.media.ic_public_save')`引用，图标的启用状态通过`isEnabled`属性控制。\n\n组件的排列和嵌套关系方面，`Row`组件包含一个`Column`组件，`Column`组件内部依次排列了多个`Divider`和`ComposeTitleBar`组件。每个`ComposeTitleBar`组件的菜单项通过`menuItems`属性传递，菜单项的数量和内容根据`slice`方法动态调整。\n\n组件的功能和交互方面，每个菜单项的点击事件通过`action`属性绑定，点击后会调用`promptAction.showToast`方法显示一个提示消息。",
                "code": "import { ComposeTitleBar, promptAction } from '@kit.ArkUI'\n\n// 定义菜单项的接口，包含值、启用状态和点击事件\ninterface menuItem {\n  value: Resource; // 菜单项的图标资源\n  isEnabled?: boolean; // 菜单项是否启用，默认为true\n  action?: () => void; // 菜单项的点击事件\n}\n\n@Entry\n@Component\nstruct Index {\n  // 定义菜单项数组，包含四个菜单项，每个菜单项的图标相同，点击后显示相同的提示消息\n  private menuItems: Array<menuItem> = [\n    {\n      value: $r('app.media.ic_public_save'), // 菜单项图标资源\n      isEnabled: true, // 菜单项启用状态\n      action: () => promptAction.showToast({ message: \"show toast index 1\" }) // 点击事件，显示提示消息\n    },\n    {\n      value: $r('app.media.ic_public_save'),\n      isEnabled: true,\n      action: () => promptAction.showToast({ message: \"show toast index 1\" })\n    },\n    {\n      value: $r('app.media.ic_public_save'),\n      isEnabled: true,\n      action: () => promptAction.showToast({ message: \"show toast index 1\" })\n    },\n    {\n      value: $r('app.media.ic_public_save'),\n      isEnabled: true,\n      action: () => promptAction.showToast({ message: \"show toast index 1\" })\n    },\n  ]\n\n  build() {\n    Row() {\n      Column() {\n        Divider().height(2).color(0xCCCCCC) // 分隔线，高度为2vp，颜色为0xCCCCCC\n        ComposeTitleBar({\n          title: \"标题\", // 主标题\n          subtitle: \"副标题\", // 副标题\n          menuItems: this.menuItems.slice(0, 1), // 菜单项数组，取前一个菜单项\n        })\n        Divider().height(2).color(0xCCCCCC)\n        ComposeTitleBar({\n          title: \"标题\",\n          subtitle: \"副标题\",\n          menuItems: this.menuItems.slice(0, 2), // 菜单项数组，取前两个菜单项\n        })\n        Divider().height(2).color(0xCCCCCC)\n        ComposeTitleBar({\n          title: \"标题\",\n          subtitle: \"副标题\",\n          menuItems: this.menuItems, // 菜单项数组，取所有菜单项\n        })\n        Divider().height(2).color(0xCCCCCC)\n        ComposeTitleBar({\n          menuItems: [{ isEnabled: true, value: $r('app.media.ic_public_save'),\n            action: () => promptAction.showToast({ message: \"show toast index 1\" })\n          }], // 菜单项数组，包含一个菜单项\n          title: \"标题\",\n          subtitle: \"副标题\",\n          item: { isEnabled: true, value: $r('app.media.app_icon') } // 额外的菜单项\n        })\n        Divider().height(2).color(0xCCCCCC)\n      }\n    }.height('100%') // 布局高度占据整个屏幕\n  }\n}"
            }
        ]
    },
    "EditableTitleBar": {
        "description": "编辑型标题栏，适用于多选界面或者内容的编辑界面，一般采取左叉右勾的形式。",
        "details": null,
        "interfaces": [
            {
                "description": "EditableTitleBar({leftIconStyle: EditableLeftIconType, imageItem?: EditableTitleBarItem, title: ResourceStr, subtitle?: ResourceStr, menuItems?: Array<EditableTitleBarMenuItem>, isSaveIconRequired?: boolean, onSave?: () => void, onCancel?: () => void, options?: EditableTitleBarOptions, contentMargin?: LocalizedMargin})",
                "params": {
                    "leftIconStyle": {
                        "type": "EditableLeftIconType",
                        "required": true,
                        "description": "左侧按钮类型。"
                    },
                    "imageItem": {
                        "type": "EditableTitleBarItem",
                        "required": false,
                        "description": "用于左侧头像的单个菜单项目。"
                    },
                    "title": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "标题。"
                    },
                    "subtitle": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "副标题。"
                    },
                    "menuItems": {
                        "type": [
                            "EditableTitleBarMenuItem"
                        ],
                        "required": false,
                        "description": "右侧菜单项目列表。"
                    },
                    "isSaveIconRequired": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否需要右侧的保存按钮。",
                        "default": true
                    },
                    "onSave": {
                        "type": "() => void",
                        "required": false,
                        "description": "保存时的动作闭包。"
                    },
                    "onCancel": {
                        "type": "() => void",
                        "required": false,
                        "description": "当左侧按钮类型为 Cancel，触发取消时的动作闭包。从API version 12开始，当左侧按钮类型为 Back，触发返回时的动作闭包。"
                    },
                    "options": {
                        "type": "EditableTitleBarOptions",
                        "required": false,
                        "description": "标题样式。"
                    },
                    "contentMargin": {
                        "type": "LocalizedMargin",
                        "required": false,
                        "description": "标题栏外边距，不支持设置负数。",
                        "default": {
                            "start": "LengthMetrics.resource($r('sys.float.margin_left'))",
                            "end": "LengthMetrics.resource($r('sys.float.margin_right'))"
                        }
                    }
                }
            }
        ],
        "attributes": {},
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用`EditableTitleBar`组件来创建一个带有编辑功能的标题栏。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为多个部分，每个部分包含一个`EditableTitleBar`组件和一个分隔线（`Divider`）。每个`EditableTitleBar`组件的标题为“编辑页面”，并且具有不同的左侧图标样式和菜单项。\n\n`EditableTitleBar`组件的样式包括左侧图标的样式、标题文本、菜单项的图标和状态等属性。组件的功能包括点击左侧图标和菜单项时触发的操作，例如显示提示信息。整个布局通过`Row`和`Column`组件进行嵌套，确保界面整洁美观。",
                "code": "import { EditableLeftIconType, EditableTitleBar, promptAction } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column() {\n        // 创建一个高度为2vp的分隔线，颜色为0xCCCCCC\n        Divider().height(2).color(0xCCCCCC)\n        \n        // 创建一个EditableTitleBar组件，左侧图标样式为Cancel，标题为“编辑页面”，菜单项为空\n        EditableTitleBar({\n          leftIconStyle: EditableLeftIconType.Cancel,\n          title: '编辑页面',\n          menuItems: [],\n          onCancel: () => {\n            // 点击取消按钮时，显示提示信息“on cancel”\n            promptAction.showToast({ message: 'on cancel' });\n          },\n          onSave: () => {\n            // 点击保存按钮时，显示提示信息“on save”\n            promptAction.showToast({ message: 'on save' });\n          }\n        })\n        \n        // 创建一个高度为2vp的分隔线，颜色为0xCCCCCC\n        Divider().height(2).color(0xCCCCCC)\n        \n        // 创建一个EditableTitleBar组件，左侧图标样式为Back，标题为“编辑页面”，菜单项包含一个图标\n        EditableTitleBar({\n          leftIconStyle: EditableLeftIconType.Back,\n          title: '编辑页面',\n          menuItems: [\n            {\n              value: $r('app.media.ic_public_reduce'), // 菜单项的图标资源\n              isEnabled: false, // 菜单项禁用状态\n              action: () => {\n                // 点击菜单项时，显示提示信息“show toast index 2”\n                promptAction.showToast({ message: 'show toast index 2' });\n              }\n            }\n          ],\n          onSave: () => {\n            // 点击保存按钮时，显示提示信息“on save”\n            promptAction.showToast({ message: 'on save' })\n          }\n        })\n        \n        // 创建一个高度为2vp的分隔线，颜色为0xCCCCCC\n        Divider().height(2).color(0xCCCCCC)\n      }.width('100%') // 设置Column的宽度为100%\n    }.height('100%') // 设置Row的高度为100%\n  }\n}"
            },
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用`EditableTitleBar`组件。布局上，整个界面由多个`EditableTitleBar`组件和`Divider`组件组成，每个`EditableTitleBar`组件之间通过`Divider`进行分隔。布局宽度占据整个屏幕，高度根据内容自适应。每个`EditableTitleBar`组件包含一个主标题和副标题，以及可选的左侧图标、保存图标、菜单项和图片项。组件的排列方式为垂直布局，每个`EditableTitleBar`组件内部通过水平布局方式排列其内容。\n\n样式上，`EditableTitleBar`组件的背景模糊样式设置为`BlurStyle.COMPONENT_THICK`，使得背景具有一定的模糊效果。`Divider`组件的高度为2vp，颜色为0xCCCCCC，用于分隔不同的`EditableTitleBar`组件。\n\n功能上，每个`EditableTitleBar`组件支持不同的交互操作，如点击左侧图标返回上一级页面、点击保存图标显示提示信息、点击菜单项或图片项触发相应的操作并显示提示信息。整个布局通过垂直布局保证`EditableTitleBar`组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { EditableLeftIconType, EditableTitleBar, LengthMetrics, promptAction, router } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  @State titlebarMargin: LocalizedMargin = {\n    start: LengthMetrics.vp(35), // 设置标题栏左侧边距为35vp\n    end: LengthMetrics.vp(35),   // 设置标题栏右侧边距为35vp\n  };\n\n  build() {\n    Row() {\n      Column() {\n        EditableTitleBar({\n          leftIconStyle: EditableLeftIconType.Cancel, // 设置左侧图标样式为取消\n          title: '主标题',                            // 设置主标题\n          subtitle: '副标题',                         // 设置副标题\n\n          options: {\n            backgroundBlurStyle: BlurStyle.COMPONENT_THICK, // 设置背景模糊样式为COMPONENT_THICK\n          },\n          onSave: () => {\n            promptAction.showToast({ message: \"on save\" }); // 点击保存图标时显示提示信息\n          },\n        })\n\n        Divider().height(2).color(0xCCCCCC); // 添加高度为2vp、颜色为0xCCCCCC的分隔线\n\n        EditableTitleBar({\n          leftIconStyle: EditableLeftIconType.Cancel, // 设置左侧图标样式为取消\n          title: '主标题',                            // 设置主标题\n          subtitle: '副标题',                         // 设置副标题\n\n          isSaveIconRequired: false, // 不显示保存图标\n        })\n\n        Divider().height(2).color(0xCCCCCC); // 添加高度为2vp、颜色为0xCCCCCC的分隔线\n\n        EditableTitleBar({\n          leftIconStyle: EditableLeftIconType.Back, // 设置左侧图标样式为返回\n          title: '主标题',                          // 设置主标题\n          subtitle: '副标题',                       // 设置副标题\n          isSaveIconRequired: false,                // 不显示保存图标\n          onCancel: () => {\n            router.back(); // 点击左侧图标时返回上一级页面\n          },\n        })\n\n        Divider().height(2).color(0xCCCCCC); // 添加高度为2vp、颜色为0xCCCCCC的分隔线\n\n        EditableTitleBar({\n          leftIconStyle: EditableLeftIconType.Back, // 设置左侧图标样式为返回\n          title: '主标题',                          // 设置主标题\n          subtitle: '副标题',                       // 设置副标题\n          menuItems: [\n            {\n              value: $r('sys.media.ohos_ic_public_remove'), // 设置菜单项图标\n              isEnabled: true,                              // 菜单项启用\n              action: () => {\n                promptAction.showToast({ message: \"show toast index 1\" }); // 点击菜单项时显示提示信息\n              }\n            }\n          ],\n          isSaveIconRequired: false, // 不显示保存图标\n\n          onCancel: () => {\n            router.back(); // 点击左侧图标时返回上一级页面\n          },\n        })\n\n        Divider().height(2).color(0xCCCCCC); // 添加高度为2vp、颜色为0xCCCCCC的分隔线\n\n        EditableTitleBar({\n          leftIconStyle: EditableLeftIconType.Back, // 设置左侧图标样式为返回\n          title: '主标题',                          // 设置主标题\n          subtitle: '副标题',                       // 设置副标题\n\n          imageItem: {\n            value: $r('app.media.img'), // 设置图片项图标\n            isEnabled: true,            // 图片项启用\n            action: () => {\n              promptAction.showToast({ message: \"show toast index 2\" }); // 点击图片项时显示提示信息\n            }\n          },\n\n          contentMargin: this.titlebarMargin, // 设置内容边距\n\n          menuItems: [\n            {\n              value: $r('sys.media.ohos_ic_public_remove'), // 设置菜单项图标\n              isEnabled: true,                              // 菜单项启用\n              action: () => {\n                promptAction.showToast({ message: \"show toast index 3\" }); // 点击菜单项时显示提示信息\n              }\n            }\n          ],\n          onCancel: () => {\n            router.back(); // 点击左侧图标时返回上一级页面\n          },\n        })\n      }\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "SelectTitleBar": {
        "description": "下拉菜单标题栏包含一个下拉菜单，可用于页面之间的切换；可用于一级页面、二级及其以上界面（配置返回键）。",
        "details": null,
        "interfaces": [
            {
                "description": "SelectTitleBar({selected: number, options: Array<SelectOption>, menuItems?: Array<SelectTitleBarMenuItem>, subtitle?: ResourceStr, badgeValue?: number, hidesBackButton?: boolean, onSelected?: (index: number) => void})",
                "params": {
                    "selected": {
                        "type": "number",
                        "required": true,
                        "description": "当前选中项目的索引。第一项的索引为0。如果不设置该属性，则默认值为-1。",
                        "default": -1
                    },
                    "options": {
                        "type": [
                            "Array",
                            "SelectOption"
                        ],
                        "required": true,
                        "description": "下拉菜单中的项目。"
                    },
                    "menuItems": {
                        "type": [
                            "Array",
                            "SelectTitleBarMenuItem"
                        ],
                        "required": false,
                        "description": "右侧菜单项目列表，定义标题栏右侧的菜单项目。"
                    },
                    "subtitle": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "子标题。"
                    },
                    "badgeValue": {
                        "type": "number",
                        "required": false,
                        "description": "新事件标记。"
                    },
                    "hidesBackButton": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否隐藏左侧的返回箭头。",
                        "default": false
                    },
                    "onSelected": {
                        "type": [
                            "Function",
                            "number"
                        ],
                        "required": false,
                        "description": "下拉菜单项目选中触发的回调函数，传入选中项的索引。"
                    }
                }
            }
        ],
        "attributes": {
            "selected": {
                "description": "当前选中项目的索引。第一项的索引为0。如果不设置该属性，则默认值为-1。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": true,
                        "description": "当前选中项目的索引。",
                        "default": -1
                    }
                }
            },
            "options": {
                "description": "下拉菜单中的项目。",
                "params": {
                    "value": {
                        "type": [
                            "Array",
                            "SelectOption"
                        ],
                        "required": true,
                        "description": "下拉菜单中的项目。"
                    }
                }
            },
            "menuItems": {
                "description": "右侧菜单项目列表，定义标题栏右侧的菜单项目。",
                "params": {
                    "value": {
                        "type": [
                            "Array",
                            "SelectTitleBarMenuItem"
                        ],
                        "required": false,
                        "description": "右侧菜单项目列表。"
                    }
                }
            },
            "subtitle": {
                "description": "子标题。",
                "params": {
                    "value": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "子标题。"
                    }
                }
            },
            "badgeValue": {
                "description": "新事件标记。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": false,
                        "description": "新事件标记。"
                    }
                }
            },
            "hidesBackButton": {
                "description": "是否隐藏左侧的返回箭头。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否隐藏左侧的返回箭头。",
                        "default": false
                    }
                }
            }
        },
        "events": {
            "onSelected": {
                "description": "下拉菜单项目选中触发的回调函数，传入选中项的索引。",
                "params": {
                    "index": {
                        "type": "number",
                        "required": true,
                        "description": "选中项的索引。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用`SelectTitleBar`组件。布局采用`Row`和`Column`嵌套，实现了一个垂直排列的布局结构。每个`SelectTitleBar`组件占据一行，并通过`Divider`组件进行分隔，形成清晰的视觉分界线。\n\n布局属性方面，`Row`组件的高度设置为`100%`，占据整个屏幕高度；`Column`组件的宽度设置为`100%`，占据整个屏幕宽度。每个`SelectTitleBar`组件的选项通过`options`属性进行配置，支持用户选择不同的选项。\n\n组件的样式和外观方面，`Divider`组件的高度为`2`，颜色为`0xCCCCCC`，用于分隔不同的`SelectTitleBar`组件。`SelectTitleBar`组件的选项文本通过`value`属性进行设置，支持不同的选项文本展示。\n\n组件的排列和嵌套关系方面，`Row`组件作为根布局，包含一个`Column`组件，`Column`组件内部依次排列多个`SelectTitleBar`组件和`Divider`组件。每个`SelectTitleBar`组件通过`options`属性配置选项，并通过`onSelected`事件处理用户选择操作。\n\n组件的功能和交互方面，用户可以通过点击`SelectTitleBar`组件中的选项触发`onSelected`事件，事件处理函数通过`promptAction.showToast`方法显示提示信息。此外，`SelectTitleBar`组件还支持配置`subtitle`、`menuItems`和`badgeValue`等属性，实现更丰富的功能和交互效果。",
                "code": "import { SelectTitleBar, promptAction } from '@kit.ArkUI';\n\n// 定义菜单项接口\ninterface menuItems {\n  value: Resource; // 菜单项的值，通常是一个资源ID\n  isEnabled?: boolean; // 菜单项是否启用，可选，默认为true\n  action?: () => void; // 菜单项点击后的动作，可选\n}\n\n@Entry\n@Component\nstruct Index {\n  // 定义菜单项数组\n  private menuItems: Array<menuItems> = [\n    {\n      value: $r('app.media.ic_public_save'), // 菜单项的图标资源\n      isEnabled: true, // 菜单项启用\n      action: () => promptAction.showToast({ message: \"show toast index 1\" }) // 点击后的动作，显示提示信息\n    },\n    {\n      value: $r('app.media.ic_public_reduce'), // 菜单项的图标资源\n      isEnabled: true, // 菜单项启用\n      action: () => promptAction.showToast({ message: \"show toast index 2\" }) // 点击后的动作，显示提示信息\n    },\n    {\n      value: $r('app.media.ic_public_edit'), // 菜单项的图标资源\n      isEnabled: true, // 菜单项启用\n      action: () => promptAction.showToast({ message: \"show toast index 3\" }) // 点击后的动作，显示提示信息\n    },\n    {\n      value: $r('app.media.ic_public_reduce'), // 菜单项的图标资源\n      isEnabled: true, // 菜单项启用\n      action: () => promptAction.showToast({ message: \"show toast index 4\" }) // 点击后的动作，显示提示信息\n    }\n  ];\n\n  build() {\n    Row() {\n      Column() {\n        Divider().height(2).color(0xCCCCCC) // 分隔线，高度为2，颜色为0xCCCCCC\n        SelectTitleBar({\n          options: [\n            { value: '所有照片' }, // 选项1\n            { value: '本地（设备）' }, // 选项2\n            { value: '本地本地本地本地本地（储存卡）' } // 选项3\n          ],\n          selected: 0, // 默认选中第一个选项\n          onSelected: (index) => promptAction.showToast({ message: 'page index ' + index }), // 选中选项后的动作，显示提示信息\n          hidesBackButton: true // 隐藏返回按钮\n        })\n        Divider().height(2).color(0xCCCCCC) // 分隔线，高度为2，颜色为0xCCCCCC\n        SelectTitleBar({\n          options: [\n            { value: '所有照片' }, // 选项1\n            { value: '本地（设备）' }, // 选项2\n            { value: '本地本地本地本地本地（储存卡）' } // 选项3\n          ],\n          selected: 0, // 默认选中第一个选项\n          onSelected: (index) => promptAction.showToast({ message: 'page index ' + index }), // 选中选项后的动作，显示提示信息\n          hidesBackButton: false // 显示返回按钮\n        })\n        Divider().height(2).color(0xCCCCCC) // 分隔线，高度为2，颜色为0xCCCCCC\n        SelectTitleBar({\n          options: [\n            { value: '所有照片' }, // 选项1\n            { value: '本地（设备）' }, // 选项2\n            { value: '本地本地本地本地本地（储存卡）' } // 选项3\n          ],\n          selected: 1, // 默认选中第二个选项\n          onSelected: (index) => promptAction.showToast({ message: 'page index ' + index }), // 选中选项后的动作，显示提示信息\n          subtitle: \"example@example.com\" // 副标题\n        })\n        Divider().height(2).color(0xCCCCCC) // 分隔线，高度为2，颜色为0xCCCCCC\n        SelectTitleBar({\n          options: [\n            { value: '所有照片' }, // 选项1\n            { value: '本地（设备）' }, // 选项2\n            { value: '本地本地本地本地本地（储存卡）' } // 选项3\n          ],\n          selected: 1, // 默认选中第二个选项\n          onSelected: (index) => promptAction.showToast({ message: 'page index ' + index }), // 选中选项后的动作，显示提示信息\n          subtitle: \"example@example.com\", // 副标题\n          menuItems: [{ isEnabled: true, value: $r('app.media.ic_public_save'), // 菜单项配置\n            action: () => promptAction.showToast({ message: \"show toast index 1\" }) // 菜单项点击后的动作，显示提示信息\n          }]\n        })\n        Divider().height(2).color(0xCCCCCC) // 分隔线，高度为2，颜色为0xCCCCCC\n        SelectTitleBar({\n          options: [\n            { value: '所有照片' }, // 选项1\n            { value: '本地（设备）' }, // 选项2\n            { value: '本地本地本地本地本地（储存卡）' } // 选项3\n          ],\n          selected: 0, // 默认选中第一个选项\n          onSelected: (index) => promptAction.showToast({ message: 'page index ' + index }), // 选中选项后的动作，显示提示信息\n          subtitle: \"example@example.com\", // 副标题\n          menuItems: this.menuItems, // 菜单项配置\n          badgeValue: 99, // 徽章值\n          hidesBackButton: true // 隐藏返回按钮\n        })\n        Divider().height(2).color(0xCCCCCC) // 分隔线，高度为2，颜色为0xCCCCCC\n      }.width('100%') // Column组件宽度占据整个屏幕宽度\n    }.height('100%') // Row组件高度占据整个屏幕高度\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "TabTitleBar": {
        "description": "页签型标题栏，用于页面之间的切换。仅一级页面适用。",
        "details": "该组件从API Version 10开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "TabTitleBar({tabItems: Array<TabTitleBarTabItem>, menuItems?: Array<TabTitleBarMenuItem>, swiperContent: () => void})",
                "params": {
                    "tabItems": {
                        "type": "Array<TabTitleBarTabItem>",
                        "required": true,
                        "description": "左侧页签项目列表，定义标题栏左侧的页签项目。"
                    },
                    "menuItems": {
                        "type": "Array<TabTitleBarMenuItem>",
                        "required": false,
                        "description": "右侧菜单项目列表，定义标题栏右侧的菜单项目。"
                    },
                    "swiperContent": {
                        "type": "() => void",
                        "required": true,
                        "description": "页签列表关联的页面内容构造器。"
                    }
                }
            }
        ],
        "attributes": {
            "TabTitleBarMenuItem": {
                "description": "右侧菜单项目列表中的单个菜单项。",
                "params": {
                    "value": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "图标资源。"
                    },
                    "isEnabled": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否启用。默认启用。true：启用，false：禁用。",
                        "default": true
                    },
                    "action": {
                        "type": "() => void",
                        "required": false,
                        "description": "触发时的动作闭包。"
                    }
                }
            },
            "TabTitleBarTabItem": {
                "description": "左侧页签项目列表中的单个页签项。",
                "params": {
                    "title": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "文字页签。"
                    },
                    "icon": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "图片页签资源。"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用TabTitleBar组件来创建一个带有标签页和菜单的界面。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为两个部分：顶部是TabTitleBar组件，底部是内容区域。TabTitleBar组件包含标签页和菜单项，标签页用于切换不同的内容区域，菜单项用于触发特定的操作。\n\nTabTitleBar组件的样式包括标签页的标题和图标，以及菜单项的图标和点击事件。标签页的标题和图标通过tabItem类定义，菜单项的图标和点击事件通过menuItem接口定义。标签页和菜单项的排列方式为水平布局，标签页和菜单项之间的间距均匀分布，且对齐方式为居中对齐。\n\n内容区域的样式包括文本的背景颜色、字体颜色、字体大小、字体粗细和对齐方式。文本的背景颜色通过资源名定义，字体颜色为白色，字体大小为14，字体粗细为粗体，对齐方式为居中对齐。\n\n整个布局通过Row和Column组件进行嵌套，确保TabTitleBar和内容区域在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// 导入TabTitleBar和promptAction组件\nimport { TabTitleBar, promptAction } from '@kit.ArkUI';\n\n// 定义tabItem类，用于存储标签页的标题和图标\nclass tabItem {\n  title: ResourceStr; // 标签页的标题\n  icon?: ResourceStr; // 标签页的图标，可选\n  constructor(title: ResourceStr, icon?: ResourceStr) {\n    this.title = title;\n    this.icon = icon;\n  }\n}\n\n// 定义menuItem接口，用于存储菜单项的图标、是否启用和点击事件\ninterface menuItem {\n  value: ResourceStr; // 菜单项的图标\n  isEnabled?: boolean; // 菜单项是否启用，可选，默认为true\n  action?: () => void; // 菜单项的点击事件，可选\n}\n\n// 定义Index组件，作为页面的入口组件\n@Entry\n@Component\nstruct Index {\n  // 定义componentBuilder方法，用于生成内容区域的组件\n  @Builder\n  componentBuilder() {\n    // 创建第一个文本组件，设置背景颜色、字体颜色、字体大小、字体粗细和对齐方式\n    Text(\"#1ABC9C\\nTURQUOISE\")\n      .fontWeight(FontWeight.Bold) // 设置字体粗细为粗体\n      .fontSize(14) // 设置字体大小为14\n      .width(\"100%\") // 设置宽度为100%\n      .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n      .fontColor(\"#CCFFFFFF\") // 设置字体颜色为白色\n      .backgroundColor(\"#1ABC9C\"); // 设置背景颜色为#1ABC9C\n\n    // 创建第二个文本组件，设置背景颜色、字体颜色、字体大小、字体粗细和对齐方式\n    Text(\"#16A085\\nGREEN SEA\")\n      .fontWeight(FontWeight.Bold) // 设置字体粗细为粗体\n      .fontSize(14) // 设置字体大小为14\n      .width(\"100%\") // 设置宽度为100%\n      .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n      .fontColor(\"#CCFFFFFF\") // 设置字体颜色为白色\n      .backgroundColor(\"#16A085\"); // 设置背景颜色为#16A085\n\n    // 创建第三个文本组件，设置背景颜色、字体颜色、字体大小、字体粗细和对齐方式\n    Text(\"#2ECC71\\nEMERALD\")\n      .fontWeight(FontWeight.Bold) // 设置字体粗细为粗体\n      .fontSize(14) // 设置字体大小为14\n      .width(\"100%\") // 设置宽度为100%\n      .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n      .fontColor(\"#CCFFFFFF\") // 设置字体颜色为白色\n      .backgroundColor(\"#2ECC71\"); // 设置背景颜色为#2ECC71\n\n    // 创建第四个文本组件，设置背景颜色、字体颜色、字体大小、字体粗细和对齐方式\n    Text(\"#27AE60\\nNEPHRITIS\")\n      .fontWeight(FontWeight.Bold) // 设置字体粗细为粗体\n      .fontSize(14) // 设置字体大小为14\n      .width(\"100%\") // 设置宽度为100%\n      .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n      .fontColor(\"#CCFFFFFF\") // 设置字体颜色为白色\n      .backgroundColor(\"#27AE60\"); // 设置背景颜色为#27AE60\n\n    // 创建第五个文本组件，设置背景颜色、字体颜色、字体大小、字体粗细和对齐方式\n    Text(\"#3498DB\\nPETER RIVER\")\n      .fontWeight(FontWeight.Bold) // 设置字体粗细为粗体\n      .fontSize(14) // 设置字体大小为14\n      .width(\"100%\") // 设置宽度为100%\n      .textAlign(TextAlign.Center) // 设置文本对齐方式为居中对齐\n      .fontColor(\"#CCFFFFFF\") // 设置字体颜色为白色\n      .backgroundColor(\"#3498DB\"); // 设置背景颜色为#3498DB\n  }\n\n  // 定义标签页的数组，包含多个tabItem对象\n  private readonly tabItems: Array<tabItem> = [\n    new tabItem('页签1'),\n    new tabItem('页签2'),\n    new tabItem('页签3'),\n    new tabItem(\"Happy\", $r('app.media.emoji_happy')), // 包含图标的标签页\n    new tabItem('页签4')\n  ];\n\n  // 定义菜单项的数组，包含多个menuItem对象\n  private readonly menuItems: Array<menuItem> = [\n    {\n      value: $r('app.media.ic_public_reduce'), // 菜单项的图标\n      isEnabled: true, // 菜单项是否启用\n      action: () => promptAction.showToast({ message: \"on item click! index 0\" }) // 菜单项的点击事件\n    },\n    {\n      value: $r('app.media.ic_public_edit'), // 菜单项的图标\n      isEnabled: true, // 菜单项是否启用\n      action: () => promptAction.showToast({ message: \"on item click! index 1\" }) // 菜单项的点击事件\n    },\n    {\n      value: $r('app.media.ic_public_save'), // 菜单项的图标\n      isEnabled: true, // 菜单项是否启用\n      action: () => promptAction.showToast({ message: \"on item click! index 2\" }) // 菜单项的点击事件\n    },\n  ];\n\n  // 定义build方法，用于生成页面的布局\n  build() {\n    // 创建Row组件，设置高度为100%\n    Row() {\n      // 创建Column组件，设置宽度为100%\n      Column() {\n        // 创建TabTitleBar组件，设置swiperContent、tabItems和menuItems属性\n        TabTitleBar({\n          swiperContent: this.componentBuilder, // 内容区域的组件生成方法\n          tabItems: this.tabItems, // 标签页的数组\n          menuItems: this.menuItems, // 菜单项的数组\n        })\n      }.width('100%') // 设置Column组件的宽度为100%\n    }.height('100%') // 设置Row组件的高度为100%\n  }\n}"
            }
        ],
        "is_common_attrs": false
    },
    "ToolBar": {
        "description": "工具栏用于展示针对当前界面内容的操作选项，在界面底部显示。底部最多显示5个入口，超过则收纳入“更多”子项中，在最右侧显示。",
        "details": null,
        "interfaces": [
            {
                "description": "Toolbar({toolBarList: ToolBarOptions, activateIndex?: number, controller: TabsController})",
                "params": {
                    "toolBarList": {
                        "type": "ToolBarOptions",
                        "required": true,
                        "description": "工具栏列表。"
                    },
                    "activateIndex": {
                        "type": "number",
                        "required": false,
                        "description": "激活态的子项。",
                        "default": -1
                    },
                    "controller": {
                        "type": "TabsController",
                        "required": true,
                        "description": "筛选器的样式类型。"
                    }
                }
            }
        ],
        "attributes": {
            "toolBarList": {
                "description": "工具栏列表。",
                "params": {
                    "toolBarList": {
                        "type": "ToolBarOptions",
                        "required": true,
                        "description": "工具栏列表。"
                    }
                }
            },
            "activateIndex": {
                "description": "激活态的子项。",
                "params": {
                    "activateIndex": {
                        "type": "number",
                        "required": false,
                        "description": "激活态的子项。",
                        "default": -1
                    }
                }
            },
            "controller": {
                "description": "筛选器的样式类型。",
                "params": {
                    "controller": {
                        "type": "TabsController",
                        "required": true,
                        "description": "筛选器的样式类型。"
                    }
                }
            }
        },
        "events": {
            "onToolBarItemClick": {
                "description": "工具栏子项点击事件。",
                "params": {
                    "action": {
                        "type": "() => void",
                        "required": false,
                        "description": "工具栏子项点击事件。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过Row和Stack布局实现了一个工具栏（ToolBar）的界面。布局宽度占据整个屏幕，高度设为100%。工具栏位于屏幕底部，通过Stack组件的align属性设置为Alignment.Bottom，确保工具栏始终位于底部。\n工具栏的样式包括按钮的图标和文本内容，按钮的排列方式为垂直布局，通过Column组件实现。每个按钮的图标和文本内容通过ToolBarOptions对象进行配置，支持不同的状态（如启用、禁用、激活）。\n按钮的功能包括点击事件，用户可以通过点击按钮触发相应操作。按钮的状态通过ItemState枚举进行管理，支持启用、禁用和激活三种状态。\n整个布局通过Row和Stack布局保证工具栏在底部对齐，确保界面整洁美观。",
                "code": "// 导入ToolBar和ToolBarOptions组件\nimport { ToolBar, ToolBarOptions } from '@kit.ArkUI'\n\n// 定义按钮状态的枚举\nenum ItemState {\n  ENABLE = 1, // 启用状态\n  DISABLE = 2, // 禁用状态\n  ACTIVATE = 3 // 激活状态\n}\n\n// 主入口组件\n@Entry\n@Component\nstruct Index {\n  // 定义工具栏选项列表的状态变量\n  @State toolbarList: ToolBarOptions = new ToolBarOptions()\n\n  // 组件即将显示时的生命周期方法\n  aboutToAppear() {\n    // 添加第一个工具栏按钮\n    this.toolbarList.push({\n      content: '剪贴我是超超超超超超超超超长样式', // 按钮文本内容\n      icon: $r('sys.media.ohos_ic_public_share'), // 按钮图标资源\n      action: () => { // 按钮点击事件\n        // 点击事件处理逻辑\n      },\n    })\n\n    // 添加第二个工具栏按钮，设置为禁用状态\n    this.toolbarList.push({\n      content: '拷贝', // 按钮文本内容\n      icon: $r('sys.media.ohos_ic_public_copy'), // 按钮图标资源\n      action: () => { // 按钮点击事件\n        // 点击事件处理逻辑\n      },\n      state: ItemState.DISABLE // 按钮状态为禁用\n    })\n\n    // 添加第三个工具栏按钮，设置为激活状态\n    this.toolbarList.push({\n      content: '粘贴', // 按钮文本内容\n      icon: $r('sys.media.ohos_ic_public_paste'), // 按钮图标资源\n      action: () => { // 按钮点击事件\n        // 点击事件处理逻辑\n      },\n      state: ItemState.ACTIVATE // 按钮状态为激活\n    })\n\n    // 添加第四个工具栏按钮\n    this.toolbarList.push({\n      content: '全选', // 按钮文本内容\n      icon: $r('sys.media.ohos_ic_public_select_all'), // 按钮图标资源\n      action: () => { // 按钮点击事件\n        // 点击事件处理逻辑\n      },\n    })\n\n    // 添加第五个工具栏按钮\n    this.toolbarList.push({\n      content: '分享', // 按钮文本内容\n      icon: $r('sys.media.ohos_ic_public_share'), // 按钮图标资源\n      action: () => { // 按钮点击事件\n        // 点击事件处理逻辑\n      },\n    })\n\n    // 添加第六个工具栏按钮\n    this.toolbarList.push({\n      content: '分享', // 按钮文本内容\n      icon: $r('sys.media.ohos_ic_public_share'), // 按钮图标资源\n      action: () => { // 按钮点击事件\n        // 点击事件处理逻辑\n      },\n    })\n  }\n\n  // 构建组件的UI结构\n  build() {\n    Row() {\n      Stack() {\n        Column() {\n          // 创建工具栏组件\n          ToolBar({\n            activateIndex: 2, // 设置激活按钮的索引\n            toolBarList: this.toolbarList, // 工具栏按钮列表\n          })\n        }\n      }\n      .align(Alignment.Bottom) // 设置Stack组件对齐方式为底部对齐\n      .width('100%') // 设置Stack组件宽度为100%\n      .height('100%') // 设置Stack组件高度为100%\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "SubHeader": {
        "description": "子标题，用于列表项顶部，将该组列表划分为一个区块，子标题名称用来概括该区块内容。也可以用于内容项顶部，子标题名称用来概括该区块内容。",
        "details": null,
        "interfaces": [
            {
                "description": "SubHeader({icon?: ResourceStr, iconSymbolOptions?: SymbolOptions, primaryTitle?: ResourceStr, secondaryTitle?: ResourceStr, select?: SelectOptions, operationType?: OperationType, operationItem?: Array<OperationOption>, operationSymbolOptions?: Array<SymbolOptions>})",
                "params": {
                    "icon": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "图标设置项。"
                    },
                    "iconSymbolOptions": {
                        "type": "SymbolOptions",
                        "required": false,
                        "description": "icon为Symbol资源时的设置项。"
                    },
                    "primaryTitle": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "标题内容。"
                    },
                    "secondaryTitle": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "副标题内容。"
                    },
                    "select": {
                        "type": "SelectOptions",
                        "required": false,
                        "description": "select内容以及事件。"
                    },
                    "operationType": {
                        "type": "OperationType",
                        "required": false,
                        "description": "操作区(右侧)元素样式。",
                        "default": "OperationType.BUTTON"
                    },
                    "operationItem": {
                        "type": "Array<OperationOption>",
                        "required": false,
                        "description": "操作区（右侧）的设置项。"
                    },
                    "operationSymbolOptions": {
                        "type": "Array<SymbolOptions>",
                        "required": false,
                        "description": "operationType为OperationType.ICON_GROUP，operationItem设置多个图标，图标为Symbol资源时的设置项。"
                    }
                }
            }
        ],
        "attributes": {
            "primaryTitleModifier": {
                "description": "设置标题文本属性，如设置标题颜色、字体大小、字重等。",
                "params": {
                    "value": {
                        "type": "TextModifier",
                        "required": false,
                        "description": "标题文本属性。"
                    }
                }
            },
            "secondaryTitleModifier": {
                "description": "设置副标题文本属性，如设置标题颜色、字体大小、字重等。",
                "params": {
                    "value": {
                        "type": "TextModifier",
                        "required": false,
                        "description": "副标题文本属性。"
                    }
                }
            },
            "titleBuilder": {
                "description": "自定义标题区内容。",
                "params": {
                    "value": {
                        "type": "() => void",
                        "required": false,
                        "description": "自定义标题区内容。"
                    }
                }
            },
            "contentMargin": {
                "description": "子标题外边距，不支持设置负数。",
                "params": {
                    "value": {
                        "type": "LocalizedMargin",
                        "required": false,
                        "description": "子标题外边距。",
                        "default": {
                            "start": "LengthMetrics.resource($r('sys.float.margin_left'))",
                            "end": "LengthMetrics.resource($r('sys.float.margin_right'))"
                        }
                    }
                }
            },
            "contentPadding": {
                "description": "子标题内边距。",
                "params": {
                    "value": {
                        "type": "LocalizedPadding",
                        "required": false,
                        "description": "子标题内边距。",
                        "default": {
                            "start": "LengthMetrics.vp(12)",
                            "end": "LengthMetrics.vp(12)"
                        }
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Column 布局实现了一个包含子标题（SubHeader）的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个 SubHeader 组件，SubHeader 组件包含一级标题、二级标题以及一个操作按钮。\nSubHeader 组件的样式包括标题的字体、颜色、对齐方式等属性，支持自定义样式展示。操作按钮的样式包括背景颜色、边框、字体颜色等属性，支持点击事件。\n整个布局通过 Column 布局保证 SubHeader 组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { promptAction, OperationType, SubHeader } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct SubHeaderExample {\n  build() {\n    Column() {\n      SubHeader({\n        primaryTitle: '一级标题', // 设置一级标题的文本内容\n        secondaryTitle: '二级标题', // 设置二级标题的文本内容\n        operationType: OperationType.TEXT_ARROW, // 设置操作按钮的类型为文本带箭头\n        operationItem: [{ \n          value: '更多', // 设置操作按钮的文本内容\n          action: () => { // 设置操作按钮的点击事件\n            promptAction.showToast({ message: 'demo' }) // 点击按钮后显示提示信息\n          }\n        }]\n      })\n    }\n  }\n}"
            },
            {
                "description": "该示例展示了如何使用 `SubHeader` 组件来创建一个带有图标、二级标题和操作按钮的子标题栏。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个 `SubHeader` 组件，该组件包含一个图标、一个二级标题和一个操作按钮。图标和二级标题水平排列，操作按钮位于右侧。\n\n`SubHeader` 组件的样式包括图标的资源名、二级标题的文本内容和样式、操作按钮的文本内容和样式。图标和二级标题的排列方式为水平布局，对齐方式为居中对齐。操作按钮的样式包括文本内容、背景颜色、边框圆角等属性。\n\n组件的功能包括点击操作按钮时触发的事件，用户可以通过点击操作按钮触发 `promptAction.showToast` 方法，显示一个提示消息。",
                "code": "import { promptAction, OperationType, SubHeader } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct SubHeaderExample {\n  build() {\n    Column() {\n      SubHeader({\n        icon: $r('app.media.ic_public_community_messages'), // 图标的资源名\n        secondaryTitle: '二级标题', // 二级标题的文本内容\n        operationType: OperationType.BUTTON, // 操作按钮的类型\n        operationItem: [{ \n          value: '操作', // 操作按钮的文本内容\n          action: () => { // 操作按钮的点击事件\n            promptAction.showToast({ message: 'demo' }) // 显示提示消息\n          }\n        }]\n      })\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个包含 SubHeader 组件的界面。布局宽度占据整个屏幕，高度根据内容自适应。SubHeader 组件位于 Column 布局的顶部，垂直方向上居中对齐。\nSubHeader 组件的样式包括左侧图标、主标题、副标题和右侧操作按钮。图标使用系统资源 sys.symbol.ohos_wifi，并通过 SymbolEffectStrategy.HIERARCHICAL 策略实现分层效果。副标题文本为“标题”，右侧操作按钮的文本为“操作”，点击按钮会触发 promptAction.showToast 方法，显示一条消息“demo”。\n整个布局通过 Column 布局保证 SubHeader 组件在垂直方向上居中对齐，确保界面简洁明了。",
                "code": "import { promptAction, OperationType, SubHeader } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct SubHeaderExample {\n  build() {\n    Column() {\n      SubHeader({\n        // 左侧图标，使用系统资源 sys.symbol.ohos_wifi\n        icon: $r('sys.symbol.ohos_wifi'),\n        // 图标效果策略，使用分层效果\n        iconSymbolOptions: {\n          effectStrategy: SymbolEffectStrategy.HIERARCHICAL,\n        },\n        // 副标题文本\n        secondaryTitle: '标题',\n        // 操作类型为按钮\n        operationType: OperationType.BUTTON,\n        // 操作按钮配置\n        operationItem: [{ \n          value: '操作', // 按钮文本\n          action: () => {\n            // 点击按钮时触发的操作，显示一条消息“demo”\n            promptAction.showToast({ message: 'demo' })\n          }\n        }]\n      })\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个包含自定义标题、一级标题、二级标题、图标和操作项的子标题栏。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为一个子标题栏，子标题栏包含自定义标题、一级标题、二级标题、图标和操作项。\n自定义标题通过 Text 组件实现，字体大小为 24vp，字体颜色为红色，字体加粗。一级标题和二级标题通过 SubHeader 组件的属性设置，字体大小和颜色未明确指定，但通常会根据系统默认样式显示。图标通过资源名 $r('sys.symbol.ohos_star') 指定，操作项通过 OperationType.TEXT_ARROW 指定，点击操作项会触发一个提示框显示 \"demo\" 消息。\n整个布局通过 Column 布局保证子标题栏在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { promptAction, OperationType, SubHeader } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct SubHeaderExample {\n  // 自定义标题的构建器\n  @Builder\n  TitleBuilder(): void {\n    Text('自定义标题')\n      .fontSize(24) // 设置字体大小为 24vp\n      .fontColor(Color.Red) // 设置字体颜色为红色\n      .fontWeight(FontWeight.Bold) // 设置字体加粗\n  }\n\n  build() {\n    Column() {\n      SubHeader({\n        titleBuilder: () => {\n          this.TitleBuilder(); // 使用自定义标题构建器\n        },\n        primaryTitle: '一级标题', // 设置一级标题\n        secondaryTitle: '二级标题', // 设置二级标题\n        icon: $r('sys.symbol.ohos_star'), // 设置图标资源\n        operationType: OperationType.TEXT_ARROW, // 设置操作类型为文本箭头\n        operationItem: [{\n          value: '更多信息', // 设置操作项的文本\n          action: () => {\n            promptAction.showToast({ message: 'demo' }) // 点击操作项时显示提示框\n          }\n        }]\n      })\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个带有子标题和操作按钮的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个 SubHeader 组件，SubHeader 组件内部包含一个选择器和一组操作按钮。\n选择器的样式包括选项的值和默认选中的索引，支持用户点击选择不同的选项，并在选择时触发回调函数显示提示信息。操作按钮的样式包括图标资源和点击事件，用户可以通过点击按钮触发相应操作，并在操作时显示提示信息。\n整个布局通过 Column 布局保证 SubHeader 组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { promptAction, OperationType, SubHeader } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct SubHeaderExample {\n  build() {\n    Column() {\n      SubHeader({\n        select: {\n          options: [ // 选择器的选项列表\n            { value: 'aaa' }, \n            { value: 'bbb' }, \n            { value: 'ccc' }\n          ],\n          value: 'selectdemo', // 选择器的默认值\n          selected: 2, // 默认选中的索引\n          onSelect: (index: number, value?: string) => { // 选择器的选择事件回调函数\n            promptAction.showToast({ message: 'demo' }) // 显示提示信息\n          }\n        },\n        operationType: OperationType.ICON_GROUP, // 操作按钮的类型为图标组\n        operationItem: [ // 操作按钮的列表\n          {\n            value: $r('app.media.ic_public_community_messages'), // 图标资源\n            action: () => { // 点击事件回调函数\n              promptAction.showToast({ message: 'demo' }) // 显示提示信息\n            }\n          }, {\n            value: $r('app.media.ic_public_community_messages'), // 图标资源\n            action: () => { // 点击事件回调函数\n              promptAction.showToast({ message: 'demo' }) // 显示提示信息\n            }\n          }, {\n            value: $r('app.media.ic_public_community_messages'), // 图标资源\n            action: () => { // 点击事件回调函数\n              promptAction.showToast({ message: 'demo' }) // 显示提示信息\n            }\n          }\n        ]\n      })\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个子标题（SubHeader）的展示界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个 SubHeader 组件，SubHeader 组件内部包含两个标题（primaryTitle 和 secondaryTitle）以及一个操作按钮。\n\nSubHeader 组件的样式包括标题的字体颜色、操作按钮的样式、内容的边距和内边距等属性。标题的字体颜色通过 TextModifier 进行自定义，操作按钮的样式通过 operationType 属性指定为 TEXT_ARROW 类型。内容的边距和内边距通过 contentMargin 和 contentPadding 属性进行设置，确保内容在布局中有适当的间距。\n\n组件的功能包括点击操作按钮触发提示信息（promptAction.showToast），用户可以通过点击操作按钮查看更多信息。整个布局通过 Column 布局保证 SubHeader 组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { promptAction, OperationType, SubHeader, LengthMetrics, TextModifier } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct SubHeaderExample {\n  @State primaryModifier: TextModifier = new TextModifier().fontColor(Color.Red); // 主标题的文本修饰器，设置字体颜色为红色\n  @State secondaryModifier: TextModifier = new TextModifier().fontColor(Color.Red); // 副标题的文本修饰器，设置字体颜色为红色\n\n  build() {\n    Column() {\n      SubHeader({\n        primaryTitle: 'primaryTitle', // 主标题内容\n        secondaryTitle: 'secondaryTitle', // 副标题内容\n        primaryTitleModifier: this.primaryModifier, // 主标题的文本修饰器\n        secondaryTitleModifier: this.secondaryModifier, // 副标题的文本修饰器\n        operationType: OperationType.TEXT_ARROW, // 操作按钮的类型，设置为文本箭头类型\n        operationItem: [{\n          value: '更多信息', // 操作按钮的显示文本\n          action: () => {\n            promptAction.showToast({ message: 'demo' }) // 点击操作按钮时触发的动作，显示提示信息\n          }\n        }],\n        contentMargin: { start: LengthMetrics.vp(20), end: LengthMetrics.vp(20) }, // 内容的边距，设置为左右各20vp\n        contentPadding: { start: LengthMetrics.vp(20), end: LengthMetrics.vp(20) } // 内容的内边距，设置为左右各20vp\n      })\n    }\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个包含 SubHeader 组件的界面。SubHeader 组件包含一个选择器和一组操作图标。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为一个 SubHeader 部分。\nSubHeader 组件的样式包括背景颜色、字体、透明度等属性，支持不同的样式展示。选择器的选项以水平布局方式排列，选项之间的间距均匀分布，且对齐方式为居中对齐。操作图标的样式包括图标颜色、字体粗细、渲染策略等属性，支持不同的样式展示。\nSubHeader 组件的功能包括选择器的选择事件和操作图标的点击事件，用户可以通过选择选项或点击图标触发相应操作。整个布局通过 Column 布局保证 SubHeader 组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { promptAction, OperationType, SubHeader } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct SubHeaderExample {\n  build() {\n    Column() {\n      SubHeader({\n        select: {\n          options: [{ value: 'aaa' }, { value: 'bbb' }, { value: 'ccc' }], // 选择器的选项列表\n          value: 'selectdemo', // 选择器的标识符\n          selected: 2, // 默认选中的选项索引\n          onSelect: (index: number, value?: string) => { // 选择器的选择事件处理函数\n            promptAction.showToast({ message: 'demo' }) // 显示提示信息\n          }\n        },\n        operationType: OperationType.ICON_GROUP, // 操作图标的类型\n        operationItem: [{\n          value: $r('sys.symbol.ohos_lungs'), // 操作图标的资源名\n          action: () => { // 操作图标的点击事件处理函数\n            promptAction.showToast({ message: 'icon1' }) // 显示提示信息\n          }\n        }, {\n          value: $r('sys.symbol.ohos_lungs'), // 操作图标的资源名\n          action: () => { // 操作图标的点击事件处理函数\n            promptAction.showToast({ message: 'icon2' }) // 显示提示信息\n          }\n        }, {\n          value: $r('sys.symbol.ohos_lungs'), // 操作图标的资源名\n          action: () => { // 操作图标的点击事件处理函数\n            promptAction.showToast({ message: 'icon3' }) // 显示提示信息\n          }\n        }],\n        operationSymbolOptions: [{\n          fontWeight: FontWeight.Lighter, // 操作图标的字体粗细\n        }, {\n          renderingStrategy: SymbolRenderingStrategy.MULTIPLE_COLOR, // 操作图标的渲染策略\n          fontColor: [Color.Blue, Color.Grey, Color.Green], // 操作图标的颜色\n        }, {\n          renderingStrategy: SymbolRenderingStrategy.MULTIPLE_OPACITY, // 操作图标的渲染策略\n          fontColor: [Color.Blue, Color.Grey, Color.Green], // 操作图标的颜色\n        }]\n      })\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Menu": {
        "description": "以垂直列表形式显示的菜单。",
        "details": "Menu组件需和bindMenu或bindContextMenu方法配合使用，不支持作为普通组件单独使用。",
        "interfaces": [
            {
                "description": "Menu()",
                "params": {}
            }
        ],
        "attributes": {
            "fontSize": {
                "description": "统一设置Menu中所有文本的尺寸。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "Menu中所有文本的尺寸，Length为number类型时，使用fp单位。"
                    }
                }
            },
            "font": {
                "description": "统一设置Menu中所有文本的尺寸。",
                "params": {
                    "value": {
                        "type": "Font",
                        "required": true,
                        "description": "Menu中所有文本的尺寸。",
                        "default": {
                            "size": 16,
                            "family": "HarmonyOS Sans",
                            "weight": "FontWeight.Medium",
                            "style": "FontStyle.Normal"
                        }
                    }
                }
            },
            "fontColor": {
                "description": "统一设置Menu中所有文本的颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "Menu中所有文本的颜色。"
                    }
                }
            },
            "radius": {
                "description": "设置Menu边框圆角半径。",
                "params": {
                    "value": {
                        "type": [
                            "Dimension",
                            "BorderRadiuses"
                        ],
                        "required": true,
                        "description": "Menu边框圆角半径。",
                        "default": "2in1设备上默认值为8vp，其他设备上默认值为20vp。"
                    }
                }
            },
            "width": {
                "description": "设置Menu边框宽度，支持设置的最小宽度为64vp。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": true,
                        "description": "Menu边框宽度。"
                    }
                }
            },
            "menuItemDivider": {
                "description": "设置menuItem分割线样式, 不设置该属性则不展示分割线。",
                "params": {
                    "options": {
                        "type": [
                            "DividerStyleOptions",
                            "undefined"
                        ],
                        "required": true,
                        "description": "设置menuItem分割线样式。"
                    }
                }
            },
            "menuItemGroupDivider": {
                "description": "设置menuItemGroup上下分割线的样式, 不设置该属性则默认展示分割线。",
                "params": {
                    "options": {
                        "type": [
                            "DividerStyleOptions",
                            "undefined"
                        ],
                        "required": true,
                        "description": "设置menuItemGroup顶部和底部分割线样式。"
                    }
                }
            },
            "subMenuExpandingMode": {
                "description": "设置Menu子菜单展开样式。",
                "params": {
                    "mode": {
                        "type": "SubMenuExpandingMode",
                        "required": true,
                        "description": "Menu子菜单展开样式。"
                    }
                }
            }
        },
        "events": {},
        "rules": [
            "菜单和菜单项宽度计算规则：布局过程中，期望每个菜单项的宽度一致。若子组件设置了宽度，则以尺寸计算规则为准。不设置宽度的情况：菜单组件会对子组件MenuItem、MenuItemGroup设置默认2栅格的宽度，若菜单项内容区比2栅格宽，则会自适应撑开。设置宽度的情况：菜单组件会对子组件MenuItem、MenuItemGroup设置减去padding后的固定宽度。"
        ],
        "examples": [
            {
                "description": "该组件实现了一个带有符号类型图标的普通菜单。布局宽度占据整个屏幕，高度设为 100%，内边距为左右 0、顶部 0。组件的垂直方向上被分为一个部分，包含一个文本提示和一个菜单。文本提示位于顶部，菜单通过点击文本提示触发显示。\n菜单的样式包括图标大小、字体大小、颜色等属性，支持不同的样式展示。菜单项的功能包括点击事件和状态效果，用户可以通过点击菜单项触发相应操作，菜单项也可以在启用或禁用状态下进行展示。\n整个布局通过 Row 和 Column 布局保证菜单在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { SymbolGlyphModifier } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  // 定义菜单项的起始图标样式，使用系统图标 \"ohos_mic\"，字体大小为 24vp\n  @State startIconModifier: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_mic')).fontSize('24vp');\n  // 定义菜单项的结束图标样式，使用系统图标 \"ohos_trash\"，字体大小为 24vp\n  @State endIconModifier: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_trash')).fontSize('24vp');\n  // 定义菜单项的选中图标样式，使用系统图标 \"checkmark\"，字体大小为 24vp\n  @State selectIconModifier: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.checkmark')).fontSize('24vp');\n  // 定义菜单项的选中状态，初始值为 true\n  @State select: boolean = true;\n\n  // 定义子菜单的构建器\n  @Builder\n  SubMenu() {\n    Menu() {\n      MenuItem({ content: \"复制\", labelInfo: \"Ctrl+C\" })\n      MenuItem({ content: \"粘贴\", labelInfo: \"Ctrl+V\" })\n    }\n  }\n\n  // 定义主菜单的构建器\n  @Builder\n  MyMenu() {\n    Menu() {\n      // 定义第一个菜单项，包含起始图标和内容\n      MenuItem({ symbolStartIcon: this.startIconModifier, content: \"菜单选项\" })\n      // 定义第二个菜单项，包含起始图标和内容，并设置为禁用状态\n      MenuItem({ symbolStartIcon: this.startIconModifier, content: \"菜单选项\" })\n        .enabled(false)\n      // 定义第三个菜单项，包含起始图标、内容、结束图标和子菜单\n      MenuItem({\n        symbolStartIcon: this.startIconModifier,\n        content: \"菜单选项\",\n        symbolEndIcon: this.endIconModifier,\n        builder: (): void => this.SubMenu()\n      })\n      // 定义菜单项组，包含标题和多个菜单项\n      MenuItemGroup({ header: '小标题' }) {\n        MenuItem({\n          symbolStartIcon: this.startIconModifier,\n          content: \"菜单选项\",\n          symbolEndIcon: this.endIconModifier,\n          builder: (): void => this.SubMenu()\n        })\n        MenuItem({\n          symbolStartIcon: this.startIconModifier,\n          content: \"菜单选项\",\n          symbolEndIcon: this.endIconModifier,\n          builder: (): void => this.SubMenu()\n        })\n      }\n      // 定义最后一个菜单项，包含内容，并设置选中状态和选中图标\n      MenuItem({\n        content: \"菜单选项\",\n      }).selected(this.select).selectIcon(this.selectIconModifier)\n    }\n  }\n\n  // 构建组件的布局\n  build() {\n    Row() {\n      Column() {\n        // 定义文本提示，字体大小为 50vp，字体加粗\n        Text('click to show menu')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n      }\n      // 绑定菜单到文本提示，点击文本提示时显示菜单\n      .bindMenu(this.MyMenu)\n      .width('100%')\n    }\n    .height('100%')\n  }\n}"
            },
            {
                "description": "该组件通过鸿蒙ArkUI框架实现了一个带有自定义菜单的界面。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上包含一个Row布局，其中嵌套了一个Column布局。Column布局中包含一个Text组件，用于显示提示信息“click to show menu”。Text组件的字体大小为50，字体加粗。Column布局通过bindMenu方法绑定了一个自定义菜单MyMenu，当点击Text组件时会弹出该菜单。\n\n菜单MyMenu包含多个MenuItem组件，每个MenuItem组件可以包含一个起始图标、内容、结束图标以及一个子菜单。菜单项的排列方式为垂直布局，菜单项之间通过MenuItemGroup进行分组，分组标题为“小标题”。菜单项的样式包括图标的资源名、内容文本、图标的资源名等属性，支持不同的样式展示。菜单项的功能包括点击事件和状态效果，用户可以通过点击菜单项触发相应操作，菜单项也可以在启用或禁用状态下进行展示。\n\n整个布局通过Row和Column布局保证菜单项在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct Index {\n  @State select: boolean = true // 状态变量，用于控制菜单的显示状态\n  private iconStr: ResourceStr = $r(\"app.media.view_list_filled\") // 菜单项起始图标的资源名\n  private iconStr2: ResourceStr = $r(\"app.media.arrow_right_filled\") // 菜单项结束图标的资源名\n\n  @Builder\n  SubMenu() {\n    Menu() {\n      MenuItem({ content: \"复制\", labelInfo: \"Ctrl+C\" }) // 子菜单项，内容为“复制”，标签信息为“Ctrl+C”\n      MenuItem({ content: \"粘贴\", labelInfo: \"Ctrl+V\" }) // 子菜单项，内容为“粘贴”，标签信息为“Ctrl+V”\n    }\n  }\n\n  @Builder\n  MyMenu(){\n    Menu() {\n      MenuItem({ startIcon: $r(\"app.media.icon\"), content: \"菜单选项\" }) // 菜单项，起始图标为“app.media.icon”，内容为“菜单选项”\n      MenuItem({ startIcon: $r(\"app.media.icon\"), content: \"菜单选项\" }) // 菜单项，起始图标为“app.media.icon”，内容为“菜单选项”\n        .enabled(false) // 禁用该菜单项\n      MenuItem({\n        startIcon: this.iconStr, // 菜单项起始图标为“view_list_filled”\n        content: \"菜单选项\", // 菜单项内容为“菜单选项”\n        endIcon: this.iconStr2, // 菜单项结束图标为“arrow_right_filled”\n        builder: ():void=>this.SubMenu() // 点击该菜单项时弹出子菜单SubMenu\n      })\n      MenuItemGroup({ header: '小标题' }) { // 菜单项分组，标题为“小标题”\n        MenuItem({\n          startIcon: this.iconStr, // 菜单项起始图标为“view_list_filled”\n          content: \"菜单选项\", // 菜单项内容为“菜单选项”\n          endIcon: this.iconStr2, // 菜单项结束图标为“arrow_right_filled”\n          builder: ():void=>this.SubMenu() // 点击该菜单项时弹出子菜单SubMenu\n        })\n        MenuItem({\n          startIcon: $r(\"app.media.app_icon\"), // 菜单项起始图标为“app_icon”\n          content: \"菜单选项\", // 菜单项内容为“菜单选项”\n          endIcon: this.iconStr2, // 菜单项结束图标为“arrow_right_filled”\n          builder: ():void=>this.SubMenu() // 点击该菜单项时弹出子菜单SubMenu\n        })\n      }\n      MenuItem({\n        startIcon: this.iconStr, // 菜单项起始图标为“view_list_filled”\n        content: \"菜单选项\", // 菜单项内容为“菜单选项”\n      })\n    }\n  }\n\n  build() {\n    Row() {\n      Column() {\n        Text('click to show menu') // 提示信息，内容为“click to show menu”\n          .fontSize(50) // 字体大小为50\n          .fontWeight(FontWeight.Bold) // 字体加粗\n      }\n      .bindMenu(this.MyMenu) // 绑定自定义菜单MyMenu，点击Text组件时弹出该菜单\n      .width('100%') // Column布局宽度占据整个屏幕\n    }\n    .height('100%') // Row布局高度占据整个屏幕\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "MenuItem": {
        "description": "用来展示菜单Menu中具体的item菜单项。",
        "details": null,
        "interfaces": [
            {
                "description": "MenuItem(value?: MenuItemOptions| CustomBuilder)",
                "params": {
                    "value": {
                        "type": [
                            "MenuItemOptions",
                            "CustomBuilder"
                        ],
                        "required": false,
                        "description": "包含设置MenuItem的各项信息。"
                    }
                }
            }
        ],
        "attributes": {
            "selected": {
                "description": "设置菜单项是否选中。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": true,
                        "description": "菜单项是否选中。",
                        "default": false
                    }
                }
            },
            "selectIcon": {
                "description": "设置当菜单项被选中时，是否显示被选中的图标。",
                "params": {
                    "value": {
                        "type": [
                            "boolean",
                            "ResourceStr",
                            "SymbolGlyphModifier"
                        ],
                        "required": true,
                        "description": "菜单项被选中时，是否显示被选中的图标。",
                        "default": false
                    }
                }
            },
            "contentFont": {
                "description": "设置菜单项中内容信息的字体样式。",
                "params": {
                    "value": {
                        "type": "Font",
                        "required": true,
                        "description": "菜单项中内容信息的字体样式。"
                    }
                }
            },
            "contentFontColor": {
                "description": "设置菜单项中内容信息的字体颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "菜单项中内容信息的字体颜色。",
                        "default": "#E5000000"
                    }
                }
            },
            "labelFont": {
                "description": "设置菜单项中标签信息的字体样式。",
                "params": {
                    "value": {
                        "type": "Font",
                        "required": true,
                        "description": "菜单项中标签信息的字体样式。"
                    }
                }
            },
            "labelFontColor": {
                "description": "设置菜单项中标签信息的字体颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": true,
                        "description": "菜单项中标签信息的字体颜色。",
                        "default": "#99000000"
                    }
                }
            }
        },
        "events": {
            "onChange": {
                "description": "当选中状态发生变化时，触发该回调。只有手动触发且MenuItem状态改变时才会触发onChange回调。",
                "params": {
                    "selected": {
                        "type": "boolean",
                        "required": true,
                        "description": "选中状态发生变化时，触发该回调。返回值为true时，表示已选中，为false时，表示未选中。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Flex 布局实现了一个展示菜单（Menu）及其菜单项（MenuItem）的界面。布局宽度占据整个屏幕，高度设为 400vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一个菜单。每个菜单项以水平布局方式排列，菜单项之间的间距均匀分布，且对齐方式为居中对齐。\n菜单的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。菜单项组之间通过 Flex 组件进行分隔。菜单的功能包括点击事件和状态效果，用户可以通过点击菜单项触发相应操作，菜单项也可以在启用或禁用状态下进行展示。\n整个布局通过 Flex 布局保证菜单项在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct MenuExample {\n  @State selected: number = 0; // 用于记录当前选中的菜单项索引\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      Text('Menu').fontSize(20).fontColor(Color.Black).margin({ top: 10, bottom: 10 }) // 标题文本，字体大小为20，颜色为黑色，上下边距为10vp\n\n      Menu() {\n        MenuItemGroup({ header: 'Group1' }) { // 菜单项组1，标题为\"Group1\"\n          MenuItem({ content: 'Item1' }) // 菜单项1，内容为\"Item1\"\n          MenuItem({ content: 'Item2' }) // 菜单项2，内容为\"Item2\"\n        }\n        MenuItemGroup({ header: 'Group2' }) { // 菜单项组2，标题为\"Group2\"\n          MenuItem({ content: 'Item3' }) // 菜单项3，内容为\"Item3\"\n          MenuItem({ content: 'Item4' }) // 菜单项4，内容为\"Item4\"\n        }\n      }\n      .width('100%') // 菜单宽度占据父容器的100%\n      .height(200) // 菜单高度为200vp\n      .backgroundColor(Color.White) // 菜单背景颜色为白色\n      .borderRadius(10) // 菜单边框圆角为10vp\n      .padding(10) // 菜单内边距为10vp\n      .onSelect((value: number) => { // 菜单项选中事件\n        this.selected = value; // 更新选中状态\n        console.log(`Selected: ${value}`); // 打印选中项的索引\n      })\n\n      Text(`Selected: ${this.selected}`).fontSize(16).fontColor(Color.Gray).margin({ top: 20 }) // 显示当前选中的菜单项索引，字体大小为16，颜色为灰色，上边距为20vp\n    }\n    .width('100%') // 整体布局宽度占据父容器的100%\n    .height(400) // 整体布局高度为400vp\n    .padding({ left: 35, right: 35, top: 35 }) // 整体布局内边距为左右35vp、顶部35vp\n    .backgroundColor(Color.LightGray) // 整体布局背景颜色为浅灰色\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "MenuItemGroup": {
        "description": "该组件用来展示菜单MenuItem的分组。",
        "details": null,
        "interfaces": [
            {
                "description": "MenuItemGroup(value?: MenuItemGroupOptions)",
                "params": {
                    "value": {
                        "type": "MenuItemGroupOptions",
                        "required": false,
                        "description": "包含设置MenuItemGroup的标题和尾部显示信息。"
                    }
                }
            }
        ],
        "attributes": {
            "header": {
                "description": "设置对应group的标题显示信息。",
                "params": {
                    "value": {
                        "type": [
                            "ResourceStr",
                            "CustomBuilder"
                        ],
                        "required": false,
                        "description": "标题显示信息。"
                    }
                }
            },
            "footer": {
                "description": "设置对应group的尾部显示信息。",
                "params": {
                    "value": {
                        "type": [
                            "ResourceStr",
                            "CustomBuilder"
                        ],
                        "required": false,
                        "description": "尾部显示信息。"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用Menu组件、MenuItem组件和ContextMenu方法来创建和管理上下文菜单。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个按钮，点击按钮后会弹出一个上下文菜单，菜单中包含多个菜单项。\n\n布局属性：\n- 按钮的宽度为 100vp，高度为 50vp，内边距为 10vp。\n- 菜单项的宽度为 100vp，高度为 40vp，内边距为 5vp。\n\n组件的样式和外观：\n- 按钮的背景颜色为 #007DFF，字体颜色为白色，字体大小为 16fp。\n- 菜单项的背景颜色为白色，字体颜色为黑色，字体大小为 14fp。\n- 菜单项的边框颜色为 #CCCCCC，边框宽度为 1vp。\n\n组件的排列和嵌套关系：\n- 按钮和菜单项都采用 Flex 布局，按钮居中对齐，菜单项垂直排列。\n- 菜单项之间通过 Flex 组件进行分隔。\n\n组件的功能和交互：\n- 按钮的点击事件会触发 ContextMenu 的显示。\n- 菜单项的点击事件会触发相应的操作，例如打印日志。\n\n整个布局通过 Flex 布局保证按钮和菜单项在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct MenuExample {\n  build() {\n    Column() {\n      // 创建一个按钮，点击按钮后会弹出上下文菜单\n      Button('Open Menu')\n        .width(100) // 按钮宽度为 100vp\n        .height(50) // 按钮高度为 50vp\n        .padding(10) // 按钮内边距为 10vp\n        .backgroundColor('#007DFF') // 按钮背景颜色为 #007DFF\n        .fontColor(Color.White) // 按钮字体颜色为白色\n        .fontSize(16) // 按钮字体大小为 16fp\n        .onClick(() => {\n          // 点击按钮后调用 ContextMenu 方法显示菜单\n          ContextMenu.show({\n            start: { x: 100, y: 100 }, // 菜单显示的起始位置\n            items: [\n              // 创建第一个菜单项\n              MenuItem({\n                content: 'Item 1', // 菜单项内容为 \"Item 1\"\n                action: () => {\n                  console.log('Item 1 clicked'); // 点击菜单项后打印日志\n                }\n              }),\n              // 创建第二个菜单项\n              MenuItem({\n                content: 'Item 2', // 菜单项内容为 \"Item 2\"\n                action: () => {\n                  console.log('Item 2 clicked'); // 点击菜单项后打印日志\n                }\n              })\n            ]\n          });\n        })\n    }\n    .width('100%') // 布局宽度占据整个屏幕\n    .height('100%') // 布局高度占据整个屏幕\n    .padding(10) // 布局内边距为 10vp\n    .backgroundColor('#FFFFFF') // 布局背景颜色为白色\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "ContextMenu": {
        "description": "ContextMenu 组件用于在页面范围内关闭通过 bindContextMenu 属性绑定的菜单。",
        "details": "从 API Version 8 开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。从 API version 12 开始，可以通过使用 UIContext 中的 getContextMenuController 来明确 UI 的执行上下文。",
        "interfaces": [
            {
                "description": "static close()",
                "params": {}
            }
        ],
        "attributes": {},
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Flex 布局实现了一个展示上下文菜单的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为两个主要部分：一个包含文本的 Column 组件和一个用于显示上下文菜单的 Flex 组件。\n\n文本部分使用 Column 组件，宽度占据整个屏幕，高度为 500vp，背景颜色为浅蓝色（0xAFEEEE），文本内容为 \"Test ContextMenu\"，字体大小为 20，文本居中对齐。\n\n上下文菜单部分使用 Flex 组件，方向为垂直（FlexDirection.Column），对齐方式为居中对齐（alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center）。菜单包含三个按钮，每个按钮之间通过 Divider 组件进行分隔，Divider 的宽度为 2vp，颜色为黑色，上下边距为 5vp。菜单的宽度为 200vp，高度为 160vp。\n\n组件的功能包括长按文本区域时显示上下文菜单，拖拽文本区域时关闭菜单。菜单的显示和关闭通过 bindContextMenu 和 ContextMenu.close() 方法实现。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct Index {\n  // 定义一个 Builder 方法用于构建上下文菜单\n  @Builder MenuBuilder() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Button('Test ContextMenu1') // 第一个按钮\n      Divider().strokeWidth(2).margin(5).color(Color.Black) // 分隔线，宽度为 2vp，上下边距为 5vp，颜色为黑色\n      Button('Test ContextMenu2') // 第二个按钮\n      Divider().strokeWidth(2).margin(5).color(Color.Black) // 分隔线，宽度为 2vp，上下边距为 5vp，颜色为黑色\n      Button('Test ContextMenu3') // 第三个按钮\n    }\n    .width(200) // 菜单宽度为 200vp\n    .height(160) // 菜单高度为 160vp\n  }\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Column() {\n        Text(\"Test ContextMenu\") // 文本内容为 \"Test ContextMenu\"\n          .fontSize(20) // 字体大小为 20\n          .width('100%') // 文本宽度占据整个屏幕\n          .height(500) // 文本高度为 500vp\n          .backgroundColor(0xAFEEEE) // 背景颜色为浅蓝色（0xAFEEEE）\n          .textAlign(TextAlign.Center) // 文本居中对齐\n      }\n      .bindContextMenu(this.MenuBuilder, ResponseType.LongPress) // 长按文本区域时显示上下文菜单\n      .onDragStart(() => {\n        // 拖拽时关闭菜单\n        ContextMenu.close() // 建议使用 this.getUIContext().getContextMenuController().close()\n      })\n    }\n    .width('100%') // 布局宽度占据整个屏幕\n    .height('100%') // 布局高度占据整个屏幕\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "AlertDialog": {
        "description": "显示警告弹窗组件，可设置文本内容与响应回调。",
        "details": "可以包含单个子组件。",
        "interfaces": [
            {
                "description": "AlertDialog.show(value: AlertDialogParamWithConfirm | AlertDialogParamWithButtons | AlertDialogParamWithOptions)",
                "params": {
                    "value": {
                        "type": [
                            "AlertDialogParamWithConfirm",
                            "AlertDialogParamWithButtons",
                            "AlertDialogParamWithOptions"
                        ],
                        "required": true,
                        "description": "定义警告弹窗并弹出。"
                    }
                }
            }
        ],
        "attributes": {
            "title": {
                "description": "弹窗标题。",
                "params": {
                    "value": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "弹窗标题。"
                    }
                }
            },
            "subtitle": {
                "description": "弹窗副标题。",
                "params": {
                    "value": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "弹窗副标题。"
                    }
                }
            },
            "message": {
                "description": "弹窗内容。",
                "params": {
                    "value": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "弹窗内容。"
                    }
                }
            },
            "autoCancel": {
                "description": "点击遮障层时，是否关闭弹窗。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": false,
                        "description": "点击遮障层时，是否关闭弹窗。",
                        "default": true
                    }
                }
            },
            "cancel": {
                "description": "点击遮障层关闭dialog时的回调。",
                "params": {
                    "value": {
                        "type": "() => void",
                        "required": false,
                        "description": "点击遮障层关闭dialog时的回调。"
                    }
                }
            },
            "alignment": {
                "description": "弹窗在竖直方向上的对齐方式。",
                "params": {
                    "value": {
                        "type": "DialogAlignment",
                        "required": false,
                        "description": "弹窗在竖直方向上的对齐方式。",
                        "default": "DialogAlignment.Default"
                    }
                }
            },
            "offset": {
                "description": "弹窗相对alignment所在位置的偏移量。",
                "params": {
                    "value": {
                        "type": "Offset",
                        "required": false,
                        "description": "弹窗相对alignment所在位置的偏移量。",
                        "default": {
                            "dx": 0,
                            "dy": 0
                        }
                    }
                }
            },
            "gridCount": {
                "description": "弹窗容器宽度所占用栅格数。",
                "params": {
                    "value": {
                        "type": "number",
                        "required": false,
                        "description": "弹窗容器宽度所占用栅格数。",
                        "default": 4
                    }
                }
            },
            "maskRect": {
                "description": "弹窗遮蔽层区域，在遮蔽层区域内的事件不透传，在遮蔽层区域外的事件透传。",
                "params": {
                    "value": {
                        "type": "Rectangle",
                        "required": false,
                        "description": "弹窗遮蔽层区域。",
                        "default": {
                            "x": 0,
                            "y": 0,
                            "width": "100%",
                            "height": "100%"
                        }
                    }
                }
            },
            "showInSubWindow": {
                "description": "某弹框需要显示在主窗口之外时，是否在子窗口显示此弹窗。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否在子窗口显示此弹窗。",
                        "default": false
                    }
                }
            },
            "isModal": {
                "description": "弹窗是否为模态窗口，模态窗口有蒙层，非模态窗口无蒙层。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": false,
                        "description": "弹窗是否为模态窗口。",
                        "default": true
                    }
                }
            },
            "backgroundColor": {
                "description": "弹窗背板颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": false,
                        "description": "弹窗背板颜色。",
                        "default": "Color.Transparent"
                    }
                }
            },
            "backgroundBlurStyle": {
                "description": "弹窗背板模糊材质。",
                "params": {
                    "value": {
                        "type": "BlurStyle",
                        "required": false,
                        "description": "弹窗背板模糊材质。",
                        "default": "BlurStyle.COMPONENT_ULTRA_THICK"
                    }
                }
            },
            "onWillDismiss": {
                "description": "交互式关闭回调函数。",
                "params": {
                    "value": {
                        "type": "Callback<DismissDialogAction>",
                        "required": false,
                        "description": "交互式关闭回调函数。"
                    }
                }
            },
            "cornerRadius": {
                "description": "设置背板的圆角半径。",
                "params": {
                    "value": {
                        "type": [
                            "BorderRadiuses",
                            "Dimension",
                            "LocalizedBorderRadiuses"
                        ],
                        "required": false,
                        "description": "背板的圆角半径。",
                        "default": {
                            "topLeft": "32vp",
                            "topRight": "32vp",
                            "bottomLeft": "32vp",
                            "bottomRight": "32vp"
                        }
                    }
                }
            },
            "transition": {
                "description": "设置弹窗显示和退出的过渡效果。",
                "params": {
                    "value": {
                        "type": "TransitionEffect",
                        "required": false,
                        "description": "弹窗显示和退出的过渡效果。"
                    }
                }
            },
            "width": {
                "description": "设置弹窗背板的宽度。",
                "params": {
                    "value": {
                        "type": "Dimension",
                        "required": false,
                        "description": "弹窗背板的宽度。"
                    }
                }
            },
            "height": {
                "description": "设置弹窗背板的高度。",
                "params": {
                    "value": {
                        "type": "Dimension",
                        "required": false,
                        "description": "弹窗背板的高度。"
                    }
                }
            },
            "borderWidth": {
                "description": "设置弹窗背板的边框宽度。",
                "params": {
                    "value": {
                        "type": [
                            "Dimension",
                            "EdgeWidths",
                            "LocalizedEdgeWidths"
                        ],
                        "required": false,
                        "description": "弹窗背板的边框宽度。",
                        "default": 0
                    }
                }
            },
            "borderColor": {
                "description": "设置弹窗背板的边框颜色。",
                "params": {
                    "value": {
                        "type": [
                            "ResourceColor",
                            "EdgeColors",
                            "LocalizedEdgeColors"
                        ],
                        "required": false,
                        "description": "弹窗背板的边框颜色。",
                        "default": "Color.Black"
                    }
                }
            },
            "borderStyle": {
                "description": "设置弹窗背板的边框样式。",
                "params": {
                    "value": {
                        "type": [
                            "BorderStyle",
                            "EdgeStyles"
                        ],
                        "required": false,
                        "description": "弹窗背板的边框样式。",
                        "default": "BorderStyle.Solid"
                    }
                }
            },
            "shadow": {
                "description": "设置弹窗背板的阴影。",
                "params": {
                    "value": {
                        "type": [
                            "ShadowOptions",
                            "ShadowStyle"
                        ],
                        "required": false,
                        "description": "弹窗背板的阴影。"
                    }
                }
            },
            "textStyle": {
                "description": "设置弹窗message内容的文本样式。",
                "params": {
                    "value": {
                        "type": "TextStyle",
                        "required": false,
                        "description": "弹窗message内容的文本样式。"
                    }
                }
            }
        },
        "events": {
            "onWillDismiss": {
                "description": "交互式关闭回调函数。",
                "params": {
                    "dismissDialogAction": {
                        "type": "DismissDialogAction",
                        "required": true,
                        "description": "Dialog关闭回调函数。开发者需要退出时调用，不需要退出时无需调用。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件定义了一个AlertDialog的样式，并通过按钮触发显示该对话框。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个按钮，按钮点击后弹出对话框。\n对话框的样式包括宽度、高度、背景色、边框样式、边框颜色、边框宽度、圆角半径、阴影效果等。对话框的内容包括标题、消息文本、确认按钮和取消按钮。确认按钮点击后会触发回调函数，取消按钮点击后也会触发回调函数。\n对话框的布局为居中对齐，且在显示时会有偏移量。对话框的文本样式支持自动换行。对话框的关闭事件包括按下返回键和点击对话框外部区域，这些事件都会触发相应的回调函数。",
                "code": "@Entry\n@Component\nstruct AlertDialogExample {\n  build() {\n    Column({ space: 5 }) {\n      Button('one button dialog')\n        .onClick(() => {\n          AlertDialog.show(\n            {\n              title: 'title', // 对话框标题\n              message: 'text', // 对话框消息文本\n              autoCancel: true, // 是否自动取消对话框\n              alignment: DialogAlignment.Center, // 对话框对齐方式，居中对齐\n              offset: { dx: 0, dy: -20 }, // 对话框显示时的偏移量\n              gridCount: 3, // 对话框的网格布局数量\n              width: 300, // 对话框宽度\n              height: 200, // 对话框高度\n              cornerRadius: 20, // 对话框圆角半径\n              borderWidth: 1, // 对话框边框宽度\n              borderStyle: BorderStyle.Dashed, // 对话框边框样式，虚线\n              borderColor: Color.Blue, // 对话框边框颜色\n              backgroundColor: Color.White, // 对话框背景颜色\n              shadow: ({ radius: 20, color: Color.Grey, offsetX: 50, offsetY: 0}), // 对话框阴影效果\n              textStyle: { wordBreak: WordBreak.BREAK_ALL }, // 对话框文本样式，支持自动换行\n              confirm: {\n                value: 'button', // 确认按钮文本\n                action: () => {\n                  console.info('Button-clicking callback') // 确认按钮点击回调函数\n                }\n              },\n              cancel: () => {\n                console.info('Closed callbacks') // 取消按钮点击回调函数\n              },\n              onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n                console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 对话框关闭前的回调函数，输出关闭原因\n                console.log(\"dialog onWillDismiss\")\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                  dismissDialogAction.dismiss() // 按下返回键时关闭对话框\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                  dismissDialogAction.dismiss() // 点击对话框外部区域时关闭对话框\n                }\n              }\n            }\n          )\n        })\n        .backgroundColor(0x317aff) // 按钮背景颜色\n    }.width('100%').margin({ top: 5 }) // 列的宽度占据整个屏幕，顶部外边距为5\n  }\n}"
            },
            {
                "description": "该组件实现了一个弹出式对话框（AlertDialog）的示例，对话框可以在主窗口之外展示。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个按钮，点击按钮后会弹出一个对话框。\n对话框的样式包括标题、副标题、消息文本、按钮布局、按钮样式等属性。对话框的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过 Column 布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct AlertDialogExample {\n  build() {\n    Column({ space: 5 }) { // 使用 Column 布局，设置组件之间的间距为 5vp\n      Button('one button dialog') // 创建一个按钮，按钮文本为 \"one button dialog\"\n        .onClick(() => { // 为按钮添加点击事件\n          AlertDialog.show( // 显示一个弹出式对话框\n            {\n              title: 'title', // 对话框的标题\n              subtitle: 'subtitle', // 对话框的副标题\n              message: 'text', // 对话框的消息文本\n              autoCancel: true, // 设置对话框是否自动取消\n              alignment: DialogAlignment.Center, // 设置对话框的对齐方式为居中\n              gridCount: 4, // 设置对话框的网格数\n              showInSubWindow: true, // 设置对话框是否在子窗口中显示\n              isModal: true, // 设置对话框是否为模态对话框\n              offset: { dx: 0, dy: -20 }, // 设置对话框的偏移量\n              buttonDirection: DialogButtonDirection.HORIZONTAL, // 设置对话框按钮的排列方向为水平\n              buttons: [ // 设置对话框的按钮\n                {\n                  value: '按钮', // 按钮的文本\n                  action: () => { // 按钮的点击事件\n                    console.info('Callback when button1 is clicked') // 点击按钮1时的回调\n                  }\n                },\n                {\n                  value: '按钮', // 按钮的文本\n                  action: () => { // 按钮的点击事件\n                    console.info('Callback when button2 is clicked') // 点击按钮2时的回调\n                  }\n                },\n                {\n                  value: '按钮', // 按钮的文本\n                  enabled: true, // 设置按钮是否启用\n                  defaultFocus: true, // 设置按钮是否默认聚焦\n                  style: DialogButtonStyle.HIGHLIGHT, // 设置按钮的样式\n                  action: () => { // 按钮的点击事件\n                    console.info('Callback when button3 is clicked') // 点击按钮3时的回调\n                  }\n                },\n              ],\n              cancel: () => { // 对话框取消时的回调\n                console.info('Closed callbacks') // 对话框关闭时的回调\n              },\n              onWillDismiss: (dismissDialogAction: DismissDialogAction) => { // 对话框即将关闭时的回调\n                console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 打印关闭原因\n                console.log(\"dialog onWillDismiss\") // 打印对话框即将关闭的日志\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) { // 如果关闭原因是按下返回键\n                  dismissDialogAction.dismiss() // 关闭对话框\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) { // 如果关闭原因是点击对话框外部\n                  dismissDialogAction.dismiss() // 关闭对话框\n                }\n              }\n            })\n        })\n    }.width('100%').margin({ top: 5 }).backgroundColor(0x317aff) // 设置 Column 的宽度为 100%，顶部外边距为 5vp，背景颜色为 0x317aff\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个包含按钮的界面，按钮点击后会弹出一个自定义动画效果的AlertDialog。布局宽度占据整个屏幕，按钮的高度为88vp，内边距为顶部5vp。按钮的背景颜色为0x317aff，按钮的排列方式为垂直排列，按钮之间的间距为5vp。\n\nAlertDialog的显示动画持续3秒，退出动画持续100毫秒。动画效果包括透明度和缩放效果，显示时透明度从0到1，缩放从1倍到1.5倍；退出时透明度从1到0，缩放从1倍到0.5倍。AlertDialog的标题为“AlertDialog 1”，内容为“Set Animation Duration open 3 second, close 100ms”，对齐方式为顶部对齐，偏移量为顶部-20vp。AlertDialog包含一个确认按钮和一个取消按钮，确认按钮点击后会触发回调函数，输出“Button-clicking callback”到控制台；取消按钮点击后会触发回调函数，输出“Closed callbacks”到控制台。",
                "code": "import { router } from '@kit.ArkUI'; // 导入ArkUI的路由模块\n\n@Entry // 标记该组件为入口组件\n@Component // 标记该组件为ArkUI组件\nstruct AlertDialogExample {\n  build() {\n    Column({ space: 5 }) { // 创建一个垂直布局的Column组件，组件之间的间距为5vp\n      Button('AlertDialog Set Duration') // 创建一个按钮，按钮文本为“AlertDialog Set Duration”\n        .onClick(()=>{ // 为按钮添加点击事件\n          AlertDialog.show( // 显示一个AlertDialog\n            {\n              title: 'AlertDialog 1', // AlertDialog的标题\n              message: 'Set Animation Duration open 3 second, close 100ms', // AlertDialog的内容\n              autoCancel: true, // 设置AlertDialog自动取消\n              alignment: DialogAlignment.Top, // 设置AlertDialog的对齐方式为顶部对齐\n              offset: { dx: 0, dy: -20 }, // 设置AlertDialog的偏移量，顶部偏移-20vp\n              gridCount: 3, // 设置AlertDialog的网格数量\n              transition:TransitionEffect.asymmetric( // 设置AlertDialog的动画效果\n                TransitionEffect.OPACITY // 设置透明度动画\n                  .animation({ duration: 3000, curve: Curve.Sharp }) // 显示动画持续3秒，曲线为Sharp\n                  .combine(TransitionEffect.scale({x: 1.5, y: 1.5}) // 组合缩放动画，缩放比例为1.5倍\n                    .animation({duration: 3000, curve: Curve.Sharp})), // 显示动画持续3秒，曲线为Sharp\n                TransitionEffect.OPACITY // 设置透明度动画\n                  .animation({ duration: 100, curve: Curve.Smooth }) // 退出动画持续100毫秒，曲线为Smooth\n                  .combine(TransitionEffect.scale({x: 0.5, y: 0.5}) // 组合缩放动画，缩放比例为0.5倍\n                    .animation({duration: 100, curve: Curve.Smooth}))), // 退出动画持续100毫秒，曲线为Smooth\n              confirm: { // 设置确认按钮\n                value: 'button', // 确认按钮的文本\n                action: () => { // 确认按钮的点击事件\n                  console.info('Button-clicking callback') // 输出“Button-clicking callback”到控制台\n                }\n              },\n              cancel: () => { // 设置取消按钮的点击事件\n                console.info('Closed callbacks') // 输出“Closed callbacks”到控制台\n              }\n            }\n          )\n        })\n        .backgroundColor(0x317aff) // 设置按钮的背景颜色为0x317aff\n        .height(\"88px\") // 设置按钮的高度为88vp\n    }.width('100%').margin({ top: 5 }) // 设置Column的宽度为100%，顶部边距为5vp\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个展示三种不同按钮弹窗的界面。布局宽度占据整个屏幕，内边距为顶部5vp。组件的垂直方向上被分为三个部分，每个部分包含一个按钮。每个按钮的点击事件会触发一个弹窗，弹窗的内容和按钮数量根据按钮的不同而变化。\n按钮的样式包括背景颜色为0x317aff，按钮之间的间距为5vp。弹窗的样式包括标题、副标题、消息内容、对齐方式、偏移量、按钮方向等属性，支持不同的样式展示。弹窗的功能包括点击按钮的回调事件、取消弹窗的回调事件、以及弹窗即将消失时的回调事件。\n整个布局通过Column布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct AlertDialogExample {\n  build() {\n    Column({ space: 5 }) { // 使用Column布局，设置组件之间的间距为5vp\n      Button('one button dialog') // 创建一个按钮，文本为\"one button dialog\"\n        .onClick(() => { // 设置按钮的点击事件\n          AlertDialog.show( // 显示一个弹窗\n            {\n              title: 'title', // 弹窗的标题\n              message: 'text', // 弹窗的消息内容\n              autoCancel: true, // 设置弹窗是否自动取消\n              alignment: DialogAlignment.Bottom, // 设置弹窗的对齐方式为底部\n              offset: { dx: 0, dy: -20 }, // 设置弹窗的偏移量\n              gridCount: 3, // 设置弹窗的网格数量\n              confirm: { // 设置弹窗的确认按钮\n                value: 'button', // 确认按钮的文本\n                action: () => { // 确认按钮的点击事件\n                  console.info('Button-clicking callback') // 打印日志\n                }\n              },\n              cancel: () => { // 设置弹窗的取消回调事件\n                console.info('Closed callbacks') // 打印日志\n              },\n              onWillDismiss:(dismissDialogAction: DismissDialogAction)=> { // 设置弹窗即将消失时的回调事件\n                console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 打印消失原因\n                console.log(\"dialog onWillDismiss\") // 打印日志\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) { // 如果消失原因是按下返回键\n                  dismissDialogAction.dismiss() // 取消弹窗\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) { // 如果消失原因是点击弹窗外部\n                  dismissDialogAction.dismiss() // 取消弹窗\n                }\n              }\n            }\n          )\n        })\n        .backgroundColor(0x317aff) // 设置按钮的背景颜色\n\n      Button('two button dialog') // 创建一个按钮，文本为\"two button dialog\"\n        .onClick(() => { // 设置按钮的点击事件\n          AlertDialog.show( // 显示一个弹窗\n            {\n              title: 'title', // 弹窗的标题\n              subtitle: 'subtitle', // 弹窗的副标题\n              message: 'text', // 弹窗的消息内容\n              autoCancel: true, // 设置弹窗是否自动取消\n              alignment: DialogAlignment.Bottom, // 设置弹窗的对齐方式为底部\n              gridCount: 4, // 设置弹窗的网格数量\n              offset: { dx: 0, dy: -20 }, // 设置弹窗的偏移量\n              primaryButton: { // 设置弹窗的主按钮\n                value: 'cancel', // 主按钮的文本\n                action: () => { // 主按钮的点击事件\n                  console.info('Callback when the first button is clicked') // 打印日志\n                }\n              },\n              secondaryButton: { // 设置弹窗的次按钮\n                enabled: true, // 设置次按钮是否启用\n                defaultFocus: true, // 设置次按钮是否默认聚焦\n                style: DialogButtonStyle.HIGHLIGHT, // 设置次按钮的样式\n                value: 'ok', // 次按钮的文本\n                action: () => { // 次按钮的点击事件\n                  console.info('Callback when the second button is clicked') // 打印日志\n                }\n              },\n              cancel: () => { // 设置弹窗的取消回调事件\n                console.info('Closed callbacks') // 打印日志\n              },\n              onWillDismiss:(dismissDialogAction: DismissDialogAction)=> { // 设置弹窗即将消失时的回调事件\n                console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 打印消失原因\n                console.log(\"dialog onWillDismiss\") // 打印日志\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) { // 如果消失原因是按下返回键\n                  dismissDialogAction.dismiss() // 取消弹窗\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) { // 如果消失原因是点击弹窗外部\n                  dismissDialogAction.dismiss() // 取消弹窗\n                }\n              }\n            }\n          )\n        }).backgroundColor(0x317aff) // 设置按钮的背景颜色\n\n      Button('three button dialog') // 创建一个按钮，文本为\"three button dialog\"\n        .onClick(() => { // 设置按钮的点击事件\n          AlertDialog.show( // 显示一个弹窗\n            {\n              title: 'title', // 弹窗的标题\n              subtitle: 'subtitle', // 弹窗的副标题\n              message: 'text', // 弹窗的消息内容\n              autoCancel: true, // 设置弹窗是否自动取消\n              alignment: DialogAlignment.Bottom, // 设置弹窗的对齐方式为底部\n              gridCount: 4, // 设置弹窗的网格数量\n              offset: { dx: 0, dy: -20 }, // 设置弹窗的偏移量\n              buttonDirection: DialogButtonDirection.HORIZONTAL, // 设置按钮的方向为水平\n              buttons: [ // 设置弹窗的按钮数组\n                {\n                  value: '按钮', // 按钮的文本\n                  action: () => { // 按钮的点击事件\n                    console.info('Callback when button1 is clicked') // 打印日志\n                  }\n                },\n                {\n                  value: '按钮', // 按钮的文本\n                  action: () => { // 按钮的点击事件\n                    console.info('Callback when button2 is clicked') // 打印日志\n                  }\n                },\n                {\n                  value: '按钮', // 按钮的文本\n                  enabled: true, // 设置按钮是否启用\n                  defaultFocus: true, // 设置按钮是否默认聚焦\n                  style: DialogButtonStyle.HIGHLIGHT, // 设置按钮的样式\n                  action: () => { // 按钮的点击事件\n                    console.info('Callback when button3 is clicked') // 打印日志\n                  }\n                },\n              ],\n              cancel: () => { // 设置弹窗的取消回调事件\n                console.info('Closed callbacks') // 打印日志\n              },\n              onWillDismiss:(dismissDialogAction: DismissDialogAction)=> { // 设置弹窗即将消失时的回调事件\n                console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 打印消失原因\n                console.log(\"dialog onWillDismiss\") // 打印日志\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) { // 如果消失原因是按下返回键\n                  dismissDialogAction.dismiss() // 取消弹窗\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) { // 如果消失原因是点击弹窗外部\n                  dismissDialogAction.dismiss() // 取消弹窗\n                }\n              }\n            }\n          )\n        }).backgroundColor(0x317aff) // 设置按钮的背景颜色\n    }.width('100%').margin({ top: 5 }) // 设置Column的宽度为100%，顶部边距为5vp\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "ActionSheet": {
        "description": "列表选择弹窗组件，用于显示一个包含多个选项的弹窗，用户可以选择其中一个选项。",
        "details": "从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。本模块功能依赖UI的执行上下文，不可在UI上下文不明确的地方使用，参见UIContext说明。从API version 10开始，可以通过使用UIContext中的showActionSheet来明确UI的执行上下文。",
        "interfaces": [
            {
                "description": "ActionSheet.show(value: ActionSheetOptions)",
                "params": {
                    "value": {
                        "type": "ActionSheetOptions",
                        "required": true,
                        "description": "配置列表选择弹窗的参数。"
                    }
                }
            }
        ],
        "attributes": {
            "ActionSheetOptions": {
                "description": "配置列表选择弹窗的参数。",
                "params": {
                    "title": {
                        "type": [
                            "Resource",
                            "string"
                        ],
                        "required": true,
                        "description": "弹窗标题。"
                    },
                    "subtitle": {
                        "type": [
                            "ResourceStr"
                        ],
                        "required": false,
                        "description": "弹窗副标题。"
                    },
                    "message": {
                        "type": [
                            "Resource",
                            "string"
                        ],
                        "required": true,
                        "description": "弹窗内容。"
                    },
                    "autoCancel": {
                        "type": "boolean",
                        "required": false,
                        "description": "点击遮障层时，是否关闭弹窗。",
                        "default": true
                    },
                    "confirm": {
                        "type": "object",
                        "required": false,
                        "description": "确认Button的使能状态、默认焦点、按钮风格、文本内容和点击回调。",
                        "params": {
                            "enabled": {
                                "type": "boolean",
                                "required": false,
                                "description": "点击Button是否响应。",
                                "default": true
                            },
                            "defaultFocus": {
                                "type": "boolean",
                                "required": false,
                                "description": "设置Button是否是默认焦点。",
                                "default": false
                            },
                            "style": {
                                "type": "DialogButtonStyle",
                                "required": false,
                                "description": "设置Button的风格样式。",
                                "default": "DialogButtonStyle.DEFAULT"
                            },
                            "value": {
                                "type": [
                                    "Resource",
                                    "string"
                                ],
                                "required": true,
                                "description": "Button文本内容。"
                            },
                            "action": {
                                "type": "function",
                                "required": true,
                                "description": "Button选中时的回调。"
                            }
                        }
                    },
                    "cancel": {
                        "type": "function",
                        "required": false,
                        "description": "点击遮障层关闭dialog时的回调。"
                    },
                    "alignment": {
                        "type": "DialogAlignment",
                        "required": false,
                        "description": "弹窗在竖直方向上的对齐方式。",
                        "default": "DialogAlignment.Bottom"
                    },
                    "offset": {
                        "type": "object",
                        "required": false,
                        "description": "弹窗相对alignment所在位置的偏移量。",
                        "params": {
                            "dx": {
                                "type": [
                                    "number",
                                    "string",
                                    "Resource"
                                ],
                                "required": true,
                                "description": "水平偏移量。"
                            },
                            "dy": {
                                "type": [
                                    "number",
                                    "string",
                                    "Resource"
                                ],
                                "required": true,
                                "description": "垂直偏移量。"
                            }
                        }
                    },
                    "sheets": {
                        "type": "array",
                        "required": true,
                        "description": "设置选项内容，每个选择项支持设置图片、文本和选中的回调。",
                        "items": {
                            "type": "SheetInfo",
                            "params": {
                                "title": {
                                    "type": [
                                        "string",
                                        "Resource"
                                    ],
                                    "required": true,
                                    "description": "选项的文本内容。"
                                },
                                "icon": {
                                    "type": [
                                        "string",
                                        "Resource"
                                    ],
                                    "required": false,
                                    "description": "选项的图标。"
                                },
                                "action": {
                                    "type": "function",
                                    "required": true,
                                    "description": "选项选中的回调。"
                                }
                            }
                        }
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Flex 布局实现了一个展示 ActionSheet 弹出框的界面。布局宽度占据整个屏幕，高度设为 100%，内边距为 0。组件的垂直方向上居中对齐，包含一个按钮。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮的功能包括点击事件，用户可以通过点击按钮触发 ActionSheet 弹出框的显示。\n\nActionSheet 弹出框的样式包括标题、副标题、消息内容、确认按钮、取消按钮、以及多个选项按钮。弹出框的布局从屏幕底部弹出，偏移量为 {dx: 0, dy: -10}，确保弹出框在底部显示且略微向上偏移。弹出框的选项按钮以垂直布局方式排列，每个选项按钮包含一个标题和对应的点击事件。\n\n整个布局通过 Flex 布局保证按钮在垂直方向上居中对齐，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ActionSheetExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建一个按钮，点击按钮时显示 ActionSheet 弹出框\n      Button('Click to Show ActionSheet')\n        .onClick(() => {\n          // 显示 ActionSheet 弹出框\n          ActionSheet.show({\n            title: 'ActionSheet title', // ActionSheet 的标题\n            subtitle: 'ActionSheet subtitle', // ActionSheet 的副标题\n            message: 'message', // ActionSheet 的消息内容\n            autoCancel: true, // 是否在点击外部区域时自动取消 ActionSheet\n            confirm: {\n              defaultFocus: true, // 确认按钮是否默认聚焦\n              value: 'Confirm button', // 确认按钮的文本\n              action: () => {\n                // 确认按钮的点击事件\n                console.log('Get Alert Dialog handled')\n              }\n            },\n            cancel: () => {\n              // 取消按钮的点击事件\n              console.log('actionSheet canceled')\n            },\n            onWillDismiss: (dismissDialogAction: DismissDialogAction) => {\n              // ActionSheet 即将消失时的回调函数\n              console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason))\n              console.log(\"dialog onWillDismiss\")\n              if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                // 如果原因是按下返回键，则取消 ActionSheet\n                dismissDialogAction.dismiss()\n              }\n              if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                // 如果原因是点击外部区域，则取消 ActionSheet\n                dismissDialogAction.dismiss()\n              }\n            },\n            alignment: DialogAlignment.Bottom, // ActionSheet 的对齐方式为底部\n            offset: { dx: 0, dy: -10 }, // ActionSheet 的偏移量\n            sheets: [\n              {\n                title: 'apples', // 选项按钮的标题\n                action: () => {\n                  // 选项按钮的点击事件\n                  console.log('apples')\n                }\n              },\n              {\n                title: 'bananas', // 选项按钮的标题\n                action: () => {\n                  // 选项按钮的点击事件\n                  console.log('bananas')\n                }\n              },\n              {\n                title: 'pears', // 选项按钮的标题\n                action: () => {\n                  // 选项按钮的点击事件\n                  console.log('pears')\n                }\n              }\n            ]\n          })\n        })\n    }.width('100%') // 设置 Flex 容器的宽度为 100%\n    .height('100%') // 设置 Flex 容器的高度为 100%\n  }\n}"
            },
            {
                "description": "该示例通过定义一个ActionSheet组件，展示了如何在鸿蒙ArkUI中创建和自定义一个操作表单（ActionSheet）。布局上，该组件使用Flex布局，将内容居中显示在屏幕中央。样式上，ActionSheet具有自定义的宽度、高度、背景色、边框样式、圆角半径和阴影效果。功能上，用户点击按钮后会弹出ActionSheet，其中包含多个选项，每个选项都有对应的点击事件。ActionSheet还支持确认和取消操作，并且可以通过点击外部区域或按下返回键来关闭。",
                "code": "@Entry\n@Component\nstruct ActionSheetExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建一个按钮，点击后显示ActionSheet\n      Button('Click to Show ActionSheet')\n        .onClick(() => {\n          ActionSheet.show({\n            title: 'ActionSheet title', // ActionSheet的标题\n            subtitle: 'ActionSheet subtitle', // ActionSheet的副标题\n            message: 'message', // ActionSheet的提示信息\n            autoCancel: true, // 是否在点击外部区域时自动取消ActionSheet\n            width: 300, // ActionSheet的宽度\n            height: 350, // ActionSheet的高度\n            cornerRadius: 20, // ActionSheet的圆角半径\n            borderWidth: 1, // ActionSheet的边框宽度\n            borderStyle: BorderStyle.Solid, // ActionSheet的边框样式，需要和borderWidth属性一起使用\n            borderColor: Color.Blue, // ActionSheet的边框颜色，需要和borderWidth属性一起使用\n            backgroundColor: Color.White, // ActionSheet的背景颜色\n            shadow: ({ radius: 20, color: Color.Grey, offsetX: 50, offsetY: 0}), // ActionSheet的阴影效果\n            confirm: {\n              defaultFocus: true, // 确认按钮是否默认聚焦\n              value: 'Confirm button', // 确认按钮的文本\n              action: () => {\n                console.log('Get Alert Dialog handled') // 确认按钮点击后的回调函数\n              }\n            },\n            cancel: () => {\n              console.log('actionSheet canceled') // 取消按钮点击后的回调函数\n            },\n            onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n              console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // ActionSheet即将关闭时的回调函数，输出关闭原因\n              console.log(\"dialog onWillDismiss\")\n              if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                dismissDialogAction.dismiss() // 如果关闭原因是按下返回键，则关闭ActionSheet\n              }\n              if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                dismissDialogAction.dismiss() // 如果关闭原因是点击外部区域，则关闭ActionSheet\n              }\n            },\n            alignment: DialogAlignment.Bottom, // ActionSheet的对齐方式，底部对齐\n            offset: { dx: 0, dy: -10 }, // ActionSheet的偏移量\n            sheets: [\n              {\n                title: 'apples', // 第一个选项的标题\n                action: () => {\n                  console.log('apples') // 第一个选项点击后的回调函数\n                }\n              },\n              {\n                title: 'bananas', // 第二个选项的标题\n                action: () => {\n                  console.log('bananas') // 第二个选项点击后的回调函数\n                }\n              },\n              {\n                title: 'pears', // 第三个选项的标题\n                action: () => {\n                  console.log('pears') // 第三个选项点击后的回调函数\n                }\n              }\n            ]\n          })\n        })\n    }.width('100%') // Flex容器的宽度占满整个屏幕\n    .height('100%') // Flex容器的高度占满整个屏幕\n  }\n}"
            },
            {
                "description": "该组件通过 Flex 布局实现了一个展示 ActionSheet 的界面。布局宽度占据整个屏幕，高度设为 100%，内边距为 0。组件的垂直方向上居中对齐，包含一个按钮。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮的功能包括点击事件，用户可以通过点击按钮触发 ActionSheet 的显示。\n\nActionSheet 是一个模态对话框，显示在屏幕的中心位置，具有标题、副标题和消息内容。ActionSheet 包含多个选项，每个选项都有一个标题和一个点击事件。ActionSheet 还包含一个确认按钮和一个取消按钮，用户可以通过点击这些按钮触发相应的操作。ActionSheet 在显示时会自动取消，并且可以通过点击屏幕外部或按下返回键来关闭。\n\n整个布局通过 Flex 布局保证按钮在垂直方向上居中对齐，确保界面整洁美观。",
                "code": "@Entry // 标记该组件为入口组件\n@Component // 标记该组件为一个可渲染的组件\nstruct ActionSheetExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) { // 使用 Flex 布局，垂直方向排列，居中对齐\n      Button('Click to Show ActionSheet') // 创建一个按钮，文本为 \"Click to Show ActionSheet\"\n        .onClick(() => { // 按钮点击事件\n          ActionSheet.show({\n            title: 'ActionSheet title', // ActionSheet 的标题\n            subtitle: 'ActionSheet subtitle', // ActionSheet 的副标题\n            message: 'message', // ActionSheet 的消息内容\n            autoCancel: true, // 自动取消 ActionSheet\n            showInSubWindow: true, // 在子窗口中显示 ActionSheet\n            isModal: true, // ActionSheet 为模态对话框\n            confirm: {\n              defaultFocus: true, // 确认按钮默认聚焦\n              value: 'Confirm button', // 确认按钮的文本\n              action: () => { // 确认按钮的点击事件\n                console.log('Get Alert Dialog handled') // 打印日志\n              }\n            },\n            cancel: () => { // 取消按钮的点击事件\n              console.log('actionSheet canceled') // 打印日志\n            },\n            onWillDismiss:(dismissDialogAction: DismissDialogAction)=> { // ActionSheet 即将关闭时的回调\n              console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 打印关闭原因\n              console.log(\"dialog onWillDismiss\") // 打印日志\n              if (dismissDialogAction.reason == DismissReason.PRESS_BACK) { // 如果关闭原因是按下返回键\n                dismissDialogAction.dismiss() // 关闭 ActionSheet\n              }\n              if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) { // 如果关闭原因是点击屏幕外部\n                dismissDialogAction.dismiss() // 关闭 ActionSheet\n              }\n            },\n            alignment: DialogAlignment.Center, // ActionSheet 对齐方式为居中\n            offset: { dx: 0, dy: -10 }, // ActionSheet 的偏移量\n            sheets: [ // ActionSheet 的选项列表\n              {\n                title: 'apples', // 选项标题\n                action: () => { // 选项点击事件\n                  console.log('apples') // 打印日志\n                }\n              },\n              {\n                title: 'bananas', // 选项标题\n                action: () => { // 选项点击事件\n                  console.log('bananas') // 打印日志\n                }\n              },\n              {\n                title: 'pears', // 选项标题\n                action: () => { // 选项点击事件\n                  console.log('pears') // 打印日志\n                }\n              }\n            ]\n          })\n        })\n    }.width('100%') // 设置 Flex 布局的宽度为 100%\n    .height('100%') // 设置 Flex 布局的高度为 100%\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个包含按钮的界面，按钮点击后会显示一个ActionSheet。布局宽度占据整个屏幕，按钮的高度为88vp，内边距为顶部5vp。按钮的背景颜色为0x317aff。\nActionSheet的显示动画持续3秒，退出动画持续100毫秒。ActionSheet的标题为'ActionSheet 1'，消息内容为'Set Animation Duration open 3 second, close 100 ms'。ActionSheet的自动取消属性为true，对齐方式为顶部对齐。\nActionSheet的显示和隐藏动画通过TransitionEffect进行定义，显示时使用OPACITY和SCALE的组合动画，持续时间为3000毫秒，曲线为Sharp；隐藏时同样使用OPACITY和SCALE的组合动画，持续时间为100毫秒，曲线为Smooth。\nActionSheet的偏移量为{dx: 0, dy: -20}，即向上偏移20个单位。ActionSheet包含一个确认按钮和一个取消按钮，确认按钮的标题为'button'，点击后会触发回调函数，输出'Button-clicking callback'。取消按钮点击后会触发回调函数，输出'Closed callbacks'。\nActionSheet还包含三个选项，分别是'apples'、'bananas'和'pears'，每个选项点击后会触发相应的回调函数，分别输出'apples'、'bananas'和'pears'。",
                "code": "import { router } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct ActionSheetExample {\n  build() {\n    Column({ space: 5 }) {\n      Button('ActionSheet Set Duration')\n        .onClick(() => {\n          ActionSheet.show({\n            title: 'ActionSheet 1', // ActionSheet的标题\n            message: 'Set Animation Duration open 3 second, close 100 ms', // ActionSheet的消息内容\n            autoCancel: true, // 自动取消属性\n            alignment: DialogAlignment.Top, // 对齐方式为顶部对齐\n            transition: TransitionEffect.asymmetric(\n              TransitionEffect.OPACITY.animation({ duration: 3000, curve: Curve.Sharp }) // 显示动画的透明度变化，持续3000毫秒，曲线为Sharp\n                .combine(TransitionEffect.scale({ x: 1.5, y: 1.5 }).animation({ duration: 3000, curve: Curve.Sharp })), // 显示动画的缩放变化，持续3000毫秒，曲线为Sharp\n              TransitionEffect.OPACITY.animation({ duration: 100, curve: Curve.Smooth }) // 隐藏动画的透明度变化，持续100毫秒，曲线为Smooth\n                .combine(TransitionEffect.scale({ x: 0.5, y: 0.5 }).animation({ duration: 100, curve: Curve.Smooth })) // 隐藏动画的缩放变化，持续100毫秒，曲线为Smooth\n            ),\n            offset: { dx: 0, dy: -20 }, // ActionSheet的偏移量，向上偏移20个单位\n            confirm: {\n              value: 'button', // 确认按钮的标题\n              action: () => {\n                console.info('Button-clicking callback') // 确认按钮点击后的回调函数\n              }\n            },\n            cancel: () => {\n              console.info('Closed callbacks') // 取消按钮点击后的回调函数\n            },\n            sheets: [\n              {\n                title: 'apples', // 选项1的标题\n                action: () => {\n                  console.log('apples') // 选项1点击后的回调函数\n                }\n              },\n              {\n                title: 'bananas', // 选项2的标题\n                action: () => {\n                  console.log('bananas') // 选项2点击后的回调函数\n                }\n              },\n              {\n                title: 'pears', // 选项3的标题\n                action: () => {\n                  console.log('pears') // 选项3点击后的回调函数\n                }\n              }\n            ]\n          })\n        }).backgroundColor(0x317aff).height(\"88px\") // 按钮的背景颜色和高度\n    }.width('100%').margin({ top: 5 }) // 布局的宽度和顶部内边距\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "CustomDialog": {
        "description": "通过CustomDialogController类显示自定义弹窗。使用弹窗组件时，可优先考虑自定义弹窗，便于自定义弹窗的样式与内容。",
        "details": "自定义弹窗的所有参数，不支持动态刷新。",
        "interfaces": [
            {
                "description": "constructor(value: CustomDialogControllerOptions)",
                "params": {
                    "value": {
                        "type": "CustomDialogControllerOptions",
                        "required": true,
                        "description": "配置自定义弹窗的参数。"
                    }
                }
            }
        ],
        "attributes": {
            "CustomDialogControllerOptions": {
                "description": "配置自定义弹窗的参数对象。",
                "params": {
                    "builder": {
                        "type": "CustomDialog",
                        "required": true,
                        "description": "自定义弹窗内容构造器。"
                    },
                    "cancel": {
                        "type": "() => void",
                        "required": false,
                        "description": "返回、ESC键和点击遮障层弹窗退出时的回调。"
                    },
                    "autoCancel": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否允许点击遮障层退出，true表示关闭弹窗。false表示不关闭弹窗。",
                        "default": true
                    },
                    "alignment": {
                        "type": "DialogAlignment",
                        "required": false,
                        "description": "弹窗在竖直方向上的对齐方式。",
                        "default": "DialogAlignment.Default"
                    },
                    "offset": {
                        "type": "Offset",
                        "required": false,
                        "description": "弹窗相对alignment所在位置的偏移量。",
                        "default": {
                            "dx": 0,
                            "dy": 0
                        }
                    },
                    "customStyle": {
                        "type": "boolean",
                        "required": false,
                        "description": "弹窗容器样式是否自定义。",
                        "default": false
                    },
                    "gridCount": {
                        "type": "number",
                        "required": false,
                        "description": "弹窗宽度占栅格宽度的个数。",
                        "default": "自适应"
                    },
                    "maskColor": {
                        "type": "ResourceColor",
                        "required": false,
                        "description": "自定义蒙层颜色。",
                        "default": "0x33000000"
                    },
                    "maskRect": {
                        "type": "Rectangle",
                        "required": false,
                        "description": "弹窗遮蔽层区域，在遮蔽层区域内的事件不透传，在遮蔽层区域外的事件透传。",
                        "default": {
                            "x": 0,
                            "y": 0,
                            "width": "100%",
                            "height": "100%"
                        }
                    },
                    "openAnimation": {
                        "type": "AnimateParam",
                        "required": false,
                        "description": "自定义设置弹窗弹出的动画效果相关参数。"
                    },
                    "closeAnimation": {
                        "type": "AnimateParam",
                        "required": false,
                        "description": "自定义设置弹窗关闭的动画效果相关参数。"
                    },
                    "showInSubWindow": {
                        "type": "boolean",
                        "required": false,
                        "description": "某弹框需要显示在主窗口之外时，是否在子窗口显示此弹窗。",
                        "default": false
                    },
                    "backgroundColor": {
                        "type": "ResourceColor",
                        "required": false,
                        "description": "设置弹窗背板填充。",
                        "default": "Color.Transparent"
                    },
                    "cornerRadius": {
                        "type": "BorderRadiuses",
                        "required": false,
                        "description": "设置背板的圆角半径。",
                        "default": {
                            "topLeft": "32vp",
                            "topRight": "32vp",
                            "bottomLeft": "32vp",
                            "bottomRight": "32vp"
                        }
                    },
                    "isModal": {
                        "type": "boolean",
                        "required": false,
                        "description": "弹窗是否为模态窗口，模态窗口有蒙层，非模态窗口无蒙层。",
                        "default": true
                    },
                    "onWillDismiss": {
                        "type": "Callback<DismissDialogAction>",
                        "required": false,
                        "description": "交互式关闭回调函数。"
                    },
                    "borderWidth": {
                        "type": [
                            "Dimension",
                            "EdgeWidths"
                        ],
                        "required": false,
                        "description": "设置弹窗背板的边框宽度。",
                        "default": 0
                    },
                    "borderColor": {
                        "type": [
                            "ResourceColor",
                            "EdgeColors"
                        ],
                        "required": false,
                        "description": "设置弹窗背板的边框颜色。",
                        "default": "Color.Black"
                    },
                    "borderStyle": {
                        "type": [
                            "BorderStyle",
                            "EdgeStyles"
                        ],
                        "required": false,
                        "description": "设置弹窗背板的边框样式。",
                        "default": "BorderStyle.Solid"
                    },
                    "width": {
                        "type": "Dimension",
                        "required": false,
                        "description": "设置弹窗背板的宽度。",
                        "default": "400vp"
                    },
                    "height": {
                        "type": "Dimension",
                        "required": false,
                        "description": "设置弹窗背板的高度。",
                        "default": "0.9 * (窗口高度 - 安全区域)"
                    },
                    "shadow": {
                        "type": [
                            "ShadowOptions",
                            "ShadowStyle"
                        ],
                        "required": false,
                        "description": "设置弹窗背板的阴影。"
                    },
                    "backgroundBlurStyle": {
                        "type": "BlurStyle",
                        "required": false,
                        "description": "弹窗背板模糊材质。",
                        "default": "BlurStyle.COMPONENT_ULTRA_THICK"
                    }
                }
            }
        },
        "events": {
            "open": {
                "description": "open(): void",
                "params": {}
            },
            "close": {
                "description": "close(): void",
                "params": {}
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中创建和使用自定义对话框（CustomDialog）。布局上，对话框内容通过Column组件垂直排列，包含一个文本和一个按钮。文本内容为“可展示在主窗口外的弹窗”，字体大小为30vp，高度为100vp。按钮文本为“点我关闭弹窗”，点击按钮会触发关闭对话框的操作。按钮的边距为20vp。\n\n在样式上，文本和按钮的布局和样式都相对简单，主要通过设置字体大小、高度和边距来控制显示效果。按钮的点击事件通过onClick方法实现，点击后调用对话框控制器的close方法关闭对话框。\n\n功能上，CustomDialogExample结构体定义了一个自定义对话框的模板，通过CustomDialogController控制对话框的显示和隐藏。CustomDialogUser结构体则是一个入口组件，通过按钮点击事件触发对话框的显示。对话框的显示位置通过alignment和offset属性设置为屏幕中心偏上20vp的位置。对话框的显示模式为模态（isModal: true），即显示时会阻止用户与主窗口的交互。对话框的圆角半径为10vp，显示在子窗口中（showInSubWindow: true）。\n\n交互方面，对话框提供了取消和确认的回调函数，分别在点击对话框的取消和确认按钮时触发。此外，对话框还提供了onWillDismiss回调，用于在对话框即将关闭时执行一些操作，例如根据关闭原因（如按下返回键或点击对话框外部）决定是否关闭对话框。",
                "code": "// xxx.ets\n@CustomDialog\nstruct CustomDialogExample {\n  controller?: CustomDialogController // 对话框控制器，用于控制对话框的显示和隐藏\n  cancel: () => void = () => { // 取消按钮的回调函数，默认空函数\n  }\n  confirm: () => void = () => { // 确认按钮的回调函数，默认空函数\n  }\n  build() {\n    Column() {\n      Text('可展示在主窗口外的弹窗') // 对话框中的文本内容\n        .fontSize(30) // 字体大小为30vp\n        .height(100) // 文本高度为100vp\n      Button('点我关闭弹窗') // 关闭对话框的按钮\n        .onClick(() => { // 按钮点击事件\n          if (this.controller != undefined) { // 检查对话框控制器是否存在\n            this.controller.close() // 调用控制器的close方法关闭对话框\n          }\n        })\n        .margin(20) // 按钮的边距为20vp\n    }\n  }\n}\n\n@Entry\n@Component\nstruct CustomDialogUser {\n  dialogController: CustomDialogController | null = new CustomDialogController({\n    builder: CustomDialogExample({ // 使用CustomDialogExample作为对话框的内容\n      cancel: ()=> { this.onCancel() }, // 设置取消按钮的回调函数\n      confirm: ()=> { this.onAccept() } // 设置确认按钮的回调函数\n    }),\n    cancel: this.existApp, // 设置点击对话框外部区域的回调函数\n    autoCancel: true, // 设置对话框是否在点击外部区域时自动关闭\n    onWillDismiss:(dismissDialogAction: DismissDialogAction)=> { // 对话框即将关闭时的回调函数\n      console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason)) // 打印关闭原因\n      console.log(\"dialog onWillDismiss\") // 打印日志\n      if (dismissDialogAction.reason == DismissReason.PRESS_BACK) { // 如果关闭原因是按下返回键\n        dismissDialogAction.dismiss() // 关闭对话框\n      }\n      if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) { // 如果关闭原因是点击对话框外部\n        dismissDialogAction.dismiss() // 关闭对话框\n      }\n    },\n    alignment: DialogAlignment.Center, // 对话框在屏幕中的对齐方式为居中\n    offset: { dx: 0, dy: -20 }, // 对话框相对于对齐位置的偏移量，向上偏移20vp\n    gridCount: 4, // 对话框的网格布局列数\n    showInSubWindow: true, // 对话框是否显示在子窗口中\n    isModal: true, // 对话框是否为模态，即是否阻止用户与主窗口的交互\n    customStyle: false, // 是否使用自定义样式\n    cornerRadius: 10, // 对话框的圆角半径为10vp\n  })\n\n  // 在自定义组件即将析构销毁时将dialogController置空\n  aboutToDisappear() {\n    this.dialogController = null // 将dialogController置空\n  }\n\n  onCancel() {\n    console.info('Callback when the first button is clicked') // 取消按钮点击时的回调函数\n  }\n\n  onAccept() {\n    console.info('Callback when the second button is clicked') // 确认按钮点击时的回调函数\n  }\n\n  existApp() {\n    console.info('Click the callback in the blank area') // 点击对话框外部区域时的回调函数\n  }\n\n  build() {\n    Column() {\n      Button('click me') // 触发对话框显示的按钮\n        .onClick(() => { // 按钮点击事件\n          if (this.dialogController != null) { // 检查对话框控制器是否存在\n            this.dialogController.open() // 调用控制器的open方法显示对话框\n          }\n        }).backgroundColor(0x317aff) // 按钮的背景颜色为0x317aff\n    }.width('100%').margin({ top: 5 }) // 按钮的宽度为100%，顶部边距为5vp\n  }\n}"
            },
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中创建和使用自定义对话框（CustomDialog）。布局上，对话框的宽度为300vp，高度为200vp，背景颜色为白色，边框为蓝色虚线，边框宽度为1vp，圆角半径为20vp，阴影效果为灰色，阴影半径为20vp，水平偏移为50vp，垂直偏移为0vp。对话框的内容区域包含一个文本组件和一个按钮组件，文本组件显示“这是自定义弹窗”，字体大小为30vp，高度为100vp。按钮组件显示“点我关闭弹窗”，点击按钮后会关闭对话框。对话框的排列方式为居中对齐，垂直方向上偏移-20vp。\n\n组件的样式和外观方面，对话框的背景颜色为白色，边框为蓝色虚线，圆角半径为20vp，阴影效果为灰色，阴影半径为20vp，水平偏移为50vp，垂直偏移为0vp。文本组件的字体大小为30vp，高度为100vp。按钮组件的背景颜色为默认，点击后会触发关闭对话框的操作。\n\n组件的排列和嵌套关系方面，对话框的内容区域通过Column组件进行垂直布局，包含一个文本组件和一个按钮组件。文本组件和按钮组件在垂直方向上依次排列。\n\n组件的功能和交互方面，点击按钮组件会触发关闭对话框的操作。对话框的打开和关闭由CustomDialogController控制，对话框的打开和关闭操作可以通过调用controller的open和close方法实现。",
                "code": "// xxx.ets\n\n// 定义一个自定义对话框组件\n@CustomDialog\nstruct CustomDialogExample {\n  // 对话框控制器，用于控制对话框的打开和关闭\n  controller?: CustomDialogController\n  \n  // 取消按钮的回调函数，默认空函数\n  cancel: () => void = () => {\n  }\n  \n  // 确认按钮的回调函数，默认空函数\n  confirm: () => void = () => {\n  }\n  \n  // 构建对话框的内容\n  build() {\n    Column() {\n      // 文本组件，显示“这是自定义弹窗”，字体大小为30vp，高度为100vp\n      Text('这是自定义弹窗')\n        .fontSize(30)\n        .height(100)\n      \n      // 按钮组件，显示“点我关闭弹窗”，点击后会关闭对话框\n      Button('点我关闭弹窗')\n        .onClick(() => {\n          // 如果对话框控制器存在，则调用close方法关闭对话框\n          if (this.controller != undefined) {\n            this.controller.close()\n          }\n        })\n        .margin(20) // 按钮的外边距为20vp\n    }\n  }\n}\n\n// 定义一个入口组件，用于使用自定义对话框\n@Entry\n@Component\nstruct CustomDialogUser {\n  // 对话框控制器，用于控制对话框的打开和关闭\n  dialogController: CustomDialogController | null = new CustomDialogController({\n    // 对话框的内容构建器，使用CustomDialogExample组件\n    builder: CustomDialogExample({\n      // 取消按钮的回调函数，调用onCancel方法\n      cancel: ()=> { this.onCancel() },\n      // 确认按钮的回调函数，调用onAccept方法\n      confirm: ()=> { this.onAccept() }\n    }),\n    \n    // 点击空白区域时的回调函数，调用existApp方法\n    cancel: this.existApp,\n    \n    // 是否自动取消对话框，设置为true\n    autoCancel: true,\n    \n    // 对话框即将关闭时的回调函数，打印关闭原因\n    onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n      console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason))\n      console.log(\"dialog onWillDismiss\")\n      // 如果关闭原因是按下返回键，则关闭对话框\n      if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n        dismissDialogAction.dismiss()\n      }\n      // 如果关闭原因是点击对话框外部，则关闭对话框\n      if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n        dismissDialogAction.dismiss()\n      }\n    },\n    \n    // 对话框的对齐方式，设置为居中对齐\n    alignment: DialogAlignment.Center,\n    \n    // 对话框的偏移量，垂直方向上偏移-20vp\n    offset: { dx: 0, dy: -20 },\n    \n    // 是否使用自定义样式，设置为false\n    customStyle: false,\n    \n    // 对话框的圆角半径，设置为20vp\n    cornerRadius: 20,\n    \n    // 对话框的宽度，设置为300vp\n    width: 300,\n    \n    // 对话框的高度，设置为200vp\n    height: 200,\n    \n    // 对话框的边框宽度，设置为1vp\n    borderWidth: 1,\n    \n    // 对话框的边框样式，设置为虚线\n    borderStyle: BorderStyle.Dashed, // 使用borderStyle属性，需要和borderWidth属性一起使用\n    \n    // 对话框的边框颜色，设置为蓝色\n    borderColor: Color.Blue, // 使用borderColor属性，需要和borderWidth属性一起使用\n    \n    // 对话框的背景颜色，设置为白色\n    backgroundColor: Color.White,\n    \n    // 对话框的阴影效果，阴影半径为20vp，颜色为灰色，水平偏移为50vp，垂直偏移为0vp\n    shadow: ({ radius: 20, color: Color.Grey, offsetX: 50, offsetY: 0}),\n  })\n  \n  // 在自定义组件即将析构销毁时将dialogController置空\n  aboutToDisappear() {\n    this.dialogController = null // 将dialogController置空\n  }\n\n  // 取消按钮的回调函数，打印日志\n  onCancel() {\n    console.info('Callback when the first button is clicked')\n  }\n\n  // 确认按钮的回调函数，打印日志\n  onAccept() {\n    console.info('Callback when the second button is clicked')\n  }\n\n  // 点击空白区域时的回调函数，打印日志\n  existApp() {\n    console.info('Click the callback in the blank area')\n  }\n\n  // 构建入口组件的内容\n  build() {\n    Column() {\n      // 按钮组件，显示“click me”，点击后会打开对话框\n      Button('click me')\n        .onClick(() => {\n          // 如果对话框控制器存在，则调用open方法打开对话框\n          if (this.dialogController != null) {\n            this.dialogController.open()\n          }\n        }).backgroundColor(0x317aff) // 按钮的背景颜色为0x317aff\n    }.width('100%').margin({ top: 5 }) // 按钮的宽度为100%，顶部外边距为5vp\n  }\n}"
            },
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用自定义对话框（CustomDialog）组件。布局上，主要使用了Column和Flex组件来实现垂直和水平布局。样式上，使用了字体大小、高度、边距、背景颜色、字体颜色等属性来定义组件的外观。功能上，实现了对话框的打开、关闭、文本输入、按钮点击等交互操作。\n\n布局属性：\n- Column组件用于垂直布局，包含多个子组件。\n- Flex组件用于水平布局，包含两个按钮，按钮之间通过SpaceAround对齐方式均匀分布。\n- 按钮的背景颜色、字体颜色、边距、高度等属性用于定义按钮的样式。\n\n组件的样式和外观：\n- Text组件的字体大小、高度、边距等属性用于定义文本的样式。\n- Button组件的背景颜色、字体颜色、边距、高度等属性用于定义按钮的样式。\n- TextInput组件的高度、宽度、边距等属性用于定义输入框的样式。\n\n组件的排列和嵌套关系：\n- Column组件包含Text、TextInput、Flex和Button组件，实现垂直布局。\n- Flex组件包含两个Button组件，实现水平布局。\n\n组件的功能和交互：\n- Button组件的onClick事件用于触发对话框的打开和关闭操作。\n- TextInput组件的onChange事件用于实时更新输入的文本值。\n- CustomDialogController用于控制对话框的打开和关闭，以及对话框的样式和位置。",
                "code": "// xxx.ets\n@CustomDialog\nstruct CustomDialogExampleTwo {\n  controllerTwo?: CustomDialogController // 定义对话框控制器\n  build() {\n    Column() {\n      Text('我是第二个弹窗')\n        .fontSize(30) // 设置字体大小\n        .height(100) // 设置高度\n      Button('点我关闭第二个弹窗')\n        .onClick(() => {\n          if (this.controllerTwo != undefined) {\n            this.controllerTwo.close() // 点击按钮关闭对话框\n          }\n        })\n        .margin(20) // 设置边距\n    }\n  }\n}\n\n@CustomDialog\n@Component\nstruct CustomDialogExample {\n  @Link textValue: string // 绑定文本值\n  @Link inputValue: string // 绑定输入值\n  dialogControllerTwo: CustomDialogController | null = new CustomDialogController({\n    builder: CustomDialogExampleTwo(), // 定义第二个对话框\n    alignment: DialogAlignment.Bottom, // 对话框对齐方式\n    onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n      console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason))\n      console.log(\"dialog onWillDismiss\")\n      if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n        dismissDialogAction.dismiss() // 按下返回键关闭对话框\n      }\n      if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n        dismissDialogAction.dismiss() // 点击对话框外部关闭对话框\n      }\n    },\n    offset: { dx: 0, dy: -25 } // 对话框偏移量\n  })\n  controller?: CustomDialogController // 定义对话框控制器\n  cancel: () => void = () => { } // 取消按钮回调函数\n  confirm: () => void = () => { } // 确认按钮回调函数\n\n  build() {\n    Column() {\n      Text('Change text').fontSize(20).margin({ top: 10, bottom: 10 }) // 设置文本样式和边距\n      TextInput({ placeholder: '', text: this.textValue }).height(60).width('90%')\n        .onChange((value: string) => {\n          this.textValue = value // 输入框内容变化时更新文本值\n        })\n      Text('Whether to change a text?').fontSize(16).margin({ bottom: 10 }) // 设置文本样式和边距\n      Flex({ justifyContent: FlexAlign.SpaceAround }) {\n        Button('cancel')\n          .onClick(() => {\n            if (this.controller != undefined) {\n              this.controller.close() // 点击取消按钮关闭对话框\n              this.cancel() // 调用取消回调函数\n            }\n          }).backgroundColor(0xffffff).fontColor(Color.Black) // 设置按钮样式\n        Button('confirm')\n          .onClick(() => {\n            if (this.controller != undefined) {\n              this.inputValue = this.textValue // 更新输入值\n              this.controller.close() // 点击确认按钮关闭对话框\n              this.confirm() // 调用确认回调函数\n            }\n          }).backgroundColor(0xffffff).fontColor(Color.Red) // 设置按钮样式\n      }.margin({ bottom: 10 })\n\n      Button('点我打开第二个弹窗')\n        .onClick(() => {\n          if (this.dialogControllerTwo != null) {\n            this.dialogControllerTwo.open() // 点击按钮打开第二个对话框\n          }\n        })\n        .margin(20) // 设置边距\n    }.borderRadius(10) // 设置边框圆角\n  }\n}\n\n@Entry\n@Component\nstruct CustomDialogUser {\n  @State textValue: string = '' // 定义状态文本值\n  @State inputValue: string = 'click me' // 定义状态输入值\n  dialogController: CustomDialogController | null = new CustomDialogController({\n    builder: CustomDialogExample({\n      cancel: ()=> { this.onCancel() }, // 取消按钮回调函数\n      confirm: ()=> { this.onAccept() }, // 确认按钮回调函数\n      textValue: $textValue, // 绑定文本值\n      inputValue: $inputValue // 绑定输入值\n    }),\n    cancel: this.exitApp, // 取消按钮回调函数\n    autoCancel: true, // 自动取消\n    onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n      console.info(\"reason=\" + JSON.stringify(dismissDialogAction.reason))\n      console.log(\"dialog onWillDismiss\")\n      if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n        dismissDialogAction.dismiss() // 按下返回键关闭对话框\n      }\n      if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n        dismissDialogAction.dismiss() // 点击对话框外部关闭对话框\n      }\n    },\n    alignment: DialogAlignment.Bottom, // 对话框对齐方式\n    offset: { dx: 0, dy: -20 }, // 对话框偏移量\n    gridCount: 4, // 网格数量\n    customStyle: false, // 自定义样式\n    cornerRadius: 10, // 边框圆角\n  })\n\n  aboutToDisappear() {\n    this.dialogController = null // 组件销毁时将对话框控制器置空\n  }\n\n  onCancel() {\n    console.info('Callback when the first button is clicked') // 取消按钮点击回调\n  }\n\n  onAccept() {\n    console.info('Callback when the second button is clicked') // 确认按钮点击回调\n  }\n\n  exitApp() {\n    console.info('Click the callback in the blank area') // 空白区域点击回调\n  }\n\n  build() {\n    Column() {\n      Button(this.inputValue)\n        .onClick(() => {\n          if (this.dialogController != null) {\n            this.dialogController.open() // 点击按钮打开对话框\n          }\n        }).backgroundColor(0x317aff) // 设置按钮背景颜色\n    }.width('100%').margin({ top: 5 }) // 设置布局宽度和边距\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "CalendarPickerDialog": {
        "description": "日历选择器弹窗组件，点击日期弹出日历选择器弹窗，可选择弹窗内任意日期。",
        "details": "该组件从API Version 10开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。本模块功能依赖UI的执行上下文，不可在UI上下文不明确的地方使用，参见[UIContext](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-uicontext-V5#uicontext)说明。",
        "interfaces": [
            {
                "description": "static show(options?: CalendarDialogOptions)",
                "params": {
                    "options": {
                        "type": "CalendarDialogOptions",
                        "required": false,
                        "description": "日历选择器弹窗的配置选项。"
                    }
                }
            }
        ],
        "attributes": {
            "onAccept": {
                "description": "点击弹窗中的“确定”按钮时触发该回调。",
                "params": {
                    "value": {
                        "type": "Date",
                        "required": true,
                        "description": "选中的日期值。"
                    }
                }
            },
            "onCancel": {
                "description": "点击弹窗中的“取消”按钮时触发该回调。",
                "params": {}
            },
            "onChange": {
                "description": "选择弹窗中日期使当前选中项改变时触发该回调。",
                "params": {
                    "value": {
                        "type": "Date",
                        "required": true,
                        "description": "选中的日期值。"
                    }
                }
            },
            "backgroundColor": {
                "description": "弹窗背板颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": false,
                        "description": "弹窗背板颜色。",
                        "default": "Color.Transparent"
                    }
                }
            },
            "backgroundBlurStyle": {
                "description": "弹窗背板模糊材质。",
                "params": {
                    "value": {
                        "type": "BlurStyle",
                        "required": false,
                        "description": "弹窗背板模糊材质。",
                        "default": "BlurStyle.COMPONENT_ULTRA_THICK"
                    }
                }
            },
            "acceptButtonStyle": {
                "description": "设置确认按钮显示样式、样式和重要程度、角色、背景色、圆角、文本颜色、字号、字体粗细、字体样式、字体列表、按钮是否默认响应Enter键。",
                "params": {
                    "value": {
                        "type": "PickerDialogButtonStyle",
                        "required": false,
                        "description": "确认按钮的样式配置。"
                    }
                }
            },
            "cancelButtonStyle": {
                "description": "设置取消按钮显示样式、样式和重要程度、角色、背景色、圆角、文本颜色、字号、字体粗细、字体样式、字体列表、按钮是否默认响应Enter键。",
                "params": {
                    "value": {
                        "type": "PickerDialogButtonStyle",
                        "required": false,
                        "description": "取消按钮的样式配置。"
                    }
                }
            },
            "onDidAppear": {
                "description": "弹窗弹出时的事件回调。",
                "params": {}
            },
            "onDidDisappear": {
                "description": "弹窗消失时的事件回调。",
                "params": {}
            },
            "onWillAppear": {
                "description": "弹窗显示动效前的事件回调。",
                "params": {}
            },
            "onWillDisappear": {
                "description": "弹窗退出动效前的事件回调。",
                "params": {}
            },
            "shadow": {
                "description": "设置弹窗背板的阴影。",
                "params": {
                    "value": {
                        "type": [
                            "ShadowOptions",
                            "ShadowStyle"
                        ],
                        "required": false,
                        "description": "弹窗背板的阴影配置。"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件展示了一个日历选择对话框的基本使用示例。布局宽度占据整个屏幕，包含一个按钮，点击该按钮会弹出一个日历选择对话框。按钮的样式包括内边距为20vp，按钮的文本为“Show CalendarPicker Dialog”。\n日历选择对话框的功能包括选择日期、接受选择、取消选择、日期变化、对话框显示和消失的回调事件。用户可以通过点击按钮触发日历选择对话框的显示，并在对话框中选择日期。选择日期后，可以通过点击“接受”按钮确认选择，或点击“取消”按钮取消选择。\n整个布局通过Column组件实现，确保按钮在垂直方向上居中显示。",
                "code": "@Entry\n@Component\nstruct CalendarPickerDialogExample {\n  // 初始选择的日期为2024年4月23日\n  private selectedDate: Date = new Date('2024-04-23')\n\n  build() {\n    Column() {\n      Button(\"Show CalendarPicker Dialog\")\n        .margin(20) // 按钮的内边距为20vp\n        .onClick(() => {\n          console.info(\"CalendarDialog.show\")\n          CalendarPickerDialog.show({\n            selected: this.selectedDate, // 初始选择的日期\n            onAccept: (value) => {\n              console.info(\"calendar onAccept:\" + JSON.stringify(value)) // 用户接受选择时的回调\n            },\n            onCancel: () => {\n              console.info(\"calendar onCancel\") // 用户取消选择时的回调\n            },\n            onChange: (value) => {\n              console.info(\"calendar onChange:\" + JSON.stringify(value)) // 日期变化时的回调\n            },\n            onDidAppear: () => {\n              console.info(\"calendar onDidAppear\") // 对话框显示完成时的回调\n            },\n            onDidDisappear: () => {\n              console.info(\"calendar onDidDisappear\") // 对话框消失完成时的回调\n            },\n            onWillAppear: () => {\n              console.info(\"calendar onWillAppear\") // 对话框即将显示时的回调\n            },\n            onWillDisappear: () => {\n              console.info(\"calendar onWillDisappear\") // 对话框即将消失时的回调\n            }\n          })\n        })\n    }.width('100%') // 布局宽度占据整个屏幕\n  }\n}"
            },
            {
                "description": "该组件通过 Column 布局实现了一个展示按钮和日历选择器对话框的界面。布局宽度占据整个屏幕，按钮位于布局的顶部，按钮的点击事件会触发日历选择器对话框的显示。\n按钮的样式包括边距、字体颜色、字体大小、字体粗细、字体样式、字体家族、背景颜色和边框圆角等属性，支持自定义样式展示。\n日历选择器对话框的样式包括接受按钮和取消按钮的自定义样式，按钮的样式包括字体颜色、字体大小、字体粗细、字体样式、字体家族、背景颜色和边框圆角等属性。\n日历选择器对话框的功能包括接受按钮和取消按钮的点击事件，以及对话框显示和消失时的回调事件。\n整个布局通过 Column 布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct CalendarPickerDialogExample {\n  // 定义一个私有变量 selectedDate，用于存储当前选择的日期，默认为当前日期\n  private selectedDate: Date = new Date()\n\n  build() {\n    Column() {\n      // 创建一个按钮，按钮文本为 \"Show CalendarPicker Dialog\"，按钮的点击事件会触发日历选择器对话框的显示\n      Button(\"Show CalendarPicker Dialog\")\n        .margin(20) // 设置按钮的边距为 20vp\n        .onClick(() => {\n          console.info(\"CalendarDialog.show\") // 打印日志，表示日历选择器对话框即将显示\n          CalendarPickerDialog.show({\n            selected: this.selectedDate, // 设置日历选择器对话框的初始选中日期为 selectedDate\n            acceptButtonStyle: { \n              type: ButtonType.Normal, // 设置接受按钮的类型为普通按钮\n              style: ButtonStyleMode.NORMAL, // 设置接受按钮的样式模式为普通模式\n              role: ButtonRole.NORMAL, // 设置接受按钮的角色为普通角色\n              fontColor: Color.Red, // 设置接受按钮的字体颜色为红色\n              fontSize: '26fp', // 设置接受按钮的字体大小为 26fp\n              fontWeight: FontWeight.Bolder, // 设置接受按钮的字体粗细为更粗\n              fontStyle: FontStyle.Normal, // 设置接受按钮的字体样式为正常\n              fontFamily: 'sans-serif', // 设置接受按钮的字体家族为 sans-serif\n              backgroundColor: '#80834511', // 设置接受按钮的背景颜色为 #80834511\n              borderRadius: 20 // 设置接受按钮的边框圆角为 20vp\n            },\n            cancelButtonStyle: { \n              type: ButtonType.Normal, // 设置取消按钮的类型为普通按钮\n              style: ButtonStyleMode.NORMAL, // 设置取消按钮的样式模式为普通模式\n              role: ButtonRole.NORMAL, // 设置取消按钮的角色为普通角色\n              fontColor: Color.Blue, // 设置取消按钮的字体颜色为蓝色\n              fontSize: '16fp', // 设置取消按钮的字体大小为 16fp\n              fontWeight: FontWeight.Normal, // 设置取消按钮的字体粗细为正常\n              fontStyle: FontStyle.Italic, // 设置取消按钮的字体样式为斜体\n              fontFamily: 'sans-serif', // 设置取消按钮的字体家族为 sans-serif\n              backgroundColor: '#50182431', // 设置取消按钮的背景颜色为 #50182431\n              borderRadius: 10 // 设置取消按钮的边框圆角为 10vp\n            },\n            onAccept: (value) => {\n              console.info(\"calendar onAccept:\" + JSON.stringify(value)) // 打印日志，表示用户点击了接受按钮，并输出选中的日期\n            },\n            onCancel: () => {\n              console.info(\"calendar onCancel\") // 打印日志，表示用户点击了取消按钮\n            },\n            onChange: (value) => {\n              console.info(\"calendar onChange:\" + JSON.stringify(value)) // 打印日志，表示用户改变了选中的日期，并输出新的日期\n            },\n            onDidAppear: () => {\n              console.info(\"calendar onDidAppear\") // 打印日志，表示日历选择器对话框已经显示\n            },\n            onDidDisappear: () => {\n              console.info(\"calendar onDidDisappear\") // 打印日志，表示日历选择器对话框已经消失\n            },\n            onWillAppear: () => {\n              console.info(\"calendar onWillAppear\") // 打印日志，表示日历选择器对话框即将显示\n            },\n            onWillDisappear: () => {\n              console.info(\"calendar onWillDisappear\") // 打印日志，表示日历选择器对话框即将消失\n            }\n          })\n        })\n    }.width('100%') // 设置 Column 布局的宽度为 100%\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "DatePickerDialog": {
        "description": "日期滑动选择器弹窗，展示在弹窗上，允许用户选择日期。",
        "details": "该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。本模块功能依赖UI的执行上下文，不可在UI上下文不明确的地方使用，参见UIContext说明。从API version 10开始，可以通过使用UIContext中的showDatePickerDialog来明确UI的执行上下文。",
        "interfaces": [
            {
                "description": "DatePickerDialog.show(options?: DatePickerDialogOptions)",
                "params": {
                    "options": {
                        "type": "DatePickerDialogOptions",
                        "required": false,
                        "description": "配置日期选择器弹窗的参数。"
                    }
                }
            }
        ],
        "attributes": {
            "DatePickerDialogOptions": {
                "description": "配置日期选择器弹窗的参数。",
                "params": {
                    "lunar": {
                        "type": "boolean",
                        "required": false,
                        "description": "日期是否显示为农历，true表示显示农历，false表示不显示农历。",
                        "default": false
                    },
                    "showTime10+": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否展示时间项，true表示显示时间，false表示不显示时间。",
                        "default": false
                    },
                    "useMilitaryTime10+": {
                        "type": "boolean",
                        "required": false,
                        "description": "展示时间是否为24小时制，true表示显示24小时制，false表示显示12小时制。",
                        "default": false
                    },
                    "lunarSwitch10+": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否展示切换农历的开关，true表示展示开关，false表示不展示开关。",
                        "default": false
                    },
                    "disappearTextStyle10+": {
                        "type": "PickerTextStyle",
                        "required": false,
                        "description": "设置所有选项中最上和最下两个选项的文本颜色、字号、字体粗细。"
                    },
                    "textStyle10+": {
                        "type": "PickerTextStyle",
                        "required": false,
                        "description": "设置所有选项中除了最上、最下及选中项以外的文本颜色、字号、字体粗细。"
                    },
                    "selectedTextStyle10+": {
                        "type": "PickerTextStyle",
                        "required": false,
                        "description": "设置选中项的文本颜色、字号、字体粗细。"
                    },
                    "acceptButtonStyle12+": {
                        "type": "PickerDialogButtonStyle",
                        "required": false,
                        "description": "设置确认按钮显示样式、样式和重要程度、角色、背景色、圆角、文本颜色、字号、字体粗细、字体样式、字体列表、按钮是否默认响应Enter键。"
                    },
                    "cancelButtonStyle12+": {
                        "type": "PickerDialogButtonStyle",
                        "required": false,
                        "description": "设置取消按钮显示样式、样式和重要程度、角色、背景色、圆角、文本颜色、字号、字体粗细、字体样式、字体列表、按钮是否默认响应Enter键。"
                    },
                    "alignment10+": {
                        "type": "DialogAlignment",
                        "required": false,
                        "description": "弹窗在竖直方向上的对齐方式。"
                    },
                    "offset10+": {
                        "type": "Offset",
                        "required": false,
                        "description": "弹窗相对alignment所在位置的偏移量。"
                    },
                    "maskRect10+": {
                        "type": "Rectangle",
                        "required": false,
                        "description": "弹窗遮蔽层区域，在遮蔽层区域内的事件不透传，在遮蔽层区域外的事件透传。"
                    },
                    "backgroundColor11+": {
                        "type": "ResourceColor",
                        "required": false,
                        "description": "弹窗背板颜色。"
                    },
                    "backgroundBlurStyle11+": {
                        "type": "BlurStyle",
                        "required": false,
                        "description": "弹窗背板模糊材质。"
                    },
                    "shadow12+": {
                        "type": [
                            "ShadowOptions",
                            "ShadowStyle"
                        ],
                        "required": false,
                        "description": "设置弹窗背板的阴影。"
                    },
                    "dateTimeOptions12+": {
                        "type": "DateTimeOptions",
                        "required": false,
                        "description": "设置时分是否显示前置0，目前只支持设置hour和minute参数。"
                    }
                }
            }
        },
        "events": {
            "onAccept": {
                "description": "点击弹窗中的“确定”按钮时触发该回调。",
                "params": {
                    "value": {
                        "type": "DatePickerResult",
                        "required": true,
                        "description": "选择的日期结果。"
                    }
                }
            },
            "onCancel": {
                "description": "点击弹窗中的“取消”按钮时触发该回调。"
            },
            "onChange": {
                "description": "滑动弹窗中的滑动选择器使当前选中项改变时触发该回调。",
                "params": {
                    "value": {
                        "type": "DatePickerResult",
                        "required": true,
                        "description": "当前选中的日期结果。"
                    }
                }
            },
            "onDateAccept10+": {
                "description": "点击弹窗中的“确定”按钮时触发该回调。",
                "params": {
                    "value": {
                        "type": "Date",
                        "required": true,
                        "description": "选择的日期结果。"
                    }
                }
            },
            "onDateChange10+": {
                "description": "滑动弹窗中的滑动选择器使当前选中项改变时触发该回调。",
                "params": {
                    "value": {
                        "type": "Date",
                        "required": true,
                        "description": "当前选中的日期结果。"
                    }
                }
            },
            "onDidAppear12+": {
                "description": "弹窗弹出时的事件回调。"
            },
            "onDidDisappear12+": {
                "description": "弹窗消失时的事件回调。"
            },
            "onWillAppear12+": {
                "description": "弹窗显示动效前的事件回调。"
            },
            "onWillDisappear12+": {
                "description": "弹窗退出动效前的事件回调。"
            }
        },
        "rules": [
            "起始日期晚于结束日期，选中日期未设置时，起始日期、结束日期和选中日期都为默认值。",
            "起始日期晚于结束日期，选中日期早于起始日期默认值时，起始日期、结束日期都为默认值，选中日期为起始日期默认值。",
            "起始日期晚于结束日期，选中日期晚于结束日期默认值时，起始日期、结束日期都为默认值，选中日期为结束日期默认值。",
            "起始日期晚于结束日期，选中日期在起始日期与结束日期默认值范围内时，起始日期、结束日期都为默认值，选中日期为设置的值。",
            "选中日期早于起始日期时，选中日期为起始日期。",
            "选中日期晚于结束日期时，选中日期为结束日期。",
            "起始日期晚于当前系统日期，选中日期未设置时，选中日期为起始日期。",
            "结束日期早于当前系统日期，选中日期未设置时，选中日期为结束日期。",
            "日期格式不符合规范时，取默认值。",
            "起始日期或结束日期早于系统有效范围时，起始日期或结束日期取系统有效范围最早日期。",
            "起始日期或结束日期晚于系统有效范围时，起始日期或结束日期取系统有效范围最晚日期。"
        ],
        "examples": [
            {
                "description": "该组件通过Column布局实现了一个展示日期选择对话框的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上包含一个按钮，按钮的文本为\"DatePickerDialog\"，按钮的点击事件会触发日期选择对话框的显示。\n按钮的样式包括边距为20vp，点击事件通过onClick方法实现。日期选择对话框的显示通过DatePickerDialog.show方法实现，对话框的日期范围从2000年1月1日到2100年12月31日，初始选中日期为2010年1月1日，并且显示时间选择。\n对话框的文本样式包括消失文本、普通文本和选中文本的样式，分别设置了不同的颜色、字体大小和字体粗细。对话框的按钮样式包括确定按钮和取消按钮的样式，分别设置了不同的按钮类型、样式模式、角色、字体颜色、字体大小、字体粗细、字体样式、字体家族、背景颜色和边框圆角。\n对话框的事件包括日期接受事件、取消事件、日期变化事件、对话框显示事件、对话框消失事件、对话框即将显示事件和对话框即将消失事件，分别通过onDateAccept、onCancel、onDateChange、onDidAppear、onDidDisappear、onWillAppear和onWillDisappear方法实现。\n整个布局通过Column布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct DatePickerDialogExample {\n  selectedDate: Date = new Date(\"2010-1-1\") // 初始选中日期为2010年1月1日\n\n  build() {\n    Column() {\n      Button(\"DatePickerDialog\") // 创建一个按钮，文本为\"DatePickerDialog\"\n        .margin(20) // 设置按钮的边距为20vp\n        .onClick(() => { // 设置按钮的点击事件\n          DatePickerDialog.show({\n            start: new Date(\"2000-1-1\"), // 设置日期选择对话框的起始日期为2000年1月1日\n            end: new Date(\"2100-12-31\"), // 设置日期选择对话框的结束日期为2100年12月31日\n            selected: this.selectedDate, // 设置日期选择对话框的初始选中日期为selectedDate\n            showTime: true, // 设置日期选择对话框显示时间选择\n            useMilitaryTime: false, // 设置日期选择对话框不使用24小时制\n            disappearTextStyle: { color: Color.Pink, font: { size: '22fp', weight: FontWeight.Bold } }, // 设置日期选择对话框消失文本的样式，颜色为粉色，字体大小为22fp，字体粗细为粗体\n            textStyle: { color: '#ff00ff00', font: { size: '18fp', weight: FontWeight.Normal } }, // 设置日期选择对话框普通文本的样式，颜色为绿色，字体大小为18fp，字体粗细为正常\n            selectedTextStyle: { color: '#ff182431', font: { size: '14fp', weight: FontWeight.Regular } }, // 设置日期选择对话框选中文本的样式，颜色为蓝色，字体大小为14fp，字体粗细为常规\n            acceptButtonStyle: { type: ButtonType.Normal, style: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL, fontColor: Color.Red, // 设置日期选择对话框确定按钮的样式，按钮类型为普通按钮，样式模式为正常，角色为普通，字体颜色为红色\n              fontSize: '26fp', fontWeight: FontWeight.Bolder, fontStyle: FontStyle.Normal, fontFamily: 'sans-serif', backgroundColor: '#80834511', // 字体大小为26fp，字体粗细为更粗，字体样式为正常，字体家族为sans-serif，背景颜色为透明度为50%的绿色\n              borderRadius: 20 }, // 边框圆角为20vp\n            cancelButtonStyle: { type: ButtonType.Normal, style: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL, fontColor: Color.Blue, // 设置日期选择对话框取消按钮的样式，按钮类型为普通按钮，样式模式为正常，角色为普通，字体颜色为蓝色\n              fontSize: '16fp', fontWeight: FontWeight.Normal, fontStyle: FontStyle.Italic, fontFamily: 'sans-serif', backgroundColor: '#50182431', // 字体大小为16fp，字体粗细为正常，字体样式为斜体，字体家族为sans-serif，背景颜色为透明度为31%的蓝色\n              borderRadius: 10 }, // 边框圆角为10vp\n            onDateAccept: (value: Date) => { // 设置日期选择对话框的日期接受事件\n              this.selectedDate = value // 将选中的日期赋值给selectedDate\n              console.info(\"DatePickerDialog:onDateAccept()\" + value.toString()) // 在控制台输出日期接受事件的日志\n            },\n            onCancel: () => { // 设置日期选择对话框的取消事件\n              console.info(\"DatePickerDialog:onCancel()\") // 在控制台输出取消事件的日志\n            },\n            onDateChange: (value: Date) => { // 设置日期选择对话框的日期变化事件\n              console.info(\"DatePickerDialog:onDateChange()\" + value.toString()) // 在控制台输出日期变化事件的日志\n            },\n            onDidAppear: () => { // 设置日期选择对话框的显示事件\n              console.info(\"DatePickerDialog:onDidAppear()\") // 在控制台输出显示事件的日志\n            },\n            onDidDisappear: () => { // 设置日期选择对话框的消失事件\n              console.info(\"DatePickerDialog:onDidDisappear()\") // 在控制台输出消失事件的日志\n            },\n            onWillAppear: () => { // 设置日期选择对话框的即将显示事件\n              console.info(\"DatePickerDialog:onWillAppear()\") // 在控制台输出即将显示事件的日志\n            },\n            onWillDisappear: () => { // 设置日期选择对话框的即将消失事件\n              console.info(\"DatePickerDialog:onWillDisappear()\") // 在控制台输出即将消失事件的日志\n            }\n          })\n        })\n    }.width('100%') // 设置Column的宽度为100%\n  }\n}"
            },
            {
                "description": "该组件通过Column布局实现了一个展示日期选择对话框（DatePickerDialog）的界面。布局宽度占据整个屏幕，包含两个按钮，每个按钮用于触发不同类型的日期选择对话框。按钮之间的间距为20vp，按钮的排列方式为垂直排列。\n按钮的样式包括默认的背景颜色、字体颜色和大小。按钮的功能包括点击事件，用户可以通过点击按钮触发日期选择对话框的显示。\n日期选择对话框的功能包括选择日期范围、显示时间、使用24小时制、自定义文本样式等。对话框的事件包括日期接受、取消、日期变化、对话框显示和消失等。\n整个布局通过Column布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct DatePickerDialogExample {\n  // 初始化选中的日期为2010年1月1日\n  selectedDate: Date = new Date(\"2010-1-1\")\n\n  build() {\n    Column() {\n      // 创建一个按钮，点击后显示日期选择对话框\n      Button(\"DatePickerDialog\")\n        .margin(20) // 设置按钮的外边距为20vp\n        .onClick(() => {\n          DatePickerDialog.show({\n            start: new Date(\"2000-1-1\"), // 设置日期选择对话框的起始日期为2000年1月1日\n            end: new Date(\"2100-12-31\"), // 设置日期选择对话框的结束日期为2100年12月31日\n            selected: this.selectedDate, // 设置日期选择对话框的初始选中日期为当前选中的日期\n            showTime: true, // 设置日期选择对话框显示时间\n            useMilitaryTime: false, // 设置日期选择对话框不使用24小时制\n            disappearTextStyle: { color: Color.Pink, font: { size: '22fp', weight: FontWeight.Bold } }, // 设置对话框消失时的文本样式\n            textStyle: { color: '#ff00ff00', font: { size: '18fp', weight: FontWeight.Normal } }, // 设置对话框的默认文本样式\n            selectedTextStyle: { color: '#ff182431', font: { size: '14fp', weight: FontWeight.Regular } }, // 设置选中日期的文本样式\n            onDateAccept: (value: Date) => {\n              // 当用户点击确定按钮时，更新选中的日期并打印日志\n              this.selectedDate = value\n              console.info(\"DatePickerDialog:onDateAccept()\" + value.toString())\n            },\n            onCancel: () => {\n              // 当用户点击取消按钮时，打印日志\n              console.info(\"DatePickerDialog:onCancel()\")\n            },\n            onDateChange: (value: Date) => {\n              // 当用户选择日期时，打印日志\n              console.info(\"DatePickerDialog:onDateChange()\" + value.toString())\n            },\n            onDidAppear: () => {\n              // 当对话框显示时，打印日志\n              console.info(\"DatePickerDialog:onDidAppear()\")\n            },\n            onDidDisappear: () => {\n              // 当对话框消失时，打印日志\n              console.info(\"DatePickerDialog:onDidDisappear()\")\n            },\n            onWillAppear: () => {\n              // 当对话框即将显示时，打印日志\n              console.info(\"DatePickerDialog:onWillAppear()\")\n            },\n            onWillDisappear: () => {\n              // 当对话框即将消失时，打印日志\n              console.info(\"DatePickerDialog:onWillDisappear()\")\n            }\n          })\n        })\n\n      // 创建一个按钮，点击后显示农历日期选择对话框\n      Button(\"Lunar DatePickerDialog\")\n        .margin(20) // 设置按钮的外边距为20vp\n        .onClick(() => {\n          DatePickerDialog.show({\n            start: new Date(\"2000-1-1\"), // 设置日期选择对话框的起始日期为2000年1月1日\n            end: new Date(\"2100-12-31\"), // 设置日期选择对话框的结束日期为2100年12月31日\n            selected: this.selectedDate, // 设置日期选择对话框的初始选中日期为当前选中的日期\n            lunar: true, // 设置日期选择对话框显示农历日期\n            disappearTextStyle: { color: Color.Pink, font: { size: '22fp', weight: FontWeight.Bold } }, // 设置对话框消失时的文本样式\n            textStyle: { color: '#ff00ff00', font: { size: '18fp', weight: FontWeight.Normal } }, // 设置对话框的默认文本样式\n            selectedTextStyle: { color: '#ff182431', font: { size: '14fp', weight: FontWeight.Regular } }, // 设置选中日期的文本样式\n            onDateAccept: (value: Date) => {\n              // 当用户点击确定按钮时，更新选中的日期并打印日志\n              this.selectedDate = value\n              console.info(\"DatePickerDialog:onDateAccept()\" + value.toString())\n            },\n            onCancel: () => {\n              // 当用户点击取消按钮时，打印日志\n              console.info(\"DatePickerDialog:onCancel()\")\n            },\n            onDateChange: (value: Date) => {\n              // 当用户选择日期时，打印日志\n              console.info(\"DatePickerDialog:onDateChange()\" + value.toString())\n            },\n            onDidAppear: () => {\n              // 当对话框显示时，打印日志\n              console.info(\"DatePickerDialog:onDidAppear()\")\n            },\n            onDidDisappear: () => {\n              // 当对话框消失时，打印日志\n              console.info(\"DatePickerDialog:onDidDisappear()\")\n            },\n            onWillAppear: () => {\n              // 当对话框即将显示时，打印日志\n              console.info(\"DatePickerDialog:onWillAppear()\")\n            },\n            onWillDisappear: () => {\n              // 当对话框即将消失时，打印日志\n              console.info(\"DatePickerDialog:onWillDisappear()\")\n            }\n          })\n        })\n    }.width('100%') // 设置Column的宽度为100%\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "TimePickerDialog": {
        "description": "时间滑动选择器弹窗 (TimePickerDialog) 是一个全局UI方法，用于以24小时的时间区间创建时间滑动选择器，并展示在弹窗上。",
        "details": "该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。本模块功能依赖UI的执行上下文，不可在UI上下文不明确的地方使用，参见UIContext说明。从API version 10开始，可以通过使用UIContext中的showTimePickerDialog来明确UI的执行上下文。",
        "interfaces": [
            {
                "description": "static show(options?: TimePickerDialogOptions)",
                "params": {
                    "options": {
                        "type": "TimePickerDialogOptions",
                        "required": false,
                        "description": "配置时间选择器弹窗的参数。"
                    }
                }
            }
        ],
        "attributes": {
            "useMilitaryTime": {
                "description": "展示时间是否为24小时制，默认为12小时制。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否使用24小时制。",
                        "default": false
                    }
                }
            },
            "disappearTextStyle": {
                "description": "设置所有选项中最上和最下两个选项的文本颜色、字号、字体粗细。",
                "params": {
                    "value": {
                        "type": "PickerTextStyle",
                        "required": false,
                        "description": "文本样式。",
                        "default": {
                            "color": "#ff182431",
                            "font": {
                                "size": "14fp",
                                "weight": "FontWeight.Regular"
                            }
                        }
                    }
                }
            },
            "textStyle": {
                "description": "设置所有选项中除了最上、最下及选中项以外的文本颜色、字号、字体粗细。",
                "params": {
                    "value": {
                        "type": "PickerTextStyle",
                        "required": false,
                        "description": "文本样式。",
                        "default": {
                            "color": "#ff182431",
                            "font": {
                                "size": "16fp",
                                "weight": "FontWeight.Regular"
                            }
                        }
                    }
                }
            },
            "selectedTextStyle": {
                "description": "设置选中项的文本颜色、字号、字体粗细。",
                "params": {
                    "value": {
                        "type": "PickerTextStyle",
                        "required": false,
                        "description": "文本样式。",
                        "default": {
                            "color": "#ff007dff",
                            "font": {
                                "size": "20vp",
                                "weight": "FontWeight.Medium"
                            }
                        }
                    }
                }
            },
            "acceptButtonStyle": {
                "description": "设置确认按钮显示样式、样式和重要程度、角色、背景色、圆角、文本颜色、字号、字体粗细、字体样式、字体列表、按钮是否默认响应Enter键。",
                "params": {
                    "value": {
                        "type": "PickerDialogButtonStyle",
                        "required": false,
                        "description": "按钮样式。"
                    }
                }
            },
            "cancelButtonStyle": {
                "description": "设置取消按钮显示样式、样式和重要程度、角色、背景色、圆角、文本颜色、字号、字体粗细、字体样式、字体列表、按钮是否默认响应Enter键。",
                "params": {
                    "value": {
                        "type": "PickerDialogButtonStyle",
                        "required": false,
                        "description": "按钮样式。"
                    }
                }
            },
            "alignment": {
                "description": "弹窗在竖直方向上的对齐方式。",
                "params": {
                    "value": {
                        "type": "DialogAlignment",
                        "required": false,
                        "description": "对齐方式。",
                        "default": "DialogAlignment.Default"
                    }
                }
            },
            "offset": {
                "description": "弹窗相对alignment所在位置的偏移量。",
                "params": {
                    "value": {
                        "type": "Offset",
                        "required": false,
                        "description": "偏移量。",
                        "default": {
                            "dx": 0,
                            "dy": 0
                        }
                    }
                }
            },
            "maskRect": {
                "description": "弹窗遮蔽层区域，在遮蔽层区域内的事件不透传，在遮蔽层区域外的事件透传。",
                "params": {
                    "value": {
                        "type": "Rectangle",
                        "required": false,
                        "description": "遮蔽层区域。",
                        "default": {
                            "x": 0,
                            "y": 0,
                            "width": "100%",
                            "height": "100%"
                        }
                    }
                }
            },
            "backgroundColor": {
                "description": "弹窗背板颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "required": false,
                        "description": "背景颜色。",
                        "default": "Color.Transparent"
                    }
                }
            },
            "backgroundBlurStyle": {
                "description": "弹窗背板模糊材质。",
                "params": {
                    "value": {
                        "type": "BlurStyle",
                        "required": false,
                        "description": "模糊材质。",
                        "default": "BlurStyle.COMPONENT_ULTRA_THICK"
                    }
                }
            },
            "shadow": {
                "description": "设置弹窗背板的阴影。",
                "params": {
                    "value": {
                        "type": [
                            "ShadowOptions",
                            "ShadowStyle"
                        ],
                        "required": false,
                        "description": "阴影样式。"
                    }
                }
            },
            "dateTimeOptions": {
                "description": "设置时分是否显示前置0，目前只支持设置hour和minute参数。",
                "params": {
                    "value": {
                        "type": "DateTimeOptions",
                        "required": false,
                        "description": "日期时间选项。"
                    }
                }
            }
        },
        "events": {
            "onAccept": {
                "description": "点击弹窗中的“确定”按钮时触发该回调。",
                "params": {
                    "value": {
                        "type": "TimePickerResult",
                        "required": false,
                        "description": "选中时间的结果。"
                    }
                }
            },
            "onCancel": {
                "description": "点击弹窗中的“取消”按钮时触发该回调。",
                "params": {}
            },
            "onChange": {
                "description": "滑动弹窗中的选择器使当前选中时间改变时触发该回调。",
                "params": {
                    "value": {
                        "type": "TimePickerResult",
                        "required": false,
                        "description": "选中时间的结果。"
                    }
                }
            },
            "onDidAppear": {
                "description": "弹窗弹出时的事件回调。",
                "params": {}
            },
            "onDidDisappear": {
                "description": "弹窗消失时的事件回调。",
                "params": {}
            },
            "onWillAppear": {
                "description": "弹窗显示动效前的事件回调。",
                "params": {}
            },
            "onWillDisappear": {
                "description": "弹窗退出动效前的事件回调。",
                "params": {}
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过Column布局实现了一个展示两种时间选择对话框（TimePickerDialog）的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为两个部分，每个部分包含一个按钮。每个按钮以水平布局方式排列，按钮之间的间距为20vp，且对齐方式为居中对齐。\n按钮的样式包括默认的背景颜色、边框圆角（或半径）、宽度和高度等属性。按钮的功能包括点击事件，用户可以通过点击按钮触发相应的时间选择对话框。\n时间选择对话框的样式包括文本颜色、字体大小和字体粗细等属性，支持不同的样式展示。时间选择对话框的功能包括选择时间、确认、取消、时间变化等事件，用户可以通过选择时间并确认来更新选择的时间，或者通过取消来关闭对话框。\n整个布局通过Column布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct TimePickerDialogExample {\n  // 定义一个私有变量selectTime，用于存储当前选择的时间\n  private selectTime: Date = new Date('2020-12-25T08:30:00')\n\n  build() {\n    Column() {\n      // 创建一个按钮，点击后弹出12小时制的时间选择对话框\n      Button(\"TimePickerDialog 12小时制\")\n        .margin(20) // 设置按钮的外边距为20vp\n        .onClick(() => {\n          TimePickerDialog.show({\n            selected: this.selectTime, // 设置初始选择的时间\n            disappearTextStyle: { color: Color.Red, font: { size: 15, weight: FontWeight.Lighter } }, // 设置消失文本的样式\n            textStyle: { color: Color.Black, font: { size: 20, weight: FontWeight.Normal } }, // 设置普通文本的样式\n            selectedTextStyle: { color: Color.Blue, font: { size: 30, weight: FontWeight.Bolder } }, // 设置选中时间的文本样式\n            onAccept: (value: TimePickerResult) => {\n              // 设置selectTime为按下确定按钮时的时间，这样当弹窗再次弹出时显示选中的为上一次确定的时间\n              if (value.hour != undefined && value.minute != undefined) {\n                this.selectTime.setHours(value.hour, value.minute)\n                console.info(\"TimePickerDialog:onAccept()\" + JSON.stringify(value))\n              }\n            },\n            onCancel: () => {\n              console.info(\"TimePickerDialog:onCancel()\")\n            },\n            onChange: (value: TimePickerResult) => {\n              console.info(\"TimePickerDialog:onChange()\" + JSON.stringify(value))\n            },\n            onDidAppear: () => {\n              console.info(\"TimePickerDialog:onDidAppear()\")\n            },\n            onDidDisappear: () => {\n              console.info(\"TimePickerDialog:onDidDisappear()\")\n            },\n            onWillAppear: () => {\n              console.info(\"TimePickerDialog:onWillAppear()\")\n            },\n            onWillDisappear: () => {\n              console.info(\"TimePickerDialog:onWillDisappear()\")\n            }\n          })\n        })\n      // 创建一个按钮，点击后弹出24小时制的时间选择对话框\n      Button(\"TimePickerDialog 24小时制\")\n        .margin(20) // 设置按钮的外边距为20vp\n        .onClick(() => {\n          TimePickerDialog.show({\n            selected: this.selectTime, // 设置初始选择的时间\n            useMilitaryTime: true, // 设置为24小时制\n            disappearTextStyle: { color: Color.Red, font: { size: 15, weight: FontWeight.Lighter } }, // 设置消失文本的样式\n            textStyle: { color: Color.Black, font: { size: 20, weight: FontWeight.Normal } }, // 设置普通文本的样式\n            selectedTextStyle: { color: Color.Blue, font: { size: 30, weight: FontWeight.Bolder } }, // 设置选中时间的文本样式\n            onAccept: (value: TimePickerResult) => {\n              if (value.hour != undefined && value.minute != undefined) {\n                this.selectTime.setHours(value.hour, value.minute)\n                console.info(\"TimePickerDialog:onAccept()\" + JSON.stringify(value))\n              }\n            },\n            onCancel: () => {\n              console.info(\"TimePickerDialog:onCancel()\")\n            },\n            onChange: (value: TimePickerResult) => {\n              console.info(\"TimePickerDialog:onChange()\" + JSON.stringify(value))\n            },\n            onDidAppear: () => {\n              console.info(\"TimePickerDialog:onDidAppear()\")\n            },\n            onDidDisappear: () => {\n              console.info(\"TimePickerDialog:onDidDisappear()\")\n            },\n            onWillAppear: () => {\n              console.info(\"TimePickerDialog:onWillAppear()\")\n            },\n            onWillDisappear: () => {\n              console.info(\"TimePickerDialog:onWillDisappear()\")\n            }\n          })\n        })\n    }.width('100%') // 设置Column的宽度为100%\n  }\n}"
            },
            {
                "description": "该组件展示了一个按钮，点击按钮后会弹出一个时间选择对话框（TimePickerDialog）。布局宽度占据整个屏幕，按钮位于屏幕中央，按钮的文本为“TimePickerDialog 24小时制”。按钮的样式包括外边距为20vp，点击按钮后会触发一个事件，弹出时间选择对话框。\n\n时间选择对话框支持24小时制，并且可以自定义对话框中各个元素的样式，包括文本颜色、字体大小、字体粗细等。对话框中的按钮（确认和取消）也可以自定义样式，包括按钮类型、样式模式、角色、字体颜色、字体大小、字体粗细、字体样式、字体家族、背景颜色和边框圆角等。\n\n对话框还支持多个生命周期事件，如对话框显示前、显示后、消失前、消失后等，这些事件可以通过回调函数进行处理。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct TimePickerDialogExample {\n  // 定义一个私有变量selectTime，初始值为2020年12月25日8:30:00\n  private selectTime: Date = new Date('2020-12-25T08:30:00')\n\n  build() {\n    Column() {\n      // 创建一个按钮，按钮文本为“TimePickerDialog 24小时制”，外边距为20vp\n      Button(\"TimePickerDialog 24小时制\")\n        .margin(20)\n        .onClick(() => {\n          // 点击按钮后显示时间选择对话框\n          TimePickerDialog.show({\n            // 设置对话框的初始选中时间为selectTime\n            selected: this.selectTime,\n            // 设置对话框使用24小时制\n            useMilitaryTime: true,\n            // 设置对话框消失时的文本样式，颜色为红色，字体大小为15，字体粗细为较细\n            disappearTextStyle: { color: Color.Red, font: { size: 15, weight: FontWeight.Lighter } },\n            // 设置对话框中普通文本的样式，颜色为黑色，字体大小为20，字体粗细为正常\n            textStyle: { color: Color.Black, font: { size: 20, weight: FontWeight.Normal } },\n            // 设置对话框中选中时间的文本样式，颜色为蓝色，字体大小为30，字体粗细为加粗\n            selectedTextStyle: { color: Color.Blue, font: { size: 30, weight: FontWeight.Bolder } },\n            // 设置对话框中确认按钮的样式，按钮类型为普通，样式模式为正常，角色为普通，字体颜色为红色，字体大小为26fp，字体粗细为加粗，字体样式为正常，字体家族为sans-serif，背景颜色为半透明红色，边框圆角为20\n            acceptButtonStyle: { type: ButtonType.Normal, style: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL, fontColor: Color.Red,\n              fontSize: '26fp', fontWeight: FontWeight.Bolder, fontStyle: FontStyle.Normal, fontFamily: 'sans-serif', backgroundColor:'#80834511',\n              borderRadius: 20 },\n            // 设置对话框中取消按钮的样式，按钮类型为普通，样式模式为正常，角色为普通，字体颜色为蓝色，字体大小为16fp，字体粗细为正常，字体样式为斜体，字体家族为sans-serif，背景颜色为半透明蓝色，边框圆角为10\n            cancelButtonStyle: { type: ButtonType.Normal, style: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL, fontColor: Color.Blue,\n              fontSize: '16fp', fontWeight: FontWeight.Normal, fontStyle: FontStyle.Italic, fontFamily: 'sans-serif', backgroundColor:'#50182431',\n              borderRadius: 10 },\n            // 当用户点击确认按钮时，更新selectTime的值，并在控制台输出选中时间\n            onAccept: (value: TimePickerResult) => {\n              if (value.hour != undefined && value.minute != undefined) {\n                this.selectTime.setHours(value.hour, value.minute)\n                console.info(\"TimePickerDialog:onAccept()\" + JSON.stringify(value))\n              }\n            },\n            // 当用户点击取消按钮时，在控制台输出取消信息\n            onCancel: () => {\n              console.info(\"TimePickerDialog:onCancel()\")\n            },\n            // 当用户选择时间时，在控制台输出当前选中时间\n            onChange: (value: TimePickerResult) => {\n              console.info(\"TimePickerDialog:onChange()\" + JSON.stringify(value))\n            },\n            // 当对话框显示时，在控制台输出显示信息\n            onDidAppear: () => {\n              console.info(\"TimePickerDialog:onDidAppear()\")\n            },\n            // 当对话框消失时，在控制台输出消失信息\n            onDidDisappear: () => {\n              console.info(\"TimePickerDialog:onDidDisappear()\")\n            },\n            // 当对话框即将显示时，在控制台输出即将显示信息\n            onWillAppear: () => {\n              console.info(\"TimePickerDialog:onWillAppear()\")\n            },\n            // 当对话框即将消失时，在控制台输出即将消失信息\n            onWillDisappear: () => {\n              console.info(\"TimePickerDialog:onWillDisappear()\")\n            }\n          })\n        })\n    }.width('100%')\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "TextPickerDialog": {
        "description": "文本滑动选择器弹窗 (TextPickerDialog) 是一个全局UI方法，用于在弹窗上展示文本选择器。",
        "details": "该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。本模块功能依赖UI的执行上下文，不可在UI上下文不明确的地方使用，参见UIContext说明。从API version 10开始，可以通过使用UIContext中的showTextPickerDialog来明确UI的执行上下文。",
        "interfaces": [
            {
                "description": "static show(options?: TextPickerDialogOptions)",
                "params": {
                    "options": {
                        "type": "TextPickerDialogOptions",
                        "required": false,
                        "description": "配置文本选择器弹窗的参数。"
                    }
                }
            }
        ],
        "attributes": {
            "TextPickerDialogOptions": {
                "description": "文本选择器弹窗的参数继承自TextPickerOptions。",
                "params": {
                    "defaultPickerItemHeight": {
                        "type": [
                            "number",
                            "string"
                        ],
                        "required": false,
                        "description": "设置选择器中选项的高度。",
                        "default": "选中项56vp，非选中项36vp。设置该参数后，选中项与非选中项的高度均为所设置的值。"
                    },
                    "disappearTextStyle10+": {
                        "type": "PickerTextStyle",
                        "required": false,
                        "description": "设置所有选项中最上和最下两个选项的文本颜色、字号、字体粗细。"
                    },
                    "textStyle10+": {
                        "type": "PickerTextStyle",
                        "required": false,
                        "description": "设置所有选项中除了最上、最下及选中项以外的文本颜色、字号、字体粗细。"
                    },
                    "selectedTextStyle10+": {
                        "type": "PickerTextStyle",
                        "required": false,
                        "description": "设置选中项的文本颜色、字号、字体粗细。"
                    },
                    "acceptButtonStyle12+": {
                        "type": "PickerDialogButtonStyle",
                        "required": false,
                        "description": "设置确认按钮显示样式、样式和重要程度、角色、背景色、圆角、文本颜色、字号、字体粗细、字体样式、字体列表、按钮是否默认响应Enter键。"
                    },
                    "cancelButtonStyle12+": {
                        "type": "PickerDialogButtonStyle",
                        "required": false,
                        "description": "设置取消按钮显示样式、样式和重要程度、角色、背景色、圆角、文本颜色、字号、字体粗细、字体样式、字体列表、按钮是否默认响应Enter键。"
                    },
                    "canLoop10+": {
                        "type": "boolean",
                        "required": false,
                        "description": "设置是否可循环滚动。",
                        "default": true
                    },
                    "alignment10+": {
                        "type": "DialogAlignment",
                        "required": false,
                        "description": "弹窗在竖直方向上的对齐方式。"
                    },
                    "offset10+": {
                        "type": "Offset",
                        "required": false,
                        "description": "弹窗相对alignment所在位置的偏移量。"
                    },
                    "maskRect10+": {
                        "type": "Rectangle",
                        "required": false,
                        "description": "弹窗遮蔽层区域，在遮蔽层区域内的事件不透传，在遮蔽层区域外的事件透传。"
                    },
                    "onAccept": {
                        "type": "function",
                        "required": false,
                        "description": "点击弹窗中的“确定”按钮时触发该回调。"
                    },
                    "onCancel": {
                        "type": "function",
                        "required": false,
                        "description": "点击弹窗中的“取消”按钮时触发该回调。"
                    },
                    "onChange": {
                        "type": "function",
                        "required": false,
                        "description": "滑动弹窗中的选择器使当前选中项改变时触发该回调。"
                    },
                    "backgroundColor11+": {
                        "type": "ResourceColor",
                        "required": false,
                        "description": "弹窗背板颜色。"
                    },
                    "backgroundBlurStyle11+": {
                        "type": "BlurStyle",
                        "required": false,
                        "description": "弹窗背板模糊材质。"
                    },
                    "onDidAppear12+": {
                        "type": "function",
                        "required": false,
                        "description": "弹窗弹出时的事件回调。"
                    },
                    "onDidDisappear12+": {
                        "type": "function",
                        "required": false,
                        "description": "弹窗消失时的事件回调。"
                    },
                    "onWillAppear12+": {
                        "type": "function",
                        "required": false,
                        "description": "弹窗显示动效前的事件回调。"
                    },
                    "onWillDisappear12+": {
                        "type": "function",
                        "required": false,
                        "description": "弹窗退出动效前的事件回调。"
                    },
                    "shadow12+": {
                        "type": [
                            "ShadowOptions",
                            "ShadowStyle"
                        ],
                        "required": false,
                        "description": "设置弹窗背板的阴影。"
                    }
                }
            }
        },
        "events": {
            "onAccept": {
                "description": "点击弹窗中的“确定”按钮时触发该回调。",
                "params": {
                    "value": {
                        "type": "TextPickerResult",
                        "required": true,
                        "description": "选中项的文本内容和索引值。"
                    }
                }
            },
            "onCancel": {
                "description": "点击弹窗中的“取消”按钮时触发该回调。",
                "params": {}
            },
            "onChange": {
                "description": "滑动弹窗中的选择器使当前选中项改变时触发该回调。",
                "params": {
                    "value": {
                        "type": "TextPickerResult",
                        "required": true,
                        "description": "选中项的文本内容和索引值。"
                    }
                }
            },
            "onDidAppear12+": {
                "description": "弹窗弹出时的事件回调。",
                "params": {}
            },
            "onDidDisappear12+": {
                "description": "弹窗消失时的事件回调。",
                "params": {}
            },
            "onWillAppear12+": {
                "description": "弹窗显示动效前的事件回调。",
                "params": {}
            },
            "onWillDisappear12+": {
                "description": "弹窗退出动效前的事件回调。",
                "params": {}
            }
        },
        "rules": [
            "该组件从API Version 8开始支持。",
            "本模块功能依赖UI的执行上下文，不可在UI上下文不明确的地方使用。",
            "从API version 10开始，可以通过使用UIContext中的showTextPickerDialog来明确UI的执行上下文。"
        ],
        "examples": [
            {
                "description": "该组件展示了一个带有自定义样式的按钮，点击按钮后会弹出一个文本选择对话框（TextPickerDialog）。布局宽度占据整个屏幕，高度设为 100%，内边距为 20vp。组件的垂直方向上被分为一个按钮，按钮的文本内容为“TextPickerDialog:”加上当前选中的文本值。按钮的点击事件会触发文本选择对话框的显示，对话框中包含一个文本选择器，用户可以通过滚动选择不同的文本项。\n\n按钮的样式包括边距、点击事件等属性。文本选择对话框的样式包括文本颜色、字体大小、字体粗细等属性，支持自定义背景颜色、边框圆角等样式。对话框的功能包括点击确定按钮和取消按钮的事件处理，用户可以通过点击确定按钮选择文本项，并通过点击取消按钮关闭对话框。\n\n整个布局通过 Row 和 Column 组件实现，确保按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct TextPickerDialogExample {\n  // 定义一个私有变量 select，用于存储当前选中的索引或索引数组\n  private select: number | number[] = 0\n  // 定义一个私有数组 fruits，用于存储文本选择器的选项\n  private fruits: string[] = ['apple1', 'orange2', 'peach3', 'grape4', 'banana5']\n  // 定义一个状态变量 v，用于存储当前选中的文本值\n  @State v: string = '';\n\n  build() {\n    Row() {\n      Column() {\n        // 创建一个按钮，按钮的文本内容为“TextPickerDialog:”加上当前选中的文本值\n        Button(\"TextPickerDialog:\" + this.v)\n          .margin(20) // 设置按钮的边距为 20vp\n          .onClick(() => {\n            // 点击按钮时显示文本选择对话框\n            TextPickerDialog.show({\n              range: this.fruits, // 设置文本选择器的选项范围\n              selected: this.select, // 设置当前选中的索引\n              disappearTextStyle: {color: Color.Red, font: {size: 15, weight: FontWeight.Lighter}}, // 设置对话框消失时的文本样式\n              textStyle: {color: Color.Black, font: {size: 20, weight: FontWeight.Normal}}, // 设置对话框中文本的默认样式\n              selectedTextStyle: {color: Color.Blue, font: {size: 30, weight: FontWeight.Bolder}}, // 设置选中项的文本样式\n              acceptButtonStyle: { type: ButtonType.Normal, style: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL, fontColor: Color.Red, // 设置确定按钮的样式\n                fontSize: '26fp', fontWeight: FontWeight.Bolder, fontStyle: FontStyle.Normal, fontFamily: 'sans-serif', backgroundColor:'#80834511',\n                borderRadius: 20 },\n              cancelButtonStyle: { type: ButtonType.Normal, style: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL, fontColor: Color.Blue, // 设置取消按钮的样式\n                fontSize: '16fp', fontWeight: FontWeight.Normal, fontStyle: FontStyle.Italic, fontFamily: 'sans-serif', backgroundColor:'#50182431',\n                borderRadius: 10 },\n              onAccept: (value: TextPickerResult) => {\n                // 设置 select 为按下确定按钮时候的选中项 index，这样当弹窗再次弹出时显示选中的是上一次确定的选项\n                this.select = value.index\n                console.log(this.select + '')\n                // 点击确定后，被选到的文本数据展示到页面\n                this.v = value.value as string\n                console.info(\"TextPickerDialog:onAccept()\" + JSON.stringify(value))\n              },\n              onCancel: () => {\n                console.info(\"TextPickerDialog:onCancel()\")\n              },\n              onChange: (value: TextPickerResult) => {\n                console.info(\"TextPickerDialog:onChange()\" + JSON.stringify(value))\n              },\n              onDidAppear: () => {\n                console.info(\"TextPickerDialog:onDidAppear()\")\n              },\n              onDidDisappear: () => {\n                console.info(\"TextPickerDialog:onDidDisappear()\")\n              },\n              onWillAppear: () => {\n                console.info(\"TextPickerDialog:onWillAppear()\")\n              },\n              onWillDisappear: () => {\n                console.info(\"TextPickerDialog:onWillDisappear()\")\n              }\n            })\n          })\n      }.width('100%') // 设置 Column 的宽度为 100%\n    }.height('100%') // 设置 Row 的高度为 100%\n  }\n}"
            },
            {
                "description": "该组件展示了一个带有文本选择器对话框（TextPickerDialog）的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上包含一个按钮，按钮的文本显示当前选中的水果名称。按钮的点击事件会触发文本选择器对话框的显示。\n\n按钮的样式包括边距为 20vp，宽度占据父容器的 100%。按钮的文本颜色和字体大小未明确设置，使用默认值。按钮的功能包括点击事件，点击后会弹出文本选择器对话框。\n\n文本选择器对话框的样式包括：\n- 范围（range）：显示的水果名称数组。\n- 选中项（selected）：初始选中的水果索引。\n- 消失文本样式（disappearTextStyle）：对话框消失时文本的颜色为红色，字体大小为 15，字体粗细为较轻。\n- 文本样式（textStyle）：对话框中文本的颜色为黑色，字体大小为 20，字体粗细为正常。\n- 选中文本样式（selectedTextStyle）：选中项文本的颜色为蓝色，字体大小为 30，字体粗细为较粗。\n\n对话框的功能包括：\n- 点击确定按钮（onAccept）：设置选中项索引，并将选中的水果名称显示在按钮文本中。\n- 点击取消按钮（onCancel）：仅记录日志。\n- 选中项变化（onChange）：记录日志。\n- 对话框显示（onDidAppear）：记录日志。\n- 对话框消失（onDidDisappear）：记录日志。\n- 对话框即将显示（onWillAppear）：记录日志。\n- 对话框即将消失（onWillDisappear）：记录日志。\n\n整个布局通过 Row 和 Column 组件实现，确保按钮在垂直方向上居中对齐。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct TextPickerDialogExample {\n  // 选中的水果索引，初始值为 0\n  private select: number | number[] = 0\n  // 水果名称数组\n  private fruits: string[] = ['apple1', 'orange2', 'peach3', 'grape4', 'banana5']\n  // 当前选中的水果名称，初始值为空字符串\n  @State v: string = '';\n\n  build() {\n    Row() {\n      Column() {\n        // 按钮，显示当前选中的水果名称\n        Button(\"TextPickerDialog:\" + this.v)\n          .margin(20) // 按钮边距为 20vp\n          .onClick(() => {\n            // 点击按钮时显示文本选择器对话框\n            TextPickerDialog.show({\n              range: this.fruits, // 对话框中显示的水果名称数组\n              selected: this.select, // 初始选中的水果索引\n              disappearTextStyle: {color: Color.Red, font: {size: 15, weight: FontWeight.Lighter}}, // 对话框消失时文本样式\n              textStyle: {color: Color.Black, font: {size: 20, weight: FontWeight.Normal}}, // 对话框中文本样式\n              selectedTextStyle: {color: Color.Blue, font: {size: 30, weight: FontWeight.Bolder}}, // 选中项文本样式\n              onAccept: (value: TextPickerResult) => {\n                // 点击确定按钮时，设置选中项索引，并将选中的水果名称显示在按钮文本中\n                this.select = value.index\n                console.log(this.select + '')\n                this.v = value.value as string\n                console.info(\"TextPickerDialog:onAccept()\" + JSON.stringify(value))\n              },\n              onCancel: () => {\n                // 点击取消按钮时，记录日志\n                console.info(\"TextPickerDialog:onCancel()\")\n              },\n              onChange: (value: TextPickerResult) => {\n                // 选中项变化时，记录日志\n                console.info(\"TextPickerDialog:onChange()\" + JSON.stringify(value))\n              },\n              onDidAppear: () => {\n                // 对话框显示时，记录日志\n                console.info(\"TextPickerDialog:onDidAppear()\")\n              },\n              onDidDisappear: () => {\n                // 对话框消失时，记录日志\n                console.info(\"TextPickerDialog:onDidDisappear()\")\n              },\n              onWillAppear: () => {\n                // 对话框即将显示时，记录日志\n                console.info(\"TextPickerDialog:onWillAppear()\")\n              },\n              onWillDisappear: () => {\n                // 对话框即将消失时，记录日志\n                console.info(\"TextPickerDialog:onWillDisappear()\")\n              }\n            })\n          })\n      }.width('100%') // 按钮宽度占据父容器的 100%\n    }.height('100%') // 布局高度占据整个屏幕\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "Dialog": {
        "description": "弹出框是一种模态窗口，通常用于在保持当前的上下文环境时，临时展示用户需关注的信息或待处理的操作，用户在模态弹出框内完成上述交互任务。模态弹出框需要用户进行交互才能够退出模态模式。",
        "details": null,
        "interfaces": [
            {
                "description": "TipsDialog({controller: CustomDialogController, imageRes: Resource, imageSize?: SizeOptions, title?: ResourceStr, content?: ResourceStr, checkTips?: ResourceStr, ischecked?: boolean, checkAction?: (isChecked: boolean) => void, primaryButton?: ButtonOptions, secondaryButton?: ButtonOptions})",
                "params": {
                    "controller": {
                        "type": "CustomDialogController",
                        "required": true,
                        "description": "提示弹出框控制器。"
                    },
                    "imageRes": {
                        "type": [
                            "ResourceStr",
                            "PixelMap"
                        ],
                        "required": true,
                        "description": "展示的图片。"
                    },
                    "imageSize": {
                        "type": "SizeOptions",
                        "required": false,
                        "description": "自定义图片尺寸。",
                        "default": "64*64vp"
                    },
                    "title": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "提示弹出框标题。"
                    },
                    "content": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "提示弹出框内容。"
                    },
                    "checkTips": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "checkbox的提示内容。"
                    },
                    "isChecked": {
                        "type": "boolean",
                        "required": false,
                        "description": "value为true时，表示checkbox已选中，value为false时，表示未选中。",
                        "default": false
                    },
                    "checkAction": {
                        "type": "(isChecked: boolean) => void",
                        "required": false,
                        "description": "现推荐使用 onCheckedChange12+。"
                    },
                    "primaryButton": {
                        "type": "ButtonOptions",
                        "required": false,
                        "description": "提示框左侧按钮。"
                    },
                    "secondaryButton": {
                        "type": "ButtonOptions",
                        "required": false,
                        "description": "提示框右侧按钮。"
                    }
                }
            },
            {
                "description": "SelectDialog({controller: CustomDialogController, title: ResourceStr, content?: ResourceStr, selectedIndex?: number, confirm?: ButtonOptions, radioContent: Array<SheetInfo>})",
                "params": {
                    "controller": {
                        "type": "CustomDialogController",
                        "required": true,
                        "description": "选择弹出框控制器。"
                    },
                    "title": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "选择弹出框标题。"
                    },
                    "content": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "选择弹出框内容。"
                    },
                    "selectedIndex": {
                        "type": "number",
                        "required": false,
                        "description": "选择弹出框的选中项。",
                        "default": -1
                    },
                    "confirm": {
                        "type": "ButtonOptions",
                        "required": false,
                        "description": "选择弹出框底部按钮。"
                    },
                    "radioContent": {
                        "type": "Array<SheetInfo>",
                        "required": true,
                        "description": "选择弹出框的子项内容列表，每个选择项支持设置文本和选中的回调事件。"
                    }
                }
            },
            {
                "description": "ConfirmDialog({controller: CustomDialogController, title: ResourceStr, content?: ResourceStr, checkTips?: ResourceStr, ischecked?: boolean, primaryButton?: ButtonOptions, secondaryButton?: ButtonOptions})",
                "params": {
                    "controller": {
                        "type": "CustomDialogController",
                        "required": true,
                        "description": "确认弹出框控制器。"
                    },
                    "title": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "确认弹出框标题。"
                    },
                    "content": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "确认弹出框内容。"
                    },
                    "checkTips": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "checkbox的提示内容。"
                    },
                    "isChecked": {
                        "type": "boolean",
                        "required": false,
                        "description": "value为true时，表示checkbox已选中，value为false时，表示未选中。",
                        "default": false
                    },
                    "primaryButton": {
                        "type": "ButtonOptions",
                        "required": false,
                        "description": "确认框左侧按钮。"
                    },
                    "secondaryButton": {
                        "type": "ButtonOptions",
                        "required": false,
                        "description": "确认框右侧按钮。"
                    }
                }
            },
            {
                "description": "AlertDialog({controller: CustomDialogController, primaryTitle?: ResourceStr, secondaryTitle?: ResourceStr, content: ResourceStr, primaryButton?: ButtonOptions, secondaryButton?: ButtonOptions})",
                "params": {
                    "controller": {
                        "type": "CustomDialogController",
                        "required": true,
                        "description": "确认弹出框控制器。"
                    },
                    "primaryTitle": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "确认框一级标题。"
                    },
                    "secondaryTitle": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "确认框二级标题。"
                    },
                    "content": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "确认弹出框内容。"
                    },
                    "primaryButton": {
                        "type": "ButtonOptions",
                        "required": false,
                        "description": "确认框左侧按钮。"
                    },
                    "secondaryButton": {
                        "type": "ButtonOptions",
                        "required": false,
                        "description": "确认框右侧按钮。"
                    }
                }
            },
            {
                "description": "LoadingDialog({controller: CustomDialogController, content?: ResourceStr})",
                "params": {
                    "controller": {
                        "type": "CustomDialogController",
                        "required": true,
                        "description": "加载弹出框控制器。"
                    },
                    "content": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "加载弹出框内容。"
                    }
                }
            },
            {
                "description": "CustomContentDialog({controller: CustomDialogController, contentBuilder: () => void, primaryTitle?: ResourceStr, secondaryTitle?: ResourceStr, contentAreaPadding?: Padding, buttons?: ButtonOptions[]})",
                "params": {
                    "controller": {
                        "type": "CustomDialogController",
                        "required": true,
                        "description": "自定义内容区弹出框控制器。"
                    },
                    "contentBuilder": {
                        "type": "() => void",
                        "required": true,
                        "description": "自定义内容区构建函数。"
                    },
                    "primaryTitle": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "自定义内容区弹出框一级标题。"
                    },
                    "secondaryTitle": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "自定义内容区弹出框二级标题。"
                    },
                    "contentAreaPadding": {
                        "type": "Padding",
                        "required": false,
                        "description": "自定义内容区填充。"
                    },
                    "buttons": {
                        "type": "ButtonOptions[]",
                        "required": false,
                        "description": "自定义内容区按钮。"
                    }
                }
            }
        ],
        "attributes": {},
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件实现了一个带有进度条的弹出框，通过点击按钮触发弹出框的显示。布局宽度占据整个屏幕，高度设为 100%，背景图像尺寸为全屏。组件的垂直方向上包含一个按钮，按钮位于屏幕底部，点击按钮后会弹出一个带有进度条的对话框。\n按钮的样式包括宽度为 96vp，高度为 40vp，点击事件触发对话框的显示。对话框的内容为一段文本，文本内容为“文本文本文本文本文本...”。\n整个布局通过 Stack 和 Column 组件实现，确保按钮在垂直方向上位于底部，且按钮与屏幕底部有 300vp 的间距。",
                "code": "import { LoadingDialog } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct Index {\n  // 创建一个自定义对话框控制器，用于控制进度条弹出框的显示与隐藏\n  dialogControllerProgress: CustomDialogController = new CustomDialogController({\n    builder: LoadingDialog({\n      content: '文本文本文本文本文本...', // 对话框中显示的文本内容\n    }),\n  })\n\n  build() {\n    Row() {\n      Stack() {\n        Column() {\n          Button(\"进度条弹出框\") // 创建一个按钮，按钮文本为“进度条弹出框”\n            .width(96) // 设置按钮宽度为 96vp\n            .height(40) // 设置按钮高度为 40vp\n            .onClick(() => { // 设置按钮点击事件\n              this.dialogControllerProgress.open() // 点击按钮后打开进度条弹出框\n            })\n        }.margin({ bottom: 300 }) // 设置按钮与屏幕底部的间距为 300vp\n      }.align(Alignment.Bottom) // 设置 Stack 组件的对齐方式为底部对齐\n      .width('100%').height('100%') // 设置 Stack 组件的宽度和高度为 100%\n    }\n    .backgroundImageSize({ width: '100%', height: '100%' }) // 设置背景图像尺寸为全屏\n    .height('100%') // 设置 Row 组件的高度为 100%\n  }\n}"
            },
            {
                "description": "该组件实现了一个弹出纯文本弹出框的功能。布局宽度占据整个屏幕，高度设为 100%，内边距为底部 300vp。组件的垂直方向上被分为一个按钮区域，按钮区域通过 Stack 组件进行布局，对齐方式为底部对齐。\n按钮的样式包括宽度为 96vp，高度为 40vp，按钮的背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮的功能包括点击事件，用户可以通过点击按钮触发弹出框的显示。\n弹出框的内容包括一级标题、二级标题和文本内容，以及两个按钮（取消和确认）。确认按钮的样式为错误按钮样式，点击确认按钮会触发相应的回调函数。\n整个布局通过 Row 和 Stack 布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { AlertDialog } from '@kit.ArkUI' // 导入 AlertDialog 组件\n\n@Entry\n@Component\nstruct Index {\n  dialogControllerConfirm: CustomDialogController = new CustomDialogController({\n    builder: AlertDialog({\n      primaryTitle: '弹框一级标题', // 弹出框的一级标题\n      secondaryTitle: '弹框二级标题', // 弹出框的二级标题\n      content: '文本文本文本文本文本', // 弹出框的文本内容\n      primaryButton: {\n        value: '取消', // 取消按钮的文本\n        action: () => {\n          // 取消按钮的点击事件回调函数\n        },\n      },\n      secondaryButton: {\n        value: '确认', // 确认按钮的文本\n        role: ButtonRole.ERROR, // 确认按钮的样式为错误按钮样式\n        action: () => {\n          console.info('Callback when the second button is clicked') // 确认按钮的点击事件回调函数\n        }\n      },\n    }),\n  })\n\n  build() {\n    Row() {\n      Stack() {\n        Column() {\n          Button(\"纯文本弹出框\") // 创建一个按钮，文本为“纯文本弹出框”\n            .width(96) // 按钮的宽度为 96vp\n            .height(40) // 按钮的高度为 40vp\n            .onClick(() => {\n              this.dialogControllerConfirm.open() // 点击按钮时打开弹出框\n            })\n        }.margin({ bottom: 300 }) // 按钮区域的底部边距为 300vp\n      }.align(Alignment.Bottom) // 按钮区域对齐方式为底部对齐\n      .width('100%').height('100%') // 按钮区域的宽度为 100%，高度为 100%\n    }\n    .backgroundImageSize({ width: '100%', height: '100%' }) // 背景图片的尺寸为 100% 宽度，100% 高度\n    .height('100%') // 整个布局的高度为 100%\n  }\n}"
            },
            {
                "description": "该组件实现了一个支持自定义内容的弹出框。布局宽度占据整个屏幕，高度设为 100%，内边距为 0。组件的垂直方向上被分为两个部分：一个按钮和一个弹出框。按钮位于屏幕中央，点击按钮后会弹出自定义内容的弹出框。\n弹出框的样式包括标题、辅助文本、内容区和按钮组。标题和辅助文本位于弹出框的顶部，内容区位于中间，按钮组位于底部。按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过 Flex 组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过 Flex 布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "import { CustomContentDialog } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct Index {\n  // 创建一个 CustomDialogController 实例，用于控制弹出框的显示和隐藏\n  dialogController: CustomDialogController = new CustomDialogController({\n    builder: CustomContentDialog({\n      // 设置弹出框的主标题\n      primaryTitle: '标题',\n      // 设置弹出框的辅助文本\n      secondaryTitle: '辅助文本',\n      // 设置弹出框的内容区，使用 buildContent 方法构建内容\n      contentBuilder: () => {\n        this.buildContent();\n      },\n      // 设置弹出框的按钮组，包含两个按钮\n      buttons: [\n        { \n          value: '按钮1', \n          buttonStyle: ButtonStyleMode.TEXTUAL, \n          action: () => {\n            // 按钮1点击后的回调函数\n            console.info('Callback when the button is clicked')\n          } \n        }, \n        { \n          value: '按钮2', \n          buttonStyle: ButtonStyleMode.TEXTUAL, \n          role: ButtonRole.ERROR \n        }\n      ],\n    }),\n  });\n\n  build() {\n    Column() {\n      // 创建一个按钮，点击后打开弹出框\n      Button(\"支持自定义内容弹出框\")\n        .onClick(() => {\n          // 调用 dialogController 的 open 方法打开弹出框\n          this.dialogController.open()\n        })\n    }\n    .width('100%') // 设置布局宽度为 100%\n    .height('100%') // 设置布局高度为 100%\n    .justifyContent(FlexAlign.Center) // 设置布局内容居中对齐\n  }\n\n  @Builder\n  buildContent(): void {\n    Column() {\n      // 创建一个文本组件，显示在弹出框的内容区\n      Text('内容区')\n    }\n  }\n}"
            },
            {
                "description": "该组件实现了一个自定义主题风格的弹框功能。布局上，组件使用了一个 Row 容器来包裹整个界面，内部嵌套了一个 Stack 容器，用于实现按钮的定位。按钮位于 Stack 容器的底部，通过设置 margin 属性使其与底部保持一定距离。按钮的宽度为 96vp，高度为 40vp，点击按钮时会触发弹框的显示。\n\n样式上，按钮的背景颜色、字体颜色等通过 CustomTheme 和 CustomColors 接口进行自定义。弹框的内容为文本，主题风格由 CustomTheme 实例决定。整个布局的背景通过 backgroundImageSize 属性设置为全屏显示。\n\n功能上，组件通过 CustomDialogController 控制弹框的显示与隐藏。点击按钮时，调用 dialogController.open() 方法显示弹框。弹框的内容和主题风格在创建 CustomDialogController 实例时通过 builder 属性进行配置。",
                "code": "import { CustomColors, CustomTheme, LoadingDialog } from '@kit.ArkUI'; // 导入自定义颜色、主题和加载弹框组件\n\n// 定义一个实现 CustomTheme 接口的类，用于自定义主题\nclass CustomThemeImpl implements CustomTheme {\n  colors?: CustomColors; // 可选的 CustomColors 实例，用于定义主题颜色\n\n  constructor(colors: CustomColors) {\n    this.colors = colors; // 初始化主题颜色\n  }\n}\n\n// 定义一个实现 CustomColors 接口的类，用于自定义颜色\nclass CustomThemeColors implements CustomColors {\n  fontPrimary = '#ffd0a300'; // 主字体颜色\n  iconSecondary = '#ffd000cd'; // 次要图标颜色\n}\n\n@Entry // 标记为入口组件\n@Component // 标记为组件\nstruct Index {\n  @State customTheme: CustomTheme = new CustomThemeImpl(new CustomThemeColors()); // 定义一个状态变量，用于存储自定义主题\n  dialogController: CustomDialogController = new CustomDialogController({\n    builder: LoadingDialog({\n      content: 'text', // 弹框内容为文本\n      theme: this.customTheme, // 使用自定义主题\n    })\n  }); // 创建一个 CustomDialogController 实例，用于控制弹框的显示与隐藏\n\n  build() {\n    Row() { // 创建一个 Row 容器\n      Stack() { // 创建一个 Stack 容器\n        Column() { // 创建一个 Column 容器\n          Button('dialog') // 创建一个按钮，文本为 'dialog'\n            .width(96) // 设置按钮宽度为 96vp\n            .height(40) // 设置按钮高度为 40vp\n            .onClick(() => { // 设置按钮点击事件\n              this.dialogController.open(); // 点击按钮时显示弹框\n            })\n        }.margin({ bottom: 300 }) // 设置 Column 容器的底部外边距为 300vp\n      }.align(Alignment.Bottom) // 设置 Stack 容器的对齐方式为底部对齐\n      .width('100%').height('100%') // 设置 Stack 容器的宽度和高度为 100%\n    }\n    .backgroundImageSize({ width: '100%', height: '100%' }) // 设置 Row 容器的背景图片尺寸为全屏\n    .height('100%') // 设置 Row 容器的高度为 100%\n  }\n}"
            },
            {
                "description": "该组件实现了一个带有文本和勾选框的弹出对话框。布局宽度占据整个屏幕，高度设为 100%，内边距为底部 300vp。组件的垂直方向上包含一个按钮，按钮位于屏幕底部，点击按钮后弹出对话框。\n对话框的标题为“文本标题”，内容为一段较长的文本，底部有两个按钮，分别为“禁止”和“允许”。对话框底部有一个勾选框，勾选框的提示文本为“禁止后不再提示”。\n按钮的样式包括宽度为 96vp，高度为 40vp，点击按钮后触发对话框的显示。对话框的布局对齐方式为底部对齐，自动取消属性为 true，表示点击对话框外部区域时对话框会自动关闭。\n对话框的功能包括点击按钮触发相应操作，勾选框的状态变化会触发回调函数，对话框的显示和隐藏通过 CustomDialogController 控制。",
                "code": "import { ConfirmDialog } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct Index {\n  // 定义一个布尔变量，用于控制勾选框的状态\n  isChecked = false;\n\n  // 创建一个 CustomDialogController 实例，用于控制对话框的显示和隐藏\n  dialogControllerCheckBox: CustomDialogController = new CustomDialogController({\n    // 对话框的内容构建器，使用 ConfirmDialog 组件\n    builder: ConfirmDialog({\n      // 对话框的标题\n      title: '文本标题',\n      // 对话框的内容，一段较长的文本\n      content: '文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本',\n      // 勾选框的初始状态，与 isChecked 变量绑定\n      isChecked: this.isChecked,\n      // 勾选框的提示文本\n      checkTips: '禁止后不再提示',\n      // 主要按钮的配置，包括按钮的文本和点击事件\n      primaryButton: {\n        value: '禁止',\n        action: () => {},\n      },\n      // 次要按钮的配置，包括按钮的文本和点击事件\n      secondaryButton: {\n        value: '允许',\n        action: () => {\n          // 点击次要按钮后，将 isChecked 变量设置为 false\n          this.isChecked = false;\n          // 打印日志，表示次要按钮被点击\n          console.info('Callback when the second button is clicked');\n        }\n      },\n      // 勾选框状态变化时的回调函数\n      onCheckedChange: () => {\n        // 打印日志，表示勾选框状态发生变化\n        console.info('Callback when the checkbox is clicked');\n      },\n    }),\n    // 对话框的自动取消属性，设置为 true，表示点击对话框外部区域时对话框会自动关闭\n    autoCancel: true,\n    // 对话框的对齐方式，设置为底部对齐\n    alignment: DialogAlignment.Bottom\n  })\n\n  build() {\n    Row() {\n      Stack() {\n        Column() {\n          // 创建一个按钮，按钮文本为“文本+勾选弹出框”\n          Button(\"文本+勾选弹出框\")\n            .width(96) // 设置按钮的宽度为 96vp\n            .height(40) // 设置按钮的高度为 40vp\n            .onClick(() => {\n              // 点击按钮后，打开对话框\n              this.dialogControllerCheckBox.open();\n            })\n        }\n        .margin({ bottom: 300 }) // 设置按钮的底部外边距为 300vp\n      }\n      .align(Alignment.Bottom) // 设置按钮的对齐方式为底部对齐\n      .width('100%') // 设置按钮的宽度为 100%\n      .height('100%') // 设置按钮的高度为 100%\n    }\n    .backgroundImageSize({ width: '100%', height: '100%' }) // 设置背景图片的尺寸为 100% 宽度，100% 高度\n    .height('100%') // 设置 Row 的高度为 100%\n  }\n}"
            },
            {
                "description": "该组件实现了一个弹出纯列表弹出框的功能。布局上，整个界面由一个按钮和一个弹出框组成。按钮位于屏幕底部，宽度为96vp，高度为40vp，点击按钮时会弹出一个列表弹出框。弹出框包含一个标题和多个单选选项，用户可以选择其中一个选项，并在点击“取消”按钮后关闭弹出框。\n\n布局属性方面，按钮的宽度为96vp，高度为40vp，位于屏幕底部，通过margin属性设置底部边距为300vp。弹出框的布局和样式由SelectDialog组件内部定义。\n\n组件的样式和外观方面，按钮的样式由Button组件的属性定义，包括宽度、高度等。弹出框的样式由SelectDialog组件内部定义，包括标题的字体、颜色、选项的排列方式等。\n\n组件的排列和嵌套关系方面，按钮位于一个Column组件中，Column组件嵌套在一个Stack组件中，Stack组件又嵌套在一个Row组件中。通过Stack组件的align属性设置按钮在屏幕底部的对齐方式。\n\n组件的功能和交互方面，按钮具有点击事件，点击后会调用dialogControllerList的open方法打开弹出框。弹出框中的每个选项具有点击事件，点击后会更新radioIndex的值，并在弹出框关闭后反映用户的选择。",
                "code": "import { SelectDialog } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct Index {\n  // 定义一个变量用于存储当前选中的单选选项的索引\n  radioIndex = 0;\n\n  // 创建一个CustomDialogController实例，用于控制弹出框的显示和隐藏\n  dialogControllerList: CustomDialogController = new CustomDialogController({\n    builder: SelectDialog({\n      // 弹出框的标题\n      title: '文本标题',\n      // 当前选中的单选选项的索引\n      selectedIndex: this.radioIndex,\n      // 取消按钮的配置\n      confirm: {\n        // 取消按钮的文本\n        value: '取消',\n        // 取消按钮的点击事件，目前为空函数\n        action: () => {},\n      },\n      // 单选选项的内容\n      radioContent: [\n        {\n          // 第一个单选选项的标题\n          title: '文本文本文本文本文本',\n          // 第一个单选选项的点击事件，点击后将radioIndex设置为0\n          action: () => {\n            this.radioIndex = 0\n          }\n        },\n        {\n          // 第二个单选选项的标题\n          title: '文本文本文本文本',\n          // 第二个单选选项的点击事件，点击后将radioIndex设置为1\n          action: () => {\n            this.radioIndex = 1\n          }\n        },\n        {\n          // 第三个单选选项的标题\n          title: '文本文本文本文本',\n          // 第三个单选选项的点击事件，点击后将radioIndex设置为2\n          action: () => {\n            this.radioIndex = 2\n          }\n        },\n      ]\n    }),\n  })\n\n  build() {\n    Row() {\n      Stack() {\n        Column() {\n          // 创建一个按钮，按钮文本为“纯列表弹出框”\n          Button(\"纯列表弹出框\")\n            .width(96) // 设置按钮的宽度为96vp\n            .height(40) // 设置按钮的高度为40vp\n            .onClick(() => {\n              // 点击按钮时，调用dialogControllerList的open方法打开弹出框\n              this.dialogControllerList.open()\n            })\n        }.margin({ bottom: 300 }) // 设置按钮的底部边距为300vp\n      }.align(Alignment.Bottom) // 设置Stack组件的对齐方式为底部对齐\n      .width('100%').height('100%') // 设置Stack组件的宽度和高度为100%\n    }\n    .backgroundImageSize({ width: '100%', height: '100%' }) // 设置Row组件的背景图片尺寸为100%\n    .height('100%') // 设置Row组件的高度为100%\n  }\n}"
            },
            {
                "description": "该示例展示了一个带有图像和文本的弹出对话框，用户可以通过点击按钮触发对话框的显示。布局上，对话框分为上下两部分：上部分显示图像，下部分显示文本和按钮。对话框的样式包括图像的尺寸、文本的字体和颜色、按钮的样式和颜色等。对话框的功能包括点击按钮触发相应操作，如取消或删除操作，并且可以通过复选框触发额外的回调。\n\n布局属性：\n- 对话框的整体布局采用垂直布局，图像位于顶部，文本和按钮位于底部。\n- 按钮的布局采用水平布局，两个按钮分别位于左右两侧。\n- 按钮的宽度为96vp，高度为40vp，按钮之间的间距均匀分布。\n\n组件的样式和外观：\n- 图像的资源名称为`$r('sys.media.ohos_ic_public_voice')`，显示在对话框的顶部。\n- 文本内容为“想要卸载这个APP嘛?”，显示在图像下方。\n- 按钮的样式包括背景颜色、边框圆角、宽度和高度等属性，支持不同的样式展示。\n- 按钮的文本颜色和背景颜色根据按钮的角色（如ERROR）进行调整。\n\n组件的排列和嵌套关系：\n- 对话框的图像和文本部分采用垂直布局，图像位于顶部，文本位于中间。\n- 按钮部分采用水平布局，两个按钮分别位于左右两侧。\n- 对话框的整体布局通过垂直布局保证图像、文本和按钮在垂直方向上有序排列。\n\n组件的功能和交互：\n- 用户可以通过点击“上图下文弹出框”按钮触发对话框的显示。\n- 对话框中的按钮支持点击事件，点击“取消”按钮会触发取消操作的回调，点击“删除”按钮会触发删除操作的回调。\n- 对话框中的复选框支持点击事件，点击复选框会触发复选框状态变化的回调。",
                "code": "import { TipsDialog } from '@kit.ArkUI'; // 导入TipsDialog组件\nimport { image } from '@kit.ImageKit'; // 导入ImageKit组件\n\n@Entry\n@Component\nstruct Index {\n  @State pixelMap: PixelMap | undefined = undefined; // 定义一个状态变量pixelMap，用于存储图像的像素数据\n  isChecked = false; // 定义一个布尔变量isChecked，用于表示复选框的状态\n  dialogControllerImage: CustomDialogController = new CustomDialogController({\n    builder: TipsDialog({\n      imageRes: $r('sys.media.ohos_ic_public_voice'), // 设置对话框顶部的图像资源\n      content: '想要卸载这个APP嘛?', // 设置对话框的文本内容\n      primaryButton: {\n        value: '取消', // 设置第一个按钮的文本内容\n        action: () => {\n          console.info('Callback when the first button is clicked') // 设置第一个按钮的点击回调\n        },\n      },\n      secondaryButton: {\n        value: '删除', // 设置第二个按钮的文本内容\n        role: ButtonRole.ERROR, // 设置第二个按钮的角色为ERROR\n        action: () => {\n          console.info('Callback when the second button is clicked') // 设置第二个按钮的点击回调\n        }\n      },\n      onCheckedChange: () => {\n        console.info('Callback when the checkbox is clicked') // 设置复选框状态变化的回调\n      }\n    }),\n  })\n\n  build() {\n    Row() {\n      Stack() {\n        Column(){\n          Button(\"上图下文弹出框\") // 创建一个按钮，文本内容为“上图下文弹出框”\n            .width(96) // 设置按钮的宽度为96vp\n            .height(40) // 设置按钮的高度为40vp\n            .onClick(() => {\n              this.dialogControllerImage.open() // 设置按钮的点击事件，点击后打开对话框\n            })\n        }.margin({bottom: 300}) // 设置按钮的底部外边距为300vp\n      }.align(Alignment.Bottom) // 设置Stack组件的对齐方式为底部对齐\n      .width('100%').height('100%') // 设置Stack组件的宽度和高度为100%\n    }\n    .backgroundImageSize({ width: '100%', height: '100%' }) // 设置背景图像的尺寸为100%\n    .height('100%') // 设置Row组件的高度为100%\n  }\n\n  aboutToAppear(): void {\n    this.getPixmapFromMedia($r('app.media.app_icon')); // 页面即将显示时，调用getPixmapFromMedia方法获取图像的像素数据\n  }\n\n  async getPixmapFromMedia(resource: Resource) {\n    let unit8Array = await getContext(this)?.resourceManager?.getMediaContent({\n      bundleName: resource.bundleName, // 获取资源的bundleName\n      moduleName: resource.moduleName, // 获取资源的moduleName\n      id: resource.id // 获取资源的id\n    })\n    let imageSource = image.createImageSource(unit8Array.buffer.slice(0, unit8Array.buffer.byteLength)) // 创建图像源\n    this.pixelMap = await imageSource.createPixelMap({\n      desiredPixelFormat: image.PixelMapFormat.RGBA_8888 // 设置像素格式为RGBA_8888\n    })\n    await imageSource.release() // 释放图像源\n    return this.pixelMap; // 返回图像的像素数据\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "LocationButton": {
        "description": "安全控件的位置控件，用户通过点击该位置按钮，可以临时获取精准定位权限，而不需要权限弹框授权确认。",
        "details": "该组件从API Version 10开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "LocationButton()",
                "params": {}
            },
            {
                "description": "LocationButton(option: LocationButtonOptions)",
                "params": {
                    "option": {
                        "type": "LocationButtonOptions",
                        "required": false,
                        "description": "创建包含指定元素的位置按钮。"
                    }
                }
            }
        ],
        "attributes": {
            "LocationButtonOptions": {
                "description": "创建包含指定元素的位置按钮。",
                "params": {
                    "icon": {
                        "type": "LocationIconStyle",
                        "required": false,
                        "description": "设置位置按钮的图标风格。不传入该参数表示没有图标，icon和text至少存在一个。"
                    },
                    "text": {
                        "type": "LocationDescription",
                        "required": false,
                        "description": "设置位置按钮的文本描述。不传入该参数表示没有文字描述，icon和text至少存在一个。"
                    },
                    "buttonType": {
                        "type": "ButtonType",
                        "required": false,
                        "description": "设置位置按钮的背景样式。不传入该参数，系统默认提供Capsule类型按钮。"
                    }
                }
            }
        },
        "events": {
            "onClick": {
                "description": "点击动作触发该回调。",
                "params": {
                    "event": {
                        "type": "ClickEvent",
                        "required": true,
                        "description": "见ClickEvent对象说明。"
                    },
                    "result": {
                        "type": "LocationButtonOnClickResult",
                        "required": true,
                        "description": "位置权限的授权结果。"
                    }
                }
            }
        },
        "rules": [
            "为避免控件样式不合法导致授权失败，请开发者先了解安全控件样式的约束与限制。"
        ],
        "examples": [
            {
                "description": "该组件通过 Flex 布局实现了一个展示多种类型位置按钮的界面。布局宽度占据整个屏幕，高度设为 100%，内边距为默认值。组件的垂直方向上被分为一个 Row 容器，内部包含一个 Column 容器。Column 容器中的按钮以垂直布局方式排列，按钮之间的间距为 10vp，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、图标样式、文字描述等属性，支持不同的样式展示。按钮组之间通过 Column 组件进行分隔。按钮的功能包括点击事件，用户可以通过点击按钮触发相应操作，按钮也可以在不同状态下进行展示。\n整个布局通过 Flex 布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column({space:10}) {\n        // 默认参数下，图标、文字、背景都存在\n        LocationButton().onClick((event: ClickEvent, result: LocationButtonOnClickResult)=>{\n          console.info(\"result \" + result)\n        })\n        \n        // 传入参数即表示元素存在，不传入的参数表示元素不存在，如果不传入buttonType，会默认添加ButtonType.Capsule配置，显示图标+背景。\n        LocationButton({icon:LocationIconStyle.LINES})\n        \n        // 只显示图标+背景，如果设置背景色高八位的α值低于0x1A，则会被系统强制调整为0xFF\n        LocationButton({icon:LocationIconStyle.LINES, buttonType:ButtonType.Capsule})\n          .backgroundColor(0x10007dff)\n        \n        // 图标、文字、背景都存在，如果设置背景色高八位的α值低于0x1A，则会被系统强制调整为0xFF\n        LocationButton({icon:LocationIconStyle.LINES, text:LocationDescription.CURRENT_LOCATION, buttonType:ButtonType.Capsule})\n      }.width('100%')\n    }.height('100%')\n  }\n}"
            }
        ],
        "is_common_attrs": false
    },
    "PasteButton": {
        "description": "安全控件的粘贴按钮，用户通过点击该粘贴按钮，可以临时获取读取剪贴板权限。",
        "details": "该组件从API Version 10开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "PasteButton()",
                "params": {}
            },
            {
                "description": "PasteButton(option: PasteButtonOptions)",
                "params": {
                    "option": {
                        "type": "PasteButtonOptions",
                        "description": "创建包含指定元素的粘贴按钮。"
                    }
                }
            }
        ],
        "attributes": {
            "PasteButtonOptions": {
                "description": "创建包含指定元素的粘贴按钮。",
                "params": {
                    "icon": {
                        "type": "PasteIconStyle",
                        "description": "设置粘贴按钮的图标风格。不传入该参数表示没有图标，icon和text至少存在一个。",
                        "default": "PasteIconStyle.LINES"
                    },
                    "text": {
                        "type": "PasteDescription",
                        "description": "设置粘贴按钮的文本描述。不传入该参数表示没有文字描述，icon和text至少存在一个。",
                        "default": "PasteDescription.PASTE"
                    },
                    "buttonType": {
                        "type": "ButtonType",
                        "description": "设置粘贴按钮的背景样式。不传入该参数，系统默认提供Capsule类型按钮。",
                        "default": "ButtonType.Capsule"
                    }
                }
            }
        },
        "events": {
            "onClick": {
                "description": "点击动作触发该回调",
                "params": {
                    "event": {
                        "type": "ClickEvent",
                        "description": "见ClickEvent对象说明"
                    },
                    "result": {
                        "type": "PasteButtonOnClickResult",
                        "description": "剪贴板权限的授权结果，授权后可以读取当前剪贴板内容。"
                    }
                }
            }
        },
        "rules": [
            "为避免控件样式不合法导致授权失败，请开发者先了解安全控件样式的约束与限制。"
        ],
        "examples": [
            {
                "description": "该组件通过 Flex 布局实现了一个展示多种类型按钮（如普通按钮、胶囊按钮、圆形按钮）及其状态效果的界面。布局宽度占据整个屏幕，高度设为 100%，内边距为默认值。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组按钮。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过 Flex 组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过 Flex 布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// xxx.ets\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column({space:10}) {\n        // 默认参数下，图标、文字、背景都存在\n        PasteButton().onClick((event: ClickEvent, result: PasteButtonOnClickResult)=>{\n          console.info(\"result \" + result)\n        })\n        // 传入参数即表示元素存在，不传入的参数表示元素不存在，如果不传入buttonType，会默认添加ButtonType.Capsule配置，显示图标+背景。\n        PasteButton({icon:PasteIconStyle.LINES})\n        // 只显示图标+背景，如果设置背景色高八位的α值低于0x1A，则会被系统强制调整为0xFF\n        PasteButton({icon:PasteIconStyle.LINES, buttonType:ButtonType.Capsule})\n          .backgroundColor(0x10007dff)\n        // 图标、文字、背景都存在，如果设置背景色高八位的α值低于0x1A，则会被系统强制调整为0xFF\n        PasteButton({icon:PasteIconStyle.LINES, text:PasteDescription.PASTE, buttonType:ButtonType.Capsule})\n      }.width('100%')\n    }.height('100%')\n  }\n}"
            }
        ],
        "is_common_attrs": false
    },
    "SaveButton": {
        "description": "安全控件的保存控件，用户通过点击该保存按钮，可以临时获取存储权限，而不需要权限弹框授权确认。",
        "details": "该组件从API Version 10开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "SaveButton()",
                "params": {}
            },
            {
                "description": "SaveButton(option: SaveButtonOptions)",
                "params": {
                    "option": {
                        "type": "SaveButtonOptions",
                        "required": false,
                        "description": "创建包含指定元素的保存按钮。"
                    }
                }
            }
        ],
        "attributes": {
            "SaveButtonOptions": {
                "description": "创建包含指定元素的保存按钮。",
                "params": {
                    "icon": {
                        "type": "SaveIconStyle",
                        "required": false,
                        "description": "设置保存按钮的图标风格。不传入该参数表示没有图标，icon和text至少存在一个。"
                    },
                    "text": {
                        "type": "SaveDescription",
                        "required": false,
                        "description": "设置保存按钮的文本描述。不传入该参数表示没有文字描述，icon和text至少存在一个。"
                    },
                    "buttonType": {
                        "type": "ButtonType",
                        "required": false,
                        "description": "设置保存按钮的背景样式。不传入该参数，系统默认提供Capsule类型按钮。"
                    }
                }
            }
        },
        "events": {
            "onClick": {
                "description": "点击动作触发该回调",
                "params": {
                    "event": {
                        "type": "ClickEvent",
                        "required": true,
                        "description": "见ClickEvent对象说明"
                    },
                    "result": {
                        "type": "SaveButtonOnClickResult",
                        "required": true,
                        "description": "存储权限的授权结果，授权时长为10秒，即触发点击后，可以在10秒之内不限制次数的调用特定媒体库接口，超出10秒的调用会鉴权失败。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过Row和Column布局实现了一个展示多种类型按钮及其状态效果的界面。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为一个Column，包含多个SaveButton组件。每个SaveButton组件以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、图标样式、文字描述等属性，支持不同的样式展示。按钮组之间通过Column组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过Row和Column布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// xxx.ets\nimport { photoAccessHelper } from '@kit.MediaLibraryKit'; // 导入媒体库助手模块\nimport { fileIo } from '@kit.CoreFileKit'; // 导入文件IO模块\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column({space:10}) { // 创建一个Column组件，设置组件之间的间距为10\n        // 默认参数下，图标、文字、背景都存在\n        SaveButton().onClick(async (event:ClickEvent, result:SaveButtonOnClickResult) => { // 创建一个SaveButton组件，并设置点击事件\n          if (result == SaveButtonOnClickResult.SUCCESS) { // 如果点击结果为成功\n            try {\n              const context = getContext(this); // 获取当前组件的上下文\n              let helper = photoAccessHelper.getPhotoAccessHelper(context); // 获取媒体库助手实例\n              // onClick触发后10秒内通过createAsset接口创建图片文件，10秒后createAsset权限收回。\n              let uri = await helper.createAsset(photoAccessHelper.PhotoType.IMAGE, 'png'); // 创建一个图片文件，返回文件的URI\n              // 使用uri打开文件，可以持续写入内容，写入过程不受时间限制\n              let file = await fileIo.open(uri, fileIo.OpenMode.READ_WRITE | fileIo.OpenMode.CREATE); // 打开文件，设置为可读写模式\n              // 写入文件\n              await fileIo.write(file.fd, \"context\"); // 向文件中写入内容\n              // 关闭文件\n              await fileIo.close(file.fd); // 关闭文件\n            } catch (error) {\n              console.error(\"error is \" + JSON.stringify(error)); // 捕获并打印错误信息\n            }\n          }\n        })\n        // 传入参数即表示元素存在，不传入的参数表示元素不存在，如果不传入buttonType，会默认添加ButtonType.Capsule配置，显示图标+背景。\n        SaveButton({icon:SaveIconStyle.FULL_FILLED}) // 创建一个SaveButton组件，设置图标样式为FULL_FILLED\n        // 只显示图标+背景，如果设置背景色高八位的α值低于0x1A，则会被系统强制调整为0xFF\n        SaveButton({icon:SaveIconStyle.FULL_FILLED, buttonType:ButtonType.Capsule}) // 创建一个SaveButton组件，设置图标样式为FULL_FILLED，按钮类型为Capsule\n          .backgroundColor(0x10007dff) // 设置按钮的背景颜色\n        // 图标、文字、背景都存在，如果设置背景色高八位的α值低于0x1A，则会被系统强制调整为0xFF\n        SaveButton({icon:SaveIconStyle.FULL_FILLED, text:SaveDescription.DOWNLOAD, buttonType:ButtonType.Capsule}) // 创建一个SaveButton组件，设置图标样式为FULL_FILLED，文字描述为DOWNLOAD，按钮类型为Capsule\n      }.width('100%') // 设置Column的宽度为100%\n    }.height('100%') // 设置Row的高度为100%\n  }\n}"
            }
        ],
        "is_common_attrs": false
    },
    "WithTheme": {
        "description": "WithTheme组件用于设置应用局部页面自定义主题风格，可设置子组件深浅色模式和自定义配色。",
        "details": "该组件从API Version 12开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "WithTheme(options: WithThemeOptions)",
                "params": {
                    "options": {
                        "type": "WithThemeOptions",
                        "required": true,
                        "description": "设置WithTheme作用域内组件缺省样式及深浅色模式。"
                    }
                }
            }
        ],
        "attributes": {
            "WithThemeOptions": {
                "description": "设置WithTheme作用域内组件缺省样式及深浅色模式。",
                "params": {
                    "theme": {
                        "type": "CustomTheme",
                        "required": false,
                        "description": "用于自定义WithTheme作用域内组件缺省配色。",
                        "default": "undefined"
                    },
                    "colorMode": {
                        "type": "ThemeColorMode",
                        "required": false,
                        "description": "用于指定WithTheme作用域内组件深浅色模式。",
                        "default": "ThemeColorMode.System"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Flex 布局实现了一个展示多种类型按钮（如普通按钮、胶囊按钮、圆形按钮）及其状态效果的界面。布局宽度占据整个屏幕，高度设为 400vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组按钮。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。\n按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过 Flex 组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n整个布局通过 Flex 布局保证按钮在垂直方向上有序排列，确保界面整洁美观。",
                "code": "@Entry\n@Component\nstruct ButtonExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 标题部分\n      Text('按钮示例')\n        .fontSize(24)\n        .fontWeight(FontWeight.Bold)\n        .margin({ bottom: 20 })\n        .textAlign(TextAlign.Center)\n\n      // 普通按钮部分\n      Flex({ direction: FlexDirection.Row, alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceAround }) {\n        Button('普通按钮')\n          .width(150)\n          .height(50)\n          .backgroundColor('#007DFF')\n          .borderRadius(8)\n          .onClick(() => {\n            // 点击事件处理逻辑\n            console.log('普通按钮被点击');\n          })\n\n        Button('禁用按钮')\n          .width(150)\n          .height(50)\n          .backgroundColor('#CCCCCC')\n          .borderRadius(8)\n          .enabled(false)\n          .onClick(() => {\n            // 点击事件处理逻辑\n            console.log('禁用按钮被点击');\n          })\n      }\n      .margin({ bottom: 20 })\n\n      // 胶囊按钮部分\n      Flex({ direction: FlexDirection.Row, alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceAround }) {\n        Button('胶囊按钮')\n          .width(150)\n          .height(50)\n          .backgroundColor('#007DFF')\n          .borderRadius(25)\n          .onClick(() => {\n            // 点击事件处理逻辑\n            console.log('胶囊按钮被点击');\n          })\n\n        Button('禁用胶囊按钮')\n          .width(150)\n          .height(50)\n          .backgroundColor('#CCCCCC')\n          .borderRadius(25)\n          .enabled(false)\n          .onClick(() => {\n            // 点击事件处理逻辑\n            console.log('禁用胶囊按钮被点击');\n          })\n      }\n      .margin({ bottom: 20 })\n\n      // 圆形按钮部分\n      Flex({ direction: FlexDirection.Row, alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceAround }) {\n        Button('圆形按钮')\n          .width(80)\n          .height(80)\n          .backgroundColor('#007DFF')\n          .borderRadius(40)\n          .onClick(() => {\n            // 点击事件处理逻辑\n            console.log('圆形按钮被点击');\n          })\n\n        Button('禁用圆形按钮')\n          .width(80)\n          .height(80)\n          .backgroundColor('#CCCCCC')\n          .borderRadius(40)\n          .enabled(false)\n          .onClick(() => {\n            // 点击事件处理逻辑\n            console.log('禁用圆形按钮被点击');\n          })\n      }\n    }\n    .width('100%')\n    .height(400)\n    .padding({ left: 35, right: 35, top: 35 })\n    .backgroundColor('#F1F3F5')\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "AtomicServiceNavigation": {
        "description": "作为Page页面的根容器使用，其内部默认包含了标题栏、内容区，其中内容区默认首页显示导航内容或非首页显示（NavDestination的子组件），首页和非首页通过路由进行切换。",
        "details": "可以包含单个子组件。",
        "interfaces": [
            {
                "description": "AtomicServiceNavigation({ navPathStack, navigationContent, title, titleBackgroundColor, hideTitleBar, navBarWidth, mode, navDestinationBuilder, navBarWidthRange, minContentWidth, stateChangeCallback, modeChangeCallback })",
                "params": {
                    "navPathStack": {
                        "type": "NavPathStack",
                        "required": false,
                        "description": "路由栈信息。"
                    },
                    "navigationContent": {
                        "type": "Callback<void>",
                        "required": false,
                        "description": "Navigation容器内容。"
                    },
                    "title": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "设置页面标题。"
                    },
                    "titleBackgroundColor": {
                        "type": "ResourceColor",
                        "required": false,
                        "description": "设置标题栏背景颜色。"
                    },
                    "hideTitleBar": {
                        "type": "boolean",
                        "required": false,
                        "description": "设置是否隐藏标题栏。"
                    },
                    "navBarWidth": {
                        "type": "Length",
                        "required": false,
                        "description": "设置导航栏宽度。仅在Navigation组件分栏时生效。"
                    },
                    "mode": {
                        "type": [
                            "NavigationMode"
                        ],
                        "required": false,
                        "description": "设置导航栏的显示模式。支持Stack、Split与Auto模式。"
                    },
                    "navDestinationBuilder": {
                        "type": "NavDestinationBuilder",
                        "required": false,
                        "description": "创建NavDestination组件所需要的Builder数据。"
                    },
                    "navBarWidthRange": {
                        "type": [
                            "Dimension",
                            "Dimension"
                        ],
                        "required": false,
                        "description": "设置导航栏最小和最大宽度（双栏模式下生效）。"
                    },
                    "minContentWidth": {
                        "type": "Dimension",
                        "required": false,
                        "description": "设置导航栏内容区最小宽度（双栏模式下生效）。"
                    },
                    "stateChangeCallback": {
                        "type": "Callback<boolean>",
                        "required": false,
                        "description": "导航栏显示状态切换时触发该回调。"
                    },
                    "modeChangeCallback": {
                        "type": "Callback<NavigationMode>",
                        "required": false,
                        "description": "当Navigation首次显示或者单双栏状态发生变化时触发该回调。"
                    }
                }
            }
        ],
        "attributes": {
            "navPathStack": {
                "description": "路由栈信息。",
                "params": {
                    "value": {
                        "type": "NavPathStack",
                        "required": false,
                        "description": "路由栈信息。"
                    }
                }
            },
            "navigationContent": {
                "description": "Navigation容器内容。",
                "params": {
                    "value": {
                        "type": "Callback<void>",
                        "required": false,
                        "description": "Navigation容器内容。"
                    }
                }
            },
            "title": {
                "description": "设置页面标题。",
                "params": {
                    "value": {
                        "type": "ResourceStr",
                        "required": false,
                        "description": "设置页面标题。"
                    }
                }
            },
            "titleOptions": {
                "description": "标题栏选项。",
                "params": {
                    "value": {
                        "type": "TitleOptions",
                        "required": false,
                        "description": "标题栏选项。"
                    }
                }
            },
            "hideTitleBar": {
                "description": "设置是否隐藏标题栏。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": false,
                        "description": "设置是否隐藏标题栏。"
                    }
                }
            },
            "navBarWidth": {
                "description": "设置导航栏宽度。仅在Navigation组件分栏时生效。",
                "params": {
                    "value": {
                        "type": "Length",
                        "required": false,
                        "description": "设置导航栏宽度。"
                    }
                }
            },
            "mode": {
                "description": "设置导航栏的显示模式。支持Stack、Split与Auto模式。",
                "params": {
                    "value": {
                        "type": [
                            "NavigationMode"
                        ],
                        "required": false,
                        "description": "设置导航栏的显示模式。"
                    }
                }
            },
            "navDestinationBuilder": {
                "description": "创建NavDestination组件所需要的Builder数据。",
                "params": {
                    "value": {
                        "type": "NavDestinationBuilder",
                        "required": false,
                        "description": "创建NavDestination组件所需要的Builder数据。"
                    }
                }
            },
            "navBarWidthRange": {
                "description": "设置导航栏最小和最大宽度（双栏模式下生效）。",
                "params": {
                    "value": {
                        "type": [
                            "Dimension",
                            "Dimension"
                        ],
                        "required": false,
                        "description": "设置导航栏最小和最大宽度。"
                    }
                }
            },
            "minContentWidth": {
                "description": "设置导航栏内容区最小宽度（双栏模式下生效）。",
                "params": {
                    "value": {
                        "type": "Dimension",
                        "required": false,
                        "description": "设置导航栏内容区最小宽度。"
                    }
                }
            }
        },
        "events": {
            "stateChangeCallback": {
                "description": "导航栏显示状态切换时触发该回调。",
                "params": {
                    "value": {
                        "type": "Callback<boolean>",
                        "required": false,
                        "description": "导航栏显示状态切换时触发该回调。"
                    }
                }
            },
            "modeChangeCallback": {
                "description": "当Navigation首次显示或者单双栏状态发生变化时触发该回调。",
                "params": {
                    "value": {
                        "type": "Callback<NavigationMode>",
                        "required": false,
                        "description": "当Navigation首次显示或者单双栏状态发生变化时触发该回调。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中使用AtomicServiceNavigation和AtomicServiceTabs组件来创建一个带有导航和标签页的应用界面。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上被分为两个主要部分：顶部是一个导航栏，底部是一个标签栏。导航栏包含一个标题和导航内容，标签栏包含三个标签页，每个标签页对应一个不同的内容区域。\n\n导航栏的标题是动态更新的，根据用户点击的标签页来显示不同的标题。导航栏的背景颜色为'rgb(61, 157, 180)'，并且不启用模糊效果。导航栏的导航内容是一个标签页组件，包含三个标签页，每个标签页对应一个不同的内容区域。标签页的标签栏位于底部，背景颜色为系统资源'sys.color.ohos_id_color_bottom_tab_bg'。标签栏的标签项包含图标和文本，图标和文本的颜色可以根据标签项的状态进行动态调整。\n\n标签页的内容区域包含三个不同的内容构建器，分别对应三个标签页。每个内容构建器返回一个Text组件，点击第一个标签页的Text组件会触发导航栈的push操作，将新的页面推入导航栈。导航栈的模式为Stack模式，支持页面之间的导航和返回操作。\n\n页面PageOne和PageTwo分别展示了如何在导航栈中进行页面跳转。PageOne包含一个按钮，点击按钮会将PageTwo推入导航栈。PageTwo包含一个按钮，点击按钮会结束当前页面的展示。",
                "code": "import { AtomicServiceNavigation, NavDestinationBuilder, AtomicServiceTabs, TabBarOptions, TabBarPosition } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = '主题'; // 导航栏的标题，初始值为'主题'\n  childNavStack: NavPathStack = new NavPathStack(); // 导航栈，用于管理页面的导航路径\n\n  @Builder\n  tabContent1() {\n    Text('first page')\n      .onClick(() => {\n        this.childNavStack.pushPath({ name: 'page one' }) // 点击Text组件时，将'page one'推入导航栈\n      })\n  }\n\n  @Builder\n  tabContent2() {\n    Text('second page') // 第二个标签页的内容\n  }\n\n  @Builder\n  tabContent3() {\n    Text('third page') // 第三个标签页的内容\n  }\n\n  @Builder\n  navigationContent() {\n    AtomicServiceTabs({\n      tabContents: [\n        () => {\n          this.tabContent1() // 第一个标签页的内容\n        },\n        () => {\n          this.tabContent2() // 第二个标签页的内容\n        },\n        () => {\n          this.tabContent3() // 第三个标签页的内容\n        }\n      ],\n      tabBarOptionsArray: [\n        new TabBarOptions($r('sys.media.ohos_ic_public_phone'), '功能1'), // 第一个标签页的图标和文本\n        new TabBarOptions($r('sys.media.ohos_ic_public_location'), '功能2', Color.Green, Color.Red), // 第二个标签页的图标和文本，以及激活和未激活时的颜色\n        new TabBarOptions($r('sys.media.ohos_ic_public_more'), '功能3') // 第三个标签页的图标和文本\n      ],\n      tabBarPosition: TabBarPosition.BOTTOM, // 标签栏位于底部\n      barBackgroundColor: $r('sys.color.ohos_id_color_bottom_tab_bg'), // 标签栏的背景颜色\n      onTabBarClick: (index: Number) => {\n        if (index == 0) {\n          this.message = '功能1'; // 点击第一个标签页时，更新导航栏的标题为'功能1'\n        } else if (index == 1) {\n          this.message = '功能2'; // 点击第二个标签页时，更新导航栏的标题为'功能2'\n        } else {\n          this.message = '功能3'; // 点击第三个标签页时，更新导航栏的标题为'功能3'\n        }\n      }\n    })\n  }\n\n  @Builder\n  pageMap(name: string) {\n    if (name === 'page one') {\n      PageOne() // 如果导航栈中的页面名称为'page one'，则显示PageOne组件\n    } else if (name === 'page two') {\n      PageTwo() // 如果导航栈中的页面名称为'page two'，则显示PageTwo组件\n    }\n  }\n\n  build() {\n    Row() {\n      Column() {\n        AtomicServiceNavigation({\n          navigationContent: () => {\n            this.navigationContent() // 导航栏的内容\n          },\n          title: this.message, // 导航栏的标题\n          titleOptions: {\n            backgroundColor: 'rgb(61, 157, 180)', // 导航栏的背景颜色\n            isBlurEnabled: false // 不启用模糊效果\n          },\n          navDestinationBuilder: this.pageMap, // 导航目的地的构建器\n          navPathStack: this.childNavStack, // 导航栈\n          mode: NavigationMode.Stack // 导航模式为Stack模式\n        })\n      }\n      .width('100%') // 宽度占据整个屏幕\n    }\n    .height('100%') // 高度占据整个屏幕\n  }\n}\n\n@Component\nexport struct PageOne {\n  pageInfo: NavPathStack = new NavPathStack(); // 页面信息，用于管理页面的导航路径\n\n  build() {\n    NavDestination() {\n      Button('Next')\n        .onClick(() => {\n          this.pageInfo.pushPath({ name: 'page two'}) // 点击按钮时，将'page two'推入导航栈\n        })\n    }\n    .title('PageOne') // 页面的标题\n    .onReady((context: NavDestinationContext) => {\n      this.pageInfo = context.pathStack; // 页面准备就绪时，获取导航栈信息\n    })\n  }\n}\n\n@Component\nexport struct PageTwo {\n  pageInfo: NavPathStack = new NavPathStack(); // 页面信息，用于管理页面的导航路径\n\n  build() {\n    NavDestination() {\n      Button('End') // 页面包含一个按钮，点击按钮会结束当前页面的展示\n    }\n    .title('PageTwo') // 页面的标题\n    .onReady((context: NavDestinationContext) => {\n      this.pageInfo = context.pathStack; // 页面准备就绪时，获取导航栈信息\n    })\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "AtomicServiceTabs": {
        "description": "AtomicServiceTabs高级组件，对Tabs组件一些不需提供给用户自定义设计的属性进行简化，限制最多显示5个页签，固定页签样式，位置和大小。",
        "details": "该组件从API Version 12开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "AtomicServiceTabs({ tabContents?: [ TabContentBuilder?, TabContentBuilder?, TabContentBuilder?, TabContentBuilder?, TabContentBuilder? ], tabBarOptionsArray: [ TabBarOptions, TabBarOptions, TabBarOptions?, TabBarOptions?, TabBarOptions? ], tabBarPosition?: TabBarPosition, barBackgroundColor?: ResourceColor, index?: number, barOverlap?: boolean, controller?: TabsController, onChange?: Callback<number>, onTabBarClick?: Callback<number>, onContentWillChange?: OnContentWillChangeCallback })",
                "params": {
                    "tabContents": {
                        "type": [
                            "TabContentBuilder?",
                            "TabContentBuilder?",
                            "TabContentBuilder?",
                            "TabContentBuilder?",
                            "TabContentBuilder?"
                        ],
                        "description": "内容视图容器数组。"
                    },
                    "tabBarOptionsArray": {
                        "type": [
                            "TabBarOptions",
                            "TabBarOptions",
                            "TabBarOptions?",
                            "TabBarOptions?",
                            "TabBarOptions?"
                        ],
                        "required": true,
                        "description": "页签容器数组。"
                    },
                    "tabBarPosition": {
                        "type": "TabBarPosition",
                        "description": "设置页签栏位置。"
                    },
                    "barBackgroundColor": {
                        "type": "ResourceColor",
                        "description": "设置TabBar的背景颜色。"
                    },
                    "index": {
                        "type": "number",
                        "description": "设置当前显示页签的索引。"
                    },
                    "barOverlap": {
                        "type": "boolean",
                        "description": "设置TabBar是否背后变模糊并叠加在TabContent之上。"
                    },
                    "controller": {
                        "type": "TabsController",
                        "description": "Tabs组件的控制器，用于控制Tabs组件进行页签切换。"
                    },
                    "onChange": {
                        "type": "Callback<number>",
                        "description": "Tabs页签切换后触发的事件。"
                    },
                    "onTabBarClick": {
                        "type": "Callback<number>",
                        "description": "Tabs页签点击后触发的事件。"
                    },
                    "onContentWillChange": {
                        "type": "OnContentWillChangeCallback",
                        "description": "Tabs页面切换拦截事件能力，新页面即将显示时触发该回调。"
                    }
                }
            }
        ],
        "attributes": {
            "tabContents": {
                "description": "内容视图容器数组。",
                "params": {
                    "value": {
                        "type": [
                            "TabContentBuilder?",
                            "TabContentBuilder?",
                            "TabContentBuilder?",
                            "TabContentBuilder?",
                            "TabContentBuilder?"
                        ],
                        "description": "内容视图容器数组。"
                    }
                }
            },
            "tabBarOptionsArray": {
                "description": "页签容器数组。",
                "params": {
                    "value": {
                        "type": [
                            "TabBarOptions",
                            "TabBarOptions",
                            "TabBarOptions?",
                            "TabBarOptions?",
                            "TabBarOptions?"
                        ],
                        "required": true,
                        "description": "页签容器数组。"
                    }
                }
            },
            "tabBarPosition": {
                "description": "设置页签栏位置。",
                "params": {
                    "value": {
                        "type": "TabBarPosition",
                        "description": "设置页签栏位置。"
                    }
                }
            },
            "barBackgroundColor": {
                "description": "设置TabBar的背景颜色。",
                "params": {
                    "value": {
                        "type": "ResourceColor",
                        "description": "设置TabBar的背景颜色。"
                    }
                }
            },
            "index": {
                "description": "设置当前显示页签的索引。",
                "params": {
                    "value": {
                        "type": "number",
                        "description": "设置当前显示页签的索引。"
                    }
                }
            },
            "barOverlap": {
                "description": "设置TabBar是否背后变模糊并叠加在TabContent之上。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "description": "设置TabBar是否背后变模糊并叠加在TabContent之上。"
                    }
                }
            },
            "controller": {
                "description": "Tabs组件的控制器，用于控制Tabs组件进行页签切换。",
                "params": {
                    "value": {
                        "type": "TabsController",
                        "description": "Tabs组件的控制器，用于控制Tabs组件进行页签切换。"
                    }
                }
            }
        },
        "events": {
            "onChange": {
                "description": "Tabs页签切换后触发的事件。",
                "params": {
                    "index": {
                        "type": "number",
                        "description": "当前页签索引。"
                    }
                }
            },
            "onTabBarClick": {
                "description": "Tabs页签点击后触发的事件。",
                "params": {
                    "index": {
                        "type": "number",
                        "description": "当前页签索引。"
                    }
                }
            },
            "onContentWillChange": {
                "description": "Tabs页面切换拦截事件能力，新页面即将显示时触发该回调。",
                "params": {
                    "currentIndex": {
                        "type": "number",
                        "description": "当前页签索引。"
                    },
                    "comingIndex": {
                        "type": "number",
                        "description": "即将切换的页签索引。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过 Stack 布局实现了一个包含多个选项卡（Tab）的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为两个主要部分：一个 AtomicServiceTabs 组件和一个 Column 组件。AtomicServiceTabs 组件用于展示多个选项卡及其内容，而 Column 组件用于显示当前选项卡的索引和点击次数。\n\nAtomicServiceTabs 组件的选项卡内容通过 @Builder 装饰器定义的三个方法（tabContent1、tabContent2、tabContent3）生成，每个方法返回一个 Column 组件，分别设置了不同的背景颜色。选项卡的标签通过 TabBarOptions 类实例化，每个标签包含一个图标、一个文本、一个未选中时的颜色和一个选中时的颜色。选项卡的位置设置为底部（TabBarPosition.BOTTOM），背景颜色通过资源名 $r('sys.color.ohos_id_color_bottom_tab_bg') 指定。\n\nColumn 组件包含两个 Text 组件，分别用于显示选项卡切换时的回调次数和当前选项卡的索引。Column 组件的顶部边距为 500vp，确保其在屏幕上的位置。\n\n整个布局通过 Stack 布局保证 AtomicServiceTabs 和 Column 组件在垂直方向上有序排列，确保界面整洁美观。",
                "code": "// Index.ets\nimport { AtomicServiceTabs, TabBarOptions, TabBarPosition, OnContentWillChangeCallback } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = '首页'; // 状态变量，用于存储首页的标题\n  @State onClickNumber: number = 0; // 状态变量，用于记录选项卡点击次数\n  @State currentIndex: number = 0; // 状态变量，用于存储当前选项卡的索引\n  @State comingIndex: number = 0; // 状态变量，用于存储即将切换到的选项卡的索引\n\n  // 选项卡内容即将切换时的回调函数\n  onContentWillChangeCallBack: OnContentWillChangeCallback = (currentIndex: number, comingIndex: number): boolean => {\n    this.currentIndex = currentIndex; // 更新当前选项卡的索引\n    this.comingIndex = comingIndex; // 更新即将切换到的选项卡的索引\n    console.log('OnContentWillChangeCallback'); // 打印日志\n    return true; // 返回 true 表示允许切换\n  }\n\n  // 选项卡点击事件的回调函数\n  onTabClick: Callback<number> = (index: number) => {\n    this.onClickNumber++; // 增加点击次数\n    console.log('onTabClick'); // 打印日志\n  }\n\n  // 第一个选项卡的内容\n  @Builder\n  tabContent1() {\n    Column()\n      .width('100%') // 宽度占满父容器\n      .height('100%') // 高度占满父容器\n      .alignItems(HorizontalAlign.Center) // 水平居中对齐\n      .backgroundColor('#00CB87') // 背景颜色为绿色\n  }\n\n  // 第二个选项卡的内容\n  @Builder\n  tabContent2() {\n    Column()\n      .width('100%') // 宽度占满父容器\n      .height('100%') // 高度占满父容器\n      .backgroundColor('#007DFF') // 背景颜色为蓝色\n  }\n\n  // 第三个选项卡的内容\n  @Builder\n  tabContent3() {\n    Column()\n      .width('100%') // 宽度占满父容器\n      .height('100%') // 高度占满父容器\n      .backgroundColor('#FFBF00') // 背景颜色为黄色\n  }\n\n  // 构建整个界面的方法\n  build() {\n    Stack() {\n      AtomicServiceTabs({\n        tabContents: [\n          () => {\n            this.tabContent1() // 第一个选项卡的内容\n          },\n          () => {\n            this.tabContent2() // 第二个选项卡的内容\n          },\n          () => {\n            this.tabContent3() // 第三个选项卡的内容\n          }\n        ],\n        tabBarOptionsArray: [\n          new TabBarOptions($r('sys.media.ohos_ic_public_phone'), '绿色', Color.Black, Color.Blue), // 第一个选项卡的标签\n          new TabBarOptions($r('sys.media.ohos_ic_public_location'), '蓝色', Color.Black, Color.Blue), // 第二个选项卡的标签\n          new TabBarOptions($r('sys.media.ohos_ic_public_more'), '黄色', Color.Black, Color.Blue) // 第三个选项卡的标签\n        ],\n        tabBarPosition: TabBarPosition.BOTTOM, // 选项卡位置在底部\n        barBackgroundColor: $r('sys.color.ohos_id_color_bottom_tab_bg'), // 选项卡背景颜色\n        onTabBarClick: this.onTabClick, // 选项卡点击事件的回调函数\n        onContentWillChange: this.onContentWillChangeCallBack // 选项卡内容即将切换时的回调函数\n      })\n      Column() {\n        Text(\"onchange回调次数:\" + this.onClickNumber) // 显示选项卡点击次数\n        Text(\"comingIndex = \" + this.comingIndex + \", currentIndex = \" + this.currentIndex) // 显示当前选项卡的索引\n      }\n      .margin({ top: 500 }) // 顶部边距为 500vp\n    }\n    .height('100%') // 高度占满父容器\n  }\n}"
            }
        ],
        "is_common_attrs": false
    },
    "AtomicServiceWeb": {
        "description": "为开发者提供满足定制化诉求的Web高阶组件，屏蔽原生Web组件中无需关注的接口，并提供JS扩展能力。",
        "details": null,
        "interfaces": [
            {
                "description": "AtomicServiceWeb({ src: ResourceStr, controller: AtomicServiceWebController, navPathStack?: NavPathStack, mixedMode?: MixedMode, darkMode?: WebDarkMode, forceDarkAccess?: boolean, onMessage?: Callback<OnMessageEvent>, onErrorReceive?: Callback<OnErrorReceiveEvent>, onHttpErrorReceive?: Callback<OnHttpErrorReceiveEvent>, onPageBegin?: Callback<OnPageBeginEvent>, onPageEnd?: Callback<OnPageEndEvent>, onControllerAttached?: Callback<void>, onLoadIntercept?: Callback<OnLoadInterceptEvent, boolean>, onProgressChange?: Callback<OnProgressChangeEvent> })",
                "params": {
                    "src": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "网页资源地址，访问网络资源需要在AGC配置业务域名，访问本地资源仅支持包内文件（$rawfile）。不支持通过状态变量（例如@State）动态更新地址。加载的网页中支持通过JS SDK提供的接口调用系统能力，具体以JS SDK为准。"
                    },
                    "controller": {
                        "type": "AtomicServiceWebController",
                        "required": true,
                        "description": "通过AtomicServiceWebController可以控制AtomicServiceWeb组件各种行为。"
                    },
                    "navPathStack": {
                        "type": "NavPathStack",
                        "required": false,
                        "description": "路由栈信息。当使用NavDestination作为页面的根容器时，需传入NavDestination容器对应的NavPathStack处理页面路由。"
                    },
                    "mixedMode": {
                        "type": "MixedMode",
                        "required": false,
                        "description": "设置是否允许加载超文本传输协议（HTTP）和超文本传输安全协议（HTTPS）混合内容，默认不允许加载HTTP和HTTPS混合内容。"
                    },
                    "darkMode": {
                        "type": "WebDarkMode",
                        "required": false,
                        "description": "设置Web深色模式，默认关闭。"
                    },
                    "forceDarkAccess": {
                        "type": "boolean",
                        "required": false,
                        "description": "设置网页是否开启强制深色模式。默认关闭。该属性仅在darkMode开启深色模式时生效。"
                    },
                    "onMessage": {
                        "type": "Callback<OnMessageEvent>",
                        "required": false,
                        "description": "H5页面通过JS SDK的postMessage()发送消息后，Web组件对应的页面返回或销毁时，触发该回调。"
                    },
                    "onErrorReceive": {
                        "type": "Callback<OnErrorReceiveEvent>",
                        "required": false,
                        "description": "网页加载遇到错误时触发该回调。出于性能考虑，建议此回调中尽量执行简单逻辑。在无网络的情况下，触发此回调。"
                    },
                    "onHttpErrorReceive": {
                        "type": "Callback<OnHttpErrorReceiveEvent>",
                        "required": false,
                        "description": "网页加载资源遇到的HTTP错误（响应码>=400)时触发该回调。"
                    },
                    "onPageBegin": {
                        "type": "Callback<OnPageBeginEvent>",
                        "required": false,
                        "description": "网页开始加载时触发该回调，且只在主frame触发，iframe或者frameset的内容加载时不会触发此回调。"
                    },
                    "onPageEnd": {
                        "type": "Callback<OnPageEndEvent>",
                        "required": false,
                        "description": "网页加载完成时触发该回调，且只在主frame触发。"
                    },
                    "onControllerAttached": {
                        "type": "Callback<void>",
                        "required": false,
                        "description": "当Controller成功绑定到Web组件时触发该回调。"
                    },
                    "onLoadIntercept": {
                        "type": "Callback<OnLoadInterceptEvent, boolean>",
                        "required": false,
                        "description": "当Web组件加载url之前触发该回调，用于判断是否阻止此次访问。默认允许加载。"
                    },
                    "onProgressChange": {
                        "type": "Callback<OnProgressChangeEvent>",
                        "required": false,
                        "description": "网页加载进度变化时触发该回调。"
                    }
                }
            }
        ],
        "attributes": {
            "src": {
                "description": "网页资源地址，访问网络资源需要在AGC配置业务域名，访问本地资源仅支持包内文件（$rawfile）。不支持通过状态变量（例如@State）动态更新地址。加载的网页中支持通过JS SDK提供的接口调用系统能力，具体以JS SDK为准。",
                "params": {
                    "value": {
                        "type": "ResourceStr",
                        "required": true,
                        "description": "网页资源地址。"
                    }
                }
            },
            "controller": {
                "description": "通过AtomicServiceWebController可以控制AtomicServiceWeb组件各种行为。",
                "params": {
                    "value": {
                        "type": "AtomicServiceWebController",
                        "required": true,
                        "description": "AtomicServiceWebController对象。"
                    }
                }
            },
            "navPathStack": {
                "description": "路由栈信息。当使用NavDestination作为页面的根容器时，需传入NavDestination容器对应的NavPathStack处理页面路由。",
                "params": {
                    "value": {
                        "type": "NavPathStack",
                        "required": false,
                        "description": "路由栈信息。"
                    }
                }
            },
            "mixedMode": {
                "description": "设置是否允许加载超文本传输协议（HTTP）和超文本传输安全协议（HTTPS）混合内容，默认不允许加载HTTP和HTTPS混合内容。",
                "params": {
                    "value": {
                        "type": "MixedMode",
                        "required": false,
                        "description": "混合内容模式。"
                    }
                }
            },
            "darkMode": {
                "description": "设置Web深色模式，默认关闭。",
                "params": {
                    "value": {
                        "type": "WebDarkMode",
                        "required": false,
                        "description": "深色模式。"
                    }
                }
            },
            "forceDarkAccess": {
                "description": "设置网页是否开启强制深色模式。默认关闭。该属性仅在darkMode开启深色模式时生效。",
                "params": {
                    "value": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否开启强制深色模式。"
                    }
                }
            }
        },
        "events": {
            "onMessage": {
                "description": "H5页面通过JS SDK的postMessage()发送消息后，Web组件对应的页面返回或销毁时，触发该回调。",
                "params": {
                    "event": {
                        "type": "OnMessageEvent",
                        "required": true,
                        "description": "消息事件。"
                    }
                }
            },
            "onErrorReceive": {
                "description": "网页加载遇到错误时触发该回调。出于性能考虑，建议此回调中尽量执行简单逻辑。在无网络的情况下，触发此回调。",
                "params": {
                    "event": {
                        "type": "OnErrorReceiveEvent",
                        "required": true,
                        "description": "错误接收事件。"
                    }
                }
            },
            "onHttpErrorReceive": {
                "description": "网页加载资源遇到的HTTP错误（响应码>=400)时触发该回调。",
                "params": {
                    "event": {
                        "type": "OnHttpErrorReceiveEvent",
                        "required": true,
                        "description": "HTTP错误接收事件。"
                    }
                }
            },
            "onPageBegin": {
                "description": "网页开始加载时触发该回调，且只在主frame触发，iframe或者frameset的内容加载时不会触发此回调。",
                "params": {
                    "event": {
                        "type": "OnPageBeginEvent",
                        "required": true,
                        "description": "页面开始加载事件。"
                    }
                }
            },
            "onPageEnd": {
                "description": "网页加载完成时触发该回调，且只在主frame触发。",
                "params": {
                    "event": {
                        "type": "OnPageEndEvent",
                        "required": true,
                        "description": "页面加载完成事件。"
                    }
                }
            },
            "onControllerAttached": {
                "description": "当Controller成功绑定到Web组件时触发该回调。",
                "params": {}
            },
            "onLoadIntercept": {
                "description": "当Web组件加载url之前触发该回调，用于判断是否阻止此次访问。默认允许加载。",
                "params": {
                    "event": {
                        "type": "OnLoadInterceptEvent",
                        "required": true,
                        "description": "加载拦截事件。"
                    }
                },
                "returns": {
                    "type": "boolean",
                    "description": "是否阻止此次访问。"
                }
            },
            "onProgressChange": {
                "description": "网页加载进度变化时触发该回调。",
                "params": {
                    "event": {
                        "type": "OnProgressChangeEvent",
                        "required": true,
                        "description": "进度变化事件。"
                    }
                }
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "示例1：加载本地网页\n\n该组件通过 `AtomicServiceWeb` 组件实现了一个加载本地网页的功能。布局采用 `Column` 组件，宽度占据整个屏幕，高度根据内容自适应。`AtomicServiceWeb` 组件用于加载本地 HTML 文件，通过 `src` 属性指定本地文件路径，使用 `$rawfile` 方法引用资源文件。`controller` 属性用于控制网页的加载和交互，通过 `@State` 装饰器绑定到组件的状态中。\n\n组件的样式和外观简洁，没有额外的装饰。组件的功能主要是加载并显示本地网页内容，用户可以在应用中浏览本地网页。",
                "code": "import { AtomicServiceWeb, AtomicServiceWebController } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct WebComponent {\n  @State controller: AtomicServiceWebController = new AtomicServiceWebController();\n\n  build() {\n    Column() {\n      AtomicServiceWeb({ src: $rawfile(\"index.html\"), controller: this.controller })\n    }\n  }\n}\n\n/*\n示例2：加载在线网页\n\n该组件通过 `AtomicServiceWeb` 组件实现了一个加载在线网页的功能。布局采用 `Column` 组件，宽度占据整个屏幕，高度根据内容自适应。`AtomicServiceWeb` 组件用于加载在线网页，通过 `src` 属性指定在线网页的 URL。`controller` 属性用于控制网页的加载和交互，通过 `@State` 装饰器绑定到组件的状态中。\n\n组件的样式和外观简洁，没有额外的装饰。组件的功能主要是加载并显示在线网页内容，用户可以在应用中浏览在线网页。\n*/\n\nimport { AtomicServiceWeb, AtomicServiceWebController } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct WebComponent {\n  @State controller: AtomicServiceWebController = new AtomicServiceWebController();\n\n  build() {\n    Column() {\n      AtomicServiceWeb({ src: 'https://www.example.com', controller: this.controller })\n    }\n  }\n}\n\n/*\n示例3：NavDestination容器中加载网页\n\n该组件通过 `NavDestination` 组件和 `AtomicServiceWeb` 组件实现了一个在导航目的地中加载网页的功能。布局采用 `NavDestination` 组件，宽度占据整个屏幕，高度根据内容自适应。`AtomicServiceWeb` 组件用于加载本地 HTML 文件，通过 `src` 属性指定本地文件路径，使用 `$rawfile` 方法引用资源文件。`controller` 属性用于控制网页的加载和交互，通过 `@State` 装饰器绑定到组件的状态中。`navPathStack` 属性用于管理导航路径栈。\n\n组件的样式和外观简洁，没有额外的装饰。组件的功能主要是加载并显示本地网页内容，并在导航目的地中进行展示。用户可以在应用中浏览本地网页，并通过导航进行页面切换。\n*/\n\nimport { AtomicServiceWeb, AtomicServiceWebController } from '@kit.ArkUI';\n\n@Builder\nexport function WebComponentBuilder(name: string, param: Object) {\n  WebComponent()\n}\n\n@Component\nstruct WebComponent {\n  navPathStack: NavPathStack = new NavPathStack();\n  @State controller: AtomicServiceWebController = new AtomicServiceWebController();\n\n  build() {\n    NavDestination() {\n      AtomicServiceWeb({ src: $rawfile(\"index.html\"), controller: this.controller, navPathStack: this.navPathStack })\n    }\n    .onReady((context: NavDestinationContext) => {\n      this.navPathStack = context.pathStack;\n    })\n  }\n}\n\n/*\n示例4：设置onMessage()事件回调\n\n该组件通过 `AtomicServiceWeb` 组件实现了一个加载本地网页并设置消息回调的功能。布局采用 `Column` 组件，宽度占据整个屏幕，高度根据内容自适应。`AtomicServiceWeb` 组件用于加载本地 HTML 文件，通过 `src` 属性指定本地文件路径，使用 `$rawfile` 方法引用资源文件。`controller` 属性用于控制网页的加载和交互，通过 `@State` 装饰器绑定到组件的状态中。`onMessage` 事件回调用于处理从网页发送的消息。\n\n组件的样式和外观简洁，没有额外的装饰。组件的功能主要是加载并显示本地网页内容，并在接收到网页发送的消息时触发回调函数，将消息内容打印到控制台。\n*/\n\nimport { AtomicServiceWeb, AtomicServiceWebController, OnMessageEvent } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct WebComponent {\n  @State controller: AtomicServiceWebController = new AtomicServiceWebController();\n\n  build() {\n    Column() {\n      AtomicServiceWeb({\n        src: $rawfile(\"index.html\"),\n        controller: this.controller,\n        onMessage: (event: OnMessageEvent) => {\n          console.log(`[AtomicServiceWebLog] onMessage data=${JSON.stringify(event.data)}`);\n        }\n      })\n    }\n  }\n}\n\n/*\n示例5：设置网页加载事件回调\n\n该组件通过 `AtomicServiceWeb` 组件实现了一个加载本地网页并设置多个加载事件回调的功能。布局采用 `Column` 组件，宽度占据整个屏幕，高度根据内容自适应。`AtomicServiceWeb` 组件用于加载本地 HTML 文件，通过 `src` 属性指定本地文件路径，使用 `$rawfile` 方法引用资源文件。`controller` 属性用于控制网页的加载和交互，通过 `@State` 装饰器绑定到组件的状态中。`onErrorReceive`、`onHttpErrorReceive`、`onPageBegin` 和 `onPageEnd` 事件回调用于处理网页加载过程中的各种事件。\n\n组件的样式和外观简洁，没有额外的装饰。组件的功能主要是加载并显示本地网页内容，并在网页加载过程中触发相应的事件回调，将事件信息打印到控制台。\n*/\n\nimport {\n  AtomicServiceWeb,\n  AtomicServiceWebController,\n  OnErrorReceiveEvent,\n  OnHttpErrorReceiveEvent,\n  OnPageBeginEvent,\n  OnPageEndEvent\n} from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct WebComponent {\n  @State controller: AtomicServiceWebController = new AtomicServiceWebController();\n\n  build() {\n    Column() {\n      AtomicServiceWeb({\n        src: $rawfile('index.html'),\n        controller: this.controller,\n        onErrorReceive: (event: OnErrorReceiveEvent) => {\n          console.log(`AtomicServiceWebLog onErrorReceive event=${JSON.stringify({\n            requestUrl: event.request?.getRequestUrl(),\n            requestMethod: event.request?.getRequestMethod(),\n            errorCode: event.error?.getErrorCode(),\n            errorInfo: event.error?.getErrorInfo()\n          })}`);\n        },\n        onHttpErrorReceive: (event: OnHttpErrorReceiveEvent) => {\n          console.log(`AtomicServiceWebLog onHttpErrorReceive event=${JSON.stringify({\n            requestUrl: event.request?.getRequestUrl(),\n            requestMethod: event.request?.getRequestMethod(),\n            responseCode: event.response?.getResponseCode(),\n            responseData: event.response?.getResponseData(),\n          })}`);\n        },\n        onPageBegin: (event: OnPageBeginEvent) => {\n          console.log(`AtomicServiceWebLog onPageBegin event=${JSON.stringify({\n            url: event.url\n          })}`);\n        },\n        onPageEnd: (event: OnPageEndEvent) => {\n          console.log(`AtomicServiceWebLog onPageEnd event=${JSON.stringify({\n            url: event.url\n          })}`);\n        }\n      })\n    }\n  }\n}\n\n/*\n示例6：AtomicServiceWeb跟AtomicServiceWebController的使用示例\n\n该组件通过 `AtomicServiceWeb` 组件和 `AtomicServiceWebController` 实现了一个复杂的网页加载和控制功能。布局采用 `Column` 组件，宽度占据整个屏幕，高度根据内容自适应。`AtomicServiceWeb` 组件用于加载在线网页，通过 `src` 属性指定在线网页的 URL。`controller` 属性用于控制网页的加载和交互，通过 `@State` 装饰器绑定到组件的状态中。`onControllerAttached`、`onLoadIntercept`、`onProgressChange`、`onMessage`、`onPageBegin`、`onPageEnd`、`onHttpErrorReceive` 和 `onErrorReceive` 事件回调用于处理网页加载过程中的各种事件。\n\n组件的样式和外观简洁，没有额外的装饰。组件的功能主要是加载并显示在线网页内容，并在网页加载过程中触发相应的事件回调，将事件信息打印到控制台。此外，组件还提供了多个按钮，用于控制网页的前进、后退、刷新、加载新 URL 等操作。\n*/\n\nimport {\n  AtomicServiceWeb,\n  AtomicServiceWebController,\n  OnErrorReceiveEvent,\n  OnHttpErrorReceiveEvent,\n  OnPageBeginEvent,\n  OnPageEndEvent,\n  OnMessageEvent,\n  OnLoadInterceptEvent,\n  OnProgressChangeEvent\n} from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct WebComponent {\n  @State darkMode: WebDarkMode = WebDarkMode.On;\n  @State forceDarkAccess: boolean = true;\n  @State mixedMode: MixedMode = MixedMode.None;\n  @State controller: AtomicServiceWebController = new AtomicServiceWebController();\n  @State num: number = 1;\n\n  build() {\n    Column() {\n      Button('accessForward').onClick(() => {\n        console.log(`AtomicServiceWebLog accessForward = ${this.controller.accessForward()}`);\n      })\n      Button('accessBackward').onClick(() => {\n        console.log(`AtomicServiceWebLog accessBackward = ${this.controller.accessBackward()}`);\n      })\n      Button('accessStep').onClick(() => {\n        console.log(`AtomicServiceWebLog accessStep = ${this.controller.accessStep(1)}`);\n      })\n      Button('forward').onClick(() => {\n        console.log(`AtomicServiceWebLog forward = ${this.controller.forward()}`);\n      })\n      Button('backward').onClick(() => {\n        console.log(`AtomicServiceWebLog backward = ${this.controller.backward()}`);\n      })\n      Button('refresh').onClick(() => {\n        console.log(`AtomicServiceWebLog refresh = ${this.controller.refresh()}`);\n      })\n      Button('loadUrl').onClick(() => {\n        console.log(`AtomicServiceWebLog loadUrl = ${this.controller.loadUrl('https://www.baidu.com/')}`);\n      })\n      Button('深色模式').onClick(() => {\n        this.forceDarkAccess = !this.forceDarkAccess;\n      })\n      Button('mixedMode').onClick(() => {\n        this.mixedMode = this.mixedMode == MixedMode.None ? MixedMode.All : MixedMode.None;\n      })\n      Button('点击').onClick(() => {\n        console.log(`AtomicServiceWebLog getUserAgent = ${this.controller.getUserAgent()}`);\n        console.log(`AtomicServiceWebLog getCustomUserAgent = ${this.controller.getCustomUserAgent()}`);\n        this.controller.setCustomUserAgent('test' + this.num++);\n        console.log(`AtomicServiceWebLog getUserAgent after set = ${this.controller.getUserAgent()}`);\n        console.log(`AtomicServiceWebLog getCustomUserAgent after set = ${this.controller.getCustomUserAgent()}`);\n      })\n      AtomicServiceWeb({\n        src: 'https://www.example.com',\n        mixedMode: this.mixedMode,\n        darkMode: this.darkMode,\n        forceDarkAccess: this.forceDarkAccess,\n        controller: this.controller,\n        onControllerAttached: () => {\n          console.log(\"AtomicServiceWebLog onControllerAttached call back success\");\n        },\n        onLoadIntercept: (event: OnLoadInterceptEvent) => {\n          console.log(\"AtomicServiceWebLog onLoadIntercept call back success \" + JSON.stringify({\n            getRequestUrl: event.data.getRequestUrl(),\n            getRequestMethod: event.data.getRequestMethod(),\n            getRequestHeader: event.data.getRequestHeader(),\n            isRequestGesture: event.data.isRequestGesture(),\n            isMainFrame: event.data.isMainFrame(),\n            isRedirect: event.data.isRedirect(),\n          }))\n          return false;\n        },\n        onProgressChange: (event: OnProgressChangeEvent) => {\n          console.log(\"AtomicServiceWebLog onProgressChange call back success \" + JSON.stringify(event));\n        },\n        onMessage: (event: OnMessageEvent) => {\n          console.log(\"onMessage call back success \" + JSON.stringify(event));\n        },\n        onPageBegin: (event: OnPageBeginEvent) => {\n          console.log(\"onPageBegin call back success \" + JSON.stringify(event));\n        },\n        onPageEnd: (event: OnPageEndEvent) => {\n          console.log(\"onPageEnd call back success \" + JSON.stringify(event));\n        },\n        onHttpErrorReceive: (event: OnHttpErrorReceiveEvent) => {\n          console.log(\"onHttpErrorReceive call back success \" + JSON.stringify(event));\n        },\n        onErrorReceive: (event: OnErrorReceiveEvent) => {\n          console.log(\"onErrorReceive call back success \" + JSON.stringify(event));\n        }\n      })\n    }\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "InterstitialDialogAction": {
        "description": "InterstitialDialogAction弹框在元服务中用于在保持当前的上下文环境时，临时展示用户需关注的信息或待处理的操作，用户点击弹框的不同区域可以触发相应的动作。",
        "details": null,
        "interfaces": [
            {
                "description": "InterstitialDialogAction { uiContext: UIContext, contentNode: ComponentContent<object>, dialogParam: DialogParams, bottomOffsetType?: BottomOffset, constructor: (dialogOptions: DialogOptions), openDialog(): Callback<void>, closeDialog(): Callback<void> }",
                "params": {
                    "uiContext": {
                        "type": "UIContext",
                        "required": true,
                        "description": "UI上下文。"
                    },
                    "contentNode": {
                        "type": "ComponentContent<object>",
                        "required": true,
                        "description": "弹框内容节点。"
                    },
                    "dialogParam": {
                        "type": "DialogParams",
                        "required": true,
                        "description": "弹框参数。"
                    },
                    "bottomOffsetType": {
                        "type": "BottomOffset",
                        "required": false,
                        "description": "弹框底部偏移类型。",
                        "default": "BottomOffset.OFFSET_FOR_BAR"
                    },
                    "dialogOptions": {
                        "type": "DialogOptions",
                        "required": true,
                        "description": "弹框选项。"
                    },
                    "openDialog": {
                        "type": "Callback<void>",
                        "required": true,
                        "description": "打开弹框的回调函数。"
                    },
                    "closeDialog": {
                        "type": "Callback<void>",
                        "required": true,
                        "description": "关闭弹框的回调函数。"
                    }
                }
            }
        ],
        "attributes": {
            "dialogOptions": {
                "description": "设置弹框特有的属性以及提供给用户自定义的点击触发动作。",
                "params": {
                    "dialogOptions": {
                        "type": "DialogOptions",
                        "required": true,
                        "description": "弹框选项。"
                    }
                }
            },
            "defaultCloseAction": {
                "description": "点击弹框以及关闭按钮后执行的默认关闭行为。",
                "params": {
                    "defaultCloseAction": {
                        "type": "Callback<void>",
                        "required": true,
                        "description": "默认关闭行为的回调函数。"
                    }
                }
            },
            "iconStyle": {
                "description": "设置关闭按钮的色调样式，默认设置关闭按钮为亮色。",
                "params": {
                    "iconStyle": {
                        "type": [
                            "IconStyle.DARK",
                            "IconStyle.LIGHT"
                        ],
                        "required": false,
                        "description": "关闭按钮的色调样式。",
                        "default": "IconStyle.LIGHT"
                    }
                }
            },
            "titlePosition": {
                "description": "设置主副标题之间的上下相对位置，默认设置为主标题在副标题之上。",
                "params": {
                    "titlePosition": {
                        "type": [
                            "TitlePosition.TOP",
                            "TitlePosition.BOTTOM"
                        ],
                        "required": false,
                        "description": "主副标题的相对位置。",
                        "default": "TitlePosition.TOP"
                    }
                }
            },
            "bottomOffset": {
                "description": "设置不同情景模式下弹框距离底部的距离，判断依据为是否存在菜单栏，默认显示为不存在菜单栏情况下的距离。",
                "params": {
                    "bottomOffset": {
                        "type": [
                            "BottomOffset.OFFSET_FOR_BAR",
                            "BottomOffset.OFFSET_FOR_NONE"
                        ],
                        "required": false,
                        "description": "弹框底部偏移类型。",
                        "default": "BottomOffset.OFFSET_FOR_BAR"
                    }
                }
            }
        },
        "events": {
            "onDialogClick": {
                "description": "用户点击弹框时触发的事件。",
                "params": null,
                "returns": null
            },
            "onDialogClose": {
                "description": "用户关闭弹框时触发的事件。",
                "params": null,
                "returns": null
            }
        },
        "rules": null,
        "examples": [
            {
                "description": "该组件通过Flex布局实现了一个展示对话框的界面。布局宽度占据整个屏幕，高度设为100%，背景颜色为半透明的黑色（rgba(0, 0, 0, 0.1)）。组件的垂直方向上包含一个Row组件，内部嵌套一个Column组件。Column组件内部包含一个Text组件，用于显示“show dialog”文本。Text组件的样式包括字体大小为50vp，字体加粗（FontWeight.Bold），并且设置了点击事件。\n\n点击Text组件后，会触发一个对话框的显示。对话框的配置包括主标题和副标题，主标题颜色为RGB颜色（rgb(255, 192, 0)），副标题颜色为红色（Color.Red）。对话框的背景和前景图片分别引用了应用资源中的图片（$r('app.media.testBackgroundImg')和$r('app.media.testForegroundImg')）。对话框的关闭按钮样式为亮色调（IconStyle.LIGHT），主标题和副标题的相对位置设置为主标题在副标题下方（TitlePosition.BOTTOM），底部距离类型设置为存在菜单栏情况下的距离（BottomOffset.OFFSET_FOR_BAR）。\n\n对话框的点击和关闭事件分别绑定了回调函数，用于在控制台输出相应的日志信息。",
                "code": "// 导入必要的模块和组件\nimport { getMyUiContext } from '../entryability/EntryAbility';\nimport { UIContext, InterstitialDialogAction, IconStyle, TitlePosition, BottomOffset } from '@kit.ArkUI';\n\n// 定义Index组件，作为页面的入口组件\n@Entry\n@Component\nstruct Index {\n  build() {\n    // 使用Row组件作为根布局，占据整个屏幕宽度\n    Row() {\n      // 使用Column组件作为内部布局，占据整个屏幕宽度\n      Column() {\n        // 创建一个Text组件，显示“show dialog”文本\n        Text(\"show dialog\")\n          .fontSize(50) // 设置字体大小为50vp\n          .fontWeight(FontWeight.Bold) // 设置字体加粗\n          .onClick(() => { // 设置点击事件\n            // 获取UIContext对象\n            let ctx: UIContext | null = getMyUiContext();\n            // 创建InterstitialDialogAction对象，配置对话框的各项属性\n            let interstitialDialogAction: InterstitialDialogAction = new InterstitialDialogAction({\n              uiContext: ctx as UIContext, // 设置UIContext\n              title: \"主标题\", // 设置主标题文本\n              subtitle: \"副标题\", // 设置副标题文本\n              titleColor: 'rgb(255, 192, 0)', // 设置主标题颜色为RGB颜色\n              subtitleColor: Color.Red, // 设置副标题颜色为红色\n              backgroundImage: $r('app.media.testBackgroundImg'), // 设置背景图片\n              foregroundImage: $r('app.media.testForegroundImg'), // 设置前景图片\n              iconStyle: IconStyle.LIGHT, // 设置关闭按钮样式为亮色调\n              titlePosition: TitlePosition.BOTTOM, // 设置主标题在副标题下方\n              bottomOffsetType: BottomOffset.OFFSET_FOR_BAR, // 设置底部距离类型为存在菜单栏情况下的距离\n              onDialogClick: () => { console.log('outer dialog click action') }, // 设置对话框点击事件回调\n              onDialogClose: () => { console.log('outer close action') } // 设置对话框关闭事件回调\n            });\n            // 打开对话框\n            interstitialDialogAction.openDialog();\n          })\n      }\n      .width('100%') // 设置Column组件宽度为100%\n    }\n    .height('100%') // 设置Row组件高度为100%\n    .backgroundColor('rgba(0, 0, 0, 0.1)') // 设置背景颜色为半透明的黑色\n  }\n}"
            },
            {
                "description": "该示例展示了如何在鸿蒙ArkUI中创建一个带有主标题和副标题的对话框，并通过点击按钮触发对话框的显示。布局上，主标题位于副标题的上方，对话框的底部距离设置为不存在菜单栏的情况下的距离。样式上，主标题和副标题分别设置了不同的颜色，关闭按钮设置为暗色调。功能上，点击按钮后会弹出对话框，并可以响应对话框的点击和关闭事件。\n\n布局属性：\n- 按钮的宽度占据整个屏幕，高度为100%。\n- 按钮的背景颜色为半透明的黑色（rgba(0, 0, 0, 0.1)）。\n- 按钮内的文本字体大小为50vp，字体加粗。\n\n组件的样式和外观：\n- 主标题颜色为RGB(255, 192, 0)。\n- 副标题颜色为红色。\n- 关闭按钮的图标样式为暗色调。\n- 对话框的背景图片和前景图片分别引用了资源文件app.media.testBackgroundImg和app.media.testForegroundImg。\n\n组件的排列和嵌套关系：\n- 按钮位于Row组件内，Row组件的高度为100%。\n- 按钮内的文本位于Column组件内，Column组件的宽度为100%。\n\n组件的功能和交互：\n- 点击按钮后，会调用getMyUiContext()方法获取UIContext，并创建一个InterstitialDialogAction对象。\n- 通过调用openDialog()方法显示对话框。\n- 对话框的点击和关闭事件分别绑定了回调函数，用于在控制台输出日志。",
                "code": "import { getMyUiContext } from '../entryability/EntryAbility';\nimport { UIContext, InterstitialDialogAction, IconStyle, TitlePosition, BottomOffset } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column() {\n        Text(\"show dialog\")\n          .fontSize(50) // 设置文本字体大小为50vp\n          .fontWeight(FontWeight.Bold) // 设置文本字体加粗\n          .onClick(() => { // 设置点击事件\n            let ctx: UIContext | null = getMyUiContext(); // 获取UIContext\n            let interstitialDialogAction: InterstitialDialogAction = new InterstitialDialogAction({\n              uiContext: ctx as UIContext, // 设置UIContext\n              title: \"主标题\", // 设置主标题\n              subtitle: \"副标题\", // 设置副标题\n              titleColor: 'rgb(255, 192, 0)', // 设置主标题颜色为RGB(255, 192, 0)\n              subtitleColor: Color.Red, // 设置副标题颜色为红色\n              backgroundImage: $r('app.media.testBackgroundImg'), // 设置背景图片\n              foregroundImage: $r('app.media.testForegroundImg'), // 设置前景图片\n              iconStyle: IconStyle.DARK, // 设置关闭按钮图标样式为暗色调\n              titlePosition: TitlePosition.TOP, // 设置主标题位于副标题上方\n              bottomOffsetType: BottomOffset.OFFSET_FOR_NONE, // 设置底部距离为不存在菜单栏的情况下的距离\n              onDialogClick: () => { console.log('outer dialog click action') }, // 设置对话框点击事件回调\n              onDialogClose: () => { console.log('outer close action') } // 设置对话框关闭事件回调\n            });\n            interstitialDialogAction.openDialog(); // 显示对话框\n          })\n      }\n      .width('100%') // 设置Column宽度为100%\n    }\n    .height('100%') // 设置Row高度为100%\n    .backgroundColor('rgba(0, 0, 0, 0.1)') // 设置背景颜色为半透明的黑色\n  }\n}"
            }
        ],
        "is_common_attrs": true
    },
    "FullScreenLaunchComponent": {
        "description": "显示错误信息的组件，包含错误代码和详细信息。可以包含单个子组件。",
        "interfaces": [
            {
                "description": "Error(code: string, message: string)",
                "params": {
                    "code": {
                        "type": "string",
                        "required": true,
                        "description": "错误代码。"
                    },
                    "message": {
                        "type": "string",
                        "required": true,
                        "description": "错误信息。"
                    }
                }
            }
        ],
        "attributes": {
            "errorCode": {
                "description": "错误代码。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "错误代码。"
                    }
                }
            },
            "errorMessage": {
                "description": "错误信息。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": true,
                        "description": "错误信息。"
                    }
                }
            },
            "errorDetails": {
                "description": "错误的详细信息。",
                "params": {
                    "value": {
                        "type": "string",
                        "required": false,
                        "description": "错误的详细信息。"
                    }
                }
            }
        },
        "events": {
            "onError": {
                "description": "onError(event: (code: string, message: string) => void)",
                "params": {
                    "code": {
                        "type": "string",
                        "required": true,
                        "description": "错误代码。"
                    },
                    "message": {
                        "type": "string",
                        "required": true,
                        "description": "错误信息。"
                    }
                }
            }
        },
        "examples": []
    },
    "NavPushPathHelper": {
        "description": "NavPushPathHelper组件用于在跳转目标NavDestination在不同的hsp分包且未被主包依赖时，先下载安装相应hsp分包，再将指定的NavDestination页面信息入栈。使Navigation支持动态加载hsp分包后再跳转。",
        "details": "该组件从API Version 12开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。",
        "interfaces": [
            {
                "description": "constructor(navPathStack: NavPathStack): void",
                "params": {
                    "navPathStack": {
                        "type": "NavPathStack",
                        "required": true,
                        "description": "NavPushPathHelper的构造函数参数，用于初始化NavPathStack对象。"
                    }
                }
            },
            {
                "description": "pushPath(moduleName: string, info: NavPathInfo, animated?: boolean): Promise<void>",
                "params": {
                    "moduleName": {
                        "type": "string",
                        "required": true,
                        "description": "目标NavDestination所在分包的moduleName。"
                    },
                    "info": {
                        "type": "NavPathInfo",
                        "required": true,
                        "description": "新栈顶页面参数信息。"
                    },
                    "animated": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否支持转场动画。",
                        "default": true
                    }
                }
            },
            {
                "description": "pushPath(moduleName: string, info: NavPathInfo, options?: NavigationOptions): Promise<void>",
                "params": {
                    "moduleName": {
                        "type": "string",
                        "required": true,
                        "description": "目标NavDestination所在分包的moduleName。"
                    },
                    "info": {
                        "type": "NavPathInfo",
                        "required": true,
                        "description": "新栈顶页面参数信息。"
                    },
                    "options": {
                        "type": "NavigationOptions",
                        "required": false,
                        "description": "导航选项，具体根据options中指定不同的LaunchMode，有不同的行为。"
                    }
                }
            },
            {
                "description": "pushPathByName(moduleName: string, name: string, param: Object, animated?: boolean): Promise<void>",
                "params": {
                    "moduleName": {
                        "type": "string",
                        "required": true,
                        "description": "目标NavDestination所在分包的moduleName。"
                    },
                    "name": {
                        "type": "string",
                        "required": true,
                        "description": "目标NavDestination的名称。"
                    },
                    "param": {
                        "type": "Object",
                        "required": true,
                        "description": "传递的数据。"
                    },
                    "animated": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否支持转场动画。",
                        "default": true
                    }
                }
            },
            {
                "description": "pushPathByName(moduleName: string, name: string, param: Object, onPop: Callback<PopInfo>, animated?: boolean): Promise<void>",
                "params": {
                    "moduleName": {
                        "type": "string",
                        "required": true,
                        "description": "目标NavDestination所在分包的moduleName。"
                    },
                    "name": {
                        "type": "string",
                        "required": true,
                        "description": "目标NavDestination的名称。"
                    },
                    "param": {
                        "type": "Object",
                        "required": true,
                        "description": "传递的数据。"
                    },
                    "onPop": {
                        "type": "Callback<PopInfo>",
                        "required": true,
                        "description": "页面出栈时处理返回结果的回调。"
                    },
                    "animated": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否支持转场动画。",
                        "default": true
                    }
                }
            },
            {
                "description": "pushDestination(moduleName: string, info: NavPathInfo, animated?: boolean): Promise<void>",
                "params": {
                    "moduleName": {
                        "type": "string",
                        "required": true,
                        "description": "目标NavDestination所在分包的moduleName。"
                    },
                    "info": {
                        "type": "NavPathInfo",
                        "required": true,
                        "description": "新栈顶页面参数信息。"
                    },
                    "animated": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否支持转场动画。",
                        "default": true
                    }
                }
            },
            {
                "description": "pushDestination(moduleName: string, info: NavPathInfo, options?: NavigationOptions): Promise<void>",
                "params": {
                    "moduleName": {
                        "type": "string",
                        "required": true,
                        "description": "目标NavDestination所在分包的moduleName。"
                    },
                    "info": {
                        "type": "NavPathInfo",
                        "required": true,
                        "description": "新栈顶页面参数信息。"
                    },
                    "options": {
                        "type": "NavigationOptions",
                        "required": false,
                        "description": "导航选项，具体根据options中指定不同的LaunchMode，有不同的行为。"
                    }
                }
            },
            {
                "description": "pushDestinationByName(moduleName: string, name: string, param: Object, animated?: boolean): Promise<void>",
                "params": {
                    "moduleName": {
                        "type": "string",
                        "required": true,
                        "description": "目标NavDestination所在分包的moduleName。"
                    },
                    "name": {
                        "type": "string",
                        "required": true,
                        "description": "目标NavDestination的名称。"
                    },
                    "param": {
                        "type": "Object",
                        "required": true,
                        "description": "传递的数据。"
                    },
                    "animated": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否支持转场动画。",
                        "default": true
                    }
                }
            },
            {
                "description": "pushDestinationByName(moduleName: string, name: string, param: Object, onPop: Callback<PopInfo>, animated?: boolean): Promise<void>",
                "params": {
                    "moduleName": {
                        "type": "string",
                        "required": true,
                        "description": "目标NavDestination所在分包的moduleName。"
                    },
                    "name": {
                        "type": "string",
                        "required": true,
                        "description": "目标NavDestination的名称。"
                    },
                    "param": {
                        "type": "Object",
                        "required": true,
                        "description": "传递的数据。"
                    },
                    "onPop": {
                        "type": "Callback<PopInfo>",
                        "required": true,
                        "description": "页面出栈时处理返回结果的回调。"
                    },
                    "animated": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否支持转场动画。",
                        "default": true
                    }
                }
            },
            {
                "description": "replacePath(moduleName: string, info: NavPathInfo, animated?: boolean): Promise<void>",
                "params": {
                    "moduleName": {
                        "type": "string",
                        "required": true,
                        "description": "目标NavDestination所在分包的moduleName。"
                    },
                    "info": {
                        "type": "NavPathInfo",
                        "required": true,
                        "description": "新栈顶页面参数信息。"
                    },
                    "animated": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否支持转场动画。",
                        "default": true
                    }
                }
            },
            {
                "description": "replacePath(moduleName: string, info: NavPathInfo, options?: NavigationOptions): Promise<void>",
                "params": {
                    "moduleName": {
                        "type": "string",
                        "required": true,
                        "description": "目标NavDestination所在分包的moduleName。"
                    },
                    "info": {
                        "type": "NavPathInfo",
                        "required": true,
                        "description": "新栈顶页面参数信息。"
                    },
                    "options": {
                        "type": "NavigationOptions",
                        "required": false,
                        "description": "导航选项，具体根据options中指定不同的LaunchMode，有不同的行为。"
                    }
                }
            },
            {
                "description": "replacePathByName(moduleName: string, name: string, param: Object, animated?: boolean): Promise<void>",
                "params": {
                    "moduleName": {
                        "type": "string",
                        "required": true,
                        "description": "目标NavDestination所在分包的moduleName。"
                    },
                    "name": {
                        "type": "string",
                        "required": true,
                        "description": "目标NavDestination的名称。"
                    },
                    "param": {
                        "type": "Object",
                        "required": true,
                        "description": "传递的数据。"
                    },
                    "animated": {
                        "type": "boolean",
                        "required": false,
                        "description": "是否支持转场动画。",
                        "default": true
                    }
                }
            }
        ],
        "attributes": {},
        "events": {},
        "rules": null,
        "examples": [
            {
                "description": "主包：\n该组件通过 Navigation 组件实现了一个页面导航的示例。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上包含一个按钮，按钮的宽度为 80%，高度为 40vp，边距为 20vp。按钮的样式为胶囊形状，背景颜色为默认主题色。按钮的功能包括点击事件，用户可以通过点击按钮触发页面导航操作，导航到名为 'hsptest1' 的页面，并传递参数 { name: 'pageOne' }。导航操作支持错误处理，如果导航失败，会输出错误信息到控制台。",
                "code": "import { NavPushPathHelper } from '@kit.ArkUI'\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct NavigationExample {\n  pageInfo: NavPathStack = new NavPathStack()\n  helper: NavPushPathHelper = new NavPushPathHelper(this.pageInfo)\n\n  build() {\n    Navigation(this.pageInfo) {\n      Column() {\n        Button('StartTest', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.helper.pushPath('hsptest1', { name: 'pageOne' }, false)\n              .catch((error: BusinessError) => {\n                console.error(`[pushPath]failed, error code = ${error.code}, error.message = ${error.message}.`);\n              }).then(() => {\n                console.error('[pushPath]success.');\n              }); \n          })\n      }\n    }.title('NavIndex')\n  }\n}\n\n/*\n分包 hsptest1：\n该组件通过 Navigation 组件实现了一个页面导航的示例。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上包含多个按钮，每个按钮的宽度为 80%，高度为 35vp，边距为 10vp。按钮的样式为胶囊形状，背景颜色为默认主题色。按钮的功能包括点击事件，用户可以通过点击按钮触发不同的页面导航操作，导航到名为 'hsptest2' 的页面，并传递不同的参数和回调函数。导航操作支持错误处理，如果导航失败，会输出错误信息到控制台。\n*/\n\nimport { NavPushPathHelper } from '@kit.ArkUI'\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nclass TmpClass {\n  count: number = 10\n}\n\nclass ParamWithOp {\n  operation: number = 1\n  count: number = 10\n}\n\n@Builder\nexport function PageOneBuilder(name: string, param: Object) {\n  PageOne()\n}\n\n@Component\nexport struct PageOne {\n  pageInfo: NavPathStack = new NavPathStack();\n  helper: NavPushPathHelper = new NavPushPathHelper(this.pageInfo)\n  @State message: string = 'Hello World'\n\n  build() {\n    NavDestination() {\n      Column() {\n        Text(this.message)\n          .width('80%')\n          .height(50)\n          .margin(10)\n\n        Button('pushPath', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(35)\n          .margin(10)\n          .onClick(() => {\n            this.helper.pushPath('hsptest2', { name: 'pageTwo', param: new ParamWithOp(), onPop: (popInfo: PopInfo) => {\n              this.message = '[pushPath]last page is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result);\n            }}).catch((error: BusinessError) => {\n              console.error(`[pushPath]failed, error code = ${error.code}, error.message = ${error.message}.`);\n            }).then(() => {\n              console.log('[pushPath]success.');\n            });\n          })\n\n        Button('pushPath with NavigationOptions', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(35)\n          .margin(10)\n          .onClick(() => {\n            this.helper.pushPath('hsptest2', { name: 'pageTwo', param: new ParamWithOp(), onPop: (popInfo: PopInfo) => {\n              this.message = '[pushPath with NavigationOptions]last page is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result);\n            }}, {launchMode:0, animated:true}).catch((error: BusinessError) => {\n              console.error(`[pushPath with NavigationOptions]failed, error code = ${error.code}, error.message = ${error.message}.`);\n            }).then(() => {\n              console.log('[pushPath with NavigationOptions]success.');\n            });\n          })\n\n        Button('pushPathByName', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(35)\n          .margin(10)\n          .onClick(() => {\n            let tmp = new TmpClass()\n            this.helper.pushPathByName('hsptest2', 'pageTwo', tmp, (popInfo) => {\n              this.message = '[pushPathByName]last page is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result);\n            }).catch((error: BusinessError) => {\n              console.error(`[pushPathByName]failed, error code = ${error.code}, error.message = ${error.message}.`);\n            }).then(() => {\n              console.log('[pushPathByName]success.');\n            });\n          })\n\n        Button('pushPathByNameWithoutOnPop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(35)\n          .margin(10)\n          .onClick(() => {\n            let tmp = new TmpClass()\n            this.helper.pushPathByName('hsptest2', 'pageTwo', tmp, true)\n              .catch((error: BusinessError) => {\n                console.error(`[pushPathByNameWithoutOnPop]failed, error code = ${error.code}, error.message = ${error.message}.`);\n              }).then(() => {\n                console.log('[pushPathByNameWithoutOnPop]success.');\n              });\n          })\n\n        Button('pushDestination', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(35)\n          .margin(10)\n          .onClick(() => {\n            let tmp = new TmpClass()\n            this.helper.pushDestination('hsptest2', { name: 'pageTwo', param: new ParamWithOp(), onPop: (popInfo: PopInfo) => {\n              this.message = '[pushDestination]last page is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result);\n            }}).catch((error: BusinessError) => {\n              console.error(`[pushDestination]failed, error code = ${error.code}, error.message = ${error.message}.`);\n            }).then(() => {\n              console.error('[pushDestination]success.');\n            });\n          })\n\n        Button('pushDestination with NavigationOptions', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(35)\n          .margin(10)\n          .onClick(() => {\n            let tmp = new TmpClass()\n            this.helper.pushDestination('hsptest2', { name: 'pageTwo', param: new ParamWithOp(), onPop: (popInfo: PopInfo) => {\n              this.message = '[pushDestination with NavigationOptions]last page is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result);\n            }}, {launchMode:0, animated:true}).catch((error: BusinessError) => {\n              console.error(`[pushDestination with NavigationOptions]failed, error code = ${error.code}, error.message = ${error.message}.`);\n            }).then(() => {\n              console.error('[pushDestination with NavigationOptions]success.');\n            });\n          })\n\n        Button('pushDestinationByName', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(35)\n          .margin(10)\n          .onClick(() => {\n            let tmp = new TmpClass()\n            this.helper.pushDestinationByName('hsptest2','pageTwo', tmp, (popInfo) => {\n              this.message = '[pushDestinationByName]last page is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result);\n            }).catch((error: BusinessError) => {\n              console.error(`[pushDestinationByName]failed, error code = ${error.code}, error.message = ${error.message}.`);\n            }).then(() => {\n              console.error('[pushDestinationByName]success.');\n            });\n          })\n\n        Button('pushDestinationByNameWithoutOnPop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(35)\n          .margin(10)\n          .onClick(() => {\n            let tmp = new TmpClass()\n            this.helper.pushDestinationByName('hsptest2','pageTwo', tmp, true)\n              .catch((error: BusinessError) => {\n                console.error(`[pushDestinationByNameWithoutOnPop]failed, error code = ${error.code}, error.message = ${error.message}.`);\n              }).then(() => {\n                console.error('[pushDestinationByNameWithoutOnPop]success.');\n              });\n          })\n\n        Button('replacePath', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(35)\n          .margin(10)\n          .onClick(() => {\n            this.helper.replacePath('hsptest2', { name: 'pageTwo', param: new ParamWithOp(), onPop: (popInfo: PopInfo) => {\n              this.message = '[replacePath]last page is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result);\n            }}).catch((error: BusinessError) => {\n              console.error(`[replacePath]failed, error code = ${error.code}, error.message = ${error.message}.`);\n            }).then(() => {\n              console.log('[replacePath]success.');\n            });\n          })\n\n        Button('replacePath with NavigationOptions', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(35)\n          .margin(10)\n          .onClick(() => {\n            this.helper.replacePath('hsptest2', { name: 'pageTwo', param: new ParamWithOp(), onPop: (popInfo: PopInfo) => {\n              this.message = '[replacePath with NavigationOptions]last page is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result);\n            }}, {launchMode:0, animated:true}).catch((error: BusinessError) => {\n              console.error(`[replacePath with NavigationOptions]failed, error code = ${error.code}, error.message = ${error.message}.`);\n            }).then(() => {\n              console.log('[replacePath with NavigationOptions]success.');\n            });\n          })\n\n        Button('replacePathByName', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(35)\n          .margin(10)\n          .onClick(() => {\n            let tmp = new TmpClass()\n            this.helper.replacePathByName('hsptest2', 'pageTwo', tmp)\n              .catch((error: BusinessError) => {\n                console.error(`[replacePathByName]failed, error code = ${error.code}, error.message = ${error.message}.`);\n              }).then(() => {\n                console.log('[replacePathByName]success.');\n              });\n          })\n      }.width('100%').height('100%')\n    }.title('pageOne')\n    .onBackPressed(() => {\n      this.pageInfo.pop({ number: 1 }) \n      return true\n    }).onReady((context: NavDestinationContext) => {\n      this.pageInfo = context.pathStack;\n      this.helper = new NavPushPathHelper(this.pageInfo);\n    })\n  }\n}\n\n{\n  \"routerMap\": [\n    {\n      \"name\": \"pageOne\",\n      \"pageSourceFile\": \"src/main/ets/pages/PageOne.ets\",\n      \"buildFunction\": \"PageOneBuilder\",\n      \"data\": {\n        \"description\": \"this is pageOne\"\n      }\n    }\n  ]\n}\n\n/*\n分包 hsptest2：\n该组件通过 Navigation 组件实现了一个页面导航的示例。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上包含一个按钮，按钮的宽度为 80%，高度为 40vp，边距为 20vp。按钮的样式为胶囊形状，背景颜色为默认主题色。按钮的功能包括点击事件，用户可以通过点击按钮触发页面返回操作，并传递结果参数。返回操作支持错误处理，如果返回失败，会输出错误信息到控制台。\n*/\n\nclass resultClass {\n  constructor(count: number) {\n    this.count = count;\n  }\n  count: number = 10\n}\n\n@Builder\nexport function PageTwoBuilder() {\n  PageTwo()\n}\n\n@Component\nexport struct PageTwo {\n  pathStack: NavPathStack = new NavPathStack()\n\n  build() {\n    NavDestination() {\n      Column() {\n        Button('pop', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pathStack.pop(new resultClass(1)); \n          })\n      }.width('100%').height('100%')\n    }.title('pageTwo')\n    .onBackPressed(() => {\n      this.pathStack.pop(new resultClass(0)); \n      return true;\n    }).onReady((context: NavDestinationContext) => {\n      this.pathStack = context.pathStack\n    })\n  }\n}\n\n{\n  \"routerMap\": [\n    {\n      \"name\": \"pageTwo\",\n      \"pageSourceFile\": \"src/main/ets/pages/PageTwo.ets\",\n      \"buildFunction\": \"PageTwoBuilder\",\n      \"data\": {\n        \"description\": \"this is pageTwo\"\n      }\n    }\n  ]\n}"
            }
        ],
        "is_common_attrs": false
    },
    "ForEach": {
        "description": "ForEach接口基于数组类型数据来进行循环渲染，需要与容器组件配合使用，且接口返回的组件应当是允许包含在ForEach父容器组件中的子组件。例如，ListItem组件要求ForEach的父容器组件必须为List组件。",
        "details": "ForEach的itemGenerator函数可以包含if/else条件渲染逻辑。另外，也可以在if/else条件渲染语句中使用ForEach组件。在初始化渲染时，ForEach会加载数据源的所有数据，并为每个数据项创建对应的组件，然后将其挂载到渲染树上。如果数据源非常大或有特定的性能需求，建议使用LazyForEach组件。",
        "interfaces": [
            {
                "description": "ForEach(arr: Array<Object>, itemGenerator: (item: Object, index: number) => void, keyGenerator?: (item: Object, index: number) => string)",
                "params": {
                    "arr": {
                        "type": "Array<Object>",
                        "required": true,
                        "description": "数据源，为Array类型的数组。可以设置为空数组，此时不会创建子组件。可以设置返回值为数组类型的函数，例如arr.slice(1, 3)，但设置的函数不应改变包括数组本身在内的任何状态变量，例如不应使用Array.splice(),Array.sort()或Array.reverse()这些会改变原数组的函数。"
                    },
                    "itemGenerator": {
                        "type": "(item: Object, index: number) => void",
                        "required": true,
                        "description": "组件生成函数。为数组中的每个元素创建对应的组件。item参数：arr数组中的数据项。index参数（可选）：arr数组中的数据项索引。组件的类型必须是ForEach的父容器所允许的。例如，ListItem组件要求ForEach的父容器组件必须为List组件。"
                    },
                    "keyGenerator": {
                        "type": "(item: Object, index: number) => string",
                        "required": false,
                        "description": "键值生成函数。为数据源arr的每个数组项生成唯一且持久的键值。函数返回值为开发者自定义的键值生成规则。item参数：arr数组中的数据项。index参数（可选）：arr数组中的数据项索引。如果函数缺省，框架默认的键值生成函数为(item: T, index: number) => { return index + '__' + JSON.stringify(item); }。键值生成函数不应改变任何组件状态。"
                    }
                }
            }
        ],
        "attributes": {},
        "events": {
            "onMove12+": {
                "description": "onMove(handler: Optional<(from: index, to: index) => void>): T。拖拽排序数据移动回调。只有在List组件中使用，并且ForEach每次迭代都生成一个ListItem组件时才生效拖拽排序。",
                "params": {
                    "from": {
                        "type": "number",
                        "required": true,
                        "description": "数据源移动起始索引号。"
                    },
                    "to": {
                        "type": "number",
                        "required": true,
                        "description": "数据源移动目标索引号。"
                    }
                }
            }
        },
        "rules": [
            "ForEach的itemGenerator函数可以包含if/else条件渲染逻辑。",
            "也可以在if/else条件渲染语句中使用ForEach组件。",
            "在初始化渲染时，ForEach会加载数据源的所有数据，并为每个数据项创建对应的组件，然后将其挂载到渲染树上。",
            "如果数据源非常大或有特定的性能需求，建议使用LazyForEach组件。"
        ],
        "examples": [],
        "is_common_attrs": true
    },
    "LazyForEach": {
        "description": "LazyForEach从提供的数据源中按需迭代数据，并在每次迭代过程中创建相应的组件。当在滚动容器中使用了LazyForEach，框架会根据滚动容器可视区域按需创建组件，当组件滑出可视区域外时，框架会进行组件销毁回收以降低内存占用。",
        "interfaces": [
            {
                "description": "LazyForEach(dataSource: IDataSource, itemGenerator: (item: Object, index: number) => void, keyGenerator?: (item: Object, index: number) => string)",
                "params": {
                    "dataSource": {
                        "type": "IDataSource",
                        "required": true,
                        "description": "LazyForEach数据源，需要开发者实现相关接口。"
                    },
                    "itemGenerator": {
                        "type": "(item: Object, index: number) => void",
                        "required": true,
                        "description": "子组件生成函数，为数组中的每一个数据项创建一个子组件。"
                    },
                    "keyGenerator": {
                        "type": "(item: Object, index: number) => string",
                        "required": false,
                        "description": "键值生成函数，用于给数据源中的每一个数据项生成唯一且固定的键值。"
                    }
                }
            },
            {
                "description": "onMove(handler: Optional<(from: index, to: index) => void>): T",
                "params": {
                    "handler": {
                        "type": "(from: number, to: number) => void",
                        "required": false,
                        "description": "拖拽排序数据移动回调。只有在List组件中使用，并且LazyForEach每次迭代都生成一个ListItem组件时才生效拖拽排序。"
                    }
                }
            }
        ],
        "attributes": {},
        "events": {},
        "rules": [
            "itemGenerator的函数体必须使用大括号{...}。",
            "itemGenerator每次迭代只能并且必须生成一个子组件。",
            "itemGenerator中可以使用if语句，但是必须保证if语句每个分支都会创建一个相同类型的子组件。",
            "itemGenerator中不允许使用ForEach和LazyForEach语句。",
            "数据源中的每一个数据项生成的键值不能重复。"
        ],
        "examples": []
    },
    "Repeat": {
        "description": "Repeat组件不开启virtualScroll开关时，Repeat基于数组类型数据来进行循环渲染，需要与容器组件配合使用，且接口返回的组件应当是允许包含在Repeat父容器组件中的子组件。Repeat循环渲染和ForEach相比有两个区别，一是优化了部分更新场景下的渲染性能，二是组件生成函数的索引index由框架侧来维护。Repeat组件开启virtualScroll开关时，Repeat将从提供的数据源中按需迭代数据，并在每次迭代过程中创建相应的组件。当在滚动容器中使用了Repeat，框架会根据滚动容器可视区域按需创建组件，当组件滑出可视区域外时，框架会缓存组件，并在下一次迭代中使用。",
        "details": "本模块首批接口从API version 12开始支持。后续版本的新增接口，采用上角标单独标记接口的起始版本。当前状态管理（V2试用版）仍在逐步开发中，相关功能尚未成熟，建议开发者尝鲜试用。卡片能力：从API version 12开始，该接口支持在ArkTS卡片中使用。系统能力：SystemCapability.ArkUI.ArkUI.Full",
        "interfaces": [
            {
                "description": "Repeat(arr: Array<T>)",
                "params": {
                    "arr": {
                        "type": "Array<T>",
                        "required": true,
                        "description": "数据源，为Array<T>类型的数组，由开发者决定数据类型。"
                    }
                }
            }
        ],
        "attributes": {
            "each": {
                "description": "组件生成函数。template和templateId匹配不上的数据项走默认生成函数each。",
                "params": {
                    "itemGenerator": {
                        "type": "(repeatItem: RepeatItem<T>) => void",
                        "required": true,
                        "description": "组件生成函数。"
                    }
                }
            },
            "key": {
                "description": "键值生成函数。",
                "params": {
                    "keyGenerator": {
                        "type": "(item: T, index: number) => string",
                        "required": true,
                        "description": "键值生成函数。"
                    }
                }
            },
            "virtualScroll": {
                "description": "Repeat开启虚拟滚动。",
                "params": {
                    "virtualScrollOptions": {
                        "type": "VirtualScrollOptions",
                        "required": false,
                        "description": "虚拟滚动配置项。"
                    }
                }
            },
            "template": {
                "description": "复用模板。",
                "params": {
                    "type": {
                        "type": "string",
                        "required": true,
                        "description": "当前模板类型。"
                    },
                    "itemBuilder": {
                        "type": "RepeatItemBuilder<T>",
                        "required": true,
                        "description": "组件生成函数。"
                    },
                    "templateOptions": {
                        "type": "TemplateOptions",
                        "required": false,
                        "description": "当前模板配置项。"
                    }
                }
            },
            "templateId": {
                "description": "为当前数据项分配templateId。",
                "params": {
                    "typedFunc": {
                        "type": "TemplateTypedFunc<T>",
                        "required": true,
                        "description": "生成当前数据项对应的templateId。"
                    }
                }
            }
        },
        "events": {},
        "rules": null,
        "examples": [],
        "is_common_attrs": true
    }
}