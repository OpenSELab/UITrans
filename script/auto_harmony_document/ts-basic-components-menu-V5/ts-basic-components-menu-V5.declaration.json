{
    "description": "以垂直列表形式显示的菜单。",
    "details": "Menu组件需和bindMenu或bindContextMenu方法配合使用，不支持作为普通组件单独使用。",
    "interfaces": [
        {
            "description": "Menu()",
            "params": {}
        }
    ],
    "attributes": {
        "fontSize": {
            "description": "统一设置Menu中所有文本的尺寸。",
            "params": {
                "value": {
                    "type": "Length",
                    "required": true,
                    "description": "Menu中所有文本的尺寸，Length为number类型时，使用fp单位。"
                }
            }
        },
        "font": {
            "description": "统一设置Menu中所有文本的尺寸。",
            "params": {
                "value": {
                    "type": "Font",
                    "required": true,
                    "description": "Menu中所有文本的尺寸。",
                    "default": {
                        "size": 16,
                        "family": "HarmonyOS Sans",
                        "weight": "FontWeight.Medium",
                        "style": "FontStyle.Normal"
                    }
                }
            }
        },
        "fontColor": {
            "description": "统一设置Menu中所有文本的颜色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "Menu中所有文本的颜色。"
                }
            }
        },
        "radius": {
            "description": "设置Menu边框圆角半径。",
            "params": {
                "value": {
                    "type": [
                        "Dimension",
                        "BorderRadiuses"
                    ],
                    "required": true,
                    "description": "Menu边框圆角半径。",
                    "default": "2in1设备上默认值为8vp，其他设备上默认值为20vp。"
                }
            }
        },
        "width": {
            "description": "设置Menu边框宽度，支持设置的最小宽度为64vp。",
            "params": {
                "value": {
                    "type": "Length",
                    "required": true,
                    "description": "Menu边框宽度。"
                }
            }
        },
        "menuItemDivider": {
            "description": "设置menuItem分割线样式, 不设置该属性则不展示分割线。",
            "params": {
                "options": {
                    "type": [
                        "DividerStyleOptions",
                        "undefined"
                    ],
                    "required": true,
                    "description": "设置menuItem分割线样式。"
                }
            }
        },
        "menuItemGroupDivider": {
            "description": "设置menuItemGroup上下分割线的样式, 不设置该属性则默认展示分割线。",
            "params": {
                "options": {
                    "type": [
                        "DividerStyleOptions",
                        "undefined"
                    ],
                    "required": true,
                    "description": "设置menuItemGroup顶部和底部分割线样式。"
                }
            }
        },
        "subMenuExpandingMode": {
            "description": "设置Menu子菜单展开样式。",
            "params": {
                "mode": {
                    "type": "SubMenuExpandingMode",
                    "required": true,
                    "description": "Menu子菜单展开样式。"
                }
            }
        }
    },
    "events": {},
    "rules": [
        "菜单和菜单项宽度计算规则：布局过程中，期望每个菜单项的宽度一致。若子组件设置了宽度，则以尺寸计算规则为准。不设置宽度的情况：菜单组件会对子组件MenuItem、MenuItemGroup设置默认2栅格的宽度，若菜单项内容区比2栅格宽，则会自适应撑开。设置宽度的情况：菜单组件会对子组件MenuItem、MenuItemGroup设置减去padding后的固定宽度。"
    ],
    "examples": [
        {
            "description": "该组件实现了一个带有符号类型图标的普通菜单。布局宽度占据整个屏幕，高度设为 100%，内边距为左右 0、顶部 0。组件的垂直方向上被分为一个部分，包含一个文本提示和一个菜单。文本提示位于顶部，菜单通过点击文本提示触发显示。\n菜单的样式包括图标大小、字体大小、颜色等属性，支持不同的样式展示。菜单项的功能包括点击事件和状态效果，用户可以通过点击菜单项触发相应操作，菜单项也可以在启用或禁用状态下进行展示。\n整个布局通过 Row 和 Column 布局保证菜单在垂直方向上有序排列，确保界面整洁美观。",
            "code": "import { SymbolGlyphModifier } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  // 定义菜单项的起始图标样式，使用系统图标 \"ohos_mic\"，字体大小为 24vp\n  @State startIconModifier: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_mic')).fontSize('24vp');\n  // 定义菜单项的结束图标样式，使用系统图标 \"ohos_trash\"，字体大小为 24vp\n  @State endIconModifier: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_trash')).fontSize('24vp');\n  // 定义菜单项的选中图标样式，使用系统图标 \"checkmark\"，字体大小为 24vp\n  @State selectIconModifier: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.checkmark')).fontSize('24vp');\n  // 定义菜单项的选中状态，初始值为 true\n  @State select: boolean = true;\n\n  // 定义子菜单的构建器\n  @Builder\n  SubMenu() {\n    Menu() {\n      MenuItem({ content: \"复制\", labelInfo: \"Ctrl+C\" })\n      MenuItem({ content: \"粘贴\", labelInfo: \"Ctrl+V\" })\n    }\n  }\n\n  // 定义主菜单的构建器\n  @Builder\n  MyMenu() {\n    Menu() {\n      // 定义第一个菜单项，包含起始图标和内容\n      MenuItem({ symbolStartIcon: this.startIconModifier, content: \"菜单选项\" })\n      // 定义第二个菜单项，包含起始图标和内容，并设置为禁用状态\n      MenuItem({ symbolStartIcon: this.startIconModifier, content: \"菜单选项\" })\n        .enabled(false)\n      // 定义第三个菜单项，包含起始图标、内容、结束图标和子菜单\n      MenuItem({\n        symbolStartIcon: this.startIconModifier,\n        content: \"菜单选项\",\n        symbolEndIcon: this.endIconModifier,\n        builder: (): void => this.SubMenu()\n      })\n      // 定义菜单项组，包含标题和多个菜单项\n      MenuItemGroup({ header: '小标题' }) {\n        MenuItem({\n          symbolStartIcon: this.startIconModifier,\n          content: \"菜单选项\",\n          symbolEndIcon: this.endIconModifier,\n          builder: (): void => this.SubMenu()\n        })\n        MenuItem({\n          symbolStartIcon: this.startIconModifier,\n          content: \"菜单选项\",\n          symbolEndIcon: this.endIconModifier,\n          builder: (): void => this.SubMenu()\n        })\n      }\n      // 定义最后一个菜单项，包含内容，并设置选中状态和选中图标\n      MenuItem({\n        content: \"菜单选项\",\n      }).selected(this.select).selectIcon(this.selectIconModifier)\n    }\n  }\n\n  // 构建组件的布局\n  build() {\n    Row() {\n      Column() {\n        // 定义文本提示，字体大小为 50vp，字体加粗\n        Text('click to show menu')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n      }\n      // 绑定菜单到文本提示，点击文本提示时显示菜单\n      .bindMenu(this.MyMenu)\n      .width('100%')\n    }\n    .height('100%')\n  }\n}"
        },
        {
            "description": "该组件通过鸿蒙ArkUI框架实现了一个带有自定义菜单的界面。布局宽度占据整个屏幕，高度设为100%。组件的垂直方向上包含一个Row布局，其中嵌套了一个Column布局。Column布局中包含一个Text组件，用于显示提示信息“click to show menu”。Text组件的字体大小为50，字体加粗。Column布局通过bindMenu方法绑定了一个自定义菜单MyMenu，当点击Text组件时会弹出该菜单。\n\n菜单MyMenu包含多个MenuItem组件，每个MenuItem组件可以包含一个起始图标、内容、结束图标以及一个子菜单。菜单项的排列方式为垂直布局，菜单项之间通过MenuItemGroup进行分组，分组标题为“小标题”。菜单项的样式包括图标的资源名、内容文本、图标的资源名等属性，支持不同的样式展示。菜单项的功能包括点击事件和状态效果，用户可以通过点击菜单项触发相应操作，菜单项也可以在启用或禁用状态下进行展示。\n\n整个布局通过Row和Column布局保证菜单项在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct Index {\n  @State select: boolean = true // 状态变量，用于控制菜单的显示状态\n  private iconStr: ResourceStr = $r(\"app.media.view_list_filled\") // 菜单项起始图标的资源名\n  private iconStr2: ResourceStr = $r(\"app.media.arrow_right_filled\") // 菜单项结束图标的资源名\n\n  @Builder\n  SubMenu() {\n    Menu() {\n      MenuItem({ content: \"复制\", labelInfo: \"Ctrl+C\" }) // 子菜单项，内容为“复制”，标签信息为“Ctrl+C”\n      MenuItem({ content: \"粘贴\", labelInfo: \"Ctrl+V\" }) // 子菜单项，内容为“粘贴”，标签信息为“Ctrl+V”\n    }\n  }\n\n  @Builder\n  MyMenu(){\n    Menu() {\n      MenuItem({ startIcon: $r(\"app.media.icon\"), content: \"菜单选项\" }) // 菜单项，起始图标为“app.media.icon”，内容为“菜单选项”\n      MenuItem({ startIcon: $r(\"app.media.icon\"), content: \"菜单选项\" }) // 菜单项，起始图标为“app.media.icon”，内容为“菜单选项”\n        .enabled(false) // 禁用该菜单项\n      MenuItem({\n        startIcon: this.iconStr, // 菜单项起始图标为“view_list_filled”\n        content: \"菜单选项\", // 菜单项内容为“菜单选项”\n        endIcon: this.iconStr2, // 菜单项结束图标为“arrow_right_filled”\n        builder: ():void=>this.SubMenu() // 点击该菜单项时弹出子菜单SubMenu\n      })\n      MenuItemGroup({ header: '小标题' }) { // 菜单项分组，标题为“小标题”\n        MenuItem({\n          startIcon: this.iconStr, // 菜单项起始图标为“view_list_filled”\n          content: \"菜单选项\", // 菜单项内容为“菜单选项”\n          endIcon: this.iconStr2, // 菜单项结束图标为“arrow_right_filled”\n          builder: ():void=>this.SubMenu() // 点击该菜单项时弹出子菜单SubMenu\n        })\n        MenuItem({\n          startIcon: $r(\"app.media.app_icon\"), // 菜单项起始图标为“app_icon”\n          content: \"菜单选项\", // 菜单项内容为“菜单选项”\n          endIcon: this.iconStr2, // 菜单项结束图标为“arrow_right_filled”\n          builder: ():void=>this.SubMenu() // 点击该菜单项时弹出子菜单SubMenu\n        })\n      }\n      MenuItem({\n        startIcon: this.iconStr, // 菜单项起始图标为“view_list_filled”\n        content: \"菜单选项\", // 菜单项内容为“菜单选项”\n      })\n    }\n  }\n\n  build() {\n    Row() {\n      Column() {\n        Text('click to show menu') // 提示信息，内容为“click to show menu”\n          .fontSize(50) // 字体大小为50\n          .fontWeight(FontWeight.Bold) // 字体加粗\n      }\n      .bindMenu(this.MyMenu) // 绑定自定义菜单MyMenu，点击Text组件时弹出该菜单\n      .width('100%') // Column布局宽度占据整个屏幕\n    }\n    .height('100%') // Row布局高度占据整个屏幕\n  }\n}"
        }
    ],
    "is_common_attrs": true
}