{
    "description": "通过文本显示计时信息并控制其计时器状态的组件。",
    "details": "在组件不可见时时间变动将停止，组件的可见状态基于onVisibleAreaChange处理，可见阈值ratios大于0即视为可见状态。",
    "interfaces": [
        {
            "description": "TextTimer(options?: TextTimerOptions)",
            "params": {
                "options": {
                    "type": "TextTimerOptions",
                    "description": "TextTimer的选项对象。"
                }
            }
        }
    ],
    "attributes": {
        "isCountDown": {
            "description": "是否倒计时。",
            "params": {
                "value": {
                    "type": "boolean",
                    "description": "是否倒计时。",
                    "default": false
                }
            }
        },
        "count": {
            "description": "倒计时时间（isCountDown为true时生效），单位为毫秒。最长不超过86400000毫秒（24小时）。",
            "params": {
                "value": {
                    "type": "number",
                    "description": "倒计时时间，单位为毫秒。",
                    "default": 60000
                }
            }
        },
        "controller": {
            "description": "TextTimer控制器。",
            "params": {
                "value": {
                    "type": "TextTimerController",
                    "description": "TextTimer控制器。"
                }
            }
        },
        "format": {
            "description": "设置自定义格式，需至少包含一个HH、mm、ss、SS中的关键字。",
            "params": {
                "value": {
                    "type": "string",
                    "required": true,
                    "description": "自定义格式。",
                    "default": "HH:mm:ss.SS"
                }
            }
        },
        "fontColor": {
            "description": "设置字体颜色。",
            "params": {
                "value": {
                    "type": "ResourceColor",
                    "required": true,
                    "description": "字体颜色。"
                }
            }
        },
        "fontSize": {
            "description": "设置字体大小。",
            "params": {
                "value": {
                    "type": "Length",
                    "required": true,
                    "description": "字体大小。fontSize为number类型时，使用fp单位。字体默认大小16fp。不支持设置百分比字符串。"
                }
            }
        },
        "fontStyle": {
            "description": "设置字体样式。",
            "params": {
                "value": {
                    "type": "FontStyle",
                    "required": true,
                    "description": "字体样式。",
                    "default": "FontStyle.Normal"
                }
            }
        },
        "fontWeight": {
            "description": "设置文本的字体粗细，设置过大可能会在不同字体下有截断。",
            "params": {
                "value": {
                    "type": [
                        "number",
                        "FontWeight",
                        "string"
                    ],
                    "required": true,
                    "description": "文本的字体粗细，number类型取值[100, 900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如\"400\"，以及\"bold\"、\"bolder\"、\"lighter\"、\"regular\"、\"medium\"，分别对应FontWeight中相应的枚举值。",
                    "default": "FontWeight.Normal"
                }
            }
        },
        "fontFamily": {
            "description": "设置字体列表。",
            "params": {
                "value": {
                    "type": "ResourceStr",
                    "required": true,
                    "description": "字体列表。默认字体'HarmonyOS Sans'。"
                }
            }
        },
        "textShadow": {
            "description": "设置文字阴影效果。该接口支持以数组形式入参，实现多重文字阴影。不支持fill字段, 不支持智能取色模式。",
            "params": {
                "value": {
                    "type": [
                        "ShadowOptions",
                        "Array<ShadowOptions>"
                    ],
                    "required": true,
                    "description": "文字阴影效果。"
                }
            }
        },
        "contentModifier": {
            "description": "定制TextTimer内容区的方法。",
            "params": {
                "modifier": {
                    "type": "ContentModifier<TextTimerConfiguration>",
                    "required": true,
                    "description": "定制TextTimer内容区的方法。"
                }
            }
        }
    },
    "events": {
        "onTimer": {
            "description": "时间文本发生变化时触发。锁屏状态和应用后台状态下不会触发该事件。设置高精度的format（SSS、SS）时，回调间隔可能会出现波动。",
            "params": {
                "utc": {
                    "type": "number",
                    "required": true,
                    "description": "Linux时间戳，即自1970年1月1日起经过的时间，单位为设置格式的最小单位。"
                },
                "elapsedTime": {
                    "type": "number",
                    "required": true,
                    "description": "计时器经过的时间，单位为设置格式的最小单位。"
                }
            }
        }
    },
    "rules": null,
    "examples": [
        {
            "description": "该组件通过 Column 布局实现了一个倒计时计时器的界面。布局高度占据整个屏幕的 20%，内边距为 0。组件的垂直方向上包含一个 Scroll 组件和一个 TextTimer 组件。Scroll 组件用于在需要时滚动内容，TextTimer 组件用于显示倒计时时间。\nTextTimer 组件的样式包括字体颜色为黑色、字体大小为 50vp。TextTimer 组件的功能包括倒计时、格式化时间显示、以及在计时器启动时触发的事件。计时器在组件出现时自动启动，并通过控制器进行管理。\n整个布局通过 Column 布局保证组件在垂直方向上有序排列，确保界面整洁美观。",
            "code": "@Entry\n@Component\nstruct textTimerStart {\n  // 创建一个 TextTimerController 实例，用于控制计时器的启动和停止\n  textTimerController: TextTimerController = new TextTimerController()\n  \n  // 定义计时器的时间格式，初始值为 'mm:ss.SS'，表示分钟、秒和毫秒\n  @State format: string = 'mm:ss.SS'\n\n  build() {\n    Column() {\n      // 创建一个 Scroll 组件，用于在内容超出高度时进行滚动\n      Scroll()\n        .height('20%') // 设置 Scroll 组件的高度为屏幕高度的 20%\n      \n      // 创建一个 TextTimer 组件，用于显示倒计时时间\n      TextTimer({ \n        isCountDown: true, // 设置计时器为倒计时模式\n        count: 30000, // 设置倒计时的总时间为 30000 毫秒（30 秒）\n        controller: this.textTimerController // 绑定计时器控制器\n      })\n        .format(this.format) // 设置计时器的时间显示格式\n        .fontColor(Color.Black) // 设置计时器文本颜色为黑色\n        .fontSize(50) // 设置计时器文本字体大小为 50vp\n        .onTimer((utc: number, elapsedTime: number) => {\n          // 当计时器更新时触发的事件，输出当前的 UTC 时间和已过去的时间\n          console.info('textTimer notCountDown utc is：' + utc + ', elapsedTime: ' + elapsedTime)\n        })\n        .onAppear(() => {\n          // 当组件出现时触发的事件，启动计时器\n          this.textTimerController.start()\n        })\n    }\n  }\n}"
        },
        {
            "description": "该组件通过 Column 布局实现了一个展示带有多个阴影效果的文本计时器的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上仅包含一个 TextTimer 组件，该组件通过设置字体大小和文本阴影效果来展示动态的文本内容。\n\nTextTimer 组件的样式包括字体大小和文本阴影。字体大小设置为 50vp，使得文本内容在屏幕上显得较大且易于阅读。文本阴影效果通过 @State 变量 textShadows 来定义，该变量包含多个 ShadowOptions 对象，每个对象定义了一个阴影的颜色、半径和偏移量。这些阴影效果叠加在一起，形成了一个多层次的阴影效果，增强了文本的视觉效果。\n\n组件的功能主要是展示一个带有动态阴影效果的文本计时器。TextTimer 组件会根据内部逻辑更新文本内容，并通过设置的阴影效果展示出来。用户可以看到文本内容随着时间变化而动态更新，同时阴影效果也会随之变化，增强了界面的动态感和视觉效果。",
            "code": "@Entry\n@Component\nstruct TextTimerExample {\n  // @State 变量 textShadows 用于存储文本阴影的配置，支持单个 ShadowOptions 或多个 ShadowOptions 数组\n  @State textShadows : ShadowOptions | Array<ShadowOptions> = [\n    { radius: 10, color: Color.Red, offsetX: 10, offsetY: 0 }, // 红色阴影，半径 10，水平偏移 10，垂直偏移 0\n    { radius: 10, color: Color.Black, offsetX: 20, offsetY: 0 }, // 黑色阴影，半径 10，水平偏移 20，垂直偏移 0\n    { radius: 10, color: Color.Brown, offsetX: 30, offsetY: 0 }, // 棕色阴影，半径 10，水平偏移 30，垂直偏移 0\n    { radius: 10, color: Color.Green, offsetX: 40, offsetY: 0 }, // 绿色阴影，半径 10，水平偏移 40，垂直偏移 0\n    { radius: 10, color: Color.Yellow, offsetX: 100, offsetY: 0 } // 黄色阴影，半径 10，水平偏移 100，垂直偏移 0\n  ]\n\n  build() {\n    Column({ space: 8 }) { // Column 布局，垂直排列子组件，子组件间距为 8vp\n      TextTimer() // TextTimer 组件，用于展示动态文本内容\n        .fontSize(50) // 设置字体大小为 50vp\n        .textShadow(this.textShadows) // 设置文本阴影效果，使用 @State 变量 textShadows 中的配置\n    }\n  }\n}"
        },
        {
            "description": "该组件实现了一个倒计时文本计时器，并提供了控制按钮来启动、暂停和重置计时器。布局采用垂直布局（Column），包含一个TextTimer组件和一个水平布局（Row），其中水平布局包含三个按钮。\n\n布局属性：\n- 整个布局宽度占据整个屏幕，高度根据内容自适应。\n- 垂直布局（Column）用于将TextTimer和按钮组垂直排列。\n- 水平布局（Row）用于将三个按钮水平排列。\n\n组件的样式和外观：\n- TextTimer组件的文本颜色为黑色（Color.Black），字体大小为50vp。\n- 按钮的样式未明确指定，但通常按钮会有默认的背景颜色和边框样式。\n\n组件的排列和嵌套关系：\n- TextTimer组件位于垂直布局的顶部。\n- 三个按钮（start、pause、reset）位于垂直布局的底部，并以水平布局方式排列。\n\n组件的功能和交互：\n- TextTimer组件用于显示倒计时，初始倒计时时间为30000毫秒（30秒）。\n- 按钮组提供了启动、暂停和重置计时器的功能。\n- 点击“start”按钮会启动计时器。\n- 点击“pause”按钮会暂停计时器。\n- 点击“reset”按钮会重置计时器到初始状态。\n- TextTimer组件还提供了onTimer事件，用于在计时器运行时输出当前的UTC时间和已流逝的时间。",
            "code": "@Entry\n@Component\nstruct TextTimerExample {\n  // 创建一个TextTimerController实例，用于控制计时器\n  textTimerController: TextTimerController = new TextTimerController()\n  \n  // 定义计时器的格式，初始值为'mm:ss.SS'\n  @State format: string = 'mm:ss.SS'\n\n  build() {\n    Column() {\n      // 创建一个TextTimer组件，设置为倒计时模式，初始倒计时时间为30000毫秒，并绑定控制器\n      TextTimer({ isCountDown: true, count: 30000, controller: this.textTimerController })\n        .format(this.format) // 设置计时器的显示格式\n        .fontColor(Color.Black) // 设置计时器文本颜色为黑色\n        .fontSize(50) // 设置计时器文本字体大小为50vp\n        .onTimer((utc: number, elapsedTime: number) => {\n          // 当计时器运行时，输出当前的UTC时间和已流逝的时间\n          console.info('textTimer notCountDown utc is：' + utc + ', elapsedTime: ' + elapsedTime)\n        })\n      \n      Row() {\n        // 创建一个按钮，点击时启动计时器\n        Button(\"start\").onClick(() => {\n          this.textTimerController.start()\n        })\n        \n        // 创建一个按钮，点击时暂停计时器\n        Button(\"pause\").onClick(() => {\n          this.textTimerController.pause()\n        })\n        \n        // 创建一个按钮，点击时重置计时器\n        Button(\"reset\").onClick(() => {\n          this.textTimerController.reset()\n        })\n      }\n    }\n  }\n}"
        },
        {
            "description": "该示例实现了一个包含两个简易秒表的界面，其中一个为倒计时器，另一个为正计时器。界面背景为浅灰色，计时器开始后会实时显示时间变化。倒计时器开始后，背景会变成黑色，正计时器开始后，背景会变成灰色。\n\n布局属性：\n- 整个界面采用Row布局，高度占据整个屏幕。\n- 内部包含一个Column布局，宽度占据整个屏幕。\n- 两个TextTimer组件分别用于倒计时和正计时，通过Column布局垂直排列。\n- 按钮组采用Row布局，水平排列，按钮之间有10vp的间距，按钮组与计时器之间有20vp的间距。\n\n组件的样式和外观：\n- 计时器背景为一个圆形，倒计时器开始后背景为黑色（0xFF232323），正计时器开始后背景为灰色（0xFF717171），未开始时背景为浅灰色（0xFF929292）。\n- 计时器内部的文本颜色为白色（Color.White）。\n- 按钮的样式包括背景颜色、边框圆角、宽度和高度等属性，支持不同的样式展示。\n\n组件的排列和嵌套关系：\n- 整个界面采用Row布局，内部包含一个Column布局。\n- Column布局中包含两个TextTimer组件和一个按钮组。\n- 按钮组采用Row布局，水平排列，按钮之间有10vp的间距。\n\n组件的功能和交互：\n- 计时器开始后会实时显示时间变化，倒计时器显示剩余时间，正计时器显示已经过去的时间。\n- 按钮组包含三个按钮：“start”、“pause”和“reset”，分别用于启动、暂停和重置计时器。\n- 点击“start”按钮后，两个计时器开始计时；点击“pause”按钮后，两个计时器暂停计时；点击“reset”按钮后，两个计时器重置为初始状态。",
            "code": "// 自定义ContentModifier类，用于修改TextTimer组件的内容\nclass MyTextTimerModifier implements ContentModifier<TextTimerConfiguration> {\n  constructor() {\n  }\n  // 应用内容修改器，返回一个WrappedBuilder对象\n  applyContent() : WrappedBuilder<[TextTimerConfiguration]> {\n    return wrapBuilder(buildTextTimer)\n  }\n}\n\n// 构建TextTimer组件的Builder函数\n@Builder function buildTextTimer(config: TextTimerConfiguration) {\n  Column() {\n    // 使用Stack布局，内容居中对齐\n    Stack({ alignContent: Alignment.Center }) {\n      // 绘制一个圆形背景，根据计时器状态设置不同的背景颜色\n      Circle({ width: 150, height: 150 }).fill(config.started ? (config.isCountDown ? 0xFF232323 : 0xFF717171) : 0xFF929292)\n      Column(){\n        // 显示计时器类型（倒计时或正计时），文本颜色为白色\n        Text(config.isCountDown ? \"倒计时\" : \"正计时\").fontColor(Color.White)\n        // 显示计时器时间，文本颜色为白色\n        Text(\n          (config.isCountDown ? \"剩余\" : \"已经过去了\") + (config.isCountDown?\n            (Math.max(config.count / 1000 - config.elapsedTime / 100,0)).toFixed(1) + \"/\" + (config.count / 1000).toFixed(0)\n            :((config.elapsedTime / 100).toFixed(0))\n          ) + \"秒\"\n        ).fontColor(Color.White)\n      }\n    }\n  }\n}\n\n// 主入口组件\n@Entry\n@Component\nstruct Index {\n  // 倒计时器的初始时间，单位为毫秒\n  @State count: number = 10000\n  // 自定义的TextTimer内容修改器\n  @State myTimerModifier: MyTextTimerModifier = new MyTextTimerModifier()\n  // 倒计时器的控制器\n  countDownTextTimerController: TextTimerController = new TextTimerController()\n  // 正计时器的控制器\n  countUpTextTimerController: TextTimerController = new TextTimerController()\n\n  build() {\n    Row() {\n      Column() {\n        // 倒计时器组件，使用自定义内容修改器，监听计时器事件\n        TextTimer({isCountDown: true, count: this.count, controller: this.countDownTextTimerController})\n          .contentModifier(this.myTimerModifier)\n          .onTimer((utc: number, elapsedTime: number) => {\n            console.info('textTimer onTimer utc is：' + utc + ', elapsedTime: ' + elapsedTime)\n          })\n          .margin(10)\n        // 正计时器组件，使用自定义内容修改器，监听计时器事件\n        TextTimer({isCountDown: false, controller: this.countUpTextTimerController})\n          .contentModifier(this.myTimerModifier)\n          .onTimer((utc: number, elapsedTime: number) => {\n            console.info('textTimer onTimer utc is：' + utc + ', elapsedTime: ' + elapsedTime)\n          })\n        // 按钮组，用于控制计时器的启动、暂停和重置\n        Row() {\n          Button(\"start\").onClick(()=>{\n            this.countDownTextTimerController.start()\n            this.countUpTextTimerController.start()\n          }).margin(10)\n          Button(\"pause\").onClick(()=>{\n            this.countDownTextTimerController.pause()\n            this.countUpTextTimerController.pause()\n          }).margin(10)\n          Button(\"reset\").onClick(()=>{\n            this.countDownTextTimerController.reset()\n            this.countUpTextTimerController.reset()\n          }).margin(10)\n        }.margin(20)\n      }.width('100%')\n    }.height('100%')\n  }\n}"
        }
    ],
    "is_common_attrs": true
}