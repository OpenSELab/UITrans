/*\n实现一个包含保存按钮的界面，按钮点击后会创建一个图片文件并写入内容。界面中展示了不同样式的保存按钮，包括图标、文字和背景的不同组合。\n*/\n\nimport { photoAccessHelper } from '@kit.MediaLibraryKit'; // 导入媒体库访问助手模块\nimport { fileIo } from '@kit.CoreFileKit'; // 导入文件IO模块\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column({space:10}) {\n        // 默认参数下，图标、文字、背景都存在\n        SaveButton().onClick(async (event:ClickEvent, result:SaveButtonOnClickResult) => {\n          if (result == SaveButtonOnClickResult.SUCCESS) {\n            try {\n              const context = getContext(this); // 获取当前组件的上下文\n              let helper = photoAccessHelper.getPhotoAccessHelper(context); // 获取照片访问助手实例\n              // onClick触发后10秒内通过createAsset接口创建图片文件，10秒后createAsset权限收回。\n              let uri = await helper.createAsset(photoAccessHelper.PhotoType.IMAGE, 'png'); // 创建一个PNG格式的图片文件，并返回其URI\n              // 使用uri打开文件，可以持续写入内容，写入过程不受时间限制\n              let file = await fileIo.open(uri, fileIo.OpenMode.READ_WRITE | fileIo.OpenMode.CREATE); // 以读写模式打开文件，如果不存在则创建\n              // 写入文件\n              await fileIo.write(file.fd, "context"); // 向文件中写入字符串"context"\n              // 关闭文件\n              await fileIo.close(file.fd); // 关闭文件\n            } catch (error) {\n              console.error("error is " + JSON.stringify(error)); // 捕获并打印错误信息\n            }\n          }\n        })\n        // 传入参数即表示元素存在，不传入的参数表示元素不存在，如果不传入buttonType，会默认添加ButtonType.Capsule配置，显示图标+背景。\n        SaveButton({icon:SaveIconStyle.FULL_FILLED}) // 创建一个只包含图标的保存按钮\n        // 只显示图标+背景，如果设置背景色高八位的α值低于0x1A，则会被系统强制调整为0xFF\n        SaveButton({icon:SaveIconStyle.FULL_FILLED, buttonType:ButtonType.Capsule})\n          .backgroundColor(0x10007dff) // 设置按钮背景色，高八位的α值低于0x1A，会被系统强制调整为0xFF\n        // 图标、文字、背景都存在，如果设置背景色高八位的α值低于0x1A，则会被系统强制调整为0xFF\n        SaveButton({icon:SaveIconStyle.FULL_FILLED, text:SaveDescription.DOWNLOAD, buttonType:ButtonType.Capsule})\n      }.width('100%') // 设置列的宽度为100%\n    }.height('100%') // 设置行的宽度为100%\n  }\n}