/*\n实现一个自定义渲染的3D场景组件，展示一个3D模型并应用自定义着色器和纹理。组件包含一个动画效果，用于更新渲染时间间隔，并在动画完成时触发回调。\n*/\n\n// 定义引擎时间类，用于计算总时间和每帧时间间隔\nclass EngineTime {\n  totalTimeUs = 0; // 总时间，单位为微秒\n  deltaTimeUs = 0; // 每帧时间间隔，单位为微秒\n};\n\nlet engineTime = new EngineTime(); // 创建引擎时间实例\nlet frameCount: number = 0; // 帧计数器，用于模拟每帧更新\n\n// 模拟每帧更新\nfunction TickFrame() {\n  if (frameCount == 10) {\n    engineTime.totalTimeUs += 1.0; // 累加总时间\n    engineTime.deltaTimeUs += 1.0; // 累加每帧时间间隔\n    frameCount = 0; // 重置帧计数器\n  } else {\n    frameCount++; // 帧计数器递增\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  scene: SceneOptions = { scene: $rawfile('gltf/DamageHemlt/glTF/DamagedHelmet.gltf'), modelType: ModelType.SURFACE}; // 定义场景选项，包括加载的3D模型和模型类型\n  backAnimator: AnimatorResult = animator.create({\n    duration: 2000, // 动画持续时间，单位为毫秒\n    easing: "ease", // 缓动函数，控制动画的加速度\n    delay: 0, // 延迟时间，单位为毫秒\n    fill: "none", // 动画填充模式，none表示动画结束后不保留状态\n    direction: "normal", // 播放方向，normal表示正向播放\n    iterations: -1, // 播放次数，-1为无限循环\n    begin: 100, // 起始值\n    end: 200, // 结束值\n  });\n  @State timeDelta: number[] = [1.0, 2.0]; // 时间间隔数组，用于传递给着色器\n\n  // 创建函数，设置动画回调\n  create() {\n    this.backAnimator.onfinish = () => {\n      console.log('backAnimator onfinish'); // 动画播放完成回调\n    }\n    this.backAnimator.onframe = value => {\n      TickFrame(); // 模拟每帧更新\n      this.timeDelta[0] = engineTime.deltaTimeUs; // 更新时间间隔数组\n    }\n  }\n\n  // 构建函数，渲染UI组件\n  build() {\n    Row() {\n      Column() {\n        Text('custom rendering') // 显示文本\n        Component3D()\n          .shader($rawfile('assets/app/shaders/shader/London.shader')) // 设置着色器\n          .shaderImageTexture($rawfile('assets/London.jpg')) // 设置着色器纹理\n          .shaderInputBuffer(this.timeDelta) // 设置着色器输入缓冲\n          .customRender($rawfile('assets/app/rendernodegraphs/London.rng'), true) // 自定义渲染\n          .renderWidth('90%').renderHeight('90%') // 设置渲染宽度和高度\n          .onAppear(() => {\n            this.create(); // 创建动画回调\n            this.backAnimator.play(); // 播放动画\n          }).width('50%').height('50%') // 设置宽度和高度\n      }.width('100%') // 设置宽度\n    }\n    .height('100%') // 设置高度\n  }\n}