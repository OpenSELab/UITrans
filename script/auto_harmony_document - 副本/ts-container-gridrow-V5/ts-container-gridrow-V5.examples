/*\n实现一个响应式的网格布局组件，根据窗口大小动态调整列数和间距。组件包含多个颜色块，每个颜色块根据不同的屏幕尺寸调整其占用的列数。组件还监听窗口大小的变化，并显示当前的断点状态。\n*/\n\n// xxx.ets\n@Entry\n@Component\nstruct GridRowExample {\n  // 定义一个状态变量 bgColors，存储颜色数组，用于网格列的背景色\n  @State bgColors: Color[] = [Color.Red, Color.Orange, Color.Yellow, Color.Green, Color.Pink, Color.Grey, Color.Blue, Color.Brown]\n  // 定义一个状态变量 currentBp，用于存储当前的断点状态\n  @State currentBp: string = 'unknown'\n\n  build() {\n    Column() {\n      // 创建一个 GridRow 组件，设置列数、间距、断点等属性\n      GridRow({\n        columns: 5, // 默认列数为5\n        gutter: { x: 5, y: 10 }, // 列之间的水平间距为5，垂直间距为10\n        breakpoints: { \n          value: ["400vp", "600vp", "800vp"], // 定义断点值，分别为400vp、600vp、800vp\n          reference: BreakpointsReference.WindowSize // 断点参考值为窗口大小\n        },\n        direction: GridRowDirection.Row // 网格方向为行\n      }) {\n        // 使用 ForEach 循环遍历 bgColors 数组，为每个颜色创建一个 GridCol 组件\n        ForEach(this.bgColors, (color: Color) => {\n          GridCol({ \n            span: { xs: 1, sm: 2, md: 3, lg: 4 }, // 根据不同的屏幕尺寸设置列的跨度\n            offset: 0, // 列的偏移量为0\n            order: 0 // 列的顺序为0\n          }) {\n            // 创建一个 Row 组件，设置宽度和高度\n            Row().width("100%").height("20vp")\n          }.borderColor(color).borderWidth(2) // 设置列的边框颜色和宽度\n        })\n      }.width("100%").height("100%") // 设置 GridRow 的宽度和高度为100%\n      .onBreakpointChange((breakpoint) => {\n        // 监听断点变化事件，更新 currentBp 状态变量\n        this.currentBp = breakpoint\n      })\n    }.width('80%').margin({ left: 10, top: 5, bottom: 5 }).height(200) // 设置 Column 的宽度、外边距和高度\n    .border({ color: '#880606', width: 2 }) // 设置 Column 的边框颜色和宽度\n  }\n}