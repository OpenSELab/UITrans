/*\n实现一个包含多个菜单项的菜单组件，每个菜单项包含不同的图标、文本内容和交互功能。点击按钮可以展示定义的菜单。\n*/\n\n// xxx.ets\nimport { SymbolGlyphModifier } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  // 定义状态变量select，用于控制菜单项的选中状态，初始值为true\n  @State select: boolean = true;\n  \n  // 定义起始图标修饰符，使用系统图标$r('sys.symbol.ohos_mic')，并设置字体大小为24vp\n  @State startIconModifier: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_mic')).fontSize('24vp');\n  \n  // 定义结束图标修饰符，使用系统图标$r('sys.symbol.ohos_trash')，并设置字体大小为24vp\n  @State endIconModifier: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.ohos_trash')).fontSize('24vp');\n  \n  // 定义选中图标修饰符，使用系统图标$r('sys.symbol.checkmark')，并设置字体大小为24vp\n  @State selectIconModifier: SymbolGlyphModifier = new SymbolGlyphModifier($r('sys.symbol.checkmark')).fontSize('24vp');\n\n  // 定义子菜单组件，包含两个菜单项："复制"和"粘贴"，并显示快捷键信息\n  @Builder\n  SubMenu() {\n    Menu() {\n      MenuItem({ content: "复制", labelInfo: "Ctrl+C" })\n      MenuItem({ content: "粘贴", labelInfo: "Ctrl+V" })\n    }\n  }\n\n  // 定义主菜单组件，包含多个菜单项，每个菜单项包含不同的图标、文本内容和交互功能\n  @Builder\n  MyMenu() {\n    Menu() {\n      // 创建带有起始图标的菜单项，内容为"菜单选项"\n      MenuItem({ symbolStartIcon: this.startIconModifier, content: "菜单选项" })\n      \n      // 创建带有起始图标的菜单项，内容为"菜单选项"，并设置为不可用状态\n      MenuItem({ symbolStartIcon: this.startIconModifier, content: "菜单选项" })\n        .enabled(false)\n      \n      // 创建带有起始和结束图标的菜单项，内容为"菜单选项"，并包含子菜单\n      MenuItem({\n        symbolStartIcon: this.startIconModifier,\n        content: "菜单选项",\n        symbolEndIcon: this.endIconModifier,\n        builder: (): void => this.SubMenu()\n      })\n      \n      // 创建带有标题的菜单项组，包含多个带有图标的菜单项和子菜单\n      MenuItemGroup({ header: '小标题' }) {\n        MenuItem({\n          symbolStartIcon: this.startIconModifier,\n          content: "菜单选项",\n          symbolEndIcon: this.endIconModifier,\n          builder: (): void => this.SubMenu()\n        })\n        MenuItem({\n          symbolStartIcon: this.startIconModifier,\n          content: "菜单选项",\n          symbolEndIcon: this.endIconModifier,\n          builder: (): void => this.SubMenu()\n        })\n      }\n      \n      // 创建带有选中状态的菜单项，内容为"菜单选项"，并设置选中图标\n      MenuItem({\n        content: "菜单选项",\n      }).selected(this.select).selectIcon(this.selectIconModifier)\n    }\n  }\n\n  // 构建页面布局，包含一个点击展示菜单的按钮\n  build() {\n    Row() {\n      Column() {\n        // 显示点击展示菜单的文本，字体大小为50，加粗\n        Text('click to show menu')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n      }\n      // 将MyMenu绑定到按钮，点击按钮展示菜单\n      .bindMenu(this.MyMenu)\n      .width('100%')\n    }\n    .height('100%')\n  }\n}