Title: 自定义弹窗 (CustomDialog)-全局UI方法-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-custom-dialog-box-V5

Markdown Content:
自定义弹窗 (CustomDialog)-全局UI方法-ArkTS组件-ArkUI（方舟UI框架）-应用框架 - 华为HarmonyOS开发者
===============

简体中文

*   简体中文
*   Русский
*   English
*   Español (América Latina)
*   Português (Brasil)
*   Français (Europe)
*   Deutsch
*   日本語
*   한국어

[App](https://developer.huawei.com/consumer/cn/huawei-app/)

[](https://developer.huawei.com/consumer/cn/)

*   探索
*   设计
*   开发
*   分发
*   推广与变现
*   生态合作
*   支持

*   更多

*   [探索](https://developer.huawei.com/consumer/cn/discover/)
    
*   [设计](https://developer.huawei.com/consumer/cn/design/)
    
*   [开发](https://developer.huawei.com/consumer/cn/develop/)
    
*   [分发](https://developer.huawei.com/consumer/cn/distribute/)
    
*   更多
    *   [推广与变现](https://developer.huawei.com/consumer/cn/promote/)
        
    *   [生态合作](https://developer.huawei.com/consumer/cn/cooperate/)
        
    *   [支持](https://developer.huawei.com/consumer/cn/support/)
        

搜索

热门搜索 _换一换_

*   HarmonyOS NEXT
*   HarmonyOS应用开发
*   仓颉
*   DevEco Studio
*   开发者能力认证
*   模拟器
*   Navigation
*   List
*   Web
*   TextInput
*   Image
*   AppGallery Connect

[文档](https://developer.huawei.com/consumer/cn/doc/)[管理中心](https://developer.huawei.com/consumer/cn/console)

HarmonyOS NEXT

Developer Beta3

API参考

*   [版本说明](https://developer.huawei.com/consumer/cn/doc/harmonyos-releases-V5/releasenotes-baseline-V5?istab=1&catalogVersion=V5)
*   [指南](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/application-dev-guide-V5?istab=1&catalogVersion=V5)
*   [API参考](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/development-intro-api-V5?istab=1&catalogVersion=V5)
*   [最佳实践](https://developer.huawei.com/consumer/cn/doc/best-practices-V5/bpta-develop-once-deploy-everywhere-V5?istab=1&catalogVersion=V5)
*   [FAQ](https://developer.huawei.com/consumer/cn/doc/harmonyos-faqs-V5/faqs-development-V5?istab=1&catalogVersion=V5)
*   [变更预告](https://developer.huawei.com/consumer/cn/doc/harmonyos-roadmap-V5/changelogs-in-31-V5?istab=1&catalogVersion=V5)
*   更多

筛选元服务API集

API参考概述

应用框架

[Ability Kit（程序框架服务）](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ability-api-V5)

[Accessibility Kit（无障碍开发服务）](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/accessibility-api-V5)

[ArkData（方舟数据管理）](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/arkdata-api-V5)

[ArkTS（方舟编程语言）](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/arkts-api-V5)

[ArkUI（方舟UI框架）](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/arkui-api-V5)

[ArkTS API](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/arkui-arkts-V5)

[ArkTS组件](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/arkui-declarative-comp-V5)

[组件导读](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-components-summary-V5)

[组件通用信息](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/4_2_u7ec4_u4ef6_u901a_u7528_u4fe1_u606f-V5)

[基础组件](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/4_3_u57fa_u7840_u7ec4_u4ef6-V5)

[容器组件](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/4_4_u5bb9_u5668_u7ec4_u4ef6-V5)

[媒体组件](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/4_5_u5a92_u4f53_u7ec4_u4ef6-V5)

[绘制组件](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/4_6_u7ed8_u5236_u7ec4_u4ef6-V5)

[画布组件](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/4_7_u753b_u5e03_u7ec4_u4ef6-V5)

[渲染组件](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/4_8_u6e32_u67d3_u7ec4_u4ef6-V5)

[高级组件](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/4_9_u9ad8_u7ea7_u7ec4_u4ef6-V5)

[安全控件](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/4_10_u5b89_u5168_u63a7_u4ef6-V5)

[动画](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/4_11_u52a8_u753b-V5)

[全局UI方法](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/4_12_u5168_u5c40ui_u65b9_u6cd5-V5)

[警告弹窗 (AlertDialog)](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-alert-dialog-box-V5)

[列表选择弹窗 (ActionSheet)](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-action-sheet-V5)

[自定义弹窗 (CustomDialog)](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-custom-dialog-box-V5)

[日历选择器弹窗 (CalendarPickerDialog)](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-calendarpicker-dialog-V5)

[日期滑动选择器弹窗 (DatePickerDialog)](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-datepicker-dialog-V5)

[时间滑动选择器弹窗 (TimePickerDialog)](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-timepicker-dialog-V5)

[文本滑动选择器弹窗 (TextPickerDialog)](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-textpicker-dialog-V5)

[菜单](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-menu-V5)

[自定义组件](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/4_13_u81ea_u5b9a_u4e49_u7ec4_u4ef6-V5)

[类型定义](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/4_14_u7c7b_u578b_u5b9a_u4e49-V5)

[应用级变量的状态管理](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-state-management-V5)

[渲染控制](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/4_16_u6e32_u67d3_u63a7_u5236-V5)

[像素单位](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-pixel-units-V5)

[枚举说明](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5)

[设置事件回调](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-uicommonevent-V5)

[属性字符串](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-styled-string-V5)

[已停止维护的组件](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/21_u5df2_u505c_u6b62_u7ef4_u62a4_u7684_u7ec4_u4ef6-V5)

[已停止维护的接口](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/22_u5df2_u505c_u6b62_u7ef4_u62a4_u7684_u63a5_u53e3-V5)

[JS组件](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/arkui-js-comp-V5)

[C API](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/arkui-c-V5)

[错误码](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/arkui-arkts-errcode-V5)

[ArkWeb（方舟Web）](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/arkweb-api-V5)

[Background Tasks Kit（后台任务开发服务）](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/background-tasks-api-V5)

[Core File Kit（文件基础服务）](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/core-file-api-V5)

[Form Kit（卡片开发服务）](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/form-api-V5)

[IME Kit（输入法开发服务）](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ime-api-V5)

[IPC Kit（进程间通信服务）](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ipc-api-V5)

[Localization Kit（本地化开发服务）](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/localization-api-V5)

[UI Design Kit（UI设计套件）](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ui-design-api-V5)

系统

媒体

图形

应用服务

AI

公共基础能力

标准库

您当前正在浏览HarmonyOS NEXT Developer Beta3版本的配套文档，该版本API能力级别为API 12 Beta3，详细版本配套关系请参考[版本说明](https://developer.huawei.com/consumer/cn/doc/harmonyos-releases-V5/overview-db3-V5)。

API参考 应用框架 [ArkUI（方舟UI框架）](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/arkui-api-V5) [ArkTS组件](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/arkui-declarative-comp-V5) [全局UI方法](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/4_12_u5168_u5c40ui_u65b9_u6cd5-V5) 自定义弹窗 (CustomDialog)

自定义弹窗 (CustomDialog)
====================

更新时间: 2024-08-21 06:17

*   毫无帮助
*   帮助不大
*   一般
*   很好
*   非常好

本文导读

[接口](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-custom-dialog-box-V5#%E6%8E%A5%E5%8F%A3)

[CustomDialogControllerOptions对象说明](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-custom-dialog-box-V5#customdialogcontrolleroptions%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)

[CustomDialogController](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-custom-dialog-box-V5#customdialogcontroller)

[导入对象](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-custom-dialog-box-V5#%E5%AF%BC%E5%85%A5%E5%AF%B9%E8%B1%A1)

[open](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-custom-dialog-box-V5#open)

[close](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-custom-dialog-box-V5#close)

[示例](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-custom-dialog-box-V5#%E7%A4%BA%E4%BE%8B)

[示例1](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-custom-dialog-box-V5#%E7%A4%BA%E4%BE%8B1)

[示例2](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-custom-dialog-box-V5#%E7%A4%BA%E4%BE%8B2)

[示例3](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-custom-dialog-box-V5#%E7%A4%BA%E4%BE%8B3)

展开章节

通过CustomDialogController类显示自定义弹窗。使用弹窗组件时，可优先考虑自定义弹窗，便于自定义弹窗的样式与内容。

说明

从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

接口
--

constructor(value: CustomDialogControllerOptions)

配置自定义弹窗的参数。

说明

自定义弹窗的所有参数，不支持动态刷新。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| :-- | :-- | :-- | :-- |
| value | [CustomDialogControllerOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-custom-dialog-box-V5#customdialogcontrolleroptions%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E) | 是 | 配置自定义弹窗的参数。 |

CustomDialogControllerOptions对象说明
---------------------------------

| 名称 | 参数类型 | 必填 | 描述 |
| :-- | :-- | :-- | :-- |
| builder | [CustomDialog](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-common-components-custom-dialog-V5) | 是 | 自定义弹窗内容构造器。
**说明：**

若builder构造器使用回调函数作为入参，请注意使用this绑定问题，如build: custombuilder({ callback: ()=> {...}})。

若在builder构造器中监听数据变化请使用@Link，其他方式如@Prop、@ObjectLink不适用此场景。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

 |
| cancel | () => void | 否 | 返回、ESC键和点击遮障层弹窗退出时的回调。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

 |
| autoCancel | boolean | 否 | 是否允许点击遮障层退出，true表示关闭弹窗。false表示不关闭弹窗。

默认值：true

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

 |
| alignment | [DialogAlignment](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-alert-dialog-box-V5#dialogalignment%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E) | 否 | 弹窗在竖直方向上的对齐方式。

默认值：DialogAlignment.Default

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

 |
| offset | [Offset](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#offset) | 否 | 弹窗相对alignment所在位置的偏移量。

默认值：{ dx: 0, dy: 0 }

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

 |
| customStyle | boolean | 否 | 弹窗容器样式是否自定义。

设置false时（默认值）：

1、圆角为32vp。

2、未设置弹窗宽度高度：弹窗容器的宽度根据栅格系统自适应。高度自适应自定义的内容节点。

3、设置弹窗宽度高度：弹窗容器的宽度不超过默认样式下的最大宽度（自定义节点设置100%的宽度），弹窗容器的高度不超过默认样式下的最大高度（自定义节点设置100%的高度）。

设置为true：

1、圆角为0，弹窗背景色为透明色。

2、不支持设置弹窗宽度、高度、边框宽度、边框样式、边框颜色以及阴影宽度。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

 |
| gridCount8+ | number | 否 | 弹窗宽度占[栅格宽度](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-layout-development-grid-layout-V5)的个数。

默认为按照窗口大小自适应，异常值按默认值处理，最大栅格数为系统最大栅格数。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

 |
| maskColor10+ | [ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor) | 否 | 自定义蒙层颜色。

默认值: 0x33000000

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

 |
| maskRect10+ | [Rectangle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-alert-dialog-box-V5#rectangle8%E7%B1%BB%E5%9E%8B%E8%AF%B4%E6%98%8E) | 否 | 弹窗遮蔽层区域，在遮蔽层区域内的事件不透传，在遮蔽层区域外的事件透传。

默认值：{ x: 0, y: 0, width: '100%', height: '100%' }

**说明：**

showInSubWindow为true时，maskRect不生效。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

 |
| openAnimation10+ | [AnimateParam](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-explicit-animation-V5#animateparam%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E) | 否 | 自定义设置弹窗弹出的动画效果相关参数。

**说明**：

tempo默认值为1，当设置小于等于0的值时按默认值处理。

iterations默认值为1，默认播放一次，设置为其他数值时按默认值处理。

playMode控制动画播放模式，默认值为PlayMode.Normal，设置为其他数值时按照默认值处理。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

 |
| closeAnimation10+ | [AnimateParam](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-explicit-animation-V5#animateparam%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E) | 否 | 自定义设置弹窗关闭的动画效果相关参数。

**说明**：

tempo默认值为1，当设置小于等于0的值时按默认值处理。

iterations默认值为1，默认播放一次，设置为其他数值时按默认值处理。

playMode控制动画播放模式，默认值为PlayMode.Normal，设置为其他数值时按照默认值处理。

页面转场切换时，建议使用默认关闭动效。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

 |
| showInSubWindow10+ | boolean | 否 | 某弹框需要显示在主窗口之外时，是否在子窗口显示此弹窗。

默认值：false，弹窗显示在应用内，而非独立子窗口。

**说明**：showInSubWindow为true的弹窗无法触发显示另一个showInSubWindow为true的弹窗。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

 |
| backgroundColor10+ | [ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor) | 否 | 设置弹窗背板填充。

默认值：Color.Transparent

**说明：** 如果同时设置了内容构造器的背景色，则backgroundColor会被内容构造器的背景色覆盖。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

 |
| cornerRadius10+ | [BorderRadiuses](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#borderradiuses9) | [Dimension](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#dimension10) | 否 | 设置背板的圆角半径。

可分别设置4个圆角的半径。

默认值：{ topLeft: '32vp', topRight: '32vp', bottomLeft: '32vp', bottomRight: '32vp' }

**说明**：自定义弹窗默认的背板圆角半径为32vp，如果需要使用cornerRadius属性，请和[borderRadius](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-border-V5#borderradius)属性一起使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

 |
| isModal11+ | boolean | 否 | 弹窗是否为模态窗口，模态窗口有蒙层，非模态窗口无蒙层。

默认值：true，此时弹窗有蒙层。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

 |
| onWillDismiss12+ | Callback<[DismissDialogAction](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-alert-dialog-box-V5#dismissdialogaction12%E7%B1%BB%E5%9E%8B%E8%AF%B4%E6%98%8E)\> | 否 | 交互式关闭回调函数。

**说明：**

1.当用户执行点击遮障层关闭、左滑/右滑、三键back、键盘ESC关闭交互操作时，如果注册该回调函数，则不会立刻关闭弹窗。在回调函数中可以通过reason得到阻拦关闭弹窗的操作类型，从而根据原因选择是否能关闭弹窗。当前组件返回的reason中，暂不支持CLOSE\_BUTTON的枚举值。

2.在onWillDismiss回调中，不能再做onWillDismiss拦截。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

 |
| borderWidth12+ | [Dimension](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#dimension10) | [EdgeWidths](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#edgewidths9) | 否 | 设置弹窗背板的边框宽度。

可分别设置4个边框宽度。

默认值：0。

百分比参数方式：以父元素弹窗宽的百分比来设置弹窗的边框宽度。

当弹窗左边框和右边框大于弹窗宽度，弹窗上边框和下边框大于弹窗高度，显示可能不符合预期。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

 |
| borderColor12+ | [ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor) | [EdgeColors](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#edgecolors9) | 否 | 设置弹窗背板的边框颜色。

默认值：Color.Black

如果使用borderColor属性，需要和borderWidth属性一起使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

 |
| borderStyle12+ | [BorderStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#borderstyle) | [EdgeStyles](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#edgestyles9) | 否 | 设置弹窗背板的边框样式。

默认值：BorderStyle.Solid

如果使用borderStyle属性，需要和borderWidth属性一起使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

 |
| width12+ | [Dimension](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#dimension10) | 否 | 设置弹窗背板的宽度。

**说明：**

\- 弹窗宽度默认最大值：400vp。

\- 百分比参数方式：弹窗参考宽度为所在窗口的宽度，在此基础上调小或调大。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

 |
| height12+ | [Dimension](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#dimension10) | 否 | 设置弹窗背板的高度。

**说明：**

\- 弹窗高度默认最大值：0.9 \*（窗口高度 - 安全区域）。

\- 百分比参数方式：弹窗参考高度为（窗口高度 - 安全区域），在此基础上调小或调大。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

 |
| shadow12+ | [ShadowOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-image-effect-V5#shadowoptions%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E) | [ShadowStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-image-effect-V5#shadowstyle10%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E) | 否 | 设置弹窗背板的阴影。

当设备为2in1时，默认场景下获焦阴影值为ShadowStyle.OUTER\_FLOATING\_MD，失焦为ShadowStyle.OUTER\_FLOATING\_SM

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

 |
| backgroundBlurStyle12+ | [BlurStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-background-V5#blurstyle9) | 否 | 弹窗背板模糊材质。

默认值：BlurStyle.COMPONENT\_ULTRA\_THICK

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

 |

说明

*   按下返回键和ESC键时会让弹窗退出。
*   自定义弹窗仅适用于简单提示场景，不能替代页面使用。弹窗避让软键盘时，与软键盘之间存在16vp的安全间距。

CustomDialogController
----------------------

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

### 导入对象

已复制

1.  dialogController : CustomDialogController | null = new CustomDialogController(CustomDialogControllerOptions)

**说明**：CustomDialogController仅在作为@CustomDialog和@Component struct的成员变量，且在@Component struct内部定义时赋值才有效，具体用法可看下方示例。

### open

open(): void

显示自定义弹窗内容，允许多次使用，但如果弹框为SubWindow模式，则该弹框不允许再弹出SubWindow弹框。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### close

close(): void

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

关闭显示的自定义弹窗，若已关闭，则不生效。

示例
--

### 示例1

已复制

1.  // xxx.ets
2.  @CustomDialog
3.  struct CustomDialogExampleTwo {
4.    controllerTwo?: CustomDialogController
5.    build() {
6.      Column() {
7.        Text('我是第二个弹窗')
8.          .fontSize(30)
9.          .height(100)
10.        Button('点我关闭第二个弹窗')
11.          .onClick(() => {
12.            if (this.controllerTwo != undefined) {
13.              this.controllerTwo.close()
14.            }
15.          })
16.          .margin(20)
17.      }
18.    }
19.  }
20.  @CustomDialog
21.  @Component
22.  struct CustomDialogExample {
23.    @Link textValue: string
24.    @Link inputValue: string
25.    dialogControllerTwo: CustomDialogController | null = new CustomDialogController({
26.      builder: CustomDialogExampleTwo(),
27.      alignment: DialogAlignment.Bottom,
28.      onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {
29.        console.info("reason=" + JSON.stringify(dismissDialogAction.reason))
30.        console.log("dialog onWillDismiss")
31.        if (dismissDialogAction.reason == DismissReason.PRESS\_BACK) {
32.          dismissDialogAction.dismiss()
33.        }
34.        if (dismissDialogAction.reason == DismissReason.TOUCH\_OUTSIDE) {
35.          dismissDialogAction.dismiss()
36.        }
37.      },
38.      offset: { dx: 0, dy: -25 } })
39.    controller?: CustomDialogController
40.    // 若尝试在CustomDialog中传入多个其他的Controller，以实现在CustomDialog中打开另一个或另一些CustomDialog，那么此处需要将指向自己的controller放在所有controller的后面
41.    cancel: () => void = () => {
42.    }
43.    confirm: () => void = () => {
44.    }

46.    build() {
47.      Column() {
48.        Text('Change text').fontSize(20).margin({ top: 10, bottom: 10 })
49.        TextInput({ placeholder: '', text: this.textValue }).height(60).width('90%')
50.          .onChange((value: string) => {
51.            this.textValue = value
52.          })
53.        Text('Whether to change a text?').fontSize(16).margin({ bottom: 10 })
54.        Flex({ justifyContent: FlexAlign.SpaceAround }) {
55.          Button('cancel')
56.            .onClick(() => {
57.              if (this.controller != undefined) {
58.                this.controller.close()
59.                this.cancel()
60.              }
61.            }).backgroundColor(0xffffff).fontColor(Color.Black)
62.          Button('confirm')
63.            .onClick(() => {
64.              if (this.controller != undefined) {
65.                this.inputValue = this.textValue
66.                this.controller.close()
67.                this.confirm()
68.              }
69.            }).backgroundColor(0xffffff).fontColor(Color.Red)
70.        }.margin({ bottom: 10 })

72.        Button('点我打开第二个弹窗')
73.          .onClick(() => {
74.            if (this.dialogControllerTwo != null) {
75.              this.dialogControllerTwo.open()
76.            }
77.          })
78.          .margin(20)
79.      }.borderRadius(10)
80.      // 如果需要使用border属性或cornerRadius属性，请和borderRadius属性一起使用。
81.    }
82.  }
83.  @Entry
84.  @Component
85.  struct CustomDialogUser {
86.    @State textValue: string = ''
87.    @State inputValue: string = 'click me'
88.    dialogController: CustomDialogController | null = new CustomDialogController({
89.      builder: CustomDialogExample({
90.        cancel: ()=> { this.onCancel() },
91.        confirm: ()=> { this.onAccept() },
92.        textValue: $textValue,
93.        inputValue: $inputValue
94.      }),
95.      cancel: this.exitApp,
96.      autoCancel: true,
97.      onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {
98.        console.info("reason=" + JSON.stringify(dismissDialogAction.reason))
99.        console.log("dialog onWillDismiss")
100.        if (dismissDialogAction.reason == DismissReason.PRESS\_BACK) {
101.          dismissDialogAction.dismiss()
102.        }
103.        if (dismissDialogAction.reason == DismissReason.TOUCH\_OUTSIDE) {
104.          dismissDialogAction.dismiss()
105.        }
106.      },
107.      alignment: DialogAlignment.Bottom,
108.      offset: { dx: 0, dy: -20 },
109.      gridCount: 4,
110.      customStyle: false,
111.      cornerRadius: 10,
112.    })

114.    // 在自定义组件即将析构销毁时将dialogController置空
115.    aboutToDisappear() {
116.      this.dialogController = null // 将dialogController置空
117.    }

119.    onCancel() {
120.      console.info('Callback when the first button is clicked')
121.    }

123.    onAccept() {
124.      console.info('Callback when the second button is clicked')
125.    }

127.    exitApp() {
128.      console.info('Click the callback in the blank area')
129.    }
130.    build() {
131.      Column() {
132.        Button(this.inputValue)
133.          .onClick(() => {
134.            if (this.dialogController != null) {
135.              this.dialogController.open()
136.            }
137.          }).backgroundColor(0x317aff)
138.      }.width('100%').margin({ top: 5 })
139.    }
140.  }

![Image 1](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240821122313.53212793707464317337593238438160:50001231000000:2800:C51AA2C8C7B7F3C45892A17A9FAEC95B158FDB8E140CC940FDF4F3D1CEF06405.gif?needInitFileName=true?needInitFileName=true)

### 示例2

已复制

1.  // xxx.ets
2.  @CustomDialog
3.  struct CustomDialogExample {
4.    controller?: CustomDialogController
5.    cancel: () => void = () => {
6.    }
7.    confirm: () => void = () => {
8.    }
9.    build() {
10.      Column() {
11.        Text('可展示在主窗口外的弹窗')
12.          .fontSize(30)
13.          .height(100)
14.        Button('点我关闭弹窗')
15.          .onClick(() => {
16.            if (this.controller != undefined) {
17.              this.controller.close()
18.            }
19.          })
20.          .margin(20)
21.      }
22.    }
23.  }
24.  @Entry
25.  @Component
26.  struct CustomDialogUser {
27.    dialogController: CustomDialogController | null = new CustomDialogController({
28.      builder: CustomDialogExample({
29.        cancel: ()=> { this.onCancel() },
30.        confirm: ()=> { this.onAccept() }
31.      }),
32.      cancel: this.existApp,
33.      autoCancel: true,
34.      onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {
35.        console.info("reason=" + JSON.stringify(dismissDialogAction.reason))
36.        console.log("dialog onWillDismiss")
37.        if (dismissDialogAction.reason == DismissReason.PRESS\_BACK) {
38.          dismissDialogAction.dismiss()
39.        }
40.        if (dismissDialogAction.reason == DismissReason.TOUCH\_OUTSIDE) {
41.          dismissDialogAction.dismiss()
42.        }
43.      },
44.      alignment: DialogAlignment.Center,
45.      offset: { dx: 0, dy: -20 },
46.      gridCount: 4,
47.      showInSubWindow: true,
48.      isModal: true,
49.      customStyle: false,
50.      cornerRadius: 10,
51.    })
52.    // 在自定义组件即将析构销毁时将dialogController置空
53.    aboutToDisappear() {
54.      this.dialogController = null // 将dialogController置空
55.    }

57.    onCancel() {
58.      console.info('Callback when the first button is clicked')
59.    }

61.    onAccept() {
62.      console.info('Callback when the second button is clicked')
63.    }

65.    existApp() {
66.      console.info('Click the callback in the blank area')
67.    }

69.    build() {
70.      Column() {
71.        Button('click me')
72.          .onClick(() => {
73.            if (this.dialogController != null) {
74.              this.dialogController.open()
75.            }
76.          }).backgroundColor(0x317aff)
77.      }.width('100%').margin({ top: 5 })
78.    }
79.  }

![Image 2](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240821122313.32566438363836863948107427666366:50001231000000:2800:1020DCF2B123511DB313A7DDACC0A183CBDBEC1D52113196171166258C1C7A93.jpg?needInitFileName=true?needInitFileName=true)

### 示例3

该示例定义了CustomDialog的样式，如宽度、高度、背景色、阴影等等

已复制

1.  // xxx.ets
2.  @CustomDialog
3.  struct CustomDialogExample {
4.    controller?: CustomDialogController
5.    cancel: () => void = () => {
6.    }
7.    confirm: () => void = () => {
8.    }
9.    build() {
10.      Column() {
11.        Text('这是自定义弹窗')
12.          .fontSize(30)
13.          .height(100)
14.        Button('点我关闭弹窗')
15.          .onClick(() => {
16.            if (this.controller != undefined) {
17.              this.controller.close()
18.            }
19.          })
20.          .margin(20)
21.      }
22.    }
23.  }
24.  @Entry
25.  @Component
26.  struct CustomDialogUser {
27.    dialogController: CustomDialogController | null = new CustomDialogController({
28.      builder: CustomDialogExample({
29.        cancel: ()=> { this.onCancel() },
30.        confirm: ()=> { this.onAccept() }
31.      }),
32.      cancel: this.existApp,
33.      autoCancel: true,
34.      onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {
35.        console.info("reason=" + JSON.stringify(dismissDialogAction.reason))
36.        console.log("dialog onWillDismiss")
37.        if (dismissDialogAction.reason == DismissReason.PRESS\_BACK) {
38.          dismissDialogAction.dismiss()
39.        }
40.        if (dismissDialogAction.reason == DismissReason.TOUCH\_OUTSIDE) {
41.          dismissDialogAction.dismiss()
42.        }
43.      },
44.      alignment: DialogAlignment.Center,
45.      offset: { dx: 0, dy: -20 },
46.      customStyle: false,
47.      cornerRadius: 20,
48.      width: 300,
49.      height: 200,
50.      borderWidth: 1,
51.      borderStyle: BorderStyle.Dashed,//使用borderStyle属性，需要和borderWidth属性一起使用
52.      borderColor: Color.Blue,//使用borderColor属性，需要和borderWidth属性一起使用
53.      backgroundColor: Color.White,
54.      shadow: ({ radius: 20, color: Color.Grey, offsetX: 50, offsetY: 0}),
55.    })
56.    // 在自定义组件即将析构销毁时将dialogController置空
57.    aboutToDisappear() {
58.      this.dialogController = null // 将dialogController置空
59.    }

61.    onCancel() {
62.      console.info('Callback when the first button is clicked')
63.    }

65.    onAccept() {
66.      console.info('Callback when the second button is clicked')
67.    }

69.    existApp() {
70.      console.info('Click the callback in the blank area')
71.    }

73.    build() {
74.      Column() {
75.        Button('click me')
76.          .onClick(() => {
77.            if (this.dialogController != null) {
78.              this.dialogController.open()
79.            }
80.          }).backgroundColor(0x317aff)
81.      }.width('100%').margin({ top: 5 })
82.    }
83.  }

![Image 3](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240821122313.80594742845613730690265977829916:50001231000000:2800:50C389328196CE4DCE1FADFC0116EF5645A8577BEABDDB20E20330C5C0089221.gif?needInitFileName=true?needInitFileName=true)

[列表选择弹窗 (ActionSheet)](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-action-sheet-V5 "列表选择弹窗 (ActionSheet)")

[日历选择器弹窗 (CalendarPickerDialog)](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-methods-calendarpicker-dialog-V5 "日历选择器弹窗 (CalendarPickerDialog)")

**以上内容对您是否有帮助？**

*   毫无帮助
*   帮助不大
*   一般
*   很好
*   非常好

意见反馈

更多帮助请到“[社区论坛](https://developer.huawei.com/consumer/cn/forum/)”，如需要其他帮助，请通过“[智能客服](https://developer.huawei.com/consumer/cn/customerService/#/bot-dev-top/faq-top/faq-talk-top)”提问。

简体中文

*   ![Image 4](https://developer.huawei.com/images/foot/icon-xinlang-normal.png)
*   ![Image 5](https://developer.huawei.com/images/home/Bi-hover.png)
*   ![Image 6](https://developer.huawei.com/images/foot/icon-weixin-normal.png)
    
    ![Image 7](https://developer.huawei.com/consumer/cn/doc/assets/images/head/hua_wei_kai_fa_zhe_lian_meng_fu_wu_wei_xin_er_wei_ma_fu_ben_0.jpg)
    
    微信公众号
    
*   ![Image 8](https://developer.huawei.com/images/foot/icon-app-normal.png)
    
    ![Image 9](https://developer.huawei.com/consumer/cn/doc/assets/images/head/APPerweima.png)
    
    下载APP
    
*   ![Image 10](https://developer.huawei.com/images/foot/icon-xinxi-normal.png)
*   ![Image 11](https://developer.huawei.com/images/foot/ic_blog_hover.svg)

华为开发者联盟 版权所有 ©2023-2024

[使用条款](https://developer.huawei.com/consumer/cn/devservice/use)

[关于华为开发者联盟与隐私的声明](https://developer.huawei.com/consumer/cn/devservice/term)

[隐私政策](https://consumer.huawei.com/cn/legal/privacy-policy/)

[cookies](https://consumer.huawei.com/cn/legal/cookie-policy/)

[开源软件声明](https://developer.huawei.com/consumer/cn/opensource/)

在 API参考 中进行搜索

只在 应用框架 中搜索只搜索章节标题

请输入您想要搜索的关键词

*   智能客服
    
    您的每一次的提问，都能匹配最合适的答案
    

*   合作咨询
    
    我们的专家服务团队将竭诚为您提供专业的合作咨询服务
    

*   解决方案
    
    精准高效的一站式服务支持，助力开发者商业成功
    

*   快速入门
    
    面向开发者提供快速入门指南，轻松找到你想要的各类资源
    

文档内容搜索功能移到这里了

好的，知道了
