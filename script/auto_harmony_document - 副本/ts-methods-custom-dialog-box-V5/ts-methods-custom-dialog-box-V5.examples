/*\n实现一个自定义对话框组件，包含一个按钮用于触发对话框的显示。对话框内包含两个按钮，分别用于取消和确认操作。对话框的显示位置、样式、以及关闭时的回调函数都可以自定义。\n*/\n\n@Entry\n@Component\nstruct CustomDialogUser {\n  @State textValue: string = '' // 文本输入框的初始值\n  @State inputValue: string = 'click me' // 按钮的初始文本\n\n  // 创建一个自定义对话框控制器，用于管理对话框的显示和隐藏\n  dialogController: CustomDialogController | null = new CustomDialogController({\n    builder: CustomDialogExample({\n      cancel: ()=> { this.onCancel() }, // 取消按钮的回调函数\n      confirm: ()=> { this.onAccept() }, // 确认按钮的回调函数\n      textValue: $textValue, // 绑定文本输入框的值\n      inputValue: $inputValue // 绑定按钮的文本\n    }),\n    cancel: this.exitApp, // 点击空白区域或按下返回键时的回调函数\n    autoCancel: True, // 是否自动取消对话框\n    onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n      console.info("reason=" + JSON.stringify(dismissDialogAction.reason)) // 对话框即将关闭时的回调函数，输出关闭原因\n      console.log("dialog onWillDismiss")\n      if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n        dismissDialogAction.dismiss() // 按下返回键时关闭对话框\n      }\n      if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n        dismissDialogAction.dismiss() // 点击对话框外部时关闭对话框\n      }\n    },\n    alignment: DialogAlignment.Bottom, // 对话框的对齐方式，底部对齐\n    offset: { dx: 0, dy: -20 }, // 对话框的偏移量\n    gridCount: 4, // 对话框的网格数\n    customStyle: False, // 是否使用自定义样式\n    cornerRadius: 10, // 对话框的圆角半径\n  })\n\n  // 在自定义组件即将析构销毁时将dialogController置空\n  aboutToDisappear() {\n    this.dialogController = null\n  }\n\n  // 取消按钮的回调函数\n  onCancel() {\n    console.info('Callback when the first button is clicked')\n  }\n\n  // 确认按钮的回调函数\n  onAccept() {\n    console.info('Callback when the second button is clicked')\n  }\n\n  // 点击空白区域的回调函数\n  exitApp() {\n    console.info('Click the callback in the blank area')\n  }\n\n  // 构建UI界面\n  build() {\n    Column() {\n      Button(this.inputValue) // 创建一个按钮，按钮文本为inputValue\n        .onClick(() => {\n          if (this.dialogController != null) {\n            this.dialogController.open() // 点击按钮时打开对话框\n          }\n        }).backgroundColor(0x317aff) // 设置按钮的背景颜色\n    }.width('100%').margin({ top: 5 }) // 设置列的宽度为100%，顶部外边距为5\n  }\n}


/*\n实现一个自定义对话框组件，包含取消和确认按钮，支持点击空白区域和返回键关闭对话框。对话框居中显示，带有偏移量和圆角效果。主组件中包含一个按钮，点击按钮时打开对话框。\n*/\n\n@Entry\n@Component\nstruct CustomDialogUser {\n  // 创建一个自定义对话框控制器实例，用于管理和控制对话框的显示和关闭\n  dialogController: CustomDialogController | null = new CustomDialogController({\n    builder: CustomDialogExample({ // 创建自定义对话框实例\n      cancel: ()=> { this.onCancel() }, // 设置取消按钮的回调函数\n      confirm: ()=> { this.onAccept() } // 设置确认按钮的回调函数\n    }),\n    cancel: this.existApp, // 设置空白区域点击的回调函数\n    autoCancel: True, // 设置是否自动取消对话框\n    onWillDismiss:(dismissDialogAction: DismissDialogAction)=> { // 设置对话框即将关闭时的回调函数\n      console.info("reason=" + JSON.stringify(dismissDialogAction.reason)) // 打印关闭原因\n      console.log("dialog onWillDismiss") // 打印日志\n      if (dismissDialogAction.reason == DismissReason.PRESS_BACK) { // 如果关闭原因是按下返回键\n        dismissDialogAction.dismiss() // 关闭对话框\n      }\n      if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) { // 如果关闭原因是点击外部区域\n        dismissDialogAction.dismiss() // 关闭对话框\n      }\n    },\n    alignment: DialogAlignment.Center, // 设置对话框的对齐方式\n    offset: { dx: 0, dy: -20 }, // 设置对话框的偏移量\n    gridCount: 4, // 设置对话框的网格数\n    showInSubWindow: True, // 设置是否在子窗口显示对话框\n    isModal: True, // 设置对话框是否为模态\n    customStyle: False, // 设置是否使用自定义样式\n    cornerRadius: 10, // 设置对话框的圆角半径\n  })\n\n  // 在自定义组件即将析构销毁时将dialogController置空\n  aboutToDisappear() {\n    this.dialogController = null // 将dialogController置空\n  }\n\n  // 取消按钮点击的回调函数\n  onCancel() {\n    console.info('Callback when the first button is clicked') // 打印取消按钮点击的日志\n  }\n\n  // 确认按钮点击的回调函数\n  onAccept() {\n    console.info('Callback when the second button is clicked') // 打印确认按钮点击的日志\n  }\n\n  // 空白区域点击的回调函数\n  existApp() {\n    console.info('Click the callback in the blank area') // 打印空白区域点击的日志\n  }\n\n  // 构建主组件\n  build() {\n    Column() {\n      Button('click me') // 主组件中的按钮\n        .onClick(() => { // 按钮的点击事件\n          if (this.dialogController != null) { // 检查控制器是否存在\n            this.dialogController.open() // 打开对话框\n          }\n        }).backgroundColor(0x317aff) // 设置按钮的背景颜色\n    }.width('100%').margin({ top: 5 }) // 设置列的宽度和上边距\n  }\n}


/*\n实现一个自定义对话框组件，支持通过按钮点击打开对话框，并设置对话框的各种属性，如对齐方式、偏移、样式、回调函数等。对话框包含取消和确认按钮，点击按钮时会触发相应的回调函数。对话框还支持点击空白区域关闭，并且可以在对话框即将关闭时执行自定义逻辑。\n*/\n\n@Entry\n@Component\nstruct CustomDialogUser {\n  // 创建一个CustomDialogController实例，用于控制对话框的显示和隐藏\n  dialogController: CustomDialogController | null = new CustomDialogController({\n    builder: CustomDialogExample({\n      cancel: ()=> { this.onCancel() }, // 设置取消按钮的回调函数\n      confirm: ()=> { this.onAccept() } // 设置确认按钮的回调函数\n    }),\n    cancel: this.existApp, // 设置点击空白区域的回调函数\n    autoCancel: True, // 设置是否在点击空白区域时自动取消对话框\n    onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n      console.info("reason=" + JSON.stringify(dismissDialogAction.reason)) // 打印对话框关闭的原因\n      console.log("dialog onWillDismiss") // 打印日志\n      if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n        dismissDialogAction.dismiss() // 如果原因是按下返回键，则关闭对话框\n      }\n      if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n        dismissDialogAction.dismiss() // 如果原因是点击空白区域，则关闭对话框\n      }\n    },\n    alignment: DialogAlignment.Center, // 设置对话框的对齐方式为中心对齐\n    offset: { dx: 0, dy: -20 }, // 设置对话框的偏移量，向上偏移20个单位\n    customStyle: False, // 设置是否使用自定义样式\n    cornerRadius: 20, // 设置对话框的圆角半径为20\n    width: 300, // 设置对话框的宽度为300\n    height: 200, // 设置对话框的高度为200\n    borderWidth: 1, // 设置对话框的边框宽度为1\n    borderStyle: BorderStyle.Dashed, // 设置对话框的边框样式为虚线\n    borderColor: Color.Blue, // 设置对话框的边框颜色为蓝色\n    backgroundColor: Color.White, // 设置对话框的背景颜色为白色\n    shadow: ({ radius: 20, color: Color.Grey, offsetX: 50, offsetY: 0}) // 设置对话框的阴影效果\n  })\n\n  // 在自定义组件即将析构销毁时将dialogController置空\n  aboutToDisappear() {\n    this.dialogController = null // 将dialogController置空\n  }\n\n  // 取消按钮的回调函数\n  onCancel() {\n    console.info('Callback when the first button is clicked') // 打印取消回调日志\n  }\n\n  // 确认按钮的回调函数\n  onAccept() {\n    console.info('Callback when the second button is clicked') // 打印确认回调日志\n  }\n\n  // 点击空白区域的回调函数\n  existApp() {\n    console.info('Click the callback in the blank area') // 打印点击空白区域回调日志\n  }\n\n  // 构建UI布局\n  build() {\n    Column() {\n      Button('click me') // 显示一个按钮，点击按钮时打开对话框\n        .onClick(() => {\n          if (this.dialogController != null) {\n            this.dialogController.open() // 点击按钮打开对话框\n          }\n        }).backgroundColor(0x317aff) // 设置按钮的背景颜色为蓝色\n    }.width('100%').margin({ top: 5 }) // 设置列的宽度和上边距\n  }\n}