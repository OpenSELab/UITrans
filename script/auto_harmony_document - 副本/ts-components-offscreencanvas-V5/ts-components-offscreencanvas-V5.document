Title: OffscreenCanvas-画布绘制-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-components-offscreencanvas-V5

Markdown Content:
OffscreenCanvas组件用于自定义绘制图形。

使用[Canvas](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-components-canvas-canvas-V5)组件或[Canvas API](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-canvasrenderingcontext2d-V5)时，渲染、动画和用户交互通常发生在应用程序的主线程上，与画布动画和渲染相关的计算可能会影响应用程序性能。OffscreenCanvas提供了一个可以在屏幕外渲染的画布，这样可以在单独的线程中运行一些任务，从而避免影响应用程序主线程性能。

说明

该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

接口
--

OffscreenCanvas(width: number, height: number, unit?: LengthMetricsUnit)

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| width | number | 是 | OffscreenCanvas组件的宽度。
默认单位为vp。

 |
| height | number | 是 | OffscreenCanvas组件的高度。

默认单位为vp。

 |
| unit12+ | [LengthMetricsUnit](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-graphics-V5#lengthmetricsunit12) | 否 | 用来配置OffscreenCanvas对象的单位模式，配置后无法动态更改，配置方法同[CanvasRenderingContext2D](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-canvasrenderingcontext2d-V5#lengthmetricsunit12)。

默认值：DEFAULT。

 |

属性
--

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

OffscreenCanvas支持以下属性：

| 名称 | 类型 | 只读 | 可选 | 说明 |
| --- | --- | --- | --- | --- |
| width | number | 否 | 否 | OffscreenCanvas组件的宽度。
默认单位为vp。

 |
| height | number | 否 | 否 | OffscreenCanvas组件的高度。

默认单位为vp。

 |

### width

2.  @Entry
3.  @Component
4.  struct OffscreenCanvasPage {
5.    private settings: RenderingContextSettings = new RenderingContextSettings(true);
6.    private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings);
7.    private offCanvas: OffscreenCanvas = new OffscreenCanvas(200, 300)

9.    build() {
10.      Flex({ direction: FlexDirection.Row, alignItems: ItemAlign.Start, justifyContent: FlexAlign.Start }) {
11.        Column() {
12.          Canvas(this.context)
13.            .width('100%')
14.            .height('100%')
15.            .borderWidth(5)
16.            .borderColor('#057D02')
17.            .backgroundColor('#FFFFFF')
18.            .onReady(() => {
19.              let offContext = this.offCanvas.getContext("2d", this.settings)
20.              offContext.fillStyle = '#CDCDCD'
21.              offContext.fillRect(0, 0, this.offCanvas.width, 150)
22.              let image = this.offCanvas.transferToImageBitmap()
23.              this.context.setTransform(1, 0, 0, 1, 50, 200)
24.              this.context.transferFromImageBitmap(image)
25.            })
26.        }
27.      }.width('100%').height('100%')
28.    }
29.  }

![Image 1](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240829194658.07783734434508597846074497027992:50001231000000:2800:806A6681DD7813697D024E52B1E4E63612975CA2EBB2598C7AC2FEF435195A87.png?needInitFileName=true?needInitFileName=true)

### height

2.  @Entry
3.  @Component
4.  struct OffscreenCanvasPage {
5.    private settings: RenderingContextSettings = new RenderingContextSettings(true);
6.    private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings);
7.    private offCanvas: OffscreenCanvas = new OffscreenCanvas(200, 300)

9.    build() {
10.      Flex({ direction: FlexDirection.Row, alignItems: ItemAlign.Start, justifyContent: FlexAlign.Start }) {
11.        Column() {
12.          Canvas(this.context)
13.            .width('100%')
14.            .height('100%')
15.            .borderWidth(5)
16.            .borderColor('#057D02')
17.            .backgroundColor('#FFFFFF')
18.            .onReady(() => {
19.              let offContext = this.offCanvas.getContext("2d", this.settings)
20.              offContext.fillStyle = '#CDCDCD'
21.              offContext.fillRect(0, 0, 100, this.offCanvas.height)
22.              let image = this.offCanvas.transferToImageBitmap()
23.              this.context.setTransform(1, 0, 0, 1, 50, 200)
24.              this.context.transferFromImageBitmap(image)
25.            })
26.        }
27.      }.width('100%').height('100%')
28.    }
29.  }

![Image 2](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240829194658.48260194961935641408461751376449:50001231000000:2800:44E7792613C4FBF78EFB190D5CC0447206539F035C195ED66AF340C4BDAAA283.png?needInitFileName=true?needInitFileName=true)

方法
--

### transferToImageBitmap

transferToImageBitmap(): ImageBitmap

从OffscreenCanvas组件中最近渲染的图像创建一个ImageBitmap对象。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

**示例：**

2.  @Entry
3.  @Component
4.  struct OffscreenCanvasPage {
5.    private settings: RenderingContextSettings = new RenderingContextSettings(true)
6.    private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)
7.    private offCanvas: OffscreenCanvas = new OffscreenCanvas(300, 500)

9.    build() {
10.      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {
11.        Canvas(this.context)
12.          .width('100%')
13.          .height('100%')
14.          .borderWidth(5)
15.          .borderColor('#057D02')
16.          .backgroundColor('#FFFFFF')
17.          .onReady(() => {
18.            let offContext = this.offCanvas.getContext("2d", this.settings)
19.            offContext.fillStyle = '#CDCDCD'
20.            offContext.fillRect(0, 0, 300, 500)
21.            offContext.fillStyle = '#000000'
22.            offContext.font = '70px serif bold'
23.            offContext.fillText("Offscreen : Hello World!", 20, 60)
24.            let image = this.offCanvas.transferToImageBitmap()
25.            this.context.transferFromImageBitmap(image)
26.          })
27.      }
28.      .width('100%')
29.      .height('100%')
30.    }
31.  }

![Image 3](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240829194658.12946515449072555882120193041710:50001231000000:2800:3C2733EB0A87FBE5FB88F35CDEDCAE968CD67752168681E6662D04081CCF91F5.png?needInitFileName=true?needInitFileName=true)

### getContext10+

getContext(contextType: "2d", options?: RenderingContextSettings): OffscreenCanvasRenderingContext2D

返回OffscreenCanvas组件的绘图上下文。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

**返回值：**

**示例：**

1.  @Entry
2.  @Component
3.  struct OffscreenCanvasExamplePage {
4.    private settings: RenderingContextSettings = new RenderingContextSettings(true);
5.    private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings);
6.    private offscreenCanvas: OffscreenCanvas = new OffscreenCanvas(600, 800)

8.    build() {
9.      Flex({ direction: FlexDirection.Row, alignItems: ItemAlign.Start, justifyContent: FlexAlign.Start }) {
10.        Column() {
11.          Canvas(this.context)
12.            .width('100%')
13.            .height('100%')
14.            .backgroundColor('#FFFFFF')
15.            .onReady(() => {
16.              let offContext = this.offscreenCanvas.getContext("2d", this.settings)
17.              offContext.font = '70px sans-serif'
18.              offContext.fillText("Offscreen : Hello World!", 20, 60)
19.              offContext.fillStyle = "#0000ff"
20.              offContext.fillRect(230, 350, 50, 50)
21.              offContext.fillStyle = "#EE0077"
22.              offContext.translate(70, 70)
23.              offContext.fillRect(230, 350, 50, 50)
24.              offContext.fillStyle = "#77EE0077"
25.              offContext.translate(-70, -70)
26.              offContext.fillStyle = "#00ffff"
27.              offContext.rotate(45 \* Math.PI / 180);
28.              offContext.fillRect(180, 120, 50, 50);
29.              offContext.rotate(-45 \* Math.PI / 180);
30.              offContext.beginPath()
31.              offContext.moveTo(10, 150)
32.              offContext.bezierCurveTo(20, 100, 200, 100, 200, 20)
33.              offContext.stroke()
34.              offContext.fillStyle = '#FF00FF'
35.              offContext.fillRect(100, 100, 60, 60)
36.              let imageData = this.offscreenCanvas.transferToImageBitmap()
37.              this.context.transferFromImageBitmap(imageData)
38.            })
39.        }.width('100%').height('100%')
40.      }
41.      .width('100%')
42.      .height('100%')
43.    }
44.  }

![Image 4](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240829194658.53677983732777152865091401056624:50001231000000:2800:5871BADA475B38FDAD324DC42E0B06C844099251337D29FFF67426FAA372187E.png?needInitFileName=true?needInitFileName=true)

从API version 11开始，当应用创建[Worker线程](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/worker-introduction-V5)，支持使用postMessage将OffscreenCanvas实例传到Worker中进行绘制，并使用onmessage接收Worker线程发送的绘制结果进行显示。

说明

OffscreenCanvas对象使用getContext获取绘图上下文后，不允许通过postMessage传该对象给其他线程，否则抛出异常。

已经通过postMessage传OffscreenCanvas对象到某一线程，声明该对象的线程不允许该对象使用getContext和transferToImageBitmap方法，否则抛出异常。

已经通过postMessage传OffscreenCanvas对象到某一线程，不允许再将该对象通过postMessage传给其他线程，否则抛出异常。

**示例：**

1.  import { worker } from '@kit.ArkTS';

3.  @Entry
4.  @Component
5.  struct OffscreenCanvasExamplePage {
6.    private settings: RenderingContextSettings = new RenderingContextSettings(true);
7.    private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings);
8.    private myWorker = new worker.ThreadWorker('entry/ets/workers/Worker.ts');

10.    build() {
11.      Flex({ direction: FlexDirection.Row, alignItems: ItemAlign.Start, justifyContent: FlexAlign.Start }) {
12.        Column() {
13.          Canvas(this.context)
14.            .width('100%')
15.            .height('100%')
16.            .borderWidth(5)
17.            .borderColor('#057D02')
18.            .backgroundColor('#FFFFFF')
19.            .onReady(() => {
20.              let offCanvas = new OffscreenCanvas(600, 800)
21.              this.myWorker.postMessage({ myOffCanvas: offCanvas });
22.              this.myWorker.onmessage = (e): void => {
23.                if (e.data.myImage) {
24.                  let image: ImageBitmap = e.data.myImage
25.                  this.context.transferFromImageBitmap(image)
26.                }
27.              }

29.            })
30.        }.width('100%').height('100%')
31.      }
32.      .width('100%')
33.      .height('100%')
34.    }
35.  }

Worker线程在onmessage中接收到主线程postMessage发送的OffscreenCanvas，并进行绘制。

1.  workerPort.onmessage = (e: MessageEvents) => {
2.    if (e.data.myOffCanvas) {
3.      let offCanvas: OffscreenCanvas = e.data.myOffCanvas
4.      let offContext = offCanvas.getContext("2d")
5.      offContext.fillStyle = '#CDCDCD'
6.      offContext.fillRect(0, 0, 200, 150)
7.      let image = offCanvas.transferToImageBitmap()
8.      workerPort.postMessage({ myImage: image });
9.    }
10.  }

![Image 5](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240829194658.89935054578889760433681326070926:50001231000000:2800:67A3A880DEB200B725F7242938110CA93EB15A6E2A148256ACAE4EBF273A9717.png?needInitFileName=true?needInitFileName=true)
