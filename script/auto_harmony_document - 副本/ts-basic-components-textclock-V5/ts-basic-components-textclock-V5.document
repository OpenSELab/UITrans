Title: TextClock-信息展示-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-textclock-V5

Markdown Content:
TextClock组件通过文本将当前系统时间显示在设备上。支持不同时区的时间显示，最高精度到秒级。

在组件不可见时时间变动将停止，组件的可见状态基于[onVisibleAreaChange](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-component-visible-area-change-event-V5#onvisibleareachange)处理，可见阈值ratios大于0即视为可见状态。

说明

该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

接口
--

TextClock(options?: { timeZoneOffset?: number, controller?: TextClockController })

**卡片能力：** 从API version 11开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

timeZoneOffset

number

否

设置时区偏移量。

取值范围为\[-14, 12\]，表示东十二区到西十二区，其中负值表示东时区，正值表示西时区，比如东八区为-8。设置值为该取值范围内的浮点数时会进行取整，舍弃小数部分。

对横跨国际日界线的国家或地区，用-13（UTC+13）和-14（UTC+14）来保证整个国家或者区域处在相同的时间，当设置的值不在取值范围内时，将使用当前系统的时区偏移量。

默认值：当前系统的时区偏移量

从API version 11开始，设置值为{ 9.5, 3.5, -3.5, -4.5, -5.5, -5.75, -6.5, -9.5, -10.5, -12.75 }集合中的浮点数时不再进行取整。

controller

[TextClockController](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-textclock-V5#textclockcontroller)

否

绑定一个控制器，用来控制文本时钟的状态。

属性
--

除支持[通用属性](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-size-V5)和[文本通用属性](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-text-style-V5)的fontColor、fontSize、fontStyle、fontWeight、fontFamily外，还支持以下属性：

### format

format(value: string)

设置显示时间格式，如“yyyy/MM/dd”、“yyyy-MM-dd”。

y：年（yyyy表示完整年份，yy表示年份后两位）

M：月（若想使用01月则使用MM）

d：日（若想使用01日则使用dd）

E：星期（若想使用星期六则使用EEEE，若想使用周六则使用E、EE、EEE）H：小时（24小时制） h：小时（12小时制）

m：分钟

s：秒

SS：厘秒(format中S个数<3，全部按厘秒处理)

SSS：毫秒(format中S个数\>\=3，全部按毫秒处理)

a：上午/下午（当设置小时制式为H时，该参数不生效）

日期间隔符："年月日"、“/”、"-"、"."（可以自定义间隔符样式，间隔符不可以为字母，汉字则作为间隔符处理）

允许自行拼接组合显示格式，即：年、月、日、星期、时、分、秒、毫秒可拆分为子元素，可自行排布组合。时间更新频率最高为一秒一次，不建议单独设置厘秒和毫秒格式。

当设置无效字母时（非上述字母被认为是无效字母），该字母会被忽略。如果format全是无效字母时，显示格式跟随系统语言和系统小时制。例如系统语言为中文时，12小时制显示格式为yyyy/MM/dd aa hh:mm:ss.SSS，24小时制显示格式为yyyy/MM/dd HH:mm:ss.SSS。

若format为空或者undefined，则使用默认值。

非卡片中默认值：12小时制：aa hh:mm:ss，24小时制：HH:mm:ss。

卡片中默认值：12小时制：hh:mm，24小时制：HH:mm 。

卡片中使用时，最小时间单位为分钟。如果设置格式中有秒或厘秒按默认值处理。

**卡片能力：** 从API version 11开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

string

是

显示时间格式。

以下是format输入的格式样式及对应的显示效果：

输入格式

显示效果

yyyy年M月d日 EEEE

2023年2月4日 星期六

yyyy年M月d日

2023年2月4日

M月d日 EEEE

2月4日 星期六

M月d日

2月4日

MM/dd/yyyy

02/04/2023

EEEE MM月dd日

星期六 02月04日

yyyy（完整年份）

2023年

yy（年份后两位）

23年

MM（完整月份）

02月

M（月份）

2月

dd（完整日期）

04日

d（日期）

4日

EEEE（完整星期）

星期六

E、EE、EEE（简写星期）

周六

yyyy年M月d日

2023年2月4日

yyyy/M/d

2023/2/4

yyyy-M-d

2023-2-4

yyyy.M.d

2023.2.4

HH:mm:ss（时:分:秒）

17:00:04

aa hh:mm:ss（时:分:秒）

上午 5:00:04

hh:mm:ss（时:分:秒）

5:00:04

HH:mm（时:分）

17:00

aa hh:mm（时:分）

上午 5:00

hh:mm（时:分）

5:00

mm:ss（分:秒）

00:04

mm:ss.SS（分:秒.厘秒）

00:04.91

mm:ss.SSS（分:秒.毫秒）

00:04.536

hh:mm:ss aa

5:00:04 上午

HH

17

### fontColor

fontColor(value: ResourceColor)

设置字体颜色。

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### fontSize

fontSize(value: Length)

设置字体大小。

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[Length](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#length)

是

字体大小。fontSize为number类型时，使用fp单位。字体默认大小16fp。不支持设置百分比字符串。

### fontStyle

fontStyle(value: FontStyle)

设置字体样式。

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[FontStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#fontstyle)

是

字体样式。

默认值：FontStyle.Normal

### fontWeight

fontWeight(value: number | FontWeight | string)

设置文本的字体粗细，设置过大可能会在不同字体下有截断。

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

number | [FontWeight](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#fontweight) | string

是

文本的字体粗细，number类型取值\[100, 900\]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如"400"，以及"bold"、"bolder"、"lighter"、"regular"、"medium"，分别对应FontWeight中相应的枚举值。

默认值：FontWeight.Normal

### fontFamily

fontFamily(value: ResourceStr)

设置字体列表。

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

是

字体列表。默认字体'HarmonyOS Sans'。

应用当前支持'HarmonyOS Sans'字体和[注册自定义字体](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-font-V5)。

卡片当前仅支持'HarmonyOS Sans'字体。

### textShadow11+

textShadow(value: ShadowOptions | Array<ShadowOptions\>)

设置文字阴影效果。该接口支持以数组形式入参，实现多重文字阴影。不支持fill字段, 不支持智能取色模式。

**卡片能力：** 从API version 11开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### fontFeature11+

fontFeature(value: string)

设置文字特性效果，比如数字等宽的特性。

格式为：normal | <feature-tag-value\>

<feature-tag-value\>的格式为：<string\> \[ <integer\> | on | off \]

<feature-tag-value\>的个数可以有多个，中间用','隔开。

例如，使用等宽时钟数字的输入格式为："ss01" on。

**卡片能力：** 从API version 11开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

string

是

文字特性效果。

### contentModifier12+

contentModifier(modifier: ContentModifier<TextClockConfiguration\>)

定制TextClock内容区的方法。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### dateTimeOptions12+

dateTimeOptions(dateTimeOptions: Optional<DateTimeOptions\>)

设置小时是否显示前导0。

**卡片能力：** 从API version 12开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

dateTimeOptions

Optional<[DateTimeOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-intl-V5#datetimeoptions)\>

是

设置小时是否显示前导0，只支持设置hour参数，参数值为{hour: "2-digit"}时表示显示前导0，参数值为{hour: "numeric"}时表示不显示前导0。

默认值：undefined，由组件根据应用设置格式自行判断是否显示前导0。

### onDateChange

onDateChange(event: (value: number) =\> void)

提供时间变化回调，该事件回调间隔为秒。

组件不可见时不回调。

非卡片中使用时，该事件回调间隔为秒。

卡片中使用时，该事件回调间隔为分钟。

**卡片能力：** 从API version 11开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

number

是

Unix Time Stamp，即自1970年1月1日（UTC）起经过的秒数。

TextClockController
-------------------

TextClock容器组件的控制器，可以将该控制器绑定到TextClock组件，通过它控制文本时钟的启动与停止。一个TextClock组件仅支持绑定一个控制器。

**卡片能力：** 从API version 11开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### 导入对象

1.  controller: TextClockController = new TextClockController();

### constructor

constructor()

TextClockController的构造函数。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### start

start()

启动文本时钟。

**卡片能力：** 从API version 11开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### stop

stop()

停止文本时钟。

**卡片能力：** 从API version 11开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

TextClockConfiguration12+对象说明
-----------------------------

开发者需要自定义class实现ContentModifier接口。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

timeZoneOffset

number

是

当前文本时钟时区偏移量。

started

boolean

是

指示文本时钟是否启动。

默认值：true。

timeValue

number

是

当前文本时钟时区的UTC秒数。

示例
--

### 示例1

1.  @Entry
2.  @Component
3.  struct Second {
4.    @State accumulateTime: number = 0

6.    controller: TextClockController = new TextClockController()
7.    build() {
8.      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {
9.        Text('Current milliseconds is ' + this.accumulateTime)
10.          .fontSize(20)

12.        TextClock({ timeZoneOffset: -8, controller: this.controller })
13.          .format('aa hh:mm:ss')
14.          .onDateChange((value: number) =\> {
15.            this.accumulateTime = value
16.          })
17.          .margin(20)
18.          .fontSize(30)
19.        Button("start TextClock")
20.          .margin({ bottom: 10 })
21.          .onClick(() =\> {

23.            this.controller.start()
24.          })
25.        Button("stop TextClock")
26.          .onClick(() =\> {

28.            this.controller.stop()
29.          })
30.      }
31.      .width('100%')
32.      .height('100%')
33.    }
34.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114456.11880447968523860593646160623606:50001231000000:2800:51F961A242B80F97444E940869421D9FBB4D9FFB790CD9881D9460560383CA01.gif?needInitFileName=true?needInitFileName=true)

### 示例2

1.  @Entry
2.  @Component
3.  struct TextClockExample {
4.    @State textShadows : ShadowOptions | Array<ShadowOptions\> = \[{ radius: 10, color: Color.Red, offsetX: 10, offsetY: 0 },{ radius: 10, color: Color.Black, offsetX: 20, offsetY: 0 },
5.        { radius: 10, color: Color.Brown, offsetX: 30, offsetY: 0 },{ radius: 10, color: Color.Green, offsetX: 40, offsetY: 0 },
6.        { radius: 10, color: Color.Yellow, offsetX: 100, offsetY: 0 }\]
7.    build() {
8.      Column({ space: 8 }) {
9.        TextClock().fontSize(50).textShadow(this.textShadows)
10.      }
11.    }
12.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114456.41312441846906313111361555201524:50001231000000:2800:46B5E2065D0F77BD0A4F5B6DE4F5FBED32A9A4CAB695879E8D2F17162CB61453.png?needInitFileName=true?needInitFileName=true)

### 示例3

该示例实现了自定义文本时钟样式的功能，自定义样式实现了一个时间选择器组件：通过文本时钟的时区偏移量与UTC秒数，来动态改变时间选择器的选中值，实现时钟效果。同时，根据文本时钟的启动状态，实现文本选择器的12小时制与24小时制的切换。

1.  class MyTextClockStyle implements ContentModifier<TextClockConfiguration\> {
2.    currentTimeZoneOffset: number = new Date().getTimezoneOffset() / 60
3.    title: string = ''

5.    constructor(title: string) {
6.      this.title = title
7.    }

9.    applyContent(): WrappedBuilder<\[TextClockConfiguration\]\> {
10.      return wrapBuilder(buildTextClock)
11.    }
12.  }

14.  @Builder
15.  function buildTextClock(config: TextClockConfiguration) {
16.    Row() {
17.      Column() {
18.        Text((config.contentModifier as MyTextClockStyle).title)
19.          .fontSize(20)
20.          .margin(20)
21.        TimePicker({
22.          selected: (new Date(config.timeValue \* 1000 + ((config.contentModifier as MyTextClockStyle).currentTimeZoneOffset - config.timeZoneOffset) \* 60 \* 60 \* 1000)),
23.          format: TimePickerFormat.HOUR\_MINUTE\_SECOND
24.        })
25.          .useMilitaryTime(!config.started)
26.      }
27.    }
28.  }

30.  @Entry
31.  @Component
32.  struct TextClockExample {
33.    @State accumulateTime1: number = 0
34.    @State timeZoneOffset: number = -8
35.    controller1: TextClockController = new TextClockController()
36.    controller2: TextClockController = new TextClockController()

38.    build() {
39.      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {
40.        Text('Current milliseconds is ' + this.accumulateTime1)
41.          .fontSize(20)
42.          .margin({ top: 20 })
43.        TextClock({ timeZoneOffset: this.timeZoneOffset, controller: this.controller1 })
44.          .format('aa hh:mm:ss')
45.          .onDateChange((value: number) =\> {
46.            this.accumulateTime1 = value
47.          })
48.          .margin(20)
49.          .fontSize(30)
50.        TextClock({ timeZoneOffset: this.timeZoneOffset, controller: this.controller2 })
51.          .format('aa hh:mm:ss')
52.          .fontSize(30)
53.          .contentModifier(new MyTextClockStyle('ContentModifier:'))
54.        Button("start TextClock")
55.          .margin({ top: 20, bottom: 10 })
56.          .onClick(() =\> {

58.            this.controller1.start()
59.            this.controller2.start()
60.          })
61.        Button("stop TextClock")
62.          .margin({ bottom: 30 })
63.          .onClick(() =\> {

65.            this.controller1.stop()
66.            this.controller2.stop()
67.          })

69.      }
70.      .width('100%')
71.      .height('100%')
72.    }
73.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114457.80248197890712653602933173187201:50001231000000:2800:981DE53A8A4E233AD0D307EFFEDC24885289068D1A4A2F9E0AFE9C6D7EE97C6C.gif?needInitFileName=true?needInitFileName=true)

### 示例4

该示例演示了dateTimeOptions属性为小时字段增加或去除前导0的功能。24小时制的小时字段默认带有前导0，可通过dateTimeOptions属性去除前导0，12小时制的小时字段默认不带有前导0，可通过dateTimeOptions属性增加前导0。

1.  @Entry
2.  @Component
3.  struct TextClockExample {
4.    build() {
5.      Column({ space: 8 }) {
6.        Row() {
7.          Text("24小时制去除前导0：")
8.            .fontSize(20)
9.          TextClock()
10.            .fontSize(20)
11.            .format("HH:mm:ss")
12.            .dateTimeOptions({hour: "numeric"})
13.        }
14.        Row() {
15.          Text("12小时制增加前导0：")
16.            .fontSize(20)
17.          TextClock()
18.            .fontSize(20)
19.            .format("aa hh:mm:ss")
20.            .dateTimeOptions({hour: "2-digit"})
21.        }
22.      }
23.      .alignItems(HorizontalAlign.Start)
24.    }
25.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114457.08687645860607163742886825321584:50001231000000:2800:F0A8A1CF2D1F88D7EF3B2EA20AD33805C0AFFFA91CE406BE010153892A64EC41.png?needInitFileName=true?needInitFileName=true)
