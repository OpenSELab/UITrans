/*\n实现一个可滚动的轮播组件，支持按组翻页效果。组件包含一个Swiper组件，通过LazyForEach动态加载数据，并使用SwiperController控制轮播的前进和后退。轮播组件支持自动播放、循环播放、设置间隔时间、动画持续时间、项目间距以及自定义指示器样式。\n*/\n\n// 定义一个数据源类，实现IDataSource接口\nclass MyDataSource implements IDataSource {\n  private list: number[] = [] // 存储数据的数组\n\n  // 构造函数，初始化数据源\n  constructor(list: number[]) {\n    this.list = list\n  }\n\n  // 返回数据的总数\n  totalCount(): number {\n    return this.list.length\n  }\n\n  // 根据索引获取数据\n  getData(index: number): number {\n    return this.list[index]\n  }\n\n  // 注册数据变化监听器（未实现）\n  registerDataChangeListener(listener: DataChangeListener): void {\n  }\n\n  // 注销数据变化监听器（未实现）\n  unregisterDataChangeListener() {\n  }\n}\n\n// 主入口组件\n@Entry\n@Component\nstruct SwiperExample {\n  private swiperController: SwiperController = new SwiperController() // 创建Swiper控制器\n  private data: MyDataSource = new MyDataSource([]) // 初始化数据源\n\n  // 组件即将显示时执行的逻辑\n  aboutToAppear(): void {\n    let list: number[] = []\n    for (let i = 1; i <= 10; i++) {\n      list.push(i); // 生成1到10的数字列表\n    }\n    this.data = new MyDataSource(list) // 更新数据源\n  }\n\n  // 构建组件UI\n  build() {\n    Column({ space: 5 }) { // 创建一个垂直布局，间距为5\n      Swiper(this.swiperController) { // 创建Swiper组件，并传入控制器\n        LazyForEach(this.data, (item: string) => { // 使用LazyForEach动态加载数据\n          Text(item.toString()) // 创建文本组件，显示数据项\n            .width('90%') // 设置文本宽度为90%\n            .height(160) // 设置文本高度为160\n            .backgroundColor(0xAFEEEE) // 设置背景颜色\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n            .fontSize(30) // 设置字体大小为30\n        }, (item: string) => item) // 使用数据项作为键\n      }\n      .displayCount(3, true) // 设置每页显示3个项目，并启用按组翻页\n      .autoPlay(true) // 启用自动播放\n      .interval(4000) // 设置自动播放间隔为4秒\n      .loop(true) // 启用循环播放\n      .duration(1000) // 设置动画持续时间为1秒\n      .itemSpace(10) // 设置项目间距为10\n      .indicator( \n        new DotIndicator() // 创建指示器\n          .itemWidth(15) // 设置指示器项宽度为15\n          .itemHeight(15) // 设置指示器项高度为15\n          .selectedItemWidth(15) // 设置选中项宽度为15\n          .selectedItemHeight(15) // 设置选中项高度为15\n          .color(Color.Gray) // 设置指示器颜色为灰色\n          .selectedColor(Color.Blue)) // 设置选中项颜色为蓝色\n\n      Row({ space: 12 }) { // 创建一个水平布局，间距为12\n        Button('showNext') // 创建按钮，显示“下一页”\n          .onClick(() => {\n            this.swiperController.showNext() // 点击按钮时显示下一页\n          })\n        Button('showPrevious') // 创建按钮，显示“上一页”\n          .onClick(() => {\n            this.swiperController.showPrevious() // 点击按钮时显示上一页\n          })\n      }.margin(5) // 设置按钮布局的上下外边距为5\n    }.width('100%') // 设置主布局宽度为100%\n    .margin({ top: 5 }) // 设置主布局的上外边距为5\n  }\n}


/*\n实现一个带有圆点导航指示器的轮播图组件，支持自动播放、循环播放、手动切换等功能。导航指示器通过DotIndicator接口的maxDisplayCount属性实现超长显示动画效果。\n*/\n\n// 定义一个数据源类，实现IDataSource接口，用于提供Swiper组件的数据\nclass MyDataSource implements IDataSource {\n  private list: number[] = [] // 存储数据列表\n\n  // 构造函数，初始化数据列表\n  constructor(list: number[]) {\n    this.list = list\n  }\n\n  // 返回数据的总数\n  totalCount(): number {\n    return this.list.length\n  }\n\n  // 根据索引获取数据\n  getData(index: number): number {\n    return this.list[index]\n  }\n\n  // 注册数据变化监听器（未实现）\n  registerDataChangeListener(listener: DataChangeListener): void {\n  }\n\n  // 注销数据变化监听器（未实现）\n  unregisterDataChangeListener() {\n  }\n}\n\n// 主入口组件\n@Entry\n@Component\nstruct Index {\n  private swiperController: SwiperController = new SwiperController() // 创建Swiper控制器，用于手动控制Swiper的切换\n  private data: MyDataSource = new MyDataSource([]) // 初始化数据源\n\n  // 组件即将显示时执行的逻辑\n  aboutToAppear(): void {\n    let list: number[] = []\n    for (let i = 1; i <= 15; i++) { // 生成15个数字作为数据源\n      list.push(i);\n    }\n    this.data = new MyDataSource(list) // 更新数据源\n  }\n\n  // 构建组件UI\n  build() {\n    Column({ space: 5 }) { // 创建一个垂直布局，间距为5\n      Swiper(this.swiperController) { // 创建一个Swiper组件，使用swiperController进行控制\n        LazyForEach(this.data, (item: string) => { // 使用LazyForEach遍历数据源\n          Text(item.toString()) // 显示每个数据项\n            .width('90%') // 设置文本宽度为90%\n            .height(160) // 设置文本高度为160\n            .backgroundColor(0xAFEEEE) // 设置背景颜色\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n            .fontSize(30) // 设置字体大小为30\n        }, (item: string) => item) // 使用数据项作为唯一标识符\n      }\n      .cachedCount(2) // 设置缓存页数为2\n      .index(5) // 设置初始显示的索引为5\n      .autoPlay(true) // 开启自动播放\n      .interval(4000) // 设置自动播放间隔为4000毫秒\n      .loop(true) // 开启循环播放\n      .duration(1000) // 设置切换动画时长为1000毫秒\n      .itemSpace(0) // 设置页面间距为0\n      .indicator( \n        new DotIndicator() // 创建一个圆点指示器\n          .itemWidth(8) // 设置未选中圆点的宽度为8\n          .itemHeight(8) // 设置未选中圆点的高度为8\n          .selectedItemWidth(16) // 设置选中圆点的宽度为16\n          .selectedItemHeight(8) // 设置选中圆点的高度为8\n          .color(Color.Gray) // 设置未选中圆点的颜色为灰色\n          .selectedColor(Color.Blue) // 设置选中圆点的颜色为蓝色\n          .maxDisplayCount(9)) // 设置最多显示9个圆点\n      .displayArrow({ \n        showBackground: true, // 显示箭头背景\n        isSidebarMiddle: true, // 箭头位于侧边栏中间\n        backgroundSize: 24, // 设置箭头背景大小为24\n        backgroundColor: Color.White, // 设置箭头背景颜色为白色\n        arrowSize: 18, // 设置箭头大小为18\n        arrowColor: Color.Blue // 设置箭头颜色为蓝色\n      }, false) // 不显示箭头\n      .curve(Curve.Linear) // 设置动画曲线为线性\n      Row({ space: 12 }) { // 创建一个水平布局，间距为12\n        Button('showNext') // 创建一个按钮，显示“showNext”\n          .onClick(() => {\n            this.swiperController.showNext() // 点击按钮时显示下一页\n          })\n        Button('showPrevious') // 创建一个按钮，显示“showPrevious”\n          .onClick(() => {\n            this.swiperController.showPrevious() // 点击按钮时显示上一页\n          })\n      }.margin(5) // 设置按钮布局的外边距为5\n    }.width('100%') // 设置主布局的宽度为100%\n    .margin({ top: 5 }) // 设置主布局的上外边距为5\n  }\n}


/*\n实现一个自定义Swiper页面切换动画的示例。Swiper组件用于展示多个页面，并通过customContentTransition接口实现自定义的页面切换动画效果。每个页面包含一个文本和一个背景颜色，页面切换时会根据位置动态调整页面的透明度、缩放比例、平移距离和层级。\n*/\n\n@Entry\n@Component\nstruct SwiperCustomAnimationExample {\n  // 定义常量，表示同时显示的页面数量\n  private DISPLAY_COUNT: number = 2\n  // 定义常量，表示页面缩放的最小比例\n  private MIN_SCALE: number = 0.75\n\n  // 定义状态变量，存储每个页面的背景颜色\n  @State backgroundColors: Color[] = [Color.Green, Color.Blue, Color.Yellow, Color.Pink, Color.Gray, Color.Orange]\n  // 定义状态变量，存储每个页面的透明度\n  @State opacityList: number[] = []\n  // 定义状态变量，存储每个页面的缩放比例\n  @State scaleList: number[] = []\n  // 定义状态变量，存储每个页面的平移距离\n  @State translateList: number[] = []\n  // 定义状态变量，存储每个页面的层级\n  @State zIndexList: number[] = []\n\n  // 组件即将显示时调用的方法，初始化每个页面的透明度、缩放比例、平移距离和层级\n  aboutToAppear(): void {\n    for (let i = 0; i < this.backgroundColors.length; i++) {\n      this.opacityList.push(1.0)\n      this.scaleList.push(1.0)\n      this.translateList.push(0.0)\n      this.zIndexList.push(0)\n    }\n  }\n\n  // 构建Swiper组件\n  build() {\n    Column() {\n      Swiper() {\n        // 使用ForEach循环遍历背景颜色数组，生成每个页面\n        ForEach(this.backgroundColors, (backgroundColor: Color, index: number) => {\n          Text(index.toString()).width('100%').height('100%').fontSize(50).textAlign(TextAlign.Center)\n            .backgroundColor(backgroundColor)\n            // 设置页面的透明度\n            .opacity(this.opacityList[index])\n            // 设置页面的缩放比例\n            .scale({ x: this.scaleList[index], y: this.scaleList[index] })\n            // 设置页面的平移距离\n            .translate({ x: this.translateList[index] })\n            // 设置页面的层级\n            .zIndex(this.zIndexList[index])\n        })\n      }\n      .height(300)\n      // 隐藏Swiper的指示器\n      .indicator(false)\n      // 设置同时显示的页面数量\n      .displayCount(this.DISPLAY_COUNT, true)\n      // 自定义页面切换动画\n      .customContentTransition({\n        timeout: 1000,\n        transition: (proxy: SwiperContentTransitionProxy) => {\n          // 根据页面的位置和索引，动态调整页面的透明度、缩放比例、平移距离和层级\n          if (proxy.position <= proxy.index % this.DISPLAY_COUNT || proxy.position >= this.DISPLAY_COUNT + proxy.index % this.DISPLAY_COUNT) {\n            this.opacityList[proxy.index] = 1.0\n            this.scaleList[proxy.index] = 1.0\n            this.translateList[proxy.index] = 0.0\n            this.zIndexList[proxy.index] = 0\n          } else {\n            if (proxy.index % this.DISPLAY_COUNT === 0) {\n              this.opacityList[proxy.index] = 1 - proxy.position / this.DISPLAY_COUNT\n              this.scaleList[proxy.index] = this.MIN_SCALE + (1 - this.MIN_SCALE) * (1 - proxy.position / this.DISPLAY_COUNT)\n              this.translateList[proxy.index] = - proxy.position * proxy.mainAxisLength + (1 - this.scaleList[proxy.index]) * proxy.mainAxisLength / 2.0\n            } else {\n              this.opacityList[proxy.index] = 1 - (proxy.position - 1) / this.DISPLAY_COUNT\n              this.scaleList[proxy.index] = this.MIN_SCALE + (1 - this.MIN_SCALE) * (1 - (proxy.position - 1) / this.DISPLAY_COUNT)\n              this.translateList[proxy.index] = - (proxy.position - 1) * proxy.mainAxisLength - (1 - this.scaleList[proxy.index]) * proxy.mainAxisLength / 2.0\n            }\n            this.zIndexList[proxy.index] = -1\n          }\n        }\n      })\n      // 监听Swiper内容滚动事件，打印当前选中的索引、页面的索引、位置和主轴长度\n      .onContentDidScroll((selectedIndex: number, index: number, position: number, mainAxisLength: number) => {\n        console.info("onContentDidScroll selectedIndex: " + selectedIndex + ", index: " + index + ", position: " + position + ", mainAxisLength: " + mainAxisLength)\n      })\n    }.width('100%')\n  }\n}


/*\n实现一个可滚动的轮播图组件，支持自动播放、循环播放、导航点交互、手势滑动、动画事件等功能。\n*/\n\n// 定义一个数据源类，用于提供轮播图的数据\nclass MyDataSource implements IDataSource {\n  private list: number[] = []\n\n  // 构造函数，初始化数据源\n  constructor(list: number[]) {\n    this.list = list\n  }\n\n  // 返回数据源的总数\n  totalCount(): number {\n    return this.list.length\n  }\n\n  // 根据索引获取数据\n  getData(index: number): number {\n    return this.list[index]\n  }\n\n  // 注册数据变化监听器（未实现）\n  registerDataChangeListener(listener: DataChangeListener): void {\n  }\n\n  // 取消注册数据变化监听器（未实现）\n  unregisterDataChangeListener() {\n  }\n}\n\n// 主入口组件，定义轮播图示例\n@Entry\n@Component\nstruct SwiperExample {\n  // 轮播图控制器\n  private swiperController: SwiperController = new SwiperController()\n  // 数据源实例\n  private data: MyDataSource = new MyDataSource([])\n\n  // 组件即将显示时执行的逻辑\n  aboutToAppear(): void {\n    let list: number[] = []\n    // 生成1到10的数字列表\n    for (let i = 1; i <= 10; i++) {\n      list.push(i);\n    }\n    // 初始化数据源\n    this.data = new MyDataSource(list)\n  }\n\n  // 构建UI结构\n  build() {\n    Column({ space: 5 }) {\n      // 轮播图组件\n      Swiper(this.swiperController) {\n        // 使用LazyForEach遍历数据源并生成Text组件\n        LazyForEach(this.data, (item: string) => {\n          Text(item.toString())\n            .width('90%')\n            .height(160)\n            .backgroundColor(0xAFEEEE)\n            .textAlign(TextAlign.Center)\n            .fontSize(30)\n        }, (item: string) => item)\n      }\n      .cachedCount(2) // 设置缓存项数\n      .index(1) // 设置初始显示的索引\n      .autoPlay(true) // 开启自动播放\n      .interval(4000) // 设置自动播放间隔时间\n      .loop(true) // 开启循环播放\n      .indicatorInteractive(true) // 开启导航点交互\n      .duration(1000) // 设置动画持续时间\n      .itemSpace(0) // 设置项间距\n      .indicator( \n        new DotIndicator()\n          .itemWidth(15) // 设置导航点宽度\n          .itemHeight(15) // 设置导航点高度\n          .selectedItemWidth(15) // 设置选中导航点宽度\n          .selectedItemHeight(15) // 设置选中导航点高度\n          .color(Color.Gray) // 设置导航点颜色\n          .selectedColor(Color.Blue)) // 设置选中导航点颜色\n      .displayArrow({ \n        showBackground: true, // 显示箭头背景\n        isSidebarMiddle: true, // 箭头位于侧边栏中间\n        backgroundSize: 24, // 箭头背景大小\n        backgroundColor: Color.White, // 箭头背景颜色\n        arrowSize: 18, // 箭头大小\n        arrowColor: Color.Blue // 箭头颜色\n      }, false) // 不显示箭头\n      .curve(Curve.Linear) // 设置动画曲线\n      .onChange((index: number) => {\n        console.info(index.toString()) // 打印当前索引\n      })\n      .onGestureSwipe((index: number, extraInfo: SwiperAnimationEvent) => {\n        console.info("index: " + index) // 打印当前索引\n        console.info("current offset: " + extraInfo.currentOffset) // 打印当前偏移量\n      })\n      .onAnimationStart((index: number, targetIndex: number, extraInfo: SwiperAnimationEvent) => {\n        console.info("index: " + index) // 打印当前索引\n        console.info("targetIndex: " + targetIndex) // 打印目标索引\n        console.info("current offset: " + extraInfo.currentOffset) // 打印当前偏移量\n        console.info("target offset: " + extraInfo.targetOffset) // 打印目标偏移量\n        console.info("velocity: " + extraInfo.velocity) // 打印速度\n      })\n      .onAnimationEnd((index: number, extraInfo: SwiperAnimationEvent) => {\n        console.info("index: " + index) // 打印当前索引\n        console.info("current offset: " + extraInfo.currentOffset) // 打印当前偏移量\n      })\n\n      // 按钮行，用于控制轮播图的显示\n      Row({ space: 12 }) {\n        Button('showNext')\n          .onClick(() => {\n            this.swiperController.showNext() // 显示下一项\n          })\n        Button('showPrevious')\n          .onClick(() => {\n            this.swiperController.showPrevious() // 显示上一项\n          })\n      }.margin(5)\n    }.width('100%')\n    .margin({ top: 5 })\n  }\n}


/*\n实现一个带有数字指示器的轮播图组件。轮播图可以自动播放，并且用户可以通过按钮手动切换到上一张或下一张。数字指示器显示当前页码和总页数，并支持自定义样式。\n*/\n\n// 定义一个数据源类，实现IDataSource接口，用于提供轮播图的数据\nclass MyDataSource implements IDataSource {\n  private list: number[] = [] // 存储轮播图数据的数组\n\n  // 构造函数，接收一个数字数组作为数据源\n  constructor(list: number[]) {\n    this.list = list\n  }\n\n  // 返回数据源的总数\n  totalCount(): number {\n    return this.list.length\n  }\n\n  // 根据索引获取数据源中的数据\n  getData(index: number): number {\n    return this.list[index]\n  }\n\n  // 注册数据变化监听器（本示例中未实现具体功能）\n  registerDataChangeListener(listener: DataChangeListener): void {\n  }\n\n  // 注销数据变化监听器（本示例中未实现具体功能）\n  unregisterDataChangeListener() {\n  }\n}\n\n// 主组件，使用@Entry和@Component装饰器标记为入口组件\n@Entry\n@Component\nstruct SwiperExample {\n  private swiperController: SwiperController = new SwiperController() // 创建一个SwiperController实例，用于控制轮播图\n  private data: MyDataSource = new MyDataSource([]) // 初始化数据源，初始为空数组\n\n  // 组件即将显示时执行的逻辑\n  aboutToAppear(): void {\n    let list: number[] = [] // 创建一个空数组，用于存储轮播图数据\n    for (let i = 1; i <= 10; i++) { // 循环生成1到10的数字\n      list.push(i); // 将生成的数字添加到数组中\n    }\n    this.data = new MyDataSource(list) // 将生成的数组作为数据源\n  }\n\n  // 构建组件的UI结构\n  build() {\n    Column({ space: 5 }) { // 创建一个垂直布局，子组件之间的间距为5\n      Swiper(this.swiperController) { // 创建一个轮播图组件，使用swiperController进行控制\n        LazyForEach(this.data, (item: string) => { // 使用LazyForEach组件遍历数据源\n          Text(item.toString()) // 创建一个文本组件，显示当前数据项的值\n            .width('90%') // 设置文本组件的宽度为父容器的90%\n            .height(160) // 设置文本组件的高度为160\n            .backgroundColor(0xAFEEEE) // 设置文本组件的背景颜色为浅蓝色\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n            .fontSize(30) // 设置文本的字体大小为30\n        }, (item: string) => item) // 指定key生成函数，确保每个子组件的唯一性\n      }\n      .cachedCount(2) // 设置缓存的页面数量为2\n      .index(1) // 设置初始显示的页面索引为1\n      .autoPlay(true) // 开启自动播放\n      .interval(4000) // 设置自动播放的时间间隔为4000毫秒（4秒）\n      .indicator(Indicator.digit() // 设置数字指示器\n        .top(200) // 设置数字指示器距离顶部的距离为200\n        .fontColor(Color.Gray) // 设置数字指示器的默认字体颜色为灰色\n        .selectedFontColor(Color.Gray) // 设置当前选中的数字字体颜色为灰色\n        .digitFont({ size: 20, weight: FontWeight.Bold }) // 设置数字指示器的默认字体样式（大小为20，粗体）\n        .selectedDigitFont({ size: 20, weight: FontWeight.Normal })) // 设置当前选中的数字字体样式（大小为20，正常）\n      .loop(true) // 开启循环播放\n      .duration(1000) // 设置页面切换的动画持续时间为1000毫秒（1秒）\n      .itemSpace(0) // 设置页面之间的间距为0\n      .displayArrow(true, false) // 设置显示左右箭头，但不显示中间的指示器\n\n      Row({ space: 12 }) { // 创建一个水平布局，子组件之间的间距为12\n        Button('showNext') // 创建一个按钮，显示文本为“showNext”\n          .onClick(() => { // 按钮点击事件处理函数\n            this.swiperController.showNext() // 调用swiperController的showNext方法，显示下一张页面\n          })\n        Button('showPrevious') // 创建一个按钮，显示文本为“showPrevious”\n          .onClick(() => { // 按钮点击事件处理函数\n            this.swiperController.showPrevious() // 调用swiperController的showPrevious方法，显示上一张页面\n          })\n      }.margin(5) // 设置水平布局的外边距为5\n    }.width('100%') // 设置垂直布局的宽度为父容器的100%\n    .margin({ top: 5 }) // 设置垂直布局的上外边距为5\n  }\n}