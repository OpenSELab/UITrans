/*\n实现一个跑马灯（Marquee）示例组件，包含以下功能：\n1. 跑马灯组件：显示滚动文本，支持自定义滚动速度、循环次数、滚动方向等。\n2. 启动按钮：点击按钮启动跑马灯动画。\n3. 文本时钟组件：显示当前时间，并将其格式化为"HH:MM:SS"格式，动态更新跑马灯文本内容。\n*/\n\n@Entry\n@Component\nstruct MarqueeExample {\n  @State start: boolean = false // 控制跑马灯动画开始或停止的状态\n  @State src: string = '' // 跑马灯文本内容的来源\n  @State marqueeText: string = 'Running Marquee' // 默认的跑马灯文本内容\n\n  private fromStart: boolean = true // 跑马灯动画是否从头开始的标识\n  private step: number = 10 // 跑马灯文本滚动的步长\n  private loop: number = Number.POSITIVE_INFINITY // 跑马灯文本滚动的循环次数\n\n  controller: TextClockController = new TextClockController() // 文本时钟控制器实例\n\n  // 将数字转换为时间格式的字符串，格式为"HH:MM:SS"\n  convert2time(value: number): string {\n    let date = new Date(Number(value + '000'));\n    let hours = date.getHours().toString().padStart(2, '0');\n    let minutes = date.getMinutes().toString().padStart(2, '0');\n    let seconds = date.getSeconds().toString().padStart(2, '0');\n    return hours + ":" + minutes + ":" + seconds;\n  }\n\n  // 构建跑马灯示例组件\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      // 创建跑马灯组件，并设置相关属性\n      Marquee({\n        start: this.start, // 控制跑马灯动画是否开始\n        step: this.step, // 跑马灯文本滚动的步长\n        loop: this.loop, // 跑马灯文本滚动的循环次数\n        fromStart: this.fromStart, // 跑马灯动画是否从头开始\n        src: this.marqueeText + this.src // 跑马灯显示的文本内容\n      })\n        .marqueeUpdateStrategy(MarqueeUpdateStrategy.PRESERVE_POSITION) // 设置跑马灯更新策略，保持当前位置\n        .width(300) // 设置跑马灯组件的宽度\n        .height(80) // 设置跑马灯组件的高度\n        .fontColor('#FFFFFF') // 设置跑马灯文本的颜色\n        .fontSize(48) // 设置跑马灯文本的字体大小\n        .fontWeight(700) // 设置跑马灯文本的字体粗细\n        .backgroundColor('#182431') // 设置跑马灯组件的背景颜色\n        .margin({ bottom: 40 }) // 设置跑马灯组件的下边距\n        .onStart(() => {\n          console.info('Marquee animation complete onStart') // 跑马灯动画开始时的回调\n        })\n        .onBounce(() => {\n          console.info('Marquee animation complete onBounce') // 跑马灯动画反弹时的回调\n        })\n        .onFinish(() => {\n          console.info('Marquee animation complete onFinish') // 跑马灯动画完成时的回调\n        })\n\n      // 创建一个按钮用于启动跑马灯动画\n      Button('Start')\n        .onClick(() => {\n          this.start = true // 启动跑马灯动画\n          // 启动文本时钟\n          this.controller.start()\n        })\n        .width(120) // 设置按钮的宽度\n        .height(40) // 设置按钮的高度\n        .fontSize(16) // 设置按钮文本的字体大小\n        .fontWeight(500) // 设置按钮文本的字体粗细\n        .backgroundColor('#007DFF') // 设置按钮的背景颜色\n\n      // 创建文本时钟组件，用于显示时间\n      TextClock({ timeZoneOffset: -8, controller: this.controller }) // 设置时区偏移量和控制器\n        .format('hms') // 设置时间格式为"HH:MM:SS"\n        .onDateChange((value: number) => {\n          this.src = this.convert2time(value); // 当时间变化时，更新跑马灯文本内容\n        })\n        .margin(20) // 设置文本时钟组件的外边距\n        .fontSize(30) // 设置文本时钟文本的字体大小\n    }\n    .width('100%') // 设置Flex容器的宽度为100%\n    .height('100%') // 设置Flex容器的高度为100%\n  }\n}