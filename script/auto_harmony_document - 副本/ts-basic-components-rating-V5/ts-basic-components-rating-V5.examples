/*\n实现一个评分示例组件，包含两个主要部分：\n1. 一个评分条组件，用户可以通过点击星星来改变评分，评分条的初始值为3.5，星星总数为5，步长为0.5。\n2. 一个显示当前评分的文本组件，评分变化时会实时更新显示的评分值。\n3. 一个包含头像、用户名、评分和日期的评论条目，评分条不可编辑。\n4. 一个自定义评分条的示例，支持动态改变评分总数、步长和是否为指示器。\n*/\n\n@Entry\n@Component\nstruct RatingExample {\n  @State rating: number = 3.5; // 初始评分为3.5\n\n  build() {\n    Column() {\n      Column() {\n        // 创建一个评分组件，包括星星数量、步长、边距等设置，支持评分变化时的回调\n        Rating({ rating: this.rating, indicator: false })\n          .stars(5) // 设置星星数量为5\n          .stepSize(0.5) // 设置步长为0.5\n          .margin({ top: 24 }) // 设置边距\n          .onChange((value: number) => {\n            this.rating = value; // 当评分变化时更新当前评分值\n          });\n        Text('current score is ' + this.rating)\n          .fontSize(16) // 设置字体大小\n          .fontColor('rgba(24,36,49,0.60)') // 设置字体颜色\n          .margin({ top: 16 }); // 设置边距\n      }\n      .width(360)\n      .height(113)\n      .backgroundColor('#FFFFFF')\n      .margin({ top: 68 }); // 设置宽度、高度、背景色和边距\n\n      Row() {\n        // 创建一个圆形头像图片\n        Image('common/testImage.jpg')\n          .width(40) // 设置宽度\n          .height(40) // 设置高度\n          .borderRadius(20) // 设置圆角半径\n          .margin({ left: 24 }); // 设置边距\n        Column() {\n          Text('Yue')\n            .fontSize(16) // 设置字体大小\n            .fontColor('#182431') // 设置字体颜色\n            .fontWeight(500); // 设置字体粗细\n          Row() {\n            // 创建一个评分组件，显示日期信息\n            Rating({ rating: 3.5, indicator: false })\n              .margin({ top: 1, right: 8 }); // 设置评分和边距\n            Text('2021/06/02')\n              .fontSize(10) // 设置字体大小\n              .fontColor('#182431'); // 设置字体颜色\n          }\n        }\n        .margin({ left: 12 })\n        .alignItems(HorizontalAlign.Start); // 设置边距和对齐方式\n\n        Text('1st Floor')\n          .fontSize(10) // 设置字体大小\n          .fontColor('#182431') // 设置字体颜色\n          .position({ x: 295, y: 8 }); // 设置位置\n      }\n      .width(360)\n      .height(56)\n      .backgroundColor('#FFFFFF')\n      .margin({ top: 64 }); // 设置宽度、高度、背景色和边距\n    }\n    .width('100%')\n    .height('100%')\n    .backgroundColor('#F1F3F5'); // 设置宽度、高度和背景色\n  }\n}\n\n// 自定义评分条样式类\nclass MyRatingStyle implements ContentModifier<RatingConfiguration> {\n  name: string = ""; // 评分条样式名称\n  style: number = 0; // 评分条样式值\n  constructor(value1: string, value2: number) {\n    this.name = value1;\n    this.style = value2;\n  }\n  applyContent(): WrappedBuilder<[RatingConfiguration]> {\n    return wrapBuilder(buildRating);\n  }\n}\n\n// 构建评分条的UI结构\n@Builder function buildRating(config: RatingConfiguration) {\n  Column() {\n    Row() {\n      // 创建每个圆圈表示0.5分的评分点，根据评分值显示不同颜色，点击事件用于改变评分\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 0.4 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            if (config.stepSize == 0.5) {\n              config.triggerChange(0.5);\n              return;\n            }\n            if (config.stepSize == 1) {\n              config.triggerChange(1);\n              return;\n            }\n          }\n        })\n        .visibility(config.stars >= 1 ? Visibility.Visible : Visibility.Hidden);\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 0.9 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            config.triggerChange(1);\n          }\n        })\n        .visibility(config.stars >= 1 ? Visibility.Visible : Visibility.Hidden);\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 1.4 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            if (config.stepSize == 0.5) {\n              config.triggerChange(1.5);\n              return;\n            }\n            if (config.stepSize == 1) {\n              config.triggerChange(2);\n              return;\n            }\n          }\n        })\n        .visibility(config.stars >= 2 ? Visibility.Visible : Visibility.Hidden)\n        .margin({ left: 10 });\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 1.9 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            config.triggerChange(2);\n          }\n        })\n        .visibility(config.stars >= 2 ? Visibility.Visible : Visibility.Hidden);\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 2.4 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            if (config.stepSize == 0.5) {\n              config.triggerChange(2.5);\n              return;\n            }\n            if (config.stepSize == 1) {\n              config.triggerChange(3);\n              return;\n            }\n          }\n        })\n        .visibility(config.stars >= 3 ? Visibility.Visible : Visibility.Hidden)\n        .margin({ left: 10 });\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 2.9 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            config.triggerChange(3);\n          }\n        })\n        .visibility(config.stars >= 3 ? Visibility.Visible : Visibility.Hidden);\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 3.4 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            if (config.stepSize == 0.5) {\n              config.triggerChange(3.5);\n              return;\n            }\n            if (config.stepSize == 1) {\n              config.triggerChange(4);\n              return;\n            }\n          }\n        })\n        .visibility(config.stars >= 4 ? Visibility.Visible : Visibility.Hidden)\n        .margin({ left: 10 });\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 3.9 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            config.triggerChange(4);\n          }\n        })\n        .visibility(config.stars >= 4 ? Visibility.Visible : Visibility.Hidden);\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 4.4 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            if (config.stepSize == 0.5) {\n              config.triggerChange(4.5);\n              return;\n            }\n            if (config.stepSize == 1) {\n              config.triggerChange(5);\n              return;\n            }\n          }\n        })\n        .visibility(config.stars >= 5 ? Visibility.Visible : Visibility.Hidden)\n        .margin({ left: 10 });\n      Circle({ width: 25, height: 25 })\n        .fill(config.rating >= 4.9 ? Color.Black : Color.Red)\n        .onClick((event: ClickEvent) => {\n          if (!config.indicator) {\n            config.triggerChange(5);\n          }\n        })\n        .visibility(config.stars >= 5 ? Visibility.Visible : Visibility.Hidden);\n    }\n    Text("分值：" + config.rating);\n  }\n}\n\n@Entry\n@Component\nstruct ratingExample {\n  @State rating: number = 0; // 当前评分值\n  @State ratingIndicator: boolean = true; // 评分条是否作为指示器\n  @State ratingStars: number = 0; // 评分总数\n  @State ratingStepsize: number = 0.5; // 评分步长\n  @State ratingEnabled: boolean = true; // 评分是否可用\n\n  build() {\n    Row() {\n      Column() {\n        // 创建评分条组件，根据状态设置属性，包括评分值、指示器状态等\n        // 可根据评分变化触发onChange事件\n        // contentModifier用于应用自定义样式\n        Rating({\n          rating: 0,\n          indicator: this.ratingIndicator\n        })\n          .stepSize(this.ratingStepsize)\n          .stars(this.ratingStars)\n          .backgroundColor(Color.Transparent)\n          .width('100%')\n          .height(50)\n          .onChange((value: number) => {\n            console.info('Rating change is' + value);\n            this.rating = value;\n          })\n          .contentModifier(new MyRatingStyle("hello", 3));\n\n        // 按钮用于切换评分条是否作为指示器\n        Button(this.ratingIndicator ? "ratingIndicator : true" : "ratingIndicator : false")\n          .onClick((event) => {\n            if (this.ratingIndicator) {\n              this.ratingIndicator = false;\n            } else {\n              this.ratingIndicator = true;\n            }\n          })\n          .margin({ top: 5 });\n\n        // 按钮用于增加评分总数\n        Button(this.ratingStars < 5 ? "ratingStars + 1, ratingStars =" + this.ratingStars : "ratingStars最大值为5")\n          .onClick((event) => {\n            if (this.ratingStars < 5) {\n              this.ratingStars += 1;\n            }\n          })\n          .margin({ top: 5 });\n\n        // 按钮用于减少评分总数\n        Button(this.ratingStars > 0 ? "ratingStars - 1, ratingStars =" + this.ratingStars : "ratingStars小于等于0时默认等于5")\n          .onClick((event) => {\n            if (this.ratingStars > 0) {\n              this.ratingStars -= 1;\n            }\n          })\n          .margin({ top: 5 });\n\n        // 按钮用于切换评分步长\n        Button(this.ratingStepsize == 0.5 ? "ratingStepsize : 0.5" : "ratingStepsize : 1")\n          .onClick((event) => {\n            if (this.ratingStepsize == 0.5) {\n              this.ratingStepsize = 1;\n            } else {\n              this.ratingStepsize = 0.5;\n            }\n          })\n          .margin({ top: 5 });\n      }\n      .width('100%')\n      .height('100%')\n      .justifyContent(FlexAlign.Center);\n    }\n    .height('100%');\n  }\n}