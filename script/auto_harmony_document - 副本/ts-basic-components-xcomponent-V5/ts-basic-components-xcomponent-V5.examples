/*\n实现一个包含XComponent组件的界面，支持动态改变XComponent的尺寸、启动和停止图像分析、获取支持的图像分析类型，以及在surface旋转过程中锁定功能的使用。\n*/\n\n// xxx.ets\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n// 自定义XComponentController类，继承自XComponentController\nclass CustomXComponentController extends XComponentController {\n  // surface创建时的回调函数\n  onSurfaceCreated(surfaceId: string): void {\n    console.log(`onSurfaceCreated surfaceId: ${surfaceId}`)\n  }\n\n  // surface尺寸改变时的回调函数\n  onSurfaceChanged(surfaceId: string, rect: SurfaceRect): void {\n    console.log(`onSurfaceChanged surfaceId: ${surfaceId}, rect: ${JSON.stringify(rect)}}`)\n  }\n\n  // surface销毁时的回调函数\n  onSurfaceDestroyed(surfaceId: string): void {\n    console.log(`onSurfaceDestroyed surfaceId: ${surfaceId}`)\n  }\n}\n\n@Entry\n@Component\nstruct XComponentExample {\n  // 实例化自定义XComponentController\n  xComponentController: XComponentController = new CustomXComponentController()\n\n  // 图像分析配置，包含主体和文本类型\n  private config: ImageAnalyzerConfig = {\n    types: [ImageAnalyzerType.SUBJECT, ImageAnalyzerType.TEXT]\n  }\n\n  // 图像分析控制器实例化\n  private aiController: ImageAnalyzerController = new ImageAnalyzerController()\n\n  // 图像分析选项，包含主体和文本类型，并关联图像分析控制器\n  private options: ImageAIOptions = {\n    types: [ImageAnalyzerType.SUBJECT, ImageAnalyzerType.TEXT],\n    aiController: this.aiController\n  }\n\n  // XComponent宽度状态\n  @State xcWidth: string = "320px"\n\n  // XComponent高度状态\n  @State xcHeight: string = "480px"\n\n  // 构建函数，定义XComponentExample的UI结构\n  build() {\n    Column({ space: 5 }) {\n      // 按钮：改变尺寸\n      // 点击按钮后，修改XComponent的宽度和高度\n      Button("change size")\n        .onClick(() => {\n          this.xcWidth = "640px"\n          this.xcHeight = "720px"\n        })\n\n      // 按钮：启动AI分析\n      // 点击按钮后，调用XComponentController的startImageAnalyzer方法启动图像分析\n      // 输出日志记录分析完成信息或错误信息\n      Button('start AI analyze')\n        .onClick(() => {\n          this.xComponentController.startImageAnalyzer(this.config)\n            .then(() => {\n              console.log("analysis complete")\n            })\n            .catch((error: BusinessError) => {\n              console.log("error code: " + error.code)\n            })\n        })\n\n      // 按钮：停止AI分析\n      // 点击按钮后，调用XComponentController的stopImageAnalyzer方法停止图像分析\n      Button('stop AI analyze')\n        .onClick(() => {\n          this.xComponentController.stopImageAnalyzer()\n        })\n\n      // 按钮：获取分析器类型\n      // 点击按钮后，调用ImageAnalyzerController的getImageAnalyzerSupportTypes方法获取支持的分析器类型\n      Button('get analyzer types')\n        .onClick(() => {\n          this.aiController.getImageAnalyzerSupportTypes()\n        })\n\n      // XComponent实例化\n      // 设置类型为SURFACE，关联控制器和选项\n      // 设置宽度和高度为状态值\n      XComponent({\n        type: XComponentType.SURFACE,\n        controller: this.xComponentController,\n        imageAIOptions: this.options\n      })\n        .width(this.xcWidth)\n        .height(this.xcHeight)\n    }\n    .width("100%") // 设置Column的宽度为100%\n  }\n}\n\n// xxx.ets\n@Entry\n@Component\nstruct Index{\n  // 控制是否锁定surface旋转的状态，初始值为true表示锁定\n  @State isLock: boolean = true;\n\n  // surface的宽度\n  @State xc_width: number = 500;\n\n  // surface的高度\n  @State xc_height: number = 700;\n\n  // 创建XComponentController实例\n  myXComponentController: XComponentController = new XComponentController();\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Start }) {\n      XComponent({\n        id: 'xComponentId',\n        type: XComponentType.SURFACE,\n        libraryname: 'nativerender',\n        controller: this.myXComponentController\n      })\n      .width(this.xc_width) // 设置surface的宽度\n      .height(this.xc_height) // 设置surface的高度\n      .onLoad(() => {\n        // 创建surface旋转选项对象，包括锁定状态\n        let surfaceRotation: SurfaceRotationOptions = { lock: this.isLock };\n        // 设置surface的旋转选项\n        this.myXComponentController.setXComponentSurfaceRotation(surfaceRotation);\n        // 打印当前surface的锁定状态\n        console.log("Surface getXComponentSurfaceRotation lock = " +\n          this.myXComponentController.getXComponentSurfaceRotation().lock);\n      })\n    }\n    .width('100%') // 设置Flex容器的宽度为100%\n    .height('100%') // 设置Flex容器的高度为100%\n  }\n}