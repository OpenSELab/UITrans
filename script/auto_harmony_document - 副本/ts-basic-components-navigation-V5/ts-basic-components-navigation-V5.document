Title: Navigation-导航与切换-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5

Markdown Content:
Navigation组件是路由导航的根视图容器，一般作为Page页面的根容器使用，其内部默认包含了标题栏、内容区和工具栏，其中内容区默认首页显示导航内容（Navigation的子组件）或非首页显示（[NavDestination](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navdestination-V5)的子组件），首页和非首页通过路由进行切换。

说明

该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

该组件从API Version 11开始默认支持安全区避让特性(默认值为：expandSafeArea(\[SafeAreaType.SYSTEM, SafeAreaType.KEYBOARD, SafeAreaType.CUTOUT\], \[SafeAreaEdge.TOP, SafeAreaEdge.BOTTOM\]))，开发者可以重写该属性覆盖默认行为，API Version 11之前的版本需配合[expandSafeArea](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-expand-safe-area-V5)属性实现安全区避让。

子组件
---

可以包含子组件。

从API Version 9开始，推荐与[NavRouter](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navrouter-V5)组件搭配使用。

从API Version 10开始，推荐使用[NavPathStack](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#navpathstack10)配合navDestination属性进行页面路由。

接口
--

### Navigation

Navigation()

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### Navigation10+

Navigation(pathInfos: NavPathStack)

绑定路由栈到Navigation组件。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### title

title(value: ResourceStr | CustomBuilder | NavigationCommonTitle | NavigationCustomTitle, options?: NavigationTitleOptions)

设置页面标题。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### subTitle(deprecated)

subTitle(value: string)

设置页面副标题。

从API Version 9开始废弃，建议使用[title](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#title)代替。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

string

是

页面副标题。

menus(value: Array<NavigationMenuItem\> | CustomBuilder)

说明

不支持通过SymbolGlyphModifier对象的fontSize属性修改图标大小、effectStrategy属性修改动效、symbolEffect属性修改动效类型。

设置页面右上角菜单。不设置时不显示菜单项。使用Array<[NavigationMenuItem](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#navigationmenuitem)\> 写法时，竖屏最多支持显示3个图标，横屏最多支持显示5个图标，多余的图标会被放入自动生成的更多图标。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### titleMode

titleMode(value: NavigationTitleMode)

设置页面标题栏显示模式。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### toolBar(deprecated)

toolBar(value: object | CustomBuilder)

设置工具栏内容。不设置时不显示工具栏。items均分底部工具栏，在每个均分内容区布局文本和图标，文本超长时，逐级缩小，缩小之后换行，最后...截断。

从API version 10开始，该接口不再维护，推荐使用[toolbarConfiguration](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#toolbarconfiguration10)代替。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

**object类型说明：**

名称

类型

必填

说明

value

string

是

工具栏单个选项的显示文本。

icon

string

否

工具栏单个选项的图标资源路径。

action

() =\> void

否

当前选项被选中的事件回调。

### toolbarConfiguration10+

toolbarConfiguration(value: Array<ToolbarItem\> | CustomBuilder, options?: NavigationToolbarOptions)

说明

不支持通过SymbolGlyphModifier对象的fontSize属性修改图标大小、effectStrategy属性修改动效、symbolEffect属性修改动效类型。

设置工具栏内容。不设置时不显示工具栏。

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### hideToolBar

hideToolBar(value: boolean)

设置是否隐藏工具栏。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

boolean

是

是否隐藏工具栏。

默认值：false

true: 隐藏工具栏。

false: 显示工具栏。

### hideTitleBar

hideTitleBar(value: boolean)

设置是否隐藏标题栏。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

boolean

是

是否隐藏标题栏。

默认值：false

true: 隐藏标题栏。

false: 显示标题栏。

### hideBackButton

hideBackButton(value: boolean)

设置是否隐藏标题栏中的返回键。返回键仅针对[titleMode](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#titlemode)为NavigationTitleMode.Mini时才生效。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

boolean

是

是否隐藏标题栏中的返回键。

默认值：false

true: 隐藏返回键。

false: 显示返回键。

### navBarWidth9+

navBarWidth(value: Length)

设置导航栏宽度。仅在Navigation组件分栏时生效。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[Length](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#length)

是

导航栏宽度。

默认值：240

单位：vp

undefined：行为不做处理，导航栏宽度与默认值保持一致。

### navBarPosition9+

navBarPosition(value: NavBarPosition)

设置导航栏位置。仅在Navigation组件分栏时生效。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### mode9+

mode(value: NavigationMode)

设置导航栏的显示模式。支持Stack、Split与Auto模式。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[NavigationMode](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#navigationmode9%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

是

导航栏的显示模式。

默认值：NavigationMode.Auto

自适应：基于组件宽度自适应单栏和双栏。

### backButtonIcon9+

backButtonIcon(value: string | PixelMap | Resource | SymbolGlyphModifier)

说明

不支持通过SymbolGlyphModifier对象的fontSize属性修改图标大小、effectStrategy属性修改动效、symbolEffect属性修改动效类型。

设置标题栏中返回键图标。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### hideNavBar9+

hideNavBar(value: boolean)

设置是否隐藏导航栏。设置为true时，隐藏Navigation的导航栏，包括标题栏、内容区和工具栏。如果此时路由栈中存在NavDestination页面，则直接显示栈顶NavDestination页面，反之显示空白。

从API Version 9开始到API Version 10仅在双栏模式下生效。从API Version 11开始在单栏、双栏与自适应模式均生效。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

boolean

是

是否隐藏导航栏。

默认值：false

### navDestination10+

navDestination(builder: (name: string, param: unknown) =\> void)

创建NavDestination组件。使用builder函数，基于name和param构造NavDestination组件。builder下只能有一个根节点。builder中允许在NavDestination组件外包含一层自定义组件， 但自定义组件不允许设置属性和事件，否则仅显示空白。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

builder

(name: string, param: unknown) =\> void

是

创建NavDestination组件。name：NavDestination页面名称。param：Navdestination页面详细参数。

### navBarWidthRange10+

navBarWidthRange(value: \[Dimension, Dimension\])

设置导航栏最小和最大宽度（双栏模式下生效）。

**规则：** 优先级规则详见说明。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

\[[Dimension](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#dimension10), [Dimension](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#dimension10)\]

是

导航栏最小和最大宽度。

默认值：最小默认值 240，最大默认值为组件宽度的40% ，且不大于 432，如果只设置一个值，则未设置的值按照默认值计算。

单位：vp

### minContentWidth10+

minContentWidth(value: Dimension)

设置导航栏内容区最小宽度（双栏模式下生效）。

**规则：** 优先级规则详见说明。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[Dimension](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#dimension10)

是

导航栏内容区最小宽度。

默认值：360

单位：vp

undefined：行为不做处理，导航栏内容区最小宽度与默认值保持一致。

Auto模式断点计算：默认600vp，minNavBarWidth(240vp) + minContentWidth (360vp)

说明

1.  仅设置navBarWidth，不支持Navigation分割线拖拽。

2.  navBarWidthRange指定分割线可以拖拽范围。如果不设置值，则按照默认值处理。拖拽范围需要满足navBarWidthRange设置的范围和minContentWidth限制。

3.  Navigation显示范围缩小：a. 缩小内容区大小。如果不设置minContentWidth属性，则可以缩小内容区至0， 否则最小缩小至minContentWidth。b. 缩小导航栏大小，缩小时需要满足导航栏宽度大于navBarRange的下限。c. 对显示内容进行裁切。


### ignoreLayoutSafeArea12+

ignoreLayoutSafeArea(types?: Array<LayoutSafeAreaType\>, edges?: Array<LayoutSafeAreaEdge\>)

控制组件的布局，使其扩展到非安全区域

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

types

Array <[LayoutSafeAreaType](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#layoutsafeareatype12)\>

否

配置扩展安全区域的类型。

默认值:

\[LayoutSafeAreaType.SYSTEM\]

edges

Array <[LayoutSafeAreaEdge](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#layoutsafeareaedge12)\>

否

配置扩展安全区域的方向。

默认值:

\[LayoutSafeAreaEdge.TOP, LayoutSafeAreaEdge.BOTTOM\]。

说明

组件设置LayoutSafeArea之后生效的条件为：

设置LayoutSafeAreaType.SYSTEM时，组件的边界与非安全区域重合时组件能够延伸到非安全区域下。例如：设备顶部状态栏高度100，组件在屏幕中纵向方位的绝对偏移需要在0到100之间。

若组件延伸到非安全区域内，此时在非安全区域里触发的事件（例如：点击事件）等可能会被系统拦截，优先响应状态栏等系统组件。

### systemBarStyle12+

systemBarStyle(style: Optional<SystemBarStyle\>)

当Navigation中显示Navigation首页时，设置对应系统状态栏的样式。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

说明

1.  不建议混合使用systemBarStyle属性和window设置状态栏样式的相关接口，例如：[setWindowSystemBarProperties](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-window-V5#setwindowsystembarproperties9)。
2.  初次设置Navigation/NavDestination的systemBarStyle属性时，会备份当前状态栏样式用于后续的恢复场景。
3.  Navigation总是以首页（页面栈内没有NavDestination时）或者栈顶NavDestination设置的状态栏样式为准。
4.  Navigation首页或者任何栈顶NavDestination页面，如果设置了有效的systemBarStyle，则会使用设置的样式，反之如果之前已经备份了样式，则使用备份的样式，否则不做任何处理。
5.  [Split](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#navigationmode9%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)模式下的Navigation，如果内容区没有NavDestination，则遵从Navigation首页的设置，反之则遵从栈顶NavDestination的设置。
6.  仅支持在主窗口的主页面中使用systemBarStyle设置状态栏样式。
7.  仅当Navigation占满整个页面时，设置的样式才会生效，当Navigation没有占满整个页面时，如果有备份的样式，则恢复备份的样式。
8.  当页面设置不同样式时，在页面转场开始时生效。
9.  非全屏窗口下，Navigation/NavDestination设置的状态栏不生效。

事件
--

### onTitleModeChange

onTitleModeChange(callback: (titleMode: NavigationTitleMode) =\> void)

当[titleMode](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#titlemode)为NavigationTitleMode.Free时，随着可滚动组件的滑动标题栏模式发生变化时触发此回调。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### onNavBarStateChange9+

onNavBarStateChange(callback: (isVisible: boolean) =\> void)

导航栏显示状态切换时触发该回调。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

isVisible

boolean

是

isVisible为true时表示显示，为false时表示隐藏。

### onNavigationModeChange11+

onNavigationModeChange(callback: (mode: NavigationMode) =\> void)

当Navigation首次显示或者单双栏状态发生变化时触发该回调。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

mode

[NavigationMode](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#navigationmode9%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

是

NavigationMode.Split: 当前Navigation显示为双栏;

NavigationMode.Stack: 当前Navigation显示为单栏。

### customNavContentTransition11+

customNavContentTransition(delegate:(from: NavContentInfo, to: NavContentInfo, operation: NavigationOperation) =\> NavigationAnimatedTransition | undefined)

自定义转场动画回调。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

**返回值：**

NavPathStack10+
---------------

Navigation路由栈，允许被继承12+。开发者可以在派生类中新增属性方法，也可以重写基类NavPathStack的方法。派生类对象可以替代基类NavPathStack对象使用。使用示例参见[示例10](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#%E7%A4%BA%E4%BE%8B10)。

### pushPath10+

pushPath(info: NavPathInfo, animated?: boolean): void

将info指定的NavDestination页面信息入栈。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

info

[NavPathInfo](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#navpathinfo10)

是

NavDestination页面的信息。

animated11+

boolean

否

是否支持转场动画，默认值：true。

### pushPath12+

pushPath(info: NavPathInfo, options?: NavigationOptions): void

将info指定的NavDestination页面信息入栈，具体根据options中指定不同的[LaunchMode](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#launchmode12%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)，有不同的行为。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### pushPathByName10+

pushPathByName(name: string, param: unknown, animated?: boolean): void

将name指定的NavDestination页面信息入栈，传递的数据为param。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

name

string

是

NavDestination页面名称。

param

unknown

是

NavDestination页面详细参数。

animated11+

boolean

否

是否支持转场动画，默认值：true。

### pushPathByName11+

pushPathByName(name: string, param: Object, onPop: Callback<PopInfo\>, animated?: boolean): void

将name指定的NavDestination页面信息入栈，传递的数据为param，添加onPop回调接收入栈页面出栈时的返回结果，并进行处理。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

name

string

是

NavDestination页面名称。

param

Object

是

NavDestination页面详细参数。

onPop

Callback<[PopInfo](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#popinfo11)\>

是

Callback回调，用于页面出栈时触发该回调处理返回结果。仅pop中设置result参数后触发。

animated

boolean

否

是否支持转场动画，默认值：true。

### pushDestination11+

pushDestination(info: NavPathInfo, animated?: boolean): Promise<void\>

将info指定的NavDestination页面信息入栈，使用Promise异步回调返回接口调用结果。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

info

[NavPathInfo](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#navpathinfo10)

是

NavDestination页面的信息。

animated

boolean

否

是否支持转场动画，默认值：true。

**返回值：**

类型

说明

Promise<void\>

异常返回结果。

**错误码：**

以下错误码的详细介绍请参见[通用错误码](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-universal-V5)和[ohos.router(页面路由)](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-router-V5)错误码。

错误码ID

错误信息

401

Parameter error. Possible causes: 1. Mandatory parameters are left unspecified; 2.Incorrect parameters types; 3. Parameter verification failed.

100001

Internal error.

100005

Builder function not registered.

100006

NavDestination not found.

### pushDestination12+

pushDestination(info: NavPathInfo, options?: NavigationOptions): Promise<void\>

将info指定的NavDestination页面信息入栈，使用Promise异步回调返回接口调用结果，具体根据options中指定不同的[LaunchMode](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#launchmode12%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)，有不同的行为。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

**返回值：**

类型

说明

Promise<void\>

异常返回结果。

**错误码：**

以下错误码的详细介绍请参见[通用错误码](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-universal-V5)和[ohos.router(页面路由)](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-router-V5)错误码。

错误码ID

错误信息

401

Parameter error. Possible causes: 1. Mandatory parameters are left unspecified; 2.Incorrect parameters types; 3. Parameter verification failed.

100001

Internal error.

100005

Builder function not registered.

100006

NavDestination not found.

### pushDestinationByName11+

pushDestinationByName(name: string, param: Object, animated?: boolean): Promise<void\>

将name指定的NavDestination页面信息入栈，传递的数据为param，使用Promise异步回调返回接口调用结果。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

name

string

是

NavDestination页面名称。

param

Object

是

NavDestination页面详细参数。

animated

boolean

否

是否支持转场动画，默认值：true。

**返回值：**

类型

说明

Promise<void\>

异常返回结果。

**错误码：**

以下错误码的详细介绍请参见[通用错误码](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-universal-V5)和[ohos.router(页面路由)](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-router-V5)错误码。

错误码ID

错误信息

401

Parameter error. Possible causes: 1. Mandatory parameters are left unspecified; 2.Incorrect parameters types; 3. Parameter verification failed.

100001

Internal error.

100005

Builder function not registered.

100006

NavDestination not found.

### pushDestinationByName11+

pushDestinationByName(name: string, param: Object, onPop: Callback<PopInfo\>, animated?: boolean): Promise<void\>

将name指定的NavDestination页面信息入栈，传递的数据为param，并且添加用于页面出栈时处理返回结果的OnPop回调，使用Promise异步回调返回接口调用结果。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

name

string

是

NavDestination页面名称。

param

Object

是

NavDestination页面详细参数。

onPop

Callback<[PopInfo](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#popinfo11)\>

是

Callback回调，用于页面出栈时处理返回结果。仅pop中设置result参数后触发。

animated

boolean

否

是否支持转场动画，默认值：true。

**返回值：**

类型

说明

Promise<void\>

异常返回结果。

**错误码：**

以下错误码的详细介绍请参见[通用错误码](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-universal-V5)和[ohos.router(页面路由)](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-router-V5)错误码。

错误码ID

错误信息

401

Parameter error. Possible causes: 1. Mandatory parameters are left unspecified; 2.Incorrect parameters types; 3. Parameter verification failed.

100001

Internal error.

100005

Builder function not registered.

100006

NavDestination not found.

### replacePath11+

replacePath(info: NavPathInfo, animated?: boolean): void

将当前页面栈栈顶退出，将info指定的NavDestination页面信息入栈。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

info

[NavPathInfo](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#navpathinfo10)

是

新栈顶页面参数信息

animated11+

boolean

否

是否支持转场动画，默认值：true。

### replacePath12+

replacePath(info: NavPathInfo, options?: NavigationOptions): void

替换页面栈操作，具体根据options中指定不同的[LaunchMode](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#launchmode12%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)，有不同的行为。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### replacePathByName11+

replacePathByName(name: string, param: Object, animated?: boolean): void

将当前页面栈栈顶退出，将name指定的页面入栈。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

name

string

是

NavDestination页面名称。

param

Object

是

NavDestination页面详细参数。

animated11+

boolean

否

是否支持转场动画，默认值：true。

### removeByIndexes11+

removeByIndexes(indexes: Array<number\>): number

将页面栈内索引值在indexes中的NavDestination页面删除。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

indexes

Array<number\>

是

待删除NavDestination页面的索引值数组。

**返回值：**

类型

说明

number

返回删除的NavDestination页面数量。

### removeByName11+

removeByName(name: string): number

将页面栈内指定name的NavDestination页面删除。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

name

string

是

删除的NavDestination页面的名字。

**返回值：**

类型

说明

number

返回删除的NavDestination页面数量。

### removeByNavDestinationId12+

removeByNavDestinationId(navDestinationId: string): boolean

将页面栈内指定navDestinationId的NavDestination页面删除。navDestinationId可以在NavDestination的[onReady](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navdestination-V5#onready11)回调中获取，也可以在[NavDestinationInfo](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-observer-V5#navdestinationinfo)中获取。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

navDestinationId

string

是

删除的NavDestination页面的唯一标识符navDestinationId。

**返回值：**

类型

说明

boolean

返回是否成功删除该页面，true为删除成功。

### pop10+

pop(animated?: boolean): NavPathInfo | undefined

弹出路由栈栈顶元素。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

animated11+

boolean

否

是否支持转场动画，默认值：true。

**返回值：**

类型

说明

[NavPathInfo](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#navpathinfo10)

返回栈顶NavDestination页面的信息。

undefined

当路由栈为空时返回undefined。

### pop11+

pop(result: Object, animated?: boolean): NavPathInfo | undefined

弹出路由栈栈顶元素，并触发onPop回调传入页面处理结果。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

result

Object

是

页面自定义处理结果。不支持boolean类型。

animated

boolean

否

是否支持转场动画，默认值：true。

**返回值：**

类型

说明

[NavPathInfo](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#navpathinfo10)

返回栈顶NavDestination页面的信息。

undefined

当路由栈为空时返回undefined。

### popToName10+

popToName(name: string, animated?: boolean): number

回退路由栈到由栈底开始第一个名为name的NavDestination页面。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

name

string

是

NavDestination页面名称。

animated11+

boolean

否

是否支持转场动画，默认值：true。

**返回值：**

类型

说明

number

如果栈中存在名为name的NavDestination页面，则返回由栈底开始第一个名为name的NavDestination页面的索引，否则返回-1。

### popToName11+

popToName(name: string, result: Object, animated?: boolean): number

回退路由栈到由栈底开始第一个名为name的NavDestination页面，并触发onPop回调传入页面处理结果。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

name

string

是

NavDestination页面名称。

result

Object

是

页面自定义处理结果。不支持boolean类型。

animated

boolean

否

是否支持转场动画，默认值：true。

**返回值：**

类型

说明

number

如果栈中存在名为name的NavDestination页面，则返回由栈底开始第一个名为name的NavDestination页面的索引，否则返回-1。

### popToIndex10+

popToIndex(index: number, animated?: boolean): void

回退路由栈到index指定的NavDestination页面。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

index

number

是

NavDestination页面的位置索引。

animated11+

boolean

否

是否支持转场动画，默认值：true。

### popToIndex11+

popToIndex(index: number, result: Object, animated?: boolean): void

回退路由栈到index指定的NavDestination页面，并触发onPop回调传入页面处理结果。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

index

number

是

NavDestination页面的位置索引。

result

Object

是

页面自定义处理结果。不支持boolean类型。

animated

boolean

否

是否支持转场动画，默认值：true。

### moveToTop10+

moveToTop(name: string, animated?: boolean): number

将由栈底开始第一个名为name的NavDestination页面移到栈顶。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

name

string

是

NavDestination页面名称。

animated11+

boolean

否

是否支持转场动画，默认值：true。

**返回值：**

类型

说明

number

如果栈中存在名为name的NavDestination页面，则返回由栈底开始第一个名为name的NavDestination页面的当前索引，否则返回-1。

### moveIndexToTop10+

moveIndexToTop(index: number, animated?: boolean): void

将index指定的NavDestination页面移到栈顶。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

index

number

是

NavDestination页面的位置索引。

animated11+

boolean

否

是否支持转场动画，默认值：true。

### clear10+

clear(animated?: boolean): void

清除栈中所有页面。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

animated11+

boolean

否

是否支持转场动画，默认值：true。

### getAllPathName10+

getAllPathName(): Array<string\>

获取栈中所有NavDestination页面的名称。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

类型

说明

Array<string\>

返回栈中所有NavDestination页面的名称。

### getParamByIndex10+

getParamByIndex(index: number): unknown | undefined

获取index指定的NavDestination页面的参数信息。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

index

number

是

NavDestination页面的位置索引。

**返回值：**

类型

说明

unknown

返回对应NavDestination页面的参数信息。

undefined

传入index无效时返回undefined。

### getParamByName10+

getParamByName(name: string): Array<unknown\>

获取全部名为name的NavDestination页面的参数信息。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

name

string

是

NavDestination页面名称。

**返回值：**

类型

说明

Array<unknown\>

返回全部名为name的NavDestination页面的参数信息。

### getIndexByName10+

getIndexByName(name: string): Array<number\>

获取全部名为name的NavDestination页面的位置索引。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

name

string

是

NavDestination页面名称。

**返回值：**

类型

说明

Array<number\>

返回全部名为name的NavDestination页面的位置索引。

### size10+

size(): number

获取栈大小。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

### disableAnimation11+

disableAnimation(value: boolean): void

关闭（true）或打开（false）当前Navigation中所有转场动画。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

boolean

否

是否关闭转场动画，默认值：false。

### getParent11+

getParent(): NavPathStack | null

获取父NavPathStack。

当出现Navigation嵌套Navigation的情况时（可以是直接嵌套，也可以是间接嵌套），内部Navigation的NavPathStack能够获取到外层Navigation的NavPathStack。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

类型

说明

[NavPathStack](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#navpathstack10) | null

如果当前NavPathStack所属Navigation的外层有另外的一层Navigation，则能够获取到外层Navigation的NavPathStack。否则获取不到NavPathStack，返回null。

### setInterception12+

setInterception(interception: NavigationInterception): void

设置Navigation页面跳转拦截回调。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### constructor

constructor(name: string, param: unknown, onPop?: Callback<PopInfo\>, isEntry?: boolean)

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

参数名

类型

必填

说明

name

string

是

NavDestination页面名称。

param

unknown

否

NavDestination页面详细参数。

onPop11+

Callback<[PopInfo](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#popinfo11)\>

否

NavDestination页面触发pop时返回的回调。

isEntry12+

boolean

否

标记NavDestination是否为入口页面。

默认值：false

标记清理时机：1、在当前navDestination页面触发一次全局back事件。2、应用退至后台。

**说明**：

入口NavDestination不响应应用内的全局back事件，直接触发应用间的全局back事件。

PopInfo11+
----------

下一个页面返回的回调信息载体。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

info

[NavPathInfo](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#navpathinfo10)

是

页面触发返回时的当前页面信息，系统自动获取填入，无需开发者传入。

result

Object

是

页面触发返回时的结果，开发者自定义对象。

NavContentInfo11+
-----------------

跳转Destination信息。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

name

string

否

NavDestination名称，如果为根视图(NavBar)，则返回值为undefined。

index

number

是

NavDestination在NavPathStack中的序号， 如果为根视图(NavBar)，则返回值为 -1。

mode

[NavDestinationMode](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navdestination-V5#navdestinationmode%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

否

NavDestination的模式，如果是根视图(NavBar)，则返回值为undefined。

param12+

Object

否

NavDestination页面加载的参数。

navDestinationId12+

string

否

NavDestination的唯一标识符。

NavigationAnimatedTransition11+
-------------------------------

自定义转场动画协议，开发者需实现该协议来定义Navigation路由跳转的跳转动画。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

timeout

number

否

动画超时结束时间。

单位：ms。

默认值：可交互动画无默认值，不可交互动画默认超时时间为1000ms。

transition

(transitionProxy : [NavigationTransitionProxy](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#navigationtransitionproxy-11)) =\> void

是

自定义转场动画执行回调。

transitionProxy: 自定义转场动画代理对象。

onTransitionEnd

(success: boolean):void

否

转场完成回调。

success: 转场是否成功。

isInteractive12+

boolean

否

本次转场动画是否为可交互转场。

默认值：false。

NavigationTransitionProxy 11+
-----------------------------

自定义转场动画代理对象。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### 属性

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### finishTransition

finishTransition(): void;

结束本次自定义转场动画，开发者需要主动触发该方法来结束本次转场，否则系统会在timeout的时间后结束本次转场。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### cancelTransition12+

cancelTransition?(): void;

取消本次交互转场，恢复到页面跳转前的页面栈(不支持取消不可交互转场动画)。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### updateTransition12+

updateTransition?(progress: number): void;

更新交互转场动画进度(不可交互动画不支持动画进度设置)。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

描述

progress

number

是

设置交互转场动画进度百分比。取值范围 0-1。

NavigationInterception12+
-------------------------

Navigation跳转拦截对象。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### InterceptionShowCallback12+

type InterceptionShowCallback = (from: NavDestinationContext|NavBar, to: NavDestinationContext|NavBar, operation: NavigationOperation, isAnimated: boolean) =\> void

navigation页面跳转前和页面跳转后的拦截回调。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### InterceptionModeCallback12+

type InterceptionModeCallback = (mode: NavigationMode) =\> void

navigation单双栏显示状态发生变更时的拦截回调。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

NavBar12+
---------

type NavBar = 'navBar'

Navigation首页名字。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

类型

说明

"navBar"

Navigation首页。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

value

string

是

API Version 9: 显示菜单栏单个选项的文本。

API Version 10: 不显示菜单栏单个选项的文本。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

icon

string

否

菜单栏单个选项的图标资源路径。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

isEnabled12+

boolean

否

使能状态，默认使能（false未使能，true使能）。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

action

() =\> void

否

当前选项被选中的事件回调。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

symbolIcon12+

[SymbolGlyphModifier](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-attribute-modifier-V5)

否

菜单栏单个选项的symbol资源（优先级高于icon）。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

value

ResourceStr

是

工具栏单个选项的显示文本。

icon

ResourceStr

否

工具栏单个选项的图标资源路径。

action

() =\> void

否

当前选项被选中的事件回调。

status

[ToolbarItemStatus](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#toolbaritemstatus10%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

否

工具栏单个选项的状态。

默认值：ToolbarItemStatus.NORMAL

activeIcon

ResourceStr

否

工具栏单个选项处于ACTIVE态时的图标资源路径。

symbolIcon12+

[SymbolGlyphModifier](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-attribute-modifier-V5)

否

工具栏单个选项的symbol资源（优先级高于icon）。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

activeSymbolIcon12+

[SymbolGlyphModifier](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-attribute-modifier-V5)

否

工具栏单个选项处于ACTIVE态时的symbol资源（优先级高于activeIcon）。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

描述

NORMAL

设置工具栏单个选项为NORMAL态，该选项显示默认样式，可以触发Hover，Press，Focus事件并显示对应的多态样式。

DISABLED

设置工具栏单个选项为DISABLED态， 该选项显示DISABLED态样式，并且不可交互。

ACTIVE

设置工具栏单个选项为ACTIVE态， 该选项通过点击事件可以将icon图标更新为activeIcon对应的图片资源。

NavigationTitleMode枚举说明
-----------------------

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

描述

Free

当内容为满一屏的可滚动组件时，标题随着内容向上滚动而缩小（子标题的大小不变、淡出）。向下滚动内容到顶时则恢复原样。

**说明：**

标题随着内容滚动大小联动的动效在title设置为ResourceStr和NavigationCommonTitle时生效，设置成其余自定义节点类型时字体样式无法变化，下拉时只影响标题栏偏移。

可滚动组件不满一屏时，如果想使用联动效果，就要使用滚动组件提供的[edgeEffect](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-list-V5#%E5%B1%9E%E6%80%A7)接口将options参数设置为true。未滚动状态，标题栏高度与Full模式一致；滚动时，标题栏的最小高度与Mini模式一致。

Mini

固定为小标题模式。

默认值：API version 12之前，只有主标题时，标题栏高度为56vp；同时有主标题和副标题时，标题栏高度为82vp。从API version 12开始，该模式下标题栏高度为56vp。

Full

固定为大标题模式。

默认值：只有主标题时，标题栏高度为112vp；同时有主标题和副标题时，标题栏高度为138vp。

NavigationCommonTitle9+
-----------------------

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

main

string

是

设置主标题。

sub

string

是

设置副标题。

NavigationCustomTitle9+
-----------------------

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

NavBarPosition9+枚举说明
--------------------

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

描述

Start

双栏显示时，主列在主轴方向首部。

End

双栏显示时，主列在主轴方向尾部。

NavigationMode9+枚举说明
--------------------

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

描述

Stack

导航栏与内容区独立显示，相当于两个页面。

Split

导航栏与内容区分两栏显示。

以下navBarWidthRange的值用\[minNavBarWidth,maxNavBarWidth\]表示

1.当navBarWidth属性的值，在navBarWidthRange属性的值范围以外时，navBarWidth按如下规则显示：

navBarWidth < minNavBarWidth时，navBarWidth修正为minNavBarWidth;

navBarWidth \> maxNavBarWidth，且组件宽度 - minContentWidth - 分割线宽度(1vp) \> maxNavBarWidth时，navBarWidth修正为maxNavBarWidth;

navBarWidth \> maxNavBarWidth，且组件宽度 - minContentWidth - 分割线宽度(1vp) < minNavBarWidth时，navBarWidth修正为minNavBarWidth;

navBarWidth \> maxNavBarWidth，且组件宽度 - minContentWidth - 分割线宽度(1vp)在navBarWidthRange范围内，navBarWidth修正为组件宽度 - 分割线宽度(1vp) - minContentWidth。

2.当navBarWidth属性的值，在navBarWidthRange属性的值范围以内时，navBarWidth按如下规则显示：

minNavBarWidth + minContentWidth + 分割线宽度(1vp) \>\= 组件宽度时，navBarWidth修正为minNavBarWidth；

minNavBarWidth + minContentWidth + 分割线宽度(1vp) < 组件宽度，且navBarWidth + minContentWidth + 分割线宽度(1vp) \>\= 组件宽度时，navBarWidth修正为组件宽度 - 分割线宽度(1vp) - minContentWidth;

minNavBarWidth + minContentWidth + 分割线宽度(1vp) < 组件宽度，且navBarWidth + minContentWidth + 分割线宽度(1vp) < 组件宽度时，navBarWidth为设置的值。

3.缩小组件尺寸时，先缩小内容区的尺寸至minContentWidth，然后再缩小导航栏的尺寸至minNavBarWidth。若继续缩小，先缩小内容区，内容区消失后再缩小导航栏。

4.设置导航栏为固定尺寸时，若持续缩小组件尺寸，导航栏最后压缩显示。

5.若只设置了navBarWidth属性，则导航栏宽度为navBarWidth，且分割线不可拖动。

Auto

API version 9之前：窗口宽度\>\=520vp时，采用Split模式显示；窗口宽度<520vp时，采用Stack模式显示。

API version 10及以上：窗口宽度\>\=600vp时，采用Split模式显示；窗口宽度<600vp时，采用Stack模式显示，600vp等于minNavBarWidth(240vp) + minContentWidth (360vp)。

NavigationOperation11+枚举说明
--------------------------

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

描述

PUSH

本次转场为页面进场。

POP

本次转场为页面退场。

REPLACE

本次转场为页面替换。

BarStyle12+枚举说明
---------------

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

描述

STANDARD

标题栏与内容区采用上下布局。

STACK

标题栏与内容区采用层叠布局，标题栏布局在内容区上层。

NavigationTitleOptions11+
-------------------------

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

backgroundColor

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

否

标题栏背景颜色，不设置时为系统默认颜色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

backgroundBlurStyle

[BlurStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-background-V5#blurstyle9)

否

标题栏背景模糊样式，不设置时关闭背景模糊效果。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

barStyle12+

[BarStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#barstyle12%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

否

标题栏布局方式设置。

默认值：BarStyle.STANDARD

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

paddingStart12+

[LengthMetrics](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-graphics-V5#lengthmetrics12)

否

标题栏起始端内间距。

仅支持以下任一场景:

1\. 显示返回图标，即[hideBackButton](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#hidebackbutton)为false；

2\. 使用非自定义标题，即[标题value](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#title)类型为ResourceStr或NavigationCommonTitle。

默认值：

LengthMetrics.resource($r('sys.float.margin\_left'))。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

paddingEnd12+

[LengthMetrics](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-graphics-V5#lengthmetrics12)

否

标题栏结束端内间距。

仅支持以下任一场景:

1\. 使用非自定义菜单，即[菜单value](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#menus)为Array<NavigationMenuItem\>；

2\. 没有右上角菜单，且使用非自定义标题，即[标题value](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#title)类型为ResourceStr或NavigationCommonTitle。

默认值：

LengthMetrics.resource($r('sys.float.margin\_right'))。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

backgroundColor

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

否

工具栏背景颜色，不设置时为系统默认颜色。

backgroundBlurStyle

[BlurStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-background-V5#blurstyle9)

否

工具栏背景模糊样式，不设置时关闭背景模糊效果。

LaunchMode12+枚举说明
-----------------

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

描述

STANDARD

系统默认的栈操作模式。

push操作会将指定的NavDestination入栈；replace操作会将当前栈顶NavDestination替换。

MOVE\_TO\_TOP\_SINGLETON

从栈底向栈顶查找，如果指定的名称已经存在，则将对应的NavDestination页面移到栈顶（replace操作会将最后的栈顶替换成指定的NavDestination），否则行为和STANDARD一致。

POP\_TO\_SINGLETON

从栈底向栈顶查找，如果指定的名称已经存在，则将其上方的NavDestination页面全部移除（replace操作会将最后的栈顶替换成指定的NavDestination），否则行为和STANDARD一致。

NEW\_INSTANCE

创建新的NavDestination实例。与STANDARD模式相比，该方法不会复用栈中同名实例。

NavigationOptions12+
--------------------

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

launchMode

[LaunchMode](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#launchmode12%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

否

页面栈的操作模式。

默认值：LaunchMode.STANDARD

animated

boolean

否

是否支持转场动画。

默认值：true。

### 示例1

该示例主要演示Navigation页面的布局。

2.  class A {
3.    text: string = ''
4.    num: number = 0
5.  }

7.  @Entry
8.  @Component
9.  struct NavigationExample {
10.    private arr: number\[\] = \[0, 1, 2, 3, 4, 5, 6, 7, 8, 9\]
11.    @State currentIndex: number = 0

13.    @Builder NavigationTitle() {
14.      Column() {
15.        Text('Title')
16.          .fontColor('#182431')
17.          .fontSize(30)
18.          .lineHeight(41)
19.          .fontWeight(700)
20.        Text('subtitle')
21.          .fontColor('#182431')
22.          .fontSize(14)
23.          .lineHeight(19)
24.          .opacity(0.4)
25.          .margin({ top: 2, bottom: 20 })
26.      }.alignItems(HorizontalAlign.Start)
27.    }

29.    @Builder NavigationMenus() {
30.      Row() {
31.        Image('resources/base/media/ic\_public\_add.svg')
32.          .width(24)
33.          .height(24)
34.        Image('resources/base/media/ic\_public\_add.svg')
35.          .width(24)
36.          .height(24)
37.          .margin({ left: 24 })
38.        Image('common/ic\_public\_more.svg')
39.          .width(24)
40.          .height(24)
41.          .margin({ left: 24 })
42.      }
43.    }

45.    build() {
46.      Column() {
47.        Navigation() {
48.          TextInput({ placeholder: 'search...' })
49.            .width('90%')
50.            .height(40)
51.            .backgroundColor('#FFFFFF')
52.            .margin({ top: 8 })

54.          List({ space: 12, initialIndex: 0 }) {
55.            ForEach(this.arr, (item: number) =\> {
56.              ListItem() {
57.                Text('' + item)
58.                  .width('90%')
59.                  .height(72)
60.                  .backgroundColor('#FFFFFF')
61.                  .borderRadius(24)
62.                  .fontSize(16)
63.                  .fontWeight(500)
64.                  .textAlign(TextAlign.Center)
65.              }
66.            }, (item: number) =\> item.toString())
67.          }
68.          .height(324)
69.          .width('100%')
70.          .margin({ top: 12, left: '10%' })
71.        }
72.        .title(this.NavigationTitle)
73.        .menus(this.NavigationMenus)
74.        .titleMode(NavigationTitleMode.Full)
75.        .toolbarConfiguration(\[
76.          {
77.            value: $r("app.string.navigation\_toolbar\_add"),
78.            icon: $r("app.media.ic\_public\_highlightsed")
79.          },
80.          {
81.            value: $r("app.string.navigation\_toolbar\_app"),
82.            icon: $r("app.media.ic\_public\_highlights")
83.          },
84.          {
85.            value: $r("app.string.navigation\_toolbar\_collect"),
86.            icon: $r("app.media.ic\_public\_highlights")
87.          }
88.        \])
89.        .hideTitleBar(false)
90.        .hideToolBar(false)
91.        .onTitleModeChange((titleModel: NavigationTitleMode) =\> {
92.          console.info('titleMode' + titleModel)
93.        })
94.      }.width('100%').height('100%').backgroundColor('#F1F3F5')
95.    }
96.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114418.42887823223408417031883381522600:50001231000000:2800:77D2C81739C005E05F69E6BC9967CD15BBBE13F4E2F0A9DCA64BD385F85479C3.png?needInitFileName=true?needInitFileName=true)

### 示例2

该示例主要演示NavPathStack中方法的使用及路由拦截。

3.  @Entry
4.  @Component
5.  struct NavigationExample {
6.    pageInfos: NavPathStack = new NavPathStack()
7.    isUseInterception: boolean = false;

9.    registerInterception() {
10.      this.pageInfos.setInterception({
11.        willShow: (from: NavDestinationContext | "navBar", to: NavDestinationContext | "navBar",
12.                   operation: NavigationOperation, animated: boolean) =\> {
13.          if (!this.isUseInterception) {
14.            return;
15.          }
16.          if (typeof to === "string") {
17.            console.log("target page is navigation home");
18.            return;
19.          }

21.          let target: NavDestinationContext = to as NavDestinationContext;
22.          if (target.pathInfo.name === 'pageTwo') {
23.            target.pathStack.pop();
24.            target.pathStack.pushPathByName('pageOne', null);
25.          }
26.        },
27.        didShow: (from: NavDestinationContext | "navBar", to: NavDestinationContext | "navBar",
28.                  operation: NavigationOperation, isAnimated: boolean) =\> {
29.          if (!this.isUseInterception) {
30.            return;
31.          }
32.          if (typeof from === "string") {
33.            console.log("current transition is from navigation home");
34.          } else {
35.            console.log(\`current transition is from  ${(from as NavDestinationContext).pathInfo.name}\`)
36.          }
37.          if (typeof to === "string") {
38.            console.log("current transition to is navBar");
39.          } else {
40.            console.log(\`current transition is to ${(to as NavDestinationContext).pathInfo.name}\`);
41.          }
42.        },
43.        modeChange: (mode: NavigationMode) =\> {
44.          if (!this.isUseInterception) {
45.            return;
46.          }
47.          console.log(\`current navigation mode is ${mode}\`);
48.        }
49.      })
50.    }

52.    build() {
53.      Navigation(this.pageInfos) {
54.        Column() {
55.          Button('pushPath', { stateEffect: true, type: ButtonType.Capsule })
56.            .width('80%')
57.            .height(40)
58.            .margin(20)
59.            .onClick(() =\> {
60.              this.pageInfos.pushPath({ name: 'pageOne' })
61.            })
62.          Button('use interception', { stateEffect: true, type: ButtonType.Capsule })
63.            .width('80%')
64.            .height(40)
65.            .margin(20)
66.            .onClick(() =\> {
67.              this.isUseInterception = !this.isUseInterception;
68.              if (this.isUseInterception) {
69.                this.registerInterception();
70.              } else {
71.                this.pageInfos.setInterception(undefined);
72.              }
73.            })
74.        }
75.      }.title('NavIndex')
76.    }
77.  }

2.  class TmpClass{
3.    count:number\=10
4.  }

6.  @Builder
7.  export function PageOneBuilder(name: string, param: Object) {
8.    PageOne()
9.  }

11.  @Component
12.  export struct PageOne {

14.    pageInfos: NavPathStack = new NavPathStack()

16.    build() {
17.      NavDestination() {
18.        Column() {
19.          Button('pushPathByName', { stateEffect: true, type: ButtonType.Capsule })
20.            .width('80%')
21.            .height(40)
22.            .margin(20)
23.            .onClick(() =\> {
24.              let tmp = new TmpClass()
25.              this.pageInfos.pushPathByName('pageTwo', tmp)
26.            })
27.          Button('singletonLaunchMode', { stateEffect: true, type: ButtonType.Capsule })
28.            .width('80%')
29.            .height(40)
30.            .margin(20)
31.            .onClick(() =\> {
32.              this.pageInfos.pushPath({ name: 'pageOne' }, { launchMode: LaunchMode.MOVE\_TO\_TOP\_SINGLETON })
33.            })
34.          Button('popToname', { stateEffect: true, type: ButtonType.Capsule })
35.            .width('80%')
36.            .height(40)
37.            .margin(20)
38.            .onClick(() =\> {
39.              this.pageInfos.popToName('pageTwo')
40.              console.log('popToName' + JSON.stringify(this.pageInfos), '返回值' + JSON.stringify(this.pageInfos.popToName('pageTwo')))
41.            })
42.          Button('popToIndex', { stateEffect: true, type: ButtonType.Capsule })
43.            .width('80%')
44.            .height(40)
45.            .margin(20)
46.            .onClick(() =\> {
47.              this.pageInfos.popToIndex(1)
48.              console.log('popToIndex' + JSON.stringify(this.pageInfos))
49.            })
50.          Button('moveToTop', { stateEffect: true, type: ButtonType.Capsule })
51.            .width('80%')
52.            .height(40)
53.            .margin(20)
54.            .onClick(() =\> {
55.              this.pageInfos.moveToTop('pageTwo')
56.              console.log('moveToTop' + JSON.stringify(this.pageInfos), '返回值' + JSON.stringify(this.pageInfos.moveToTop('pageTwo')))
57.            })
58.          Button('moveIndexToTop', { stateEffect: true, type: ButtonType.Capsule })
59.            .width('80%')
60.            .height(40)
61.            .margin(20)
62.            .onClick(() =\> {
63.              this.pageInfos.moveIndexToTop(1)
64.              console.log('moveIndexToTop' + JSON.stringify(this.pageInfos))
65.            })
66.          Button('clear', { stateEffect: true, type: ButtonType.Capsule })
67.            .width('80%')
68.            .height(40)
69.            .margin(20)
70.            .onClick(() =\> {
71.              this.pageInfos.clear()
72.            })
73.          Button('get', { stateEffect: true, type: ButtonType.Capsule })
74.            .width('80%')
75.            .height(40)
76.            .margin(20)
77.            .onClick(() =\> {
78.              console.log('-------------------')
79.              console.log('获取栈中所有NavDestination页面的名称', JSON.stringify(this.pageInfos.getAllPathName()))
80.              console.log('获取index指定的NavDestination页面的参数信息', JSON.stringify(this.pageInfos.getParamByIndex(1)))
81.              console.log('获取全部名为name的NavDestination页面的参数信息', JSON.stringify(this.pageInfos.getParamByName('pageTwo')))
82.              console.log('获取全部名为name的NavDestination页面的位置索引', JSON.stringify(this.pageInfos.getIndexByName('pageOne')))
83.              console.log('获取栈大小', JSON.stringify(this.pageInfos.size()))
84.            })
85.        }.width('100%').height('100%')
86.      }.title('pageOne')
87.      .onBackPressed(() =\> {
88.        const popDestinationInfo = this.pageInfos.pop()
89.        console.log('pop' + '返回值' + JSON.stringify(popDestinationInfo))
90.        return true
91.      }).onReady((context: NavDestinationContext) =\> {
92.        this.pageInfos = context.pathStack
93.      })
94.    }
95.  }

2.  @Builder
3.  export function PageTwoBuilder(name: string, param: Object) {
4.    PageTwo()
5.  }

7.  @Component
8.  export struct PageTwo {
9.    pathStack: NavPathStack = new NavPathStack()

11.    private menuItems: Array<NavigationMenuItem\> = \[
12.      {
13.        value: "1",
14.        icon: 'resources/base/media/undo.svg',
15.      },
16.      {
17.        value: "2",
18.        icon: 'resources/base/media/redo.svg',
19.        isEnabled: false,
20.      },
21.      {
22.        value: "3",
23.        icon: 'resources/base/media/ic\_public\_ok.svg',
24.        isEnabled: true,
25.      }
26.    \]

28.    build() {
29.      NavDestination() {
30.        Column() {
31.          Button('pushPathByName', { stateEffect: true, type: ButtonType.Capsule })
32.            .width('80%')
33.            .height(40)
34.            .margin(20)
35.            .onClick(() =\> {
36.              this.pathStack.pushPathByName('pageOne', null)
37.            })
38.        }.width('100%').height('100%')
39.      }.title('pageTwo')
40.      .menus(this.menuItems)
41.      .onBackPressed(() =\> {
42.        this.pathStack.pop()
43.        return true
44.      })
45.      .onReady((context: NavDestinationContext) =\> {
46.        this.pathStack = context.pathStack;
47.        console.log("current page config info is " + JSON.stringify(context.getConfigInRouteMap()))
48.      })
49.    }
50.  }

3.  {
4.    "routerMap": \[
5.      {
6.        "name": "pageOne",
7.        "pageSourceFile": "src/main/ets/pages/PageOne.ets",
8.        "buildFunction": "PageOneBuilder",
9.        "data": {
10.          "description": "this is pageOne"
11.        }
12.      },
13.      {
14.        "name": "pageTwo",
15.        "pageSourceFile": "src/main/ets/pages/PageTwo.ets",
16.        "buildFunction": "PageTwoBuilder"
17.      }
18.    \]
19.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114419.47194005075152275802678926898115:50001231000000:2800:98E2B09822286CBF5AF3BF3C398133A9863D96E53F67B6BD55555CF3E4694BA2.gif?needInitFileName=true?needInitFileName=true)

### 示例3

该示例主要演示设置每个NavDestination子页面的自定义转场动画及可交互转场动画。

2.  import { CustomTransition, AnimateCallback } from './CustomNavigationUtils'

4.  @Entry
5.  @Component
6.  struct NavigationExample {
7.    pageInfos: NavPathStack = new NavPathStack();

9.    aboutToAppear() {
10.      if (this.pageInfos === undefined) {
11.        this.pageInfos = new NavPathStack();
12.      }
13.      this.pageInfos.pushPath({ name: 'pageOne', param: CustomTransition.getInstance().getAnimationId() });
14.    }

16.    build() {
17.      Navigation(this.pageInfos) {
18.      }
19.      .title('NavIndex')
20.      .hideNavBar(true)
21.      .customNavContentTransition((from: NavContentInfo, to: NavContentInfo, operation: NavigationOperation) =\> {
22.        if (from.mode == NavDestinationMode.DIALOG || to.mode == NavDestinationMode.DIALOG) {
23.          return undefined;
24.        }

27.        if (from.index === -1 || to.index === -1) {
28.          return undefined;
29.        }

31.        CustomTransition.getInstance().operation = operation;
32.        if (CustomTransition.getInstance().interactive) {
33.          let customAnimation: NavigationAnimatedTransition = {
34.            onTransitionEnd: (isSuccess: boolean) =\> {
35.              console.log("===== current transition is " + isSuccess);
36.              CustomTransition.getInstance().recoverState();
37.              CustomTransition.getInstance().proxy = undefined;
38.            },
39.            transition: (transitionProxy: NavigationTransitionProxy) =\> {
40.              CustomTransition.getInstance().proxy = transitionProxy;
41.              let targetIndex: string | undefined = operation == NavigationOperation.PUSH ?
42.                (to.navDestinationId) : (from.navDestinationId);
43.              if (targetIndex) {
44.                CustomTransition.getInstance().fireInteractiveAnimation(targetIndex, operation);
45.              }
46.            },
47.            isInteractive: CustomTransition.getInstance().interactive
48.          }
49.          return customAnimation;
50.        }
51.        let customAnimation: NavigationAnimatedTransition = {
52.          onTransitionEnd: (isSuccess: boolean)=\>{
53.            console.log(\`current transition result is ${isSuccess}\`)
54.          },
55.          timeout: 7000,

57.          transition: (transitionProxy: NavigationTransitionProxy) =\> {
58.            if (!from.navDestinationId || !to.navDestinationId) {
59.              return;
60.            }

62.            let fromParam: AnimateCallback = CustomTransition.getInstance().getAnimateParam(from.navDestinationId);
63.            let toParam: AnimateCallback = CustomTransition.getInstance().getAnimateParam(to.navDestinationId);
64.            if (operation == NavigationOperation.PUSH) {
65.              if (toParam.start) {
66.                toParam.start(true, false);
67.              }
68.              animateTo({
69.                duration: 500, onFinish: () =\> {
70.                  transitionProxy.finishTransition();
71.                }
72.              }, () =\> {
73.                if (toParam.finish) {
74.                  toParam.finish(true, false);
75.                }
76.              })
77.            } else {
78.              if (fromParam.start) {
79.                fromParam.start(true, true);
80.              }
81.              animateTo({
82.                duration: 500, onFinish: () =\> {
83.                  transitionProxy.finishTransition();
84.                }
85.              }, () =\> {
86.                if (fromParam.finish) {
87.                  fromParam.finish(true, true);
88.                }
89.              })
90.            }
91.          }
92.        };
93.        return customAnimation;
94.      })
95.    }
96.  }

2.  import {CustomTransition} from './CustomNavigationUtils';

4.  @Builder
5.  export function PageOneBuilder(name: string, param: Object) {
6.    PageOne()
7.  }

9.  @Component
10.  export struct PageOne {
11.    pageInfos: NavPathStack = new NavPathStack();
12.    @State translateX: string = '0';
13.    pageId: string = '';
14.    rectWidth: number = 0;
15.    interactive: boolean = false;

17.    registerCallback() {
18.      CustomTransition.getInstance().registerNavParam(this.pageId, (isPush: boolean, isExit: boolean) =\> {
19.        if (isPush) {
20.          this.translateX = '100%';
21.        } else {
22.          this.translateX = '0';
23.        }
24.      }, (isPush: boolean, isExit: boolean) =\> {
25.        if (isPush) {
26.          this.translateX = '0';
27.        } else {
28.          this.translateX = '100%';
29.        }
30.      }, (isPush: boolean, isExit: boolean) =\> {
31.        this.translateX = '0';
32.      }, (operation: NavigationOperation) =\> {
33.        if (operation == NavigationOperation.PUSH) {
34.          this.translateX = '100%';
35.          animateTo({
36.            duration: 1000,
37.            onFinish: () =\> {
38.              this.translateX = '0';
39.            }
40.          }, () =\> {
41.            this.translateX = '0';
42.          })
43.        } else {
44.          this.translateX = '0';
45.          animateTo({
46.            duration: 1000,
47.            onFinish: () =\> {
48.              this.translateX = '0';
49.            }
50.          }, () =\> {
51.            this.translateX = '100%';
52.          })
53.        }
54.      }, 200);
55.    }

57.    build() {
58.      NavDestination() {
59.        Column() {
60.          Button(\`setInteractive\`)
61.            .onClick(() =\> {
62.              CustomTransition.getInstance().interactive = !CustomTransition.getInstance().interactive;
63.              this.interactive = CustomTransition.getInstance().interactive;
64.            })

66.          Button('pushPathByName', { stateEffect: true, type: ButtonType.Capsule })
67.            .width('80%')
68.            .height(40)
69.            .margin(20)
70.            .onClick(() =\> {

72.              this.pageInfos.pushDestinationByName('pageTwo', CustomTransition.getInstance().getAnimationId());
73.            })
74.        }
75.        .size({ width: '100%', height: '100%' })
76.      }
77.      .title('pageOne')
78.      .onDisAppear(() =\> {
79.        CustomTransition.getInstance().unRegisterNavParam(this.pageId);
80.      })
81.      .onReady((context: NavDestinationContext) =\> {
82.        this.pageInfos = context.pathStack;
83.        if (context.navDestinationId) {
84.          this.pageId = context.navDestinationId;
85.          this.registerCallback();
86.        }
87.      })
88.      .translate({ x: this.translateX })
89.      .backgroundColor('#F1F3F5')
90.      .gesture(PanGesture()
91.        .onActionStart((event: GestureEvent) =\> {
92.          this.rectWidth = event.target.area.width as number;
93.          if (event.offsetX < 0) {
94.            this.pageInfos.pushPath({ name: 'pageTwo', param: CustomTransition.getInstance().getAnimationId() });
95.          } else {
96.            this.pageInfos.pop();
97.          }
98.        })
99.        .onActionUpdate((event: GestureEvent) =\> {
100.          let rate = event.fingerList\[0\].localX / this.rectWidth;
101.          CustomTransition.getInstance().updateProgress(rate);
102.        })
103.        .onActionEnd((event: GestureEvent) =\> {
104.          let rate: number = event.fingerList\[0\].localX / this.rectWidth;
105.          CustomTransition.getInstance().finishInteractiveAnimation(rate);
106.        }))
107.    }
108.  }

2.  import {CustomTransition} from './CustomNavigationUtils'

4.  @Builder
5.  export function PageTwoBuilder(name: string, param: Object) {
6.    PageTwo({param: param as number})
7.  }

9.  @Component
10.  export struct PageTwo {
11.    pageInfos: NavPathStack = new NavPathStack();
12.    @State translateX: string = '0';
13.    pageId: string = '';
14.    rectWidth: number = 0;
15.    param: number = 0;

17.    registerCallback() {
18.      CustomTransition.getInstance().registerNavParam(this.pageId, (isPush: boolean, isExit: boolean)=\>{
19.        if (isPush) {
20.          this.translateX =  '100%'
21.        } else {
22.          this.translateX = '0';
23.        }
24.      }, (isPush: boolean, isExit: boolean)=\>{
25.        if (isPush) {
26.          this.translateX = '0';
27.        } else {
28.          this.translateX = '100%'
29.        }
30.      }, (isPush: boolean, isExit: boolean) =\> {
31.        this.translateX = '0';
32.      }, (operation: NavigationOperation)=\>{
33.        if (operation == NavigationOperation.PUSH) {
34.          this.translateX = '100%';
35.          animateTo({duration: 500, onFinish: ()=\>{
36.            this.translateX = '0';
37.          }}, ()=\>{
38.            this.translateX = '0'
39.          })
40.        } else {
41.          this.translateX = '0';
42.          animateTo({duration: 500, onFinish: ()=\>{
43.            this.translateX = "0"
44.          }}, ()=\>{
45.            this.translateX = '100%';
46.          })
47.        }
48.      }, 2000)
49.    }

51.    build() {
52.      NavDestination() {
53.        Column() {
54.          Button('pushPathByName', { stateEffect: true, type: ButtonType.Capsule })
55.            .width('80%')
56.            .height(40)
57.            .margin(20)
58.            .onClick(() =\> {

60.              this.pageInfos.pushPath({name:'pageOne', param: CustomTransition.getInstance().getAnimationId()})
61.            })
62.        }
63.        .size({ width: '100%', height: '100%' })
64.      }
65.      .title('pageTwo')
66.      .gesture(PanGesture()
67.        .onActionStart((event: GestureEvent)=\> {
68.          this.rectWidth = event.target.area.width as number;
69.          if (event.offsetX < 0) {
70.            this.pageInfos.pushPath({ name: 'pageOne', param: CustomTransition.getInstance().getAnimationId() });
71.          } else {
72.            this.pageInfos.pop();
73.          }
74.        })
75.        .onActionUpdate((event: GestureEvent) =\> {
76.          let rate = event.fingerList\[0\].localX / this.rectWidth;
77.          CustomTransition.getInstance().updateProgress(rate);
78.        })
79.        .onActionEnd((event: GestureEvent)=\> {
80.          let rate = event.fingerList\[0\].localX / this.rectWidth;
81.          CustomTransition.getInstance().finishInteractiveAnimation(rate);
82.        }))
83.      .onAppear(() =\> {
84.        this.registerCallback();
85.      })
86.      .onDisAppear(()=\>{
87.        CustomTransition.getInstance().unRegisterNavParam(this.pageId);
88.      })
89.      .onReady((context: NavDestinationContext) =\> {
90.        this.pageInfos = context.pathStack;
91.        if (context.navDestinationId) {
92.          this.pageId = context.navDestinationId;
93.          this.registerCallback();
94.        }
95.      })
96.      .translate({x: this.translateX})
97.      .backgroundColor(Color.Yellow)
98.    }
99.  }

3.  export interface AnimateCallback {
4.    finish: ((isPush: boolean, isExit: boolean) =\> void | undefined) | undefined;
5.    start: ((isPush: boolean, isExit: boolean) =\> void | undefined) | undefined;
6.    onFinish: ((isPush: boolean, isExit: boolean) =\> void | undefined) | undefined;
7.    interactive: ((operation: NavigationOperation) =\> void | undefined) | undefined;
8.    timeout: (number | undefined) | undefined;
9.  }
10.  const customTransitionMap: Map<string, AnimateCallback\> = new Map();

12.  export class CustomTransition {
13.    static delegate = new CustomTransition();
14.    interactive: boolean = false;
15.    proxy: NavigationTransitionProxy| undefined = undefined;
16.    private animationId: number = 0;
17.    operation: NavigationOperation = NavigationOperation.PUSH

19.    static getInstance() {
20.      return CustomTransition.delegate;
21.    }

31.    registerNavParam(name: string, startCallback: (operation: boolean, isExit: boolean) =\> void,
32.      endCallback:(operation: boolean, isExit: boolean) =\> void,
33.      onFinish: (operation: boolean, isExit: boolean) =\> void,
34.      interactiveCallback: (operation: NavigationOperation) =\>void,
35.      timeout: number): void {
36.      if (customTransitionMap.has(name)) {
37.        let param = customTransitionMap.get(name);
38.        if (param != undefined) {
39.          param.start = startCallback;
40.          param.finish = endCallback;
41.          param.timeout = timeout;
42.          param.onFinish = onFinish;
43.          param.interactive = interactiveCallback;
44.          return;
45.        }
46.      }
47.      let params: AnimateCallback = {timeout: timeout, start: startCallback, finish: endCallback, onFinish: onFinish,
48.        interactive: interactiveCallback};
49.      customTransitionMap.set(name, params);
50.    }

52.    getAnimationId() {
53.      return Date.now();
54.    }

56.    unRegisterNavParam(name: string): void {
57.      customTransitionMap.delete(name);
58.    }

60.    fireInteractiveAnimation(id: string, operation: NavigationOperation) {
61.      let animation = customTransitionMap.get(id)?.interactive;
62.      if (!animation) {
63.        return;
64.      }
65.      animation(operation);
66.    }

68.    updateProgress(progress: number) {
69.      if (!this.proxy?.updateTransition) {
70.        return;
71.      }
72.      progress = this.operation == NavigationOperation.PUSH ? 1 - progress : progress;
73.      this.proxy?.updateTransition(progress);
74.    }

76.    cancelTransition() {
77.      if (this.proxy?.cancelTransition) {
78.        this.proxy.cancelTransition();
79.      }
80.    }

82.    recoverState() {
83.      if (!this.proxy?.from.navDestinationId || !this.proxy?.to.navDestinationId) {
84.        return;
85.      }
86.      let fromParam = customTransitionMap.get(this.proxy.from.navDestinationId);
87.      if (fromParam?.onFinish) {
88.        fromParam.onFinish(false, false);
89.      }
90.      let toParam = customTransitionMap.get(this.proxy?.to.navDestinationId);
91.      if (toParam?.onFinish) {
92.        toParam.onFinish(true, true);
93.      }
94.    }

96.    finishTransition() {
97.      this.proxy?.finishTransition();
98.    }

100.    finishInteractiveAnimation(rate: number) {
101.      if (this.operation == NavigationOperation.PUSH) {
102.        if (rate \> 0.5) {
103.          if (this.proxy?.cancelTransition) {
104.            this.proxy.cancelTransition();
105.          }
106.        } else {
107.          this.proxy?.finishTransition();
108.        }
109.      } else {
110.        if (rate \> 0.5) {
111.          this.proxy?.finishTransition();
112.        } else {
113.          if (this.proxy?.cancelTransition) {
114.            this.proxy.cancelTransition();
115.          }
116.        }
117.      }
118.    }

120.    getAnimateParam(name: string): AnimateCallback {
121.      let result: AnimateCallback = {
122.        start: customTransitionMap.get(name)?.start,
123.        finish: customTransitionMap.get(name)?.finish,
124.        timeout: customTransitionMap.get(name)?.timeout,
125.        onFinish: customTransitionMap.get(name)?.onFinish,
126.        interactive: customTransitionMap.get(name)?.interactive,
127.      };
128.      return result;
129.    }
130.  }

3.  {
4.    "routerMap": \[
5.      {
6.        "name": "pageOne",
7.        "pageSourceFile": "src/main/ets/pages/PageOne.ets",
8.        "buildFunction": "PageOneBuilder",
9.        "data": {
10.          "description": "this is pageOne"
11.        }
12.      },
13.      {
14.        "name": "pageTwo",
15.        "pageSourceFile": "src/main/ets/pages/PageTwo.ets",
16.        "buildFunction": "PageTwoBuilder"
17.      }
18.    \]
19.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114419.18252222862092203910036636303449:50001231000000:2800:8A5D256E76D0226D59BA4FC865CFCD21C68188BE87B65D1FBD0266215E487E6E.gif?needInitFileName=true?needInitFileName=true)

### 示例4

该示例主要演示Navigation带参返回。

3.  @Entry
4.  @Component
5.  struct NavigationExample {
6.    pageInfo: NavPathStack = new NavPathStack()

8.    build() {
9.      Navigation(this.pageInfo) {
10.        Column() {
11.          Button('StartTest', { stateEffect: true, type: ButtonType.Capsule })
12.            .width('80%')
13.            .height(40)
14.            .margin(20)
15.            .onClick(() =\> {
16.              this.pageInfo.pushPath({ name: 'pageOne' });
17.            })
18.        }
19.      }.title('NavIndex')
20.    }
21.  }

2.  import { BusinessError } from '@kit.BasicServicesKit';

4.  class TmpClass{
5.    count:number = 10
6.  }

8.  class ParamWithOp {
9.    operation: number = 1
10.    count: number = 10
11.  }

13.  @Builder
14.  export function PageOneBuilder(name: string, param: Object) {
15.    PageOne()
16.  }

18.  @Component
19.  export struct PageOne {
20.    pageInfo: NavPathStack = new NavPathStack();
21.    @State message: string = 'Hello World'

23.    build() {
24.      NavDestination() {
25.        Column() {
26.          Text(this.message)
27.            .width('80%')
28.            .height(50)
29.            .margin(10)

31.          Button('pushPath', { stateEffect: true, type: ButtonType.Capsule })
32.            .width('80%')
33.            .height(40)
34.            .margin(10)
35.            .onClick(()=\>{
36.              this.pageInfo.pushPath({name: 'pageTwo', param: new ParamWithOp(), onPop: (popInfo: PopInfo)=\>{
37.                this.message = '\[pushPath\]last page is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result);
38.              }});
39.            })

41.          Button('pushPathByName', { stateEffect: true, type: ButtonType.Capsule })
42.            .width('80%')
43.            .height(40)
44.            .margin(10)
45.            .onClick(() =\> {
46.              let tmp = new TmpClass()
47.              this.pageInfo.pushPathByName('pageTwo', tmp, (popInfo)=\>{
48.                this.message = '\[pushPathByName\]last page is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result);
49.              });
50.            })

52.          Button('pushDestination', { stateEffect: true, type: ButtonType.Capsule })
53.            .width('80%')
54.            .height(40)
55.            .margin(10)
56.            .onClick(()=\>{
57.              let tmp = new TmpClass()

59.              this.pageInfo.pushDestination({name: 'pageTwo', param: new ParamWithOp(), onPop: (popInfo: PopInfo)=\>{
60.                this.message = '\[pushDestination\]last page is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result);
61.              }}).catch((error: BusinessError)=\>{
62.                console.error(\`\[pushDestination\]failed, error code = ${error.code}, error.message = ${error.message}.\`);
63.              }).then(()=\>{
64.                console.error('\[pushDestination\]success.');
65.              });
66.            })

68.          Button('pushDestinationByName', { stateEffect: true, type: ButtonType.Capsule })
69.            .width('80%')
70.            .height(40)
71.            .margin(10)
72.            .onClick(()=\>{
73.              let tmp = new TmpClass()

75.              this.pageInfo.pushDestinationByName('pageTwo', tmp, (popInfo)=\>{
76.                this.message = '\[pushDestinationByName\]last page is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result);
77.              }).catch((error: BusinessError)=\>{
78.                console.error(\`\[pushDestinationByName\]failed, error code = ${error.code}, error.message = ${error.message}.\`);
79.              }).then(()=\>{
80.                console.error('\[pushDestinationByName\]success.');
81.              });
82.            })

84.          Button('pushPathWithoutOnPop', { stateEffect: true, type: ButtonType.Capsule })
85.            .width('80%')
86.            .height(40)
87.            .margin(10)
88.            .onClick(()=\>{
89.              this.pageInfo.pushPath({name: 'pageTwo', param: new ParamWithOp()});
90.            })

92.          Button('pushPathByNameWithoutOnPop', { stateEffect: true, type: ButtonType.Capsule })
93.            .width('80%')
94.            .height(40)
95.            .margin(10)
96.            .onClick(() =\> {
97.              let tmp = new TmpClass()
98.              this.pageInfo.pushPathByName('pageTwo', tmp);
99.            })

101.          Button('pushDestinationWithoutOnPop', { stateEffect: true, type: ButtonType.Capsule })
102.            .width('80%')
103.            .height(40)
104.            .margin(10)
105.            .onClick(()=\>{
106.              let tmp = new TmpClass()

108.              this.pageInfo.pushDestination({name: 'pageTwo', param: new ParamWithOp()})
109.                .catch((error: BusinessError)=\>{
110.                console.error(\`\[pushDestinationWithoutOnPop\]failed, error code = ${error.code}, error.message = ${error.message}.\`);
111.              }).then(()=\>{
112.                console.error('\[pushDestinationWithoutOnPop\]success.');
113.              });
114.            })

116.          Button('pushDestinationByNameWithoutOnPop', { stateEffect: true, type: ButtonType.Capsule })
117.            .width('80%')
118.            .height(40)
119.            .margin(10)
120.            .onClick(() =\> {
121.              let tmp = new TmpClass()

123.              this.pageInfo.pushDestinationByName('pageTwo', tmp)
124.                .catch((error: BusinessError)=\>{
125.                  console.error(\`\[pushDestinationByNameWithoutOnPop\]failed, error code = ${error.code}, error.message = ${error.message}.\`);
126.                }).then(()=\>{
127.                console.error('\[pushDestinationByNameWithoutOnPop\]success.');
128.              });
129.            })

131.          Button('clear', { stateEffect: true, type: ButtonType.Capsule })
132.            .width('80%')
133.            .height(40)
134.            .margin(10)
135.            .onClick(() =\> {
136.              this.pageInfo.clear();
137.            })
138.        }.width('100%').height('100%')
139.      }.title('pageOne')
140.      .onBackPressed(() =\> {
141.        this.pageInfo.pop({number: 1})
142.        return true
143.      }).onReady((context: NavDestinationContext) =\> {
144.        this.pageInfo = context.pathStack;
145.      })
146.    }
147.  }

3.  class resultClass {
4.    constructor(count: number) {
5.      this.count = count;
6.    }
7.    count: number = 10
8.  }

10.  @Builder
11.  export function PageTwoBuilder() {
12.    PageTwo()
13.  }

15.  @Component
16.  export struct PageTwo {
17.    pathStack: NavPathStack = new NavPathStack()

19.    build() {
20.      NavDestination() {
21.        Column() {
22.          Button('pop', { stateEffect: true, type: ButtonType.Capsule })
23.            .width('80%')
24.            .height(40)
25.            .margin(20)
26.            .onClick(() =\> {
27.              this.pathStack.pop(new resultClass(1));
28.            })

30.          Button('popToName', { stateEffect: true, type: ButtonType.Capsule })
31.            .width('80%')
32.            .height(40)
33.            .margin(20)
34.            .onClick(() =\> {
35.              this.pathStack.popToName('pageOne', new resultClass(11));
36.            })

38.          Button('popToIndex', { stateEffect: true, type: ButtonType.Capsule })
39.            .width('80%')
40.            .height(40)
41.            .margin(20)
42.            .onClick(() =\> {
43.              this.pathStack.popToIndex(0, new resultClass(111));
44.            })

46.          Button('popWithoutResult', { stateEffect: true, type: ButtonType.Capsule })
47.            .width('80%')
48.            .height(40)
49.            .margin(20)
50.            .onClick(() =\> {
51.              this.pathStack.pop();
52.            })

54.          Button('popToNameWithoutResult', { stateEffect: true, type: ButtonType.Capsule })
55.            .width('80%')
56.            .height(40)
57.            .margin(20)
58.            .onClick(() =\> {
59.              this.pathStack.popToName('pageOne');
60.            })

62.          Button('popToIndexWithoutResult', { stateEffect: true, type: ButtonType.Capsule })
63.            .width('80%')
64.            .height(40)
65.            .margin(20)
66.            .onClick(() =\> {
67.              this.pathStack.popToIndex(0);
68.            })
69.        }.width('100%').height('100%')
70.      }.title('pageTwo')
71.      .onBackPressed(() =\> {
72.        this.pathStack.pop(new resultClass(0));
73.        return true;
74.      }).onReady((context: NavDestinationContext) =\> {
75.        this.pathStack = context.pathStack
76.      })
77.    }
78.  }

3.  {
4.    "routerMap": \[
5.      {
6.        "name": "pageOne",
7.        "pageSourceFile": "src/main/ets/pages/PageOne.ets",
8.        "buildFunction": "PageOneBuilder",
9.        "data": {
10.          "description": "this is pageOne"
11.        }
12.      },
13.      {
14.        "name": "pageTwo",
15.        "pageSourceFile": "src/main/ets/pages/PageTwo.ets",
16.        "buildFunction": "PageTwoBuilder"
17.      }
18.    \]
19.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114419.52844914932351189758495253286195:50001231000000:2800:6B1A313979B0CE43062E8A520CF5C670841D69781F591CCF69A8CF8CE6DEB144.gif?needInitFileName=true?needInitFileName=true)

### 示例5

该示例主要演示设置Navigation主页的标题栏、工具栏和NavDestination页面的标题栏的背景颜色和背景模糊效果。

1.  let COLOR1: string = "#80004AAF";
2.  let COLOR2: string = "#802787D9";
3.  let BLUR\_STYLE\_1: BlurStyle = BlurStyle.BACKGROUND\_THIN;
4.  let BLUR\_STYLE\_2: BlurStyle = BlurStyle.BACKGROUND\_THICK;

6.  @Component
7.  struct BackComponent {
8.    build() {
9.      Row() {
10.        Column() {}
11.        .height('100%')
12.        .backgroundColor("#3D9DB4")
13.        .layoutWeight(9)
14.        Column() {}
15.        .height('100%')
16.        .backgroundColor("17A98D")
17.        .layoutWeight(9)
18.        Column() {}
19.        .height('100%')
20.        .backgroundColor("FFC000")
21.        .layoutWeight(9)
22.      }
23.      .height('100%')
24.      .width('100%')
25.    }
26.  }

28.  @Component
29.  struct ColorAndBlur {
30.    @State useColor1: boolean = true;
31.    @State useBlur1: boolean = true;

33.    build() {
34.      NavDestination() {
35.        Stack({alignContent: Alignment.Center}) {
36.          BackComponent()
37.            .width('100%')
38.            .height('100%')
39.          Column() {
40.            Stack({alignContent: Alignment.Center}) {
41.              Button("switch color")
42.                .onClick(() =\> {
43.                  this.useColor1 = !this.useColor1;
44.                })
45.            }
46.            .width('100%')
47.            .layoutWeight(1)
48.            Stack({alignContent: Alignment.Center}) {
49.              Button("switch blur")
50.                .onClick(() =\> {
51.                  this.useBlur1 = !this.useBlur1;
52.                })
53.            }
54.            .width('100%')
55.            .layoutWeight(1)
56.          }
57.          .width('100%')
58.          .height('100%')
59.        }.width('100%')
60.        .height('100%')
61.      }
62.      .width('100%')
63.      .height('100%')

65.      .title("switch titlebar color and blur", {
66.        backgroundColor: this.useColor1 ? COLOR1 : COLOR2,
67.        backgroundBlurStyle: this.useBlur1 ? BLUR\_STYLE\_1 : BLUR\_STYLE\_2,
68.        barStyle: BarStyle.STACK
69.      })
70.    }
71.  }

73.  @Entry
74.  @Component
75.  struct Index {
76.    private stack: NavPathStack = new NavPathStack();
77.    @State useColor1: boolean = true;
78.    @State useBlur1: boolean = true;

80.    @Builder
81.    PageBuilder(name: string) {
82.      ColorAndBlur()
83.    }

85.    build() {
86.      Navigation(this.stack) {
87.        Stack({alignContent: Alignment.Center}) {
88.          BackComponent()
89.            .width('100%')
90.            .height('100%')
91.          Column() {
92.            Stack({alignContent: Alignment.Center}) {
93.              Button("switch color")
94.                .onClick(() =\> {
95.                  this.useColor1 = !this.useColor1;
96.                })
97.            }
98.            .width('100%')
99.            .layoutWeight(1)
100.            Stack({alignContent: Alignment.Center}) {
101.              Button("switch blur")
102.                .onClick(() =\> {
103.                  this.useBlur1 = !this.useBlur1;
104.                })
105.            }
106.            .width('100%')
107.            .layoutWeight(1)
108.            Stack({alignContent: Alignment.Center}) {
109.              Button("push page")
110.                .onClick(() =\> {
111.                  this.stack.pushPath({name: "page"})
112.                })
113.            }
114.            .width('100%')
115.            .layoutWeight(1)
116.          }
117.          .width('100%')
118.          .height('80%')
119.        }.width('100%')
120.        .height('100%')
121.      }
122.      .width('100%')
123.      .height('100%')
124.      .navDestination(this.PageBuilder)

126.      .title("NavTitle", {
127.        backgroundColor: this.useColor1 ? COLOR1 : COLOR2,
128.        backgroundBlurStyle: this.useBlur1 ? BLUR\_STYLE\_1 : BLUR\_STYLE\_2,
129.        barStyle: BarStyle.STACK
130.      })

132.      .toolbarConfiguration(\[
133.        {value: "a"},
134.        {value: "b"},
135.        {value: "c"}
136.      \], {
137.        backgroundColor: this.useColor1 ? COLOR1 : COLOR2,
138.        backgroundBlurStyle: this.useBlur1 ? BLUR\_STYLE\_1 : BLUR\_STYLE\_2
139.      })
140.    }
141.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114419.27525255811471752109180517277140:50001231000000:2800:AA2AD63E3DA796C1C45F3634B34CD00F9600A46666EE8C05677248E0EEEF75E1.gif?needInitFileName=true?needInitFileName=true)

### 示例6

该示例主要演示在嵌套Navigation场景下，如何获取父NavPathStack。

1.  @Entry
2.  @Component
3.  struct NavigationExample1 {
4.    @State childNavStack: NavPathStack = new NavPathStack();

6.    build() {
7.      Navigation() {
8.        Stack({alignContent: Alignment.Center}) {
9.          Navigation(this.childNavStack) {
10.            Button('push Path to parent Navigation', { stateEffect: true, type: ButtonType.Capsule })
11.              .width('80%')
12.              .height(40)
13.              .margin(20)
14.              .onClick(() =\> {

16.                let parentStack = this.childNavStack.getParent();
17.                parentStack?.pushPath({ name: "pageOne"})
18.              })
19.          }
20.          .clip(true)
21.          .backgroundColor(Color.Orange)
22.          .width('80%')
23.          .height('80%')
24.          .title('ChildNavigation')
25.        }
26.        .width('100%')
27.        .height('100%')
28.      }
29.      .backgroundColor(Color.Green)
30.      .width('100%')
31.      .height('100%')
32.      .title('ParentNavigation')
33.    }
34.  }

2.    @Builder
3.    export function PageOneBuilder(name: string) {
4.      NavDestination() {
5.        Text("this is " + name)
6.      }
7.      .title(name)
8.    }

3.  {
4.    "routerMap": \[
5.      {
6.        "name": "pageOne",
7.        "pageSourceFile": "src/main/ets/pages/PageOne.ets",
8.        "buildFunction": "PageOneBuilder",
9.        "data": {
10.          "description": "this is pageOne"
11.        }
12.      }
13.    \]
14.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114419.25473205789726289825887820189526:50001231000000:2800:0C3FDCF628BC69209C68DD8008119ECCC2B4229AB2ABA07BF64B52322C22494C.gif?needInitFileName=true?needInitFileName=true)

### 示例7

该示例主要演示如下两点功能：

1.  NavPathStack无需声明为状态变量，也可以实现页面栈操作功能。

2.  NavDestination通过onReady事件能够拿到对应的NavPathInfo和所属的NavPathStack。


1.  class PageParam {
2.    constructor(num\_: number) {
3.      this.num = num\_;
4.    }
5.    num: number = 0;
6.  }

8.  @Builder
9.  export function PageOneBuilder(name: string, param: Object) {
10.    PageOne()
11.  }

13.  @Component
14.  struct PageOne {
15.    private stack: NavPathStack | null = null;
16.    private name: string = "";
17.    private paramNum: number = 0;

19.    build() {
20.      NavDestination() {
21.        Column() {
22.          Text("NavPathInfo: name: " + this.name + ", paramNum: " + this.paramNum)
23.          Button('pushPath', { stateEffect: true, type: ButtonType.Capsule })
24.            .width('80%')
25.            .height(40)
26.            .margin(20)
27.            .onClick(() =\> {
28.              if (this.stack) {
29.                let p = new PageParam(this.paramNum + 1);
30.                this.stack.pushPath({name: "pageOne", param: p});
31.              }
32.            })
33.          Button('pop', { stateEffect: true, type: ButtonType.Capsule })
34.            .width('80%')
35.            .height(40)
36.            .margin(20)
37.            .onClick(() =\> {
38.              this.stack?.pop()
39.            })
40.        }
41.        .width('100%')
42.        .height('100%')
43.      }
44.      .title('pageOne')
45.      .onReady((ctx: NavDestinationContext) =\> {

47.        try {
48.          this.name = ctx?.pathInfo?.name;
49.          this.paramNum = (ctx?.pathInfo?.param as PageParam)?.num;
50.          this.stack = ctx.pathStack;
51.        } catch (e) {
52.          console.log(\`testTag onReady catch exception: ${JSON.stringify(e)}\`)
53.        }
54.      })
55.    }
56.  }

58.  @Entry
59.  @Component
60.  struct NavigationExample2 {
61.    private stack : NavPathStack = new NavPathStack();

63.    build() {
64.      Navigation(this.stack) {
65.        Stack({alignContent: Alignment.Center}) {
66.          Button('pushPath', { stateEffect: true, type: ButtonType.Capsule })
67.            .width('80%')
68.            .height(40)
69.            .margin(20)
70.            .onClick(() =\> {
71.              let p = new PageParam(1);
72.              this.stack.pushPath({ name: "pageOne", param: p })
73.            })
74.        }
75.        .width('100%')
76.        .height('100%')
77.      }
78.      .width('100%')
79.      .height('100%')
80.      .title('Navigation')
81.    }
82.  }

3.  {
4.    "routerMap": \[
5.      {
6.        "name": "pageOne",
7.        "pageSourceFile": "src/main/ets/pages/Index.ets",
8.        "buildFunction": "PageOneBuilder",
9.        "data": {
10.          "description": "this is pageOne"
11.        }
12.      }
13.    \]
14.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114419.59932752342149162644797238695248:50001231000000:2800:C400DE63AFC2D61B907019AB92D5F0C0518819FDB1E157844BF96778E73D6F7E.gif?needInitFileName=true?needInitFileName=true)

### 示例8

该示例演示NavDestination的生命周期时序。

1.  @Builder
2.  export function PageOneBuilder(name: string, param: Object) {
3.    PageOneComponent()
4.  }

6.  @Component
7.  struct PageOneComponent {
8.    private stack: NavPathStack | null = null;
9.    @State eventStr: string = "";

11.    build() {
12.      NavDestination() {
13.        Column() {
14.          Text("event: " + this.eventStr)
15.          Button('pushPath', { stateEffect: true, type: ButtonType.Capsule })
16.            .width('80%')
17.            .height(40)
18.            .margin(20)
19.            .onClick(() =\> {
20.              if (this.stack) {
21.                this.stack.pushPath({name: "pageOne"});
22.              }
23.            })
24.          Button('pop', { stateEffect: true, type: ButtonType.Capsule })
25.            .width('80%')
26.            .height(40)
27.            .margin(20)
28.            .onClick(() =\> {
29.              this.stack?.pop()
30.            })
31.        }
32.        .width('100%')
33.        .height('100%')
34.      }
35.      .title('pageOne')
36.      .onAppear(() =\> { this.eventStr += "<onAppear\>"; })
37.      .onDisAppear(() =\> { this.eventStr += "<onDisAppear\>"; })
38.      .onShown(() =\> { this.eventStr += "<onShown\>"; })
39.      .onHidden(() =\> { this.eventStr += "<onHidden\>"; })
40.      .onWillAppear(() =\> { this.eventStr += "<onWillAppear\>"; })
41.      .onWillDisappear(() =\> { this.eventStr += "<onWillDisappear\>"; })
42.      .onWillShow(() =\> { this.eventStr += "<onWillShow\>"; })
43.      .onWillHide(() =\> { this.eventStr += "<onWillHide\>"; })

45.      .onReady((ctx: NavDestinationContext) =\> {
46.        try {
47.          this.eventStr += "<onReady\>";
48.          this.stack = ctx.pathStack;
49.        } catch (e) {
50.          console.log(\`testTag onReady catch exception: ${JSON.stringify(e)}\`)
51.        }
52.      })
53.    }
54.  }

56.  @Entry
57.  @Component
58.  struct NavigationExample3 {
59.    private stack : NavPathStack = new NavPathStack();

61.    build() {
62.      Navigation(this.stack) {
63.        Stack({alignContent: Alignment.Center}) {
64.          Button('pushPath', { stateEffect: true, type: ButtonType.Capsule })
65.            .width('80%')
66.            .height(40)
67.            .margin(20)
68.            .onClick(() =\> {
69.              this.stack.pushPath({ name: "pageOne" })
70.            })
71.        }
72.        .width('100%')
73.        .height('100%')
74.      }
75.      .width('100%')
76.      .height('100%')
77.      .title('Navigation')
78.    }
79.  }

3.  {
4.    "routerMap": \[
5.      {
6.        "name": "pageOne",
7.        "pageSourceFile": "src/main/ets/pages/Index.ets",
8.        "buildFunction": "PageOneBuilder",
9.        "data": {
10.          "description": "this is pageOne"
11.        }
12.      }
13.    \]
14.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114419.53617692842909489283000587589871:50001231000000:2800:EA6801B983C7CD31344D109D772935E29C40FFBE09B09BA7C51BA9FD65A8D295.gif?needInitFileName=true?needInitFileName=true)

### 示例9

该示例演示Navigation标题栏STACK布局效果。

1.  @Entry
2.  @Component
3.  struct NavigationExample {
4.    private arr: number\[\] = \[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\];
5.    private scrollerForScroll: Scroller = new Scroller();
6.    @State barStyle: BarStyle = BarStyle.STANDARD;

8.    build() {
9.      Column() {
10.        Navigation() {
11.          Column() {
12.            Scroll(this.scrollerForScroll) {
13.              Column() {
14.                Image($r('app.media.image\_1'))

16.                  .height(138)
17.                  .width('100%')
18.                Button('BarStyle.STANDARD')
19.                  .height('50vp')
20.                  .onClick(() =\> {
21.                    this.barStyle = BarStyle.STANDARD;
22.                  })
23.                Button('BarStyle.STACK')
24.                  .height('50vp')
25.                  .margin({ top: 12 })
26.                  .onClick(() =\> {
27.                    this.barStyle = BarStyle.STACK;
28.                  })

30.                ForEach(this.arr, (item: number) =\> {
31.                  ListItem() {
32.                    Text('' + item)
33.                      .width('100%')
34.                      .height(100)
35.                      .fontSize(16)
36.                      .textAlign(TextAlign.Center)
37.                      .borderRadius(10)
38.                      .backgroundColor(Color.Orange)
39.                      .margin({ top: 12 })
40.                  }
41.                }, (item: string) =\> item)
42.              }
43.            }
44.          }
45.          .width('100%')
46.          .height('100%')
47.          .backgroundColor(0xDCDCDC)
48.        }
49.        .title(
50.          {
51.            main: 'NavTitle',
52.            sub: 'subtitle'
53.          },
54.          {
55.            backgroundBlurStyle: BlurStyle.COMPONENT\_THICK,
56.            barStyle: this.barStyle,
57.          }
58.        )
59.        .titleMode(NavigationTitleMode.Free)
60.        .hideTitleBar(false)
61.      }.width('100%').height('100%').backgroundColor('#F1F3F5')
62.    }
63.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114419.66818351743894530876727808559465:50001231000000:2800:4A06FFFEA29B3CFEFF4ABE97D4B5C9B6FCA41E8BBFDCBC694A730298CB96AB3E.gif?needInitFileName=true?needInitFileName=true)

### 示例10

该示例主要演示如何定义NavPathStack的派生类和派生类在Navigation中的基本用法。

1.  class DerivedNavPathStack extends NavPathStack {

3.    id: string = "\_\_default\_\_"

6.    setId(id: string) {
7.      this.id = id;
8.    }

11.    getInfo(): string {
12.      return "this page used Derived NavPathStack, id: " + this.id
13.    }

16.    pushPath(info: NavPathInfo, animated?: boolean): void
17.    pushPath(info: NavPathInfo, options?: NavigationOptions): void
18.    pushPath(info: NavPathInfo, secArg?: boolean | NavigationOptions): void {
19.      console.log('\[derive-test\] reached DerivedNavPathStack\\'s pushPath');
20.      if (typeof secArg === 'boolean') {
21.        super.pushPath(info, secArg);
22.      } else {
23.        super.pushPath(info, secArg);
24.      }
25.    }

28.    pop(animated?: boolean | undefined): NavPathInfo | undefined
29.    pop(result: Object, animated?: boolean | undefined): NavPathInfo | undefined
30.    pop(result?: Object, animated?: boolean | undefined): NavPathInfo | undefined {
31.      console.log('\[derive-test\] reached DerivedNavPathStack\\'s pop');
32.      return super.pop(result, animated);
33.    }

36.  }

38.  class param {
39.    info: string = "\_\_default\_param\_\_";
40.    constructor(info: string) { this.info = info }
41.  }

43.  @Entry
44.  @Component
45.  struct Index {
46.    derivedStack: DerivedNavPathStack = new DerivedNavPathStack();

48.    aboutToAppear(): void {
49.      this.derivedStack.setId('origin stack');
50.    }

52.    @Builder
53.    pageMap(name: string) {
54.      PageOne()
55.    }

57.    build() {
58.      Navigation(this.derivedStack) {
59.        Button('to Page One').margin(20).onClick(() =\> {
60.          this.derivedStack.pushPath({
61.            name: 'pageOne',
62.            param: new param('push pageOne in homePage when stack size: ' + this.derivedStack.size())
63.          });
64.        })
65.      }.navDestination(this.pageMap)
66.      .title('Home Page')
67.    }
68.  }

70.  @Component
71.  struct PageOne {
72.    derivedStack: DerivedNavPathStack = new DerivedNavPathStack();
73.    curStringifyParam: string = "NA";

75.    build() {
76.      NavDestination() {
77.        Column() {
78.          Text(this.derivedStack.getInfo())
79.            .margin(10)
80.            .fontSize(25)
81.            .fontWeight(FontWeight.Bold)
82.            .textAlign(TextAlign.Start)
83.          Text('current page param info:')
84.            .margin(10)
85.            .fontSize(25)
86.            .fontWeight(FontWeight.Bold)
87.            .textAlign(TextAlign.Start)
88.          Text(this.curStringifyParam)
89.            .margin(20)
90.            .fontSize(20)
91.            .textAlign(TextAlign.Start)
92.        }.backgroundColor(Color.Pink)
93.        Button('to Page One').margin(20).onClick(() =\> {
94.          this.derivedStack.pushPath({
95.            name: 'pageOne',
96.            param: new param('push pageOne in pageOne when stack size: ' + this.derivedStack.size())
97.          });
98.        })
99.      }.title('Page One')
100.      .onReady((context: NavDestinationContext) =\> {
101.        console.log('\[derive-test\] reached PageOne\\'s onReady');

103.        this.derivedStack = context.pathStack as DerivedNavPathStack;
104.        console.log('\[derive-test\] -- got derivedStack: ' + this.derivedStack.id);
105.        this.curStringifyParam = JSON.stringify(context.pathInfo.param);
106.        console.log('\[derive-test\] -- got param: ' + this.curStringifyParam);
107.      })
108.    }
109.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114419.95969232925400985070041291552408:50001231000000:2800:6E2EFDE8C20088FEC5A38995187F8F851662D676E027BD91B3C6A6A1C1620C24.gif?needInitFileName=true?needInitFileName=true)

### 示例11

该示例主要演示Navigation和NavDestination如何使用Symbol组件。

1.  import { SymbolGlyphModifier } from '@kit.ArkUI';

3.  @Entry
4.  @Component
5.  struct NavigationExample {
6.    @Provide('navPathStack') navPathStack:NavPathStack = new NavPathStack();
7.    @State menuItems:Array<NavigationMenuItem\> = \[
8.      {
9.        value:'menuItem1',
10.        icon:'resources/base/media/ic\_public\_ok.svg'
11.      },
12.      {
13.        value:'menuItem2',
14.        icon:'resources/base/media/ic\_public\_ok.svg',
15.        symbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos\_folder\_badge\_plus')).fontColor(\[Color.Red,Color.Green\]).renderingStrategy(SymbolRenderingStrategy.MULTIPLE\_COLOR),
16.      },
17.      {
18.        value:'menuItem3',
19.        symbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos\_lungs')),
20.      },
21.    \]

23.    @State toolItems:Array<ToolbarItem\>\= \[
24.      {
25.        value:'toolItem1',
26.        icon:'resources/base/media/ic\_public\_ok.svg',
27.        symbolIcon:new SymbolGlyphModifier($r('sys.symbol.ohos\_lungs')),
28.        status:ToolbarItemStatus.ACTIVE,
29.        activeSymbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos\_folder\_badge\_plus')).fontColor(\[Color.Red,Color.Green\]).renderingStrategy(SymbolRenderingStrategy.MULTIPLE\_COLOR),
30.        action:()=\>{}
31.      },
32.      {
33.        value:'toolItem2',
34.        symbolIcon:new SymbolGlyphModifier($r('sys.symbol.ohos\_star')),
35.        status:ToolbarItemStatus.ACTIVE,
36.        activeIcon: 'resources/base/media/ic\_public\_more.svg',
37.        action:()=\>{}
38.      },
39.      {
40.        value:'toolItem3',
41.        symbolIcon:new SymbolGlyphModifier($r('sys.symbol.ohos\_star')),
42.        status:ToolbarItemStatus.ACTIVE,
43.        activeSymbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos\_lungs')),
44.        action:()=\>{}
45.      }
46.    \]

48.    @Builder
49.    myRouter(name:string,param?:Object) {
50.      if(name === 'NavigationMenu') {
51.        NavigationMenu();
52.      }
53.    }

55.    build() {
56.      Navigation(this.navPathStack) {
57.        Column() {
58.          Button('跳转').onClick(()=\> {
59.            this.navPathStack.pushPathByName('NavigationMenu', null);
60.          })
61.        }
62.      }
63.      .backButtonIcon(new SymbolGlyphModifier($r('sys.symbol.ohos\_wifi')))
64.      .titleMode(NavigationTitleMode.Mini)
65.      .menus(this.menuItems)
66.      .toolbarConfiguration(this.toolItems)
67.      .title('一级页面')
68.      .navDestination(this.myRouter)
69.    }
70.  }

72.  @Component
73.  export struct NavigationMenu{
74.    @Consume('navPathStack') navPathStack:NavPathStack;
75.    @State menuItems:Array<NavigationMenuItem\> = \[
76.      {
77.        value:'menuItem1',
78.        icon:'resources/base/media/ic\_public\_ok.svg',
79.        action:()=\>{}
80.      },
81.      {
82.        value:'menuItem2',
83.        symbolIcon: new SymbolGlyphModifier($r('sys.symbol.ohos\_folder\_badge\_plus')).fontColor(\[Color.Red,Color.Green\]).renderingStrategy(SymbolRenderingStrategy.MULTIPLE\_COLOR),
84.        action:()=\>{}
85.      },
86.      {
87.        value:'menuItem3',
88.        symbolIcon: new SymbolGlyphModifier($r('sys.symbol.repeat\_1')),
89.        action:()=\>{}
90.      },
91.    \]

93.    build() {
94.      NavDestination(){
95.        Row() {
96.          Column(){
97.          }
98.          .width('100%')
99.        }
100.        .height('100%')
101.      }
102.      .hideTitleBar(false)
103.      .title('NavDestination title')
104.      .backgroundColor($r('sys.color.ohos\_id\_color\_titlebar\_sub\_bg'))
105.      .backButtonIcon(new SymbolGlyphModifier($r('sys.symbol.ohos\_star')).fontColor(\[Color.Blue\]))
106.      .menus(this.menuItems)
107.    }
108.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114419.86808273614794757167321654272737:50001231000000:2800:F3C42A70DF5F7F41447779350A5314FCAD2FB170D83DAEB6D6E2D8E194173FB7.gif?needInitFileName=true?needInitFileName=true)

### 示例12

该示例主要演示Navigation和NavDestination如何自定义设置标题栏边距。

1.  import { LengthMetrics } from '@kit.ArkUI';

3.  @Entry
4.  @Component
5.  struct NavigationExample {
6.    @Provide('navPathStack') navPathStack: NavPathStack = new NavPathStack();

8.    @State paddingStart: LengthMetrics = LengthMetrics.vp(0);

10.    @State paddingEnd: LengthMetrics = LengthMetrics.vp(0);
11.    @State menuItems: Array<NavigationMenuItem\> = \[
12.      {
13.        value: 'menuItem1',
14.        icon: 'resources/base/media/ic\_public\_ok.svg',
15.        action: () =\> {
16.        }
17.      }
18.    \]

20.    @Builder
21.    myRouter(name: string, param?: Object) {
22.      if (name === 'NavDestinationExample') {
23.        NavDestinationExample();
24.      }
25.    }

27.    build() {
28.      Navigation(this.navPathStack) {
29.        Column() {

31.          Button('切换标题栏内间距为16vp')
32.            .onClick(() =\> {
33.              this.paddingStart = LengthMetrics.vp(16);
34.              this.paddingEnd = LengthMetrics.vp(16);
35.            })
36.            .margin({ top: 5 })

38.          Button('切换标题栏内间距为24vp')
39.            .onClick(() =\> {
40.              this.paddingStart = LengthMetrics.vp(24);
41.              this.paddingEnd = LengthMetrics.vp(24);
42.            })
43.            .margin({ top: 5 })

45.          Button('跳转')
46.            .onClick(() =\> {
47.              this.navPathStack.pushPathByName('NavDestinationExample', null);
48.            })
49.            .margin({ top: 5 })
50.        }
51.      }
52.      .titleMode(NavigationTitleMode.Mini)
53.      .title('一级页面', {
54.        paddingStart: this.paddingStart,
55.        paddingEnd: this.paddingEnd,
56.      })
57.      .menus(this.menuItems)
58.      .navDestination(this.myRouter)
59.    }
60.  }

62.  @Component
63.  export struct NavDestinationExample {
64.    @Consume('navPathStack') navPathStack: NavPathStack;
65.    @State menuItems: Array<NavigationMenuItem\> = \[
66.      {
67.        value: 'menuItem1',
68.        icon: 'resources/base/media/ic\_public\_ok.svg',
69.        action: () =\> {
70.        }
71.      }
72.    \]
73.    @State paddingStart: LengthMetrics = LengthMetrics.vp(0);
74.    @State paddingEnd: LengthMetrics = LengthMetrics.vp(0);

76.    build() {
77.      NavDestination() {
78.        Row() {
79.          Column() {

81.            Button('切换标题栏内间距为32vp')
82.              .onClick(() =\> {
83.                this.paddingStart = LengthMetrics.vp(32);
84.                this.paddingEnd = LengthMetrics.vp(32);
85.              })
86.              .margin({ top: 5 })

88.            Button('切换标题栏内间距为20vp')
89.              .onClick(() =\> {
90.                this.paddingStart = LengthMetrics.vp(20);
91.                this.paddingEnd = LengthMetrics.vp(20);
92.              })
93.              .margin({ top: 5 })
94.          }
95.          .width('100%')
96.        }
97.        .height('100%')
98.      }
99.      .hideTitleBar(false)
100.      .title('NavDestination title', {
101.        paddingStart: this.paddingStart,
102.        paddingEnd: this.paddingEnd,
103.      })
104.      .menus(this.menuItems)
105.    }
106.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114419.01504778487424544046422574441160:50001231000000:2800:2AA9895089241C471A43D0A2C4FCECA036B3232F5EED1B30399758F569871D16.gif?needInitFileName=true?needInitFileName=true)

