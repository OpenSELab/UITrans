/*\n实现一个带有上下文菜单的界面，用户可以通过长按文本区域触发上下文菜单，菜单中包含三个按钮。当用户开始拖拽时，上下文菜单会自动关闭。\n*/\n\n// xxx.ets\n@Entry\n@Component\nstruct Index {\n  // 定义一个Builder函数，用于构建上下文菜单的内容\n  @Builder MenuBuilder() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Button('Test ContextMenu1') // 第一个菜单项按钮\n      Divider().strokeWidth(2).margin(5).color(Color.Black) // 分割线，用于分隔菜单项\n      Button('Test ContextMenu2') // 第二个菜单项按钮\n      Divider().strokeWidth(2).margin(5).color(Color.Black) // 分割线，用于分隔菜单项\n      Button('Test ContextMenu3') // 第三个菜单项按钮\n    }\n    .width(200) // 设置菜单宽度\n    .height(160) // 设置菜单高度\n  }\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Column() {\n        Text("Test ContextMenu") // 显示文本，用于触发上下文菜单\n          .fontSize(20) // 设置字体大小\n          .width('100%') // 设置文本宽度为父容器的100%\n          .height(500) // 设置文本高度\n          .backgroundColor(0xAFEEEE) // 设置背景颜色\n          .textAlign(TextAlign.Center) // 设置文本居中对齐\n      }\n      .bindContextMenu(this.MenuBuilder, ResponseType.LongPress) // 绑定上下文菜单，长按触发\n      .onDragStart(() => {\n        // 拖拽时关闭菜单\n        ContextMenu.close() // 建议使用 this.getUIContext().getContextMenuController().close()\n      })\n    }\n    .width('100%') // 设置父容器宽度为屏幕的100%\n    .height('100%') // 设置父容器高度为屏幕的100%\n  }\n}