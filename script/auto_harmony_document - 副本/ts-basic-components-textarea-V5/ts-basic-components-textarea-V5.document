Title: TextArea-文本与输入-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-textarea-V5

Markdown Content:
多行文本输入框组件，当输入的文本内容超过组件宽度时会自动换行显示。

高度未设置时，组件无默认高度，自适应内容高度。宽度未设置时，默认撑满最大宽度。

说明

该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

接口
--

TextArea(value?: TextAreaOptions)

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

TextAreaOptions对象说明
-------------------

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

placeholder

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

设置无输入时的提示文本。输入内容后，提示文本不显示。

仅设置placeholder属性时，手柄依然跟随拖动，手柄松开后光标停留在文字开头位置。

text

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

设置输入框当前的文本内容。

建议通过onChange事件将状态变量与文本实时绑定，

避免组件刷新时TextArea中的文本内容异常。

从API version 10开始，该参数支持[$$](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-two-way-sync-V5)双向绑定变量。

controller8+

[TextAreaController](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-textarea-V5#textareacontroller8)

否

设置TextArea控制器。

属性
--

除支持[通用属性](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-size-V5)，还支持以下属性：

说明

[通用属性padding](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-size-V5#padding)的默认值为：

{

top: '8vp',

right: '16vp',

bottom: '8vp',

left: '16vp'

}

从API version 11开始，多行输入框可设置.width('auto')使组件宽度自适应文本宽度，自适应时组件宽度受constraintSize属性以及父容器传递的最大最小宽度限制，其余使用方式参考[尺寸设置](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-size-V5#%E5%B1%9E%E6%80%A7)。

### placeholderColor

placeholderColor(value: ResourceColor)

设置placeholder文本颜色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### placeholderFont

placeholderFont(value: Font)

设置placeholder文本样式，包括字体大小，字体粗细，字体族，字体风格。当前支持'HarmonyOS Sans'字体和[注册自定义字体](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-font-V5)。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[Font](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#font)

是

placeholder文本样式。

### textAlign

textAlign(value: TextAlign)

设置文本在输入框中的水平对齐方式。

支持TextAlign.Start、TextAlign.Center和TextAlign.End。

可通过[align](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-location-V5)属性控制文本段落在垂直方向上的位置，此组件中不可通过align属性控制文本段落在水平方向上的位置，即align属性中Alignment.TopStart、Alignment.Top、Alignment.TopEnd效果相同，控制内容在顶部，Alignment.Start、Alignment.Center、Alignment.End效果相同，控制内容垂直居中，Alignment.BottomStart、Alignment.Bottom、Alignment.BottomEnd效果相同，控制内容在底部。

当textAlign属性设置为TextAlign.JUSTIFY时，最后一行文本不参与两端对齐，为水平对齐首部效果。

从API version 11开始，textAlign可设置TextAlign.JUSTIFY

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[TextAlign](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#textalign)

是

文本在输入框中的水平对齐方式。

默认值：TextAlign.Start

### caretColor

caretColor(value: ResourceColor)

设置输入框光标颜色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

说明

从API version 12开始，此接口支持设置文本手柄颜色，光标和文本手柄颜色保持一致。

### fontColor

fontColor(value: ResourceColor)

设置字体颜色。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### fontSize

fontSize(value: number | string | Resource)

设置字体大小。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[Resource](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resource) | number | string

是

字体大小。fontSize为number类型时，使用fp单位。字体默认大小16fp。不支持设置百分比字符串。

### fontStyle

fontStyle(value: FontStyle)

设置字体样式。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[FontStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#fontstyle)

是

字体样式。

默认值：FontStyle.Normal

### fontWeight

fontWeight(value: number | FontWeight | string)

设置文本的字体粗细，设置过大可能会在不同字体下有截断。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[FontWeight](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#fontweight) | number | string

是

文本的字体粗细，number类型取值\[100, 900\]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如"400"，以及"bold"、"bolder"、"lighter"、"regular"、"medium"，分别对应FontWeight中相应的枚举值。

默认值：FontWeight.Normal

### fontFamily

fontFamily(value: string | Resource)

设置字体列表。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[Resource](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resource) | string

是

字体列表。默认字体'HarmonyOS Sans'。

应用当前支持'HarmonyOS Sans'字体和[注册自定义字体](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-font-V5)。

卡片当前仅支持'HarmonyOS Sans'字体。

### inputFilter8+

inputFilter(value: ResourceStr, error?: (value: string) =\> void)

通过正则表达式设置输入过滤器。匹配表达式的输入允许显示，不匹配的输入将被过滤。仅支持单个字符匹配，不支持字符串匹配。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

是

正则表达式。

error

(value: string) =\> void

否

正则匹配失败时，返回被过滤的内容。

### copyOption9+

copyOption(value: CopyOptions)

设置输入的文本是否可复制。设置CopyOptions.None时，当前TextArea中的文字无法被复制或剪切，仅支持粘贴。

设置CopyOptions.None时，不允许拖拽。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[CopyOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#copyoptions9)

是

输入的文本是否可复制。

默认值：CopyOptions.LocalDevice，支持设备内复制。

### maxLength10+

maxLength(value: number)

设置文本的最大输入字符数。默认不设置最大输入字符数限制。到达文本最大字符限制，将无法继续输入字符，同时边框变为红色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

number

是

文本的最大输入字符数。

### showCounter10+

showCounter(value: boolean, options?: InputCounterOptions)

设置当通过InputCounterOptions输入的字符数超过阈值时显示计数器。

参数value为true时，才能设置options，文本框开启计数下标功能，需要配合maxlength（设置最大字符限制）一起使用。字符计数器显示的效果是当前输入字符数/最大可输入字符数。

当输入字符数大于最大字符数乘百分比值时，显示字符计数器。如果用户设置计数器时不设置InputCounterOptions，那么当前输入字符数达到最大字符数时，边框和计数器下标将变为红色。用户同时设置参数value为true和InputCounterOptions，当thresholdPercentage数值在有效区间内，且输入字符数超过最大字符数时，边框和计数器下标将变为红色，框体抖动。highlightBorder设置为false，则不显示红色边框，计数器默认显示红色边框。内联模式下字符计数器不显示。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### style10+

style(value: TextContentStyle)

设置文本框多态样式，内联输入风格只支持TextAreaType.Normal类型。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### enableKeyboardOnFocus10+

enableKeyboardOnFocus(value: boolean)

设置TextArea通过点击以外的方式获焦时，是否绑定输入法。

从API version 10开始，获焦默认绑定输入法。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

boolean

是

通过点击以外的方式获焦时，是否绑定输入法。

默认值：true

selectionMenuHidden(value: boolean)

设置是否不弹出系统文本选择菜单。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

boolean

是

是否不弹出系统文本选择菜单。

设置为true时，单击输入框光标、长按输入框、双击输入框、三击输入框或者右键输入框，不弹出系统文本选择菜单。

设置为false时，弹出系统文本选择菜单。

默认值：false

### barState10+

barState(value: BarState)

设置输入框编辑态时滚动条的显示模式。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[BarState](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#barstate)

是

输入框编辑态时滚动条的显示模式。

默认值：BarState.Auto

### maxLines10+

maxLines(value: number)

配置textOverflow一起使用时，maxlines为可显示行数，超出截断；未配置textOverflow时，内联模式获焦状态下内容超出maxlines时，文本可滚动显示，内联模式非获焦状态下不生效maxlines，非内联模式按行截断。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

number

是

内联输入风格编辑态时文本可显示的最大行数。

默认值：3，非内联模式下，默认值为+∞，不限制最大行数。

取值范围：(0, +∞)

### customKeyboard10+

customKeyboard(value: CustomBuilder, options?: KeyboardOptions)

设置自定义键盘。

当设置自定义键盘时，输入框激活后不会打开系统输入法，而是加载指定的自定义组件。

自定义键盘的高度可以通过自定义组件根节点的height属性设置，宽度不可设置，使用系统默认值。

自定义键盘采用覆盖原始界面的方式呈现，当没有开启避让模式或者输入框不需要避让的场景不会对应用原始界面产生压缩或者上提。

自定义键盘无法获取焦点，但是会拦截手势事件。

默认在输入控件失去焦点时，关闭自定义键盘，开发者也可以通过[TextAreaController](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-textarea-V5#textareacontroller8).[stopEditing](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-textarea-V5#stopediting10)方法控制键盘关闭。

如果设备支持拍摄输入，设置自定义键盘后，该输入框会不支持拍摄输入。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### type11+

type(value: TextAreaType)

设置输入框类型。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[TextAreaType](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-textarea-V5#textareatype11%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

是

输入框类型。

默认值：TextAreaType.Normal

### enterKeyType11+

enterKeyType(value: EnterKeyType)

设置输入法回车键类型。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[EnterKeyType](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#enterkeytype%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

是

输入法回车键类型。

默认值：EnterKeyType.NEW\_LINE

### enableAutoFill12+

enableAutoFill(value: boolean)

设置是否启用自动填充。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

boolean

是

是否启用自动填充。

true表示启用，false表示不启用。

默认值：true

### contentType12+

contentType(contentType: ContentType)

设置自动填充类型。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### lineHeight12+

lineHeight(value: number | string | Resource)

设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小，number类型时单位为fp。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

number | string | [Resource](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resource)

是

文本的文本行高。

### decoration12+

decoration(value: TextDecorationOptions)

设置文本装饰线类型样式及其颜色。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[TextDecorationOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#textdecorationoptions12%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)

是

文本装饰线对象。

默认值：{

type: TextDecorationType.None,

color: Color.Black,

style: TextDecorationStyle.SOLID

}

### letterSpacing12+

letterSpacing(value: number | string | Resource)

设置文本字符间距。设置该值为百分比时，按默认值显示。设置该值为0时，按默认值显示。

当取值为负值时，文字会发生压缩，负值过小时会将组件内容区大小压缩为0，导致无内容显示。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

number | string | [Resource](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resource)

是

文本字符间距。

### wordBreak12+

wordBreak(value: WordBreak)

设置文本断行规则。该属性对placeholder文本无效。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[WordBreak](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#wordbreak11)

是

文本断行规则。

默认值：WordBreak.BREAK\_WORD

说明

组件不支持clip属性设置，设置该属性任意枚举值对组件文本截断无影响。

### selectedBackgroundColor12+

selectedBackgroundColor(value: ResourceColor)

设置文本选中底板颜色。如果未设置不透明度，默认为20%不透明度。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### caretStyle12+

caretStyle(value: CaretStyle)

设置光标风格。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### textIndent12+

textIndent(value: Dimension)

设置首行文本缩进。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### textOverflow12+

textOverflow(value: TextOverflow)

设置文本超长时的显示方式。

内联模式，主动配置textoverflow才会生效按maxline截断效果，不配置时，默认不截断。

文本截断是按字截断。例如，英文以单词为最小单位进行截断，若需要以字母为单位进行截断，wordBreak属性可设置为WordBreak.BREAK\_ALL。

当overflow设置为TextOverflow.None、TextOverflow.Clip、TextOverflow.Ellipsis时，需配合maxLines使用，单独设置不生效。设置TextOverflow.None与TextOverflow.Clip效果一样。

**卡片能力：** 该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[TextOverflow](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#textoverflow)

是

文本超长时的显示方式。

默认值：TextOverflow.Clip

说明

TextArea组件不支持设置TextOverflow.MARQUEE模式,当设置为TextOverflow.MARQUEE模式时 显示为TextOverflow.Clip

### minFontSize12+

minFontSize(value: number | string | Resource)

设置文本最小显示字号。

需配合[maxFontSize](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-textarea-V5#maxfontsize12)以及[maxLines](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-textarea-V5#maxlines10)或布局大小限制使用，单独设置不生效。

自适应字号生效时，fontSize设置不生效。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

number | string | [Resource](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resource)

是

文本最小显示字号。

### maxFontSize12+

maxFontSize(value: number | string | Resource)

设置文本最大显示字号。

需配合[minFontSize](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-textarea-V5#minfontsize12)以及[maxLines](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-textarea-V5#maxlines10)或布局大小限制使用，单独设置不生效。

自适应字号生效时，fontSize设置不生效。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

number | string | [Resource](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resource)

是

文本最大显示字号。

### heightAdaptivePolicy12+

heightAdaptivePolicy(value: TextHeightAdaptivePolicy)

设置文本自适应高度的方式。

当设置为TextHeightAdaptivePolicy.MAX\_LINES\_FIRST时，优先使用[maxLines](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-textarea-V5#maxlines10)属性来调整文本高度。如果使用maxLines属性的布局大小超过了布局约束，则尝试在[minFontSize](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-textarea-V5#minfontsize12)和[maxFontSize](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-textarea-V5#maxfontsize12)的范围内缩小字体以显示更多文本。

组件设置为内联输入风格，编辑态与非编辑态存在字体大小不一致情况。

当设置为TextHeightAdaptivePolicy.MIN\_FONT\_SIZE\_FIRST时，优先使用minFontSize属性来调整文本高度。如果使用minFontSize属性可以将文本布局在一行中，则尝试在minFontSize和maxFontSize的范围内增大字体并使用最大可能的字体大小。

当设置为TextHeightAdaptivePolicy.LAYOUT\_CONSTRAINT\_FIRST时，优先使用布局约束来调整文本高度。如果布局大小超过布局约束，则尝试在minFontSize和maxFontSize的范围内缩小字体以满足布局约束。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### lineSpacing12+

lineSpacing(value: LengthMetrics)

设置文本的行间距，设置值不大于0时，取默认值0。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### lineBreakStrategy12+

lineBreakStrategy(strategy: LineBreakStrategy)

设置折行规则。该属性在wordBreak不等于breakAll的时候生效，不支持连词符。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

editMenuOptions(editMenu: EditMenuOptions)

设置自定义菜单扩展项，允许用户设置扩展项的文本内容、图标、回调方法。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### enablePreviewText12+

enablePreviewText(enable: boolean)

设置是否开启输入预上屏。

预上屏内容定义为文字暂存态，目前不支持文字拦截功能，因此不触发onWillInsert、onDidInsert、onWillDelete、onDidDelete回调。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

enable

boolean

是

是否开启输入预上屏。

默认值：true

说明

该接口在CAPI场景使用时下，默认关闭。可以在工程的module.json5中配置[metadata](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/module-structure-V5#metadata%E5%AF%B9%E8%B1%A1%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84)字段控制是否启用预上屏，配置如下：

1.  "metadata": \[
2.   {
3.      "name": "can\_preview\_text",
4.      "value": "true",
5.   }
6.  \]

### onChange

onChange(callback: EditableTextOnChangeCallback)

输入内容发生变化时，触发该回调。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### onEditChange10+

onEditChange(callback: (isEditing: boolean) =\> void)

输入状态变化时，触发该回调。有光标时为编辑态，无光标时为非编辑态。isEditing为true表示正在输入。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

isEditing

boolean

是

为true表示正在输入。

### onCopy8+

onCopy(callback: (value: string) =\> void)

进行复制操作时，触发该回调。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

string

是

复制的文本内容。

### onCut8+

onCut(callback: (value: string) =\> void)

进行剪切操作时，触发该回调。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

string

是

剪切的文本内容。

### onPaste

onPaste(callback: (value: string, event: PasteEvent) =\> void)

进行粘贴操作时，触发该回调。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

string

是

粘贴的文本内容。

event11+

[PasteEvent](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#pasteevent11)

是

用户自定义的粘贴事件。

### onTextSelectionChange10+

onTextSelectionChange(callback: (selectionStart: number, selectionEnd: number) =\> void)

文本选择的位置发生变化或编辑状态下光标位置发生变化时，触发该回调。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

selectionStart

number

是

所选文本的起始位置，文字的起始位置为0。

selectionEnd

number

是

所选文本的结束位置。

### onContentScroll10+

onContentScroll(callback: (totalOffsetX: number, totalOffsetY: number) =\> void)

文本内容滚动时，触发该回调。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

totalOffsetX

number

是

文本在内容区的横坐标偏移，单位px。

totalOffsetY

number

是

文本在内容区的纵坐标偏移，单位px。

### onSubmit11+

onSubmit(callback: (enterKey: EnterKeyType) =\> void)

按下输入法回车键触发该回调。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

enterKey

[EnterKeyType](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#enterkeytype%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

是

输入法回车键类型，类型为EnterKeyType.NEW\_LINE时不触发onSubmit。

### onWillInsert12+

onWillInsert(callback: Callback<InsertValue, boolean\>)

在将要输入时，触发该回调。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

callback

Callback<[InsertValue](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-text-common-V5#insertvalue12%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E), boolean\>

是

在将要输入时调用的回调。

在返回true时，表示正常插入，返回false时，表示不插入。

在预上屏操作时，该回调不触发。

仅支持系统输入法输入的场景。

### onDidInsert12+

onDidInsert(callback: Callback<InsertValue\>)

在输入完成时，触发该回调。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

callback

Callback<[InsertValue](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-text-common-V5#insertvalue12%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)\>

是

在输入完成时调用的回调。

仅支持系统输入法输入的场景。

### onWillDelete12+

onWillDelete(callback: Callback<DeleteValue, boolean\>)

在将要删除时，触发该回调。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

callback

Callback<[DeleteValue](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-text-common-V5#deletevalue12%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E), boolean\>

是

在将要删除时调用的回调。

在返回true时，表示正常删除，返回false时，表示不删除。

在预上屏删除操作时，该回调不触发。

仅支持系统输入法输入的场景。

### onDidDelete12+

onDidDelete(callback: Callback<DeleteValue\>)

在删除完成时，触发该回调。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

callback

Callback<[DeleteValue](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-text-common-V5#deletevalue12%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)\>

是

在删除完成时调用的回调。

仅支持系统输入法输入的场景。

TextAreaController8+
--------------------

TextArea组件的控制器继承自[TextContentControllerBase](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#textcontentcontrollerbase10)。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### 导入对象

1.  controller: TextAreaController = new TextAreaController()

### constructor8+

constructor()

TextAreaController的构造函数。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### caretPosition8+

caretPosition(value: number): void

设置输入光标的位置。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

number

是

从字符串开始到光标所在位置的字符长度。

### setTextSelection10+

setTextSelection(selectionStart: number, selectionEnd: number, options?: SelectionOptions): void

组件在获焦状态下，调用该接口设置文本选择区域并高亮显示，且只有在selectionStart小于selectionEnd时，文字才会被选取、高亮显示。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

selectionStart

number

是

文本选择区域起始位置，文本框中文字的起始位置为0。

当selectionStart小于0时、按照0处理；当selectionStart大于文字最大长度时、按照文字最大长度处理。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

selectionEnd

number

是

文本选择区域结束位置。

当selectionEnd小于0时、按照0处理；当selectionEnd大于文字最大长度时、按照文字最大长度处理。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

options12+

[SelectionOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#selectionoptions12%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)

否

选中文字时的配置。

默认值：MenuPolicy.DEFAULT

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

说明

如果selectionMenuHidden被赋值为true或设备为2in1时，即使options被赋值为MenuPolicy.SHOW，调用setTextSelection也不弹出菜单。

如果选中的文本含有emoji表情时，表情的起始位置包含在设置的文本选中区域内就会被选中。

### stopEditing10+

stopEditing(): void

退出编辑态。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

TextAreaType11+枚举说明
-------------------

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

值

描述

NORMAL

0

基本输入模式。

支持输入数字、字母、下划线、空格、特殊字符。

NUMBER

2

纯数字输入模式。

PHONE\_NUMBER

3

电话号码输入模式。

支持输入数字、空格、+ 、-、\*、#、(、)，长度不限。

EMAIL

5

邮箱地址输入模式。

支持数字，字母，下划线、小数点、!、#、$、%、&、'、\*、+、-、/、=、?、^、\`、{、|、}、~，以及@字符（只能存在一个@字符）。

NUMBER\_DECIMAL12+

12

带小数点的数字输入模式。

支持数字，小数点（只能存在一个小数点）。

URL12+

13

带URL的输入模式。

ContentType12+枚举说明
------------------

自动填充类型。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

值

描述

USER\_NAME

0

【用户名】在已启用密码保险箱的情况下，支持用户名的自动保存和自动填充。

PASSWORD

1

【密码】在已启用密码保险箱的情况下，支持密码的自动保存和自动填充。

NEW\_PASSWORD

2

【新密码】在已启用密码保险箱的情况下，支持自动生成新密码。

FULL\_STREET\_ADDRESS

3

【详细地址】在已启用情景化自动填充的情况下，支持详细地址的自动保存和自动填充。

HOUSE\_NUMBER

4

【门牌号】在已启用情景化自动填充的情况下，支持门牌号的自动保存和自动填充。

DISTRICT\_ADDRESS

5

【区/县】在已启用情景化自动填充的情况下，支持区/县的自动保存和自动填充。

CITY\_ADDRESS

6

【市】在已启用情景化自动填充的情况下，支持市的自动保存和自动填充。

PROVINCE\_ADDRESS

7

【省】在已启用情景化自动填充的情况下，支持省的自动保存和自动填充。

COUNTRY\_ADDRESS

8

【国家】在已启用情景化自动填充的情况下，支持国家的自动保存和自动填充。

PERSON\_FULL\_NAME

9

【姓名】在已启用情景化自动填充的情况下，支持姓名的自动保存和自动填充。

PERSON\_LAST\_NAME

10

【姓氏】在已启用情景化自动填充的情况下，支持姓氏的自动保存和自动填充。

PERSON\_FIRST\_NAME

11

【名字】在已启用情景化自动填充的情况下，支持名字的自动保存和自动填充。

PHONE\_NUMBER

12

【手机号码】在已启用情景化自动填充的情况下，支持手机号码的自动保存和自动填充。

PHONE\_COUNTRY\_CODE

13

【国家代码】在已启用情景化自动填充的情况下，支持国家代码的自动保存和自动填充。

FULL\_PHONE\_NUMBER

14

【包含国家代码的手机号码】在已启用情景化自动填充的情况下，支持包含国家代码的手机号码的自动保存和自动填充。

EMAIL\_ADDRESS

15

【邮箱地址】在已启用情景化自动填充的情况下，支持邮箱地址的自动保存和自动填充。

BANK\_CARD\_NUMBER

16

【银行卡号】在已启用情景化自动填充的情况下，支持银行卡号的自动保存和自动填充。

ID\_CARD\_NUMBER

17

【身份证号】在已启用情景化自动填充的情况下，支持身份证号的自动保存和自动填充。

NICKNAME

23

【昵称】在已启用情景化自动填充的情况下，支持昵称的自动保存和自动填充。

DETAIL\_INFO\_WITHOUT\_STREET

24

【无街道地址】在已启用情景化自动填充的情况下，支持无街道地址的自动保存和自动填充。

FORMAT\_ADDRESS

25

【标准地址】在已启用情景化自动填充的情况下，支持标准地址的自动保存和自动填充。

示例
--

### 示例1

TextArea基本使用示例。

2.  @Entry
3.  @Component
4.  struct TextAreaExample {
5.    @State text: string = ''
6.    @State positionInfo: CaretOffset = { index: 0, x: 0, y: 0 }
7.    controller: TextAreaController = new TextAreaController()

9.    build() {
10.      Column() {
11.        TextArea({
12.          text: this.text,
13.          placeholder: 'The text area can hold an unlimited amount of text. input your word...',
14.          controller: this.controller
15.        })
16.          .placeholderFont({ size: 16, weight: 400 })
17.          .width(336)
18.          .height(56)
19.          .margin(20)
20.          .fontSize(16)
21.          .fontColor('#182431')
22.          .backgroundColor('#FFFFFF')
23.          .onChange((value: string) =\> {
24.            this.text = value
25.          })
26.        Text(this.text)
27.        Button('Set caretPosition 1')
28.          .backgroundColor('#007DFF')
29.          .margin(15)
30.          .onClick(() =\> {

32.            this.controller.caretPosition(1)
33.          })
34.        Button('Get CaretOffset')
35.          .backgroundColor('#007DFF')
36.          .margin(15)
37.          .onClick(() =\> {
38.            this.positionInfo = this.controller.getCaretOffset()
39.          })
40.      }.width('100%').height('100%').backgroundColor('#F1F3F5')
41.    }
42.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114434.99733880523188827879490470556064:50001231000000:2800:C1450EFD75B36E68F71F0C84D15481D6ADE25498EB8D2DE027F9453991883ED4.gif?needInitFileName=true?needInitFileName=true)

### 示例2

maxLength、showCounter属性接口使用示例。

2.  @Entry
3.  @Component
4.  struct TextAreaExample {
5.    @State text: string = 'test'
6.    @State counterVisible: boolean = false
7.    @State maxNumber: number = -1
8.    controller: TextAreaController = new TextAreaController()

10.    build() {
11.      Column() {
12.        TextArea({
13.          text: this.text,
14.          placeholder: 'The text area can hold an unlimited amount of text. input your word...',
15.          controller: this.controller
16.        })
17.          .placeholderFont({ size: 16, weight: 400 })
18.          .width(336)
19.          .height(56)
20.          .margin(20)
21.          .fontSize(16)
22.          .fontColor('#182431')
23.          .maxLength(4)
24.          .showCounter(true)
25.          .backgroundColor('#FFFFFF')
26.          .onChange((value: string) =\> {
27.            this.text = value
28.          })
29.      }.width('100%').height('100%').backgroundColor('#F1F3F5')
30.    }
31.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114434.22871319113119055892168391482375:50001231000000:2800:350D81EC0191FA72B1520EA00A644985C8F01C88E07CDACFFB8632B4E18CDBFF.png?needInitFileName=true?needInitFileName=true)

### 示例3

TextArea绑定自定义键盘使用示例。

2.  @Entry
3.  @Component
4.  struct TextAreaExample {
5.    controller: TextAreaController = new TextAreaController()
6.    @State inputValue: string = ""

9.    @Builder CustomKeyboardBuilder() {
10.      Column() {
11.        Button('x').onClick(() =\> {

13.          this.controller.stopEditing()
14.        })
15.        Grid() {
16.          ForEach(\[1, 2, 3, 4, 5, 6, 7, 8, 9, '\*', 0, '#'\], (item: number | string) =\> {
17.            GridItem() {
18.              Button(item + "")
19.                .width(110).onClick(() =\> {
20.                this.inputValue += item
21.              })
22.            }
23.          })
24.        }.maxCount(3).columnsGap(10).rowsGap(10).padding(5)
25.      }.backgroundColor(Color.Gray)
26.    }

28.    build() {
29.      Column() {
30.        TextArea({ controller: this.controller, text: this.inputValue})

32.          .customKeyboard(this.CustomKeyboardBuilder()).margin(10).border({ width: 1 })
33.          .height(200)
34.      }
35.    }
36.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114434.72219796142254851730463706356040:50001231000000:2800:F092D377BBE49C1AAEC202460F7F131B7BF500DF066C7C03FF5C4F97AC504D4C.png?needInitFileName=true?needInitFileName=true)

### 示例4

TextArea计数器使用示例。

2.  @Entry
3.  @Component
4.  struct TextAreaExample {
5.    @State text: string = ''
6.    controller: TextAreaController = new TextAreaController()

8.    build() {
9.      Column() {
10.        TextArea({ text: this.text, controller: this.controller })
11.          .placeholderFont({ size: 16, weight: 400 })
12.          .width(336)
13.          .height(56)
14.          .maxLength(6)
15.          .showCounter(true, { thresholdPercentage: 50, highlightBorder: true })

19.          .onChange((value: string) =\> {
20.            this.text = value
21.          })
22.      }.width('100%').height('100%').backgroundColor('#F1F3F5')
23.    }
24.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114434.07819097944741521555303609460126:50001231000000:2800:1B80C8759FAFCB006E174F5FC266A9DC62ADFE7219A17F885B9185447DC45145.jpg?needInitFileName=true?needInitFileName=true)

### 示例5

enterKeyType属性接口使用示例。

2.  @Entry
3.  @Component
4.  struct TextInputExample {
5.    @State Text: string = ''
6.    @State enterTypes: Array<EnterKeyType\> = \[EnterKeyType.Go, EnterKeyType.Search, EnterKeyType.Send, EnterKeyType.Done, EnterKeyType.Next, EnterKeyType.PREVIOUS, EnterKeyType.NEW\_LINE\]
7.    @State index: number = 0
8.    build() {
9.      Column({ space: 20 }) {
10.        TextArea({ placeholder: '请输入用户名', text: this.Text })
11.          .width(380)
12.          .enterKeyType(this.enterTypes\[this.index\])
13.          .onChange((value: string) =\> {
14.            this.Text = value
15.          })
16.          .onSubmit((enterKey: EnterKeyType) =\> {
17.            console.log("trigger area onsubmit" + enterKey);
18.          })
19.        Button('改变EnterKeyType').onClick(() =\> {
20.          this.index = (this.index + 1) % this.enterTypes.length;
21.        })

23.      }.width('100%')
24.    }
25.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114434.85815774981410724986076749584635:50001231000000:2800:19BAF77F807988ADDE3A7DD87C60B80CEE779900D4775F22E8866507CEFB97A3.gif?needInitFileName=true?needInitFileName=true)

### 示例6

示例展示设置不同wordBreak属性的TextArea样式。

2.  @Entry
3.  @Component
4.  struct TextAreaExample {
5.    build() {
6.      Column() {
7.        Text("属性WordBreakType为NORMAL的样式：").fontSize(16).fontColor(0xFF0000)
8.        TextArea({
9.          text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'
10.        })
11.          .fontSize(16)
12.          .border({ width: 1 })
13.          .wordBreak(WordBreak.NORMAL)
14.        Text("英文文本，属性WordBreakType为BREAK\_ALL的样式：").fontSize(16).fontColor(0xFF0000)
15.        TextArea({
16.          text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'
17.        })
18.          .fontSize(16)
19.          .border({ width: 1 })
20.          .wordBreak(WordBreak.BREAK\_ALL)
21.        Text("中文文本，属性WordBreakType为BREAK\_ALL的样式：").fontSize(16).fontColor(0xFF0000)
22.        TextArea({
23.          text: '多行文本输入框组件，当输入的文本内容超过组件宽度时会自动换行显示。\\n高度未设置时，组件无默认高度，自适应内容高度。宽度未设置时，默认撑满最大宽度。'
24.        })
25.          .fontSize(16)
26.          .border({ width: 1 })
27.          .wordBreak(WordBreak.BREAK\_ALL)
28.        Text("属性WordBreakType为BREAK\_WORD的样式：").fontSize(16).fontColor(0xFF0000)
29.        TextArea({
30.          text: 'This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.'
31.        })
32.          .fontSize(16)
33.          .border({ width: 1 })
34.          .wordBreak(WordBreak.BREAK\_WORD)
35.      }
36.    }
37.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114434.31779289399217156441732917642931:50001231000000:2800:7E3EF42421465BFF701B5F66CC7719D03BCA69C3EC330E347264AD65542E31B0.jpeg?needInitFileName=true?needInitFileName=true)

### 示例7

该示例实现了使用lineHeight设置文本的文本行高，使用letterSpacing设置文本字符间距，使用decoration设置文本装饰线样式。

2.  @Entry
3.  @Component
4.  struct TextAreaExample {
5.    build() {
6.      Row() {
7.        Column() {
8.          Text('lineHeight').fontSize(9).fontColor(0xCCCCCC)
9.          TextArea({text: 'lineHeight unset'})
10.            .border({ width: 1 }).padding(10).margin(5)
11.          TextArea({text: 'lineHeight 15'})
12.            .border({ width: 1 }).padding(10).margin(5).lineHeight(15)
13.          TextArea({text: 'lineHeight 30'})
14.            .border({ width: 1 }).padding(10).margin(5).lineHeight(30)

16.          Text('letterSpacing').fontSize(9).fontColor(0xCCCCCC)
17.          TextArea({text: 'letterSpacing 0'})
18.            .border({ width: 1 }).padding(5).margin(5).letterSpacing(0)
19.          TextArea({text: 'letterSpacing 3'})
20.            .border({ width: 1 }).padding(5).margin(5).letterSpacing(3)
21.          TextArea({text: 'letterSpacing -1'})
22.            .border({ width: 1 }).padding(5).margin(5).letterSpacing(-1)

24.          Text('decoration').fontSize(9).fontColor(0xCCCCCC)
25.          TextArea({text: 'LineThrough, Red\\nsecond line'})
26.            .border({ width: 1 }).padding(5).margin(5)
27.            .decoration({type: TextDecorationType.LineThrough, color: Color.Red})
28.          TextArea({text: 'Overline, Red, DOTTED\\nsecond line'})
29.            .border({ width: 1 }).padding(5).margin(5)
30.            .decoration({type: TextDecorationType.Overline, color: Color.Red, style: TextDecorationStyle.DOTTED})
31.          TextArea({text: 'Underline, Red, WAVY\\nsecond line'})
32.            .border({ width: 1 }).padding(5).margin(5)
33.            .decoration({type: TextDecorationType.Underline, color: Color.Red, style: TextDecorationStyle.WAVY})
34.        }.height('90%')
35.      }
36.      .width('90%')
37.      .margin(10)
38.    }
39.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114434.56428181856341114230772485897948:50001231000000:2800:FD60D1FC2905638814FC4026915A2C6DBAA8C5BC782D875E56F89B44B3861F32.png?needInitFileName=true?needInitFileName=true)

### 示例8

fontFeature属性使用示例，对比了fontFeature使用ss01属性和不使用ss01属性的效果。

1.  @Entry
2.  @Component
3.  struct textArea {
4.    @State text1: string = 'This is ss01 on : 0123456789'
5.    @State text2: string = 'This is ss01 off: 0123456789'

7.    build() {
8.      Column(){
9.        TextArea({text: this.text1})
10.          .fontSize(20)
11.          .margin({top:200})
12.          .fontFeature("\\"ss01\\" on")
13.        TextArea({text : this.text2})
14.          .margin({top:10})
15.          .fontSize(20)
16.          .fontFeature("\\"ss01\\" off")
17.      }
18.      .width("90%")
19.      .margin("5%")
20.    }
21.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114434.66811228927857990387489254435748:50001231000000:2800:45EF5FA4180421576FC106CE77A268B24AD04B73058AAD0105EC6E983198199D.png?needInitFileName=true?needInitFileName=true)

### 示例9

自定义键盘弹出发生避让示例

1.  @Entry
2.  @Component
3.  struct TextAreaExample {
4.    controller: TextAreaController = new TextAreaController()
5.    @State inputValue: string = ""
6.    @State height1:string|number = '80%'
7.    @State height2:number = 100
8.    @State supportAvoidance:boolean = true;

11.    @Builder CustomKeyboardBuilder() {
12.      Column() {
13.        Row(){
14.          Button('x').onClick(() =\> {

16.            this.controller.stopEditing()
17.          }).margin(10)
18.        }
19.        Grid() {
20.          ForEach(\[1, 2, 3, 4, 5, 6, 7, 8, 9, '\*', 0, '#'\], (item: number | string) =\> {
21.            GridItem() {
22.              Button(item + "")
23.                .width(110).onClick(() =\> {
24.                this.inputValue += item
25.              })
26.            }
27.          })
28.        }.maxCount(3).columnsGap(10).rowsGap(10).padding(5)
29.      }.backgroundColor(Color.Gray)
30.    }

32.    build() {
33.      Column() {
34.        Row(){
35.          Button("20%")
36.            .fontSize(24)
37.            .onClick(()=\>{
38.              this.height1 = "20%"
39.            })
40.          Button("80%")
41.            .fontSize(24)
42.            .margin({left:20})
43.            .onClick(()=\>{
44.              this.height1 = "80%"
45.            })
46.        }
47.        .justifyContent(FlexAlign.Center)
48.        .alignItems(VerticalAlign.Bottom)
49.        .height(this.height1)
50.        .width("100%")
51.        .padding({bottom:50})
52.        TextArea({ controller: this.controller, text: this.inputValue})
53.          .height(100)

55.          .customKeyboard(this.CustomKeyboardBuilder(),{ supportAvoidance: this.supportAvoidance }).margin(10).border({ width: 1 })

57.      }
58.    }
59.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114434.38983472587467689026066048861928:50001231000000:2800:51C28E46D5E0E004304D1288883B16AA95D03453B67AC61543E5FFBFB9C9A9CF.gif?needInitFileName=true?needInitFileName=true)

### 示例10

该示例实现了使用minFontSize，maxFontSize及heightAdaptivePolicy设置文本自适应字号。

2.  @Entry
3.  @Component
4.  struct TextAreaExample {
5.    build() {
6.      Row() {
7.        Column() {
8.          Text('heightAdaptivePolicy').fontSize(9).fontColor(0xCCCCCC)
9.          TextArea({text: 'This is the text with the height adaptive policy set'})
10.            .width('80%').height(90).borderWidth(1).margin(1)
11.            .minFontSize(4)
12.            .maxFontSize(40)
13.            .maxLines(3)
14.            .heightAdaptivePolicy(TextHeightAdaptivePolicy.MAX\_LINES\_FIRST)
15.          TextArea({text: 'This is the text with the height adaptive policy set'})
16.            .width('80%').height(90).borderWidth(1).margin(1)
17.            .minFontSize(4)
18.            .maxFontSize(40)
19.            .maxLines(3)
20.            .heightAdaptivePolicy(TextHeightAdaptivePolicy.MIN\_FONT\_SIZE\_FIRST)
21.          TextArea({text: 'This is the text with the height adaptive policy set'})
22.            .width('80%').height(90).borderWidth(1).margin(1)
23.            .minFontSize(4)
24.            .maxFontSize(40)
25.            .maxLines(3)
26.            .heightAdaptivePolicy(TextHeightAdaptivePolicy.LAYOUT\_CONSTRAINT\_FIRST)
27.        }.height('90%')
28.      }
29.      .width('90%')
30.      .margin(10)
31.    }
32.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114435.92561457483919804234914875365150:50001231000000:2800:88B9E6B49B75AAAC8B33FDD8DC422D9A3F4043CE04622725D660F11418332B23.png?needInitFileName=true?needInitFileName=true)

### 示例11

lineSpacing使用示例，对比了不设置lineSpacing与lineSpacing设置不同单位的效果。

1.  import { LengthMetrics } from '@kit.ArkUI'

3.  @Entry
4.  @Component
5.  struct LineSpacingExample {
6.    build() {
7.        Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {
8.          Text('TextArea lineSpacing.').fontSize(9).fontColor(0xCCCCCC)
9.          TextArea({ placeholder: 'This is the TextArea with no lineSpacing set.' })
10.            .fontSize(12)
11.          TextArea({ placeholder: 'This is the TextArea with lineSpacing set to 20\_px.' })
12.            .fontSize(12)
13.            .lineSpacing(LengthMetrics.px(20))
14.          TextArea({ placeholder: 'This is the TextArea with lineSpacing set to 20\_vp.' })
15.            .fontSize(12)
16.            .lineSpacing(LengthMetrics.vp(20))
17.          TextArea({ placeholder: 'This is the TextArea with lineSpacing set to 20\_fp.' })
18.            .fontSize(12)
19.            .lineSpacing(LengthMetrics.fp(20))
20.          TextArea({ placeholder: 'This is the TextArea with lineSpacing set to 20\_lpx.' })
21.            .fontSize(12)
22.            .lineSpacing(LengthMetrics.lpx(20))
23.          TextArea({ placeholder: 'This is the TextArea with lineSpacing set to 100%.' })
24.            .fontSize(12)
25.            .lineSpacing(LengthMetrics.percent(1))
26.        }.height(600).width(350).padding({ left: 35, right: 35, top: 35 })
27.    }
28.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114435.95057015988506416295107395307016:50001231000000:2800:82CFF91DF5B7D6F3DC6FDC0CD2D91A9E78EC8C07C90DAC6064E0AEABCB5F69B4.png?needInitFileName=true?needInitFileName=true)

### 示例12

自动填充示例

2.  @Entry
3.  @Component
4.  struct TextAreaExample {
5.    @State text: string = ''

7.    build() {
8.      Column() {

10.        TextArea({ placeholder: 'input your email...' })
11.          .width('95%')
12.          .height(40)
13.          .margin(20)
14.          .contentType(ContentType.EMAIL\_ADDRESS)
15.          .enableAutoFill(true)
16.          .maxLength(20)

18.        TextArea({ placeholder: 'input your street address...' })
19.          .width('95%')
20.          .height(40)
21.          .margin(20)
22.          .contentType(ContentType.FULL\_STREET\_ADDRESS)
23.          .enableAutoFill(true)
24.          .maxLength(20)
25.      }.width('100%').height('100%').backgroundColor('#F1F3F5')
26.    }
27.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114435.74645640342215424353617638616700:50001231000000:2800:D1807E4EBD16DBE1968B3EF7C8A62081D69D9EDB47ABC5FB8B2A4997E9F301EA.png?needInitFileName=true?needInitFileName=true)

### 示例13

lineBreakStrategy使用示例，对比了不设置lineBreakStrategy与lineBreakStrategy设置不同挡位的效果。

1.  @Entry
2.  @Component
3.  struct TextExample1 {
4.    @State message1: string = "They can be classified as built-in components–those directly provided by the ArkUI framework and custom components – those defined by developers" +
5.      "The built-in components include buttons radio buttonsprogress indicators and text You can set the rendering effectof thesecomponents in method chaining mode," +
6.      "page components are divided into independent UI units to implementindependent creation development and reuse of different units on pages making pages more engineering-oriented.";

8.    build() {
9.      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start }) {
10.        Text('LineBreakStrategy.GREEDY').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)
11.        TextArea({text: this.message1})
12.          .fontSize(12)
13.          .border({ width: 1 })
14.          .padding(10)
15.          .width('100%')
16.          .lineBreakStrategy(LineBreakStrategy.GREEDY)
17.        Text('LineBreakStrategy.HIGH\_QUALITY').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)
18.        TextArea({text: this.message1})
19.          .fontSize(12)
20.          .border({ width: 1 })
21.          .padding(10)
22.          .width('100%')
23.          .lineBreakStrategy(LineBreakStrategy.HIGH\_QUALITY)
24.        Text('LineBreakStrategy.BALANCED').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)
25.        TextArea({text: this.message1})
26.          .fontSize(12)
27.          .border({ width: 1 })
28.          .padding(10)
29.          .width('100%')
30.          .lineBreakStrategy(LineBreakStrategy.BALANCED)
31.      }.height(700).width(370).padding({ left: 35, right: 35, top: 35 })
32.    }
33.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114435.10214144751532537541574503692779:50001231000000:2800:9773226B22224E72C6CC49A287F6962534969F17C5CA6FB3DFDF4D46921A83DD.png?needInitFileName=true?needInitFileName=true)

### 示例14

该实例展示输入框支持插入和删除回调。

2.  @Entry
3.  @Component
4.  struct TextAreaExample {
5.    @State insertValue: string = ""
6.    @State deleteValue: string = ""
7.    @State insertOffset: number = 0
8.    @State deleteOffset: number = 0
9.    @State deleteDirection: number = 0

11.    build() {
12.      Row() {
13.        Column() {
14.          TextArea({ text: "TextArea支持插入回调文本" })
15.            .width(300)
16.            .height(60)
17.            .onWillInsert((info: InsertValue) =\> {
18.              this.insertValue = info.insertValue
19.              return true;
20.            })
21.            .onDidInsert((info: InsertValue) =\> {
22.              this.insertOffset = info.insertOffset
23.            })

25.          Text("insertValue:" + this.insertValue + "  insertOffset:" + this.insertOffset).height(30)

27.          TextArea({ text: "TextArea支持删除回调文本b" })
28.            .width(300)
29.            .height(60)
30.            .onWillDelete((info: DeleteValue) =\> {
31.              this.deleteValue = info.deleteValue
32.              info.direction
33.              return true;
34.            })
35.            .onDidDelete((info: DeleteValue) =\> {
36.              this.deleteOffset = info.deleteOffset
37.              this.deleteDirection = info.direction
38.            })

40.          Text("deleteValue:" + this.deleteValue + "  deleteOffset:" + this.deleteOffset).height(30)
41.          Text("deleteDirection:" + (this.deleteDirection == 0 ? "BACKWARD" : "FORWARD")).height(30)

43.        }.width('100%')
44.      }
45.      .height('100%')
46.    }
47.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114435.97787110290791928907965924754379:50001231000000:2800:51D5BDCB99B37C2C4A29F6B85E8618EDF24EA74AA6D06896725E428FA6C4CBE8.png?needInitFileName=true?needInitFileName=true)

### 示例15

editMenuOptions使用示例，展示设置自定义菜单扩展项的文本内容、图标、回调方法。

2.  @Entry
3.  @Component
4.  struct TextAreaExample {
5.    @State text: string = 'TextArea editMenuOptions'

7.    onCreateMenu(menuItems: Array<TextMenuItem\>) {
8.      menuItems.forEach((value, index) =\> {
9.        value.icon = $r('app.media.startIcon')
10.        if (value.id.equals(TextMenuItemId.COPY)) {
11.          value.content = "复制change"
12.        }
13.        if (value.id.equals(TextMenuItemId.SELECT\_ALL)) {
14.          value.content = "全选change"
15.        }
16.      })
17.      let item1: TextMenuItem = {
18.        content: 'custom1',
19.        icon: $r('app.media.startIcon'),
20.        id: TextMenuItemId.of('custom1'),
21.      }
22.      let item2: TextMenuItem = {
23.        content: 'custom2',
24.        id: TextMenuItemId.of('custom2'),
25.        icon: $r('app.media.startIcon'),
26.      }
27.      menuItems.push(item1)
28.      menuItems.unshift(item2)
29.      return menuItems
30.    }

32.    build() {
33.      Column() {
34.        TextArea({ text: this.text })
35.          .width('95%')
36.          .height(56)
37.          .editMenuOptions({
38.            onCreateMenu: this.onCreateMenu, onMenuItemClick: (menuItem: TextMenuItem, textRange: TextRange) =\> {
39.              if (menuItem.id.equals(TextMenuItemId.of("custom2"))) {
40.                console.log("拦截 id: custom2 start:" + textRange.start + "; end:" + textRange.end)
41.                return true;
42.              }
43.              if (menuItem.id.equals(TextMenuItemId.COPY)) {
44.                console.log("拦截 COPY start:" + textRange.start + "; end:" + textRange.end)
45.                return true;
46.              }
47.              if (menuItem.id.equals(TextMenuItemId.SELECT\_ALL)) {
48.                console.log("不拦截 SELECT\_ALL start:" + textRange.start + "; end:" + textRange.end)
49.                return false;
50.              }
51.              return false;
52.            }
53.          })
54.          .margin({ top: 100 })
55.      }
56.      .width("90%")
57.      .margin("5%")
58.    }
59.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114435.74771874143211289682691453020672:50001231000000:2800:79A4D1733F89087D2723C3584E58516785241556B72B7F75A2544D31A34C9966.gif?needInitFileName=true?needInitFileName=true)
