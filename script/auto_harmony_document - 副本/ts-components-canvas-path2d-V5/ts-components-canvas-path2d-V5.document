Title: Path2D-画布绘制-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-components-canvas-path2d-V5

Markdown Content:
路径对象，支持通过对象的接口进行路径的描述，并通过Canvas的stroke接口或者fill接口进行绘制。

说明

从 API Version 8 开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

接口
--

Path2D(unit?: LengthMetricsUnit)

构造一个空的Path2D对象。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

Path2D(description: string, unit?: LengthMetricsUnit)

使用符合SVG路径描述规范的路径字符串构造一个Path2D对象。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

addPath
-------

addPath(path: Path2D, transform?: Matrix2D): void

将另一个路径添加到当前的路径对象中。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数 | 类型 | 必填 | 默认值 | 描述 |
| --- | --- | --- | --- | --- |
| path | [Path2D](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-components-canvas-path2d-V5) | 是 | \- | 需要添加到当前路径的路径对象，路径单位：px。 |
| transform | [Matrix2D](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-components-canvas-matrix2d-V5) | 否 | null | 新增路径的变换矩阵对象。 |

**示例：**

2.  @Entry
3.  @Component
4.  struct AddPath {
5.    private settings: RenderingContextSettings = new RenderingContextSettings(true)
6.    private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)

8.    private path2Da: Path2D = new Path2D("M250 150 L150 350 L350 350 Z")
9.    private path2Db: Path2D = new Path2D()

11.    build() {
12.      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {
13.        Canvas(this.context)
14.          .width('100%')
15.          .height('100%')
16.          .backgroundColor('#ffff00')
17.          .onReady(() =>{
18.            this.path2Db.addPath(this.path2Da)
19.            this.context.stroke(this.path2Db)
20.          })
21.      }
22.      .width('100%')
23.      .height('100%')
24.    }
25.  }

![Image 1](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240829194704.81870880704963541285249029700877:50001231000000:2800:6DFBA5AE401899B5BB9E137840BE04C0897993661A831067CC84A95BD144C061.png?needInitFileName=true?needInitFileName=true)

closePath
---------

closePath(): void

将路径的当前点移回到路径的起点，当前点到起点间画一条直线。如果形状已经闭合或只有一个点，则此功能不执行任何操作。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**示例：**

2.  @Entry
3.  @Component
4.  struct ClosePath {
5.    private settings: RenderingContextSettings = new RenderingContextSettings(true)
6.    private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)
7.    private path2Db: Path2D = new Path2D()

9.    build() {
10.      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {
11.        Canvas(this.context)
12.          .width('100%')
13.          .height('100%')
14.          .backgroundColor('#ffff00')
15.          .onReady(() =>{
16.            this.path2Db.moveTo(200, 100)
17.            this.path2Db.lineTo(300, 100)
18.            this.path2Db.lineTo(200, 200)
19.            this.path2Db.closePath()
20.            this.context.stroke(this.path2Db)
21.          })
22.      }
23.      .width('100%')
24.      .height('100%')
25.    }
26.  }

![Image 2](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240829194704.48718813554223681444110289270033:50001231000000:2800:32560DD57179749F6700EABF19DB800F558F237D6E51F95565ADFCC243802293.png?needInitFileName=true?needInitFileName=true)

moveTo
------

moveTo(x: number, y: number): void

将路径的当前坐标点移动到目标点，移动过程中不绘制线条。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数 | 类型 | 必填 | 默认值 | 描述 |
| --- | --- | --- | --- | --- |
| x | number | 是 | 0 | 目标点X轴坐标。
默认单位：vp。

 |
| y | number | 是 | 0 | 目标点Y轴坐标。

默认单位：vp。

 |

**示例：**

2.  @Entry
3.  @Component
4.  struct MoveTo {
5.    private settings: RenderingContextSettings = new RenderingContextSettings(true)
6.    private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)
7.    private path2Db: Path2D = new Path2D()

9.    build() {
10.      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {
11.        Canvas(this.context)
12.          .width('100%')
13.          .height('100%')
14.          .backgroundColor('#ffff00')
15.          .onReady(() =>{
16.            this.path2Db.moveTo(50, 100)
17.            this.path2Db.lineTo(250, 100)
18.            this.path2Db.lineTo(150, 200)
19.            this.path2Db.closePath()
20.            this.context.stroke(this.path2Db)
21.          })
22.      }
23.      .width('100%')
24.      .height('100%')
25.    }
26.  }

![Image 3](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240829194704.64896529409835107729356407845991:50001231000000:2800:3B31FA0F66889DB7E5C39512397A160DE5D5DB225C1776A6BA48F01BF1DD1BE4.png?needInitFileName=true?needInitFileName=true)

lineTo
------

lineTo(x: number, y: number): void

从当前点绘制一条直线到目标点。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数 | 类型 | 必填 | 默认值 | 描述 |
| --- | --- | --- | --- | --- |
| x | number | 是 | 0 | 目标点X轴坐标。
默认单位：vp。

 |
| y | number | 是 | 0 | 目标点Y轴坐标。

默认单位：vp。

 |

**示例：**

2.  @Entry
3.  @Component
4.  struct LineTo {
5.    private settings: RenderingContextSettings = new RenderingContextSettings(true)
6.    private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)
7.    private path2Db: Path2D = new Path2D()

9.    build() {
10.      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {
11.        Canvas(this.context)
12.          .width('100%')
13.          .height('100%')
14.          .backgroundColor('#ffff00')
15.          .onReady(() =>{
16.            this.path2Db.moveTo(100, 100)
17.            this.path2Db.lineTo(100, 200)
18.            this.path2Db.lineTo(200, 200)
19.            this.path2Db.lineTo(200, 100)
20.            this.path2Db.closePath()
21.            this.context.stroke(this.path2Db)
22.          })
23.      }
24.      .width('100%')
25.      .height('100%')
26.    }
27.  }

![Image 4](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240829194704.30565311557127821676135853030160:50001231000000:2800:6C0CA9EA0B69071B0C887CF2AA7FAD51346147D23F857830951D8A577C1CC87C.png?needInitFileName=true?needInitFileName=true)

bezierCurveTo
-------------

bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void

创建三次贝赛尔曲线的路径。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数 | 类型 | 必填 | 默认值 | 描述 |
| --- | --- | --- | --- | --- |
| cp1x | number | 是 | 0 | 第一个贝塞尔参数的x坐标值。
默认单位：vp。

 |
| cp1y | number | 是 | 0 | 第一个贝塞尔参数的y坐标值。

默认单位：vp。

 |
| cp2x | number | 是 | 0 | 第二个贝塞尔参数的x坐标值。

默认单位：vp。

 |
| cp2y | number | 是 | 0 | 第二个贝塞尔参数的y坐标值。

默认单位：vp。

 |
| x | number | 是 | 0 | 路径结束时的x坐标值。

默认单位：vp。

 |
| y | number | 是 | 0 | 路径结束时的y坐标值。

默认单位：vp。

 |

**示例：**

2.  @Entry
3.  @Component
4.  struct BezierCurveTo {
5.    private settings: RenderingContextSettings = new RenderingContextSettings(true)
6.    private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)
7.    private path2Db: Path2D = new Path2D()

9.    build() {
10.      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {
11.        Canvas(this.context)
12.          .width('100%')
13.          .height('100%')
14.          .backgroundColor('#ffff00')
15.          .onReady(() =>{
16.            this.path2Db.moveTo(10, 10)
17.            this.path2Db.bezierCurveTo(20, 100, 200, 100, 200, 20)
18.            this.context.stroke(this.path2Db)
19.          })
20.      }
21.      .width('100%')
22.      .height('100%')
23.    }
24.  }

![Image 5](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240829194704.77177709634492966406599848080609:50001231000000:2800:02921E332D4145691060C5806BFE4C42AD48EFB93FD059FE741691BC8AE617C4.png?needInitFileName=true?needInitFileName=true)

quadraticCurveTo
----------------

quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void

创建二次贝赛尔曲线的路径。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数 | 类型 | 必填 | 默认值 | 描述 |
| --- | --- | --- | --- | --- |
| cpx | number | 是 | 0 | 贝塞尔参数的x坐标值。
默认单位：vp。

 |
| cpy | number | 是 | 0 | 贝塞尔参数的y坐标值。

默认单位：vp。

 |
| x | number | 是 | 0 | 路径结束时的x坐标值。

默认单位：vp。

 |
| y | number | 是 | 0 | 路径结束时的y坐标值。

默认单位：vp。

 |

**示例：**

2.  @Entry
3.  @Component
4.  struct QuadraticCurveTo {
5.    private settings: RenderingContextSettings = new RenderingContextSettings(true)
6.    private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)
7.    private path2Db: Path2D = new Path2D()

9.    build() {
10.      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {
11.        Canvas(this.context)
12.          .width('100%')
13.          .height('100%')
14.          .backgroundColor('#ffff00')
15.          .onReady(() =>{
16.            this.path2Db.moveTo(10, 10)
17.            this.path2Db.quadraticCurveTo(100, 100, 200, 20)
18.            this.context.stroke(this.path2Db)
19.        })
20.      }
21.      .width('100%')
22.      .height('100%')
23.    }
24.  }

![Image 6](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240829194704.42339017596508237058376005643349:50001231000000:2800:CBD4453CE3B6BB1AFF67E1A61FF8A62CF35E90AF094F7CE870CB28B2A52E7869.png?needInitFileName=true?needInitFileName=true)

arc
---

arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): void

绘制弧线路径。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数 | 类型 | 必填 | 默认值 | 描述 |
| --- | --- | --- | --- | --- |
| x | number | 是 | 0 | 弧线圆心的x坐标值。
默认单位：vp。

 |
| y | number | 是 | 0 | 弧线圆心的y坐标值。

默认单位：vp。

 |
| radius | number | 是 | 0 | 弧线的圆半径。

默认单位：vp。

 |
| startAngle | number | 是 | 0 | 弧线的起始弧度。 |
| endAngle | number | 是 | 0 | 弧线的终止弧度。 |
| counterclockwise | boolean | 否 | false | 是否逆时针绘制圆弧。 |

**示例：**

2.  @Entry
3.  @Component
4.  struct Arc {
5.    private settings: RenderingContextSettings = new RenderingContextSettings(true)
6.    private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)
7.    private path2Db: Path2D = new Path2D()

9.    build() {
10.      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {
11.        Canvas(this.context)
12.          .width('100%')
13.          .height('100%')
14.          .backgroundColor('#ffff00')
15.          .onReady(() =>{
16.            this.path2Db.arc(100, 75, 50, 0, 6.28)
17.            this.context.stroke(this.path2Db)
18.          })
19.      }
20.      .width('100%')
21.      .height('100%')
22.    }
23.  }

![Image 7](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240829194704.96607347738676725300292742303692:50001231000000:2800:B3CF8DA16306CA7BB3EB7F0E80CF060A7E6EFAE9B2C6C9B68773645184831AAC.png?needInitFileName=true?needInitFileName=true)

arcTo
-----

arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void

依据圆弧经过的点和圆弧半径创建圆弧路径。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数 | 类型 | 必填 | 默认值 | 描述 |
| --- | --- | --- | --- | --- |
| x1 | number | 是 | 0 | 圆弧经过的第一个点的x坐标值。
默认单位：vp。

 |
| y1 | number | 是 | 0 | 圆弧经过的第一个点的y坐标值。

默认单位：vp。

 |
| x2 | number | 是 | 0 | 圆弧经过的第二个点的x坐标值。

默认单位：vp。

 |
| y2 | number | 是 | 0 | 圆弧经过的第二个点的y坐标值。

默认单位：vp。

 |
| radius | number | 是 | 0 | 圆弧的圆半径值。

默认单位：vp。

 |

**示例：**

2.  @Entry
3.  @Component
4.  struct ArcTo {
5.    private settings: RenderingContextSettings = new RenderingContextSettings(true)
6.    private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)
7.    private path2Db: Path2D = new Path2D()

9.    build() {
10.      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {
11.        Canvas(this.context)
12.          .width('100%')
13.          .height('100%')
14.          .backgroundColor('#ffff00')
15.          .onReady(() =>{
16.            this.path2Db.arcTo(150, 20, 150, 70, 50)
17.            this.context.stroke(this.path2Db)
18.          })
19.      }
20.      .width('100%')
21.      .height('100%')
22.    }
23.  }

![Image 8](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240829194704.36512007891726706522334758429301:50001231000000:2800:02333CA62637A4AECBB8DEEE59FD38B87E996DEBFE202D03D8FBD3CB93AD3EF6.png?needInitFileName=true?needInitFileName=true)

ellipse
-------

ellipse(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, counterclockwise?: boolean): void

在规定的矩形区域绘制一个椭圆。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数 | 类型 | 必填 | 默认值 | 描述 |
| --- | --- | --- | --- | --- |
| x | number | 是 | 0 | 椭圆圆心的x轴坐标。
默认单位：vp。

 |
| y | number | 是 | 0 | 椭圆圆心的y轴坐标。

默认单位：vp。

 |
| radiusX | number | 是 | 0 | 椭圆x轴的半径长度。

默认单位：vp。

 |
| radiusY | number | 是 | 0 | 椭圆y轴的半径长度。

默认单位：vp。

 |
| rotation | number | 是 | 0 | 椭圆的旋转角度。

单位为弧度。

 |
| startAngle | number | 是 | 0 | 椭圆绘制的起始点角度，以弧度表示。 |
| endAngle | number | 是 | 0 | 椭圆绘制的结束点角度，以弧度表示。 |
| counterclockwise | boolean | 否 | false | 是否以逆时针方向绘制椭圆。

true:逆时针方向绘制椭圆。

false:顺时针方向绘制椭圆。

 |

**示例：**

2.  @Entry
3.  @Component
4.  struct CanvasExample {
5.    private settings: RenderingContextSettings = new RenderingContextSettings(true)
6.    private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)
7.    private path2Db: Path2D = new Path2D()

9.    build() {
10.      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {
11.        Canvas(this.context)
12.          .width('100%')
13.          .height('100%')
14.          .backgroundColor('#ffff00')
15.          .onReady(() =>{
16.            this.path2Db.ellipse(200, 200, 50, 100, 0, Math.PI \* 1, Math.PI\*2)
17.            this.context.stroke(this.path2Db)
18.          })
19.      }
20.      .width('100%')
21.      .height('100%')
22.    }
23.  }

![Image 9](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240829194704.96165148660092617905259071056869:50001231000000:2800:CAB5EC41547BBF1A85F1130D34AFC2EB2614D174D2DD29E22E361039793B2CBF.png?needInitFileName=true?needInitFileName=true)

rect
----

rect(x: number, y: number, w: number, h: number): void

创建矩形路径。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数 | 类型 | 必填 | 默认值 | 描述 |
| --- | --- | --- | --- | --- |
| x | number | 是 | 0 | 指定矩形的左上角x坐标值。
默认单位：vp。

 |
| y | number | 是 | 0 | 指定矩形的左上角y坐标值。

默认单位：vp。

 |
| w | number | 是 | 0 | 指定矩形的宽度。

默认单位：vp。

 |
| h | number | 是 | 0 | 指定矩形的高度。

默认单位：vp。

 |

**示例：**

2.  @Entry
3.  @Component
4.  struct CanvasExample {
5.    private settings: RenderingContextSettings = new RenderingContextSettings(true)
6.    private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)
7.    private path2Db: Path2D = new Path2D()

9.    build() {
10.      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {
11.        Canvas(this.context)
12.          .width('100%')
13.          .height('100%')
14.          .backgroundColor('#ffff00')
15.          .onReady(() =>{
16.            this.path2Db.rect(20, 20, 100, 100);
17.            this.context.stroke(this.path2Db)
18.          })
19.      }
20.      .width('100%')
21.      .height('100%')
22.    }
23.  }

![Image 10](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240829194704.93725856641236652075689966053277:50001231000000:2800:9BC12B9469582761A6F974EEDCE56168E42E9C0D39261CB8BADDBFCC4EC3A817.png?needInitFileName=true?needInitFileName=true)
