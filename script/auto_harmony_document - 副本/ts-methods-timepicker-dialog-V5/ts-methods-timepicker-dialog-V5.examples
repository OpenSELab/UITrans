/*\n实现一个时间选择对话框示例，用户点击按钮后弹出时间选择对话框，支持24小时制，并自定义对话框的文本样式、按钮样式以及各种回调事件。\n*/\n\n@Entry\n@Component\nstruct TimePickerDialogExample {\n  // 初始选择时间为2020年12月25日 08:30:00\n  private selectTime: Date = new Date('2020-12-25T08:30:00')\n\n  build() {\n    Column() {\n      // 创建一个按钮，点击后弹出时间选择对话框\n      Button("TimePickerDialog 24小时制")\n        .margin(20) // 设置按钮的外边距\n        .onClick(() => {\n          // 显示时间选择对话框\n          TimePickerDialog.show({\n            selected: this.selectTime, // 初始选择的时间\n            useMilitaryTime: True, // 使用24小时制\n            disappearTextStyle: { color: Color.Red, font: { size: 15, weight: FontWeight.Lighter } }, // 对话框消失时的文本样式\n            textStyle: { color: Color.Black, font: { size: 20, weight: FontWeight.Normal } }, // 普通文本样式\n            selectedTextStyle: { color: Color.Blue, font: { size: 30, weight: FontWeight.Bolder } }, // 选中时间的文本样式\n            acceptButtonStyle: { \n              type: ButtonType.Normal, \n              style: ButtonStyleMode.NORMAL, \n              role: ButtonRole.NORMAL, \n              fontColor: Color.Red, \n              fontSize: '26fp', \n              fontWeight: FontWeight.Bolder, \n              fontStyle: FontStyle.Normal, \n              fontFamily: 'sans-serif', \n              backgroundColor: '#80834511', \n              borderRadius: 20 \n            }, // 确认按钮的样式\n            cancelButtonStyle: { \n              type: ButtonType.Normal, \n              style: ButtonStyleMode.NORMAL, \n              role: ButtonRole.NORMAL, \n              fontColor: Color.Blue, \n              fontSize: '16fp', \n              fontWeight: FontWeight.Normal, \n              fontStyle: FontStyle.Italic, \n              fontFamily: 'sans-serif', \n              backgroundColor: '#50182431', \n              borderRadius: 10 \n            }, // 取消按钮的样式\n            onAccept: (value: TimePickerResult) => {\n              // 用户确认选择的时间\n              if (value.hour != undefined && value.minute != undefined) {\n                this.selectTime.setHours(value.hour, value.minute)\n                console.info("TimePickerDialog:onAccept()" + JSON.stringify(value))\n              }\n            },\n            onCancel: () => {\n              // 用户取消选择\n              console.info("TimePickerDialog:onCancel()")\n            },\n            onChange: (value: TimePickerResult) => {\n              // 用户改变选择的时间\n              console.info("TimePickerDialog:onChange()" + JSON.stringify(value))\n            },\n            onDidAppear: () => {\n              // 对话框已经显示\n              console.info("TimePickerDialog:onDidAppear()")\n            },\n            onDidDisappear: () => {\n              // 对话框已经消失\n              console.info("TimePickerDialog:onDidDisappear()")\n            },\n            onWillAppear: () => {\n              // 对话框即将显示\n              console.info("TimePickerDialog:onWillAppear()")\n            },\n            onWillDisappear: () => {\n              // 对话框即将消失\n              console.info("TimePickerDialog:onWillDisappear()")\n            }\n          })\n        })\n    }.width('100%') // 设置列的宽度为100%\n  }\n}


/*\n实现一个时间选择对话框示例，包含两个按钮，分别触发12小时制和24小时制的时间选择对话框。对话框支持自定义文本样式，并提供多种回调函数用于处理用户交互事件。\n*/\n\n@Entry\n@Component\nstruct TimePickerDialogExample {\n  // 初始选择时间为2020年12月25日 08:30:00\n  private selectTime: Date = new Date('2020-12-25T08:30:00')\n\n  build() {\n    Column() {\n      // 按钮触发12小时制时间选择对话框\n      Button("TimePickerDialog 12小时制")\n        .margin(20)\n        .onClick(() => {\n          TimePickerDialog.show({\n            selected: this.selectTime, // 初始选择时间\n            disappearTextStyle: { color: Color.Red, font: { size: 15, weight: FontWeight.Lighter } }, // 对话框消失时的文本样式\n            textStyle: { color: Color.Black, font: { size: 20, weight: FontWeight.Normal } }, // 普通文本样式\n            selectedTextStyle: { color: Color.Blue, font: { size: 30, weight: FontWeight.Bolder } }, // 选中时间的文本样式\n            onAccept: (value: TimePickerResult) => {\n              // 设置selectTime为按下确定按钮时的时间，这样当弹窗再次弹出时显示选中的为上一次确定的时间\n              if (value.hour != undefined && value.minute != undefined) {\n                this.selectTime.setHours(value.hour, value.minute)\n                console.info("TimePickerDialog:onAccept()" + JSON.stringify(value))\n              }\n            },\n            onCancel: () => {\n              console.info("TimePickerDialog:onCancel()")\n            },\n            onChange: (value: TimePickerResult) => {\n              console.info("TimePickerDialog:onChange()" + JSON.stringify(value))\n            },\n            onDidAppear: () => {\n              console.info("TimePickerDialog:onDidAppear()")\n            },\n            onDidDisappear: () => {\n              console.info("TimePickerDialog:onDidDisappear()")\n            },\n            onWillAppear: () => {\n              console.info("TimePickerDialog:onWillAppear()")\n            },\n            onWillDisappear: () => {\n              console.info("TimePickerDialog:onWillDisappear()")\n            }\n          })\n        })\n\n      // 按钮触发24小时制时间选择对话框\n      Button("TimePickerDialog 24小时制")\n        .margin(20)\n        .onClick(() => {\n          TimePickerDialog.show({\n            selected: this.selectTime, // 初始选择时间\n            useMilitaryTime: True, // 使用24小时制\n            disappearTextStyle: { color: Color.Red, font: { size: 15, weight: FontWeight.Lighter } }, // 对话框消失时的文本样式\n            textStyle: { color: Color.Black, font: { size: 20, weight: FontWeight.Normal } }, // 普通文本样式\n            selectedTextStyle: { color: Color.Blue, font: { size: 30, weight: FontWeight.Bolder } }, // 选中时间的文本样式\n            onAccept: (value: TimePickerResult) => {\n              if (value.hour != undefined && value.minute != undefined) {\n                this.selectTime.setHours(value.hour, value.minute)\n                console.info("TimePickerDialog:onAccept()" + JSON.stringify(value))\n              }\n            },\n            onCancel: () => {\n              console.info("TimePickerDialog:onCancel()")\n            },\n            onChange: (value: TimePickerResult) => {\n              console.info("TimePickerDialog:onChange()" + JSON.stringify(value))\n            },\n            onDidAppear: () => {\n              console.info("TimePickerDialog:onDidAppear()")\n            },\n            onDidDisappear: () => {\n              console.info("TimePickerDialog:onDidDisappear()")\n            },\n            onWillAppear: () => {\n              console.info("TimePickerDialog:onWillAppear()")\n            },\n            onWillDisappear: () => {\n              console.info("TimePickerDialog:onWillDisappear()")\n            }\n          })\n        })\n    }.width('100%')\n  }\n}