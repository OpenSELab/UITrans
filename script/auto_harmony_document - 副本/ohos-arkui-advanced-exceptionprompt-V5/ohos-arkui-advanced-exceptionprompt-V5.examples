/*\n实现一个异常提示组件，该组件显示一个带有图标、提示文本和操作按钮的提示框。用户可以点击提示文本或操作按钮来触发相应的事件。\n*/\n\n// 导入必要的模块和类型\nimport { ExceptionPrompt, PromptOptions, MarginType } from '@kit.ArkUI';\n\n// 使用@Entry和@Component装饰器定义一个入口组件\n@Entry\n@Component\nstruct Index {\n  // 使用@State装饰器定义一个状态变量options，用于配置异常提示组件的属性\n  @State options: PromptOptions = {\n    // 设置提示框的图标，使用系统资源中的图标\n    icon: $r('sys.media.ohos_ic_public_fail'),\n    // 设置提示框的提示文本\n    tip: '异常提示',\n    // 设置提示框的边距类型，使用默认边距\n    marginType: MarginType.DEFAULT_MARGIN,\n    // 设置提示框的操作按钮文本\n    actionText: '设置网络',\n    // 设置提示框的上边距\n    marginTop: 80,\n    // 设置提示框是否显示\n    isShown: true\n  };\n\n  // 构建组件的UI结构\n  build() {\n    Column() {\n      // 使用ExceptionPrompt组件，传入配置选项和事件处理函数\n      ExceptionPrompt({\n        // 传入配置选项\n        options: this.options,\n        // 设置提示文本点击事件的处理函数\n        onTipClick: () => {\n          // 提示文本点击事件的处理逻辑\n        },\n        // 设置操作按钮点击事件的处理函数\n        onActionTextClick: () => {\n          // 操作按钮点击事件的处理逻辑\n        },\n      })\n    }\n  }\n}


/*\n实现一个自定义对话框组件，包含异常提示、文本输入框、取消和确认按钮。主界面包含一个按钮，点击按钮后弹出自定义对话框。对话框中包含异常提示组件、文本输入框和两个按钮（取消和确认）。点击取消按钮关闭对话框并执行取消回调，点击确认按钮将输入框内容传递给外部状态并关闭对话框，执行确认回调。\n*/\n\n// 导入必要的模块和类型\nimport { ExceptionPrompt, PromptOptions, MarginType } from '@kit.ArkUI'\n\n// 定义自定义对话框组件\n@CustomDialog\nstruct CustomDialogExample {\n  // 双向绑定文本值\n  @Link textValue: string\n  // 双向绑定输入值\n  @Link inputValue: string\n  // 定义异常提示的选项\n  @State options: PromptOptions = {\n    icon: $r('app.media.ic_public_fail'), // 异常提示图标\n    tip: '异常提示！', // 提示文本\n    marginType: MarginType.DEFAULT_MARGIN, // 边距类型\n    actionText: '设置', // 操作文本\n    marginTop: 5, // 顶部边距\n    isShown: true // 是否显示\n  }\n  // 取消按钮回调\n  cancel: () => void = () => {}\n  // 确认按钮回调\n  confirm: () => void = () => {}\n  // 对话框控制器\n  controller: CustomDialogController\n\n  // 构建对话框内容\n  build() {\n    Column() {\n      // 异常提示组件\n      ExceptionPrompt({\n        options: this.options, // 异常提示选项\n      })\n      // 文本输入框\n      TextInput({ placeholder: '', text: this.textValue })\n        .margin({ top: 70 }) // 顶部边距\n        .height(60) // 高度\n        .width('90%') // 宽度\n        .onChange((value: string) => { // 输入框内容变化回调\n          this.textValue = value // 更新文本值\n        })\n      // 提示文本\n      Text('Whether to change a text?')\n        .fontSize(16) // 字体大小\n        .margin({ bottom: 10 }) // 底部边距\n      // 按钮布局\n      Flex({ justifyContent: FlexAlign.SpaceAround }) {\n        // 取消按钮\n        Button('cancel')\n          .onClick(() => { // 点击事件\n            this.controller.close() // 关闭对话框\n            this.cancel() // 执行取消回调\n          })\n          .backgroundColor(0xffffff) // 背景颜色\n          .fontColor(Color.Black) // 字体颜色\n        // 确认按钮\n        Button('confirm')\n          .onClick(() => { // 点击事件\n            this.inputValue = this.textValue // 更新输入值\n            this.controller.close() // 关闭对话框\n            this.confirm() // 执行确认回调\n          })\n          .backgroundColor(0xffffff) // 背景颜色\n          .fontColor(Color.Red) // 字体颜色\n      }\n      .margin({ bottom: 10 }) // 底部边距\n    }\n  }\n}\n\n// 主界面组件\n@Entry\n@Component\nstruct Index1 {\n  // 按钮文本\n  @State ButtonText: string = ''\n  // 地图高度\n  @State MAP_HEIGHT: string = '30%'\n  // 动画持续时间\n  @State duration: number = 2500\n  // 提示文本\n  @State tips: string = ''\n  // 操作文本\n  @State actionText: string = ''\n  // 文本输入控制器\n  controller: TextInputController = new TextInputController()\n  // 取消回调\n  cancel: () => void = () => {}\n  // 确认回调\n  confirm: () => void = () => {}\n  // 异常提示选项\n  @State options: PromptOptions = {\n    icon: $r('app.media.ic_public_fail'), // 异常提示图标\n    tip: '', // 提示文本\n    marginType: MarginType.DEFAULT_MARGIN, // 边距类型\n    actionText: '', // 操作文本\n    marginTop: 80, // 顶部边距\n    isShown: true // 是否显示\n  }\n  // 文本值\n  @State textValue: string = ''\n  // 输入值\n  @State inputValue: string = 'click me'\n  // 对话框控制器\n  dialogController: CustomDialogController | undefined = new CustomDialogController({\n    builder: CustomDialogExample({\n      cancel: this.onCancel, // 取消回调\n      confirm: this.onAccept, // 确认回调\n      textValue: $textValue, // 双向绑定文本值\n      inputValue: $inputValue // 双向绑定输入值\n    }),\n    cancel: this.existApp, // 空白区域点击回调\n    autoCancel: true, // 自动取消\n    alignment: DialogAlignment.Bottom, // 对齐方式\n    offset: { dx: 0, dy: -20 }, // 偏移量\n    gridCount: 4, // 网格数\n    customStyle: false // 自定义样式\n  })\n\n  // 组件即将消失时的处理\n  aboutToDisappear() {\n    this.dialogController = undefined // 清空对话框控制器\n  }\n\n  // 取消回调\n  onCancel() {\n    console.info('Callback when the first button is clicked')\n  }\n\n  // 确认回调\n  onAccept() {\n    console.info('Callback when the second button is clicked')\n  }\n\n  // 空白区域点击回调\n  existApp() {\n    console.info('Click the callback in the blank area')\n  }\n\n  // 构建主界面内容\n  build() {\n    Column() {\n      // 按钮\n      Button('Click Me')\n        .width('30%') // 宽度\n        .margin({ top: 420 }) // 顶部边距\n        .zIndex(999) // 层级\n        .onClick(() => { // 点击事件\n          if (this.dialogController != undefined) {\n            this.dialogController.open() // 打开对话框\n          }\n        })\n    }\n    .height('100%') // 高度\n    .width('100%') // 宽度\n  }\n}