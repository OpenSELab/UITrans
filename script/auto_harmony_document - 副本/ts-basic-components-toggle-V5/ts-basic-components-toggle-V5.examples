/*\n实现一个包含Toggle组件的页面，Toggle组件的类型为Switch，启用状态，并应用自定义样式。当Toggle状态改变时，输出当前状态到控制台。\n*/\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column({ space: 50 }) { // 创建一个垂直布局的列，组件间距为50\n      Toggle({ type: ToggleType.Switch }) // 创建一个Switch类型的Toggle组件\n        .enabled(true) // 设置组件为启用状态\n        .contentModifier(new MySwitchStyle(Color.Yellow, '灯')) // 应用自定义样式，样式类为MySwitchStyle，颜色为黄色，内容为“灯”\n        .onChange((isOn: boolean) => {\n          console.info('Switch Log:' + isOn); // 当Toggle状态改变时，输出当前状态到控制台\n        })\n    }.height('100%').width('100%') // 设置列的高度和宽度为100%\n  }\n}


/*\n实现一个包含两个Switch类型Toggle组件的示例，展示如何使用Toggle组件及其自定义样式。组件初始状态分别为关闭和开启，当状态改变时，会在控制台输出当前状态。\n*/\n\n@Entry\n@Component\nstruct ToggleExample {\n  build() {\n    Column({ space: 10 }) {\n      Text('type: Switch').fontSize(12).fontColor(0xcccccc).width('90%')\n      // 使用Flex布局，使两个Switch类型的Toggle组件在水平方向上均匀分布\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) {\n        // 第一个Switch类型的Toggle组件，初始状态为关闭\n        Toggle({ type: ToggleType.Switch, isOn: false })\n          .selectedColor('#007DFF') // 设置选中状态的颜色\n          .switchStyle({\n            pointRadius: 15, // 设置开关点的半径\n            trackBorderRadius: 10, // 设置轨道边框的半径\n            pointColor: '#D2B48C', // 设置开关点的颜色\n            unselectedColor: Color.Pink // 设置未选中状态的颜色\n          })\n          .onChange((isOn: boolean) => {\n            console.info('Component status:' + isOn) // 当状态改变时，输出当前状态\n          })\n\n        // 第二个Switch类型的Toggle组件，初始状态为开启\n        Toggle({ type: ToggleType.Switch, isOn: true })\n          .selectedColor('#007DFF') // 设置选中状态的颜色\n          .switchStyle({\n            pointRadius: 15, // 设置开关点的半径\n            trackBorderRadius: 10, // 设置轨道边框的半径\n            pointColor: '#D2B48C', // 设置开关点的颜色\n            unselectedColor: Color.Pink // 设置未选中状态的颜色\n          })\n          .onChange((isOn: boolean) => {\n            console.info('Component status:' + isOn) // 当状态改变时，输出当前状态\n          })\n      }\n    }.width('100%').padding(24) // 设置列的宽度和内边距\n  }\n}


/*\n实现一个包含三种不同类型Toggle组件的示例页面，每种类型包含两个Toggle组件，分别展示不同的初始状态。页面使用Flex布局使Toggle组件在水平方向上均匀分布。每个Toggle组件的状态改变时，会在控制台输出当前状态。\n*/\n\n@Entry\n@Component\nstruct ToggleExample {\n  build() {\n    Column({ space: 10 }) {\n      // 设置文本样式，用于描述下面的Toggle组件类型\n      Text('type: Switch').fontSize(12).fontColor(0xcccccc).width('90%')\n      \n      // 使用Flex布局，使两个Switch类型的Toggle组件在水平方向上均匀分布\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) {\n        // 第一个Switch类型的Toggle组件，初始状态为关闭\n        Toggle({ type: ToggleType.Switch, isOn: false })\n          .selectedColor('#007DFF') // 设置选中状态的颜色\n          .switchPointColor('#FFFFFF') // 设置开关点颜色\n          .onChange((isOn: boolean) => {\n            console.info('Component status:' + isOn) // 当状态改变时，输出当前状态\n          })\n\n        // 第二个Switch类型的Toggle组件，初始状态为开启\n        Toggle({ type: ToggleType.Switch, isOn: true })\n          .selectedColor('#007DFF') // 设置选中状态的颜色\n          .switchPointColor('#FFFFFF') // 设置开关点颜色\n          .onChange((isOn: boolean) => {\n            console.info('Component status:' + isOn) // 当状态改变时，输出当前状态\n          })\n      }\n\n      // 设置文本样式，用于描述下面的Toggle组件类型\n      Text('type: Checkbox').fontSize(12).fontColor(0xcccccc).width('90%')\n      \n      // 使用Flex布局，使两个Checkbox类型的Toggle组件在水平方向上均匀分布\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) {\n        // 第一个Checkbox类型的Toggle组件，初始状态为关闭\n        Toggle({ type: ToggleType.Checkbox, isOn: false })\n          .size({ width: 20, height: 20 }) // 设置组件的大小\n          .selectedColor('#007DFF') // 设置选中状态的颜色\n          .onChange((isOn: boolean) => {\n            console.info('Component status:' + isOn) // 当状态改变时，输出当前状态\n          })\n\n        // 第二个Checkbox类型的Toggle组件，初始状态为开启\n        Toggle({ type: ToggleType.Checkbox, isOn: true })\n          .size({ width: 20, height: 20 }) // 设置组件的大小\n          .selectedColor('#007DFF') // 设置选中状态的颜色\n          .onChange((isOn: boolean) => {\n            console.info('Component status:' + isOn) // 当状态改变时，输出当前状态\n          })\n      }\n\n      // 设置文本样式，用于描述下面的Toggle组件类型\n      Text('type: Button').fontSize(12).fontColor(0xcccccc).width('90%')\n      \n      // 使用Flex布局，使两个Button类型的Toggle组件在水平方向上均匀分布\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) {\n        // 第一个Button类型的Toggle组件，初始状态为关闭\n        Toggle({ type: ToggleType.Button, isOn: false }) {\n          Text('status button').fontColor('#182431').fontSize(12) // 设置按钮上的文本\n        }.width(106) // 设置组件的宽度\n        .selectedColor('rgba(0,125,255,0.20)') // 设置选中状态的颜色\n        .onChange((isOn: boolean) => {\n          console.info('Component status:' + isOn) // 当状态改变时，输出当前状态\n        })\n\n        // 第二个Button类型的Toggle组件，初始状态为开启\n        Toggle({ type: ToggleType.Button, isOn: true }) {\n          Text('status button').fontColor('#182431').fontSize(12) // 设置按钮上的文本\n        }.width(106) // 设置组件的宽度\n        .selectedColor('rgba(0,125,255,0.20)') // 设置选中状态的颜色\n        .onChange((isOn: boolean) => {\n          console.info('Component status:' + isOn) // 当状态改变时，输出当前状态\n        })\n      }\n    }.width('100%').padding(24) // 设置列的宽度和内边距\n  }\n}