/*\n实现一个具有折叠和悬停功能的界面布局。上半屏显示一个视频区域，下半屏堆叠显示视频标题和视频栏。通过FolderStack组件实现折叠和悬停效果，并监听折叠状态和悬停状态的变化。\n*/\n\n@Entry\n@Component\nstruct Index {\n  @State len_wid: number = 480 // 定义一个状态变量，表示长度和宽度\n  @State w: string = "40%" // 定义一个状态变量，表示宽度百分比\n\n  build() {\n    Column() {\n      // 使用FolderStack组件，将指定id的组件悬停到上半屏，其余组件堆叠在下半屏\n      FolderStack({ upperItems: ["upperitemsId"] }) {\n        // 此Column会自动上移到上半屏\n        Column() {\n          Text("video zone") // 显示文本“video zone”\n            .height("100%") // 设置高度为100%\n            .width("100%") // 设置宽度为100%\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n            .fontSize(25) // 设置字体大小为25\n        }\n        .backgroundColor(Color.Pink) // 设置背景颜色为粉色\n        .width("100%") // 设置宽度为100%\n        .height("100%") // 设置高度为100%\n        .id("upperitemsId") // 设置组件的id为“upperitemsId”\n\n        // 下列两个Column堆叠在下半屏区域\n        Column() {\n          Text("video title") // 显示文本“video title”\n            .width("100%") // 设置宽度为100%\n            .height(50) // 设置高度为50\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n            .backgroundColor(Color.Red) // 设置背景颜色为红色\n            .fontSize(25) // 设置字体大小为25\n        }\n        .width("100%") // 设置宽度为100%\n        .height("100%") // 设置高度为100%\n        .justifyContent(FlexAlign.Start) // 设置内容对齐方式为顶部对齐\n\n        Column() {\n          Text("video bar") // 显示文本“video bar”\n            .width("100%") // 设置宽度为100%\n            .height(50) // 设置高度为50\n            .textAlign(TextAlign.Center) // 设置文本居中对齐\n            .backgroundColor(Color.Red) // 设置背景颜色为红色\n            .fontSize(25) // 设置字体大小为25\n        }\n        .width("100%") // 设置宽度为100%\n        .height("100%") // 设置高度为100%\n        .justifyContent(FlexAlign.End) // 设置内容对齐方式为底部对齐\n      }\n      .backgroundColor(Color.Yellow) // 设置背景颜色为黄色\n      .enableAnimation(true) // 启用动画效果\n      .autoHalfFold(true) // 启用自动半折叠功能\n      .onFolderStateChange((msg) => { // 监听折叠状态变化\n        if (msg.foldStatus === FoldStatus.FOLD_STATUS_EXPANDED) {\n          console.info("The device is currently in the expanded state") // 设备处于展开状态\n        } else if (msg.foldStatus === FoldStatus.FOLD_STATUS_HALF_FOLDED) {\n          console.info("The device is currently in the half folded state") // 设备处于半折叠状态\n        } else {\n          // .............\n        }\n      })\n      .onHoverStatusChange((msg) => { // 监听悬停状态变化\n        console.log('this foldStatus:' + msg.foldStatus); // 输出当前折叠状态\n        console.log('this isHoverMode:' + msg.isHoverMode); // 输出当前是否为悬停模式\n        console.log('this appRotation:' + msg.appRotation); // 输出当前应用旋转状态\n        console.log('this windowStatusType:' + msg.windowStatusType); // 输出当前窗口状态类型\n      })\n      .alignContent(Alignment.Bottom) // 设置内容对齐方式为底部对齐\n      .height("100%") // 设置高度为100%\n      .width("100%") // 设置宽度为100%\n      .borderWidth(1) // 设置边框宽度为1\n      .backgroundColor(Color.Yellow) // 设置背景颜色为黄色\n    }\n    .height("100%") // 设置高度为100%\n    .width("100%") // 设置宽度为100%\n    .borderWidth(1) // 设置边框宽度为1\n    .backgroundColor(Color.Pink) // 设置背景颜色为粉色\n    .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM]) // 扩展安全区域，包括系统底部安全区域\n  }\n}