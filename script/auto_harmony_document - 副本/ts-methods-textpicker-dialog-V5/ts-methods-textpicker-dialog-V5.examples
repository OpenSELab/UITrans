/*\n实现一个文本选择对话框示例，用户点击按钮后弹出对话框，对话框中显示一个文本选项列表。用户可以选择其中一个选项，点击确定后，选中的文本会显示在按钮上。对话框提供了多种回调函数，用于处理对话框的生命周期事件。\n*/\n\n@Entry\n@Component\nstruct TextPickerDialogExample {\n  // 定义选中的索引，初始值为0\n  private select: number | number[] = 0\n  // 定义文本选项数组\n  private fruits: string[] = ['apple1', 'orange2', 'peach3', 'grape4', 'banana5']\n  // 定义状态变量，用于显示选中的文本\n  @State v: string = ''\n\n  build() {\n    Row() {\n      Column() {\n        // 创建一个按钮，按钮文本显示当前选中的文本\n        Button("TextPickerDialog:" + this.v)\n          .margin(20)\n          .onClick(() => {\n            // 显示文本选择对话框\n            TextPickerDialog.show({\n              // 设置对话框的选项范围\n              range: this.fruits,\n              // 设置初始选中的索引\n              selected: this.select,\n              // 设置对话框消失时的文本样式\n              disappearTextStyle: {color: Color.Red, font: {size: 15, weight: FontWeight.Lighter}},\n              // 设置对话框中文本的默认样式\n              textStyle: {color: Color.Black, font: {size: 20, weight: FontWeight.Normal}},\n              // 设置选中项的文本样式\n              selectedTextStyle: {color: Color.Blue, font: {size: 30, weight: FontWeight.Bolder}},\n              // 点击确定按钮时的回调函数\n              onAccept: (value: TextPickerResult) => {\n                // 设置select为按下确定按钮时候的选中项index\n                this.select = value.index\n                console.log(this.select + '')\n                // 点击确定后，被选到的文本数据展示到页面\n                this.v = value.value as string\n                console.info("TextPickerDialog:onAccept()" + JSON.stringify(value))\n              },\n              // 点击取消按钮时的回调函数\n              onCancel: () => {\n                console.info("TextPickerDialog:onCancel()")\n              },\n              // 选项改变时的回调函数\n              onChange: (value: TextPickerResult) => {\n                console.info("TextPickerDialog:onChange()" + JSON.stringify(value))\n              },\n              // 对话框出现时的回调函数\n              onDidAppear: () => {\n                console.info("TextPickerDialog:onDidAppear()")\n              },\n              // 对话框消失时的回调函数\n              onDidDisappear: () => {\n                console.info("TextPickerDialog:onDidDisappear()")\n              },\n              // 对话框即将出现时的回调函数\n              onWillAppear: () => {\n                console.info("TextPickerDialog:onWillAppear()")\n              },\n              // 对话框即将消失时的回调函数\n              onWillDisappear: () => {\n                console.info("TextPickerDialog:onWillDisappear()")\n              }\n            })\n          })\n      }.width('100%')\n    }.height('100%')\n  }\n}


/*\n实现一个文本选择对话框示例，用户可以通过点击按钮打开对话框，选择一个文本项，并在页面上显示选中的文本。对话框支持自定义样式和回调函数，用于处理用户的选择操作。\n*/\n\n@Entry\n@Component\nstruct TextPickerDialogExample {\n  // 定义选择的索引或索引数组，初始值为0\n  private select: number | number[] = 0\n  // 定义文本选择列表的内容\n  private fruits: string[] = ['apple1', 'orange2', 'peach3', 'grape4', 'banana5']\n  // 定义状态变量v，用于存储选中的文本\n  @State v: string = ''\n\n  build() {\n    Row() {\n      Column() {\n        // 创建一个按钮，按钮文本显示当前选中的文本\n        Button("TextPickerDialog:" + this.v)\n          .margin(20)\n          .onClick(() => {\n            // 显示文本选择对话框\n            TextPickerDialog.show({\n              // 设置文本选择列表的范围\n              range: this.fruits,\n              // 设置初始选中的项目\n              selected: this.select,\n              // 设置对话框消失时的文本样式\n              disappearTextStyle: {color: Color.Red, font: {size: 15, weight: FontWeight.Lighter}},\n              // 设置对话框中文本的默认样式\n              textStyle: {color: Color.Black, font: {size: 20, weight: FontWeight.Normal}},\n              // 设置选中项目的文本样式\n              selectedTextStyle: {color: Color.Blue, font: {size: 30, weight: FontWeight.Bolder}},\n              // 设置确定按钮的样式\n              acceptButtonStyle: { \n                type: ButtonType.Normal, \n                style: ButtonStyleMode.NORMAL, \n                role: ButtonRole.NORMAL, \n                fontColor: Color.Red,\n                fontSize: '26fp', \n                fontWeight: FontWeight.Bolder, \n                fontStyle: FontStyle.Normal, \n                fontFamily: 'sans-serif', \n                backgroundColor: '#80834511',\n                borderRadius: 20 \n              },\n              // 设置取消按钮的样式\n              cancelButtonStyle: { \n                type: ButtonType.Normal, \n                style: ButtonStyleMode.NORMAL, \n                role: ButtonRole.NORMAL, \n                fontColor: Color.Blue,\n                fontSize: '16fp', \n                fontWeight: FontWeight.Normal, \n                fontStyle: FontStyle.Italic, \n                fontFamily: 'sans-serif', \n                backgroundColor: '#50182431',\n                borderRadius: 10 \n              },\n              // 点击确定按钮时的回调函数\n              onAccept: (value: TextPickerResult) => {\n                // 设置select为按下确定按钮时候的选中项index\n                this.select = value.index\n                console.log(this.select + '')\n                // 点击确定后，被选到的文本数据展示到页面\n                this.v = value.value as string\n                console.info("TextPickerDialog:onAccept()" + JSON.stringify(value))\n              },\n              // 点击取消按钮时的回调函数\n              onCancel: () => {\n                console.info("TextPickerDialog:onCancel()")\n              },\n              // 选择项目改变时的回调函数\n              onChange: (value: TextPickerResult) => {\n                console.info("TextPickerDialog:onChange()" + JSON.stringify(value))\n              },\n              // 对话框出现时的回调函数\n              onDidAppear: () => {\n                console.info("TextPickerDialog:onDidAppear()")\n              },\n              // 对话框消失时的回调函数\n              onDidDisappear: () => {\n                console.info("TextPickerDialog:onDidDisappear()")\n              },\n              // 对话框即将出现时的回调函数\n              onWillAppear: () => {\n                console.info("TextPickerDialog:onWillAppear()")\n              },\n              // 对话框即将消失时的回调函数\n              onWillDisappear: () => {\n                console.info("TextPickerDialog:onWillDisappear()")\n              }\n            })\n          })\n      }.width('100%')\n    }.height('100%')\n  }\n}