Title: RelativeContainer-行列与堆叠-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-relativecontainer-V5

Markdown Content:
相对布局组件，用于复杂场景中元素对齐的布局。

说明

该组件从API Version 9开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

规则说明
----

*   容器内子组件区分水平方向，垂直方向：
    *   水平方向为left， middle， right，对应容器的HorizontalAlign.Start， HorizontalAlign.Center， HorizontalAlign.End。
    *   垂直方向为top， center， bottom，对应容器的VerticalAlign.Top， VerticalAlign.Center， VerticalAlign.Bottom。
*   子组件可以将容器、guideline、barrier或者其他子组件设为锚点：
    *   参与相对布局的容器内组件，不设置id的组件能显示，但是不能被其他子组件作为锚点，相对布局容器会为其拼接id，此id的规律无法被应用感知；容器id固定为\_\_container\_\_；guideline和barrier的id不能与组件重复，重复的话按照组件 \> guideline \> barrier的优先级生效。
    *   此子组件某一方向上的三个位置（水平方向为left、middle、right，垂直方向为top、center、bottom）可以指定容器或其他子组件同方向的三个位置（水平方向为HorizontalAlign.Start、HorizontalAlign.Center、HorizontalAlign.End，垂直方向为VerticalAlign.Top、VerticalAlign.Center、VerticalAlign.Bottom）为锚点。若同方向上设置两个以上锚点，水平方向Start和Center优先，垂直方向Top和Center优先。例如，水平方向上指定了left以容器的HorizontalAlign.Start为锚点，middle以容器的HorizontalAlign.Center为锚点，又指定right的锚点为容器的HorizontalAlign.End，当组件的width和容器的width不能同时满足3条约束规则时，优先取Start和Center的约束规则。
    *   当同时存在前端页面设置的子组件尺寸和相对布局规则时，子组件的绘制尺寸取决于约束规则。从API Version 11开始，该规则发生变化，子组件绘制尺寸取决于前端页面设置的尺寸。
    *   对齐后需要额外偏移可设置offset(API Version 11上新增了[bias](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-location-V5#bias%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)， 不建议再使用offset)。
    *   从API Version 11开始，在RelativeContainer组件中，width、height设置auto表示自适应子组件。
    *   当width设置auto时，如果水平方向上子组件以容器作为锚点，则auto不生效，垂直方向上同理。
    *   相对布局容器内的子组件的margin含义不同于通用属性的margin，其含义为到该方向上的锚点的距离。若该方向上没有锚点，则该方向的margin不生效。
    *   guideline的位置在不声明或者声明异常值(如undefined)时，取start：0的位置；start和end两种方式声明一种即可，同时声明时仅start生效。
    *   当容器在某个方向的size声明为“auto”时，该方向上guideline的位置只能使用start的方式声明(不可使用百分比)。
    *   垂直方向的guideline和barrier只能作为组件水平方向的锚点，作为垂直方向的锚点时取0；水平方向的guideline和barrier只能作为组件垂直方向的锚点，作为水平方向的锚点时取0。
    *   链的形成依靠组件间的依赖关系。以一个组件A、组件B组成的最小水平链为例，需要有锚点1 <\-- 组件A <\---\> 组件B --\> 锚点2的依赖关系，即A具有left锚点，B具有right锚点，同时A的right锚点是B的HorizontalAlign.Start，B的left锚点是A的HorizontalAlign.End。
    *   链的方向和格式声明在链头组件的[chainMode](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-location-V5#chainmode12)接口；链内元素的bias属性全部失效，链头元素的bias作为整个链的bias生效。
    *   链内所有元素的size如果超出链的锚点约束，超出的部分将均分在链的两侧。在[Packed](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#chainstyle12)链中，超出部分的分布可以通过[bias](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-location-V5#bias%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)来设置。
*   特殊情况
    *   根据约束条件和子组件本身的size属性无法确定子组件大小，则子组件不绘制。
    *   互相依赖、环形依赖时容器内子组件全部不绘制。
    *   同方向上两个及以上位置设置锚点但锚点位置逆序时此子组件大小为0，即不绘制。

接口
--

RelativeContainer()

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### guideLine12+

guideLine(value: Array<GuideLineStyle\>)

设置RelativeContainer容器内的辅助线，Array中每个项目即为一条guideline。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### barrier12+

barrier(value: Array<BarrierStyle\>)

设置RelativeContainer容器内的屏障，Array中每个项目即为一条barrier。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

Array<[BarrierStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-relativecontainer-V5#barrierstyle12%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)\>

是

RelativeContainer容器内的屏障。

### barrier12+

barrier(barrierStyle: Array<LocalizedBarrierStyle\>)

设置RelativeContaine容器内的屏障，Array中每个项目即为一条barrier。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

GuideLineStyle12+对象说明
---------------------

guideLine参数，用于定义一条guideline的id、方向和位置。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

id

string

是

guideline的id，必须是唯一的并且不可与容器内组件重名。

direction

[Axis](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#axis)

是

指定guideline的方向。

默认值：Axis.Vertical

position

[GuideLinePosition](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-relativecontainer-V5#guidelineposition12%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)

是

指定guideline的位置。

默认值：

{

start: 0

}

GuideLinePosition12+对象说明
------------------------

guideLine位置参数，用于定义guideline的位置。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

start

[Dimension](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#dimension10)

否

guideline距离容器左侧或者顶部的距离。

end

[Dimension](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#dimension10)

否

guideline距离容器右侧或者底部的距离。

BarrierStyle12+对象说明
-------------------

barrier参数，用于定义一条barrier的id、方向和生成时所依赖的组件。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

id

string

是

barrier的id，必须是唯一的并且不可与容器内组件重名。

direction

[BarrierDirection](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-relativecontainer-V5#barrierdirection12)

是

指定barrier的方向。

默认值：BarrierDirection.LEFT

referencedId

Array<string\>

是

指定生成barrier所依赖的组件。

BarrierDirection12+枚举说明
-----------------------

定义屏障线的方向。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

LocalizedBarrierStyle12+对象说明
----------------------------

barrier参数，用于定义一条barrier的id、方向和生成时所依赖的组件。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

id

string

是

barrier的id，必须是唯一的并且不可与容器内组件重名。

localizedDirection

[LocalizedBarrierDirection](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-relativecontainer-V5#localizedbarrierdirection12%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

是

指定barrier的方向。

referencedId

Array<string\>

是

指定生成barrier所依赖的组件。

LocalizedBarrierDirection12+枚举说明
--------------------------------

定义屏障线的方向。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

示例
--

### 示例1

本示例展示了以容器和容器内组件作为锚点进行布局的用法。

1.  @Entry
2.  @Component
3.  struct Index {
4.    build() {
5.      Row() {
6.        RelativeContainer() {
7.          Row(){Text('row1')}.justifyContent(FlexAlign.Center)
8.            .width(100).height(100)
9.            .backgroundColor("#FF3333")
10.            .alignRules({
11.              top: {anchor: "\_\_container\_\_", align: VerticalAlign.Top},
12.              left: {anchor: "\_\_container\_\_", align: HorizontalAlign.Start}
13.            })
14.            .id("row1")

16.          Row(){Text('row2')}.justifyContent(FlexAlign.Center)
17.            .width(100).height(100)
18.            .backgroundColor("#FFCC00")
19.            .alignRules({
20.              top: {anchor: "\_\_container\_\_", align: VerticalAlign.Top},
21.              right: {anchor: "\_\_container\_\_", align: HorizontalAlign.End}
22.            })
23.            .id("row2")

25.          Row(){Text('row3')}.justifyContent(FlexAlign.Center)
26.            .height(100)
27.            .backgroundColor("#FF6633")
28.            .alignRules({
29.              top: {anchor: "row1", align: VerticalAlign.Bottom},
30.              left: {anchor: "row1", align: HorizontalAlign.End},
31.              right: {anchor: "row2", align: HorizontalAlign.Start}
32.            })
33.            .id("row3")

35.          Row(){Text('row4')}.justifyContent(FlexAlign.Center)
36.            .backgroundColor("#FF9966")
37.            .alignRules({
38.              top: {anchor: "row3", align: VerticalAlign.Bottom},
39.              bottom: {anchor: "\_\_container\_\_", align: VerticalAlign.Bottom},
40.              left: {anchor: "\_\_container\_\_", align: HorizontalAlign.Start},
41.              right: {anchor: "row1", align: HorizontalAlign.End}
42.            })
43.            .id("row4")

45.          Row(){Text('row5')}.justifyContent(FlexAlign.Center)
46.            .backgroundColor("#FF66FF")
47.            .alignRules({
48.              top: {anchor: "row3", align: VerticalAlign.Bottom},
49.              bottom: {anchor: "\_\_container\_\_", align: VerticalAlign.Bottom},
50.              left: {anchor: "row2", align: HorizontalAlign.Start},
51.              right: {anchor: "\_\_container\_\_", align: HorizontalAlign.End}
52.            })
53.            .id("row5")
54.        }
55.        .width(300).height(300)
56.        .margin({left: 50})
57.        .border({width:2, color: "#6699FF"})
58.      }
59.      .height('100%')
60.    }
61.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114403.13408842583891721889895570603247:50001231000000:2800:B84540950252682EAA14175FEB7800A0D5E71064D60D2DF5247F5D48B8782AB0.png?needInitFileName=true?needInitFileName=true)

### 示例2

本示例展示了容器内子组件设置margin的用法。

1.  @Entry
2.  @Component
3.  struct Index {
4.    build() {
5.      Row() {
6.        RelativeContainer() {
7.          Row(){Text('row1')}.justifyContent(FlexAlign.Center)
8.            .width(100).height(100)
9.            .backgroundColor("#FF3333")
10.            .alignRules({
11.              top: {anchor: "\_\_container\_\_", align: VerticalAlign.Top},
12.              left: {anchor: "\_\_container\_\_", align: HorizontalAlign.Start}
13.            })
14.            .id("row1")
15.            .margin(10)

17.          Row(){Text('row2')}.justifyContent(FlexAlign.Center)
18.            .width(100).height(100)
19.            .backgroundColor("#FFCC00")
20.            .alignRules({
21.              left: {anchor: "row1", align: HorizontalAlign.End},
22.              top: {anchor: "row1", align: VerticalAlign.Top}
23.            })
24.            .id("row2")

26.          Row(){Text('row3')}.justifyContent(FlexAlign.Center)
27.            .width(100).height(100)
28.            .backgroundColor("#FF6633")
29.            .alignRules({
30.              left: {anchor: "row1", align: HorizontalAlign.Start},
31.              top: {anchor: "row1", align: VerticalAlign.Bottom}
32.            })
33.            .id("row3")

35.          Row(){Text('row4')}.justifyContent(FlexAlign.Center)
36.            .width(100).height(100)
37.            .backgroundColor("#FF9966")
38.            .alignRules({
39.              left: {anchor: "row3", align: HorizontalAlign.End},
40.              top: {anchor: "row2", align: VerticalAlign.Bottom}
41.            })
42.            .id("row4")
43.            .margin(10)
44.        }
45.        .width(300).height(300)
46.        .margin({left: 50})
47.        .border({width:2, color: "#6699FF"})
48.      }
49.      .height('100%')
50.    }
51.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114403.26709083918545385670120919433060:50001231000000:2800:98B4A0812C780B88F3BE0D91DF654EFDCC4109CB5AC558EEEDD16E3018CDC8C6.png?needInitFileName=true?needInitFileName=true)

### 示例3

本示例展示了容器大小适应内容（声明size为"auto"）的用法。

1.  @Entry
2.  @Component
3.  struct Index {
4.    build() {
5.      Row() {
6.        RelativeContainer() {
7.          Row(){Text('row1')}.justifyContent(FlexAlign.Center)
8.            .width(100).height(100)
9.            .backgroundColor("#FF3333")
10.            .id("row1")

12.          Row(){Text('row2')}.justifyContent(FlexAlign.Center)
13.            .width(100).height(100)
14.            .backgroundColor("#FFCC00")
15.            .alignRules({
16.              left: {anchor: "row1", align: HorizontalAlign.End},
17.              top: {anchor: "row1", align: VerticalAlign.Top}
18.            })
19.            .id("row2")

21.          Row(){Text('row3')}.justifyContent(FlexAlign.Center)
22.            .width(100).height(100)
23.            .backgroundColor("#FF6633")
24.            .alignRules({
25.              left: {anchor: "row1", align: HorizontalAlign.Start},
26.              top: {anchor: "row1", align: VerticalAlign.Bottom}
27.            })
28.            .id("row3")

30.          Row(){Text('row4')}.justifyContent(FlexAlign.Center)
31.            .width(100).height(100)
32.            .backgroundColor("#FF9966")
33.            .alignRules({
34.              left: {anchor: "row3", align: HorizontalAlign.End},
35.              top: {anchor: "row2", align: VerticalAlign.Bottom}
36.            })
37.            .id("row4")
38.        }
39.        .width("auto").height("auto")
40.        .margin({left: 50})
41.        .border({width:2, color: "#6699FF"})
42.      }
43.      .height('100%')
44.    }
45.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114403.19145228522763003521479100288121:50001231000000:2800:0997F4B0D50C918AEF52AC8F08F84CEC3A4A5AF8FF3B14DBDBF418B4B534E3BB.png?needInitFileName=true?needInitFileName=true)

### 示例4

本示例展示了bias的用法。

1.  @Entry
2.  @Component
3.  struct Index {
4.    build() {
5.      Row() {
6.        RelativeContainer() {
7.          Row().width(100).height(100)
8.            .backgroundColor("#FF3333")
9.            .alignRules({
10.              top: {anchor: "\_\_container\_\_", align: VerticalAlign.Top},
11.              bottom : {anchor : "\_\_container\_\_", align : VerticalAlign.Bottom},
12.              left: {anchor: "\_\_container\_\_", align: HorizontalAlign.Start},
13.              right : {anchor : "\_\_container\_\_", align: HorizontalAlign.End},
14.              bias : {vertical : 0.3}
15.            })
16.            .id("row1")
17.        }
18.        .width(300).height(300)
19.        .margin({left: 50})
20.        .border({width:2, color: "#6699FF"})
21.      }
22.      .height('100%')
23.    }
24.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114403.05434466179233455922622636642661:50001231000000:2800:3C2434D544D763215BDB4059A6E114AD7D5DC32AF231793133F33266857E6C5F.png?needInitFileName=true?needInitFileName=true)

### 示例5

本示例展示了guideline的声明和以guideline为锚点的用法。

1.  @Entry
2.  @Component
3.  struct Index {
4.    build() {
5.      Row() {
6.        RelativeContainer() {
7.          Row().width(100).height(100)
8.            .backgroundColor("#FF3333")
9.            .alignRules({
10.              left: {anchor: "guideline1", align: HorizontalAlign.End},
11.              top: {anchor: "guideline2", align: VerticalAlign.Top}
12.            })
13.            .id("row1")
14.        }
15.        .width(300).height(300)
16.        .margin({left: 50})
17.        .border({width:2, color: "#6699FF"})
18.        .guideLine(\[{id:"guideline1", direction: Axis.Vertical, position:{start:50}},
19.          {id:"guideline2", direction: Axis.Horizontal, position:{start:50}}\])
20.      }
21.      .height('100%')
22.    }
23.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114403.76320257248285683040546017237011:50001231000000:2800:857331F4BE05338451F95653225F3B1C6372EA293D6B661293F6F592D0A8D96D.png?needInitFileName=true?needInitFileName=true)

### 示例6

本示例展示了barrier的声明和以barrier为锚点的用法。

1.  @Entry
2.  @Component
3.  struct Index {
4.    build() {
5.      Row() {
6.        RelativeContainer() {
7.          Row(){Text('row1')}.justifyContent(FlexAlign.Center)
8.            .width(100).height(100)
9.            .backgroundColor("#FF3333")
10.            .id("row1")

12.          Row(){Text('row2')}.justifyContent(FlexAlign.Center)
13.            .width(100).height(100)
14.            .backgroundColor("#FFCC00")
15.            .alignRules({
16.              middle: {anchor: "row1", align: HorizontalAlign.End},
17.              top: {anchor: "row1", align: VerticalAlign.Bottom}
18.            })
19.            .id("row2")

21.          Row(){Text('row3')}.justifyContent(FlexAlign.Center)
22.            .width(100).height(100)
23.            .backgroundColor("#FF6633")
24.            .alignRules({
25.              left: {anchor: "barrier1", align: HorizontalAlign.End},
26.              top: {anchor: "row1", align: VerticalAlign.Top}
27.            })
28.            .id("row3")

30.          Row(){Text('row4')}.justifyContent(FlexAlign.Center)
31.            .width(50).height(50)
32.            .backgroundColor("#FF9966")
33.            .alignRules({
34.              left: {anchor: "row1", align: HorizontalAlign.Start},
35.              top: {anchor: "barrier2", align: VerticalAlign.Bottom}
36.            })
37.            .id("row4")
38.        }
39.        .width(300).height(300)
40.        .margin({left: 50})
41.        .border({width:2, color: "#6699FF"})
42.        .barrier(\[{id: "barrier1", direction: BarrierDirection.RIGHT, referencedId:\["row1", "row2"\]},
43.          {id: "barrier2", direction: BarrierDirection.BOTTOM, referencedId:\["row1", "row2"\]}\])
44.      }
45.      .height('100%')
46.    }
47.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114403.94616043977317132495738724084782:50001231000000:2800:21EDD5C06873AC290703F61287DA96054037AB9344957E8701D409153F46E4B2.png?needInitFileName=true?needInitFileName=true)

### 示例7

本示例通过chainMode接口从上至下分别实现了水平方向的SPREAD链，SPREAD\_INSIDE链和PACKED链。

1.  @Entry
2.  @Component
3.  struct Index {
4.    build() {
5.      Row() {
6.        RelativeContainer() {
7.          Row(){Text('row1')}.justifyContent(FlexAlign.Center)
8.            .width(80).height(80)
9.            .backgroundColor("#FF3333")
10.            .alignRules({
11.              left: {anchor: "\_\_container\_\_", align: HorizontalAlign.Start},
12.              right: {anchor: "row2", align : HorizontalAlign.Start},
13.              top: {anchor: "\_\_container\_\_", align: VerticalAlign.Top}
14.            })
15.            .id("row1")
16.            .chainMode(Axis.Horizontal, ChainStyle.SPREAD)

18.          Row(){Text('row2')}.justifyContent(FlexAlign.Center)
19.            .width(80).height(80)
20.            .backgroundColor("#FFCC00")
21.            .alignRules({
22.              left: {anchor: "row1", align: HorizontalAlign.End},
23.              right: {anchor: "row3", align : HorizontalAlign.Start},
24.              top: {anchor: "row1", align: VerticalAlign.Top}
25.            })
26.            .id("row2")

28.          Row(){Text('row3')}.justifyContent(FlexAlign.Center)
29.            .width(80).height(80)
30.            .backgroundColor("#FF6633")
31.            .alignRules({
32.              left: {anchor: "row2", align: HorizontalAlign.End},
33.              right: {anchor: "\_\_container\_\_", align : HorizontalAlign.End},
34.              top: {anchor: "row1", align: VerticalAlign.Top}
35.            })
36.            .id("row3")

38.          Row(){Text('row4')}.justifyContent(FlexAlign.Center)
39.            .width(80).height(80)
40.            .backgroundColor("#FF3333")
41.            .alignRules({
42.              left: {anchor: "\_\_container\_\_", align: HorizontalAlign.Start},
43.              right: {anchor: "row5", align : HorizontalAlign.Start},
44.              center: {anchor: "\_\_container\_\_", align: VerticalAlign.Center}
45.            })
46.            .id("row4")
47.            .chainMode(Axis.Horizontal, ChainStyle.SPREAD\_INSIDE)

49.          Row(){Text('row5')}.justifyContent(FlexAlign.Center)
50.            .width(80).height(80)
51.            .backgroundColor("#FFCC00")
52.            .alignRules({
53.              left: {anchor: "row4", align: HorizontalAlign.End},
54.              right: {anchor: "row6", align : HorizontalAlign.Start},
55.              top: {anchor: "row4", align: VerticalAlign.Top}
56.            })
57.            .id("row5")

59.          Row(){Text('row6')}.justifyContent(FlexAlign.Center)
60.            .width(80).height(80)
61.            .backgroundColor("#FF6633")
62.            .alignRules({
63.              left: {anchor: "row5", align: HorizontalAlign.End},
64.              right: {anchor: "\_\_container\_\_", align : HorizontalAlign.End},
65.              top: {anchor: "row4", align: VerticalAlign.Top}
66.            })
67.            .id("row6")

69.          Row(){Text('row7')}.justifyContent(FlexAlign.Center)
70.            .width(80).height(80)
71.            .backgroundColor("#FF3333")
72.            .alignRules({
73.              left: {anchor: "\_\_container\_\_", align: HorizontalAlign.Start},
74.              right: {anchor: "row8", align : HorizontalAlign.Start},
75.              bottom: {anchor: "\_\_container\_\_", align: VerticalAlign.Bottom}
76.            })
77.            .id("row7")
78.            .chainMode(Axis.Horizontal, ChainStyle.PACKED)

80.          Row(){Text('row8')}.justifyContent(FlexAlign.Center)
81.            .width(80).height(80)
82.            .backgroundColor("#FFCC00")
83.            .alignRules({
84.              left: {anchor: "row7", align: HorizontalAlign.End},
85.              right: {anchor: "row9", align : HorizontalAlign.Start},
86.              top: {anchor: "row7", align: VerticalAlign.Top}
87.            })
88.            .id("row8")

90.          Row(){Text('row9')}.justifyContent(FlexAlign.Center)
91.            .width(80).height(80)
92.            .backgroundColor("#FF6633")
93.            .alignRules({
94.              left: {anchor: "row8", align: HorizontalAlign.End},
95.              right: {anchor: "\_\_container\_\_", align : HorizontalAlign.End},
96.              top: {anchor: "row7", align: VerticalAlign.Top}
97.            })
98.            .id("row9")
99.        }
100.        .width(300).height(300)
101.        .margin({left: 50})
102.        .border({width:2, color: "#6699FF"})
103.      }
104.      .height('100%')
105.    }
106.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114403.08712408548460682744263585353800:50001231000000:2800:85F5A63D2CC1A2F459FC432BB8DD039A129FA65E6409F9C3C47BD681BFD21A71.png?needInitFileName=true?needInitFileName=true)

### 示例8

本示例通过chainMode和bias接口实现了水平方向的带bias的PACKED链。

1.  @Entry
2.  @Component
3.  struct Index {
4.    build() {
5.      Row() {
6.        RelativeContainer() {
7.          Row(){Text('row1')}.justifyContent(FlexAlign.Center)
8.            .width(80).height(80)
9.            .backgroundColor("#FF3333")
10.            .alignRules({
11.              left: {anchor: "\_\_container\_\_", align: HorizontalAlign.Start},
12.              right: {anchor: "row2", align : HorizontalAlign.Start},
13.              center: {anchor: "\_\_container\_\_", align: VerticalAlign.Center},
14.              bias : {horizontal : 0}
15.            })
16.            .id("row1")
17.            .chainMode(Axis.Horizontal, ChainStyle.PACKED)

19.          Row(){Text('row2')}.justifyContent(FlexAlign.Center)
20.            .width(80).height(80)
21.            .backgroundColor("#FFCC00")
22.            .alignRules({
23.              left: {anchor: "row1", align: HorizontalAlign.End},
24.              right: {anchor: "row3", align : HorizontalAlign.Start},
25.              top: {anchor: "row1", align: VerticalAlign.Top}
26.            })
27.            .id("row2")

29.          Row(){Text('row3')}.justifyContent(FlexAlign.Center)
30.            .width(80).height(80)
31.            .backgroundColor("#FF6633")
32.            .alignRules({
33.              left: {anchor: "row2", align: HorizontalAlign.End},
34.              right: {anchor: "\_\_container\_\_", align : HorizontalAlign.End},
35.              top: {anchor: "row1", align: VerticalAlign.Top}
36.            })
37.            .id("row3")
38.        }
39.        .width(300).height(300)
40.        .margin({left: 50})
41.        .border({width:2, color: "#6699FF"})
42.      }
43.      .height('100%')
44.    }
45.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114403.69708773919100881001422532241168:50001231000000:2800:2E31D98A03EDE4D0C150B1660F7F27CEC748B9D40517416B6B5ED4E20C676408.png?needInitFileName=true?needInitFileName=true)

### 示例9

本示例展示了在RTL模式下以barrier为锚点时使用LocalizedAlignRuleOptions和LocalizedBarrierDirection设置对齐方式的用法。

1.  @Entry
2.  @Component
3.  struct Index {
4.    build() {
5.      Row() {
6.        RelativeContainer() {
7.          Row(){Text('row1')}.justifyContent(FlexAlign.Center)
8.            .width(100).height(100)
9.            .backgroundColor("#FF3333")
10.            .id("row1")

12.          Row(){Text('row2')}.justifyContent(FlexAlign.Center)
13.            .width(100).height(100)
14.            .backgroundColor("#FFCC00")
15.            .alignRules({
16.              middle: {anchor: "row1", align: HorizontalAlign.End},
17.              top: {anchor: "row1", align: VerticalAlign.Bottom}
18.            })
19.            .id("row2")

21.          Row(){Text('row3')}.justifyContent(FlexAlign.Center)
22.            .width(100).height(100)
23.            .backgroundColor("#FF6633")
24.            .alignRules({
25.              start: {anchor: "barrier1", align: HorizontalAlign.End},
26.              top: {anchor: "row1", align: VerticalAlign.Top}
27.            })
28.            .id("row3")

30.          Row(){Text('row4')}.justifyContent(FlexAlign.Center)
31.            .width(50).height(50)
32.            .backgroundColor("#FF9966")
33.            .alignRules({
34.              start: {anchor: "row1", align: HorizontalAlign.Start},
35.              top: {anchor: "barrier2", align: VerticalAlign.Bottom}
36.            })
37.            .id("row4")
38.        }
39.        .direction(Direction.Rtl)
40.        .width(300).height(300)
41.        .margin({left: 50})
42.        .border({width:2, color: "#6699FF"})
43.        .barrier(\[{id: "barrier1", localizedDirection: LocalizedBarrierDirection.END, referencedId:\["row1", "row2"\]},
44.          {id: "barrier2", localizedDirection: LocalizedBarrierDirection.BOTTOM, referencedId:\["row1", "row2"\]}\])
45.      }
46.      .height('100%')
47.    }
48.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114403.93509114565677952183379385496849:50001231000000:2800:735674BD3E427DFB330343D396F45E894ECC514A5FFDA4F7E496A2EC89AD8034.png?needInitFileName=true?needInitFileName=true)
