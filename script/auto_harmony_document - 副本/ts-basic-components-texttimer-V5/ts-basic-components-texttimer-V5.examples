/*\n实现一个带有动态文本阴影效果的计时器组件。该组件通过定义多个阴影效果，使得文本在显示时具有多层次的阴影效果，从而增强视觉效果。\n*/\n\n@Entry\n@Component\nstruct TextTimerExample {\n  // 定义一个状态变量textShadows，包含多个ShadowOptions对象，每个对象定义了一个阴影的半径、颜色和偏移量\n  @State textShadows : ShadowOptions | Array<ShadowOptions> = [{ radius: 10, color: Color.Red, offsetX: 10, offsetY: 0 },\n      { radius: 10, color: Color.Black, offsetX: 20, offsetY: 0 },\n      { radius: 10, color: Color.Brown, offsetX: 30, offsetY: 0 },\n      { radius: 10, color: Color.Green, offsetX: 40, offsetY: 0 },\n      { radius: 10, color: Color.Yellow, offsetX: 100, offsetY: 0 }]\n\n  build() {\n    Column({ space: 8 }) {\n      // 创建一个TextTimer组件，设置字体大小为50，并应用定义的文本阴影效果\n      TextTimer().fontSize(50).textShadow(this.textShadows)\n    }\n  }\n}


/*\n实现一个倒计时器组件，包含开始、暂停和重置功能。倒计时器显示格式为"mm:ss.SS"，即分钟、秒和毫秒。用户可以通过按钮控制倒计时的启动、暂停和重置。\n*/\n\n@Entry\n@Component\nstruct TextTimerExample {\n  // 创建一个TextTimerController实例，用于控制倒计时器\n  textTimerController: TextTimerController = new TextTimerController()\n  // 定义倒计时显示的格式，初始值为"mm:ss.SS"\n  @State format: string = 'mm:ss.SS'\n\n  build() {\n    Column() {\n      // 创建一个TextTimer组件，设置为倒计时模式，初始倒计时时间为30000毫秒，并绑定控制器\n      TextTimer({ isCountDown: true, count: 30000, controller: this.textTimerController })\n        .format(this.format) // 设置倒计时显示的格式\n        .fontColor(Color.Black) // 设置倒计时文本颜色为黑色\n        .fontSize(50) // 设置倒计时文本字体大小为50\n        .onTimer((utc: number, elapsedTime: number) => {\n          // 当倒计时进行时，输出当前的UTC时间和已流逝的时间\n          console.info('textTimer notCountDown utc is：' + utc + ', elapsedTime: ' + elapsedTime)\n        })\n      Row() {\n        // 创建开始按钮，点击时启动倒计时\n        Button("start").onClick(() => {\n          this.textTimerController.start()\n        })\n        // 创建暂停按钮，点击时暂停倒计时\n        Button("pause").onClick(() => {\n          this.textTimerController.pause()\n        })\n        // 创建重置按钮，点击时重置倒计时\n        Button("reset").onClick(() => {\n          this.textTimerController.reset()\n        })\n      }\n    }\n  }\n}


/*\n实现一个包含倒计时和正计时的计时器组件，支持开始、暂停和重置功能。计时器组件使用自定义修饰器进行样式和内容定制。\n*/\n\n@Entry\n@Component\nstruct Index {\n  // 定义倒计时器的初始时间，单位为毫秒\n  @State count: number = 10000\n  // 创建一个自定义的TextTimer修饰器实例，用于定制计时器的显示样式\n  @State myTimerModifier: MyTextTimerModifier = new MyTextTimerModifier()\n  // 创建两个TextTimerController实例，分别用于控制倒计时器和正计时器\n  countDownTextTimerController: TextTimerController = new TextTimerController()\n  countUpTextTimerController: TextTimerController = new TextTimerController()\n\n  build() {\n    Row() {\n      Column() {\n        // 创建一个倒计时TextTimer组件，应用自定义修饰器，并绑定控制器\n        TextTimer({isCountDown: true, count: this.count, controller: this.countDownTextTimerController})\n          .contentModifier(this.myTimerModifier) // 应用自定义修饰器\n          .onTimer((utc: number, elapsedTime: number) => {\n            // 计时器触发时的回调函数，输出当前时间戳和已过去的时间\n            console.info('textTimer onTimer utc is：' + utc + ', elapsedTime: ' + elapsedTime)\n          })\n          .margin(10) // 设置组件的外边距\n        // 创建一个正计时TextTimer组件，应用自定义修饰器，并绑定控制器\n        TextTimer({isCountDown: false, controller: this.countUpTextTimerController})\n          .contentModifier(this.myTimerModifier) // 应用自定义修饰器\n          .onTimer((utc: number, elapsedTime: number) => {\n            // 计时器触发时的回调函数，输出当前时间戳和已过去的时间\n            console.info('textTimer onTimer utc is：' + utc + ', elapsedTime: ' + elapsedTime)\n          })\n        Row() {\n          // 创建开始按钮，点击时启动两个计时器\n          Button("start").onClick(()=>{\n            this.countDownTextTimerController.start() // 启动倒计时器\n            this.countUpTextTimerController.start() // 启动正计时器\n          }).margin(10) // 设置按钮的外边距\n          // 创建暂停按钮，点击时暂停两个计时器\n          Button("pause").onClick(()=>{\n            this.countDownTextTimerController.pause() // 暂停倒计时器\n            this.countUpTextTimerController.pause() // 暂停正计时器\n          }).margin(10) // 设置按钮的外边距\n          // 创建重置按钮，点击时重置两个计时器\n          Button("reset").onClick(()=>{\n            this.countDownTextTimerController.reset() // 重置倒计时器\n            this.countUpTextTimerController.reset() // 重置正计时器\n          }).margin(10) // 设置按钮的外边距\n        }.margin(20) // 设置行组件的外边距\n      }.width('100%') // 设置列组件的宽度为100%\n    }.height('100%') // 设置行组件的高度为100%\n  }\n}