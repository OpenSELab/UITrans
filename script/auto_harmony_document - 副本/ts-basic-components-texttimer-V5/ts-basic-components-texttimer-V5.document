Title: TextTimer-信息展示-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-texttimer-V5

Markdown Content:
通过文本显示计时信息并控制其计时器状态的组件。

在组件不可见时时间变动将停止，组件的可见状态基于[onVisibleAreaChange](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-component-visible-area-change-event-V5#onvisibleareachange)处理，可见阈值ratios大于0即视为可见状态。

说明

该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

接口
--

TextTimer(options?: TextTimerOptions)

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

TextTimerOptions对象说明
--------------------

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

isCountDown

boolean

否

是否倒计时。

默认值：false

count

number

否

倒计时时间（isCountDown为true时生效），单位为毫秒。最长不超过86400000毫秒（24小时）。 0<count<86400000时，count值为倒计时初始值。否则，使用默认值为倒计时初始值。

默认值：60000

controller

[TextTimerController](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-texttimer-V5#texttimercontroller)

否

TextTimer控制器。

### format

format(value: string)

设置自定义格式，需至少包含一个HH、mm、ss、SS中的关键字。如使用yy、MM、dd等日期格式，则使用默认值。

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

string

是

自定义格式。

默认值：'HH:mm:ss.SS'

### fontColor

fontColor(value: ResourceColor)

设置字体颜色。

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### fontSize

fontSize(value: Length)

设置字体大小。

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[Length](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#length)

是

字体大小。fontSize为number类型时，使用fp单位。字体默认大小16fp。不支持设置百分比字符串。

### fontStyle

fontStyle(value: FontStyle)

设置字体样式。

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[FontStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#fontstyle)

是

字体样式。

默认值：FontStyle.Normal

### fontWeight

fontWeight(value: number | FontWeight | string)

设置文本的字体粗细，设置过大可能会在不同字体下有截断。

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

number | [FontWeight](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#fontweight) | string

是

文本的字体粗细，number类型取值\[100, 900\]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如"400"，以及"bold"、"bolder"、"lighter"、"regular"、"medium"，分别对应FontWeight中相应的枚举值。

默认值：FontWeight.Normal

### fontFamily

fontFamily(value: ResourceStr)

设置字体列表。

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

是

字体列表。默认字体'HarmonyOS Sans'。

应用当前支持'HarmonyOS Sans'字体和[注册自定义字体](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-font-V5)。

卡片当前仅支持'HarmonyOS Sans'字体。

### textShadow11+

textShadow(value: ShadowOptions | Array<ShadowOptions\>)

设置文字阴影效果。该接口支持以数组形式入参，实现多重文字阴影。不支持fill字段, 不支持智能取色模式。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### contentModifier12+

contentModifier(modifier: ContentModifier<TextTimerConfiguration\>)

定制TextTimer内容区的方法。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

事件
--

### onTimer

onTimer(event: (utc: number, elapsedTime: number) =\> void)

时间文本发生变化时触发。锁屏状态和应用后台状态下不会触发该事件。

设置高精度的format（SSS、SS）时，回调间隔可能会出现波动。

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

utc

number

是

Linux时间戳，即自1970年1月1日起经过的时间，单位为设置格式的最小单位。

elapsedTime

number

是

计时器经过的时间，单位为设置格式的最小单位。

TextTimerController
-------------------

TextTimer组件的控制器，用于控制文本计时器。一个TextTimer组件仅支持绑定一个控制器，组件创建完成后相关指令才能被调用。

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

### 导入对象

1.  textTimerController: TextTimerController = new TextTimerController()

### constructor

constructor()

TextTimerController的构造函数。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### start

start()

计时开始。

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### pause

pause()

计时暂停。

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### reset

reset()

重置计时器。

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

TextTimerConfiguration12+对象说明
-----------------------------

开发者需要自定义class实现ContentModifier接口。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

count

number

是

倒计时时间（isCountDown为true时生效），单位为毫秒。最长不超过86400000毫秒（24小时）。 0<count<86400000时，count值为倒计时初始值。否则，使用默认值为倒计时初始值。

默认值：60000。

isCountDown

boolean

是

是否倒计时。

默认值：false。

started

boolean

是

是否已经开始了倒计时。

elapsedTime

number

是

计时器经过的时间，单位为设置格式的最小单位。

示例
--

### 示例1

2.  @Entry
3.  @Component
4.  struct TextTimerExample {
5.    textTimerController: TextTimerController = new TextTimerController()
6.    @State format: string = 'mm:ss.SS'

8.    build() {
9.      Column() {
10.        TextTimer({ isCountDown: true, count: 30000, controller: this.textTimerController })
11.          .format(this.format)
12.          .fontColor(Color.Black)
13.          .fontSize(50)
14.          .onTimer((utc: number, elapsedTime: number) =\> {
15.            console.info('textTimer notCountDown utc is：' + utc + ', elapsedTime: ' + elapsedTime)
16.          })
17.        Row() {
18.          Button("start").onClick(() =\> {
19.            this.textTimerController.start()
20.          })
21.          Button("pause").onClick(() =\> {
22.            this.textTimerController.pause()
23.          })
24.          Button("reset").onClick(() =\> {
25.            this.textTimerController.reset()
26.          })
27.        }
28.      }
29.    }
30.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114457.20256680948837337254142985337363:50001231000000:2800:9D84EF488AD705D338DEB21BE8A32B1FFBA81075388081D2CC1A740122CF122C.gif?needInitFileName=true?needInitFileName=true)

### 示例2

2.  @Entry
3.  @Component
4.  struct TextTimerExample {
5.    @State textShadows : ShadowOptions | Array<ShadowOptions\> = \[{ radius: 10, color: Color.Red, offsetX: 10, offsetY: 0 },{ radius: 10, color: Color.Black, offsetX: 20, offsetY: 0 },
6.        { radius: 10, color: Color.Brown, offsetX: 30, offsetY: 0 },{ radius: 10, color: Color.Green, offsetX: 40, offsetY: 0 },
7.        { radius: 10, color: Color.Yellow, offsetX: 100, offsetY: 0 }\]
8.    build() {
9.      Column({ space: 8 }) {
10.        TextTimer().fontSize(50).textShadow(this.textShadows)
11.      }
12.    }
13.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114457.01405957473077810675709299658594:50001231000000:2800:F0E7F949F0F15BE7A20CD65E35BB4FC3FEEC8064A159CF4A755F5F4994BE6E83.png?needInitFileName=true?needInitFileName=true)

### 示例3

该示例实现了两个简易秒表，使用浅灰色背景。计时器开始后，会实时显示时间变化。倒计时器开始后，背景会变成黑色，正计时器开始后，背景会变成灰色。

2.  class MyTextTimerModifier implements ContentModifier<TextTimerConfiguration\> {
3.    constructor() {
4.    }
5.    applyContent() : WrappedBuilder<\[TextTimerConfiguration\]\>
6.    {
7.        return wrapBuilder(buildTextTimer)
8.    }
9.  }

11.  @Builder function buildTextTimer(config: TextTimerConfiguration) {
12.    Column() {
13.       Stack({ alignContent: Alignment.Center }) {
14.         Circle({ width: 150, height: 150 }).fill(config.started ? (config.isCountDown ? 0xFF232323 : 0xFF717171) : 0xFF929292)
15.         Column(){
16.           Text(config.isCountDown ? "倒计时" : "正计时").fontColor(Color.White)
17.           Text(
18.             (config.isCountDown ? "剩余" : "已经过去了") + (config.isCountDown?
19.               (Math.max(config.count / 1000 - config.elapsedTime / 100,0)).toFixed(1) + "/" + (config.count / 1000).toFixed(0)
20.               :((config.elapsedTime / 100).toFixed(0))
21.             ) + "秒"
22.           ).fontColor(Color.White)
23.         }
24.       }
25.    }
26.  }

28.  @Entry
29.  @Component
30.  struct Index {
31.    @State count: number = 10000
32.    @State myTimerModifier: MyTextTimerModifier = new MyTextTimerModifier()
33.    countDownTextTimerController: TextTimerController = new TextTimerController()
34.    countUpTextTimerController: TextTimerController = new TextTimerController()

36.    build() {
37.      Row() {
38.        Column() {
39.          TextTimer({isCountDown: true, count: this.count, controller: this.countDownTextTimerController})
40.            .contentModifier(this.myTimerModifier)
41.            .onTimer((utc: number, elapsedTime: number) =\> {
42.              console.info('textTimer onTimer utc is：' + utc + ', elapsedTime: ' + elapsedTime)
43.            })
44.            .margin(10)
45.          TextTimer({isCountDown: false, controller: this.countUpTextTimerController})
46.            .contentModifier(this.myTimerModifier)
47.            .onTimer((utc: number, elapsedTime: number) =\> {
48.              console.info('textTimer onTimer utc is：' + utc + ', elapsedTime: ' + elapsedTime)
49.            })
50.          Row() {
51.            Button("start").onClick(()=\>{
52.              this.countDownTextTimerController.start()
53.              this.countUpTextTimerController.start()
54.            }).margin(10)
55.            Button("pause").onClick(()=\>{
56.              this.countDownTextTimerController.pause()
57.              this.countUpTextTimerController.pause()
58.            }).margin(10)
59.            Button("reset").onClick(()=\>{
60.              this.countDownTextTimerController.reset()
61.              this.countUpTextTimerController.reset()
62.            }).margin(10)
63.          }.margin(20)
64.        }.width('100%')
65.      }.height('100%')
66.    }
67.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114457.74463394031626959879674307565376:50001231000000:2800:4087EBB670F11668B1AFA770E0FB12F9BCC3864AB0E981DFC6AA2C0CFB72E7CC.gif?needInitFileName=true?needInitFileName=true)

### 示例4

TextTimer计时器创建之后立即执行。

1.  @Entry
2.  @Component
3.  struct textTimerStart {
4.    textTimerController: TextTimerController = new TextTimerController()
5.    @State format: string = 'mm:ss.SS'

7.    build() {
8.      Column() {
9.        Scroll()
10.          .height('20%')
11.        TextTimer({ isCountDown: true, count: 30000, controller: this.textTimerController })
12.          .format(this.format)
13.          .fontColor(Color.Black)
14.          .fontSize(50)
15.          .onTimer((utc: number, elapsedTime: number) =\> {
16.            console.info('textTimer notCountDown utc is：' + utc + ', elapsedTime: ' + elapsedTime)
17.          })
18.          .onAppear(()=\>{
19.            this.textTimerController.start()
20.          })
21.      }
22.    }
23.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114457.96472021189434430953247319657563:50001231000000:2800:F67ED0F187815C4B06E80B96BB4CF638FFC8D98A65149AB0AE28F4D1B7A5AFB1.gif?needInitFileName=true?needInitFileName=true)
