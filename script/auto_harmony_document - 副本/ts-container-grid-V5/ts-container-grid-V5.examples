/*\n实现一个可滚动的网格布局组件，展示从1到30的数字。网格布局具有固定的高度和宽度，支持设置列间距、行间距、背景颜色、每行最多和最少显示的网格项数量，以及网格布局方向。\n*/\n\n@Entry\n@Component\nstruct GridExample {\n  @State numbers: string[] = [] // 定义一个状态变量numbers，用于存储展示的数字字符串数组\n\n  // 组件初始化时填充数据\n  aboutToAppear() {\n    for (let i = 1; i <= 30; i++) {\n      this.numbers.push(i + '') // 将1到30的数字转换为字符串并添加到numbers数组中\n    }\n  }\n\n  build() {\n    Scroll() { // 创建一个可滚动的容器\n      Column({ space: 5 }) { // 创建一个垂直布局容器，设置子组件之间的间距为5\n        Blank() // 插入一个空白组件，用于占位\n        Text('rowsTemplate、columnsTemplate都不设置layoutDirection、maxcount、minCount、cellLength才生效')\n          .fontSize(15).fontColor(0xCCCCCC).width('90%') // 创建一个文本组件，设置字体大小、颜色和宽度\n        \n        Grid() { // 创建一个网格布局容器\n          ForEach(this.numbers, (day: string) => { // 遍历numbers数组，为每个数字创建一个网格项\n            GridItem() { // 创建一个网格项\n              Text(day).fontSize(16).backgroundColor(0xF9CF93) // 创建一个文本组件，设置字体大小和背景颜色\n            }.width(40).height(80).borderWidth(2).borderColor(Color.Red) // 设置网格项的宽度、高度、边框宽度和颜色\n          }, (day: string) => day) // 指定key生成函数，确保每个网格项的唯一性\n        }\n        .height(300) // 设置网格高度为300\n        .columnsGap(10) // 设置列间距为10\n        .rowsGap(10) // 设置行间距为10\n        .backgroundColor(0xFAEEE0) // 设置背景颜色为0xFAEEE0\n        .maxCount(6) // 设置每行最多显示6个网格项\n        .minCount(2) // 设置每行最少显示2个网格项\n        .cellLength(0) // 设置网格单元长度为0，表示不限制\n        .layoutDirection(GridDirection.Row) // 设置网格布局方向为行优先\n      }\n      .width('90%').margin({ top: 5, left: 5, right: 5 }) // 设置容器的宽度为90%，并设置上下左右的边距\n      .align(Alignment.Center) // 设置容器内容居中对齐\n    }\n  }\n}


/*\n实现一个可拖拽的网格布局组件，支持用户通过拖拽GridItem来改变其位置。组件初始化时会生成15个数字，并以3列的形式展示在Grid中。用户可以通过拖拽GridItem来交换两个数字的位置。\n*/\n\n@Entry\n@Component\nstruct GridExample {\n  @State numbers: string[] = [] // 存储GridItem显示的数字\n  scroller: Scroller = new Scroller() // 用于Grid的滚动控制\n  @State text: string = 'drag' // 拖拽过程中显示的文本\n\n  // 构建拖拽过程中显示的图片\n  @Builder pixelMapBuilder() { \n    Column() {\n      Text(this.text)\n        .fontSize(16)\n        .backgroundColor(0xF9CF93)\n        .width(80)\n        .height(80)\n        .textAlign(TextAlign.Center)\n    }\n  }\n\n  // 组件初始化时填充numbers数组\n  aboutToAppear() {\n    for (let i = 1; i <= 15; i++) {\n      this.numbers.push(i + '')\n    }\n  }\n\n  // 交换数组中两个元素的位置\n  changeIndex(index1: number, index2: number) { \n    let temp: string;\n    temp = this.numbers[index1];\n    this.numbers[index1] = this.numbers[index2];\n    this.numbers[index2] = temp;\n  }\n\n  // 构建Grid组件\n  build() {\n    Column({ space: 5 }) {\n      Grid(this.scroller) {\n        ForEach(this.numbers, (day: string) => {\n          GridItem() {\n            Text(day)\n              .fontSize(16)\n              .backgroundColor(0xF9CF93)\n              .width(80)\n              .height(80)\n              .textAlign(TextAlign.Center)\n          }\n        })\n      }\n      .columnsTemplate('1fr 1fr 1fr') // 设置列模板，每列宽度相等\n      .columnsGap(10) // 设置列间距\n      .rowsGap(10) // 设置行间距\n      .width('90%') // 设置宽度\n      .backgroundColor(0xFAEEE0) // 设置背景颜色\n      .height(300) // 设置高度\n      .editMode(true) // 设置Grid进入编辑模式\n      .onItemDragStart((event: ItemDragInfo, itemIndex: number) => { \n        this.text = this.numbers[itemIndex] // 设置拖拽过程中显示的文本\n        return this.pixelMapBuilder() // 返回拖拽过程中显示的图片\n      })\n      .onItemDrop((event: ItemDragInfo, itemIndex: number, insertIndex: number, isSuccess: boolean) => { \n        if (!isSuccess || insertIndex >= this.numbers.length) {\n          return\n        }\n        console.info('beixiang' + itemIndex + '', insertIndex + '') \n        this.changeIndex(itemIndex, insertIndex) // 交换数组中两个元素的位置\n      })\n    }.width('100%').margin({ top: 5 })\n  }\n}


/*\n实现一个网格布局组件，支持通过双指缩放手势动态调整列数。组件包含一个文本提示、一个网格布局以及一个手势识别器。网格布局中的每个单元格显示一个数字，并支持通过双指缩放手势调整列数。调整后的列数会被持久化存储。\n*/\n\n@Entry\n@Component\nstruct GridExample {\n  // 定义一个状态变量 numbers，用于存储显示的数字列表\n  @State numbers: String[] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19']\n  \n  // 定义一个状态变量 columns，用于存储当前的列数\n  @State columns: number = 2\n\n  // 组件即将显示时调用的方法，用于从AppStorage中读取上一次保存的列数\n  aboutToAppear() {\n    let lastCount = AppStorage.get<number>('columnsCount')\n    if (typeof lastCount != 'undefined') {\n      this.columns = lastCount\n    }\n  }\n\n  // 构建组件的UI结构\n  build() {\n    Column({ space: 5 }) {\n      // 显示一个文本提示，提示用户可以通过双指缩放改变列数\n      Row() {\n        Text('双指缩放改变列数')\n          .height('5%')\n          .margin({ top: 10, left: 20 })\n      }\n\n      // 创建一个网格布局，包含多个GridItem\n      Grid() {\n        // 使用ForEach循环生成网格中的每个单元格\n        ForEach(this.numbers, (day: string) => {\n          ForEach(this.numbers, (day: string) => {\n            GridItem() {\n              Text(day)\n                .fontSize(16)\n                .backgroundColor(0xF9CF93)\n                .width('100%')\n                .height(80)\n                .textAlign(TextAlign.Center)\n            }\n          }, (day: string) => day)\n        }, (day: string) => day)\n      }\n      .columnsTemplate('1fr '.repeat(this.columns)) // 根据columns变量动态设置列模板\n      .columnsGap(10) // 设置列之间的间距\n      .rowsGap(10) // 设置行之间的间距\n      .width('90%') // 设置网格的宽度\n      .scrollBar(BarState.Off) // 禁用滚动条\n      .backgroundColor(0xFAEEE0) // 设置网格的背景颜色\n      .height('100%') // 设置网格的高度\n      .cachedCount(3) // 设置缓存的GridItem数量\n\n      // 为网格添加动画效果\n      .animation({\n        duration: 300, // 动画持续时间\n        curve: Curve.Smooth // 动画曲线\n      })\n      // 为网格添加优先手势识别器，识别双指缩放手势\n      .priorityGesture(\n        PinchGesture()\n          .onActionEnd((event: GestureEvent) => {\n            console.info('end scale:' + event.scale)\n\n            // 根据缩放比例调整列数\n            if (event.scale > 2) {\n              this.columns--\n            } else if (event.scale < 0.6) {\n              this.columns++\n            }\n\n            // 限制列数的范围在1到4之间\n            this.columns = Math.min(4, Math.max(1, this.columns));\n            // 将调整后的列数保存到AppStorage中\n            AppStorage.setOrCreate<number>('columnsCount', this.columns)\n          })\n      )\n    }.width('100%').margin({ top: 5 }) // 设置Column的宽度和顶部外边距\n  }\n}


/*\n实现两个Grid布局组件，第一个Grid布局使用默认的行列模板，第二个Grid布局使用自定义的GridLayoutOptions来定义每个GridItem的位置和大小。\n*/\n\n@Entry\n@Component\nstruct GridExample {\n  @State numbers1: String[] = ['0', '1', '2', '3', '4'] // 第一个Grid布局的数据源\n  @State numbers2: String[] = ['0', '1', '2', '3', '4', '5'] // 第二个Grid布局的数据源\n\n  // 定义GridLayoutOptions，使用onGetRectByIndex方法自定义每个GridItem的位置和大小\n  layoutOptions3: GridLayoutOptions = {\n    regularSize: [1, 1], // 默认的GridItem大小为1x1\n    onGetRectByIndex: (index: number) => {\n      if (index == 0)\n        return [0, 0, 1, 1] // 第一个GridItem的位置和大小\n      else if (index == 1)\n        return [0, 1, 2, 2] // 第二个GridItem的位置和大小\n      else if (index == 2)\n        return [0, 3, 3, 3] // 第三个GridItem的位置和大小\n      else if (index == 3)\n        return [3, 0, 3, 3] // 第四个GridItem的位置和大小\n      else if (index == 4)\n        return [4, 3, 2, 2] // 第五个GridItem的位置和大小\n      else\n        return [5, 5, 1, 1] // 第六个GridItem的位置和大小\n    }\n  }\n\n  build() {\n    Column({ space: 5 }) {\n      // 第一个Grid布局，使用默认的行列模板\n      Grid() {\n        ForEach(this.numbers1, (day: string) => {\n          ForEach(this.numbers1, (day: string) => {\n            GridItem() {\n              Text(day)\n                .fontSize(16)\n                .backgroundColor(0xF9CF93)\n                .width('100%')\n                .height('100%')\n                .textAlign(TextAlign.Center)\n            }\n          }, (day: string) => day)\n        }, (day: string) => day)\n      }\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr') // 定义列模板，每列宽度相等\n      .rowsTemplate('1fr 1fr 1fr 1fr 1fr') // 定义行模板，每行高度相等\n      .columnsGap(10) // 列间距\n      .rowsGap(10) // 行间距\n      .width('90%')\n      .backgroundColor(0xFAEEE0)\n      .height(300)\n\n      Text('GridLayoutOptions的使用：onGetRectByIndex。').fontColor(0xCCCCCC).fontSize(9).width('90%')\n\n      // 第二个Grid布局，使用自定义的GridLayoutOptions\n      Grid(undefined, this.layoutOptions3) {\n        ForEach(this.numbers2, (day: string) => {\n          GridItem() {\n            Text(day)\n              .fontSize(16)\n              .backgroundColor(0xF9CF93)\n              .width('100%')\n              .height("100%")\n              .textAlign(TextAlign.Center)\n          }\n          .height("100%")\n          .width('100%')\n        }, (day: string) => day)\n      }\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr 1fr') // 定义列模板，每列宽度相等\n      .rowsTemplate('1fr 1fr 1fr 1fr 1fr 1fr') // 定义行模板，每行高度相等\n      .columnsGap(10) // 列间距\n      .rowsGap(10) // 行间距\n      .width('90%')\n      .backgroundColor(0xFAEEE0)\n      .height(300)\n    }.width('100%').margin({ top: 5 })\n  }\n}


/*\n实现一个可滚动的网格组件，支持分页滚动、滚动事件监听、滚动条显示与更新等功能。网格中显示的数字通过嵌套的ForEach循环生成，每个数字占据一个GridItem。\n*/\n\n@Entry\n@Component\nstruct GridExample {\n  @State numbers: String[] = ['0', '1', '2', '3', '4'] // 定义网格中显示的数字\n  scroller: Scroller = new Scroller() // 创建一个Scroller对象，用于控制滚动\n  @State gridPosition: number = 0 // 记录网格当前位置\n\n  build() {\n    Column({ space: 5 }) {\n      Text('scroll').fontColor(0xCCCCCC).fontSize(9).width('90%') // 显示一个文本标签\n\n      Grid(this.scroller) {\n        ForEach(this.numbers, (day: string) => {\n          ForEach(this.numbers, (day: string) => {\n            GridItem() {\n              Text(day)\n                .fontSize(16)\n                .backgroundColor(0xF9CF93)\n                .width('100%')\n                .height(80)\n                .textAlign(TextAlign.Center)\n            }\n          }, (day: string) => day)\n        }, (day: string) => day)\n      }\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr') // 设置网格的列模板，每列占据相等的宽度\n      .columnsGap(10) // 设置列间距\n      .rowsGap(10) // 设置行间距\n      .friction(0.6) // 设置滚动摩擦系数，影响滚动时的减速效果\n      .enableScrollInteraction(true) // 启用滚动交互\n      .supportAnimation(false) // 禁用滚动动画\n      .multiSelectable(false) // 禁用多选\n      .edgeEffect(EdgeEffect.Spring) // 设置边缘效果为弹性，当滚动到边缘时会有弹性效果\n      .scrollBar(BarState.On) // 显示滚动条\n      .scrollBarColor(Color.Grey) // 设置滚动条颜色\n      .scrollBarWidth(4) // 设置滚动条宽度\n      .width('90%') // 设置网格宽度\n      .backgroundColor(0xFAEEE0) // 设置背景颜色\n      .height(300) // 设置网格高度\n      .onScrollIndex((first: number, last: number) => {\n        console.info(first.toString()) // 打印当前可见区域的第一个元素索引\n        console.info(last.toString()) // 打印当前可见区域的最后一个元素索引\n      })\n      .onScrollBarUpdate((index: number, offset: number) => {\n        console.info("XXX" + 'Grid onScrollBarUpdate,index : ' + index.toString() + ",offset" + offset.toString()) // 打印滚动条更新时的索引和偏移量\n        return { totalOffset: (index / 5) * (80 + 10) - offset, totalLength: 80 * 5 + 10 * 4 } // 返回滚动条的总偏移量和总长度\n      })\n      .onDidScroll((scrollOffset: number, scrollState: ScrollState) => {\n        console.info(scrollOffset.toString()) // 打印当前滚动偏移量\n        console.info(scrollState.toString()) // 打印当前滚动状态\n      })\n      .onScrollStart(() => {\n        console.info("XXX" + "Grid onScrollStart") // 打印滚动开始事件\n      })\n      .onScrollStop(() => {\n        console.info("XXX" + "Grid onScrollStop") // 打印滚动停止事件\n      })\n      .onReachStart(() => {\n        this.gridPosition = 0 // 当滚动到顶部时，重置网格位置\n        console.info("XXX" + "Grid onReachStart") // 打印滚动到顶部事件\n      })\n      .onReachEnd(() => {\n        this.gridPosition = 2 // 当滚动到底部时，设置网格位置\n        console.info("XXX" + "Grid onReachEnd") // 打印滚动到底部事件\n      })\n\n      Button('next page')\n        .onClick(() => { \n          this.scroller.scrollPage({ next: true }) // 点击按钮时，滚动到下一页\n        })\n    }.width('100%').margin({ top: 5 })\n  }\n}


/*\n实现两个网格布局组件，分别使用不同的布局选项。第一个网格布局使用固定的规则大小和不规则索引，第二个网格布局使用回调函数动态计算不规则索引的大小。两个网格布局都支持多选和滚动功能。\n*/\n\n@Entry\n@Component\nstruct GridExample {\n  // 定义一个状态变量，存储网格中显示的数字\n  @State numbers: String[] = ['0', '1', '2', '3', '4']\n  \n  // 创建一个Scroller对象，用于控制网格的滚动\n  scroller: Scroller = new Scroller()\n\n  // 定义第一个网格布局选项，设置规则大小为1x1，不规则索引为0和6\n  layoutOptions1: GridLayoutOptions = {\n    regularSize: [1, 1],        // 规则大小为1x1\n    irregularIndexes: [0, 6],   // 不规则索引为0和6\n  }\n\n  // 定义第二个网格布局选项，设置规则大小为1x1，不规则索引为0和7，并通过回调函数动态计算不规则索引的大小\n  layoutOptions2: GridLayoutOptions = {\n    regularSize: [1, 1],        // 规则大小为1x1\n    irregularIndexes: [0, 7],   // 不规则索引为0和7\n    onGetIrregularSizeByIndex: (index: number) => {\n      if (index === 0) {\n        return [1, 5] // 第一个不规则索引的大小为1x5\n      }\n      return [1, index % 6 + 1] // 其他不规则索引的大小为1x(index % 6 + 1)\n    }\n  }\n\n  build() {\n    Column({ space: 5 }) {\n      // 第一个Grid组件，使用layoutOptions1\n      Grid(this.scroller, this.layoutOptions1) {\n        ForEach(this.numbers, (day: string) => {\n          ForEach(this.numbers, (day: string) => {\n            GridItem() {\n              Text(day)\n                .fontSize(16)\n                .backgroundColor(0xF9CF93)\n                .width('100%')\n                .height(80)\n                .textAlign(TextAlign.Center)\n            }.selectable(false) // 设置GridItem不可选\n          }, (day: string) => day)\n        }, (day: string) => day)\n      }\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr') // 设置列模板，每列宽度相等\n      .columnsGap(10) // 设置列间距\n      .rowsGap(10) // 设置行间距\n      .multiSelectable(true) // 设置多选功能\n      .scrollBar(BarState.Off) // 隐藏滚动条\n      .width('90%') // 设置宽度为父容器的90%\n      .backgroundColor(0xFAEEE0) // 设置背景颜色\n      .height(300) // 设置高度为300\n\n      Text('scroll').fontColor(0xCCCCCC).fontSize(9).width('90%') // 显示文本“scroll”\n\n      // 第二个Grid组件，使用layoutOptions2\n      Grid(undefined, this.layoutOptions2) {\n        ForEach(this.numbers, (day: string) => {\n          ForEach(this.numbers, (day: string) => {\n            GridItem() {\n              Text(day)\n                .fontSize(16)\n                .backgroundColor(0xF9CF93)\n                .width('100%')\n                .height(80)\n                .textAlign(TextAlign.Center)\n            }\n          }, (day: string) => day)\n        }, (day: string) => day)\n      }\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr') // 设置列模板，每列宽度相等\n      .columnsGap(10) // 设置列间距\n      .rowsGap(10) // 设置行间距\n      .scrollBar(BarState.Off) // 隐藏滚动条\n      .width('90%') // 设置宽度为父容器的90%\n      .backgroundColor(0xFAEEE0) // 设置背景颜色\n      .height(300) // 设置高度为300\n    }.width('100%').margin({ top: 5 }) // 设置Column的宽度为100%，顶部外边距为5\n  }\n}


/*\n实现一个展示不同列模板模式的网格布局组件，通过三种不同的列模板模式（auto-fill, auto-fit, auto-stretch）展示数据。\n每个模式下，数据项以网格形式排列，并根据设定的列宽和模式自动调整列数和间距。\n*/\n\n@Entry\n@Component\nstruct GridColumnsTemplate {\n  // 定义三个数据数组，分别用于三种不同的列模板模式\n  data: number[] = [0, 1, 2, 3, 4, 5]\n  data1: number[] = [0, 1, 2, 3, 4, 5]\n  data2: number[] = [0, 1, 2, 3, 4, 5]\n\n  build() {\n    Column({ space: 10 }) {\n      // 显示标题文本，说明auto-fill模式的功能\n      Text('auto-fill 根据设定的列宽自动计算列数').width('90%')\n      \n      // 使用auto-fill模式，根据设定的列宽自动计算列数\n      Grid() {\n        ForEach(this.data, (item: number) => {\n          GridItem() {\n            Text('N' + item).height(80) // 显示数据项的文本，高度为80\n          }\n          .backgroundColor(Color.Orange) // 设置背景颜色为橙色\n        })\n      }\n      .width('90%') // 设置网格宽度为父容器的90%\n      .border({ width: 1, color: Color.Black }) // 设置边框，宽度为1，颜色为黑色\n      .columnsTemplate('repeat(auto-fill, 70)') // 设置列模板为auto-fill，每列宽度为70\n      .columnsGap(10) // 设置列间距为10\n      .rowsGap(10) // 设置行间距为10\n      .height(150) // 设置网格高度为150\n\n      // 显示标题文本，说明auto-fit模式的功能\n      Text('auto-fit 先根据设定的列宽计算列数，余下的空间会均分到每一列中').width('90%')\n      \n      // 使用auto-fit模式，先根据设定的列宽计算列数，余下的空间会均分到每一列中\n      Grid() {\n        ForEach(this.data1, (item: number) => {\n          GridItem() {\n            Text('N' + item).height(80) // 显示数据项的文本，高度为80\n          }\n          .backgroundColor(Color.Orange) // 设置背景颜色为橙色\n        })\n      }\n      .width('90%') // 设置网格宽度为父容器的90%\n      .border({ width: 1, color: Color.Black }) // 设置边框，宽度为1，颜色为黑色\n      .columnsTemplate('repeat(auto-fit, 70)') // 设置列模板为auto-fit，每列宽度为70\n      .columnsGap(10) // 设置列间距为10\n      .rowsGap(10) // 设置行间距为10\n      .height(150) // 设置网格高度为150\n\n      // 显示标题文本，说明auto-stretch模式的功能\n      Text('auto-stretch 先根据设定的列宽计算列数，余下的空间会均分到每个列间距中').width('90%')\n      \n      // 使用auto-stretch模式，先根据设定的列宽计算列数，余下的空间会均分到每个列间距中\n      Grid() {\n        ForEach(this.data2, (item: number) => {\n          GridItem() {\n            Text('N' + item).height(80) // 显示数据项的文本，高度为80\n          }\n          .backgroundColor(Color.Orange) // 设置背景颜色为橙色\n        })\n      }\n      .width('90%') // 设置网格宽度为父容器的90%\n      .border({ width: 1, color: Color.Black }) // 设置边框，宽度为1，颜色为黑色\n      .columnsTemplate('repeat(auto-stretch, 70)') // 设置列模板为auto-stretch，每列宽度为70\n      .columnsGap(10) // 设置列间距为10\n      .rowsGap(10) // 设置行间距为10\n      .height(150) // 设置网格高度为150\n    }\n    .width('100%') // 设置列容器宽度为100%\n    .height('100%') // 设置列容器高度为100%\n  }\n}


/*\n实现一个包含多个嵌套滚动组件的复杂布局。顶层是一个Stack组件，包含一个Column组件和一个Row组件。Column组件中包含一个List组件，List组件中包含两个ListItem组件，每个ListItem组件中包含一个Grid组件。Grid组件中包含多个GridItem组件，用于展示不同类型的内容。通过触摸事件和滚动事件实现嵌套滚动效果。\n*/\n\n@Entry\n@Component\nstruct GridExample {\n  // 定义颜色数组，用于设置GridItem的背景颜色\n  @State colors: number[] = [0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F]\n  \n  // 定义数字数组，用于生成GridItem的内容\n  @State numbers: number[] = []\n  \n  // 定义垂直平移的偏移量，用于控制GridItem的平移效果\n  @State translateY: number = 0\n  \n  // 定义Scroller对象，用于控制List的滚动\n  private scroller: Scroller = new Scroller()\n  \n  // 定义Scroller对象，用于控制Grid的滚动\n  private gridScroller: Scroller = new Scroller()\n  \n  // 定义布尔变量，用于记录触摸事件是否为按下状态\n  private touchDown: boolean = false\n  \n  // 定义布尔变量，用于记录List的触摸事件是否为按下状态\n  private listTouchDown: boolean = false\n  \n  // 定义布尔变量，用于记录是否正在滚动\n  private scrolling: boolean = false\n\n  // 初始化数据，生成100个数字\n  aboutToAppear() {\n    for (let i = 0; i < 100; i++) {\n      this.numbers.push(i)\n    }\n  }\n\n  build() {\n    Stack() {\n      Column() {\n        Row() {\n          Text('Head')\n        }\n\n        Column() {\n          List({ scroller: this.scroller }) {\n            ListItem() {\n              Grid() {\n                GridItem() {\n                  Text('GoodsTypeList1')\n                }\n                .backgroundColor(this.colors[0]) // 设置GridItem的背景颜色\n                .columnStart(0) // 设置GridItem的起始列\n                .columnEnd(1) // 设置GridItem的结束列\n\n                GridItem() {\n                  Text('GoodsTypeList2')\n                }\n                .backgroundColor(this.colors[1])\n                .columnStart(0)\n                .columnEnd(1)\n\n                GridItem() {\n                  Text('GoodsTypeList3')\n                }\n                .backgroundColor(this.colors[2])\n                .columnStart(0)\n                .columnEnd(1)\n\n                GridItem() {\n                  Text('GoodsTypeList4')\n                }\n                .backgroundColor(this.colors[3])\n                .columnStart(0)\n                .columnEnd(1)\n\n                GridItem() {\n                  Text('GoodsTypeList5')\n                }\n                .backgroundColor(this.colors[4])\n                .columnStart(0)\n                .columnEnd(1)\n              }\n              .scrollBar(BarState.Off) // 关闭滚动条\n              .columnsGap(15) // 设置列间距\n              .rowsGap(10) // 设置行间距\n              .rowsTemplate('1fr 1fr 1fr 1fr 1fr') // 设置行模板\n              .columnsTemplate('1fr') // 设置列模板\n              .width('100%') // 设置宽度为100%\n              .height(200) // 设置高度为200\n            }\n\n            ListItem() {\n              Grid(this.gridScroller) {\n                ForEach(this.numbers, (item: number) => {\n                  GridItem() {\n                    Text(item + '')\n                      .fontSize(16) // 设置字体大小\n                      .backgroundColor(0xF9CF93) // 设置背景颜色\n                      .width('100%') // 设置宽度为100%\n                      .height('100%') // 设置高度为100%\n                      .textAlign(TextAlign.Center) // 设置文本居中对齐\n                  }\n                  .width('100%')\n                  .height(40)\n                  .shadow({ radius: 10, color: '#909399', offsetX: 1, offsetY: 1 }) // 设置阴影效果\n                  .borderRadius(10) // 设置圆角\n                  .translate({ x: 0, y: this.translateY }) // 设置平移效果\n                }, (item: string) => item)\n              }\n              .columnsTemplate('1fr 1fr') // 设置列模板\n              .friction(0.3) // 设置摩擦系数\n              .columnsGap(15) // 设置列间距\n              .rowsGap(10) // 设置行间距\n              .scrollBar(BarState.Off) // 关闭滚动条\n              .width('100%') // 设置宽度为100%\n              .height('100%') // 设置高度为100%\n              .layoutDirection(GridDirection.Column) // 设置布局方向为列\n              .nestedScroll({\n                scrollForward: NestedScrollMode.PARENT_FIRST, // 设置向前滚动时优先滚动父组件\n                scrollBackward: NestedScrollMode.SELF_FIRST // 设置向后滚动时优先滚动自身\n              })\n              .onTouch((event: TouchEvent) => {\n                if (event.type == TouchType.Down) {\n                  this.listTouchDown = true // 记录触摸事件为按下状态\n                } else if (event.type == TouchType.Up) {\n                  this.listTouchDown = false // 记录触摸事件为抬起状态\n                }\n              })\n            }\n          }\n          .scrollBar(BarState.Off) // 关闭滚动条\n          .edgeEffect(EdgeEffect.None) // 关闭边缘效果\n          .onTouch((event: TouchEvent) => {\n            if (event.type == TouchType.Down) {\n              this.touchDown = true // 记录触摸事件为按下状态\n            } else if (event.type == TouchType.Up) {\n              this.touchDown = false // 记录触摸事件为抬起状态\n            }\n          })\n          .onScrollFrameBegin((offset: number, state: ScrollState) => {\n            if (this.scrolling && offset > 0) {\n              let newOffset = this.scroller.currentOffset().yOffset\n              if (newOffset >= 590) {\n                this.gridScroller.scrollBy(0, offset) // 滚动Grid组件\n                return { offsetRemain: 0 } // 返回剩余偏移量为0\n              } else if (newOffset + offset > 590) {\n                this.gridScroller.scrollBy(0, newOffset + offset - 590)\n                return { offsetRemain: 590 - newOffset } // 返回剩余偏移量\n              }\n            }\n            return { offsetRemain: offset } // 返回剩余偏移量\n          })\n          .onScrollStart(() => {\n            if (this.touchDown && !this.listTouchDown) {\n              this.scrolling = true // 记录正在滚动\n            }\n          })\n          .onScrollStop(() => {\n            this.scrolling = false // 记录滚动停止\n          })\n        }\n        .width('100%') // 设置宽度为100%\n        .height('100%') // 设置高度为100%\n        .padding({ left: 10, right: 10 }) // 设置左右内边距\n      }\n\n      Row() {\n        Text('Top')\n          .width(30) // 设置宽度为30\n          .height(30) // 设置高度为30\n          .borderRadius(50) // 设置圆角\n      }\n      .padding(5) // 设置内边距\n      .borderRadius(50) // 设置圆角\n      .backgroundColor('#ffffff') // 设置背景颜色\n      .shadow({ radius: 10, color: '#909399', offsetX: 1, offsetY: 1 }) // 设置阴影效果\n      .margin({ right: 22, bottom: 15 }) // 设置外边距\n      .onClick(() => {\n        this.scroller.scrollTo({ xOffset: 0, yOffset: 0 }) // 滚动到顶部\n        this.gridScroller.scrollTo({ xOffset: 0, yOffset: 0 }) // 滚动到顶部\n      })\n    }\n    .align(Alignment.BottomEnd) // 设置对齐方式为右下角\n  }\n}