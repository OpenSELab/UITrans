Title: TreeView-信息展示-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-arkui-advanced-treeview-V5

Markdown Content:
树视图作为一种分层显示的列表，适合显示嵌套结构。拥有父列表项和子列表项，可展开或折叠。

用于效率型应用，如备忘录、电子邮件、图库中的侧边导航栏中。

说明

该组件从API Version 10开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

导入模块
----

1.  import { TreeView } from "@kit.ArkUI"

TreeView({ treeController: TreeController })

**装饰器类型：**@Component

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

TreeController
--------------

树视图组件的控制器，可以将此对象绑定至树视图组件，然后通过它控制树的节点信息，同一个控制器不可以控制多个树视图组件。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

### addNode

addNode(nodeParam?: NodeParam): void

点击某个节点后，调用该方法可以触发新增孩子节点。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**参数：**

### removeNode

removeNode(): void

点击某个节点后，调用该方法可以触发删除该节点。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

### modifyNode

modifyNode(): void

点击某个节点后，调用该方法可以触发修改该节点。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

### buildDone

buildDone(): void

建立树视图。节点增加完毕后，必须调用该方法，触发树信息的保存。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

### refreshNode

refreshNode(parentId: number, parentSubTitle: ResourceStr, currentSubtitle: ResourceStr): void

更新树视图。调用该方法，更新当前节点的信息。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**参数：**

名称

参数类型

必填

说明

parentId

number

是

父节点Id。

parentSubTitle

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

是

父节点副文本。

currentSubtitle

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

是

当前节点副文本。

NodeParam
---------

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

名称

类型

必填

说明

parentNodeId

number

否

父节点。

currentNodeId

number

否

当前子节点。

isFolder

boolean

否

是否是目录。默认值：false。true：是目录，false：不是目录。

icon

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

图标。

selectedIcon

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

选中图标。

editIcon

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

编辑图标。

primaryTitle

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

主标题。

secondaryTitle

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

副标题。

container

() =\> void

否

绑定在节点上的右键子组件，子组件由@Builder修饰。

TreeListenerManager
-------------------

树视图组件的监听器，可以将此对象绑定至树视图组件，然后通过它监听树的节点的变化，同一个监听器不可以控制多个树视图组件。

### getInstance

static getInstance(): TreeListenerManager

获取监听管理器单例对象。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**返回值**:

### getTreeListener

getTreeListener(): TreeListener

获取监听器。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**返回值**:

TreeListener
------------

树视图组件的监听器，可以将此对象绑定至树视图组件，然后通过它监听树的节点的变化，同一个监听器不可以控制多个树视图组件。

### on

on(type: TreeListenType, callback: (callbackParam: CallbackParam) =\> void): void;

注册监听。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**参数：**

### once

once(type: TreeListenType, callback: (callbackParam: CallbackParam) =\> void): void;

注册一次监听。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**参数：**

### off

off(type: TreeListenType, callback?: (callbackParam: CallbackParam) =\> void): void;

取消监听。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**参数：**

TreeListenType
--------------

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

名称

说明

NODE\_CLICK

监听节点点击事件。

NODE\_ADD

监听节点增加事件。

NODE\_DELETE

监听节点删除事件。

NODE\_MODIFY

监听节点修改事件。

NODE\_MOVE

监听节点移动事件。

CallbackParam
-------------

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

名称

类型

必填

说明

currentNodeId

number

是

当前子节点。

parentNodeId

number

否

父节点。

childIndex

number

否

子索引。

示例
--

1.  import { TreeController, TreeListener, TreeListenerManager, TreeListenType, NodeParam, TreeView, CallbackParam } from '@kit.ArkUI'

3.  @Entry
4.  @Component
5.  struct TreeViewDemo {
6.    private treeController: TreeController = new TreeController();
7.    private treeListener: TreeListener = TreeListenerManager.getInstance().getTreeListener();
8.    @State clickNodeId: number = 0;

10.    aboutToDisappear(): void {
11.      this.treeListener.off(TreeListenType.NODE\_CLICK, undefined);
12.      this.treeListener.off(TreeListenType.NODE\_ADD, undefined);
13.      this.treeListener.off(TreeListenType.NODE\_DELETE, undefined);
14.      this.treeListener.off(TreeListenType.NODE\_MOVE, undefined);
15.    }

17.    @Builder menuBuilder1() {
18.      Flex({ direction: FlexDirection.Column, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {
19.        Text('新增').fontSize(16).width(100).height(30).textAlign(TextAlign.Center)
20.          .onClick((event: ClickEvent) =\> {
21.            this.treeController.addNode();
22.          })
23.        Divider()
24.        Text('删除').fontSize(16).width(100).height(30).textAlign(TextAlign.Center)
25.          .onClick((event: ClickEvent) =\> {
26.            this.treeController.removeNode();
27.          })
28.        Divider()
29.        Text('重命名').fontSize(16).width(100).height(30).textAlign(TextAlign.Center)
30.          .onClick((event: ClickEvent) =\> {
31.            this.treeController.modifyNode();
32.          })
33.      }.width(100).border({width: 1, color: 0x80808a, radius: '16dp'})
34.    }

36.    aboutToAppear(): void {
37.      this.treeListener.on(TreeListenType.NODE\_CLICK, (callbackParam: CallbackParam) =\> {
38.        this.clickNodeId = callbackParam.currentNodeId;
39.      })
40.      this.treeListener.on(TreeListenType.NODE\_ADD, (callbackParam: CallbackParam) =\> {
41.        this.clickNodeId = callbackParam.currentNodeId;
42.      })
43.      this.treeListener.on(TreeListenType.NODE\_DELETE, (callbackParam: CallbackParam) =\> {
44.        this.clickNodeId = callbackParam.currentNodeId;
45.      })
46.      this.treeListener.once(TreeListenType.NODE\_MOVE, (callbackParam: CallbackParam) =\> {
47.        this.clickNodeId = callbackParam.currentNodeId;
48.      })

50.      let normalResource: Resource = $r('app.media.ic\_public\_collect\_normal');
51.      let selectedResource: Resource = $r('app.media.ic\_public\_collect\_selected');
52.      let editResource: Resource = $r('app.media.ic\_public\_collect\_edit');
53.      let nodeParam: NodeParam = { parentNodeId:-1, currentNodeId: 1, isFolder: true, icon: normalResource, selectedIcon: selectedResource,
54.        editIcon: editResource, primaryTitle: "目录1验证悬浮框自适应效果是否OK",
55.        secondaryTitle: "6" };
56.      this.treeController
57.        .addNode(nodeParam)
58.        .addNode({parentNodeId:1, currentNodeId: 2, isFolder: false, primaryTitle: "项目1\_1" })
59.        .addNode({ parentNodeId:-1, currentNodeId: 7, isFolder: true, primaryTitle: "目录2" })
60.        .addNode({ parentNodeId:-1, currentNodeId: 23, isFolder: true, icon: normalResource, selectedIcon: selectedResource,
61.          editIcon: editResource, primaryTitle: "目录3" })
62.        .addNode({ parentNodeId:-1, currentNodeId: 24, isFolder: false, primaryTitle: "项目4" })
63.        .addNode({ parentNodeId:-1, currentNodeId: 31, isFolder: true, icon: normalResource, selectedIcon: selectedResource,
64.          editIcon: editResource, primaryTitle: "目录5", secondaryTitle: "0" })
65.        .addNode({ parentNodeId:-1, currentNodeId: 32, isFolder: true, icon: normalResource, selectedIcon: selectedResource,
66.          editIcon: editResource, primaryTitle: "目录6", secondaryTitle: "0" })
67.        .addNode({ parentNodeId:32, currentNodeId: 35, isFolder: true, icon: normalResource, selectedIcon: selectedResource,
68.          editIcon: editResource, primaryTitle: "目录6-1", secondaryTitle: "0" })
69.        .addNode({ parentNodeId:-1, currentNodeId: 33, isFolder: true, icon: normalResource, selectedIcon: selectedResource,
70.          editIcon: editResource, primaryTitle: "目录7", secondaryTitle: "0" })
71.        .addNode({ parentNodeId:33, currentNodeId: 34, isFolder: false, primaryTitle: "项目8" })
72.        .addNode({ parentNodeId:-1, currentNodeId: 36, isFolder: false, primaryTitle: "项目9" })
73.        .buildDone();
74.      this.treeController.refreshNode(-1, "父节点", "子节点");
75.    }

77.    build() {
78.      Column(){
79.        SideBarContainer(SideBarContainerType.Embed)
80.        {
81.          TreeView({ treeController: this.treeController })
82.          Row() {
83.            Divider().vertical(true).strokeWidth(2).color(0x000000).lineCap(LineCapStyle.Round)
84.            Column({ space: 30 }) {
85.              Text('ClickNodeId=' + this.clickNodeId).fontSize('16fp')
86.              Button('Add', { type: ButtonType.Normal, stateEffect: true })
87.                .borderRadius(8).backgroundColor(0x317aff).width(90)
88.                .onClick((event: ClickEvent) =\> {
89.                  this.treeController.addNode();
90.                })
91.              Button('Modify', { type: ButtonType.Normal, stateEffect: true })
92.                .borderRadius(8).backgroundColor(0x317aff).width(90)
93.                .onClick((event: ClickEvent) =\> {
94.                  this.treeController.modifyNode();
95.                })
96.              Button('Remove', { type: ButtonType.Normal, stateEffect: true })
97.                .borderRadius(8).backgroundColor(0x317aff).width(120)
98.                .onClick((event: ClickEvent) =\> {
99.                  this.treeController.removeNode();
100.                })
101.            }.height('100%').width('70%').alignItems(HorizontalAlign.Start).margin(10)
102.          }
103.        }
104.        .focusable(true)
105.        .showControlButton(false)
106.        .showSideBar(true)
107.      }
108.    }}

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114457.36730125137389735759862270381472:50001231000000:2800:B947262F89750014D291684E2C7AC4FCC9018DD6E8579D27FEE16095720D8D1A.png?needInitFileName=true?needInitFileName=true)
