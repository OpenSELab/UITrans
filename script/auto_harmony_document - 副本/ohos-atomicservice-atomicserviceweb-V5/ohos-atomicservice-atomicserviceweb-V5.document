Title: AtomicServiceWeb-原子化服务-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-atomicservice-atomicserviceweb-V5

Markdown Content:
为开发者提供满足定制化诉求的Web高阶组件，屏蔽原生Web组件中无需关注的接口，并提供JS扩展能力。

说明

*   该组件从API Version 12开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。
*   示例效果请以真机运行为准，当前IDE预览器不支持。

需要权限
----

访问在线网页时需添加网络权限：ohos.permission.INTERNET，具体申请方式请参考[声明权限](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/declare-permissions-V5)。

导入模块
----

1.  import { AtomicServiceWeb } from '@kit.ArkUI';

1.  AtomicServiceWeb({
2.    src: ResourceStr,
3.    controller: AtomicServiceWebController,
4.    navPathStack?: NavPathStack,
5.    mixedMode?: MixedMode,
6.    darkMode?: WebDarkMode,
7.    forceDarkAccess?: boolean,
8.    onMessage?: Callback<OnMessageEvent\>,
9.    onErrorReceive?: Callback<OnErrorReceiveEvent\>,
10.    onHttpErrorReceive?: Callback<OnHttpErrorReceiveEvent\>,
11.    onPageBegin?: Callback<OnPageBeginEvent\>,
12.    onPageEnd?: Callback<OnPageEndEvent\>,
13.    onControllerAttached?: Callback<void\>,
14.    onLoadIntercept?: Callback<OnLoadInterceptEvent, boolean\>,
15.    onProgressChange?: Callback<OnProgressChangeEvent\>
16.  })

**装饰器类型：**@Component

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数**：

名称

类型

必填

装饰器类型

描述

src

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

是

\-

网页资源地址，访问网络资源需要在AGC配置业务域名，访问本地资源仅支持包内文件（$rawfile）。不支持通过状态变量（例如@State）动态更新地址。加载的网页中支持通过JS SDK提供的接口调用系统能力，具体以JS SDK为准。

controller

[AtomicServiceWebController](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-atomicservice-atomicserviceweb-V5#atomicservicewebcontroller)

是

@ObjectLink

通过AtomicServiceWebController可以控制AtomicServiceWeb组件各种行为。

navPathStack

[NavPathStack](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navigation-V5#navpathstack10)

否

\-

路由栈信息。当使用NavDestination作为页面的根容器时，需传入NavDestination容器对应的NavPathStack处理页面路由。

mixedMode

[MixedMode](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-web-V5#mixedmode%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

否

@Prop

设置是否允许加载超文本传输协议（HTTP）和超文本传输安全协议（HTTPS）混合内容，默认不允许加载HTTP和HTTPS混合内容。

darkMode

[WebDarkMode](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-web-V5#webdarkmode9%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

否

@Prop

设置Web深色模式，默认关闭。

forceDarkAccess

boolean

否

@Prop

设置网页是否开启强制深色模式。默认关闭。该属性仅在darkMode开启深色模式时生效。

onMessage

Callback<[OnMessageEvent](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-atomicservice-atomicserviceweb-V5#onmessageevent)\>

否

\-

H5页面通过JS SDK的postMessage()发送消息后，Web组件对应的页面返回或销毁时，触发该回调。

onErrorReceive

Callback<[OnErrorReceiveEvent](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-atomicservice-atomicserviceweb-V5#onerrorreceiveevent)\>

否

\-

网页加载遇到错误时触发该回调。出于性能考虑，建议此回调中尽量执行简单逻辑。在无网络的情况下，触发此回调。

onHttpErrorReceive

Callback<[OnHttpErrorReceiveEvent](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-atomicservice-atomicserviceweb-V5#onhttperrorreceiveevent)\>

否

\-

网页加载资源遇到的HTTP错误（响应码\>\=400)时触发该回调。

onPageBegin

Callback<[OnPageBeginEvent](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-atomicservice-atomicserviceweb-V5#onpagebeginevent)\>

否

\-

网页开始加载时触发该回调，且只在主frame触发，iframe或者frameset的内容加载时不会触发此回调。

onPageEnd

Callback<[OnPageEndEvent](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-atomicservice-atomicserviceweb-V5#onpageendevent)\>

否

\-

网页加载完成时触发该回调，且只在主frame触发。

onControllerAttached

Callback<void\>

否

\-

当Controller成功绑定到Web组件时触发该回调。

onLoadIntercept

Callback<[OnLoadInterceptEvent](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-web-V5#onloadinterceptevent12), boolean\>

否

\-

当Web组件加载url之前触发该回调，用于判断是否阻止此次访问。默认允许加载。

onProgressChange

Callback<[OnProgressChangeEvent](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-web-V5#onprogresschangeevent12)\>

否

\-

网页加载进度变化时触发该回调。

AtomicServiceWebController
--------------------------

通过AtomicServiceWebController可以控制AtomicServiceWeb组件各种行为。一个AtomicServiceWebController对象只能控制一个AtomicServiceWeb组件，且必须在AtomicServiceWeb组件和AtomicServiceWebController绑定后，才能调用AtomicServiceWebController上的方法。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### constructor

constructor()

用于创建 AtomicServiceWebController 对象的构造函数。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### getUserAgent

getUserAgent(): string

获取当前默认用户代理。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

**错误码：**

以下错误码的详细介绍请参见[错误码](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-webview-V5)。

错误码ID

错误信息

17100001

Init error. The AtomicServiceWebController must be associated with a AtomicServiceWeb component.

### getCustomUserAgent

getCustomUserAgent(): string

获取自定义用户代理。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

**错误码：**

以下错误码的详细介绍请参见[错误码](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-webview-V5).

错误码ID

错误信息

17100001

Init error. The AtomicServiceWebController must be associated with a AtomicServiceWeb component.

### setCustomUserAgent

setCustomUserAgent(userAgent: string): void

设置自定义用户代理，会覆盖系统的用户代理。

建议在onControllerAttached回调事件中设置UserAgent，设置方式请参考示例。不建议将UserAgent设置在onLoadIntercept回调事件中，会概率性出现设置失败。

说明

当Web组件src设置了url，且未在onControllerAttached回调事件中设置UserAgent。再调用setCustomUserAgent方法时，可能会出现加载的页面与实际设置UserAgent不符的异常现象。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

userAgent

string

是

用户自定义代理信息。建议先使用[getUserAgent](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-atomicservice-atomicserviceweb-V5#getuseragent)获取当前默认用户代理，在此基础上追加自定义用户代理信息。

**错误码：**

以下错误码的详细介绍请参见[错误码](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-webview-V5).

错误码ID

错误信息

17100001

Init error. The AtomicServiceWebController must be associated with a AtomicServiceWeb component.

### refresh

refresh(): void

调用此接口通知AtomicServiceWeb组件刷新网页。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**错误码：**

以下错误码的详细介绍请参见[错误码](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-webview-V5).

错误码ID

错误信息

17100001

Init error. The AtomicServiceWebController must be associated with a AtomicServiceWeb component.

### forward

forward(): void

按照历史栈，前进一个页面。一般结合[accessForward](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-atomicservice-atomicserviceweb-V5#accessforward)一起使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**错误码：**

以下错误码的详细介绍请参见[错误码](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-webview-V5).

错误码ID

错误信息

17100001

Init error. The AtomicServiceWebController must be associated with a AtomicServiceWeb component.

### backward

backward(): void

按照历史栈，后退一个页面。一般结合[accessBackward](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-atomicservice-atomicserviceweb-V5#accessbackward)一起使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**错误码：**

以下错误码的详细介绍请参见[错误码](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-webview-V5).

错误码ID

错误信息

17100001

Init error. The AtomicServiceWebController must be associated with a AtomicServiceWeb component.

### accessForward

accessForward(): boolean

当前页面是否可前进，即当前页面是否有前进历史记录。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

类型

说明

boolean

可以前进返回true，否则返回false。

**错误码：**

以下错误码的详细介绍请参见[错误码](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-webview-V5).

错误码ID

错误信息

17100001

Init error. The AtomicServiceWebController must be associated with a AtomicServiceWeb component.

### accessBackward

accessBackward(): boolean

当前页面是否可后退，即当前页面是否有返回历史记录。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

类型

说明

boolean

可以后退返回true，否则返回false。

**错误码：**

以下错误码的详细介绍请参见[错误码](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-webview-V5).

错误码ID

错误信息

17100001

Init error. The AtomicServiceWebController must be associated with a AtomicServiceWeb component.

### accessStep

accessStep(step: number): boolean

当前页面是否可前进或者后退给定的step步。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

step

number

是

要跳转的步数，正数代表前进，负数代表后退。

**返回值：**

类型

说明

boolean

页面是否可前进或者后退给定的step步

**错误码：**

以下错误码的详细介绍请参见[错误码](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-webview-V5).

错误码ID

错误信息

17100001

Init error. The AtomicServiceWebController must be associated with a AtomicServiceWeb component.

### loadUrl

loadUrl(url: string | Resource, headers?: Array<WebHeader\>): void

加载指定的URL。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

url

string | [Resource](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resource)

是

需要加载的 URL。

headers

Array<[WebHeader](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-atomicservice-atomicserviceweb-V5#webheader)\>

否

URL的附加HTTP请求头。

**错误码：**

以下错误码的详细介绍请参见[错误码](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-webview-V5).

错误码ID

错误信息

17100001

Init error. The AtomicServiceWebController must be associated with a AtomicServiceWeb component.

17100002

Invalid url.

17100003

Invalid resource path or file type.

Web组件返回的请求/响应头对象。

名称

类型

可读

可写

说明

headerKey

string

是

是

请求/响应头的key。

headerValue

string

是

是

请求/响应头的value。

OnMessageEvent
--------------

定义页面回退或销毁时触发该回调。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

data

Object\[\]

是

消息列表。

OnErrorReceiveEvent
-------------------

定义网页加载遇到错误时触发该回调。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

OnHttpErrorReceiveEvent
-----------------------

定义网页收到加载资源加载HTTP错误时触发。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

OnPageBeginEvent
----------------

定义网页加载开始时触发的函数。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

url

string

是

页面的URL地址。

OnPageEndEvent
--------------

定义网页加载结束时触发的函数。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

url

string

是

页面的URL地址。

示例
--

### 示例1

加载本地网页。

2.  import { AtomicServiceWeb, AtomicServiceWebController } from '@kit.ArkUI';

4.  @Entry
5.  @Component
6.  struct WebComponent {
7.    @State controller: AtomicServiceWebController = new AtomicServiceWebController();

9.    build() {
10.      Column() {
11.        AtomicServiceWeb({ src: $rawfile("index.html"), controller: this.controller })
12.      }
13.    }
14.  }

### 示例2

加载在线网页。

2.  import { AtomicServiceWeb, AtomicServiceWebController } from '@kit.ArkUI';

4.  @Entry
5.  @Component
6.  struct WebComponent {
7.      @State controller: AtomicServiceWebController = new AtomicServiceWebController();

9.      build() {
10.          Column() {
11.              AtomicServiceWeb({ src: 'https://www.example.com', controller: this.controller })
12.          }
13.      }
14.  }

### 示例3

NavDestination容器中加载网页。

2.  import { AtomicServiceWeb, AtomicServiceWebController } from '@kit.ArkUI';

4.  @Builder
5.  export function WebComponentBuilder(name: string, param: Object) {
6.    WebComponent()
7.  }

9.  @Component
10.  struct WebComponent {
11.    navPathStack: NavPathStack = new NavPathStack();
12.    @State controller: AtomicServiceWebController = new AtomicServiceWebController();

14.    build() {
15.      NavDestination() {
16.        AtomicServiceWeb({ src: $rawfile("index.html"), controller: this.controller, navPathStack: this.navPathStack })
17.      }
18.      .onReady((context: NavDestinationContext) =\> {
19.        this.navPathStack = context.pathStack;
20.      })
21.    }
22.  }

### 示例4

设置onMessage()事件回调。

2.  import { AtomicServiceWeb, AtomicServiceWebController, OnMessageEvent } from '@kit.ArkUI';

4.  @Entry
5.  @Component
6.  struct WebComponent {
7.    @State controller: AtomicServiceWebController = new AtomicServiceWebController();

9.    build() {
10.      Column() {
11.        AtomicServiceWeb({
12.          src: $rawfile("index.html"),
13.          controller: this.controller,

15.          onMessage: (event: OnMessageEvent) =\> {
16.            console.log(\`\[AtomicServiceWebLog\] onMessage data=${JSON.stringify(event.data)}\`);
17.          }
18.        })
19.      }
20.    }
21.  }

1.  // index.html
2.  <!DOCTYPE html\>
3.  <html\>
4.  <meta charset\="utf-8"\>

6.  <script src\="../js/atomicservice-sdk.js" type\="text/javascript"\></script\>
7.  <body\>
8.  <h1\>JS SDK - postMessage()</h1\>
9.  <br/\>
10.  <button type\="button" onclick\="postMessage({ name: 'Jerry', age: 18 });"\>发送消息</button\>
11.  <br/\>
12.  <button type\="button" onclick\="back();"\>返回上一页</button\>
13.  </body\>
14.  <script type\="text/javascript"\>
15.      function postMessage(data) {

17.          has.asWeb.postMessage({
18.              data: data,
19.              callback: (err, res) =\> {
20.                  if (err) {
21.                      console.error('\[AtomicServiceWebLog H5\] postMessage error err=' + JSON.stringify(err));
22.                  } else {
23.                      console.log('\[AtomicServiceWebLog H5\] postMessage success res=' + JSON.stringify(res));
24.                  }
25.              }
26.          });
27.      }

29.      function back() {

31.          has.router.back({
32.              delta: 1
33.          });
34.      }
35.  </script\>
36.  </html\>

### 示例5

设置网页加载事件回调。

2.  import {
3.    AtomicServiceWeb,
4.    AtomicServiceWebController,
5.    OnErrorReceiveEvent,
6.    OnHttpErrorReceiveEvent,
7.    OnPageBeginEvent,
8.    OnPageEndEvent
9.  } from '@kit.ArkUI';

11.  @Entry
12.  @Component
13.  struct WebComponent {
14.    @State controller: AtomicServiceWebController = new AtomicServiceWebController();

16.    build() {
17.      Column() {
18.        AtomicServiceWeb({
19.          src: $rawfile('index.html'),
20.          controller: this.controller,

22.          onErrorReceive: (event: OnErrorReceiveEvent) =\> {
23.            console.log(\`AtomicServiceWebLog onErrorReceive event=${JSON.stringify({
24.              requestUrl: event.request?.getRequestUrl(),
25.              requestMethod: event.request?.getRequestMethod(),
26.              errorCode: event.error?.getErrorCode(),
27.              errorInfo: event.error?.getErrorInfo()
28.            })}\`);
29.          },

31.          onHttpErrorReceive: (event: OnHttpErrorReceiveEvent) =\> {
32.            console.log(\`AtomicServiceWebLog onHttpErrorReceive event=${JSON.stringify({
33.              requestUrl: event.request?.getRequestUrl(),
34.              requestMethod: event.request?.getRequestMethod(),
35.              responseCode: event.response?.getResponseCode(),
36.              responseData: event.response?.getResponseData(),
37.            })}\`);
38.          },

40.          onPageBegin: (event: OnPageBeginEvent) =\> {
41.            console.log(\`AtomicServiceWebLog onPageBegin event=${JSON.stringify({
42.              url: event.url
43.            })}\`);
44.          },

46.          onPageEnd: (event: OnPageEndEvent) =\> {
47.            console.log(\`AtomicServiceWebLog onPageEnd event=${JSON.stringify({
48.              url: event.url
49.            })}\`);
50.          }
51.        })
52.      }
53.    }
54.  }

### 示例6

AtomicServiceWeb跟AtomicServiceWebController的使用示例。

2.  import {
3.    AtomicServiceWeb,
4.    AtomicServiceWebController,
5.    OnErrorReceiveEvent,
6.    OnHttpErrorReceiveEvent,
7.    OnPageBeginEvent,
8.    OnPageEndEvent,
9.    OnMessageEvent,
10.    OnLoadInterceptEvent,
11.    OnProgressChangeEvent
12.  } from '@kit.ArkUI';

14.  @Entry
15.  @Component
16.  struct WebComponent {
17.    @State darkMode: WebDarkMode = WebDarkMode.On;
18.    @State forceDarkAccess: boolean = true;
19.    @State mixedMode: MixedMode = MixedMode.None;
20.    @State controller: AtomicServiceWebController = new AtomicServiceWebController();
21.    @State num: number = 1;

23.    build() {
24.      Column() {
25.        Button('accessForward').onClick(() =\> {
26.          console.log(\`AtomicServiceWebLog accessForward = ${this.controller.accessForward()}\`);
27.        })
28.        Button('accessBackward').onClick(() =\> {
29.          console.log(\`AtomicServiceWebLog accessBackward = ${this.controller.accessBackward()}\`);
30.        })
31.        Button('accessStep').onClick(() =\> {
32.          console.log(\`AtomicServiceWebLog accessStep = ${this.controller.accessStep(1)}\`);
33.        })
34.        Button('forward').onClick(() =\> {
35.          console.log(\`AtomicServiceWebLog forward = ${this.controller.forward()}\`);
36.        })
37.        Button('backward').onClick(() =\> {
38.          console.log(\`AtomicServiceWebLog backward = ${this.controller.backward()}\`);
39.        })
40.        Button('refresh').onClick(() =\> {
41.          console.log(\`AtomicServiceWebLog refresh = ${this.controller.refresh()}\`);
42.        })
43.        Button('loadUrl').onClick(() =\> {
44.          console.log(\`AtomicServiceWebLog loadUrl = ${this.controller.loadUrl('https://www.baidu.com/')}\`);
45.        })
46.        Button('深色模式').onClick(() =\> {
47.          this.forceDarkAccess = !this.forceDarkAccess;
48.        })
49.        Button('mixedMode').onClick(() =\> {
50.          this.mixedMode = this.mixedMode == MixedMode.None ? MixedMode.All : MixedMode.None;
51.        })
52.        Button('点击').onClick(() =\> {
53.          console.log(\`AtomicServiceWebLog getUserAgent = ${this.controller.getUserAgent()}\`);
54.          console.log(\`AtomicServiceWebLog getCustomUserAgent = ${this.controller.getCustomUserAgent()}\`);
55.          this.controller.setCustomUserAgent('test' + this.num++);

57.          console.log(\`AtomicServiceWebLog getUserAgent after set = ${this.controller.getUserAgent()}\`);
58.          console.log(\`AtomicServiceWebLog getCustomUserAgent after set = ${this.controller.getCustomUserAgent()}\`);
59.        })
60.        AtomicServiceWeb({
61.          src: 'https://www.example.com',
62.          mixedMode: this.mixedMode,
63.          darkMode: this.darkMode,
64.          forceDarkAccess: this.forceDarkAccess,
65.          controller: this.controller,
66.          onControllerAttached: () =\> {
67.            console.log("AtomicServiceWebLog onControllerAttached call back success");
68.          },
69.          onLoadIntercept: (event: OnLoadInterceptEvent) =\> {
70.            console.log("AtomicServiceWebLog onLoadIntercept call back success " + JSON.stringify({
71.              getRequestUrl: event.data.getRequestUrl(),
72.              getRequestMethod: event.data.getRequestMethod(),
73.              getRequestHeader: event.data.getRequestHeader(),
74.              isRequestGesture: event.data.isRequestGesture(),
75.              isMainFrame: event.data.isMainFrame(),
76.              isRedirect: event.data.isRedirect(),
77.            }))
78.            return false;
79.          },
80.          onProgressChange: (event: OnProgressChangeEvent) =\> {
81.            console.log("AtomicServiceWebLog onProgressChange call back success " + JSON.stringify(event));
82.          },
83.          onMessage: (event: OnMessageEvent) =\> {
84.            console.log("onMessage call back success " + JSON.stringify(event));
85.          },
86.          onPageBegin: (event: OnPageBeginEvent) =\> {
87.            console.log("onPageBegin call back success " + JSON.stringify(event));
88.          },
89.          onPageEnd: (event: OnPageEndEvent) =\> {
90.            console.log("onPageEnd call back success " + JSON.stringify(event));
91.          },
92.          onHttpErrorReceive: (event: OnHttpErrorReceiveEvent) =\> {
93.            console.log("onHttpErrorReceive call back success " + JSON.stringify(event));
94.          },
95.          onErrorReceive: (event: OnErrorReceiveEvent) =\> {
96.            console.log("onErrorReceive call back success " + JSON.stringify(event));
97.          }
98.        })
99.      }
100.    }
101.  }
