/*\n实现一个日期选择器组件，该组件支持内联日期选择功能，并能够在日期变化时触发回调函数，输出当前选择的日期。\n*/\n\n// 导入必要的模块和组件\nimport { CounterType, CounterComponent, DateData } from '@kit.ArkUI';\n\n// 使用@Entry和@Component装饰器定义一个名为DataStyleExample的组件\n@Entry\n@Component\nstruct DataStyleExample {\n  // 构建方法，定义组件的UI结构\n  build() {\n    // 使用Column布局组件，垂直排列子组件\n    Column() {\n      // 使用CounterComponent组件，传入配置选项\n      CounterComponent({\n        options: {\n          // 设置计数器类型为内联日期选择器\n          type: CounterType.INLINE_DATE,\n          // 配置日期选项\n          dateOptions: {\n            // 设置初始年份为2016年\n            year: 2016,\n            // 定义日期变化时的回调函数\n            onDateChange: (date: DateData) => {\n              // 在控制台输出当前选择的日期\n              console.log("onDateChange Date: " + date.toString());\n            }\n          }\n        }\n      })\n    }\n  }\n}


/*\n实现一个计数器组件，用于展示和调整价格。该组件支持在列表中使用，具有最小值、最大值和初始值的设置。\n*/\n\n// 导入计数器组件及其类型定义\nimport { CounterType, CounterComponent } from '@kit.ArkUI';\n\n// 使用@Entry和@Component装饰器定义一个名为ListCounterExample的组件\n@Entry\n@Component\nstruct ListCounterExample {\n  // 构建方法，用于定义组件的UI结构\n  build() {\n    // 使用Column布局组件，垂直排列子组件\n    Column() {\n      // 使用CounterComponent组件，传入配置选项\n      CounterComponent({\n        options: {\n          // 设置计数器类型为列表类型\n          type: CounterType.LIST,\n          // 配置计数器的数字选项\n          numberOptions: {\n            // 设置计数器的标签为“价格”\n            label: "价格",\n            // 设置计数器的最小值为0\n            min: 0,\n            // 设置计数器的初始值为5\n            value: 5,\n            // 设置计数器的最大值为10\n            max: 10\n          }\n        }\n      })\n    }\n  }\n}


/*\n实现一个紧凑型的计数器组件，用户可以通过点击按钮增加或减少数值，数值的范围、步长、初始值等都可以自定义。\n*/\n\n// 导入计数器组件及其类型\nimport { CounterType, CounterComponent } from '@kit.ArkUI';\n\n// 使用@Entry和@Component装饰器定义一个名为CompactCounterExample的组件\n@Entry\n@Component\nstruct CompactCounterExample {\n  // build方法用于构建组件的UI结构\n  build() {\n    // 使用Column容器来垂直排列子组件\n    Column() {\n      // 创建一个CounterComponent实例，并传入配置选项\n      CounterComponent({\n        options: {\n          // 设置计数器类型为紧凑型\n          type: CounterType.COMPACT,\n          // 配置计数器的数值选项\n          numberOptions: {\n            // 设置计数器的标签为“数量”\n            label: "数量",\n            // 设置计数器的初始值为10\n            value: 10,\n            // 设置计数器允许的最小值为0\n            min: 0,\n            // 设置计数器允许的最大值为100\n            max: 100,\n            // 设置计数器每次增加或减少的步长为10\n            step: 10\n          }\n        }\n      })\n    }\n  }\n}


/*\n实现一个计数器组件，支持内联样式，可以设置初始值、最小值、最大值、步长，并且可以在值变化时触发回调函数。\n*/\n\n// 导入计数器组件及其类型\nimport { CounterType, CounterComponent } from '@kit.ArkUI';\n\n// 使用@Entry和@Component装饰器定义一个入口组件\n@Entry\n@Component\nstruct NumberStyleExample {\n  // 构建方法，定义组件的UI结构\n  build() {\n    // 使用Column布局组件，垂直排列子组件\n    Column() {\n      // 创建一个CounterComponent组件实例\n      CounterComponent({\n        // 配置计数器组件的选项\n        options: {\n          // 设置计数器类型为内联样式\n          type: CounterType.INLINE,\n          // 配置内联样式的具体选项\n          inlineOptions: {\n            // 设置计数器的初始值为100\n            value: 100,\n            // 设置计数器的最小值为10\n            min: 10,\n            // 设置计数器的步长为2\n            step: 2,\n            // 设置计数器的最大值为1000\n            max: 1000,\n            // 设置计数器文本的宽度为100\n            textWidth: 100,\n            // 设置值变化时的回调函数\n            onChange: (value: number) => {\n              // 在控制台输出变化的值\n              console.log("onDateChange Date: " + value.toString());\n            }\n          }\n        }\n      })\n    }\n  }\n}


/*\n实现一个包含四种不同类型Counter组件的页面布局，分别为列表型、紧凑型、数字内联型和日期内联型。每个Counter组件支持不同的配置选项，包括方向、类型、数值范围、步长、标签等。页面整体布局为垂直排列，居中对齐。\n*/\n\n// 导入必要的模块和组件\nimport { CounterType, CounterComponent, DateData } from '@kit.ArkUI';\n\n// 定义入口组件\n@Entry\n@Component\nstruct CounterPage {\n  // 定义状态变量，用于控制Counter组件的显示方向\n  @State currentDirection: Direction = Direction.Rtl;\n\n  build() {\n    // 使用Column布局，垂直排列子组件\n    Column({}) {\n\n      // 列表型Counter组件\n      CounterComponent({\n        options: {\n          // 设置Counter组件的显示方向\n          direction: this.currentDirection,\n          // 设置Counter组件的类型为列表型\n          type: CounterType.LIST,\n          // 设置数值相关的选项\n          numberOptions: {\n            // 设置标签为“价格”\n            label: "价格",\n            // 设置最小值为0\n            min: 0,\n            // 设置初始值为5\n            value: 5,\n            // 设置最大值为10\n            max: 10,\n          }\n        }\n      })\n      // 设置组件宽度为80%\n      .width('80%')\n\n      // 紧凑型Counter组件\n      CounterComponent({\n        options: {\n          // 设置Counter组件的显示方向\n          direction: this.currentDirection,\n          // 设置Counter组件的类型为紧凑型\n          type: CounterType.COMPACT,\n          // 设置数值相关的选项\n          numberOptions: {\n            // 设置标签为“数量”\n            label: "数量",\n            // 设置初始值为10\n            value: 10,\n            // 设置最小值为0\n            min: 0,\n            // 设置最大值为100\n            max: 100,\n            // 设置步长为10\n            step: 10\n          }\n        }\n      })\n      // 设置组件上边距为20\n      .margin({ top: 20 })\n\n      // 数字内联型Counter组件\n      CounterComponent({\n        options: {\n          // 设置Counter组件的类型为数字内联型\n          type: CounterType.INLINE,\n          // 设置Counter组件的显示方向\n          direction: this.currentDirection,\n          // 设置内联数值相关的选项\n          inlineOptions: {\n            // 设置初始值为100\n            value: 100,\n            // 设置最小值为10\n            min: 10,\n            // 设置步长为2\n            step: 2,\n            // 设置最大值为1000\n            max: 1000,\n            // 设置文本宽度为100\n            textWidth: 100,\n            // 设置数值变化时的回调函数\n            onChange: (value: number) => {\n              console.log("onDateChange Date: " + value.toString());\n            }\n          }\n        }\n      })\n      // 设置组件上边距为20\n      .margin({ top: 20 })\n\n      // 日期内联型Counter组件\n      CounterComponent({\n        options: {\n          // 设置Counter组件的显示方向\n          direction: this.currentDirection,\n          // 设置Counter组件的类型为日期内联型\n          type: CounterType.INLINE_DATE,\n          // 设置日期相关的选项\n          dateOptions: {\n            // 设置初始年份为2024\n            year: 2024,\n            // 设置日期变化时的回调函数\n            onDateChange: (date: DateData) => {\n              console.log("onDateChange Date: " + date.toString());\n            }\n          }\n        }\n      })\n      // 设置组件上边距为20\n      .margin({ top: 20 })\n    }\n    // 设置Column组件的宽度为100%\n    .width('100%')\n    // 设置Column组件的高度为100%\n    .height('100%')\n    // 设置Column组件的内容垂直居中\n    .justifyContent(FlexAlign.Center)\n    // 设置Column组件的内容水平居中\n    .alignItems(HorizontalAlign.Center)\n  }\n}