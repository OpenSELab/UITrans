/*\n实现一个网格布局组件，展示数字和特定文本的排列。网格布局由5列和5行组成，每个单元格显示一个数字或特定文本，并具有不同的背景颜色。\n*/\n\n@Entry\n@Component\nstruct GridItemExample {\n  @State numbers: string[] = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"]\n\n  build() {\n    Column() {\n      Grid() {\n        // 第一个GridItem，显示文本'4'，占据第1行第1列\n        GridItem() {\n          Text('4')\n            .fontSize(16)\n            .backgroundColor(0xFAEEE0) // 设置背景颜色\n            .width('100%')\n            .height('100%')\n            .textAlign(TextAlign.Center) // 文本居中对齐\n        }.rowStart(1).rowEnd(2).columnStart(1).columnEnd(2) \n\n        // 使用ForEach循环生成多个GridItem，每个GridItem显示一个数字\n        ForEach(this.numbers, (item: string) => {\n          GridItem() {\n            Text(item)\n              .fontSize(16)\n              .backgroundColor(0xF9CF93) // 设置背景颜色\n              .width('100%')\n              .height('100%')\n              .textAlign(TextAlign.Center) // 文本居中对齐\n          }\n        }, (item: string) => item)\n\n        // 最后一个GridItem，显示文本'5'，占据第1列到第4列\n        GridItem() {\n          Text('5')\n            .fontSize(16)\n            .backgroundColor(0xDBD0C0) // 设置背景颜色\n            .width('100%')\n            .height('100%')\n            .textAlign(TextAlign.Center) // 文本居中对齐\n        }.columnStart(1).columnEnd(4) \n      }\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr') // 设置5列，每列宽度相等\n      .rowsTemplate('1fr 1fr 1fr 1fr 1fr') // 设置5行，每行高度相等\n      .width('90%').height(300) // 设置网格的宽度和高度\n    }.width('100%').margin({ top: 5 }) // 设置Column的宽度并添加顶部外边距\n  }\n}


/*\n实现两个网格布局组件，每个网格布局包含9个网格项，每个网格项显示一个数字。第一个网格布局的网格项样式为NONE，第二个网格布局的网格项样式为PLAIN。每个网格布局的列和行都设置为1fr，列间距和行间距为4vp，宽度为60%，高度为150vp，背景颜色为0xFAEEE0，内边距为4vp。整个组件的宽度为100%，上边距为5vp。\n*/\n\n@Entry\n@Component\nstruct GridItemExample {\n  @State numbers: String[] = ['0', '1', '2'] // 定义一个状态变量numbers，包含三个字符串元素'0', '1', '2'\n\n  build() {\n    Column({ space: 5 }) { // 创建一个垂直布局，子组件之间的间距为5vp\n      Grid() { // 创建第一个网格布局\n        ForEach(this.numbers, (day: string) => { // 遍历numbers数组，day为当前遍历的元素\n          ForEach(this.numbers, (day: string) => { // 再次遍历numbers数组，day为当前遍历的元素\n            GridItem({style:GridItemStyle.NONE}) { // 创建一个网格项，样式为NONE\n              Text(day) // 创建一个文本组件，显示当前遍历的元素day\n                .fontSize(16) // 设置文本字体大小为16\n                .width('100%') // 设置文本宽度为父容器的100%\n                .height('100%') // 设置文本高度为父容器的100%\n                .textAlign(TextAlign.Center) // 设置文本居中对齐\n                .focusable(true) // 设置文本可聚焦\n            }\n            .backgroundColor(0xF9CF93) // 设置网格项的背景颜色为0xF9CF93\n          }, (day: string) => day) // 第二个ForEach的key函数，返回当前遍历的元素day\n        }, (day: string) => day) // 第一个ForEach的key函数，返回当前遍历的元素day\n      }\n      .columnsTemplate('1fr 1fr 1fr') // 设置网格布局的列模板，每列宽度为1fr\n      .rowsTemplate('1fr 1fr') // 设置网格布局的行模板，每行高度为1fr\n      .columnsGap(4) // 设置列间距为4vp\n      .rowsGap(4) // 设置行间距为4vp\n      .width('60%') // 设置网格布局的宽度为60%\n      .backgroundColor(0xFAEEE0) // 设置网格布局的背景颜色为0xFAEEE0\n      .height(150) // 设置网格布局的高度为150vp\n      .padding('4vp') // 设置网格布局的内边距为4vp\n\n      Grid() { // 创建第二个网格布局\n        ForEach(this.numbers, (day: string) => { // 遍历numbers数组，day为当前遍历的元素\n          ForEach(this.numbers, (day: string) => { // 再次遍历numbers数组，day为当前遍历的元素\n            GridItem({style:GridItemStyle.PLAIN}) { // 创建一个网格项，样式为PLAIN\n              Text(day) // 创建一个文本组件，显示当前遍历的元素day\n                .fontSize(16) // 设置文本字体大小为16\n                .width('100%') // 设置文本宽度为父容器的100%\n                .height('100%') // 设置文本高度为父容器的100%\n                .textAlign(TextAlign.Center) // 设置文本居中对齐\n                .focusable(true) // 设置文本可聚焦\n            }\n            .backgroundColor(0xF9CF93) // 设置网格项的背景颜色为0xF9CF93\n          }, (day: string) => day) // 第二个ForEach的key函数，返回当前遍历的元素day\n        }, (day: string) => day) // 第一个ForEach的key函数，返回当前遍历的元素day\n      }\n      .columnsTemplate('1fr 1fr 1fr') // 设置网格布局的列模板，每列宽度为1fr\n      .rowsTemplate('1fr 1fr') // 设置网格布局的行模板，每行高度为1fr\n      .columnsGap(4) // 设置列间距为4vp\n      .rowsGap(4) // 设置行间距为4vp\n      .width('60%') // 设置网格布局的宽度为60%\n      .backgroundColor(0xFAEEE0) // 设置网格布局的背景颜色为0xFAEEE0\n      .height(150) // 设置网格布局的高度为150vp\n      .padding('4vp') // 设置网格布局的内边距为4vp\n    }\n    .width('100%') // 设置整个Column组件的宽度为100%\n    .margin({ top: 5 }) // 设置整个Column组件的上边距为5vp\n  }\n}