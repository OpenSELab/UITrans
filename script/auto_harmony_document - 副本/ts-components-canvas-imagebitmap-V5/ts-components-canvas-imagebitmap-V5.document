Title: ImageBitmap-画布绘制-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-components-canvas-imagebitmap-V5

Markdown Content:
ImageBitmap对象可以存储canvas渲染的像素数据。

说明

从 API Version 8 开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

接口
--

### ImageBitmap12+

ImageBitmap(data: PixelMap, unit?: LengthMetricsUnit)

通过PixelMap创建ImageBitmap对象。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### ImageBitmap

ImageBitmap(src: string, unit?: LengthMetricsUnit)

通过ImageSrc创建ImageBitmap对象。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名
 | 类型

 | 必填

 | 说明

 |
| --- | --- | --- | --- |
| src

 | string

 | 是

 | 图片的数据源支持本地图片。

1、string格式用于加载本地图片，例如ImageBitmap("common/images/example.jpg")，type为"entry"和"feature"类型的Module，其图片加载路径的起点为当前Module的ets文件夹，type为"har"和"shared"类型的Module，其图片加载路径的起点为当前构建的"entry"或"feature"类型Module的ets文件夹。

type为"har"和"shared"类型的Module中推荐使用[ImageSource](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/image-decoding-V5)图片解码方式将资源图片解码为统一的PixelMap加载使用。

2、支持本地图片类型：bmp、jpg、png、svg和webp类型。

**说明：**

\- ArkTS卡片上不支持http://等网络相关路径前缀、datashare://路径前缀以及file://data/storage路径前缀的字符串。

 |
| unit12+

 | [LengthMetricsUnit](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-arkui-graphics-V5#lengthmetricsunit12)

 | 否

 | 用来配置ImageBitmap对象的单位模式，配置后无法动态更改，配置方法同[CanvasRenderingContext2D](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-canvasrenderingcontext2d-V5#lengthmetricsunit12)。

默认值：DEFAULT。

 |

属性
--

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

| 名称
 | 类型

 | 只读

 | 可选

 | 描述

 |
| --- | --- | --- | --- | --- |
| width

 | number

 | 是

 | 否

 | ImageBitmap的像素宽度。

默认单位为vp。

 |
| height

 | number

 | 是

 | 否

 | ImageBitmap的像素高度。

默认单位为vp。

 |

close
-----

close(): void

释放ImageBitmap对象相关联的所有图形资源，并将ImageBitmap对象的宽高置为0。close示例代码同创建ImageBitmap代码。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

从API version 11开始，当应用创建[Worker线程](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/worker-introduction-V5)，支持使用postMessage将ImageBitmap实例传到Worker中进行绘制，并使用onmessage接收Worker线程发送的绘制结果进行显示。

示例
--

### 示例1

2.  @Entry
3.  @Component
4.  struct ImageExample {
5.    private settings: RenderingContextSettings = new RenderingContextSettings(true)
6.    private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)
7.    private img:ImageBitmap = new ImageBitmap("common/images/example.jpg")

9.    build() {
10.      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {
11.        Canvas(this.context)
12.          .width('100%')
13.          .height('100%')
14.          .backgroundColor('#ffff00')
15.          .onReady(() => {
16.            this.context.drawImage(this.img, 0, 0, 500, 500, 0, 0, 400, 200)
17.            this.img.close()
18.          })
19.      }
20.      .width('100%')
21.      .height('100%')
22.    }
23.  }

![Image 1](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240830165430.39376172609392118414664497109362:50001231000000:2800:51D250510B609068FB1DB5EF4BBB96025AD95E36F48F27E8B800C5C37BB79F93.png?needInitFileName=true?needInitFileName=true)

### 示例2

2.  @Entry
3.  @Component
4.  struct Demo {
5.  private settings: RenderingContextSettings = new RenderingContextSettings(true)
6.  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)

8.  build() {
9.    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {
10.      Canvas(this.context)
11.        .width('100%')
12.        .height('50%')
13.        .backgroundColor('#ffff00')
14.        .onReady(() => {
15.          this.context.fillStyle = "#00ff00"
16.          this.context.fillRect(0, 0, 100, 100)
17.          let pixel = this.context.getPixelMap(0, 0, 100, 100)
18.          let image = new ImageBitmap(pixel)
19.          this.context.drawImage(image, 100, 100)
20.        })

22.    }
23.    .width('100%')
24.    .height('100%')
25.  }
26.  }

![Image 2](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240830165430.60156105872015059490040671417225:50001231000000:2800:0A254E3F7F0AC59BF91D6EA7048D9B83AA1C82C5DE61045887F9B71FD05DDB30.png?needInitFileName=true?needInitFileName=true)

### 示例3

1.  import worker from '@ohos.worker';

3.  @Entry
4.  @Component
5.  struct imageBitmapExamplePage {
6.    private settings: RenderingContextSettings = new RenderingContextSettings(true);
7.    private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings);
8.    private myWorker = new worker.ThreadWorker('entry/ets/workers/Worker.ts');
9.    private img:ImageBitmap = new ImageBitmap("common/images/example.jpg")

11.    build() {
12.      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {
13.        Canvas(this.context)
14.          .width('100%')
15.          .height('100%')
16.          .backgroundColor('#ffff00')
17.          .onReady(() => {
18.            this.myWorker.postMessage({ myImage: this.img });
19.            this.myWorker.onmessage = (e): void => {
20.              if (e.data.myImage) {
21.                let image: ImageBitmap = e.data.myImage
22.                this.context.transferFromImageBitmap(image)
23.              }
24.            }
25.          })
26.      }
27.      .width('100%')
28.      .height('100%')
29.    }
30.  }

Worker线程在onmessage中接收到主线程postMessage发送的ImageBitmap，并进行绘制。

1.  workerPort.onmessage = function (e: MessageEvents) {
2.    if (e.data.myImage) {
3.      let img = e.data.myImage
4.      let offCanvas = new OffscreenCanvas(600, 600)
5.      let offContext = offCanvas.getContext("2d")
6.      offContext.drawImage(img, 0, 0, 500, 500, 0, 0, 400, 200)
7.      let image = offCanvas.transferToImageBitmap()
8.      workerPort.postMessage({ myImage: image });
9.    }
10.  }

![Image 3](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240830165430.13400625158791434152563553894990:50001231000000:2800:5F4E7804D0939D521245511A4720BDDDD222E6B9D1CC01D13D42452746D11B32.png?needInitFileName=true?needInitFileName=true)
