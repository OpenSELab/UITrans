/*\n实现一个带有主标题和副标题的弹出对话框，主标题和副标题的颜色分别设置为橙色和红色。\n对话框的关闭按钮设置为暗色调，主标题位于副标题上方，底部距离类型设置为不存在菜单栏情况下的距离。\n*/\n\n// 导入必要的模块\nimport { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { window } from '@kit.ArkUI';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n// 定义一个变量用于存储UI上下文\nlet dialogUIContext: UIContext | null = null;\n\n// 导出一个函数用于获取UI上下文\nexport function getDialogUIContext(): UIContext | null {\n  return dialogUIContext;\n}\n\n// 定义一个UIAbility类，继承自UIAbility\nexport default class EntryAbility extends UIAbility {\n  // 当Ability创建时调用\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onCreate');\n  }\n\n  // 当Ability销毁时调用\n  onDestroy(): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onDestroy');\n  }\n\n  // 当窗口阶段创建时调用\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageCreate');\n\n    // 加载页面内容\n    windowStage.loadContent('pages/Index', (err) => {\n      if (err.code) {\n        hilog.error(0x0000, 'testTag', 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(0x0000, 'testTag', 'Succeeded in loading the content.');\n    });\n\n    // 获取主窗口\n    let windowClass: window.Window | undefined = undefined;\n    windowStage.getMainWindow((err: BusinessError, data) => {\n      let errCode: number = err.code;\n      if (errCode) {\n        console.error('Failed to obtain the main window. Cause: ' + JSON.stringify(err));\n        return;\n      }\n      windowClass = data;\n      console.info('Succeeded in obtaining the main window. Data: ' + JSON.stringify(data));\n      dialogUIContext = windowClass.getUIContext();\n    });\n\n    // 获取主窗口并设置窗口布局为非全屏\n    windowStage.getMainWindow((err, data) => {\n      if (err.code) {\n        console.error('Failed to obtain the main window. Cause: ' + JSON.stringify(err));\n        return;\n      }\n      windowClass = data;\n      console.info('Succeeded in obtaining the main window. Data: ' + JSON.stringify(data));\n      windowClass.setWindowLayoutFullScreen(false);\n    });\n  }\n\n  // 当窗口阶段销毁时调用\n  onWindowStageDestroy(): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageDestroy');\n  }\n\n  // 当Ability进入前台时调用\n  onForeground(): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onForeground');\n  }\n\n  // 当Ability进入后台时调用\n  onBackground(): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onBackground');\n  }\n}\n\n// 导入自定义的UI上下文获取函数\nimport { getMyUiContext } from '../entryability/EntryAbility';\nimport { UIContext, InterstitialDialogAction, IconStyle, TitlePosition, BottomOffset } from '@kit.ArkUI';\n\n// 定义一个组件Index\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column() {\n        // 创建一个文本组件，点击时显示对话框\n        Text("show dialog")\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            // 获取UI上下文\n            let ctx: UIContext | null = getMyUiContext();\n            // 创建一个InterstitialDialogAction实例\n            let interstitialDialogAction: InterstitialDialogAction = new InterstitialDialogAction({\n              uiContext: ctx as UIContext,\n              title: "主标题",\n              subtitle: "副标题",\n              titleColor: 'rgb(255, 192, 0)', // 主标题颜色为橙色\n              subtitleColor: Color.Red, // 副标题颜色为红色\n              backgroundImage: $r('app.media.testBackgroundImg'), // 背景图片\n              foregroundImage: $r('app.media.testForegroundImg'), // 前景图片\n              iconStyle: IconStyle.DARK, // 关闭按钮为暗色调\n              titlePosition: TitlePosition.TOP, // 主标题在副标题上方\n              bottomOffsetType: BottomOffset.OFFSET_FOR_NONE, // 底部距离类型为不存在菜单栏情况下的距离\n              onDialogClick: () => { console.log('outer dialog click action') }, // 对话框点击事件\n              onDialogClose: () => { console.log('outer close action') } // 对话框关闭事件\n            });\n            // 打开对话框\n            interstitialDialogAction.openDialog();\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n    .backgroundColor('rgba(0, 0, 0, 0.1)')\n  }\n}


/*\n实现一个带有主标题和副标题的弹出对话框，主标题和副标题分别设置不同的颜色，关闭按钮设置为亮色调，主副标题相对位置设置为主标题在副标题下方，底部距离类型设置为存在菜单栏情况下的距离。\n*/\n\n// 导入必要的模块和类\nimport { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { window } from '@kit.ArkUI';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n// 定义一个全局变量用于存储UI上下文\nlet dialogUIContext: UIContext | null = null;\n\n// 导出一个函数用于获取UI上下文\nexport function getDialogUIContext(): UIContext | null {\n  return dialogUIContext;\n}\n\n// 定义一个UIAbility类，继承自UIAbility\nexport default class EntryAbility extends UIAbility {\n  // 当Ability创建时调用\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onCreate');\n  }\n\n  // 当Ability销毁时调用\n  onDestroy(): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onDestroy');\n  }\n\n  // 当窗口阶段创建时调用\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageCreate');\n\n    // 加载页面内容\n    windowStage.loadContent('pages/Index', (err) => {\n      if (err.code) {\n        hilog.error(0x0000, 'testTag', 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(0x0000, 'testTag', 'Succeeded in loading the content.');\n    });\n\n    // 获取主窗口\n    let windowClass: window.Window | undefined = undefined;\n    windowStage.getMainWindow((err: BusinessError, data) => {\n      let errCode: number = err.code;\n      if (errCode) {\n        console.error('Failed to obtain the main window. Cause: ' + JSON.stringify(err));\n        return;\n      }\n      windowClass = data;\n      console.info('Succeeded in obtaining the main window. Data: ' + JSON.stringify(data));\n      dialogUIContext = windowClass.getUIContext();\n    })\n\n    // 获取主窗口并设置窗口布局为非全屏\n    windowStage.getMainWindow((err, data) => {\n      if (err.code) {\n        console.error('Failed to obtain the main window. Cause: ' + JSON.stringify(err));\n        return;\n      }\n      windowClass = data;\n      console.info('Succeeded in obtaining the main window. Data: ' + JSON.stringify(data));\n      windowClass.setWindowLayoutFullScreen(false)\n    })\n  }\n\n  // 当窗口阶段销毁时调用\n  onWindowStageDestroy(): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageDestroy');\n  }\n\n  // 当Ability进入前台时调用\n  onForeground(): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onForeground');\n  }\n\n  // 当Ability进入后台时调用\n  onBackground(): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onBackground');\n  }\n}\n\n// 导入自定义的UI上下文获取函数\nimport { getMyUiContext } from '../entryability/EntryAbility';\nimport { UIContext, InterstitialDialogAction, IconStyle, TitlePosition, BottomOffset } from '@kit.ArkUI';\n\n// 定义一个组件Index\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column() {\n        // 显示一个文本按钮，点击时弹出对话框\n        Text("show dialog")\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            // 获取UI上下文\n            let ctx: UIContext | null = getMyUiContext();\n            // 创建一个InterstitialDialogAction实例\n            let interstitialDialogAction: InterstitialDialogAction = new InterstitialDialogAction({\n              uiContext: ctx as UIContext,\n              title: "主标题",\n              subtitle: "副标题",\n              titleColor: 'rgb(255, 192, 0)', // 主标题颜色\n              subtitleColor: Color.Red, // 副标题颜色\n              backgroundImage: $r('app.media.testBackgroundImg'), // 背景图片\n              foregroundImage: $r('app.media.testForegroundImg'), // 前景图片\n              iconStyle: IconStyle.LIGHT, // 关闭按钮样式为亮色调\n              titlePosition: TitlePosition.BOTTOM, // 主标题在副标题下方\n              bottomOffsetType: BottomOffset.OFFSET_FOR_BAR, // 底部距离类型为存在菜单栏情况下的距离\n              onDialogClick: () => { console.log('outer dialog click action') }, // 对话框点击事件\n              onDialogClose: () => { console.log('outer close action') } // 对话框关闭事件\n            });\n            // 打开对话框\n            interstitialDialogAction.openDialog();\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n    .backgroundColor('rgba(0, 0, 0, 0.1)')\n  }\n}