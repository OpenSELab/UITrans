/*\n实现一个按钮组件，按钮显示的文本为“overflowTextOverlengthTextOverflow.Clip”，按钮的宽度为200像素，高度为100像素。按钮的文本样式设置为固定字体大小20，字体粗细为Bolder，字体家族为cursive，字体样式为斜体。按钮的文本溢出时会进行裁剪，并且最大行数为1。按钮的整体字体大小为40。\n*/\n\n@Entry\n@Component\nstruct buttonTestDemo {\n  @State txt: string = 'overflowTextOverlengthTextOverflow.Clip'; // 按钮显示的文本\n  @State widthShortSize: number = 200; // 按钮的宽度\n\n  build() {\n    Row() {\n      Column() {\n        Button(this.txt)\n          .width(this.widthShortSize) // 设置按钮宽度为200像素\n          .height(100) // 设置按钮高度为100像素\n          .labelStyle({ \n            overflow: TextOverflow.Clip, // 文本溢出时裁剪\n            maxLines: 1, // 最大行数为1\n            minFontSize: 20, // 最小字体大小为20\n            maxFontSize: 20, // 最大字体大小为20\n            font: {\n              size: 20, // 字体大小为20\n              weight: FontWeight.Bolder, // 字体粗细为Bolder\n              family: 'cursive', // 字体家族为cursive\n              style: FontStyle.Italic // 字体样式为斜体\n            }\n          })\n          .fontSize(40) // 按钮的整体字体大小为40\n      }\n      .width('100%') // 设置Column的宽度为100%\n    }\n    .height('100%') // 设置Row的高度为100%\n  }\n}


/*\n实现一个带有自定义样式的按钮组件，按钮的启用状态可以通过一个开关进行控制。按钮点击时会记录点击位置的坐标，并更新按钮的样式以反映点击位置。\n*/\n\n@Entry\n@Component\nstruct ButtonExample {\n  @State buttonEnabled: boolean = True; // 按钮启用状态，初始为启用\n  @State positionX: number = 0; // 点击位置的x坐标，初始为0\n  @State positionY: number = 0; // 点击位置的y坐标，初始为0\n  @State state: boolean[] = [True, False]; // 状态数组，用于某些逻辑判断，初始为[True, False]\n  @State index: number = 0; // 索引，用于某些逻辑判断，初始为0\n\n  build() {\n    Column() {\n      Button('OK')\n        .contentModifier(new MyButtonStyle(this.positionX, this.positionY, Color.Red)) // 应用自定义按钮样式，样式基于点击位置和红色\n        .onClick((event) => {\n          console.info('change' + JSON.stringify(event)); // 打印点击事件信息到控制台\n          this.positionX = event.displayX; // 更新点击位置的x坐标\n          this.positionY = event.displayY; // 更新点击位置的y坐标\n        }).enabled(this.buttonEnabled); // 设置按钮的启用状态，根据buttonEnabled的值\n      Row() {\n        Toggle({ type: ToggleType.Switch, isOn: True }) // 创建一个开关组件，初始状态为开启\n          .onChange((value: boolean) => {\n            if (value) {\n              this.buttonEnabled = True; // 如果开关开启，启用按钮\n            } else {\n              this.buttonEnabled = False; // 如果开关关闭，禁用按钮\n            }\n          }).margin({ left: -80 }); // 设置开关的左边距为-80\n      }\n    }.height('100%').width('100%').justifyContent(FlexAlign.Center); // 设置布局的高度和宽度为100%，并居中对齐内容\n  }\n}


/*\n实现一个展示不同样式和角色的按钮组件示例。通过Flex布局将按钮分组展示，每组按钮具有不同的样式（强调、普通、文本）和角色（正常、错误）。\n*/\n\n@Entry\n@Component\nstruct ButtonExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      // 显示标题“Role is Normal button”，字体大小为9，颜色为0xCCCCCC\n      Text('Role is Normal button').fontSize(9).fontColor(0xCCCCCC)\n      // 使用Flex布局，子元素居中对齐，子元素之间有空间间隔\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        // 创建一个强调样式且角色为正常的按钮，按钮文本为“Emphasized”\n        Button('Emphasized', { buttonStyle: ButtonStyleMode.EMPHASIZED, role: ButtonRole.NORMAL });\n        // 创建一个普通样式且角色为正常的按钮，按钮文本为“Normal”\n        Button('Normal', { buttonStyle: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL });\n        // 创建一个文本样式且角色为正常的按钮，按钮文本为“Textual”\n        Button('Textual', { buttonStyle: ButtonStyleMode.TEXTUAL, role: ButtonRole.NORMAL });\n      }\n      // 显示标题“Role is Error button”，字体大小为9，颜色为0xCCCCCC\n      Text('Role is Error button').fontSize(9).fontColor(0xCCCCCC)\n      // 使用Flex布局，子元素居中对齐，子元素之间有空间间隔\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        // 创建一个强调样式且角色为错误的按钮，按钮文本为“Emphasized”\n        Button('Emphasized', { buttonStyle: ButtonStyleMode.EMPHASIZED, role: ButtonRole.ERROR});\n        // 创建一个普通样式且角色为错误的按钮，按钮文本为“Normal”\n        Button('Normal', { buttonStyle: ButtonStyleMode.NORMAL, role: ButtonRole.ERROR });\n        // 创建一个文本样式且角色为错误的按钮，按钮文本为“Textual”\n        Button('Textual', { buttonStyle: ButtonStyleMode.TEXTUAL, role: ButtonRole.ERROR });\n      }\n    }.height(200).padding({ left: 35, right: 35, top: 35 })\n  }\n}


/*\n实现一个展示不同样式和大小的按钮的示例组件。组件包含三个部分，每个部分展示一组不同样式和大小的按钮。第一部分展示正常大小的按钮，第二和第三部分展示小尺寸的按钮。每个按钮都有三种样式：强调样式、普通样式和文本样式。\n*/\n\n@Entry\n@Component\nstruct ButtonExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      // 显示标题“Normal size button”\n      Text('Normal size button').fontSize(9).fontColor(0xCCCCCC)\n      \n      // 创建一个Flex布局，用于排列正常大小的按钮\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        // 创建一个强调样式按钮，显示文本“Emphasized”\n        Button('Emphasized', { buttonStyle: ButtonStyleMode.EMPHASIZED });\n        // 创建一个普通样式按钮，显示文本“Normal”\n        Button('Normal', { buttonStyle: ButtonStyleMode.NORMAL });\n        // 创建一个文本样式按钮，显示文本“Textual”\n        Button('Textual', { buttonStyle: ButtonStyleMode.TEXTUAL });\n      }\n\n      // 显示标题“Small size button”\n      Text('Small size button').fontSize(9).fontColor(0xCCCCCC)\n      \n      // 创建一个Flex布局，用于排列小尺寸的按钮\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        // 创建一个小尺寸强调样式按钮，显示文本“Emphasized”\n        Button('Emphasized', { controlSize: ControlSize.SMALL, buttonStyle: ButtonStyleMode.EMPHASIZED });\n        // 创建一个小尺寸普通样式按钮，显示文本“Normal”\n        Button('Normal', { controlSize: ControlSize.SMALL, buttonStyle: ButtonStyleMode.NORMAL });\n        // 创建一个小尺寸文本样式按钮，显示文本“Textual”\n        Button('Textual', { controlSize: ControlSize.SMALL, buttonStyle: ButtonStyleMode.TEXTUAL });\n      }\n\n      // 显示标题“Small size button”\n      Text('Small size button').fontSize(9).fontColor(0xCCCCCC)\n      \n      // 创建一个Flex布局，用于排列小尺寸的按钮\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        // 创建一个小尺寸强调样式按钮，显示文本“Emphasized”\n        Button('Emphasized').controlSize(ControlSize.SMALL).buttonStyle(ButtonStyleMode.EMPHASIZED);\n        // 创建一个小尺寸普通样式按钮，显示文本“Normal”\n        Button('Normal').controlSize(ControlSize.SMALL).buttonStyle(ButtonStyleMode.NORMAL);\n        // 创建一个小尺寸文本样式按钮，显示文本“Textual”\n        Button('Textual').controlSize(ControlSize.SMALL).buttonStyle(ButtonStyleMode.TEXTUAL);\n      }\n\n    }.height(400).padding({ left: 35, right: 35, top: 35 })\n  }\n}


/*\n实现一个包含多种按钮样式的示例组件，展示不同类型的按钮（普通按钮、胶囊按钮、圆形按钮）及其状态效果（启用、禁用、加载中）。\n*/\n\n@Entry\n@Component\nstruct ButtonExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\n      // 显示文本“Normal button”\n      Text('Normal button').fontSize(9).fontColor(0xCCCCCC)\n      // 创建一个Flex布局，对齐方式为中心对齐，间距均匀分布\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        // 创建一个显示文本为“OK”的普通按钮，启用状态效果\n        Button('OK', { type: ButtonType.Normal, stateEffect: True })\n          .borderRadius(8) // 设置按钮的边框圆角半径为8\n          .backgroundColor(0x317aff) // 设置按钮的背景颜色为蓝色\n          .width(90) // 设置按钮的宽度为90\n          .onClick(() => {\n            console.log('ButtonType.Normal') // 点击按钮时在控制台输出信息\n          })\n        // 创建一个显示加载中的普通按钮，启用状态效果\n        Button({ type: ButtonType.Normal, stateEffect: True }) {\n          Row() {\n            LoadingProgress().width(20).height(20).margin({ left: 12 }).color(0xFFFFFF) // 加载进度条\n            Text('loading').fontSize(12).fontColor(0xffffff).margin({ left: 5, right: 12 }) // 加载文本\n          }.alignItems(VerticalAlign.Center) // 垂直居中对齐\n        }.borderRadius(8).backgroundColor(0x317aff).width(90).height(40) // 设置按钮样式\n\n        // 创建一个显示文本为“Disable”的普通按钮，禁用状态效果，设置透明度为0.4\n        Button('Disable', { type: ButtonType.Normal, stateEffect: False }).opacity(0.4)\n          .borderRadius(8).backgroundColor(0x317aff).width(90)\n      }\n\n      // 显示文本“Capsule button”\n      Text('Capsule button').fontSize(9).fontColor(0xCCCCCC)\n      // 创建一个Flex布局，对齐方式为中心对齐，间距均匀分布\n      Flex({ alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n        // 创建一个显示文本为“OK”的胶囊按钮，启用状态效果\n        Button('OK', { type: ButtonType.Capsule, stateEffect: True }).backgroundColor(0x317aff).width(90)\n        // 创建一个显示加载中的胶囊按钮，启用状态效果\n        Button({ type: ButtonType.Capsule, stateEffect: True }) {\n          Row() {\n            LoadingProgress().width(20).height(20).margin({ left: 12 }).color(0xFFFFFF) // 加载进度条\n            Text('loading').fontSize(12).fontColor(0xffffff).margin({ left: 5, right: 12 }) // 加载文本\n          }.alignItems(VerticalAlign.Center).width(90).height(40) // 垂直居中对齐\n        }.backgroundColor(0x317aff)\n\n        // 创建一个显示文本为“Disable”的胶囊按钮，禁用状态效果，设置透明度为0.4\n        Button('Disable', { type: ButtonType.Capsule, stateEffect: False }).opacity(0.4)\n          .backgroundColor(0x317aff).width(90)\n      }\n\n      // 显示文本“Circle button”\n      Text('Circle button').fontSize(9).fontColor(0xCCCCCC)\n      // 创建一个Flex布局，对齐方式为中心对齐，允许换行\n      Flex({ alignItems: ItemAlign.Center, wrap: FlexWrap.Wrap }) {\n        // 创建一个显示加载中的圆形按钮，启用状态效果\n        Button({ type: ButtonType.Circle, stateEffect: True }) {\n          LoadingProgress().width(20).height(20).color(0xFFFFFF) // 加载进度条\n        }.width(55).height(55).backgroundColor(0x317aff) // 设置按钮样式\n\n        // 创建另一个显示加载中的圆形按钮，启用状态效果，设置不同的背景颜色\n        Button({ type: ButtonType.Circle, stateEffect: True }) {\n          LoadingProgress().width(20).height(20).color(0xFFFFFF) // 加载进度条\n        }.width(55).height(55).margin({ left: 20 }).backgroundColor(0xF55A42) // 设置按钮样式\n      }\n    }.height(400).padding({ left: 35, right: 35, top: 35 }) // 设置整体布局的高度和内边距\n  }\n}