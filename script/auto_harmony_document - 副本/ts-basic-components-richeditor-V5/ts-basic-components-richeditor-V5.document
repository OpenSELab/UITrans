Title: RichEditor-文本与输入-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5

Markdown Content:
支持图文混排和文本交互式编辑的组件。

说明

该组件从API Version 10开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

接口
--

RichEditor(value: RichEditorOptions)

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

RichEditor(options: RichEditorStyledStringOptions)12+

**参数：**

属性
--

除支持[通用属性](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-size-V5)外，还支持以下属性：

说明

align属性只支持上方、中间和下方位置的对齐方式。

### customKeyboard

customKeyboard(value: CustomBuilder, options?: KeyboardOptions)

设置自定义键盘。

当设置自定义键盘时，输入框激活后不会打开系统输入法，而是加载指定的自定义组件。

自定义键盘的高度可以通过自定义组件根节点的height属性设置，宽度不可设置，使用系统默认值。

自定义键盘无法获取焦点，但是会拦截手势事件。

默认在输入控件失去焦点时，关闭自定义键盘。

如果设备支持拍摄输入，设置自定义键盘后，该输入框会不支持拍摄输入。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

bindSelectionMenu(spanType: RichEditorSpanType, content: CustomBuilder, responseType: ResponseType | RichEditorResponseType,

options?: SelectionMenuOptions)

设置自定义选择菜单。自定义菜单超长时，建议内部嵌套[Scroll](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-scroll-V5)组件使用，避免键盘被遮挡。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### copyOptions

copyOptions(value: CopyOptions)

设置组件是否支持文本内容可复制粘贴。

copyOptions不为CopyOptions.None时，长按组件内容，会弹出文本选择弹框。如果通过bindSelectionMenu等方式自定义文本选择菜单，则会弹出自定义的菜单。

设置copyOptions为CopyOptions.None，复制、剪切功能不生效。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[CopyOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#copyoptions9)

是

组件支持文本内容是否可复制粘贴。

默认值：CopyOptions.LocalDevice

**卡片能力：** 从API version 10开始，该接口支持在ArkTS卡片中使用。

### enableDataDetector11+

enableDataDetector(enable: boolean)

设置是否进行文本特殊实体识别。

该接口依赖设备底层应具有文本识别能力，否则设置不会生效。

当enableDataDetector设置为true，同时不设置dataDetectorConfig属性时，默认识别所有类型的实体，所识别实体的color和decoration会被更改为如下样式：

1.  color: '#ff007dff'
2.  decoration:{
3.    type: TextDecorationType.Underline,
4.    color: '#ff007dff',
5.    style: TextDecorationStyle.SOLID
6.  }

触摸点击和鼠标右键点击实体，会根据实体类型弹出对应的实体操作菜单，鼠标左键点击实体会直接响应菜单的第一个选项。

对addBuilderSpan的节点文本，该功能不会生效。

当copyOption设置为CopyOptions.None时，点击实体弹出的菜单没有选择文本和复制功能。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

enable

boolean

是

使能文本识别。

默认值： false

### dataDetectorConfig11+

dataDetectorConfig(config: TextDataDetectorConfig)

设置文本识别配置。

需配合[enableDataDetector](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#enabledatadetector11)一起使用，设置enableDataDetector为true时，dataDetectorConfig的配置才能生效。

当有两个实体A、B重叠时，按以下规则保留实体：

1\. 若A ⊂ B，则保留B，反之则保留A。

2\. 当A ⊄ B且B ⊄ A时，若A.start < B.start，则保留A，反之则保留B。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### enablePreviewText12+

enablePreviewText(enable: boolean)

设置是否开启预上屏功能。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

enable

boolean

是

使能预上屏功能。

默认值： true

说明

该接口在CAPI场景使用时下，默认关闭。可以在工程的module.json5中配置[metadata](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/module-structure-V5#metadata%E5%AF%B9%E8%B1%A1%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84)字段控制是否启用预上屏，配置如下：

1.  "metadata": \[
2.   {
3.      "name": "can\_preview\_text",
4.      "value": "true",
5.   }
6.  \]

### placeholder12+

placeholder(value: ResourceStr, style?: PlaceholderStyle)

设置无输入时的提示文本。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### caretColor12+

caretColor(value: ResourceColor)

设置输入框光标、手柄颜色。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### selectedBackgroundColor12+

selectedBackgroundColor(value: ResourceColor)

设置文本选中底板颜色。如果未设置不透明度，默认为20%不透明度。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

editMenuOptions(editMenu: EditMenuOptions)

设置自定义菜单扩展项，允许用户设置扩展项的文本内容、图标、回调方法。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### enterKeyType12+

enterKeyType(value: EnterKeyType)

设置软键盘输入法回车键类型。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

[EnterKeyType](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#enterkeytype%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

是

键盘输入法回车键类型。

默认为EnterKeyType.NEW\_LINE。

### enableKeyboardOnFocus12+

enableKeyboardOnFocus(isEnabled: boolean)

设置RichEditor通过点击以外的方式获焦时，是否绑定输入法。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

isEnabled

boolean

是

通过点击以外的方式获焦时，是否绑定输入法。

默认值：true

### onReady

onReady(callback:Callback<void\>)

富文本组件初始化完成后，触发回调。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

callback

Callback<void\>

是

订阅富文本组件初始化完成的回调。

### onSelect

onSelect(callback:Callback<[RichEditorSelection](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorselection)\>)

鼠标左键双击选中内容时，会触发回调；松开鼠标左键后，会再次触发回调。

手指长按选中内容时，会触发回调；松开手指后，会再次触发回调。

使用[RichEditorStyledStringOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorstyledstringoptions12)构建的RichEditor组件时不支持该回调。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### onDidIMEInput

onDidIMEInput(callback:Callback<TextRange\>)

输入法完成输入时，触发回调。

使用[RichEditorStyledStringOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorstyledstringoptions12)构建的RichEditor组件时不支持该回调。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

callback

Callback<[TextRange](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-text-common-V5#textrange12)\>

是

TextRange为输入法本次输入内容的范围。

输入法完成输入时的回调。

### onDeleteComplete

onDeleteComplete(callback:Callback<void\>)

输入法完成删除后，触发回调。

使用[RichEditorStyledStringOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorstyledstringoptions12)构建的RichEditor组件时不支持该回调。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

callback

Callback<void\>

是

订阅输入法完成删除的回调。

### onPaste11+

onPaste(callback: [PasteEventCallback](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#pasteeventcallback12) )

完成粘贴前，触发回调。开发者可以通过该方法，覆盖系统默认行为，实现图文的粘贴。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### onSelectionChange12+

onSelectionChange(callback:Callback<[RichEditorRange](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorrange)\>)

组件内所有内容选择区域发生变化或编辑状态下光标位置发生变化时触发该回调。光标位置发生变化回调时，选择区域的起始位置等于终止位置。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### onEditingChange12+

onEditingChange(callback: Callback<boolean\>)

组件内所有内容的编辑状态发生改变时触发该回调函数。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

callback

Callback<boolean\>

是

true表示编辑态，false表示非编辑态。

### onSubmit12+

onSubmit(callback: SubmitCallback)

按下软键盘输入法回车键触发该回调。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### onWillChange12+

onWillChange(callback: Callback<RichEditorChangeValue, boolean\>)

组件内图文变化前，触发回调。

使用[RichEditorStyledStringOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorstyledstringoptions12)构建的RichEditor组件时不支持该回调。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### onDidChange12+

onDidChange(callback: OnDidChangeCallback)

图文变化后，触发回调。

使用[RichEditorStyledStringOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorstyledstringoptions12)构建的RichEditor组件时不支持该回调。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### onCut12+

onCut(callback: Callback<CutEvent\>)

完成剪切前，触发回调。系统的默认剪切行为，只支持纯文本的剪切。开发者可以通过该方法，覆盖系统默认行为，实现图文的剪切。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

callback

Callback<[CutEvent](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#cutevent12)\>

是

定义用户剪切事件。

### onCopy12+

onCopy(callback: Callback<CopyEvent\>)

完成复制前，触发回调。系统的默认复制行为，只支持纯文本的复制。开发者可以通过该方法，覆盖系统默认行为，实现图文的复制。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

callback

Callback<[CopyEvent](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#copyevent12)\>

是

定义用户复制事件。

RichEditorInsertValue
---------------------

插入文本信息。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

insertOffset

number

是

插入的文本偏移位置。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

insertValue

string

是

插入的文本内容。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

previewText12+

string

否

插入的预上屏文本内容。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

RichEditorDeleteValue
---------------------

删除操作的信息和被删除内容的信息。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

RichEditorDeleteDirection
-------------------------

删除操作的方向。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

描述

BACKWARD

向后删除。

FORWARD

向前删除。

RichEditorTextSpanResult
------------------------

文本Span信息。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

spanPosition

[RichEditorSpanPosition](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorspanposition)

是

Span位置。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

value

string

是

文本Span内容。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

textStyle

[RichEditorTextStyleResult](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditortextstyleresult)

是

文本Span样式信息。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

offsetInSpan

\[number, number\]

是

文本Span内容里有效内容的起始和结束位置。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

valueResource11+

[Resource](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resource)

否

组件SymbolSpan内容。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

symbolSpanStyle11+

[RichEditorSymbolSpanStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorsymbolspanstyle11)

否

组件SymbolSpan样式信息。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

paragraphStyle12+

[RichEditorParagraphStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorparagraphstyle11)

否

段落样式。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

previewText12+

string

否

文本Span预上屏内容。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

RichEditorSpanPosition
----------------------

Span位置信息。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

spanIndex

number

是

Span索引值。

spanRange

\[number, number\]

是

Span内容在RichEditor内的起始和结束位置。

RichEditorSpanType
------------------

Span类型信息。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

值

描述

TEXT

0

Span为文字类型。

IMAGE

1

Span为图像类型。

MIXED

2

Span为图文混合类型。

BUILDER12+

3

Span为BuilderSpan类型。

RichEditorResponseType11+
-------------------------

菜单的响应类型。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

名称

描述

LONG\_PRESS

通过长按触发菜单弹出。

RIGHT\_CLICK

通过鼠标右键触发菜单弹出。

SELECT

通过鼠标选中触发菜单弹出。

RichEditorTextStyleResult
-------------------------

后端返回的文本样式信息。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

fontColor

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

是

文本颜色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

fontSize

number

是

字体大小，默认单位为fp。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

fontStyle

[FontStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#fontstyle)

是

字体样式。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

fontWeight

number

是

字体粗细。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

fontFamily

string

是

字体列表。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

decoration

[DecorationStyleResult](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-styled-string-V5#decorationstyleresult)

是

文本装饰线样式信息。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

textShadow12+

Array<[ShadowOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-image-effect-V5#shadowoptions%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)\>

否

文字阴影效果。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

lineHeight12+

number

否

文本行高，默认单位为fp。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

letterSpacing12+

number

否

文本字符间距，默认单位为fp。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

fontFeature12+

string

否

文字特性效果。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

说明

在RichEditorTextStyle中，fontWeight是设置字体粗细的输入参数。

而在RichEditorTextStyleResult中，会将之前设置的字体粗细转换为数字后返回。

转换关系如下：

RichEditorTextStyle中的fontWeight

RichEditorTextStyleResult中的fontWeight

100

0

200

1

300

2

400

3

500

4

600

5

700

6

800

7

900

8

Lighter

12

Normal

10

Regular

14

Medium

13

Bold

9

Bolder

11

RichEditorSymbolSpanStyle和RichEditorSymbolSpanStyleResult中fontWeight的转换关系，

与RichEditorTextStyle和RichEditorTextStyleResult中fontWeight的转换关系一致。

RichEditorSymbolSpanStyleResult11+
----------------------------------

后端返回的SymbolSpan样式信息。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

fontColor

Array<[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)\>

是

SymbolSpan组件颜色。

默认值：不同渲染策略下默认值不同。

fontSize

number | string | [Resource](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resource)

是

SymbolSpan组件大小，默认单位为fp。

默认值：跟随主题。

fontWeight

number | [FontWeight](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#fontweight) | string

是

SymbolSpan组件粗细。

number类型取值\[100,900\]，取值间隔为100，默认为400，取值越大，字体越粗。

string类型仅支持number类型取值的字符串形式，例如“400”，以及“bold”、“bolder”、“lighter”、“regular” 、“medium”分别对应FontWeight中相应的枚举值。

默认值：FontWeight.Normal。

renderingStrategy

[SymbolRenderingStrategy](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-symbolglyph-V5#symbolrenderingstrategy11%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

是

SymbolSpan组件渲染策略。

默认值：SymbolRenderingStrategy.SINGLE。

effectStrategy

[SymbolEffectStrategy](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-symbolglyph-V5#symboleffectstrategy11%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

是

SymbolSpan组件动效策略。

默认值：SymbolEffectStrategy.NONE。

RichEditorImageSpanResult
-------------------------

后端返回的图片信息。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

RichEditorImageSpanStyleResult
------------------------------

后端返回的图片样式信息。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

size

\[number, number\]

是

图片的宽度和高度，单位为px。默认值：size的默认值与objectFit的值有关，不同的objectFit值对应的size默认值也不同。objectFit的值为Cover时，图片高度为组件高度减去组件上下内边距，图片宽度为组件宽度减去组件左右内边距。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

verticalAlign

[ImageSpanAlignment](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-imagespan-V5#imagespanalignment)

是

图片垂直对齐方式。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

objectFit

[ImageFit](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#imagefit)

是

图片缩放类型。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

layoutStyle12+

[RichEditorLayoutStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorlayoutstyle11)

否

图片布局风格。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

RichEditorLayoutStyle11+
------------------------

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

RichEditorOptions
-----------------

RichEditor初始化参数。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

RichEditorStyledStringOptions12+
--------------------------------

RichEditor初始化参数。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

RichEditorChangeValue12+
------------------------

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

RichEditorBaseController12+
---------------------------

RichEditor组件控制器基类。

### getCaretOffset12+

getCaretOffset(): number

返回当前光标所在位置。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

### setCaretOffset12+

setCaretOffset(offset: number): boolean

设置光标位置。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

offset

number

是

光标偏移位置。超出所有内容范围时，设置失败。

**返回值：**

closeSelectionMenu(): void

关闭自定义选择菜单或系统默认选择菜单。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### getTypingStyle12+

getTypingStyle(): RichEditorTextStyle

获得用户预设的样式。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

### setTypingStyle12+

setTypingStyle(value: RichEditorTextStyle): void

设置用户预设的样式。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### setSelection12+

setSelection(selectionStart: number, selectionEnd: number, options?: SelectionOptions): void

支持设置组件内的内容选中，选中部分背板高亮。

selectionStart和selectionEnd均为-1时表示全选。

未获焦时调用该接口不产生选中效果。

从API version 12开始，在2in1设备中，无论options取何值，调用setSelection接口都不会弹出菜单，此外，如果组件中已经存在菜单，调用setSelection接口会关闭菜单。

在非2in1设备中，options取值为MenuPolicy.DEFAULT时，遵循以下规则：

1.  组件内有手柄菜单时，接口调用后不关闭菜单，并且调整菜单位置。
    
2.  组件内有不带手柄的菜单时，接口调用后不关闭菜单，并且菜单位置不变。
    
3.  组件内无菜单时，接口调用后也无菜单显示。
    

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

selectionStart

number

是

选中开始位置。

selectionEnd

number

是

选中结束位置。

options12+

[SelectionOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#selectionoptions12%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)

否

选择项配置。

### isEditing12+

isEditing(): boolean

获取当前富文本的编辑状态。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

类型

说明

boolean

true为编辑态，false为非编辑态。

### stopEditing12+

stopEditing(): void

退出编辑态。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### getLayoutManager12+

getLayoutManager(): LayoutManager

获取布局管理器对象。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

### getPreviewText12+

getPreviewText(): PreviewText

获取预上屏信息。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

### 导入对象

1.  controller: RichEditorController = new RichEditorController()

### getCaretOffset

getCaretOffset(): number

返回当前光标所在位置。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

### setCaretOffset

setCaretOffset(offset: number): boolean

设置光标位置。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

offset

number

是

光标偏移位置。超出文本范围时，设置失败。

**返回值：**

### addTextSpan

addTextSpan(value: string, options?: RichEditorTextSpanOptions): number

添加文本内容，如果组件光标闪烁，插入后光标位置更新为新插入文本的后面。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

**返回值：**

类型

说明

number

添加完成的TextSpan所在的位置。

### addImageSpan

addImageSpan(value: PixelMap | ResourceStr, options?: RichEditorImageSpanOptions): number

添加图片内容，如果组件光标闪烁，插入后光标位置更新为新插入图片的后面。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

**返回值：**

类型

说明

number

添加完成的ImageSpan所在的位置。

### addSymbolSpan11+

addSymbolSpan(value: Resource, options?: RichEditorSymbolSpanOptions ): number

在Richeditor中添加SymbolSpan，如果组件光标闪烁，插入后光标位置更新为新插入Symbol的后面。

暂不支持手势、复制、拖拽处理。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

**返回值：**

类型

说明

number

添加完成的SymbolSpan所在的位置。

### getTypingStyle11+

getTypingStyle(): RichEditorTextStyle

获得用户预设的样式。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

### setTypingStyle11+

setTypingStyle(value: RichEditorTextStyle): void

设置用户预设的样式。

当开发者设置默认值（undefined/null）或未调用该接口时：

*   使用键盘往无文本内容的RichEditor输入内容时，输入的文本样式是按照默认样式显示，默认样式请参照[RichEditorTextStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditortextstyle)内容。
    
*   使用键盘往有文本内容的RichEditor输入内容时，输入的文本是跟随前一个文本样式，不按照默认样式显示。

当开发者设置非默认值时：

*   使用键盘往RichEditor输入内容均按照开发者设置的样式显示，如果预设样式中有未设置的属性则按照[RichEditorTextStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditortextstyle)默认值显示。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### updateSpanStyle

updateSpanStyle(value: RichEditorUpdateTextSpanStyleOptions | RichEditorUpdateImageSpanStyleOptions | RichEditorUpdateSymbolSpanStyleOptions): void

更新文本、图片或SymbolSpan样式。

若只更新了一个Span的部分内容，则会根据更新部分、未更新部分将该Span拆分为多个Span。

使用该接口更新文本、图片或SymbolSpan样式时默认不会关闭自定义文本选择菜单。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### updateParagraphStyle11+

updateParagraphStyle(value: RichEditorParagraphStyleOptions): void

更新段落的样式。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### getSpans

getSpans(value?: RichEditorRange): Array<RichEditorImageSpanResult| RichEditorTextSpanResult\>

获取span信息。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

**返回值：**

### deleteSpans

deleteSpans(value?: RichEditorRange): void

删除指定范围内的文本和图片。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### getParagraphs11+

getParagraphs(value?: RichEditorRange): Array<RichEditorParagraphResult\>

获得指定返回的段落。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

**返回值：**

closeSelectionMenu(): void

关闭自定义选择菜单或系统默认选择菜单。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### setSelection11+

setSelection(selectionStart: number, selectionEnd: number, options?: SelectionOptions): void

支持设置文本选中，选中部分背板高亮。

selectionStart和selectionEnd均为-1时表示全选。

未获焦时调用该接口不产生选中效果。

从API version 12开始，在2in1设备中，无论options取何值，调用setSelection接口都不会弹出菜单，此外，如果组件中已经存在菜单，调用setSelection接口会关闭菜单。

在非2in1设备中，options取值为MenuPolicy.DEFAULT时，遵循以下规则：

1.  组件内有手柄菜单时，接口调用后不关闭菜单，并且调整菜单位置。
    
2.  组件内有不带手柄的菜单时，接口调用后不关闭菜单，并且菜单位置不变。
    
3.  组件内无菜单时，接口调用后也无菜单显示。
    

使用[示例](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ohos-arkui-advanced-selectionmenu-V5#%E7%A4%BA%E4%BE%8B)。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

selectionStart

number

是

选中开始位置。

selectionEnd

number

是

选中结束位置。

options12+

[SelectionOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#selectionoptions12%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)

否

选择项配置。

### getSelection11+

getSelection(): RichEditorSelection

获取选中内容。如果未选中内容，返回光标所在span信息。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

### fromStyledString12+

fromStyledString(value: StyledString): Array<RichEditorSpan\>

将属性字符串转换成span信息。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

**返回值：**

**错误码：**

以下错误码详细介绍请参考[通用错误码](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-universal-V5)。

错误码ID

错误信息

401

The parameter check failed.

### toStyledString12+

toStyledString(value: RichEditorRange): StyledString

将给定范围的组件内容转换成属性字符串。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

**返回值：**

**错误码：**

以下错误码详细介绍请参考[通用错误码](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-universal-V5)。

错误码ID

错误信息

401

The parameter check failed.

### 导入对象

1.  controller: RichEditorStyledStringController = new RichEditorStyledStringController()

### getSelection12+

getSelection(): RichEditorRange

获取当前富文本当前的选中区域范围。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

### setStyledString12+

setStyledString(styledString: StyledString): void

设置富文本组件显示的属性字符串。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### getStyledString12+

getStyledString(): MutableStyledString;

获取富文本组件显示的属性字符串。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**返回值：**

### onContentChanged12+

onContentChanged(listener: StyledStringChangedListener): void

注册文本内容变化回调，该回调会在后端程序导致文本内容变更时触发

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

RichEditorSelection
-------------------

选中内容信息。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

RichEditorUpdateTextSpanStyleOptions
------------------------------------

文本样式选项。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

start

number

否

需要更新样式的文本起始位置，省略或者设置负值时表示从0开始。

end

number

否

需要更新样式的文本结束位置，省略或者超出文本范围时表示无穷大。

textStyle

[RichEditorTextStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditortextstyle)

是

文本样式。

说明

当start大于end时为异常情况，此时start为0，end为无穷大。

RichEditorUpdateImageSpanStyleOptions
-------------------------------------

图片样式选项。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

start

number

否

需要更新样式的图片起始位置，省略或者设置负值时表示从0开始。

end

number

否

需要更新样式的图片结束位置，省略或者超出所有内容范围时表示无穷大。

imageStyle

[RichEditorImageSpanStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorimagespanstyle)

是

图片样式。

说明

当start大于end时为异常情况，此时start为0，end为无穷大。

RichEditorUpdateSymbolSpanStyleOptions11+
-----------------------------------------

SymbolSpan样式选项。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

start

number

否

需要更新样式的symbol起始位置，省略或者设置负值时表示从0开始。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

end

number

否

需要更新样式的symbol结束位置，省略或者超出所有内容范围时表示无穷大。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

symbolStyle

[RichEditorSymbolSpanStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorsymbolspanstyle11)

是

组件样式。

说明

当start大于end时为异常情况，此时start为0，end为无穷大。

RichEditorParagraphStyleOptions11+
----------------------------------

段落样式选项。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

start

number

否

需要更新样式的段落起始位置，省略或者设置负值时表示从0开始。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

end

number

否

需要更新样式的段落结束位置，省略、负数或者超出所有内容范围时表示无穷大。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

style

[RichEditorParagraphStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorparagraphstyle11)

是

段落样式。

说明

接口作用的范围：设定的区间所涉及的段落。

当start大于end时为异常情况，此时start为0，end为无穷大。

RichEditorParagraphStyle11+
---------------------------

段落样式。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

textAlign

[TextAlign](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#textalign)

否

设置文本段落在水平方向的对齐方式。默认值：TextAlign.START

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

leadingMargin

[Dimension](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#dimension10) | [LeadingMarginPlaceholder](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#leadingmarginplaceholder11)

否

设置文本段落缩进，当段落仅存在ImageSpan或BuilderSpan时，此属性值不生效。参数为Dimension类型时，不支持以Percentage形式设置。默认值：{"size":\["0.00px","0.00px"\]}

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

wordBreak12+

[WordBreak](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#wordbreak11)

否

设置断行规则。

默认值：WordBreak.BREAK\_WORD

lineBreakStrategy12+

[LineBreakStrategy](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#linebreakstrategy12)

否

设置折行规则。

默认值：LineBreakStrategy.GREEDY

在wordBreak不等于breakAll的时候生效，不支持连字符。

LeadingMarginPlaceholder11+
---------------------------

前导边距占位符，用于表示文本段落左侧与组件边缘之间的距离。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

pixelMap

[PixelMap](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-image-V5#pixelmap7)

是

图片内容。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

size

\[[Dimension](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#dimension10), [Dimension](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#dimension10)\]

是

图片大小，不支持设置百分比。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

RichEditorParagraphResult11+
----------------------------

后端返回的段落信息。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

RichEditorTextSpanOptions
-------------------------

添加文本的偏移位置和文本样式信息。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

offset

number

否

添加文本的位置。省略时，添加到所有内容的最后。

当值小于0时，放在所有内容最前面；当值大于所有内容长度时，放在所有内容最后面。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

style

[RichEditorTextStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditortextstyle)

否

文本样式信息。省略时，使用系统默认文本信息。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

paragraphStyle11+

[RichEditorParagraphStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorparagraphstyle11)

否

段落样式。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

gesture11+

[RichEditorGesture](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorgesture11)

否

行为触发回调。省略时，仅使用系统默认行为。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

RichEditorTextStyle
-------------------

文本样式信息。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

fontColor

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

否

文本颜色。

默认值：$r('sys.color.font\_primary')。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

fontSize

[Length](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#length) | number

否

设置字体大小，Length为number类型时，使用fp单位。字体默认大小16。不支持设置百分比字符串。字体大小设置为0时，显示默认字体大小。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

fontStyle

[FontStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#fontstyle)

否

字体样式。

默认值：FontStyle.Normal。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

fontWeight

number | [FontWeight](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#fontweight) | string

否

字体粗细。

number类型取值\[100,900\]，取值间隔为100，默认为400，取值越大，字体越粗。

string类型仅支持number类型取值的字符串形式，例如“400”，以及“bold”、“bolder”、“lighter”、“regular” 、“medium”分别对应FontWeight中相应的枚举值。

默认值：FontWeight.Normal。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

fontFamily

[ResourceStr](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcestr)

否

设置字体列表。默认字体'HarmonyOS Sans'，当前支持'HarmonyOS Sans'字体和[注册自定义字体](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-font-V5)。

默认字体:'HarmonyOS Sans'。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

decoration

[DecorationStyleInterface](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-styled-string-V5#decorationstyleinterface%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)

否

设置文本装饰线样式及其颜色。

type默认值:TextDecorationType.None。

color默认值：跟随字体颜色。

style默认值:TextDecorationStyle.SOLID。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

textShadow11+

[ShadowOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-image-effect-V5#shadowoptions%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E) | Array<[ShadowOptions](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-image-effect-V5#shadowoptions%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)\>

否

设置文字阴影效果。该接口支持以数组形式入参，实现多重文字阴影。

**说明：**

仅支持设置阴影模糊半径、阴影的颜色、阴影的偏移量。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

lineHeight12+

number | string | [Resource](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resource)

否

设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小，number类型时单位为fp，不支持设置百分比字符串。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

letterSpacing12+

number | string

否

设置文本字符间距，当取值为负值时，文字会发生压缩，负值过小时会将组件内容区大小压缩为0，导致无内容显示，number类型时单位为fp, 不支持设置百分比字符串。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

fontFeature12+

string

否

设置文字特性效果，比如数字等宽的特性。如果未设置，默认为变宽数字。设置无效字符保持默认。

格式为：normal | <feature-tag-value\>

<feature-tag-value\>的格式为：<string\> \[ <integer\> | on | off \]

<feature-tag-value\>的个数可以有多个，中间用','隔开。

例如，使用等宽时钟数字的输入格式为："ss01" on。

Font Feature当前支持的属性见 [fontFeature属性列表](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-text-V5#fontfeature12)。

设置 Font Feature 属性，Font Feature 是 OpenType 字体的高级排版能力，如支持连字、数字等宽等特性，一般用在自定义字体中，其能力需要字体本身支持。

更多 Font Feature 能力介绍可参考 [https://www.w3.org/TR/css-fonts-3/#font-feature-settings-prop](https://www.w3.org/TR/css-fonts-3/#font-feature-settings-prop) 和 [https://sparanoid.com/lab/opentype-features/](https://sparanoid.com/lab/opentype-features/)

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

PlaceholderStyle12+
-------------------

添加提示文本的字体样式。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

font

[Font](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#font)

否

设置placeholder文本样式。

默认值跟随主题。

fontColor

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

否

设置placeholder文本颜色。

默认值跟随主题。

RichEditorImageSpanOptions
--------------------------

添加图片的偏移位置和图片样式信息。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

offset

number

否

添加图片的位置。省略时，添加到所有内容的最后。

当值小于0时，放在所有内容最前面；当值大于所有内容长度时，放在所有内容最后面。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

imageStyle

[RichEditorImageSpanStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorimagespanstyle)

否

图片样式信息。省略时，使用系统默认图片信息。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

gesture11+

[RichEditorGesture](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorgesture11)

否

行为触发回调。省略时，仅使用系统默认行为。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

RichEditorImageSpanStyle
------------------------

图片样式。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

size

\[[Dimension](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#dimension10), [Dimension](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#dimension10)\]

否

图片宽度和高度。默认值：size的默认值与objectFit的值有关，不同的objectFit值对应的size默认值也不同。objectFit的值为Cover时，图片高度为组件高度减去组件上下内边距，图片宽度为组件宽度减去组件左右内边距。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

verticalAlign

[ImageSpanAlignment](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-imagespan-V5#imagespanalignment)

否

图片垂直对齐方式。

默认值:ImageSpanAlignment.BASELINE

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

objectFit

[ImageFit](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#imagefit)

否

图片缩放类型。

默认值:ImageFit.Cover。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

layoutStyle11+

[RichEditorLayoutStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorlayoutstyle11)

否

图片布局风格。默认值：{"borderRadius":"","margin":""}

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

RichEditorSymbolSpanOptions11+
------------------------------

添加SymbolSpan组件的偏移位置和SymbolSpan组件样式信息。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

offset

number

否

添加组件的位置。省略时，添加到所有内容的最后。

当值小于0时，放在所有内容最前面；当值大于所有内容长度时，放在所有内容最后面。

style

[RichEditorSymbolSpanStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#richeditorsymbolspanstyle11)

否

组件样式信息。省略时，使用系统默认样式信息。

RichEditorSymbolSpanStyle11+
----------------------------

组件SymbolSpan样式信息。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

fontColor

Array<[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)\>

否

设置SymbolSpan组件颜色。

默认值：不同渲染策略下默认值不同。

fontSize

number | string | [Resource](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resource)

否

设置SymbolSpan组件大小，默认单位为fp。

默认值：跟随主题。

fontWeight

number | [FontWeight](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#fontweight) | string

否

设置SymbolSpan组件粗细。

number类型取值\[100,900\]，取值间隔为100，默认为400，取值越大，字体越粗。

string类型仅支持number类型取值的字符串形式，例如“400”，以及“bold”、“bolder”、“lighter”、“regular” 、“medium”分别对应FontWeight中相应的枚举值。

默认值：FontWeight.Normal。

renderingStrategy

[SymbolRenderingStrategy](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-symbolglyph-V5#symbolrenderingstrategy11%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

否

设置SymbolSpan组件渲染策略。

默认值：SymbolRenderingStrategy.SINGLE。

effectStrategy

[SymbolEffectStrategy](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-symbolglyph-V5#symboleffectstrategy11%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

否

设置SymbolSpan组件动效策略。

默认值：SymbolEffectStrategy.NONE。

RichEditorBuilderSpanOptions11+
-------------------------------

添加图片的偏移位置和图片样式信息。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

offset

number

否

添加builder的位置。省略或者为异常值时，添加到所有内容的最后。

RichEditorSpan12+
-----------------

type RichEditorSpan = RichEditorImageSpanResult | RichEditorTextSpanResult

RichEditor span信息。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

RichEditorRange
---------------

范围信息。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

start

number

否

起始位置，省略或者设置负值时表示从0开始。

end

number

否

结束位置，省略或者超出所有内容范围时表示无穷大。

菜单的选项。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

onAppear

[MenuOnAppearCallback](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-richeditor-V5#menuonappearcallback12)

否

自定义选择菜单弹出时回调。

onDisappear

Callback<void\>

否

自定义选择菜单关闭时回调。

PasteEvent11+
-------------

定义用户粘贴事件。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

preventDefault

Callback<void\>

否

阻止系统默认粘贴事件。

CutEvent12+
-----------

定义用户剪切事件。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

preventDefault

Callback<void\>

否

阻止系统默认剪切事件。

CopyEvent12+
------------

定义用户拷贝事件。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

preventDefault

Callback<void\>

否

阻止系统默认拷贝事件。

RichEditorGesture11+
--------------------

用户行为回调。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

KeyboardOptions12+
------------------

设置自定义键盘是否支持避让功能。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

supportAvoidance

boolean

否

设置自定义键盘是否支持避让功能；默认值为false不支持避让，true为支持避让。

SubmitCallback12+
-----------------

type SubmitCallback = (enterKey: EnterKeyType, event: SubmitEvent) =\> void

软键盘按下回车键时的回调事件。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

enterKey

[EnterKeyType](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#enterkeytype%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

是

软键盘输入法回车键类型。具体类型见EnterKeyType枚举说明。

event

[SubmitEvent](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-textinput-V5#submitevent11%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)

是

当提交的时候，提供保持RichEditor编辑状态的方法。

type MenuOnAppearCallback = (start: number, end: number) =\> void

自定义选择菜单弹出时触发的回调事件。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

start

number

是

选中内容的起始位置。

end

number

是

选中内容的终止位置。

PasteEventCallback12+
---------------------

完成粘贴前，触发回调。

type PasteEventCallback = (event?: PasteEvent) =\> void

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

示例
--

### 示例1

2.  @Entry
3.  @Component
4.  struct Index {
5.    controller: RichEditorController = new RichEditorController();
6.    options: RichEditorOptions = { controller: this.controller };
7.    private start: number = -1;
8.    private end: number = -1;
9.    @State message: string = "\[-1, -1\]"
10.    @State content: string = ""

12.    build() {
13.      Column() {
14.        Column() {
15.          Text("selection range:").width("100%")
16.          Text() {
17.            Span(this.message)
18.          }.width("100%")
19.          Text("selection content:").width("100%")
20.          Text() {
21.            Span(this.content)
22.          }.width("100%")
23.        }
24.        .borderWidth(1)
25.        .borderColor(Color.Red)
26.        .width("100%")
27.        .height("20%")

29.        Row() {
30.          Button("更新样式:加粗").onClick(() =\> {
31.            this.controller.updateSpanStyle({
32.              start: this.start,
33.              end: this.end,
34.              textStyle:
35.              {
36.                fontWeight: FontWeight.Bolder
37.              }
38.            })
39.          })
40.          Button("获取选择内容").onClick(() =\> {
41.            this.content = "";
42.            this.controller.getSpans({
43.              start: this.start,
44.              end: this.end
45.            }).forEach(item =\> {
46.              if(typeof(item as RichEditorImageSpanResult)\['imageStyle'\] != 'undefined'){
47.                this.content += (item as RichEditorImageSpanResult).valueResourceStr;
48.                this.content += "\\n"
49.              } else {
50.                if(typeof(item as RichEditorTextSpanResult)\['symbolSpanStyle'\] != 'undefined') {
51.                  this.content += (item as RichEditorTextSpanResult).symbolSpanStyle?.fontSize;
52.                  this.content += "\\n"
53.                }else {
54.                  this.content += (item as RichEditorTextSpanResult).value;
55.                  this.content += "\\n"
56.                }
57.              }
58.            })
59.          })
60.          Button("删除选择内容").onClick(() =\> {
61.            this.controller.deleteSpans({
62.              start: this.start,
63.              end: this.end
64.            })
65.            this.start = -1;
66.            this.end = -1;
67.            this.message = "\[" + this.start + ", " + this.end + "\]"
68.          })
69.        }
70.        .borderWidth(1)
71.        .borderColor(Color.Red)
72.        .width("100%")
73.        .height("10%")

75.        Column() {
76.          RichEditor(this.options)
77.            .onReady(() =\> {
78.              this.controller.addTextSpan("012345",
79.                {
80.                  style:
81.                  {
82.                    fontColor: Color.Orange,
83.                    fontSize: 30
84.                  }
85.                })
86.              this.controller.addSymbolSpan($r("sys.symbol.ohos\_trash"),
87.                {
88.                  style:
89.                  {
90.                    fontSize: 30
91.                  }
92.                })
93.              this.controller.addImageSpan($r("app.media.icon"),
94.                {
95.                  imageStyle:
96.                  {
97.                    size: \["57px", "57px"\]
98.                  }
99.                })
100.              this.controller.addTextSpan("56789",
101.                {
102.                  style:
103.                  {
104.                    fontColor: Color.Black,
105.                    fontSize: 30
106.                  }
107.                })
108.            })
109.            .onSelect((value: RichEditorSelection) =\> {
110.              this.start = value.selection\[0\];
111.              this.end = value.selection\[1\];
112.              this.message = "\[" + this.start + ", " + this.end + "\]"
113.            })
114.            .aboutToIMEInput((value: RichEditorInsertValue) =\> {
115.              console.log("---------------------- aboutToIMEInput ----------------------")
116.              console.log("insertOffset:" + value.insertOffset)
117.              console.log("insertValue:" + value.insertValue)
118.              return true;
119.            })
120.            .onIMEInputComplete((value: RichEditorTextSpanResult) =\> {
121.              console.log("---------------------- onIMEInputComplete ---------------------")
122.              console.log("spanIndex:" + value.spanPosition.spanIndex)
123.              console.log("spanRange:\[" + value.spanPosition.spanRange\[0\] + "," + value.spanPosition.spanRange\[1\] + "\]")
124.              console.log("offsetInSpan:\[" + value.offsetInSpan\[0\] + "," + value.offsetInSpan\[1\] + "\]")
125.              console.log("value:" + value.value)
126.            })
127.            .aboutToDelete((value: RichEditorDeleteValue) =\> {
128.              console.log("---------------------- aboutToDelete --------------------------")
129.              console.log("offset:" + value.offset)
130.              console.log("direction:" + value.direction)
131.              console.log("length:" + value.length)
132.              value.richEditorDeleteSpans.forEach(item =\> {
133.                console.log("---------------------- item --------------------------")
134.                console.log("spanIndex:" + item.spanPosition.spanIndex)
135.                console.log("spanRange:\[" + item.spanPosition.spanRange\[0\] + "," + item.spanPosition.spanRange\[1\] + "\]")
136.                console.log("offsetInSpan:\[" + item.offsetInSpan\[0\] + "," + item.offsetInSpan\[1\] + "\]")
137.                if (typeof(item as RichEditorImageSpanResult)\['imageStyle'\] != 'undefined') {
138.                  console.log("image:" + (item as RichEditorImageSpanResult).valueResourceStr)
139.                } else {
140.                  console.log("text:" + (item as RichEditorTextSpanResult).value)
141.                }
142.              })
143.              return true;
144.            })
145.            .onDeleteComplete(() =\> {
146.              console.log("---------------------- onDeleteComplete ------------------------")
147.            })
148.            .placeholder("input...", {
149.              fontColor: Color.Gray,
150.              font: {
151.                size: 16,
152.                weight: FontWeight.Normal,
153.                family: "HarmonyOS Sans",
154.                style: FontStyle.Normal
155.              }
156.            })
157.            .borderWidth(1)
158.            .borderColor(Color.Green)
159.            .width("100%")
160.            .height("30%")
161.        }
162.        .borderWidth(1)
163.        .borderColor(Color.Red)
164.        .width("100%")
165.        .height("70%")
166.      }
167.    }
168.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114439.80584840303254509052115030972227:50001231000000:2800:A5B6869D7F0F9919E089B5B8409043730EA17158943177A3B8C003EBA1B0EDCF.gif?needInitFileName=true?needInitFileName=true)

### 示例2

2.  @Entry
3.  @Component
4.  struct RichEditorExample {
5.    controller: RichEditorController = new RichEditorController()

8.    @Builder CustomKeyboardBuilder() {
9.      Column() {
10.        Grid() {
11.          ForEach(\[1, 2, 3, 4, 5, 6, 7, 8, 9, '\*', 0, '#'\], (item: number | string) =\> {
12.            GridItem() {
13.              Button(item + "")
14.                .width(110).onClick(() =\> {
15.                this.controller.addTextSpan(item + '', {
16.                  offset: this.controller.getCaretOffset(),
17.                  style:
18.                  {
19.                    fontColor: Color.Orange,
20.                    fontSize: 30
21.                  }
22.                })
23.                this.controller.setCaretOffset(this.controller.getCaretOffset() + item.toString().length)
24.              })
25.            }
26.          })
27.        }.maxCount(3).columnsGap(10).rowsGap(10).padding(5)
28.      }.backgroundColor(Color.Gray)
29.    }

31.    build() {
32.      Column() {
33.        RichEditor({ controller: this.controller })

35.          .customKeyboard(this.CustomKeyboardBuilder()).margin(10).border({ width: 1 })
36.          .height(200)
37.          .borderWidth(1)
38.          .borderColor(Color.Red)
39.          .width("100%")
40.      }
41.    }
42.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114439.72434149236666510700571305335113:50001231000000:2800:87F25889D7C0EA8D729FA07EAFA17BBA61D5660DBE265F14337508DD978724EB.gif?needInitFileName=true?needInitFileName=true)

### 示例3

2.  import { BusinessError, pasteboard } from '@kit.BasicServicesKit';

4.  export interface SelectionMenuTheme {
5.    imageSize: number;
6.    buttonSize: number;
7.    menuSpacing: number;
8.    editorOptionMargin: number;
9.    expandedOptionPadding: number;
10.    defaultMenuWidth: number;
11.    imageFillColor: Resource;
12.    backGroundColor: Resource;
13.    iconBorderRadius: Resource;
14.    containerBorderRadius: Resource;
15.    cutIcon: Resource;
16.    copyIcon: Resource;
17.    pasteIcon: Resource;
18.    selectAllIcon: Resource;
19.    shareIcon: Resource;
20.    translateIcon: Resource;
21.    searchIcon: Resource;
22.    arrowDownIcon: Resource;
23.    iconPanelShadowStyle: ShadowStyle;
24.    iconFocusBorderColor: Resource;
25.  }

27.  export const defaultTheme: SelectionMenuTheme = {
28.    imageSize: 24,
29.    buttonSize: 48,
30.    menuSpacing: 8,
31.    editorOptionMargin: 1,
32.    expandedOptionPadding: 3,
33.    defaultMenuWidth: 256,
34.    imageFillColor: $r('sys.color.ohos\_id\_color\_primary'),
35.    backGroundColor: $r('sys.color.ohos\_id\_color\_dialog\_bg'),
36.    iconBorderRadius: $r('sys.float.ohos\_id\_corner\_radius\_default\_m'),
37.    containerBorderRadius: $r('sys.float.ohos\_id\_corner\_radius\_card'),
38.    cutIcon: $r("sys.media.ohos\_ic\_public\_cut"),
39.    copyIcon: $r("sys.media.ohos\_ic\_public\_copy"),
40.    pasteIcon: $r("sys.media.ohos\_ic\_public\_paste"),
41.    selectAllIcon: $r("sys.media.ohos\_ic\_public\_select\_all"),
42.    shareIcon: $r("sys.media.ohos\_ic\_public\_share"),
43.    translateIcon: $r("sys.media.ohos\_ic\_public\_translate\_c2e"),
44.    searchIcon: $r("sys.media.ohos\_ic\_public\_search\_filled"),
45.    arrowDownIcon: $r("sys.media.ohos\_ic\_public\_arrow\_down"),
46.    iconPanelShadowStyle: ShadowStyle.OUTER\_DEFAULT\_MD,
47.    iconFocusBorderColor: $r('sys.color.ohos\_id\_color\_focused\_outline'),
48.  }

50.  @Entry
51.  @Component
52.  struct SelectionMenu {
53.    @State message: string = 'Hello World'
54.    @State textSize: number = 40
55.    @State sliderShow: boolean = false
56.    @State start: number = -1
57.    @State end: number = -1
58.    @State colorTransparent: Color = Color.Transparent
59.    controller: RichEditorController = new RichEditorController();
60.    options: RichEditorOptions = { controller: this.controller }
61.    private iconArr: Array<Resource\> =
62.      \[$r('app.media.icon'), $r("app.media.icon"), $r('app.media.icon'),
63.      $r("app.media.icon"), $r('app.media.icon')\]
64.    @State iconBgColor: ResourceColor\[\] = new Array(this.iconArr.length).fill(this.colorTransparent)
65.    @State pasteEnable: boolean = false
66.    @State visibilityValue: Visibility = Visibility.Visible
67.    @State textStyle: RichEditorTextStyle = {}
68.    private fontWeightTable: string\[\] = \["100", "200", "300", "400", "500", "600", "700", "800", "900", "bold", "normal", "bolder", "lighter", "medium", "regular"\]
69.    private theme: SelectionMenuTheme = defaultTheme;

71.    aboutToAppear() {
72.      if (this.controller) {
73.        let richEditorSelection = this.controller.getSelection()
74.        if (richEditorSelection) {
75.          let start = richEditorSelection.selection\[0\]
76.          let end = richEditorSelection.selection\[1\]
77.          if (start === 0 && this.controller.getSpans({ start: end + 1, end: end + 1 }).length === 0) {
78.            this.visibilityValue = Visibility.None
79.          } else {
80.            this.visibilityValue = Visibility.Visible
81.          }
82.        }
83.      }
84.      let sysBoard = pasteboard.getSystemPasteboard()
85.      if (sysBoard && sysBoard.hasDataSync()) {
86.        this.pasteEnable = true
87.      } else {
88.        this.pasteEnable = false
89.      }
90.    }

92.    build() {
93.      Column() {
94.        Column() {
95.          RichEditor(this.options)
96.            .onReady(() =\> {
97.              this.controller.addTextSpan(this.message, { style: { fontColor: Color.Orange, fontSize: 30 } })
98.            })
99.            .onSelect((value: RichEditorSelection) =\> {
100.              if (value.selection\[0\] == -1 && value.selection\[1\] == -1) {
101.                return
102.              }
103.              this.start = value.selection\[0\]
104.              this.end = value.selection\[1\]
105.            })
106.            .bindSelectionMenu(RichEditorSpanType.TEXT, this.panel, ResponseType.LongPress, { onDisappear: () =\> {
107.              this.sliderShow = false
108.            }})
109.            .bindSelectionMenu(RichEditorSpanType.TEXT, this.panel, ResponseType.RightClick, { onDisappear: () =\> {
110.              this.sliderShow = false
111.            }})
112.            .borderWidth(1)
113.            .borderColor(Color.Red)
114.            .width(200)
115.            .height(200)
116.        }.width('100%').backgroundColor(Color.White)
117.      }.height('100%')
118.    }

120.    PushDataToPasteboard(richEditorSelection: RichEditorSelection) {
121.      let sysBoard = pasteboard.getSystemPasteboard()
122.      let pasteData = pasteboard.createData(pasteboard.MIMETYPE\_TEXT\_PLAIN, '')
123.      if (richEditorSelection.spans && richEditorSelection.spans.length \> 0) {
124.        let count = richEditorSelection.spans.length
125.        for (let i = count - 1; i \>\= 0; i--) {
126.          let item = richEditorSelection.spans\[i\]
127.          if ((item as RichEditorTextSpanResult)?.textStyle) {
128.            let span = item as RichEditorTextSpanResult
129.            let style = span.textStyle
130.            let data = pasteboard.createRecord(pasteboard.MIMETYPE\_TEXT\_PLAIN, span.value.substring(span.offsetInSpan\[0\], span.offsetInSpan\[1\]))
131.            let prop = pasteData.getProperty()
132.            let temp: Record<string, Object\> = {
133.              'color': style.fontColor,
134.              'size': style.fontSize,
135.              'style': style.fontStyle,
136.              'weight': this.fontWeightTable\[style.fontWeight\],
137.              'fontFamily': style.fontFamily,
138.              'decorationType': style.decoration.type,
139.              'decorationColor': style.decoration.color
140.            }
141.            prop.additions\[i\] = temp;
142.            pasteData.addRecord(data)
143.            pasteData.setProperty(prop)
144.          }
145.        }
146.      }
147.      sysBoard.clearData()
148.      sysBoard.setData(pasteData).then(() =\> {
149.        console.info('SelectionMenu copy option, Succeeded in setting PasteData.');
150.        this.pasteEnable = true;
151.      }).catch((err: BusinessError) =\> {
152.        console.error('SelectionMenu copy option, Failed to set PasteData. Cause:' + err.message);
153.      })
154.    }

156.    PopDataFromPasteboard(richEditorSelection: RichEditorSelection) {
157.      let start = richEditorSelection.selection\[0\]
158.      let end = richEditorSelection.selection\[1\]
159.      if (start == end && this.controller) {
160.        start = this.controller.getCaretOffset()
161.        end = this.controller.getCaretOffset()
162.      }
163.      let moveOffset = 0
164.      let sysBoard = pasteboard.getSystemPasteboard()
165.      sysBoard.getData((err, data) =\> {
166.        if (err) {
167.          return
168.        }
169.        let count = data.getRecordCount()
170.        for (let i = 0; i < count; i++) {
171.          const element = data.getRecord(i);
172.          let tex: RichEditorTextStyle = {
173.            fontSize: 16,
174.            fontColor: Color.Black,
175.            fontWeight: FontWeight.Normal,
176.            fontFamily: "HarmonyOS Sans",
177.            fontStyle: FontStyle.Normal,
178.            decoration: { type: TextDecorationType.None, color: "#FF000000", style: TextDecorationStyle.SOLID }
179.          }
180.          if (data.getProperty() && data.getProperty().additions\[i\]) {
181.            const tmp = data.getProperty().additions\[i\] as Record<string, Object | undefined\>;
182.            if (tmp.color) {
183.              tex.fontColor = tmp.color as ResourceColor;
184.            }
185.            if (tmp.size) {
186.              tex.fontSize = tmp.size as Length | number;
187.            }
188.            if (tmp.style) {
189.              tex.fontStyle = tmp.style as FontStyle;
190.            }
191.            if (tmp.weight) {
192.              tex.fontWeight = tmp.weight as number | FontWeight | string;
193.            }
194.            if (tmp.fontFamily) {
195.              tex.fontFamily = tmp.fontFamily as ResourceStr;
196.            }
197.            if (tmp.decorationType && tex.decoration) {
198.              tex.decoration.type = tmp.decorationType as TextDecorationType;
199.            }
200.            if (tmp.decorationColor && tex.decoration) {
201.              tex.decoration.color = tmp.decorationColor as ResourceColor;
202.            }
203.            if (tex.decoration) {
204.              tex.decoration = { type: tex.decoration.type, color: tex.decoration.color }
205.            }
206.          }
207.          if (element && element.plainText && element.mimeType === pasteboard.MIMETYPE\_TEXT\_PLAIN && this.controller) {
208.            this.controller.addTextSpan(element.plainText,
209.              {
210.                style: tex,
211.                offset: start + moveOffset
212.              }
213.            )
214.            moveOffset += element.plainText.length
215.          }
216.        }
217.        if (this.controller) {
218.          this.controller.setCaretOffset(start + moveOffset)
219.          this.controller.closeSelectionMenu()
220.        }
221.        if (start != end && this.controller) {
222.          this.controller.deleteSpans({ start: start + moveOffset, end: end + moveOffset })
223.        }
224.      })
225.    }

227.    @Builder
228.    panel() {
229.      Column() {
230.        this.iconPanel()
231.        if (!this.sliderShow) {
232.          this.SystemMenu()
233.        } else {
234.          this.sliderPanel()
235.        }
236.      }.width(256)
237.    }

239.    @Builder iconPanel() {
240.      Column() {
241.        Row({ space: 2 }) {
242.          ForEach(this.iconArr, (item:Resource, index ?: number) =\> {
243.            Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {
244.              Image(item).fillColor(this.theme.imageFillColor).width(24).height(24).focusable(true).draggable(false)
245.            }
246.            .borderRadius(this.theme.iconBorderRadius)
247.            .width(this.theme.buttonSize)
248.            .height(this.theme.buttonSize)
249.            .onClick(() =\> {
250.              if (index as number == 0) {
251.                this.sliderShow = false
252.                if (this.controller) {
253.                  let selection = this.controller.getSelection();
254.                  let spans = selection.spans
255.                  spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) =\> {
256.                    if (typeof (item as RichEditorTextSpanResult)\['textStyle'\] != 'undefined') {
257.                      let span = item as RichEditorTextSpanResult
258.                      this.textStyle = span.textStyle
259.                      let start = span.offsetInSpan\[0\]
260.                      let end = span.offsetInSpan\[1\]
261.                      let offset = span.spanPosition.spanRange\[0\]
262.                      if (this.textStyle.fontWeight != 11) {
263.                        this.textStyle.fontWeight = FontWeight.Bolder
264.                      } else {
265.                        this.textStyle.fontWeight = FontWeight.Normal
266.                      }
267.                      this.controller.updateSpanStyle({
268.                        start: offset + start,
269.                        end: offset + end,
270.                        textStyle: this.textStyle
271.                      })
272.                    }
273.                  })
274.                }
275.              } else if (index as number == 1) {
276.                this.sliderShow = false
277.                if (this.controller) {
278.                  let selection = this.controller.getSelection();
279.                  let spans = selection.spans
280.                  spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) =\> {
281.                    if (typeof (item as RichEditorTextSpanResult)\['textStyle'\] != 'undefined') {
282.                      let span = item as RichEditorTextSpanResult
283.                      this.textStyle = span.textStyle
284.                      let start = span.offsetInSpan\[0\]
285.                      let end = span.offsetInSpan\[1\]
286.                      let offset = span.spanPosition.spanRange\[0\]
287.                      if (this.textStyle.fontStyle == FontStyle.Italic) {
288.                        this.textStyle.fontStyle = FontStyle.Normal
289.                      } else {
290.                        this.textStyle.fontStyle = FontStyle.Italic
291.                      }
292.                      this.controller.updateSpanStyle({
293.                        start: offset + start,
294.                        end: offset + end,
295.                        textStyle: this.textStyle
296.                      })
297.                    }
298.                  })
299.                }
300.              } else if (index as number == 2) {
301.                this.sliderShow = false
302.                if (this.controller) {
303.                  let selection = this.controller.getSelection();
304.                  let spans = selection.spans
305.                  spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) =\> {
306.                    if (typeof (item as RichEditorTextSpanResult)\['textStyle'\] != 'undefined') {
307.                      let span = item as RichEditorTextSpanResult
308.                      this.textStyle = span.textStyle
309.                      let start = span.offsetInSpan\[0\]
310.                      let end = span.offsetInSpan\[1\]
311.                      let offset = span.spanPosition.spanRange\[0\]
312.                      if (this.textStyle.decoration) {
313.                        if (this.textStyle.decoration.type == TextDecorationType.Underline) {
314.                          this.textStyle.decoration.type = TextDecorationType.None
315.                        } else {
316.                          this.textStyle.decoration.type = TextDecorationType.Underline
317.                        }
318.                      } else {
319.                        this.textStyle.decoration = { type: TextDecorationType.Underline, color: Color.Black, style: TextDecorationStyle.SOLID }
320.                      }
321.                      this.controller.updateSpanStyle({
322.                        start: offset + start,
323.                        end: offset + end,
324.                        textStyle: this.textStyle
325.                      })
326.                    }
327.                  })
328.                }
329.              } else if (index as number == 3) {
330.                this.sliderShow = !this.sliderShow
331.              } else if (index as number == 4) {
332.                this.sliderShow = false
333.                if (this.controller) {
334.                  let selection = this.controller.getSelection();
335.                  let spans = selection.spans
336.                  spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) =\> {
337.                    if (typeof (item as RichEditorTextSpanResult)\['textStyle'\] != 'undefined') {
338.                      let span = item as RichEditorTextSpanResult
339.                      this.textStyle = span.textStyle
340.                      let start = span.offsetInSpan\[0\]
341.                      let end = span.offsetInSpan\[1\]
342.                      let offset = span.spanPosition.spanRange\[0\]
343.                      if (this.textStyle.fontColor == Color.Orange || this.textStyle.fontColor == '#FFFFA500') {
344.                        this.textStyle.fontColor = Color.Black
345.                      } else {
346.                        this.textStyle.fontColor = Color.Orange
347.                      }
348.                      this.controller.updateSpanStyle({
349.                        start: offset + start,
350.                        end: offset + end,
351.                        textStyle: this.textStyle
352.                      })
353.                    }
354.                  })
355.                }
356.              }
357.            })
358.            .onTouch((event?: TouchEvent | undefined) =\> {
359.              if(event != undefined){
360.                if (event.type === TouchType.Down) {
361.                  this.iconBgColor\[index as number\] = $r('sys.color.ohos\_id\_color\_click\_effect')
362.                }
363.                if (event.type === TouchType.Up) {
364.                  this.iconBgColor\[index as number\] = this.colorTransparent
365.                }
366.              }
367.            })
368.            .onHover((isHover?: boolean, event?: HoverEvent) =\> {
369.              this.iconBgColor.forEach((icon:ResourceColor, index1) =\> {
370.                this.iconBgColor\[index1\] = this.colorTransparent
371.              })
372.              if(isHover != undefined) {
373.                this.iconBgColor\[index as number\] = $r('sys.color.ohos\_id\_color\_hover')
374.              }
375.            })
376.            .backgroundColor(this.iconBgColor\[index as number\])
377.          })
378.        }
379.      }
380.      .clip(true)
381.      .width(this.theme.defaultMenuWidth)
382.      .padding(this.theme.expandedOptionPadding)
383.      .borderRadius(this.theme.containerBorderRadius)
384.      .margin({ bottom: this.theme.menuSpacing })
385.      .backgroundColor(this.theme.backGroundColor)
386.      .shadow(this.theme.iconPanelShadowStyle)
387.    }

389.    @Builder
390.    SystemMenu() {
391.      Column() {
392.        Menu() {
393.          if (this.controller) {
394.            MenuItemGroup() {
395.              MenuItem({ startIcon: this.theme.cutIcon, content: "剪切", labelInfo: "Ctrl+X" })
396.                .onClick(() =\> {
397.                  if (!this.controller) {
398.                    return
399.                  }
400.                  let richEditorSelection = this.controller.getSelection()
401.                  this.PushDataToPasteboard(richEditorSelection);
402.                  this.controller.deleteSpans({
403.                    start: richEditorSelection.selection\[0\],
404.                    end: richEditorSelection.selection\[1\]
405.                  })
406.                })
407.              MenuItem({ startIcon: this.theme.copyIcon, content: "复制", labelInfo: "Ctrl+C" })
408.                .onClick(() =\> {
409.                  if (!this.controller) {
410.                    return
411.                  }
412.                  let richEditorSelection = this.controller.getSelection()
413.                  this.PushDataToPasteboard(richEditorSelection);
414.                  this.controller.closeSelectionMenu()
415.                })
416.              MenuItem({ startIcon: this.theme.pasteIcon, content: "粘贴", labelInfo: "Ctrl+V" })
417.                .enabled(this.pasteEnable)
418.                .onClick(() =\> {
419.                  if (!this.controller) {
420.                    return
421.                  }
422.                  let richEditorSelection = this.controller.getSelection()
423.                  this.PopDataFromPasteboard(richEditorSelection)
424.                })
425.              MenuItem({ startIcon: this.theme.selectAllIcon, content: "全选", labelInfo: "Ctrl+A" })
426.                .visibility(this.visibilityValue)
427.                .onClick(() =\> {
428.                  if (!this.controller) {
429.                    return
430.                  }
431.                  this.controller.setSelection(-1, -1)
432.                  this.visibilityValue = Visibility.None
433.                })
434.              MenuItem({ startIcon: this.theme.shareIcon, content: "分享", labelInfo: "" })
435.                .enabled(false)
436.              MenuItem({ startIcon: this.theme.translateIcon, content: "翻译", labelInfo: "" })
437.                .enabled(false)
438.              MenuItem({ startIcon: this.theme.searchIcon, content: "搜索", labelInfo: "" })
439.                .enabled(false)
440.            }
441.          }
442.        }
443.        .onVisibleAreaChange(\[0.0, 1.0\], () =\> {
444.          if (!this.controller) {
445.            return
446.          }
447.          let richEditorSelection = this.controller.getSelection()
448.          let start = richEditorSelection.selection\[0\]
449.          let end = richEditorSelection.selection\[1\]
450.          if (start === 0 && this.controller.getSpans({ start: end + 1, end: end + 1 }).length === 0) {
451.            this.visibilityValue = Visibility.None
452.          } else {
453.            this.visibilityValue = Visibility.Visible
454.          }
455.        })
456.        .radius(this.theme.containerBorderRadius)
457.        .clip(true)
458.        .backgroundColor(Color.White)
459.        .width(this.theme.defaultMenuWidth)
460.      }
461.      .width(this.theme.defaultMenuWidth)
462.    }

464.    @Builder sliderPanel() {
465.      Column() {
466.        Flex({ justifyContent: FlexAlign.SpaceBetween, alignItems: ItemAlign.Center }) {
467.          Text('A').fontSize(15)
468.          Slider({ value: this.textSize, step: 10, style: SliderStyle.InSet })
469.            .width(210)
470.            .onChange((value: number, mode: SliderChangeMode) =\> {
471.              if (this.controller) {
472.                let selection = this.controller.getSelection();
473.                if (mode == SliderChangeMode.End) {
474.                  if (this.textSize == undefined) {
475.                    this.textSize = 0
476.                  }
477.                  let spans = selection.spans
478.                  spans.forEach((item: RichEditorTextSpanResult | RichEditorImageSpanResult, index) =\> {
479.                    if (typeof (item as RichEditorTextSpanResult)\['textStyle'\] != 'undefined') {
480.                      this.textSize = Math.max(this.textSize, (item as RichEditorTextSpanResult).textStyle.fontSize)
481.                    }
482.                  })
483.                }
484.                if (mode == SliderChangeMode.Moving || mode == SliderChangeMode.Click) {
485.                  this.start = selection.selection\[0\]
486.                  this.end = selection.selection\[1\]
487.                  this.textSize = value
488.                  this.controller.updateSpanStyle({
489.                    start: this.start,
490.                    end: this.end,
491.                    textStyle: { fontSize: this.textSize }
492.                  })
493.                }
494.              }
495.            })
496.          Text('A').fontSize(20).fontWeight(FontWeight.Medium)
497.        }.borderRadius(this.theme.containerBorderRadius)
498.      }
499.      .shadow(ShadowStyle.OUTER\_DEFAULT\_MD)
500.      .backgroundColor(Color.White)
501.      .borderRadius(this.theme.containerBorderRadius)
502.      .padding(15)
503.      .height(48)
504.    }
505.  }

说明

系统暂未预置加粗、斜体等图标，示例代码使用系统默认图标，开发者使用时需自行替换iconArr中的资源。

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114440.49663262406322571778765713037348:50001231000000:2800:5D56165C8131554AEA4A692599DD825191D74122BFDBFB53B820E767048EB603.png?needInitFileName=true?needInitFileName=true)

### 示例4

2.  @Entry
3.  @Component
4.  struct Index {
5.    controller: RichEditorController = new RichEditorController();
6.    options: RichEditorOptions = { controller: this.controller };
7.    private start: number = -1;
8.    private end: number = -1;
9.    @State message: string = "\[-1, -1\]"
10.    @State content: string = ""
11.    @State paddingVal: number = 5
12.    @State borderRad: number = 4

14.    build() {
15.      Column() {
16.        Column() {
17.          Text("selection range:").width("100%")
18.          Text() {
19.            Span(this.message)
20.          }.width("100%")
21.          Text("selection content:").width("100%")
22.          Text() {
23.            Span(this.content)
24.          }.width("100%")
25.        }
26.        .borderWidth(1)
27.        .borderColor(Color.Red)
28.        .width("100%")
29.        .height("20%")

31.        Row() {
32.          Button("updateSpanStyle1")
33.            .fontSize(12)
34.            .onClick(() =\> {
35.              this.controller.updateSpanStyle({
36.                start: this.start,
37.                textStyle:
38.                {
39.                  fontWeight: FontWeight.Bolder
40.                },
41.                imageStyle: {
42.                  size: \["80px", "80px"\],
43.                  layoutStyle: {
44.                    borderRadius: undefined,
45.                    margin: undefined
46.                  }
47.                }
48.              })
49.            })

51.          Button("updateSpanStyle2")
52.            .fontSize(12)
53.            .onClick(() =\> {
54.              this.controller.updateSpanStyle({
55.                start: this.start,
56.                textStyle:
57.                {
58.                  fontWeight: FontWeight.Bolder
59.                },
60.                imageStyle: {
61.                  size: \["70px", "70px"\],
62.                  layoutStyle: {
63.                    borderRadius: { topLeft: '100px', topRight: '20px', bottomLeft: '100px', bottomRight: '20px' },
64.                    margin: { left: '30px', top: '20px', right: '20px', bottom: '20px' }
65.                  }
66.                }
67.              })
68.            })

70.          Button("updateSpanStyle3")
71.            .fontSize(12)
72.            .onClick(() =\> {
73.              this.controller.updateSpanStyle({
74.                start: this.start,
75.                textStyle:
76.                {
77.                  fontWeight: FontWeight.Bolder
78.                },
79.                imageStyle: {
80.                  size: \["60px", "60px"\],
81.                  layoutStyle: {
82.                    borderRadius: '-10px',
83.                    margin: '-10px'
84.                  }
85.                }
86.              })
87.            })
88.        }
89.        .borderWidth(1)
90.        .borderColor(Color.Red)
91.        .width("100%")
92.        .height("10%")

94.        Row() {
95.          Button('addImageSpan1')
96.            .fontSize(12)
97.            .onClick(() =\> {
98.              this.controller.addImageSpan($r('app.media.app\_icon'), {
99.                imageStyle: {
100.                  size: \["80px", "80px"\],
101.                  layoutStyle: {
102.                    borderRadius: '50px',
103.                    margin: '40px'
104.                  }
105.                }
106.              })
107.            })

109.          Button('addImageSpan2')
110.            .fontSize(12)
111.            .onClick(() =\> {
112.              this.controller.addImageSpan($r('app.media.app\_icon'), {
113.                imageStyle: {
114.                  size: \["100px", "100px"\],
115.                  verticalAlign: ImageSpanAlignment.BOTTOM,
116.                  layoutStyle: {
117.                    borderRadius: undefined,
118.                    margin: undefined
119.                  }
120.                }
121.              })
122.            })

124.          Button('addImageSpan3')
125.            .fontSize(12)
126.            .onClick(() =\> {
127.              this.controller.addImageSpan($r('app.media.app\_icon'), {
128.                imageStyle: {
129.                  size: \["60px", "60px"\],
130.                  verticalAlign: ImageSpanAlignment.BOTTOM,
131.                  layoutStyle: {
132.                    borderRadius: { topLeft: '10px', topRight: '20px', bottomLeft: '30px', bottomRight: '40px' },
133.                    margin: { left: '10px', top: '20px', right: '30px', bottom: '40px' }
134.                  }
135.                }
136.              })
137.            })
138.        }
139.        .borderWidth(1)
140.        .borderColor(Color.Red)
141.        .width("100%")
142.        .height("10%")

144.        Column() {
145.          RichEditor(this.options)
146.            .onReady(() =\> {
147.              this.controller.addTextSpan("0123456789",
148.                {
149.                  style:
150.                  {
151.                    fontColor: Color.Orange,
152.                    fontSize: 30
153.                  }
154.                })

156.              this.controller.addImageSpan($r("app.media.app\_icon"),
157.                {
158.                  imageStyle:
159.                  {
160.                    size: \["60px", "60px"\],
161.                    verticalAlign: ImageSpanAlignment.BOTTOM,
162.                    layoutStyle: {
163.                      borderRadius: { topLeft: '10px', topRight: '20px', bottomLeft: '30px', bottomRight: '40px' },
164.                      margin: { left: '10px', top: '20px', right: '30px', bottom: '40px' }
165.                    }
166.                  }
167.                })

169.              this.controller.addTextSpan("0123456789",
170.                {
171.                  style:
172.                  {
173.                    fontColor: Color.Black,
174.                    fontSize: 30
175.                  }
176.                })
177.            })
178.            .onSelect((value: RichEditorSelection) =\> {
179.              this.start = value.selection\[0\];
180.              this.end = value.selection\[1\];
181.              this.message = "\[" + this.start + ", " + this.end + "\]"
182.            })
183.            .aboutToIMEInput((value: RichEditorInsertValue) =\> {
184.              console.log("---------------------- aboutToIMEInput ----------------------")
185.              console.log("insertOffset:" + value.insertOffset)
186.              console.log("insertValue:" + value.insertValue)
187.              return true;
188.            })
189.            .onIMEInputComplete((value: RichEditorTextSpanResult) =\> {
190.              console.log("---------------------- onIMEInputComplete ---------------------")
191.              console.log("spanIndex:" + value.spanPosition.spanIndex)
192.              console.log("spanRange:\[" + value.spanPosition.spanRange\[0\] + "," + value.spanPosition.spanRange\[1\] + "\]")
193.              console.log("offsetInSpan:\[" + value.offsetInSpan\[0\] + "," + value.offsetInSpan\[1\] + "\]")
194.              console.log("value:" + value.value)
195.            })
196.            .aboutToDelete((value: RichEditorDeleteValue) =\> {
197.              console.log("---------------------- aboutToDelete --------------------------")
198.              console.log("offset:" + value.offset)
199.              console.log("direction:" + value.direction)
200.              console.log("length:" + value.length)
201.              value.richEditorDeleteSpans.forEach(item =\> {
202.                console.log("---------------------- item --------------------------")
203.                console.log("spanIndex:" + item.spanPosition.spanIndex)
204.                console.log("spanRange:\[" + item.spanPosition.spanRange\[0\] + "," + item.spanPosition.spanRange\[1\] + "\]")
205.                console.log("offsetInSpan:\[" + item.offsetInSpan\[0\] + "," + item.offsetInSpan\[1\] + "\]")
206.                if (typeof (item as RichEditorImageSpanResult)\['imageStyle'\] != 'undefined') {
207.                  console.log("image:" + (item as RichEditorImageSpanResult).valueResourceStr)
208.                } else {
209.                  console.log("text:" + (item as RichEditorTextSpanResult).value)
210.                }
211.              })
212.              return true;
213.            })
214.            .onDeleteComplete(() =\> {
215.              console.log("---------------------- onDeleteComplete ------------------------")
216.            })
217.            .borderWidth(1)
218.            .borderColor(Color.Green)
219.            .width("100%")
220.            .height('80.00%')
221.        }
222.        .borderWidth(1)
223.        .borderColor(Color.Red)
224.        .width("100%")
225.        .height("70%")
226.      }
227.    }
228.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114440.31690018125482565439994636583454:50001231000000:2800:B92780C3CD40762D270CA2B89848BC317655050060906BF0A2511BE35370262D.gif?needInitFileName=true?needInitFileName=true)

### 示例5

2.  @Entry
3.  @Component
4.  struct Index {
5.    controller: RichEditorController = new RichEditorController()
6.    options: RichEditorOptions = { controller: this.controller };
7.    @State textFlag: string = "TextFlag";

9.    build() {
10.      Column() {
11.        Column() {
12.          Text(this.textFlag)
13.            .copyOption(CopyOptions.InApp)
14.            .fontSize(50)
15.        }
16.        Divider()
17.        Column() {
18.          RichEditor(this.options)
19.            .onReady(() =\> {
20.              this.controller.addTextSpan('Area1\\n', {
21.                style:
22.                {
23.                  fontColor: Color.Orange,
24.                  fontSize: 50
25.                },
26.                gesture:
27.                {
28.                  onClick: () =\> {
29.                    this.textFlag = "Area1 is onClick."
30.                  },
31.                  onLongPress: () =\> {
32.                    this.textFlag = "Area1 is onLongPress."
33.                  }
34.                }
35.              })

37.              this.controller.addTextSpan('Area2\\n', {
38.                style:
39.                {
40.                  fontColor: Color.Blue,
41.                  fontSize: 50
42.                },
43.                gesture:
44.                {
45.                  onClick: () =\> {
46.                    this.textFlag = "Area2 is onClick."
47.                  },
48.                  onLongPress: () =\> {
49.                    this.textFlag = "Area2 is onLongPress."
50.                  }
51.                }
52.              })

54.              this.controller.addImageSpan($r("app.media.icon"),
55.                {
56.                  imageStyle:
57.                  {
58.                    size: \["100px", "100px"\],
59.                    layoutStyle: {
60.                      margin: 5,
61.                      borderRadius: 15
62.                    }
63.                  },
64.                  gesture:
65.                  {
66.                    onClick: () =\> {
67.                      this.textFlag = "ImageSpan is onClick."
68.                    },
69.                    onLongPress: () =\> {
70.                      this.textFlag = "ImageSpan is onLongPress."
71.                    }
72.                  }
73.                })
74.            })
75.        }
76.        .borderWidth(1)
77.        .borderColor(Color.Red)
78.        .width("100%")
79.        .height("70%")
80.      }
81.    }
82.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114440.19842384387984608474761465142791:50001231000000:2800:DB7A3A3B397C6F48048CCFBCC08B7A5C284A517D7E27B6D4A9F1E794D0E71DD5.gif?needInitFileName=true?needInitFileName=true)

### 示例6

2.  @Entry
3.  @Component
4.  struct Index {
5.    controller: RichEditorController = new RichEditorController();
6.    private spanParagraphs: RichEditorParagraphResult\[\] = \[\];

8.    build() {
9.      Column() {
10.        RichEditor({ controller: this.controller })
11.          .onReady(() =\> {
12.            this.controller.addTextSpan("0123456789\\n", {
13.              style: {
14.                fontColor: Color.Pink,
15.                fontSize: "32",
16.              },
17.              paragraphStyle: {
18.                textAlign: TextAlign.Start,
19.                leadingMargin: 16
20.              }
21.            })
22.            this.controller.addTextSpan("0123456789")
23.          })
24.          .width("80%")
25.          .height("30%")
26.          .border({ width: 1, radius: 5 })
27.          .draggable(false)

29.        Column({ space: 5 }) {
30.          Button("段落左对齐").onClick(() =\> {
31.            this.controller.updateParagraphStyle({ start: -1, end: -1,
32.              style: {
33.                textAlign: TextAlign.Start,
34.              }
35.            })
36.          })

38.          Button("段落右对齐").onClick(() =\> {
39.            this.controller.updateParagraphStyle({ start: -1, end: -1,
40.              style: {
41.                textAlign: TextAlign.End,
42.              }
43.            })
44.          })

46.          Button("段落居中").onClick(() =\> {
47.            this.controller.updateParagraphStyle({ start: -1, end: -1,
48.              style: {
49.                textAlign: TextAlign.Center,
50.              }
51.            })
52.          })
53.          Divider()
54.          Button("getParagraphs").onClick(() =\> {
55.            this.spanParagraphs = this.controller.getParagraphs({ start: -1, end: -1 })
56.            console.log("RichEditor getParagraphs:" + JSON.stringify(this.spanParagraphs))
57.          })

59.          Button("UpdateSpanStyle1").onClick(() =\> {
60.            this.controller.updateSpanStyle({ start: -1, end: -1,
61.              textStyle: {
62.                fontColor: Color.Brown,
63.                fontSize: 20
64.              }
65.            })
66.          })

68.          Button("UpdateSpanStyle2").onClick(() =\> {
69.            this.controller.updateSpanStyle({ start: -1, end: -1,
70.              textStyle: {
71.                fontColor: Color.Green,
72.                fontSize: 30
73.              }
74.            })
75.          })
76.        }
77.      }
78.    }
79.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114440.79632516849428200286644588692312:50001231000000:2800:29A798BCF4AE7EC14111449ABCF4C1C4F1F7ED2D29C371FD7F6263DB0B552D1B.gif?needInitFileName=true?needInitFileName=true)

### 示例7

2.  import { font } from '@kit.ArkUI'

4.  const canvasWidth = 1000
5.  const canvasHeight = 100
6.  const Indentation = 40
7.  class LeadingMarginCreator {
8.    private settings: RenderingContextSettings = new RenderingContextSettings(true)
9.    private offscreenCanvas: OffscreenCanvas = new OffscreenCanvas(canvasWidth, canvasHeight)
10.    private offContext: OffscreenCanvasRenderingContext2D = this.offscreenCanvas.getContext("2d", this.settings)
11.    public static instance: LeadingMarginCreator = new LeadingMarginCreator()

14.    public getFontSizeLevel(fontSize: number) {
15.      const fontScaled: number = Number(fontSize) / 16

17.      enum FontSizeScaleThreshold {
18.        SMALL = 0.9,
19.        NORMAL = 1.1,
20.        LEVEL\_1\_LARGE = 1.2,
21.        LEVEL\_2\_LARGE = 1.4,
22.        LEVEL\_3\_LARGE = 1.5
23.      }

25.      let fontSizeLevel: number = 1

27.      if (fontScaled < FontSizeScaleThreshold.SMALL) {
28.        fontSizeLevel = 0
29.      } else if (fontScaled < FontSizeScaleThreshold.NORMAL) {
30.        fontSizeLevel = 1
31.      } else if (fontScaled < FontSizeScaleThreshold.LEVEL\_1\_LARGE) {
32.        fontSizeLevel = 2
33.      } else if (fontScaled < FontSizeScaleThreshold.LEVEL\_2\_LARGE) {
34.        fontSizeLevel = 3
35.      } else if (fontScaled < FontSizeScaleThreshold.LEVEL\_3\_LARGE) {
36.        fontSizeLevel = 4
37.      } else {
38.        fontSizeLevel = 1
39.      }

41.      return fontSizeLevel
42.    }

44.    public getmarginLevel(Width: number) {
45.      let marginlevel: number = 1
46.      if (Width == 40) {
47.        marginlevel = 2.0
48.      } else if (Width == 80) {
49.        marginlevel = 1.0
50.      } else if (Width == 120) {
51.        marginlevel = 2/3
52.      } else if (Width == 160) {
53.        marginlevel = 0.5
54.      } else if (Width == 200) {
55.        marginlevel = 0.4
56.      }
57.      return marginlevel
58.    }

60.    public genStrMark(fontSize: number, str: string): PixelMap {
61.      this.offContext = this.offscreenCanvas.getContext("2d", this.settings)
62.      this.clearCanvas()
63.      this.offContext.font = fontSize + 'vp sans-serif'
64.      this.offContext.fillText(str + '.', 0, fontSize \* 0.9)
65.      return this.offContext.getPixelMap(0, 0, fontSize \* (str.length + 1) / 1.75, fontSize)
66.    }

68.    public genSquareMark(fontSize: number): PixelMap {
69.      this.offContext = this.offscreenCanvas.getContext("2d", this.settings)
70.      this.clearCanvas()
71.      const coordinate = fontSize \* (1 - 1 / 1.5) / 2
72.      const sideLength = fontSize / 1.5
73.      this.offContext.fillRect(coordinate, coordinate, sideLength, sideLength)
74.      return this.offContext.getPixelMap(0, 0, fontSize, fontSize)
75.    }

78.    public genCircleMark(fontSize: number, width: number, level?: number ): PixelMap {
79.      const indentLevel = level ?? 1
80.      const offsetLevel = \[22, 28, 32, 34, 38\]
81.      const fontSizeLevel = this.getFontSizeLevel(fontSize)
82.      const marginlevel = this.getmarginLevel(width)
83.      const newCanvas = new OffscreenCanvas(canvasWidth, canvasHeight)
84.      const newOffContext: OffscreenCanvasRenderingContext2D = newCanvas.getContext("2d", this.settings)
85.      const centerCoordinate = 50
86.      const radius = 10
87.      this.clearCanvas()
88.      newOffContext.ellipse(100 \* (indentLevel + 1) - centerCoordinate \* marginlevel, offsetLevel\[fontSizeLevel\], radius \* marginlevel, radius, 0, 0, 2 \* Math.PI)
89.      newOffContext.fillStyle = '66FF0000'
90.      newOffContext.fill()
91.      return newOffContext.getPixelMap(0, 0, 100 + 100 \* indentLevel, 100)
92.    }

94.    private clearCanvas() {
95.      this.offContext.clearRect(0, 0, canvasWidth, canvasHeight)
96.    }
97.  }

99.  @Entry
100.  @Component
101.  struct Index {
102.    controller: RichEditorController = new RichEditorController()
103.    options: RichEditorOptions = { controller: this.controller }
104.    private leadingMarkCreatorInstance = LeadingMarginCreator.instance
105.    private fontNameRawFile: string = 'MiSans-Bold'
106.    @State fs: number = 30
107.    @State cl: number = Color.Black
108.    private leftMargin: Dimension = 0
109.    private richEditorTextStyle: RichEditorTextStyle = {}

111.    aboutToAppear() {
112.      font.registerFont({
113.        familyName: 'MiSans-Bold',
114.        familySrc: '/font/MiSans-Bold.ttf'
115.      })
116.    }

118.    build() {
119.      Scroll() {
120.        Column() {
121.          RichEditor(this.options)
122.            .onReady(() =\> {
123.              this.controller.addTextSpan("0123456789\\n",
124.                {
125.                  style:
126.                  {
127.                    fontWeight: 'medium',
128.                    fontFamily: this.fontNameRawFile,
129.                    fontColor: Color.Red,
130.                    fontSize: 50,
131.                    fontStyle: FontStyle.Italic,
132.                    decoration: { type: TextDecorationType.Underline, color: Color.Green }
133.                  }
134.                })

136.              this.controller.addTextSpan("abcdefg",
137.                {
138.                  style:
139.                  {
140.                    fontWeight: FontWeight.Lighter,
141.                    fontFamily: 'HarmonyOS Sans',
142.                    fontColor: 'rgba(0,128,0,0.5)',
143.                    fontSize: 30,
144.                    fontStyle: FontStyle.Normal,
145.                    decoration: { type: TextDecorationType.Overline, color: 'rgba(169, 26, 246, 0.50)' }
146.                  }
147.                })
148.            })
149.            .borderWidth(1)
150.            .borderColor(Color.Green)
151.            .width("100%")
152.            .height("50%")

154.          Row({ space: 5 }) {
155.            Button('setTypingStyle1')
156.              .fontSize(10)
157.              .onClick(() =\> {
158.                this.controller.setTypingStyle(
159.                  {
160.                    fontWeight: 'medium',
161.                    fontFamily: this.fontNameRawFile,
162.                    fontColor: Color.Blue,
163.                    fontSize: 50,
164.                    fontStyle: FontStyle.Italic,
165.                    decoration: { type: TextDecorationType.Underline, color: Color.Green }
166.                  })
167.              })

169.            Button('setTypingStyle2')
170.              .fontSize(10)
171.              .onClick(() =\> {
172.                this.controller.setTypingStyle(
173.                  {
174.                    fontWeight: FontWeight.Lighter,
175.                    fontFamily: 'HarmonyOS Sans',
176.                    fontColor: Color.Green,
177.                    fontSize: '30',
178.                    fontStyle: FontStyle.Normal,
179.                    decoration: { type: TextDecorationType.Overline, color: 'rgba(169, 26, 246, 0.50)' }
180.                  })
181.              })
182.          }
183.          Divider()
184.          Button("getTypingStyle").onClick(() =\> {
185.            this.richEditorTextStyle = this.controller.getTypingStyle()
186.            console.log("RichEditor getTypingStyle:" + JSON.stringify(this.richEditorTextStyle))
187.          })
188.          Divider()
189.          Row({ space: 5 }) {
190.            Button("向右列表缩进").onClick(() =\> {
191.              let margin = Number(this.leftMargin)
192.              if (margin < 200) {
193.                margin += Indentation
194.                this.leftMargin = margin
195.              }
196.              this.controller.updateParagraphStyle({
197.                start: -10,
198.                end: -10,
199.                style: {
200.                  leadingMargin : {
201.                    pixelMap : this.leadingMarkCreatorInstance.genCircleMark(100, margin, 1),
202.                    size: \[margin, 40\]
203.                  }
204.                }
205.              })
206.            })

208.            Button("向左列表缩进").onClick(() =\> {
209.              let margin = Number(this.leftMargin)
210.              if (margin \> 0) {
211.                margin -= Indentation
212.                this.leftMargin = margin
213.              }
214.              this.controller.updateParagraphStyle({
215.                start: -10,
216.                end: -10,
217.                style: {
218.                  leadingMargin : {
219.                    pixelMap : this.leadingMarkCreatorInstance.genCircleMark(100, margin, 1),
220.                    size: \[margin, 40\]
221.                  }
222.                }
223.              })
224.            })
225.          }
226.          Divider()
227.          Row({ space: 5 }) {
228.            Button("向右空白缩进").onClick(() =\> {
229.              let margin = Number(this.leftMargin)
230.              if (margin < 200) {
231.                margin += Indentation
232.                this.leftMargin = margin
233.              }
234.              this.controller.updateParagraphStyle({
235.                start: -10,
236.                end: -10,
237.                style: {
238.                  leadingMargin: margin
239.                }
240.              })
241.            })

243.            Button("向左空白缩进").onClick(() =\> {
244.              let margin = Number(this.leftMargin)
245.              if (margin \> 0) {
246.                margin -= Indentation
247.                this.leftMargin = margin
248.              }
249.              this.controller.updateParagraphStyle({
250.                start: -10,
251.                end: -10,
252.                style: {
253.                  leadingMargin: margin
254.                }
255.              })
256.            })
257.          }
258.        }.borderWidth(1).borderColor(Color.Red)
259.      }
260.    }
261.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114440.99773428953272691037843187949300:50001231000000:2800:5FB93CE3DB4E9A323A07C4E11D7011EBFCA7021F15842D718FD907D7BDC08BD0.gif?needInitFileName=true?needInitFileName=true)

### 示例8

1.  @Entry
2.  @Component
3.  struct Index {
4.    controller: RichEditorController = new RichEditorController();
5.    options: RichEditorOptions = { controller: this.controller };
6.    private start: number = -1;
7.    private end: number = -1;
8.    @State message: string = "\[-1, -1\]"
9.    @State content: string = ""
10.    @State visable :number = 0;
11.    @State index:number = 0;
12.    @State offsetx: number = 0;
13.    @State textShadows : (ShadowOptions | Array<ShadowOptions\> ) =
14.      \[{ radius: 10, color: Color.Red, offsetX: 10, offsetY: 0 },{ radius: 10, color: Color.Black, offsetX: 20, offsetY: 0 },
15.        { radius: 10, color: Color.Brown, offsetX: 30, offsetY: 0 },{ radius: 10, color: Color.Green, offsetX: 40, offsetY: 0 },
16.        { radius: 10, color: Color.Yellow, offsetX: 100, offsetY: 0 }\]
17.    @State textshadowOf : ShadowOptions\[\] = \[\]
18.    build() {
19.      Column() {
20.        Column() {
21.          Text("selection range:").width("100%")
22.          Text() {
23.            Span(this.message)
24.          }.width("100%")
25.          Text("selection content:").width("100%")
26.          Text() {
27.            Span(this.content)
28.          }.width("100%")
29.        }
30.        .borderWidth(1)
31.        .borderColor(Color.Red)
32.        .width("100%")
33.        .height("20%")
34.        Row() {
35.          Button("更新样式: 加粗 & 文本阴影").onClick(() =\> {
36.            this.controller.updateSpanStyle({
37.              start: this.start,
38.              end: this.end,
39.              textStyle:
40.              {
41.                fontWeight: FontWeight.Bolder,
42.                textShadow: this.textShadows
43.              }
44.            })
45.          })
46.        }
47.        .borderWidth(1)
48.        .borderColor(Color.Red)
49.        .width("100%")
50.        .height("10%")
51.        Column() {
52.          RichEditor(this.options)
53.            .onReady(() =\> {
54.              this.controller.addTextSpan("0123456789",
55.                {
56.                  style:
57.                  {
58.                    fontColor: Color.Orange,
59.                    fontSize: 30,
60.                    textShadow: { radius: 10, color: Color.Blue, offsetX: 10, offsetY: 0 }
61.                  }
62.                })
63.            })
64.            .borderWidth(1)
65.            .borderColor(Color.Green)
66.            .width("100%")
67.            .height("30%")
68.        }
69.        .borderWidth(1)
70.        .borderColor(Color.Red)
71.        .width("100%")
72.        .height("70%")
73.      }
74.    }
75.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114440.56495597556816350368962359476137:50001231000000:2800:01811C38593EB877E6672D5A8ABBE6D68AB354BB937C0A4EB8A12527ED852432.gif?needInitFileName=true?needInitFileName=true)

### 示例9

1.  @Builder
2.  function placeholderBuilder2() {
3.    Row({ space: 2 }) {
4.      Image($r("app.media.icon")).width(24).height(24).margin({ left: -5 })
5.      Text('okokokok').fontSize(10)
6.    }.width('20%').height(50).padding(10).backgroundColor(Color.Red)
7.  }

10.  @Entry
11.  @Component
12.  struct Index {
13.    controller: RichEditorController = new RichEditorController();
14.    option: RichEditorOptions = { controller: this.controller };
15.    private start: number = 2;
16.    private end: number = 4;
17.    @State message: string = "\[-1, -1\]"
18.    @State content: string = ""
19.    private my\_offset: number | undefined = undefined
20.    private my\_builder: CustomBuilder = undefined

22.    @Builder
23.    placeholderBuilder() {
24.      Row({ space: 2 }) {
25.        Image($r("app.media.icon")).width(24).height(24).margin({ left: -5 })
26.        Text('Custom Popup').fontSize(10)
27.      }.width(100).height(50).padding(5)
28.    }

30.    @Builder
31.    placeholderBuilder3() {
32.      Text("hello").padding('20').borderWidth(1).width('100%')
33.    }

35.    @Builder
36.    placeholderBuilder4() {
37.      Column() {
38.        Column({ space: 5 }) {
39.          Text('direction:Row').fontSize(9).fontColor(0xCCCCCC).width('90%')
40.          Flex({ direction: FlexDirection.Row }) { 
41.            Text('1').width('20%').height(50).backgroundColor(0xF5DEB3)
42.            Text('1').width('20%').height(50).backgroundColor(0xD2B48C)
43.            Text('1').width('20%').height(50).backgroundColor(0xF5DEB3)
44.            Text('1').width('20%').height(50).backgroundColor(0xD2B48C)
45.          }
46.          .height(70)
47.          .width('90%')
48.          .padding(10)
49.          .backgroundColor(0xAFEEEE)

51.          Text('direction:RowReverse').fontSize(9).fontColor(0xCCCCCC).width('90%')
52.          Flex({ direction: FlexDirection.RowReverse }) { 
53.            Text('1').width('20%').height(50).backgroundColor(0xF5DEB3)
54.            Text('1').width('20%').height(50).backgroundColor(0xD2B48C)
55.            Text('1').width('20%').height(50).backgroundColor(0xF5DEB3)
56.            Text('1').width('20%').height(50).backgroundColor(0xD2B48C)
57.          }
58.          .height(70)
59.          .width('90%')
60.          .padding(10)
61.          .backgroundColor(0xAFEEEE)

63.          Text('direction:Column').fontSize(9).fontColor(0xCCCCCC).width('90%')
64.          Flex({ direction: FlexDirection.Column }) { 
65.            Text('1').width('20%').height(40).backgroundColor(0xF5DEB3)
66.            Text('1').width('20%').height(40).backgroundColor(0xD2B48C)
67.            Text('1').width('20%').height(40).backgroundColor(0xF5DEB3)
68.            Text('1').width('20%').height(40).backgroundColor(0xD2B48C)
69.          }
70.          .height(160)
71.          .width('90%')
72.          .padding(10)
73.          .backgroundColor(0xAFEEEE)

75.          Text('direction:ColumnReverse').fontSize(9).fontColor(0xCCCCCC).width('90%')
76.          Flex({ direction: FlexDirection.ColumnReverse }) { 
77.            Text('1').width('20%').height(40).backgroundColor(0xF5DEB3)
78.            Text('1').width('20%').height(40).backgroundColor(0xD2B48C)
79.            Text('1').width('20%').height(40).backgroundColor(0xF5DEB3)
80.            Text('1').width('20%').height(40).backgroundColor(0xD2B48C)
81.          }
82.          .height(160)
83.          .width('90%')
84.          .padding(10)
85.          .backgroundColor(0xAFEEEE)
86.        }.width('100%').margin({ top: 5 })
87.      }.width('100%')
88.    }

90.    @Builder
91.    MyMenu() {
92.      Menu() {
93.        MenuItem({ startIcon: $r("app.media.icon"), content: "菜单选项1" })
94.        MenuItem({ startIcon: $r("app.media.icon"), content: "菜单选项2" })
95.          .enabled(false)
96.      }
97.    }

99.    build() {
100.      Column() {
101.        Column() {
102.          Text("selection range:").width("100%")
103.          Text() {
104.            Span(this.message)
105.          }.width("100%")

107.          Text("selection content:").width("100%")
108.          Text() {
109.            Span(this.content)
110.          }.width("100%")
111.        }
112.        .borderWidth(1)
113.        .borderColor(Color.Red)
114.        .width("100%")
115.        .height("20%")

117.        Row() {
118.          Button("获取选择内容 getSpans").onClick(() =\> {
119.            console.info('getSpans='+JSON.stringify(this.controller.getSpans({ start:1, end:5 })))
120.            console.info('getParagraphs='+JSON.stringify(this.controller.getParagraphs({ start:1, end:5 })))
121.            this.content = ""
122.            this.controller.getSpans({
123.              start: this.start,
124.              end: this.end
125.            }).forEach(item =\> {
126.              if (typeof (item as RichEditorImageSpanResult)\['imageStyle'\] != 'undefined') {
127.                if ((item as RichEditorImageSpanResult).valueResourceStr == "") {
128.                  console.info("builder span index " + (item as RichEditorImageSpanResult).spanPosition.spanIndex + ", range : " + (item as RichEditorImageSpanResult).offsetInSpan\[0\] + ", " +
129.                    (item as RichEditorImageSpanResult).offsetInSpan\[1\] + ", size : " + (item as RichEditorImageSpanResult).imageStyle\[0\] + ", " + (item as RichEditorImageSpanResult).imageStyle\[1\])
130.                } else {
131.                  console.info("image span " + (item as RichEditorImageSpanResult).valueResourceStr + ", index : " + (item as RichEditorImageSpanResult).spanPosition.spanIndex + ", range: " +
132.                    (item as RichEditorImageSpanResult).offsetInSpan\[0\] + ", " + (item as RichEditorImageSpanResult).offsetInSpan\[1\] + ", size : " +
133.                    (item as RichEditorImageSpanResult).imageStyle.size\[0\] + ", " + (item as RichEditorImageSpanResult).imageStyle.size\[1\])
134.                }
135.              } else {
136.                this.content += (item as RichEditorTextSpanResult).value;
137.                this.content += "\\n"
138.                console.info("text span: " + (item as RichEditorTextSpanResult).value)
139.              }
140.            })
141.          })
142.          Button("获取选择内容 getSelection").onClick(() =\> {
143.            this.content = "";
144.            let select = this.controller.getSelection()
145.            console.info("selection start " + select.selection\[0\] + " end " + select.selection\[1\])
146.            select.spans.forEach(item =\> {
147.              if (typeof (item as RichEditorImageSpanResult)\['imageStyle'\] != 'undefined') {
148.                if ((item as RichEditorImageSpanResult).valueResourceStr == "") {
149.                  console.info("builder span index " + (item as RichEditorImageSpanResult).spanPosition.spanIndex + ", range : " + (item as RichEditorImageSpanResult).offsetInSpan\[0\] + ", " +
150.                    (item as RichEditorImageSpanResult).offsetInSpan\[1\] + ", size : " + (item as RichEditorImageSpanResult).imageStyle\[0\] + ", " + (item as RichEditorImageSpanResult).imageStyle\[1\])
151.                } else {
152.                  console.info("image span " + (item as RichEditorImageSpanResult).valueResourceStr + ", index : " + (item as RichEditorImageSpanResult).spanPosition.spanIndex + ", range: " +
153.                    (item as RichEditorImageSpanResult).offsetInSpan\[0\] + ", " + (item as RichEditorImageSpanResult).offsetInSpan\[1\] + ", size : " +
154.                    (item as RichEditorImageSpanResult).imageStyle.size\[0\] + ", " + (item as RichEditorImageSpanResult).imageStyle.size\[1\])
155.                }
156.              } else {
157.                this.content += (item as RichEditorTextSpanResult).value;
158.                this.content += "\\n"
159.                console.info("text span: " + (item as RichEditorTextSpanResult).value)
160.              }
161.            })
162.          })
163.          Button("删除选择内容").onClick(() =\> {
164.            this.controller.deleteSpans({
165.              start: this.start,
166.              end: this.end
167.            })
168.          })
169.        }
170.        .borderWidth(1)
171.        .borderColor(Color.Red)
172.        .width("100%")
173.        .height("10%")

175.        Column() {
176.          RichEditor(this.option)
177.            .onReady(() =\> {
178.              this.controller.addTextSpan("0123456789",
179.                {
180.                  style:
181.                  {
182.                    fontColor: Color.Orange,
183.                    fontSize: 30
184.                  }
185.                })
186.              this.controller.addImageSpan($r("app.media.icon"),
187.                {
188.                  imageStyle:
189.                  {
190.                    size: \["57px", "57px"\]
191.                  }
192.                })
193.            })
194.            .onSelect((value: RichEditorSelection) =\> {
195.              this.start = value.selection\[0\];
196.              this.end = value.selection\[1\];
197.              this.message = "\[" + this.start + ", " + this.end + "\]"
198.              console.info("onSelect="+JSON.stringify(value))
199.            })
200.            .aboutToIMEInput((value: RichEditorInsertValue) =\> {
201.              console.log("---------------------- aboutToIMEInput --------------------")
202.              console.info("aboutToIMEInput="+JSON.stringify(value))
203.              console.log("insertOffset:" + value.insertOffset)
204.              console.log("insertValue:" + value.insertValue)
205.              return true;
206.            })
207.            .onIMEInputComplete((value: RichEditorTextSpanResult) =\> {
208.              console.log("---------------------- onIMEInputComplete --------------------")
209.              console.info("onIMEInputComplete="+JSON.stringify(value))
210.              console.log("spanIndex:" + value.spanPosition.spanIndex)
211.              console.log("spanRange:\[" + value.spanPosition.spanRange\[0\] + "," + value.spanPosition.spanRange\[1\] + "\]")
212.              console.log("offsetInSpan:\[" + value.offsetInSpan\[0\] + "," + value.offsetInSpan\[1\] + "\]")
213.              console.log("value:" + value.value)
214.            })
215.            .aboutToDelete((value: RichEditorDeleteValue) =\> {
216.              value.richEditorDeleteSpans.forEach(item =\> {
217.                console.log("---------------------- item --------------------")
218.                console.info("spanIndex=" + item.spanPosition.spanIndex)
219.                console.log("spanRange:\[" + item.spanPosition.spanRange\[0\] + "," + item.spanPosition.spanRange\[1\] + "\]")
220.                console.log("offsetInSpan:\[" + item.offsetInSpan\[0\] + "," + item.offsetInSpan\[1\] + "\]")
221.                if (typeof (item as RichEditorImageSpanResult)\['imageStyle'\] != 'undefined') {
222.                  if ((item as RichEditorImageSpanResult).valueResourceStr == "") {
223.                    console.info("builder span index " + (item as RichEditorImageSpanResult).spanPosition.spanIndex + ", range : " + (item as RichEditorImageSpanResult).offsetInSpan\[0\] + ", " +
224.                    (item as RichEditorImageSpanResult).offsetInSpan\[1\] + ", size : " + (item as RichEditorImageSpanResult).imageStyle\[0\] + ", " + (item as RichEditorImageSpanResult).imageStyle\[1\])
225.                  } else {
226.                    console.info("image span " + (item as RichEditorImageSpanResult).valueResourceStr + ", index : " + (item as RichEditorImageSpanResult).spanPosition.spanIndex + ", range: " +
227.                    (item as RichEditorImageSpanResult).offsetInSpan\[0\] + ", " + (item as RichEditorImageSpanResult).offsetInSpan\[1\] + ", size : " +
228.                    (item as RichEditorImageSpanResult).imageStyle.size\[0\] + ", " + (item as RichEditorImageSpanResult).imageStyle.size\[1\])
229.                  }
230.                } else {
231.                  console.info("delete text: " + (item as RichEditorTextSpanResult).value)
232.                }
233.              })
234.              return true;
235.            })
236.            .borderWidth(1)
237.            .borderColor(Color.Green)
238.            .width("100%")
239.            .height("30%")

241.          Button("add span")
242.            .onClick(() =\> {
243.              let num = this.controller.addBuilderSpan(this.my\_builder, { offset: this.my\_offset })
244.              console.info('addBuilderSpan return ' + num)
245.            })
246.          Button("add image")
247.            .onClick(() =\> {
248.              let num = this.controller.addImageSpan($r("app.media.icon"), {
249.                imageStyle: {
250.                  size: \["50px", "50px"\],
251.                  verticalAlign: ImageSpanAlignment.BOTTOM,
252.                  layoutStyle: {
253.                    borderRadius: undefined,
254.                    margin: undefined
255.                  }
256.                }
257.              })
258.              console.info('addImageSpan return' + num)
259.            })
260.          Row() {
261.            Button('builder1').onClick(() =\> {
262.              this.my\_builder = () =\> {
263.                this.placeholderBuilder()
264.              }
265.            })
266.            Button('builder2').onClick(() =\> {
267.              this.my\_builder = placeholderBuilder2.bind(this)
268.            })
269.            Button('builder3').onClick(() =\> {
270.              this.my\_builder = () =\> {
271.                this.placeholderBuilder3()
272.              }
273.            })
274.            Button('builder4').onClick(() =\> {
275.              this.my\_builder = () =\> {
276.                this.placeholderBuilder4()
277.              }
278.            })
279.          }
280.        }
281.        .borderWidth(1)
282.        .borderColor(Color.Red)
283.        .width("100%")
284.        .height("70%")
285.      }
286.    }
287.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114440.16540093311341772856274519094810:50001231000000:2800:9802F09EDC7ED9749F50DA4E9423FEA3E2A29AE168DBB31F0C3FE6D19C5476EF.gif?needInitFileName=true?needInitFileName=true)

### 示例10

enableDataDetector和dataDetectorConfig使用示例

1.  @Entry
2.  @Component
3.  struct TextExample7 {
4.    controller: RichEditorController = new RichEditorController();
5.    options: RichEditorOptions = { controller: this.controller };
6.    @State phoneNumber: string = '(86) (755) \*\*\*\*\*\*\*\*';
7.    @State url: string = 'www.\*\*\*\*\*\*\*\*.com';
8.    @State email: string = '\*\*\*@example.com';
9.    @State address: string = 'XX省XX市XX区XXXX';
10.    @State enableDataDetector: boolean = true;
11.    @State enablePreviewText: boolean = false;
12.    @State types: TextDataDetectorType\[\] = \[\];

14.    build() {
15.      Row() {
16.        Column() {
17.          RichEditor(this.options)
18.            .onReady(() =\> {
19.              this.controller.addTextSpan('电话号码：' + this.phoneNumber + '\\n',
20.                {
21.                  style:
22.                  {
23.                    fontSize: 30
24.                  }
25.                })
26.              this.controller.addTextSpan('链接：' + this.url + '\\n',
27.                {
28.                  style:
29.                  {
30.                    fontSize: 30
31.                  }
32.                })
33.              this.controller.addTextSpan('邮箱：' + this.email + '\\n',
34.                {
35.                  style:
36.                  {
37.                    fontSize: 30
38.                  }
39.                })
40.              this.controller.addTextSpan('地址：' + this.address,
41.                {
42.                  style:
43.                  {
44.                    fontSize: 30
45.                  }
46.                })
47.            })
48.            .copyOptions(CopyOptions.InApp)
49.            .enableDataDetector(this.enableDataDetector)
50.            .dataDetectorConfig({types : this.types, onDetectResultUpdate: (result: string)=\>{}})
51.            .enablePreviewText(this.enablePreviewText)
52.            .borderWidth(1)
53.            .padding(10)
54.            .width('100%')
55.        }
56.        .width('100%')
57.      }
58.    }
59.  }

### 示例11

caretColor和selectedBackgroundColor使用示例

1.  @Entry
2.  @Component
3.  struct RichEditorDemo {
4.    @State color: Color|string = ""
5.    controller: RichEditorController = new RichEditorController();
6.    build() {
7.      Column() {
8.        Row(){
9.          Button("改为红色").onClick(() =\> {
10.            this.color = Color.Red
11.          })
12.        }.margin({top:50})
13.        RichEditor({ controller: this.controller })
14.          .onReady(()=\>{
15.            this.controller.addTextSpan('测试文字测试文字测试文字测试文字测试文字测试文字')
16.          })
17.          .width("100%")
18.          .border({ width: 1, radius: 5 })
19.          .key('RichEditor')
20.          .caretColor(this.color)  
21.          .selectedBackgroundColor(this.color)  
22.          .margin({top:50})
23.      }
24.      .width('100%')
25.    }
26.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114440.91718401438383133159175574553124:50001231000000:2800:8EA19B38C5D3063C70FA7067236EF3D9EC8BC720BF9141949F8B9154FEAD3F7E.gif?needInitFileName=true?needInitFileName=true)

### 示例12

lineHeight和letterSpacing使用示例

1.  @Entry
2.  @Component
3.  struct RichEditorDemo03 {
4.    controller: RichEditorController = new RichEditorController();
5.    options: RichEditorOptions = { controller: this.controller };
6.    @State start: number = -1;
7.    @State end: number = -1;
8.    @State LH:number = 50
9.    @State LS:number = 20

11.    build() {
12.      Column() {
13.        Scroll(){
14.          Column(){
15.            Row() {
16.              Button("行高++").onClick(()=\>{
17.                this.LH = this.LH + 5
18.                this.controller.updateSpanStyle({
19.                  start: this.start,
20.                  end: this.end,
21.                  textStyle:
22.                  {
23.                    lineHeight: this.LH
24.                  }
25.                })
26.              })
27.              Button("行高--").onClick(()=\>{
28.                this.LH = this.LH - 5
29.                this.controller.updateSpanStyle({
30.                  start: this.start,
31.                  end: this.end,
32.                  textStyle:
33.                  {
34.                    lineHeight: this.LH
35.                  }
36.                })
37.              })
38.              Button("字符间距++").onClick(()=\>{
39.                this.LS = this.LS + 5
40.                this.controller.updateSpanStyle({
41.                  start: this.start,
42.                  end: this.end,
43.                  textStyle:
44.                  {
45.                    letterSpacing: this.LS
46.                  }
47.                })
48.              })
49.              Button("字符间距--").onClick(()=\>{
50.                this.LS = this.LS - 5
51.                this.controller.updateSpanStyle({
52.                  start: this.start,
53.                  end: this.end,
54.                  textStyle:
55.                  {
56.                    letterSpacing: this.LS
57.                  }
58.                })
59.              })
60.            }
61.          }
62.        }.borderWidth(1)
63.        .borderColor(Color.Red)
64.        .width("100%")
65.        .height("20%")
66.        .margin({top: 20})

68.        Scroll(){
69.          Column() {
70.            Text("LineHeight:" + this.LH).width("100%")
71.            Text("LetterSpacing:" + this.LS).width("100%")
72.          }
73.        }
74.        .borderWidth(1)
75.        .borderColor(Color.Red)
76.        .width("100%")
77.        .height("20%")
78.        .margin({bottom: 20})

80.        Column() {
81.          RichEditor(this.options).clip(true).padding(10)
82.            .onReady(() =\> {
83.              this.controller.addTextSpan("012345",
84.                {
85.                  style:
86.                  {
87.                    fontColor: Color.Orange,
88.                    fontSize: 30,
89.                    lineHeight: this.LH,
90.                    letterSpacing: this.LS
91.                  }
92.                })
93.              this.controller.addTextSpan("6789",
94.                {
95.                  style:
96.                  {
97.                    fontColor: Color.Black,
98.                    fontSize: 30,
99.                    lineHeight: this.LH,
100.                    letterSpacing: this.LS
101.                  }
102.                })
103.            })
104.            .borderWidth(1)
105.            .borderColor(Color.Green)
106.            .width(400)
107.            .height(400)
108.        }
109.        .borderWidth(1)
110.        .borderColor(Color.Red)
111.        .width("100%")
112.        .height("60%")
113.      }
114.    }
115.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114440.66140228208952606044156979225435:50001231000000:2800:4F3391CC548E5A36EBB326FAAD5BE1904B87A7CAFEF687431DFE28E70D01E727.png?needInitFileName=true?needInitFileName=true)

### 示例13

preventDefault使用示例

1.  @Entry
2.  @Component
3.  struct RichEditorDemo {
4.    controller: RichEditorController = new RichEditorController();
5.    options: RichEditorOptions = { controller: this.controller };

7.    build() {
8.      Column({ space: 2 }) {
9.        RichEditor(this.options)
10.          .onReady(() =\> {
11.            this.controller.addTextSpan('RichEditor preventDefault')
12.          })
13.          .onPaste((event?: PasteEvent) =\> {
14.            if (event != undefined && event.preventDefault) {
15.              event.preventDefault();
16.            }
17.          })
18.          .borderWidth(1)
19.          .borderColor(Color.Green)
20.          .width('100%')
21.          .height('40%')
22.      }
23.    }
24.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114440.70776733831757147307535097370073:50001231000000:2800:3CF896D0F08F447225E9551C740961D66E1F1177958410B5BC50D854F137DE74.gif?needInitFileName=true?needInitFileName=true)

### 示例14

当添加“ss01”特性的FontFeature属性时，数字“0”由原来的椭圆形改变为带有倒圆角形。

1.  @Entry
2.  @Component
3.  struct RichEditorExample {
4.    controller: RichEditorController = new RichEditorController();
5.    options: RichEditorOptions = { controller: this.controller };
6.    @State enableDataDetector: boolean = true;
7.    @State types: TextDataDetectorType\[\] = \[\];
8.    build() {
9.      Row() {
10.        Column() {
11.          RichEditor(this.options)
12.            .onReady(() =\> {
13.              this.controller.addTextSpan('This is ss01 off :' + '0000' + '\\n',
14.                {
15.                  style:
16.                  {
17.                    fontSize: 30
18.                  }
19.                })
20.              this.controller.addTextSpan('This is ss01 on :' + '0000' + '\\n',
21.                {
22.                  style:
23.                  {
24.                    fontSize: 30,
25.                    fontFeature: "\\"ss01\\" 1"
26.                  }
27.                })
28.            })
29.            .copyOptions(CopyOptions.InApp)
30.            .enableDataDetector(this.enableDataDetector)
31.            .dataDetectorConfig({types : this.types, onDetectResultUpdate: (result: string)=\>{}})
32.            .borderWidth(1)
33.            .padding(10)
34.            .width('100%')
35.        }
36.        .width('100%')
37.        .margin({top:150})
38.      }
39.    }
40.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114440.67086354262807814819668937845306:50001231000000:2800:2D287C5F2E905A4EBA7DC4A0CF1A81E9F3F744CD968EAFA437F5688C6AD9C393.png?needInitFileName=true?needInitFileName=true)

### 示例15

自定义键盘弹出发生避让示例。

1.  @Entry
2.  @Component
3.  struct RichEditorExample {
4.    controller: RichEditorController = new RichEditorController()
5.    @State height1:string|number = '80%'
6.    @State height2:number = 100
7.    @State supportAvoidance:boolean = true;

10.    @Builder CustomKeyboardBuilder() {
11.      Column() {
12.        Row(){
13.          Button('增加特表情包').onClick(() =\> {
14.            this.controller.addTextSpan("\\uD83D\\uDE0A",
15.              {
16.                style:
17.                {
18.                  fontColor: Color.Orange,
19.                }
20.              })
21.          })
22.        }
23.        Grid() {
24.          ForEach(\[1, 2, 3, 4, 5, 6, 7, 8, 9, '\*', 0, '#'\], (item: number | string) =\> {
25.            GridItem() {
26.              Button(item + "")
27.                .width(110).onClick(() =\> {
28.                this.controller.addTextSpan(item + '', {
29.                  offset: this.controller.getCaretOffset(),
30.                  style:
31.                  {
32.                    fontColor: Color.Orange,
33.                    fontSize: 30
34.                  }
35.                })
36.                this.controller.setCaretOffset(this.controller.getCaretOffset() + item.toString().length)
37.              })
38.            }
39.          })
40.        }.maxCount(3).columnsGap(10).rowsGap(10).padding(5)
41.      }.backgroundColor(Color.Gray)
42.    }

44.    build() {
45.      Column() {
46.        Row(){
47.          Button("20%")
48.            .fontSize(24)
49.            .onClick(()=\>{
50.              this.height1 = "20%"
51.            })
52.          Button("80%")
53.            .fontSize(24)
54.            .margin({left:20})
55.            .onClick(()=\>{
56.              this.height1 = "80%"
57.            })
58.        }
59.        .justifyContent(FlexAlign.Center)
60.        .alignItems(VerticalAlign.Bottom)
61.        .height(this.height1)
62.        .width("100%")
63.        .padding({bottom:50})
64.        RichEditor({ controller: this.controller })

66.          .customKeyboard(this.CustomKeyboardBuilder(),{ supportAvoidance: this.supportAvoidance }).margin(10).border({ width: 1 })
67.          .borderWidth(1)
68.          .borderColor(Color.Red)
69.          .width("100%")
70.      }
71.    }
72.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114440.61447757637974855091906570509102:50001231000000:2800:EAD15CEC6DBDFF2A9578D21F511799318A65E655CEBDA30EF8C3AEB8C452422C.gif?needInitFileName=true?needInitFileName=true)

### 示例16

onEditingChange，isEditing使用示例。

1.  @Entry
2.  @Component
3.  struct RichEditor\_onEditingChange {
4.    controller: RichEditorController = new RichEditorController()
5.    @State controllerIsEditing: boolean = false
6.    @Builder

8.    build() {
9.      Column() {
10.        Row() {
11.          Button("点击查看编辑状态isEditing()：").onClick(() =\> {
12.            this.controllerIsEditing = this.controller.isEditing()
13.          })
14.            .padding(5)
15.          Text('' + this.controllerIsEditing)
16.            .width('100%')
17.            .padding(5)
18.            .fontColor(Color.Orange)
19.            .fontSize(20)
20.        }
21.        RichEditor({ controller: this.controller })
22.          .onEditingChange((isEditing: boolean) =\> {
23.            console.log("Current Editing Status:" + isEditing)
24.          })
25.          .height(400)
26.          .borderWidth(1)
27.          .borderColor(Color.Red)
28.          .width("100%")
29.      }
30.    }
31.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114440.48411730829319347352253984559079:50001231000000:2800:8C5B40B39B05CB54F59C429E1866C592E84A4FB4BA94869C6A2DCCF387F6F16E.gif?needInitFileName=true?needInitFileName=true)

### 示例17

onWillChange，onDidChange，onCut，onCopy使用示例。

1.  @Entry
2.  @Component
3.  struct RichEditorExample {
4.    controller: RichEditorController = new RichEditorController()
5.    build() {
6.      Column() {
7.        RichEditor({ controller: this.controller })
8.          .height(200)
9.          .borderWidth(1)
10.          .borderColor(Color.Red)
11.          .width("100%")
12.          .onReady(() =\> {
13.            this.controller.addTextSpan('测试文字TestWord', { style: { fontColor: Color.Orange, fontSize: 30 } })
14.            this.controller.updateSpanStyle({
15.              start: -1,
16.              end: -1,
17.              textStyle:
18.              {
19.                fontWeight: FontWeight.Bolder
20.              }
21.            })
22.          })
23.          .onWillChange((value: RichEditorChangeValue) =\> {
24.            console.log('测试log: onWillChange')
25.            console.log('rangeBefore: ' + JSON.stringify(value.rangeBefore))
26.            console.log('print replacedSpans')
27.            value.replacedSpans.forEach((item: RichEditorTextSpanResult) =\> {
28.              console.log('spanPosition:' + JSON.stringify(item.spanPosition))
29.              console.log('value:' + item.value)
30.              console.log('textStyle:' + JSON.stringify(item.textStyle))
31.              console.log('offsetInSpan:' + item.offsetInSpan)
32.              console.log('valueResource:' + item.valueResource)
33.              console.log('paragraphStyle:' + JSON.stringify(item.paragraphStyle))
34.            })
35.            console.log('print replacedImageSpans')
36.            value.replacedImageSpans.forEach((item: RichEditorImageSpanResult) =\> {
37.              console.log('spanPosition:' + JSON.stringify(item.spanPosition))
38.              console.log('valuePixelMap:' + JSON.stringify(item.valuePixelMap))
39.              console.log('valueResourceStr:' + item.valueResourceStr)
40.              console.log('imageStyle:' + JSON.stringify(item.imageStyle))
41.              console.log('offsetInSpan:' + item.offsetInSpan)
42.            })
43.            console.log('print replacedSymbolSpans')
44.            value.replacedSymbolSpans.forEach((item: RichEditorTextSpanResult) =\> {
45.              console.log('spanPosition:' + JSON.stringify(item.spanPosition))
46.              console.log('value:' + item.value)
47.              console.log('offsetInSpan:' + item.offsetInSpan)
48.              console.log('symbolSpanStyle:' + JSON.stringify(item.symbolSpanStyle))
49.              console.log('valueResource:' + item.valueResource)
50.              console.log('paragraphStyle:' + JSON.stringify(item.paragraphStyle))
51.            })
52.            return true
53.          })
54.          .onDidChange((rangeBefore: TextRange, rangeAfter: TextRange) =\> {
55.            console.log('测试log: onDidChange')
56.            console.log('rangeBefore:' + JSON.stringify(rangeBefore))
57.            console.log('rangeAfter:' + JSON.stringify(rangeAfter))
58.          })
59.          .onCut((event:CutEvent) =\> {
60.            event.preventDefault!()
61.            console.log('测试log：onCut')
62.          })
63.          .onCopy((event:CopyEvent) =\> {
64.            event.preventDefault!()
65.            console.log('测试log：onCopy')
66.          })
67.          .onPaste(()=\>{
68.            console.log('测试log：onPaste')
69.          })
70.        Text('测试文字去Hellow')
71.          .lineHeight(50)
72.          .fontSize(24)
73.          .draggable(true)
74.          .onDragStart(()=\>{})
75.        TextInput({text:'测试文字NiHao'})
76.          .draggable(true)
77.          .margin(20)
78.      }
79.    }
80.  }

### 示例18

enterKeyType，onSubmit，stopEditing使用示例。

1.  @Entry
2.  @Component
3.  struct SoftKeyboardEnterTypeExample {
4.    controller: RichEditorController = new RichEditorController()

6.      build() {
7.      Column() {
8.        Button("停止编辑").onClick(()=\>{
9.          this.controller.stopEditing()
10.        })
11.        RichEditor({ controller: this.controller })
12.          .margin(10)
13.          .border({ width: 1 })
14.          .height(200)
15.          .borderWidth(1)
16.          .borderColor(Color.Red)
17.          .width("100%")
18.          .enterKeyType(EnterKeyType.Search)
19.          .onSubmit((enterKey: EnterKeyType, event: SubmitEvent) =\> {
20.            console.log("trigger richeditor onsubmit" + enterKey);
21.            this.controller.addTextSpan(" type\["\+ enterKey +"\] triggerred")
22.            event.keepEditableState();
23.          })
24.      }.height("100%").justifyContent(FlexAlign.Center)
25.    }
26.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114440.60571907699312875710001640309511:50001231000000:2800:84327F10BE499B6F0F3D11EF7BBDCE27382E88B167DA578A1CB83D37E16C770D.gif?needInitFileName=true?needInitFileName=true)

### 示例19

lineBreakStrategy属性值设置、更新、查询使用示例。

1.  @Entry
2.  @Component
3.  struct LineBreakStrategyExample {
4.    controller: RichEditorController = new RichEditorController();
5.    private spanParagraphs: RichEditorParagraphResult\[\] = \[\];
6.    @State lineBreakOptionStr: string\[\] = \['GREEDY', 'HIGH\_QUALITY', 'BALANCED'\]
7.    @State attributeValue: string = ""
8.    @State testStr: string = "0123456789,0123456789,0123456789,0123456789,0123456789."
9.    build() {
10.      Column() {
11.        RichEditor({ controller: this.controller })
12.          .onReady(() =\> {
13.            this.controller.addTextSpan(this.testStr, {
14.              style: {
15.                fontColor: Color.Black,
16.                fontSize: "32",
17.              },
18.              paragraphStyle: {
19.                textAlign: TextAlign.Start,
20.                lineBreakStrategy: LineBreakStrategy.GREEDY
21.              }
22.            })
23.          })
24.          .width(400)
25.          .height(300)
26.          .margin({bottom:20})
27.          .draggable(false)
28.        Column(){
29.          Text('linebreak属性值为：' + this.attributeValue).fontSize(20).fontColor(Color.Black)
30.        }.margin({bottom: 10})
31.        Column({ space: 10 }) {
32.          Button("设置折行类型GREEDY").onClick(() =\> {
33.            this.controller.updateParagraphStyle({ start: -1, end: -1,
34.              style: {
35.                lineBreakStrategy: LineBreakStrategy.GREEDY,
36.              }
37.            })
38.          })
39.          Button("设置折行类型HIGH\_QUALITY").onClick(() =\> {
40.            this.controller.updateParagraphStyle({ start: -1, end: -1,
41.              style: {
42.                lineBreakStrategy: LineBreakStrategy.HIGH\_QUALITY,
43.              }
44.            })
45.          })
46.          Button("设置折行类型BALANCED").onClick(() =\> {
47.            this.controller.updateParagraphStyle({ start: -1, end: -1,
48.              style: {
49.                lineBreakStrategy: LineBreakStrategy.BALANCED,
50.              }
51.            })
52.          })
53.          Divider()
54.          Row(){
55.            Button("获取linebreak属性值").onClick(() =\> {
56.              this.spanParagraphs = this.controller.getParagraphs({ start: -1, end: -1 })
57.              console.log("RichEditor getParagraphs:" + JSON.stringify(this.spanParagraphs))
58.              this.spanParagraphs.forEach(item =\> {
59.                if(typeof(item as RichEditorParagraphResult)\['style'\] != 'undefined'){
60.                  this.attributeValue = ""
61.                  console.info('lineBreakStrategy:'\+ JSON.stringify((item as RichEditorParagraphResult)\['style'\]))
62.                  this.attributeValue += this.lineBreakOptionStr\[Number((item as RichEditorParagraphResult)\['style'\].lineBreakStrategy)\];
63.                }
64.              })
65.            })
66.          }
67.        }
68.      }
69.    }
70.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114440.94479989939869816823383127926595:50001231000000:2800:7ACAEBD0CFB8570092CA66135CBA211D124BB9FF4916A271EFAF18761449D129.gif?needInitFileName=true?needInitFileName=true)

### 示例20

属性字符串使用示例

1.  import { LengthMetrics } from '@kit.ArkUI'
2.  import { image } from '@kit.ImageKit'

4.  @Entry
5.  @Component
6.  struct Index {
7.    stringLength: number = 0;
8.    imagePixelMap: image.PixelMap | undefined = undefined;
9.    @State selection: string = "";
10.    @State content: string = "";
11.    @State range: string = "";
12.    @State replaceString: string = "";
13.    @State rangeBefore: string = "";
14.    @State rangeAfter: string = "";
15.    richEditorStyledString: MutableStyledString = new MutableStyledString("");
16.    textStyle: TextStyle = new TextStyle({
17.      fontWeight: FontWeight.Lighter,
18.      fontFamily: 'HarmonyOS Sans',
19.      fontColor: Color.Green,
20.      fontSize: LengthMetrics.vp(30),
21.      fontStyle: FontStyle.Normal
22.    })
23.    fontStyle1: TextStyle = new TextStyle({ fontColor: Color.Blue });
24.    fontStyle2: TextStyle = new TextStyle({
25.      fontWeight: FontWeight.Bolder,
26.      fontFamily: 'Arial',
27.      fontColor: Color.Orange,
28.      fontSize: LengthMetrics.vp(30),
29.      fontStyle: FontStyle.Italic
30.    })

32.    mutableStyledString: MutableStyledString = new MutableStyledString("初始属性字符串",
33.      \[{ start: 0, length: 5, styledKey: StyledStringKey.FONT, styledValue: this.fontStyle1 }\]);
34.    styledString: StyledString = new StyledString("插入属性字符串",
35.      \[{ start: 2, length: 4, styledKey: StyledStringKey.FONT, styledValue: this.fontStyle2 }\]);
36.    controller: RichEditorStyledStringController = new RichEditorStyledStringController();
37.    options: RichEditorStyledStringOptions = {controller: this.controller};

39.    contentChangedListener: StyledStringChangedListener = {
40.      onWillChange: (value: StyledStringChangeValue) =\> {
41.        this.range = '\[ ' + value.range.start + ' , ' + value.range.end + ' \]';
42.        this.replaceString = value.replacementString.getString();
43.        return true;
44.      },
45.      onDidChange: (rangeBefore, rangeAfter) =\> {
46.        this.rangeBefore = '\[ ' + rangeBefore.start + ' , ' + rangeBefore.end + ' \]';
47.        this.rangeAfter = '\[ ' + rangeAfter.start + ' , ' + rangeAfter.end + ' \]';
48.      }
49.    }

51.    async aboutToAppear() {
52.      console.info("aboutToAppear initial imagePixelMap");
53.      this.imagePixelMap = await this.getPixmapFromMedia($r('app.media.icon'));
54.    }

56.    private async getPixmapFromMedia(resource: Resource) {
57.      let unit8Array = await getContext(this)?.resourceManager?.getMediaContent({
58.        bundleName: resource.bundleName,
59.        moduleName: resource.moduleName,
60.        id: resource.id
61.      })
62.      let imageSource = image.createImageSource(unit8Array.buffer.slice(0, unit8Array.buffer.byteLength))
63.      let createPixelMap: image.PixelMap = await imageSource.createPixelMap({
64.        desiredPixelFormat: image.PixelMapFormat.RGBA\_8888
65.      })
66.      await imageSource.release()
67.      return createPixelMap
68.    }

71.    build() {
72.      Column() {
73.        Column() {
74.          Text("选中区信息")
75.            .fontSize(20)
76.            .width("100%")
77.          Text("selection range: " + this.selection).width("100%")
78.          Text("selection content: " + this.content).width("100%")
79.        }
80.        .borderWidth(1)
81.        .borderColor(Color.Black)
82.        .width("100%")
83.        .height("10%")

85.        Column() {
86.          Text("onWillChange回调信息")
87.            .fontSize(20)
88.            .width("100%")
89.          Text("range: " + this.range).width("100%")
90.          Text("replacementString: " + this.replaceString).width("100%")
91.          Text("onWillChange回调信息")
92.            .fontSize(20)
93.            .width("100%")
94.          Text("rangeBefore: " + this.rangeBefore).width("100%")
95.          Text("rangeAfter: " + this.rangeAfter).width("100%")
96.        }
97.        .borderWidth(1)
98.        .borderColor(Color.Black)
99.        .width("100%")
100.        .height("20%")

102.        RichEditor(this.options)
103.          .onReady(() =\> {

105.            this.controller.onContentChanged(this.contentChangedListener);

107.            this.controller.setStyledString(this.mutableStyledString);
108.          })
109.          .height("20%")
110.          .width("100%")
111.          .borderWidth(1)
112.          .borderColor(Color.Black)

114.        Column() {
115.          Row() {
116.            Button("插入图片").onClick(() =\> {
117.              if (this.imagePixelMap !== undefined) {
118.                let imageStyledString = new MutableStyledString(new ImageAttachment({
119.                  value: this.imagePixelMap,
120.                  size: { width: 50, height: 50 },
121.                  layoutStyle: { borderRadius: LengthMetrics.vp(10) },
122.                  verticalAlign: ImageSpanAlignment.BASELINE,
123.                  objectFit: ImageFit.Contain
124.                }))

126.                this.richEditorStyledString = this.controller.getStyledString();
127.                this.richEditorStyledString.appendStyledString(imageStyledString);

129.                this.controller.setStyledString(this.richEditorStyledString);
130.                this.controller.setCaretOffset(this.richEditorStyledString.length);
131.              }
132.            })
133.            Button("插入文本").onClick(() =\> {

135.                this.richEditorStyledString = this.controller.getStyledString();
136.                this.richEditorStyledString.appendStyledString(this.styledString);

138.                this.controller.setStyledString(this.richEditorStyledString);
139.                this.controller.setCaretOffset(this.richEditorStyledString.length);
140.            })
141.          }
142.          Row() {
143.            Button("获取选中内容").onClick(() =\> {

145.              let richEditorSelection = this.controller.getSelection();
146.              let start = richEditorSelection.start ? richEditorSelection.start : 0;
147.              let end = richEditorSelection.end ? richEditorSelection.end : 0;

149.              this.richEditorStyledString = this.controller.getStyledString();
150.              this.selection = '\[ ' + start + ' , ' + end + ' \]';
151.              if (start == end) {
152.                this.content = "";
153.              } else {
154.                this.content = this.richEditorStyledString.subStyledString(start, end - start).getString();
155.              }
156.            })
157.            Button("更新选中样式").onClick(() =\> {

159.              let richEditorSelection = this.controller.getSelection();
160.              let start = richEditorSelection.start ? richEditorSelection.start : 0;
161.              let end = richEditorSelection.end ? richEditorSelection.end : 0;

163.              this.richEditorStyledString = this.controller.getStyledString();
164.              this.richEditorStyledString.setStyle({
165.                start: start,
166.                length: end - start,
167.                styledKey: StyledStringKey.FONT,
168.                styledValue: this.textStyle
169.              })

171.              this.controller.setStyledString(this.richEditorStyledString);
172.            })
173.            Button("删除选中内容").onClick(() =\> {

175.              let richEditorSelection = this.controller.getSelection();
176.              let start = richEditorSelection.start ? richEditorSelection.start : 0;
177.              let end = richEditorSelection.end ? richEditorSelection.end : 0;

179.              this.richEditorStyledString = this.controller.getStyledString();
180.              this.richEditorStyledString.removeString(start, end - start);

182.              this.controller.setStyledString(this.richEditorStyledString);
183.            })
184.          }
185.        }
186.        .width("100%")
187.      }
188.    }
189.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114441.96603802548102738078179132234303:50001231000000:2800:4C6A402C9226CE0A9D9337F01BD50DC498E445F2207C9B948E956789DF74A2B3.gif?needInitFileName=true?needInitFileName=true)

### 示例21

LayoutManager使用示例

1.  @Entry
2.  @Component
3.  export struct Index {
4.    @State lineCount: string = ""
5.    @State glyphPositionAtCoordinate: string = ""
6.    @State lineMetrics: string = ""
7.    controller: RichEditorController = new RichEditorController();
8.    @State textStr: string =
9.      'Hello World! 你好，世界！'

11.    build() {
12.      Scroll() {
13.        Column() {
14.          Text('RichEditor组件getLayoutManager接口获取相对于组件的布局信息')
15.            .fontSize(9)
16.            .fontColor(0xCCCCCC)
17.            .width('90%')
18.            .padding(10)
19.          RichEditor({ controller: this.controller })
20.            .borderColor(Color.Red)
21.            .borderWidth(1)
22.            .onReady(() =\> {
23.              this.controller.addTextSpan(this.textStr)
24.            })
25.            .onAreaChange(() =\> {
26.              let layoutManager = this.controller.getLayoutManager();
27.              this.lineCount = "LineCount: " + layoutManager.getLineCount()
28.            })

30.          Text('LineCount').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)
31.          Text(this.lineCount)

33.          Text('GlyphPositionAtCoordinate').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)
34.          Button("相对组件坐标\[150,50\]字形信息")
35.            .onClick(() =\> {
36.              let layoutManager: LayoutManager = this.controller.getLayoutManager()
37.              let position = layoutManager.getGlyphPositionAtCoordinate(150, 50)
38.              this.glyphPositionAtCoordinate =
39.              "相对组件坐标\[150,50\] glyphPositionAtCoordinate position: " + position.position + " affinity: " +
40.              position.affinity
41.            })
42.            .margin({ bottom: 20, top: 10 })
43.          Text(this.glyphPositionAtCoordinate)

45.          Text('LineMetrics').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)
46.          Button("首行行信息、文本样式信息、以及字体属性信息")
47.            .onClick(() =\> {
48.              let layoutManager: LayoutManager = this.controller.getLayoutManager()
49.              let lineMetrics = layoutManager.getLineMetrics(0)
50.              this.lineMetrics = "lineMetrics is " + JSON.stringify(lineMetrics) + '\\n\\n'
51.              let runMetrics = lineMetrics.runMetrics
52.              runMetrics.forEach((value, key) =\> {
53.                this.lineMetrics += "runMetrics key is " + key + " " + JSON.stringify(value) + "\\n\\n"
54.              });
55.            })
56.            .margin({ bottom: 20, top: 10 })
57.          Text(this.lineMetrics)
58.        }
59.        .margin({ top: 100, left: 8, right: 8 })
60.      }
61.    }
62.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114441.40753257958939524112980617248721:50001231000000:2800:D486CA1B281F1F23B41ADDF3911577147A064BEBA985115EB22AB33795C63AD5.gif?needInitFileName=true?needInitFileName=true)

### 示例22

editMenuOptions 使用示例，展示设置自定义菜单扩展项的文本内容、图标、回调方法。

2.  @Entry
3.  @Component
4.  struct RichEditorExample {
5.    controller: RichEditorController = new RichEditorController();
6.    options: RichEditorOptions = { controller: this.controller }

8.    onCreateMenu(menuItems: Array<TextMenuItem\>) {
9.      console.log('menuItems size=' + menuItems.length);
10.      menuItems.forEach((value, index) =\> {
11.        console.log('menuItem' + index + ', id=' + JSON.stringify(value));
12.      })
13.      let extensionMenuItems: Array<TextMenuItem\> = \[
14.        {
15.          content: 'RichEditor扩展1', icon: $r('app.media.startIcon'), id: TextMenuItemId.of('extension1')
16.        },
17.        {
18.          content: 'RichEditor扩展2', icon: $r('app.media.startIcon'), id: TextMenuItemId.of('extension2')
19.        },
20.        {
21.          content: 'RichEditor扩展3', icon: $r('app.media.startIcon'), id: TextMenuItemId.of('extension3')
22.        },
23.        {
24.          content: 'RichEditor扩展4', icon: $r('app.media.startIcon'), id: TextMenuItemId.of('extension4')
25.        }
26.      \]
27.      return menuItems.concat(extensionMenuItems)
28.    }
29.    onMenuItemClicked(menuItem: TextMenuItem, textRange: TextRange) {
30.      if (menuItem.id.equals(TextMenuItemId.of('extension1'))) {
31.        console.log('click' + menuItem.content + ', textRange=' + JSON.stringify(textRange))
32.        return true;
33.      }
34.      return false;
35.    }

37.    build() {
38.      Row() {
39.        RichEditor(this.options)
40.          .onReady(() =\> {
41.            this.controller.addTextSpan("RichEditor扩展")
42.          })
43.          .editMenuOptions({
44.            onCreateMenu: (menuItems: Array<TextMenuItem\>) =\> {
45.              return this.onCreateMenu(menuItems)
46.            },
47.            onMenuItemClick: (menuItem: TextMenuItem, textRange: TextRange) =\> {
48.              return this.onMenuItemClicked(menuItem, textRange)
49.            }
50.          })
51.          .height(200)
52.          .borderWidth(1)
53.          .borderColor(Color.Red)
54.      }
55.    }
56.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114441.48603477338938377039861126665660:50001231000000:2800:73222EC405F5DEE7EC9E5A65812B047856F1F419D4C96B886D45E94D9EA6C89E.png?needInitFileName=true?needInitFileName=true)
