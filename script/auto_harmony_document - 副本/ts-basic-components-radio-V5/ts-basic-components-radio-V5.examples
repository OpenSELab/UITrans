/*\n实现一个包含两个单选按钮（Radio）的界面，每个单选按钮旁边有一个文本标签。整个界面使用Flex布局进行居中对齐，并且Row和Column组件分别占满整个屏幕的宽度和高度。\n*/\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      Column() {\n        // 创建一个Flex布局，水平和垂直居中对齐其子组件\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建一个单选按钮，设置其值为'value1'，并将其分组为'radioGroup'\n          Radio({ value: 'value1', group: 'radioGroup' })\n            .width(30) // 设置单选按钮的宽度为30\n            .height(30) // 设置单选按钮的高度为30\n          // 创建文本标签，设置字体大小为20\n          Text('Radio1').fontSize(20)\n        }\n\n        // 创建另一个Flex布局，水平和垂直居中对齐其子组件\n        Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          // 创建一个单选按钮，设置其值为'value2'，并将其分组为'radioGroup'\n          Radio({ value: 'value2', group: 'radioGroup' })\n            .width(30) // 设置单选按钮的宽度为30\n            .height(30) // 设置单选按钮的高度为30\n          // 创建文本标签，设置字体大小为20\n          Text('Radio2').fontSize(20)\n        }\n      }\n      .width('100%') // 设置Column的宽度为100%，占满父容器的宽度\n    }\n    .height('100%') // 设置Row的高度为100%，占满父容器的高度\n  }\n}


/*\n实现一个包含两个Radio组件的界面，用户可以通过点击选择不同的选项。每个Radio组件具有不同的初始选中状态和自定义样式。\n*/\n\n@Entry\n@Component\nstruct refreshExample {\n  build() {\n    Column({ space: 50 }) { // 创建一个垂直布局，组件间距为50\n      Row() { // 创建一个水平布局\n        // 创建一个Radio组件，设置其初始选中状态和自定义样式\n        // 功能与效果描述：Radio组件用于用户选择某个选项。设置初始选中状态和自定义样式以确保其显示效果。\n        Radio({ value: 'Radio1', group: 'radioGroup' }) // 创建一个Radio组件，值为'Radio1'，属于'radioGroup'组\n          .contentModifier(new MyRadioStyle(1, Color.Red)) // 设置Radio组件的自定义样式，样式由MyRadioStyle类定义，参数为1和红色\n          .checked(false) // 设置Radio组件的初始选中状态为未选中\n          .width(300) // 设置Radio组件的宽度为300\n          .height(100) // 设置Radio组件的高度为100\n      }\n      Row() { // 创建一个水平布局\n        // 创建一个Radio组件，设置其初始选中状态和自定义样式\n        // 功能与效果描述：Radio组件用于用户选择某个选项。设置初始选中状态和自定义样式以确保其显示效果。\n        Radio({ value: 'Radio2', group: 'radioGroup' }) // 创建一个Radio组件，值为'Radio2'，属于'radioGroup'组\n          .checked(true) // 设置Radio组件的初始选中状态为选中\n          .width(300) // 设置Radio组件的宽度为300\n          .height(60) // 设置Radio组件的高度为60\n          .contentModifier(new MyRadioStyle(2, Color.Red)) // 设置Radio组件的自定义样式，样式由MyRadioStyle类定义，参数为2和红色\n      }\n    }\n  }\n}


/*\n实现一个包含三个Radio组件的示例，每个Radio组件代表一个选项。用户可以选择其中一个选项，并且每个选项的选中状态变化会被监听并输出到控制台。布局采用Flex布局，水平和垂直居中对齐其子组件。\n*/\n\n@Entry\n@Component\nstruct RadioExample {\n  build() {\n    // 创建一个Flex布局，水平和垂直居中对齐其子组件\n    Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n      Column() {\n        Text('Radio1')\n        // 创建一个Radio组件，设置其初始选中状态和样式\n        // 功能与效果描述：Radio组件用于用户选择某个选项。设置初始选中状态和样式以确保其显示效果。\n        Radio({ value: 'Radio1', group: 'radioGroup' }).checked(true)\n          .radioStyle({\n            checkedBackgroundColor: Color.Pink\n          })\n          .height(50)\n          .width(50)\n          .onChange((isChecked: boolean) => {\n            // 监听Radio组件的选中状态变化，并输出到控制台\n            // 功能与效果描述：监听Radio组件的选中状态变化，以便在用户选择时进行相应的处理。\n            console.log('Radio1 status is ' + isChecked)\n          })\n      }\n      Column() {\n        Text('Radio2')\n        // 创建一个Radio组件，设置其初始选中状态和样式\n        // 功能与效果描述：Radio组件用于用户选择某个选项。设置初始选中状态和样式以确保其显示效果。\n        Radio({ value: 'Radio2', group: 'radioGroup' }).checked(false)\n          .radioStyle({\n            checkedBackgroundColor: Color.Pink\n          })\n          .height(50)\n          .width(50)\n          .onChange((isChecked: boolean) => {\n            // 监听Radio组件的选中状态变化，并输出到控制台\n            // 功能与效果描述：监听Radio组件的选中状态变化，以便在用户选择时进行相应的处理。\n            console.log('Radio2 status is ' + isChecked)\n          })\n      }\n      Column() {\n        Text('Radio3')\n        // 创建一个Radio组件，设置其初始选中状态和样式\n        // 功能与效果描述：Radio组件用于用户选择某个选项。设置初始选中状态和样式以确保其显示效果。\n        Radio({ value: 'Radio3', group: 'radioGroup' }).checked(false)\n          .radioStyle({\n            checkedBackgroundColor: Color.Pink\n          })\n          .height(50)\n          .width(50)\n          .onChange((isChecked: boolean) => {\n            // 监听Radio组件的选中状态变化，并输出到控制台\n            // 功能与效果描述：监听Radio组件的选中状态变化，以便在用户选择时进行相应的处理。\n            console.log('Radio3 status is ' + isChecked)\n          })\n      }\n    }.padding({ top: 30 })\n  }\n}


/*\n实现一个包含三个Radio组件的示例，每个Radio组件分别使用不同的指示器类型（TICK、DOT、CUSTOM），并监听其选中状态变化。\n布局：使用Flex布局，方向为行（Row），内容居中对齐。\n样式：每个Radio组件的高度为50，宽度为80，并设置初始选中状态。\n功能与效果描述：用户可以通过点击Radio组件来选择不同的选项，选中状态变化时会在控制台输出相应的信息。\n*/\n\n@Entry\n@Component\nstruct RadioExample {\n  @Builder \n  indicatorBuilder() {\n    // 创建一个自定义的指示器，使用一个星形图标\n    // 功能与效果描述：自定义指示器用于在Radio组件选中时显示一个星形图标。\n    Image($r("app.media.star"))\n  }\n\n  build() {\n    Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n      Column() {\n        Text('Radio1')\n        // 创建一个Radio组件，设置其初始选中状态和指示器类型\n        // 功能与效果描述：Radio组件用于用户选择某个选项。设置初始选中状态和指示器类型以确保其显示效果。\n        Radio({ value: 'Radio1', group: 'radioGroup',\n          indicatorType:RadioIndicatorType.TICK\n        }).checked(true)\n          .height(50)\n          .width(80)\n          .onChange((isChecked: boolean) => {\n            // 监听Radio组件的选中状态变化，并输出到控制台\n            // 功能与效果描述：监听Radio组件的选中状态变化，以便在用户选择时进行相应的处理。\n            console.log('Radio1 status is ' + isChecked)\n          })\n      }\n\n      Column() {\n        Text('Radio2')\n        // 创建一个Radio组件，设置其初始选中状态和指示器类型\n        // 功能与效果描述：Radio组件用于用户选择某个选项。设置初始选中状态和指示器类型以确保其显示效果。\n        Radio({ value: 'Radio2', group: 'radioGroup',\n          indicatorType:RadioIndicatorType.DOT\n        }).checked(false)\n          .height(50)\n          .width(80)\n          .onChange((isChecked: boolean) => {\n            // 监听Radio组件的选中状态变化，并输出到控制台\n            // 功能与效果描述：监听Radio组件的选中状态变化，以便在用户选择时进行相应的处理。\n            console.log('Radio2 status is ' + isChecked)\n          })\n      }\n\n      Column() {\n        Text('Radio3')\n        // 创建一个Radio组件，设置其初始选中状态和自定义指示器\n        // 功能与效果描述：Radio组件用于用户选择某个选项。设置初始选中状态和自定义指示器以确保其显示效果。\n        Radio({ value: 'Radio3', group: 'radioGroup',\n          indicatorType:RadioIndicatorType.CUSTOM,\n          indicatorBuilder:()=>{this.indicatorBuilder()}\n        }).checked(false)\n          .height(50)\n          .width(80)\n          .onChange((isChecked: boolean) => {\n            // 监听Radio组件的选中状态变化，并输出到控制台\n            // 功能与效果描述：监听Radio组件的选中状态变化，以便在用户选择时进行相应的处理。\n            console.log('Radio3 status is ' + isChecked)\n          })\n      }\n    }.padding({ top: 30 })\n  }\n}