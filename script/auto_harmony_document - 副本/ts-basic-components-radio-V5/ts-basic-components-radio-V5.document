Title: Radio-按钮与选择-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-radio-V5

Markdown Content:
单选框，提供相应的用户交互选择项。

说明

API version 12开始，Radio选中默认样式由RadioIndicatorType.DOT变为RadioIndicatorType.TICK。

该组件从API Version 8开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

接口
--

Radio(options: RadioOptions)

创建单选框组件。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

RadioOptions对象说明
----------------

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

value

string

是

当前单选框的值。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

group

string

是

当前单选框的所属群组名称，相同group的Radio只能有一个被选中。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

indicatorType12+

[RadioIndicatorType](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-radio-V5#radioindicatortype12%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)

否

配置单选框的选中样式。未设置时按照RadioIndicatorType.TICK进行显示。

**卡片能力：** 从API version 12开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

indicatorBuilder12+

[CustomBuilder](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#custombuilder8)

否

配置单选框的选中样式为自定义组件。自定义组件与Radio组件为中心点对齐显示。indicatorBuilder设置为undefined时，按照RadioIndicatorType.TICK进行显示。

**卡片能力：** 从API version 12开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

RadioIndicatorType12+枚举说明
-------------------------

**卡片能力：** 从API version 12开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

描述

TICK

选中样式为系统默认TICK图标。

DOT

选中样式为系统默认DOT图标。

CUSTOM

选中样式为indicatorBuilder中的内容。

### checked

checked(value: boolean)

设置单选框的选中状态。

从API version 10开始，该属性支持[$$](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-two-way-sync-V5)双向绑定变量。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

value

boolean

是

单选框的选中状态。

默认值：false

### radioStyle10+

radioStyle(value?: RadioStyle)

设置单选框选中状态和非选中状态的样式。

从API version 10开始，该接口支持在ArkTS组件中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

contentModifier12+
------------------

contentModifier(modifier: ContentModifier<RadioConfiguration\>)

定制Radio内容区的方法。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### onChange

onChange(callback: (isChecked: boolean) =\> void)

单选框选中状态改变时触发回调。

**卡片能力：** 从API version 9开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

参数名

类型

必填

说明

isChecked

boolean

是

单选框的状态。

为true时，表示从未选中变为选中。为false时，表示从选中变为未选中。

RadioStyle10+对象说明
-----------------

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

必填

说明

checkedBackgroundColor

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

否

开启状态底板颜色。

默认值：#007DFF

uncheckedBorderColor

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

否

关闭状态描边颜色。

默认值：#182431

indicatorColor

[ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor)

否

开启状态内部圆饼颜色。从API version 12开始，indicatorType设置为RadioIndicatorType.TICK和RadioIndicatorType.DOT时，支持修改内部颜色。indicatorType设置为RadioIndicatorType.CUSTOM时，不支持修改内部颜色。

默认值：#FFFFFF

RadioConfiguration12+对象说明
-------------------------

开发者需要自定义class实现ContentModifier接口。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

名称

类型

只读

可选

说明

value

string

否

否

当前单选框的值。

checked

boolean

否

否

设置单选框的选中状态。

默认值：false

triggerChange

Callback<boolean\>

否

否

触发单选框选中状态变化。

示例
--

### 示例1

设置开启状态底板颜色。

2.  @Entry
3.  @Component
4.  struct RadioExample {
5.    build() {
6.      Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {
7.        Column() {
8.          Text('Radio1')
9.          Radio({ value: 'Radio1', group: 'radioGroup' }).checked(true)
10.            .radioStyle({
11.              checkedBackgroundColor: Color.Pink
12.            })
13.            .height(50)
14.            .width(50)
15.            .onChange((isChecked: boolean) =\> {
16.              console.log('Radio1 status is ' + isChecked)
17.            })
18.        }
19.        Column() {
20.          Text('Radio2')
21.          Radio({ value: 'Radio2', group: 'radioGroup' }).checked(false)
22.            .radioStyle({
23.              checkedBackgroundColor: Color.Pink
24.            })
25.            .height(50)
26.            .width(50)
27.            .onChange((isChecked: boolean) =\> {
28.              console.log('Radio2 status is ' + isChecked)
29.            })
30.        }
31.        Column() {
32.          Text('Radio3')
33.          Radio({ value: 'Radio3', group: 'radioGroup' }).checked(false)
34.            .radioStyle({
35.              checkedBackgroundColor: Color.Pink
36.            })
37.            .height(50)
38.            .width(50)
39.            .onChange((isChecked: boolean) =\> {
40.              console.log('Radio3 status is ' + isChecked)
41.            })
42.        }
43.      }.padding({ top: 30 })
44.    }
45.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114427.14783060724436259388071678564510:50001231000000:2800:AB677C0F10ADB5D622E8E77806B47BCB191DCC861308E01290E9BE030A487EAE.gif?needInitFileName=true?needInitFileName=true)

### 示例2

设置选中样式为图片。

2.  @Entry
3.  @Component
4.  struct RadioExample {
5.    @Builder 
6.    indicatorBuilder() {
7.      Image($r("app.media.star"))
8.    }
9.    build() {
10.      Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {
11.        Column() {
12.          Text('Radio1')
13.          Radio({ value: 'Radio1', group: 'radioGroup',
14.            indicatorType:RadioIndicatorType.TICK
15.          }).checked(true)
16.            .height(50)
17.            .width(80)
18.            .onChange((isChecked: boolean) =\> {
19.              console.log('Radio1 status is ' + isChecked)
20.            })
21.        }
22.        Column() {
23.          Text('Radio2')
24.          Radio({ value: 'Radio2', group: 'radioGroup',
25.            indicatorType:RadioIndicatorType.DOT
26.          }).checked(false)
27.            .height(50)
28.            .width(80)
29.            .onChange((isChecked: boolean) =\> {
30.              console.log('Radio2 status is ' + isChecked)
31.            })
32.        }
33.        Column() {
34.          Text('Radio3')
35.          Radio({ value: 'Radio3', group: 'radioGroup',
36.            indicatorType:RadioIndicatorType.CUSTOM,
37.            indicatorBuilder:()=\>{this.indicatorBuilder()}
38.          }).checked(false)
39.            .height(50)
40.            .width(80)
41.            .onChange((isChecked: boolean) =\> {
42.              console.log('Radio3 status is ' + isChecked)
43.            })
44.        }
45.      }.padding({ top: 30 })
46.    }
47.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114427.11038956284072636341018139288818:50001231000000:2800:FC6122593F656C4246B1FBC7DD048BC0EF3C668D57DF42433B6EE5DEAAF63AC5.gif?needInitFileName=true?needInitFileName=true)

### 示例3

设置自定义单选样式。

1.  class MyRadioStyle implements ContentModifier<RadioConfiguration\> {
2.    type: number = 0
3.    selectedColor: ResourceColor = Color.Black

5.    constructor(numberType: number, colorType: ResourceColor) {
6.      this.type = numberType
7.      this.selectedColor = colorType
8.    }

10.    applyContent(): WrappedBuilder<\[RadioConfiguration\]\> {
11.      return wrapBuilder(buildRadio)
12.    }
13.  }

15.  @Builder
16.  function buildRadio(config: RadioConfiguration) {
17.    Row({ space: 30 }) {
18.      Circle({ width: 50, height: 50 })
19.        .stroke(Color.Black)
20.        .fill(config.checked ? (config.contentModifier as MyRadioStyle).selectedColor : Color.White)
21.      Button(config.checked ? "off" : "on")
22.        .width(100)
23.        .type(config.checked ? (config.contentModifier as MyRadioStyle).type : ButtonType.Normal)
24.        .backgroundColor('#2787D9')
25.        .onClick(() =\> {
26.          if (config.checked) {
27.            config.triggerChange(false)
28.          } else {
29.            config.triggerChange(true)
30.          }
31.        })
32.    }
33.  }

35.  @Entry
36.  @Component
37.  struct refreshExample {
38.    build() {
39.      Column({ space: 50 }) {
40.        Row() {
41.          Radio({ value: 'Radio1', group: 'radioGroup' })
42.            .contentModifier(new MyRadioStyle(1, '#004AAF'))
43.            .checked(false)
44.            .width(300)
45.            .height(100)
46.        }

48.        Row() {
49.          Radio({ value: 'Radio2', group: 'radioGroup' })
50.            .checked(true)
51.            .width(300)
52.            .height(60)
53.            .contentModifier(new MyRadioStyle(2, '#004AAF'))
54.        }
55.      }
56.    }
57.  }

![](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240930114427.71019417950129826215317390942416:50001231000000:2800:ACD01C30E6C7C54F5A18B33B788B5E77A8C75BB0BBCC123AC166EECD3A9339DD.gif?needInitFileName=true?needInitFileName=true)
