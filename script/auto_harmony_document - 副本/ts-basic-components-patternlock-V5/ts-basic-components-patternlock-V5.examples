/*\n实现一个图案锁组件，用户可以通过滑动连接圆点来设置和验证密码。组件包含一个提示信息文本、一个图案锁控件和一个重置按钮。图案锁控件支持自定义样式和行为，如圆点大小、路径颜色、自动重置等。用户输入的密码长度必须大于5，且两次输入的密码必须一致才能设置成功。\n*/\n\nimport { LengthUnit } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct PatternLockExample {\n  @State passwords: Number[] = [] // 用于存储用户输入的密码\n  @State message: string = 'please input password!' // 初始提示信息，提示用户输入密码\n  private patternLockController: PatternLockController = new PatternLockController() // 创建图案锁控制器实例，用于控制图案锁的行为\n\n  build() {\n    Column() {\n      Text(this.message) // 显示提示信息\n        .textAlign(TextAlign.Center) // 文本居中对齐\n        .margin(20) // 设置文本外边距\n        .fontSize(20) // 设置文本字体大小\n      \n      PatternLock(this.patternLockController) // 创建图案锁组件，并传入控制器实例\n        .sideLength(200) // 设置图案锁的边长\n        .circleRadius(9) // 设置图案锁中圆点的半径\n        .pathStrokeWidth(18) // 设置图案锁路径线的宽度\n        .activeColor('#B0C4DE') // 设置图案锁激活状态的颜色\n        .selectedColor('#228B22') // 设置图案锁选中状态的颜色\n        .pathColor('#90EE90') // 设置图案锁路径线的颜色\n        .backgroundColor('#F5F5F5') // 设置图案锁的背景颜色\n        .autoReset(true) // 设置图案锁在完成一次输入后是否自动重置\n        .activateCircleStyle({\n          color: '#90EE90', // 设置激活圆点的颜色\n          radius: { value: 16, unit: LengthUnit.VP }, // 设置激活圆点的半径，单位为视口宽度单位\n          enableWaveEffect: true // 启用激活圆点的波浪效果\n        })\n        .onDotConnect((index: number) => {\n          console.log("onDotConnect index: " + index) // 当用户连接圆点时触发，打印连接的圆点索引\n        })\n        .onPatternComplete((input: Array<number>) => {\n          // 判断用户输入的密码长度是否符合要求\n          if (input === null || input === undefined || input.length < 5) {\n            this.message = 'The password length needs to be greater than 5, please enter again.' // 提示用户密码长度不足，需要重新输入\n            return\n          }\n          // 判断是否已经设置过密码\n          if (this.passwords.length > 0) {\n            // 判断两次输入的密码是否一致\n            if (this.passwords.toString() === input.toString()) {\n              this.passwords = input // 更新密码\n              this.message = 'Set password successfully: ' + this.passwords.toString() // 提示用户密码设置成功\n              this.patternLockController.setChallengeResult(PatternLockChallengeResult.CORRECT) // 设置图案锁挑战结果为正确\n            } else {\n              this.message = 'Inconsistent passwords, please enter again.' // 提示用户两次输入的密码不一致，需要重新输入\n              this.patternLockController.setChallengeResult(PatternLockChallengeResult.WRONG) // 设置图案锁挑战结果为错误\n            }\n          } else {\n            this.passwords = input // 第一次输入密码，存储密码\n            this.message = "Please enter again." // 提示用户再次输入密码\n          }\n        })\n      \n      Button('Reset PatternLock') // 创建重置按钮\n        .margin(30) // 设置按钮外边距\n        .onClick(() => {\n          // 重置图案锁\n          this.patternLockController.reset() // 重置图案锁状态\n          this.passwords = [] // 清空存储的密码\n          this.message = 'Please input password' // 提示用户重新输入密码\n        })\n    }\n    .width('100%') // 设置布局宽度为100%\n    .height('100%') // 设置布局高度为100%\n  }\n}