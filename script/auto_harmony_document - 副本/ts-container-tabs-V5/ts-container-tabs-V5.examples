/*\n实现一个带有预加载功能的标签页组件。标签页包含四个子标签页，每个子标签页显示不同颜色的背景。通过点击按钮，可以预加载指定索引的标签页内容，以提高用户体验。\n*/\n\nimport { BusinessError } from '@kit.BasicServicesKit'\n\n@Entry\n@Component\nstruct TabsPreloadItems {\n  @State currentIndex: number = 1 // 当前选中的标签页索引，默认为1\n  private tabsController: TabsController = new TabsController() // 创建TabsController实例，用于控制标签页\n\n  build() {\n    Column() {\n      Tabs({ index: this.currentIndex, controller: this.tabsController }) {\n        TabContent() {\n          MyComponent({ color: '#00CB87' }) // 第一个标签页内容，显示绿色背景的MyComponent组件\n        }.tabBar(SubTabBarStyle.of('green')) // 设置标签页的样式为绿色\n\n        TabContent() {\n          MyComponent({ color: '#007DFF' }) // 第二个标签页内容，显示蓝色背景的MyComponent组件\n        }.tabBar(SubTabBarStyle.of('blue')) // 设置标签页的样式为蓝色\n\n        TabContent() {\n          MyComponent({ color: '#FFBF00' }) // 第三个标签页内容，显示黄色背景的MyComponent组件\n        }.tabBar(SubTabBarStyle.of('yellow')) // 设置标签页的样式为黄色\n\n        TabContent() {\n          MyComponent({ color: '#E67C92' }) // 第四个标签页内容，显示粉色背景的MyComponent组件\n        }.tabBar(SubTabBarStyle.of('pink')) // 设置标签页的样式为粉色\n      }\n      .width(360) // 设置Tabs组件的宽度\n      .height(296) // 设置Tabs组件的高度\n      .backgroundColor('#F1F3F5') // 设置Tabs组件的背景颜色\n      .onChange((index: number) => {\n        this.currentIndex = index // 当标签页切换时，更新当前选中的标签页索引\n      })\n\n      Button('preload items: [0, 2, 3]') // 创建一个按钮，点击后预加载指定索引的标签页内容\n        .margin(5) // 设置按钮的外边距\n        .onClick(() => {\n          this.tabsController.preloadItems([0, 2, 3]) // 调用preloadItems方法预加载索引为0、2、3的标签页内容\n            .then(() => {\n              console.info('preloadItems success.') // 预加载成功时在控制台输出信息\n            })\n            .catch((error: BusinessError) => {\n              console.error('preloadItems failed, error code: ' + error.code + ', error message: ' + error.message) // 预加载失败时在控制台输出错误信息\n            })\n        })\n    }\n  }\n}\n\n@Component\nstruct MyComponent {\n  private color: string = "" // 组件的背景颜色\n\n  aboutToAppear(): void {\n    console.info('aboutToAppear backgroundColor:' + this.color) // 组件即将显示时在控制台输出背景颜色\n  }\n\n  aboutToDisappear(): void {\n    console.info('aboutToDisappear backgroundColor:' + this.color) // 组件即将消失时在控制台输出背景颜色\n  }\n\n  build() {\n    Column()\n      .width('100%') // 设置组件的宽度为100%\n      .height('100%') // 设置组件的高度为100%\n      .backgroundColor(this.color) // 设置组件的背景颜色\n  }\n}


/*\n实现一个带有自定义TabBar的Tabs组件，支持Tab切换时的动画效果和自定义样式。TabBar位于Tabs的顶部，每个Tab的内容背景颜色不同，且TabBar的样式会根据当前选中的Tab动态变化。\n*/\n\n@Entry\n@Component\nstruct TabsExample {\n  @State fontColor: string = '#182431' // 默认字体颜色\n  @State selectedFontColor: string = '#007DFF' // 选中Tab的字体颜色\n  @State currentIndex: number = 0 // 当前选中的Tab索引\n  private controller: TabsController = new TabsController() // Tabs控制器，用于控制Tabs的行为\n\n  // 自定义TabBar构建器\n  @Builder tabBuilder(index: number, name: string) {\n    Column() {\n      Text(name)\n        .fontColor(this.currentIndex === index ? this.selectedFontColor : this.fontColor) // 根据当前选中的Tab设置字体颜色\n        .fontSize(16)\n        .fontWeight(this.currentIndex === index ? 500 : 400) // 根据当前选中的Tab设置字体粗细\n        .lineHeight(22)\n        .margin({ top: 17, bottom: 7 })\n      Divider()\n        .strokeWidth(2)\n        .color('#007DFF')\n        .opacity(this.currentIndex === index ? 1 : 0) // 根据当前选中的Tab设置下划线的可见性\n    }.width('100%')\n  }\n\n  build() {\n    Column() {\n      Tabs({ barPosition: BarPosition.Start, index: this.currentIndex, controller: this.controller }) {\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#00CB87') // 第一个Tab的内容，背景颜色为绿色\n        }.tabBar(this.tabBuilder(0, 'green'))\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#007DFF') // 第二个Tab的内容，背景颜色为蓝色\n        }.tabBar(this.tabBuilder(1, 'blue'))\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#FFBF00') // 第三个Tab的内容，背景颜色为黄色\n        }.tabBar(this.tabBuilder(2, 'yellow'))\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#E67C92') // 第四个Tab的内容，背景颜色为粉色\n        }.tabBar(this.tabBuilder(3, 'pink'))\n      }\n      .vertical(false) // 设置TabBar为水平布局\n      .barMode(BarMode.Fixed) // 设置TabBar为固定模式\n      .barWidth(360) // 设置TabBar的宽度\n      .barHeight(56) // 设置TabBar的高度\n      .animationDuration(400) // 设置切换Tab时的动画持续时间\n      .onChange((index: number) => {\n        this.currentIndex = index // 更新当前选中的Tab索引\n      })\n      .width(360)\n      .height(296)\n      .margin({ top: 52 })\n      .backgroundColor('#F1F3F5') // 设置整体背景颜色\n    }.width('100%')\n  }\n}


/*\n实现一个带有Tab切换功能的组件，包含四个Tab页，每个Tab页显示不同的内容。TabBar位于底部，支持手动切换和动态修改Tab索引。\n*/\n\n@Entry\n@Component\nstruct TabsExample {\n  @State currentIndex: number = 2 // 初始化当前选中的Tab索引为2\n  private controller: TabsController = new TabsController() // 创建TabsController实例，用于控制Tab的切换\n\n  // 定义一个Builder方法用于生成TabBar的内容\n  @Builder tabBuilder(title: string, targetIndex: number) {\n    Column() {\n      Text(title).fontColor(this.currentIndex === targetIndex ? '#1698CE' : '#6B6B6B') // 根据当前选中的Tab索引改变文本颜色\n    }.width('100%')\n     .height(50)\n     .justifyContent(FlexAlign.Center)\n  }\n\n  build() {\n    Column() {\n      Tabs({ barPosition: BarPosition.End, controller: this.controller, index: this.currentIndex }) {\n        TabContent() {\n          Column() {\n            Text('首页的内容')\n          }.width('100%').height('100%').backgroundColor('#00CB87').justifyContent(FlexAlign.Center)\n        }.tabBar(this.tabBuilder('首页', 0)) // 使用tabBuilder方法生成TabBar内容\n\n        TabContent() {\n          Column() {\n            Text('发现的内容')\n          }.width('100%').height('100%').backgroundColor('#007DFF').justifyContent(FlexAlign.Center)\n        }.tabBar(this.tabBuilder('发现', 1)) // 使用tabBuilder方法生成TabBar内容\n\n        TabContent() {\n          Column() {\n            Text('推荐的内容')\n          }.width('100%').height('100%').backgroundColor('#FFBF00').justifyContent(FlexAlign.Center)\n        }.tabBar(this.tabBuilder('推荐', 2)) // 使用tabBuilder方法生成TabBar内容\n\n        TabContent() {\n          Column() {\n            Text('我的内容')\n          }.width('100%').height('100%').backgroundColor('#E67C92').justifyContent(FlexAlign.Center)\n        }.tabBar(this.tabBuilder('我的', 3)) // 使用tabBuilder方法生成TabBar内容\n      }\n      .vertical(False) // 设置Tabs为水平布局\n      .barMode(BarMode.Fixed) // 设置TabBar为固定模式\n      .barWidth(360) // 设置TabBar的宽度\n      .barHeight(60) // 设置TabBar的高度\n      .animationDuration(0) // 禁用切换动画\n      .onChange((index: number) => {\n        this.currentIndex = index // 更新当前选中的Tab索引\n      })\n      .width(360) // 设置Tabs组件的宽度\n      .height(600) // 设置Tabs组件的高度\n      .backgroundColor('#F1F3F5') // 设置Tabs组件的背景颜色\n      .scrollable(True) // 设置Tabs组件可滚动\n      .onContentWillChange((currentIndex, comingIndex) => {\n        if (comingIndex == 2) {\n          return False // 拦截切换到索引为2的Tab\n        }\n        return True // 允许其他Tab的切换\n      })\n\n      Button('动态修改index').width('50%').margin({ top: 20 })\n        .onClick(() => {\n          this.currentIndex = (this.currentIndex + 1) % 4 // 动态修改当前选中的Tab索引\n        })\n\n      Button('changeIndex').width('50%').margin({ top: 20 })\n        .onClick(() => {\n          this.currentIndex = (this.currentIndex + 1) % 4 // 动态修改当前选中的Tab索引\n          this.controller.changeIndex(this.currentIndex) // 通过TabsController控制Tab索引的切换\n        })\n    }.width('100%')\n  }\n}


/*\n实现一个带有自定义动画效果的Tabs组件。每个Tab页面在切换时会有缩放和透明度变化的动画效果。动画的持续时间和延迟时间根据Tab页面的索引递增。\n*/\n\n@Entry\n@Component\nstruct TabsCustomAnimationExample {\n  @State data: itemType[] = [\n    {\n      text: 'Red',\n      backgroundColor: Color.Red\n    },\n    {\n      text: 'Yellow',\n      backgroundColor: Color.Yellow\n    },\n    {\n      text: 'Blue',\n      backgroundColor: Color.Blue\n    }\n  ]\n  @State opacityList: number[] = [] // 存储每个Tab页面的透明度值\n  @State scaleList: number[] = [] // 存储每个Tab页面的缩放值\n\n  private durationList: number[] = [] // 存储每个Tab页面的动画持续时间\n  private timeoutList: number[] = [] // 存储每个Tab页面的动画延迟时间\n\n  // 定义自定义的TabContentAnimatedTransition\n  private customContentTransition: (from: number, to: number) => TabContentAnimatedTransition = (from: number, to: number) => {\n    let tabContentAnimatedTransition = {\n      timeout: this.timeoutList[from], // 设置动画延迟时间\n      transition: (proxy: TabContentTransitionProxy) => {\n        this.scaleList[from] = 1.0 // 设置起始Tab页面的初始缩放值\n        this.scaleList[to] = 0.5 // 设置目标Tab页面的初始缩放值\n        this.opacityList[from] = 1.0 // 设置起始Tab页面的初始透明度值\n        this.opacityList[to] = 0.5 // 设置目标Tab页面的初始透明度值\n        animateTo({\n          duration: this.durationList[from], // 设置动画持续时间\n          onFinish: () => {\n            proxy.finishTransition() // 动画完成后调用finishTransition方法\n          }\n        }, () => {\n          this.scaleList[from] = 0.5 // 设置起始Tab页面的最终缩放值\n          this.scaleList[to] = 1.0 // 设置目标Tab页面的最终缩放值\n          this.opacityList[from] = 0.5 // 设置起始Tab页面的最终透明度值\n          this.opacityList[to] = 1.0 // 设置目标Tab页面的最终透明度值\n        })\n      }\n    } as TabContentAnimatedTransition\n    return tabContentAnimatedTransition\n  }\n\n  // 组件初始化时设置动画参数\n  aboutToAppear(): void {\n    let duration = 1000\n    let timeout = 1000\n    for (let i = 1; i <= this.data.length; i++) {\n      this.opacityList.push(1.0) // 初始化透明度值\n      this.scaleList.push(1.0) // 初始化缩放值\n      this.durationList.push(duration * i) // 设置动画持续时间\n      this.timeoutList.push(timeout * i) // 设置动画延迟时间\n    }\n  }\n\n  build() {\n    Column() {\n      Tabs() {\n        ForEach(this.data, (item: itemType, index: number) => {\n          TabContent() {}\n            .tabBar(item.text) // 设置Tab页面的文本标签\n            .backgroundColor(item.backgroundColor) // 设置Tab页面的背景颜色\n            .opacity(this.opacityList[index]) // 设置Tab页面的透明度\n            .scale({ x: this.scaleList[index], y: this.scaleList[index] }) // 设置Tab页面的缩放\n        })\n      }\n      .backgroundColor(0xf1f3f5) // 设置Tabs组件的背景颜色\n      .width('100%') // 设置Tabs组件的宽度\n      .height(500) // 设置Tabs组件的高度\n      .customContentTransition(this.customContentTransition) // 设置自定义的TabContentAnimatedTransition\n    }\n  }\n}


/*\n实现一个带有TabBar的页面布局，TabBar的背景颜色和是否叠加在TabContent之上的状态可以动态切换。页面顶部有一个按钮，点击按钮可以切换TabBar的叠加状态。TabBar包含三个TabContent，每个TabContent显示当前的barOverlap状态和barBackgroundColor值。\n*/\n\n@Entry\n@Component\nstruct barBackgroundColorTest {\n  private controller: TabsController = new TabsController() // 创建一个TabsController实例，用于管理Tabs组件的状态\n  @State barOverlap: boolean = True; // 管理TabBar是否背后变模糊并叠加在TabContent之上的状态，初始值为True\n  @State barBackgroundColor: string = '#88888888'; // 管理TabBar的背景颜色，初始值为'#88888888'\n\n  build() {\n    Column() {\n      Button("barOverlap变化").width('100%').margin({ bottom: '12vp' })\n        .onClick((event?: ClickEvent) => {\n          // 点击按钮切换barOverlap的状态\n          if (this.barOverlap) {\n            this.barOverlap = False; // 如果当前barOverlap为True，则切换为False\n          } else {\n            this.barOverlap = True; // 如果当前barOverlap为False，则切换为True\n          }\n        })\n\n      Tabs({ barPosition: BarPosition.Start, index: 0, controller: this.controller }) {\n        TabContent() {\n          Column() {\n            Text(`barOverlap ${this.barOverlap}`).fontSize(16).margin({ top: this.barOverlap ? '56vp' : 0 })\n            // 显示当前的barOverlap状态，如果barOverlap为True，则顶部留出56vp的空白\n            Text(`barBackgroundColor ${this.barBackgroundColor}`).fontSize(16)\n            // 显示当前的barBackgroundColor值\n          }.width('100%').height('100%')\n          .backgroundColor(Color.Pink) // 设置TabContent的背景颜色为粉色\n        }\n        .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), "1"))\n        // 设置第一个Tab的TabBar样式，图标为系统图标，文本为"1"\n\n        TabContent() {\n          Column() {\n            Text(`barOverlap ${this.barOverlap}`).fontSize(16).margin({ top: this.barOverlap ? '56vp' : 0 })\n            // 显示当前的barOverlap状态，如果barOverlap为True，则顶部留出56vp的空白\n            Text(`barBackgroundColor ${this.barBackgroundColor}`).fontSize(16)\n            // 显示当前的barBackgroundColor值\n          }.width('100%').height('100%')\n          .backgroundColor(Color.Yellow) // 设置TabContent的背景颜色为黄色\n        }\n        .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), "2"))\n        // 设置第二个Tab的TabBar样式，图标为系统图标，文本为"2"\n\n        TabContent() {\n          Column() {\n            Text(`barOverlap ${this.barOverlap}`).fontSize(16).margin({ top: this.barOverlap ? '56vp' : 0 })\n            // 显示当前的barOverlap状态，如果barOverlap为True，则顶部留出56vp的空白\n            Text(`barBackgroundColor ${this.barBackgroundColor}`).fontSize(16)\n            // 显示当前的barBackgroundColor值\n          }.width('100%').height('100%')\n          .backgroundColor(Color.Green) // 设置TabContent的背景颜色为绿色\n        }\n        .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), "3"))\n        // 设置第三个Tab的TabBar样式，图标为系统图标，文本为"3"\n      }\n      .vertical(False) // 设置Tabs为水平布局\n      .barMode(BarMode.Fixed) // 设置TabBar为固定模式\n      .height('60%') // 设置Tabs的高度为父容器的60%\n      .barOverlap(this.barOverlap) // 根据barOverlap状态设置TabBar是否背后变模糊并叠加在TabContent之上\n      .scrollable(True) // 设置Tabs可滚动\n      .animationDuration(10) // 设置Tabs切换动画的持续时间为10毫秒\n      .barBackgroundColor(this.barBackgroundColor) // 设置TabBar的背景颜色\n    }\n    .height(500) // 设置Column的高度为500vp\n    .padding({ top: '24vp', left: '24vp', right: '24vp' }) // 设置Column的内边距\n  }\n}


/*\n实现一个带有动态调整TabBar布局参数功能的Tabs组件示例。通过按钮组可以调整TabBar的margin、gutter和栅格列数，并在点击TabBar时显示点击的索引。\n*/\n\n@Entry\n@Component\nstruct TabsExample5 {\n  private controller: TabsController = new TabsController() // 创建TabsController实例，用于控制Tabs组件\n  @State gridMargin: number = 10 // 初始化TabBar的margin值\n  @State gridGutter: number = 10 // 初始化TabBar的gutter值\n  @State sm: number = -2 // 初始化TabBar的栅格列数\n  @State clickedContent: string = "" // 用于存储TabBar点击事件的文本内容\n\n  build() {\n    Column() {\n      // 按钮组用于调整TabBar的margin值\n      Row() {\n        Button("gridMargin+10 " + this.gridMargin)\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.gridMargin += 10 // 增加TabBar的margin值\n          })\n          .margin({ right: '6%', bottom: '12vp' })\n        Button("gridMargin-10 " + this.gridMargin)\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.gridMargin -= 10 // 减少TabBar的margin值\n          })\n          .margin({ bottom: '12vp' })\n      }\n\n      // 按钮组用于调整TabBar的gutter值\n      Row() {\n        Button("gridGutter+10 " + this.gridGutter)\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.gridGutter += 10 // 增加TabBar的gutter值\n          })\n          .margin({ right: '6%', bottom: '12vp' })\n        Button("gridGutter-10 " + this.gridGutter)\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.gridGutter -= 10 // 减少TabBar的gutter值\n          })\n          .margin({ bottom: '12vp' })\n      }\n\n      // 按钮组用于调整TabBar的栅格列数\n      Row() {\n        Button("sm+2 " + this.sm)\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.sm += 2 // 增加TabBar的栅格列数\n          })\n          .margin({ right: '6%' })\n        Button("sm-2 " + this.sm).width('47%').height(50).margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.sm -= 2 // 减少TabBar的栅格列数\n          })\n      }\n\n      // 显示TabBar点击事件的文本内容\n      Text("点击内容:" + this.clickedContent).width('100%').height(200).margin({ top: 5 })\n\n      // Tabs组件，包含三个TabContent\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) {\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Pink)\n        }.tabBar(BottomTabBarStyle.of($r("sys.media.ohos_app_icon"), "1"))\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar(BottomTabBarStyle.of($r("sys.media.ohos_app_icon"), "2"))\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Blue)\n        }.tabBar(BottomTabBarStyle.of($r("sys.media.ohos_app_icon"), "3"))\n      }\n      .width('350vp')\n      .animationDuration(300) // 设置Tabs切换动画的持续时间为300毫秒\n      .height('60%')\n      .barGridAlign({ sm: this.sm, margin: this.gridMargin, gutter: this.gridGutter }) // 设置TabBar的栅格对齐方式，包括栅格列数、margin和gutter\n      .backgroundColor(0xf1f3f5)\n      .onTabBarClick((index: number) => {\n        this.clickedContent += "now index " + index + " is clicked\n" // 响应TabBar点击事件，并更新文本内容\n      })\n    }\n    .width('100%')\n    .height(500)\n    .margin({ top: 5 })\n    .padding('10vp')\n  }\n}


/*\n实现一个包含两个Tabs组件的页面，每个Tabs组件包含多个子页签。第一个Tabs组件水平排列，第二个Tabs组件垂直排列。每个Tabs组件的页签栏可以滚动，并且可以通过按钮控制页签的渐隐效果。\n*/\n\n@Entry\n@Component\nstruct TabsOpaque {\n  @State message: string = 'Hello World' // 初始化状态消息\n  private controller: TabsController = new TabsController() // 创建第一个 Tabs 控制器\n  private controller1: TabsController = new TabsController() // 创建第二个 Tabs 控制器\n  @State selfFadingFade: boolean = True; // 控制渐隐效果的状态变量\n\n  build() {\n    Column() {\n      Button('子页签设置渐隐').width('100%').margin({ bottom: '12vp' })\n        .onClick((event?: ClickEvent) => {\n          this.selfFadingFade = True; // 设置渐隐效果\n        })\n      Button('子页签设置不渐隐').width('100%').margin({ bottom: '12vp' })\n        .onClick((event?: ClickEvent) => {\n          this.selfFadingFade = False; // 取消渐隐效果\n        })\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) {\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Pink)\n        }.tabBar('pink')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Yellow)\n        }.tabBar('yellow')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Blue)\n        }.tabBar('blue')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar('green')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar('green')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar('green')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar('green')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar('green')\n      }\n      .vertical(False) // 设置 Tabs 水平方向\n      .scrollable(True) // 设置 Tabs 可滚动\n      .barMode(BarMode.Scrollable) // 设置页签栏可滚动\n      .barHeight(80) // 设置页签栏高度\n      .animationDuration(400) // 设置动画持续时间\n      .onChange((index: number) => {\n        console.info(index.toString()) // 打印当前选中的页签索引\n      })\n      .fadingEdge(this.selfFadingFade) // 设置渐隐效果\n      .height('30%') // 设置 Tabs 高度\n      .width('100%') // 设置 Tabs 宽度\n\n      Tabs({ barPosition: BarPosition.Start, controller: this.controller1 }) {\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Pink)\n        }.tabBar('pink')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Yellow)\n        }.tabBar('yellow')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Blue)\n        }.tabBar('blue')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar('green')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar('green')\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar('green')\n      }\n      .vertical(True) // 设置 Tabs 垂直方向\n      .scrollable(True) // 设置 Tabs 可滚动\n      .barMode(BarMode.Scrollable) // 设置页签栏可滚动\n      .barHeight(200) // 设置页签栏高度\n      .barWidth(80) // 设置页签栏宽度\n      .animationDuration(400) // 设置动画持续时间\n      .onChange((index: number) => {\n        console.info(index.toString()) // 打印当前选中的页签索引\n      })\n      .fadingEdge(this.selfFadingFade) // 设置渐隐效果\n      .height('30%') // 设置 Tabs 高度\n      .width('100%') // 设置 Tabs 宽度\n    }\n    .padding({ top: '24vp', left: '24vp', right: '24vp' }) // 设置内边距\n  }\n}


/*\n实现一个带有多个Tab页的组件，支持动态调整滚动边距、文本内容和布局样式。每个Tab页的内容为一个带有不同背景颜色的全屏列组件。通过按钮可以动态调整滚动边距、文本内容和布局样式，从而改变Tabs组件的显示效果。\n*/\n\n@Entry\n@Component\nstruct TabsExample6 {\n  private controller: TabsController = new TabsController() // 创建一个TabsController实例，用于控制Tabs组件的行为\n  @State scrollMargin: number = 0 // 定义滚动边距的初始值，用于控制Tabs组件的滚动边距\n  @State layoutStyle: LayoutStyle = LayoutStyle.ALWAYS_CENTER // 定义布局样式的初始值，用于控制Tabs组件的布局样式\n  @State text: string = "文本" // 定义文本内容的初始值，用于显示在TabBar上的文本\n\n  build() {\n    Column() {\n      Row() {\n        Button("scrollMargin+10 " + this.scrollMargin)\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.scrollMargin += 10 // 点击按钮增加滚动边距\n          })\n          .margin({ right: '6%', bottom: '12vp' })\n        Button("scrollMargin-10 " + this.scrollMargin)\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.scrollMargin -= 10 // 点击按钮减少滚动边距\n          })\n          .margin({ bottom: '12vp' })\n      }\n\n      Row() {\n        Button("文本增加 ")\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.text += '文本增加' // 点击按钮增加文本内容\n          })\n          .margin({ right: '6%', bottom: '12vp' })\n        Button("文本重置")\n          .width('47%')\n          .height(50)\n          .margin({ top: 5 })\n          .onClick((event?: ClickEvent) => {\n            this.text = "文本" // 点击按钮重置文本内容\n          })\n          .margin({ bottom: '12vp' })\n      }\n\n      Row() {\n        Button("layoutStyle.ALWAYS_CENTER")\n          .width('100%')\n          .height(50)\n          .margin({ top: 5 })\n          .fontSize(15)\n          .onClick((event?: ClickEvent) => {\n            this.layoutStyle = LayoutStyle.ALWAYS_CENTER; // 点击按钮设置布局样式为中心对齐\n          })\n          .margin({ bottom: '12vp' })\n      }\n\n      Row() {\n        Button("layoutStyle.ALWAYS_AVERAGE_SPLIT")\n          .width('100%')\n          .height(50)\n          .margin({ top: 5 })\n          .fontSize(15)\n          .onClick((event?: ClickEvent) => {\n            this.layoutStyle = LayoutStyle.ALWAYS_AVERAGE_SPLIT; // 点击按钮设置布局样式为平均分割\n          })\n          .margin({ bottom: '12vp' })\n      }\n\n      Row() {\n        Button("layoutStyle.SPACE_BETWEEN_OR_CENTER")\n          .width('100%')\n          .height(50)\n          .margin({ top: 5 })\n          .fontSize(15)\n          .onClick((event?: ClickEvent) => {\n            this.layoutStyle = LayoutStyle.SPACE_BETWEEN_OR_CENTER; // 点击按钮设置布局样式为间距均匀或中心对齐\n          })\n          .margin({ bottom: '12vp' })\n      }\n\n      Tabs({ barPosition: BarPosition.End, controller: this.controller }) {\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Pink)\n        }.tabBar(SubTabBarStyle.of(this.text)) // 设置TabBar的样式，显示当前的文本内容\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green)\n        }.tabBar(SubTabBarStyle.of(this.text)) // 设置TabBar的样式，显示当前的文本内容\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Blue)\n        }.tabBar(SubTabBarStyle.of(this.text)) // 设置TabBar的样式，显示当前的文本内容\n      }\n      .animationDuration(300) // 设置Tabs组件的动画持续时间为300毫秒\n      .height('60%') // 设置Tabs组件的高度为父容器的60%\n      .backgroundColor(0xf1f3f5) // 设置Tabs组件的背景颜色\n      .barMode(BarMode.Scrollable, { margin: this.scrollMargin, nonScrollableLayoutStyle: this.layoutStyle })\n      // 设置Tabs组件的滚动模式，并根据当前的滚动边距和布局样式进行配置\n    }\n    .width('100%') // 设置Column组件的宽度为父容器的100%\n    .height(500) // 设置Column组件的高度为500vp\n    .margin({ top: 5 }) // 设置Column组件的上边距为5vp\n    .padding('24vp') // 设置Column组件的内边距为24vp\n  }\n}


/*\n实现一个带有分割线的Tabs组件，支持动态调整分割线的颜色、宽度、上下边距，并且可以通过按钮控制分割线的显示与隐藏。Tabs组件包含五个标签页，每个标签页有不同的背景颜色，并且标签栏支持垂直布局和滚动。\n*/\n\n@Entry\n@Component\nstruct TabsDivider1 {\n  private controller1: TabsController = new TabsController() // 创建一个Tabs控制器，用于管理Tabs组件的状态\n  @State dividerColor: string = 'red' // 分割线颜色状态变量，初始为红色\n  @State strokeWidth: number = 2 // 分割线宽度状态变量，初始为2\n  @State startMargin: number = 0 // 分割线上边距状态变量，初始为0\n  @State endMargin: number = 0 // 分割线下边距状态变量，初始为0\n  @State nullFlag: boolean = False // 是否隐藏分割线的标志状态变量，初始为False\n\n  build() {\n    Column() {\n      Tabs({ controller: this.controller1 }) { // 创建一个Tabs组件，使用controller1控制\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Pink) // 创建一个粉色背景的标签页内容\n        }.tabBar('pink') // 设置标签页的标题为'pink'\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Yellow) // 创建一个黄色背景的标签页内容\n        }.tabBar('yellow') // 设置标签页的标题为'yellow'\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Blue) // 创建一个蓝色背景的标签页内容\n        }.tabBar('blue') // 设置标签页的标题为'blue'\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Green) // 创建一个绿色背景的标签页内容\n        }.tabBar('green') // 设置标签页的标题为'green'\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor(Color.Red) // 创建一个红色背景的标签页内容\n        }.tabBar('red') // 设置标签页的标题为'red'\n      }\n      .vertical(True) // 设置Tabs为垂直布局\n      .scrollable(True) // 设置Tabs可滚动\n      .barMode(BarMode.Fixed) // 设置标签栏模式为固定\n      .barWidth(70) // 设置标签栏宽度为70\n      .barHeight(200) // 设置标签栏高度为200\n      .animationDuration(400) // 设置切换动画时长为400毫秒\n      .onChange((index: number) => { // 监听标签页切换事件\n        console.info(index.toString()) // 打印当前选中的标签页索引\n      })\n      .height('200vp') // 设置Tabs高度为200vp\n      .margin({ bottom: '12vp' }) // 设置Tabs底部外边距为12vp\n      .divider(this.nullFlag ? null : { // 设置分割线属性，如果nullFlag为True则隐藏分割线\n        strokeWidth: this.strokeWidth, // 分割线宽度\n        color: this.dividerColor, // 分割线颜色\n        startMargin: this.startMargin, // 分割线上边距\n        endMargin: this.endMargin // 分割线下边距\n      })\n\n      Button('常规Divider').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，点击后恢复分割线的常规设置\n        .onClick(() => {\n          this.nullFlag = False; // 显示分割线\n          this.strokeWidth = 2; // 设置分割线宽度为2\n          this.dividerColor = 'red'; // 设置分割线颜色为红色\n          this.startMargin = 0; // 设置分割线上边距为0\n          this.endMargin = 0; // 设置分割线下边距为0\n        })\n      Button('空Divider').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，点击后隐藏分割线\n        .onClick(() => {\n          this.nullFlag = True // 隐藏分割线\n        })\n      Button('颜色变为蓝色').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，点击后将分割线颜色变为蓝色\n        .onClick(() => {\n          this.dividerColor = 'blue' // 设置分割线颜色为蓝色\n        })\n      Button('宽度增加').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，点击后增加分割线宽度\n        .onClick(() => {\n          this.strokeWidth += 2 // 增加分割线宽度\n        })\n      Button('宽度减小').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，点击后减少分割线宽度\n        .onClick(() => {\n          if (this.strokeWidth > 2) { // 如果分割线宽度大于2\n            this.strokeWidth -= 2 // 减少分割线宽度\n          }\n        })\n      Button('上边距增加').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，点击后增加分割线上边距\n        .onClick(() => {\n          this.startMargin += 2 // 增加分割线上边距\n        })\n      Button('上边距减少').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，点击后减少分割线上边距\n        .onClick(() => {\n          if (this.startMargin > 2) { // 如果分割线上边距大于2\n            this.startMargin -= 2 // 减少分割线上边距\n          }\n        })\n      Button('下边距增加').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，点击后增加分割线下边距\n        .onClick(() => {\n          this.endMargin += 2 // 增加分割线下边距\n        })\n      Button('下边距减少').width('100%').margin({ bottom: '12vp' }) // 创建一个按钮，点击后减少分割线下边距\n        .onClick(() => {\n          if (this.endMargin > 2) { // 如果分割线下边距大于2\n            this.endMargin -= 2 // 减少分割线下边距\n          }\n        })\n    }.padding({ top: '24vp', left: '24vp', right: '24vp' }) // 设置整体布局的内边距\n  }\n}


/*\n实现一个带有自定义TabBar和底部指示器的Tabs组件。TabBar包含四个选项卡，每个选项卡对应一个不同的背景颜色。底部指示器会根据当前选中的Tab动态调整位置和宽度，并支持滑动切换动画效果。\n*/\n\nimport { ComponentUtils } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct TabsExample {\n  @State currentIndex: number = 0 // 当前选中的Tab索引\n  @State animationDuration: number = 300 // 动画持续时间\n  @State indicatorLeftMargin: number = 0 // 指示器的左边距\n  @State indicatorWidth: number = 0 // 指示器的宽度\n  private tabsWidth: number = 0 // TabBar的总宽度\n  private componentUtils: ComponentUtils = this.getUIContext().getComponentUtils() // 获取组件工具实例\n\n  @Builder\n  tabBuilder(index: number, name: string) {\n    Column() {\n      Text(name)\n        .fontSize(16)\n        .fontColor(this.currentIndex === index ? '#007DFF' : '#182431') // 根据当前选中的Tab设置字体颜色\n        .fontWeight(this.currentIndex === index ? 500 : 400) // 根据当前选中的Tab设置字体粗细\n        .id(index.toString())\n        .onAreaChange((oldValue: Area,newValue: Area) => {\n          if (this.currentIndex === index && (this.indicatorLeftMargin === 0 || this.indicatorWidth === 0)){\n            if (newValue.position.x != undefined) {\n              let positionX = Number.parseFloat(newValue.position.x.toString())\n              this.indicatorLeftMargin = Number.isNaN(positionX) ? 0 : positionX // 更新指示器的左边距\n            }\n            let width = Number.parseFloat(newValue.width.toString())\n            this.indicatorWidth = Number.isNaN(width) ? 0 : width // 更新指示器的宽度\n          }\n        })\n    }.width('100%')\n  }\n\n  build() {\n    Stack({ alignContent: Alignment.TopStart }) {\n      Tabs({ barPosition: BarPosition.Start }) {\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#00CB87')\n        }.tabBar(this.tabBuilder(0, 'green'))\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#007DFF')\n        }.tabBar(this.tabBuilder(1, 'blue'))\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#FFBF00')\n        }.tabBar(this.tabBuilder(2, 'yellow'))\n\n        TabContent() {\n          Column().width('100%').height('100%').backgroundColor('#E67C92')\n        }.tabBar(this.tabBuilder(3, 'pink'))\n      }\n      .onAreaChange((oldValue: Area,newValue: Area)=> {\n        let width = Number.parseFloat(newValue.width.toString())\n        this.tabsWidth = Number.isNaN(width) ? 0 : width // 更新TabBar的总宽度\n      })\n      .barWidth('100%')\n      .barHeight(56)\n      .width('100%')\n      .height(296)\n      .backgroundColor('#F1F3F5')\n      .animationDuration(this.animationDuration)\n      .onChange((index: number) => {\n        this.currentIndex = index  // 更新当前选中的Tab索引\n      })\n      .onAnimationStart((index: number, targetIndex: number, event: TabsAnimationEvent) => {\n        this.currentIndex = targetIndex\n        let targetIndexInfo = this.getTextInfo(targetIndex)\n        this.startAnimateTo(this.animationDuration, targetIndexInfo.left, targetIndexInfo.width) // 开始动画\n      })\n      .onAnimationEnd((index: number,event: TabsAnimationEvent) => {\n        let currentIndicatorInfo = this.getCurrentIndicatorInfo(index,event)\n        this.startAnimateTo(0,currentIndicatorInfo.left,currentIndicatorInfo.width) // 动画结束\n      })\n      .onGestureSwipe((index: number,event: TabsAnimationEvent) => {\n        let currentIndicatorInfo = this.getCurrentIndicatorInfo(index,event)\n        this.currentIndex = currentIndicatorInfo.index\n        this.indicatorLeftMargin = currentIndicatorInfo.left\n        this.indicatorWidth = currentIndicatorInfo.width // 处理手势滑动\n      })\n\n      Column()\n        .height(2)\n        .width(this.indicatorWidth)\n        .margin({ left: this.indicatorLeftMargin, top:48})\n        .backgroundColor('#007DFF') // 底部指示器\n    }.width('100%')\n  }\n\n  private getTextInfo(index: number): Record<string, number> {\n    let rectangle = this.componentUtils.getRectangleById(index.toString())\n    return { 'left': px2vp(rectangle.windowOffset.x), 'width': px2vp(rectangle.size.width) } // 获取Tab文本的位置和宽度信息\n  }\n\n  private getCurrentIndicatorInfo(index: number, event: TabsAnimationEvent): Record<string, number> {\n    let nextIndex = index\n    if (index > 0 && event.currentOffset > 0) {\n      nextIndex--\n    } else if (index < 3 && event.currentOffset < 0) {\n      nextIndex++\n    }\n    let indexInfo = this.getTextInfo(index)\n    let nextIndexInfo = this.getTextInfo(nextIndex)\n    let swipeRatio = Math.abs(event.currentOffset / this.tabsWidth)\n    let currentIndex = swipeRatio > 0.5 ? nextIndex : index \n    let currentLeft = indexInfo.left + (nextIndexInfo.left - indexInfo.left) * swipeRatio\n    let currentWidth = indexInfo.width + (nextIndexInfo.width - indexInfo.width) * swipeRatio\n    return { 'index': currentIndex, 'left': currentLeft, 'width': currentWidth } // 获取当前指示器的位置和宽度信息\n  }\n\n  private startAnimateTo(duration: number, leftMargin: number, width: number) {\n    animateTo({\n      duration: duration, \n      curve: Curve.Linear, \n      iterations: 1, \n      playMode: PlayMode.Normal, \n      onFinish: () => {\n        console.info('play end')\n      }\n    }, () => {\n      this.indicatorLeftMargin = leftMargin\n      this.indicatorWidth = width // 执行动画\n    })\n  }\n}