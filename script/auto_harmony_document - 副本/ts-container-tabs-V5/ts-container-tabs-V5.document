Title: Tabs-容器组件-ArkTS组件-ArkUI（方舟UI框架）-应用框架

URL Source: https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-tabs-V5

Markdown Content:
通过页签进行内容视图切换的容器组件，每个页签对应一个内容视图。

说明

该组件从API Version 7开始支持。后续版本如有新增内容，则采用上角标单独标记该内容的起始版本。

该组件从API Version 11开始默认支持安全区避让特性(默认值为：expandSafeArea(\[SafeAreaType.SYSTEM\], \[SafeAreaEdge.BOTTOM\]))，开发者可以重写该属性覆盖默认行为，API Version 11之前的版本需配合[expandSafeArea](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-expand-safe-area-V5)属性实现安全区避让。

子组件
---

不支持自定义组件作为子组件， 仅可包含子组件[TabContent](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-tabcontent-V5)， 以及渲染控制类型[if/else](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-rendering-control-ifelse-V5)和[ForEach](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-rendering-control-foreach-V5), 并且if/else和ForEach下也仅支持TabContent, 不支持自定义组件。

说明

Tabs子组件的visibility属性设置为None，或者visibility属性设置为Hidden时，对应子组件不显示，但依然会在视窗内占位。

接口
--

Tabs(value?: {barPosition?: BarPosition, index?: number, controller?: TabsController})

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 参数类型 | 必填 | 参数描述 |
| --- | --- | --- | --- |
| barPosition | [BarPosition](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-tabs-V5#barposition%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E) | 否 | 设置Tabs的页签位置。
默认值：BarPosition.Start

 |
| index | number | 否 | 设置当前显示页签的索引。

默认值：0

**说明：**

设置为小于0的值时按默认值显示。

可选值为\[0, TabContent子节点数量-1\]。

直接修改index跳页时，切换动效不生效。 使用TabController的changeIndex时，默认生效切换动效，可以设置animationDuration为0关闭动画。

从API version 10开始，该参数支持[$$](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-two-way-sync-V5)双向绑定变量。

 |
| controller | [TabsController](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-tabs-V5#tabscontroller) | 否 | 设置Tabs控制器。 |

BarPosition枚举说明
---------------

Tabs页签位置枚举。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

| 名称 | 描述 |
| --- | --- |
| Start | vertical属性方法设置为true时，页签位于容器左侧；vertical属性方法设置为false时，页签位于容器顶部。 |
| End | vertical属性方法设置为true时，页签位于容器右侧；vertical属性方法设置为false时，页签位于容器底部。 |

### vertical

vertical(value: boolean)

设置是否为纵向Tab。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | boolean | 是 | 是否为纵向Tab。
默认值：false，横向Tabs，为true时纵向Tabs。

当横向Tabs设置height为auto时，Tabs组件高度自适应子组件高度，即为tabBar高度+divider线宽+TabContent高度+上下padding值+上下border宽度。

当纵向Tabs设置width为auto时，Tabs组件宽度自适应子组件宽度，即为tabBar宽度+divider线宽+TabContent宽度+左右padding值+左右border宽度。

尽量保持每一个页面中的子组件尺寸大小一致，避免滑动页面时出现页面切换动画跳动现象。

 |

### scrollable

scrollable(value: boolean)

设置是否可以通过滑动页面进行页面切换。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | boolean | 是 | 是否可以通过滑动页面进行页面切换。
默认值：true，可以通过滑动页面进行页面切换。为false时不可滑动切换页面。

 |

### barMode

barMode(value: BarMode, options?: ScrollableBarModeOptions)

设置TabBar布局模式。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### barMode10+

barMode(value: BarMode.Fixed)

设置TabBar布局模式为BarMode.Fixed。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | [BarMode.Fixed](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-tabs-V5#barmode%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E) | 是 | 所有TabBar会平均分配barWidth宽度（纵向时平均分配barHeight高度）。 |

### barMode10+

barMode(value: BarMode.Scrollable, options: ScrollableBarModeOptions)

设置TabBar布局模式为BarMode.Scrollable。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### barWidth

barWidth(value: Length)

设置TabBar的宽度值。设置为小于0或大于Tabs宽度值时，按默认值显示。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | [Length](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#length)8+ | 是 | TabBar的宽度值。
默认值：

未设置[SubTabBarStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-tabcontent-V5#subtabbarstyle9%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)和[BottomTabBarStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-tabcontent-V5#bottomtabbarstyle9%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)的TabBar且vertical属性为false时，默认值为Tabs的宽度。

未设置SubTabBarStyle和BottomTabBarStyle的TabBar且vertical属性为true时，默认值为56vp。

设置SubTabBarStyle样式且vertical属性为false时，默认值为Tabs的宽度。

设置SubTabBarStyle样式且vertical属性为true时，默认值为56vp。

设置BottomTabBarStyle样式且vertical属性为true时，默认值为96vp。

设置BottomTabBarStyle样式且vertical属性为false时，默认值为Tabs的宽度。

 |

### barHeight

barHeight(value: Length)

设置TabBar的高度值。设置为小于0或大于Tabs高度值时，按默认值显示。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | [Length](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#length)8+ | 是 | TabBar的高度值。
默认值：

未设置带样式的TabBar且vertical属性为false时，默认值为56vp。

未设置带样式的TabBar且vertical属性为true时，默认值为Tabs的高度。

设置[SubTabBarStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-tabcontent-V5#subtabbarstyle9%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)样式且vertical属性为false时，默认值为56vp。

设置SubTabBarStyle样式且vertical属性为true时，默认值为Tabs的高度。

设置[BottomTabBarStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-tabcontent-V5#bottomtabbarstyle9%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E)样式且vertical属性为true时，默认值为Tabs的高度。

设置BottomTabBarStyle样式且vertical属性为false时，默认值为56vp, 从API Version 12开始，默认值变更为52vp。

 |

### animationDuration

animationDuration(value: number)

设置点击TabBar页签和调用TabsController的changeIndex接口切换TabContent的动画时长。该参数不支持百分比设置。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | number | 是 | 点击TabBar页签和调用TabsController的changeIndex接口切换TabContent的动画时长。
默认值：

API version 10及以前，不设置该属性或设置为null时，默认值为0，即点击TabBar页签和调用TabsController的changeIndex接口切换TabContent无动画。设置为小于0或undefined时，默认值为300。

API version 11及以后，不设置该属性或设置为异常值，且设置TabBar为BottomTabBarStyle样式时，默认值为0。设置TabBar为其他样式时，默认值为300。

单位：ms

 |

### animationMode12+

animationMode(mode: Optional<AnimationMode>)

设置点击TabBar页签时切换TabContent的动画形式。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| mode | Optional<[AnimationMode](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-tabs-V5#animationmode12%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E)\> | 是 | 点击TabBar页签时切换TabContent的动画形式。
默认值：

默认值是AnimationMode.CONTENT\_FIRST，表示在点击TabBar切换TabContent时，先加载目标页内容，再开始切换动画。

 |

### barPosition9+

barPosition(value: BarPosition)

设置Tabs的页签位置。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | [BarPosition](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-tabs-V5#barposition%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E) | 是 | 设置Tabs的页签位置。
默认值：BarPosition.Start

 |

### divider10+

divider(value: DividerStyle | null)

设置区分TabBar和TabContent的分割线样式。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | [DividerStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-tabs-V5#dividerstyle10%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E) | null | 是 | 分割线样式，默认不显示分割线。
DividerStyle: 分割线的样式；

null: 不显示分割线。

 |

### fadingEdge10+

fadingEdge(value: boolean)

设置页签超过容器宽度时是否渐隐消失。建议配合barBackgroundColor属性一起使用，如果barBackgroundColor属性没有定义，会默认显示页签末端为白色的渐隐效果。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | boolean | 是 | 页签超过容器宽度时是否渐隐消失。
默认值：true

 |

### barOverlap10+

barOverlap(value: boolean)

设置TabBar是否背后变模糊并叠加在TabContent之上。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | boolean | 是 | TabBar是否背后变模糊并叠加在TabContent之上。
默认值：false

 |

### barBackgroundColor10+

barBackgroundColor(value: ResourceColor)

设置TabBar的背景颜色。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | [ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor) | 是 | TabBar的背景颜色。
默认值：Color.Transparent，透明

 |

### barBackgroundBlurStyle11+

barBackgroundBlurStyle(value: BlurStyle)

设置TabBar的背景模糊材质。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| value | [BlurStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-universal-attributes-background-V5#blurstyle9) | 是 | TabBar的背景模糊材质。
默认值：BlurStyle.NONE

 |

### barGridAlign10+

barGridAlign(value: BarGridColumnOptions)

以栅格化方式设置TabBar的可见区域。具体参见BarGridColumnOptions对象。仅水平模式下有效，[不适用于XS、XL和XXL设备](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-layout-development-grid-layout-V5#%E6%A0%85%E6%A0%BC%E7%B3%BB%E7%BB%9F%E6%96%AD%E7%82%B9)。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

### edgeEffect12+

edgeEffect(edgeEffect: Optional<EdgeEffect>)

设置边缘回弹效果。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| edgeEffect | Optional<[EdgeEffect](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-appendix-enums-V5#edgeeffect)\> | 是 | 边缘滑动效果。
默认值：EdgeEffect.Spring

 |

DividerStyle10+对象说明
-------------------

分割线样式对象。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

| 名称 | 参数类型 | 必填 | 描述 |
| --- | --- | --- | --- |
| strokeWidth | [Length](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#length) | 是 | 分割线的线宽（不支持百分比设置）。
默认值：0.0

单位：vp

 |
| color | [ResourceColor](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#resourcecolor) | 否 | 分割线的颜色。

默认值：#33182431

 |
| startMargin | [Length](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#length) | 否 | 分割线与侧边栏顶端的距离（不支持百分比设置）。

默认值：0.0

单位：vp

 |
| endMargin | [Length](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#length) | 否 | 分割线与侧边栏底端的距离（不支持百分比设置）。

默认值：0.0

单位：vp

 |

BarGridColumnOptions10+对象说明
---------------------------

TabBar栅格化方式设置的对象，包括栅格模式下的column边距和间隔，以及小、中、大屏下，页签占用的columns数量。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

| 名称 | 参数类型 | 必填 | 描述 |
| --- | --- | --- | --- |
| margin | [Dimension](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#dimension10) | 否 | 栅格模式下的column边距（不支持百分比设置）。
默认值:24.0

单位：vp

 |
| gutter | [Dimension](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#dimension10) | 否 | 栅格模式下的column间隔（不支持百分比设置）。

默认值:24.0

单位：vp

 |
| sm | number | 否 | 小屏下，页签占用的columns数量，必须是非负偶数。小屏为大于等于320vp但小于600vp。

默认值为-1，代表页签占用TabBar全部宽度。

 |
| md | number | 否 | 中屏下，页签占用的columns数量，必须是非负偶数。中屏为大于等于600vp但小于800vp。

默认值为-1，代表页签占用TabBar全部宽度。

 |
| lg | number | 否 | 大屏下，页签占用的columns数量，必须是非负偶数。大屏为大于等于840vp但小于1024vp。

默认值为-1，代表页签占用TabBar全部宽度。

 |

Scrollable模式下的TabBar的布局样式对象。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

| 名称 | 参数类型 | 必填 | 描述 |
| --- | --- | --- | --- |
| margin | [Dimension](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-types-V5#dimension10) | 否 | Scrollable模式下的TabBar的左右边距（不支持百分比设置）。
默认值：0.0

单位：vp

 |
| nonScrollableLayoutStyle | [LayoutStyle](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-tabs-V5#layoutstyle10%E6%9E%9A%E4%B8%BE%E8%AF%B4%E6%98%8E) | 否 | Scrollable模式下不滚动时的页签排布方式。

默认值：LayoutStyle.ALWAYS\_CENTER

 |

BarMode枚举说明
-----------

TabBar布局模式枚举。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

| 名称 | 值 | 描述 |
| --- | --- | --- |
| Scrollable | 0 | 每一个TabBar均使用实际布局宽度，超过总长度（横向Tabs的barWidth，纵向Tabs的barHeight）后可滑动。 |
| Fixed | 1 | 所有TabBar平均分配barWidth宽度（纵向时平均分配barHeight高度）。 |

AnimationMode12+枚举说明
--------------------

点击TabBar页签时切换TabContent的动画形式枚举。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

| 名称 | 值 | 描述 |
| --- | --- | --- |
| CONTENT\_FIRST | 0 | 先加载目标页内容，再开始切换动画 |
| ACTION\_FIRST | 1 | 先开始切换动画，再加载目标页内容；生效需要同时需要满足：Tabs的height、width没有设置成auto |
| NO\_ANIMATION | 2 | 关闭默认动画 |

LayoutStyle10+枚举说明
------------------

Scrollable模式下不滚动时的页签排布方式枚举。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

| 名称 | 值 | 描述 |
| --- | --- | --- |
| ALWAYS\_CENTER | 0 | 当页签内容超过TabBar宽度时，TabBar可滚动。
当页签内容不超过TabBar宽度时，TabBar不可滚动，页签紧凑居中。

 |
| ALWAYS\_AVERAGE\_SPLIT | 1 | 当页签内容超过TabBar宽度时，TabBar可滚动。

当页签内容不超过TabBar宽度时，TabBar不可滚动，且所有页签平均分配TabBar宽度。

仅水平模式下有效，否则视为LayoutStyle.ALWAYS\_CENTER。

 |
| SPACE\_BETWEEN\_OR\_CENTER | 2 | 当页签内容超过TabBar宽度时，TabBar可滚动。

当页签内容不超过TabBar宽度但超过TabBar宽度一半时，TabBar不可滚动，页签紧凑居中。

当页签内容不超过TabBar宽度一半时，TabBar不可滚动，保证页签居中排列在TabBar宽度一半，且间距相同。

 |

### onChange

onChange(event: (index: number) => void)

Tab页签切换后触发的事件。

触发该事件的条件：

1、TabContent支持滑动时，组件触发滑动时触发。

2、通过[控制器](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-tabs-V5#tabscontroller)API接口调用。

3、通过[状态变量](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-state-V5)构造的属性值进行修改。

4、通过页签处点击触发。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| index | number | 是 | 当前显示的index索引，索引从0开始计算。 |

### onTabBarClick10+

onTabBarClick(event: (index: number) => void)

Tab页签点击后触发的事件。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| index | number | 是 | 被点击的index索引，索引从0开始计算。 |

### onAnimationStart11+

onAnimationStart(handler: (index: number, targetIndex: number, event: TabsAnimationEvent) => void)

切换动画开始时触发该回调。参数为动画开始前的index值（不是最终结束动画的index值）。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| index | number | 是 | 当前显示元素的索引。 |
| targetIndex | number | 是 | 切换动画目标元素的索引。 |
| event | [TabsAnimationEvent](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-tabs-V5#tabsanimationevent11%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E) | 是 | 动画相关信息，包括主轴方向上当前显示元素和目标元素相对Tabs起始位置的位移，以及离手速度。 |

### onAnimationEnd11+

onAnimationEnd(handler: (index: number, event: TabsAnimationEvent) => void)

切换动画结束时触发该回调。当Tabs切换动效结束时触发，包括动画过程中手势中断。参数为动画结束后的index值。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| index | number | 是 | 当前显示元素的索引。 |
| event | [TabsAnimationEvent](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-tabs-V5#tabsanimationevent11%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E) | 是 | 动画相关信息，只返回主轴方向上当前显示元素相对于Tabs起始位置的位移。 |

### onGestureSwipe11+

onGestureSwipe(handler: (index: number, event: TabsAnimationEvent) => void)

在页面跟手滑动过程中，逐帧触发该回调。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| index | number | 是 | 当前显示元素的索引。 |
| event | [TabsAnimationEvent](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-tabs-V5#tabsanimationevent11%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E) | 是 | 动画相关信息，只返回主轴方向上当前显示元素相对于Tabs起始位置的位移。 |

### customContentTransition11+

customContentTransition(delegate: (from: number, to: number) => TabContentAnimatedTransition | undefined)

自定义Tabs页面切换动画。

使用说明：

1、当使用自定义切换动画时，Tabs组件自带的默认切换动画会被禁用，同时，页面也无法跟手滑动。

2、当设置为undefined时，表示不使用自定义切换动画，仍然使用组件自带的默认切换动画。

3、当前自定义切换动画不支持打断。

4、目前自定义切换动画只支持两种场景触发：点击页签和调用TabsController.changeIndex()接口。

5、当使用自定义切换动画时，Tabs组件支持的事件中，除了onGestureSwipe，其他事件均支持。

6、onChange和onAnimationEnd事件的触发时机需要特殊说明：如果在第一次自定义动画执行过程中，触发了第二次自定义动画，那么在开始第二次自定义动画时，就会触发第一次自定义动画的onChange和onAnimationEnd事件。

7、当使用自定义动画时，参与动画的页面布局方式会改为Stack布局。如果开发者未主动设置相关页面的zIndex属性，那么所有页面的zIndex值是一样的，页面的渲染层级会按照在组件树上的顺序（即页面的index值顺序）确定。因此，开发者需要主动修改页面的zIndex属性，来控制页面的渲染层级。

**卡片能力：** 从API version 11开始，该接口支持在ArkTS卡片中使用。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| from | number | 是 | 动画开始时，当前页面的index值。 |
| to | number | 是 | 动画开始时，目标页面的index值。 |

**返回值：**

### onContentWillChange12+

onContentWillChange(handler: (currentIndex: number, comingIndex: number) => boolean)

自定义Tabs页面切换拦截事件能力，新页面即将显示时触发该回调。

触发该回调的条件：

1、TabContent支持滑动时，滑动组件切换新页面时触发。

2、通过TabsController.changeIndex接口切换新页面时触发。

3、通过动态修改index属性值切换新页面时触发。

4、通过点击TabBar页签切换新页面时触发。

5、TabBar页签获焦后，通过键盘左右方向键等切换新页面时触发。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 类型 | 必填 | 说明 |
| --- | --- | --- | --- |
| currentIndex | number | 是 | 当前显示页面的index索引，索引从0开始计算。 |
| comingIndex | number | 是 | 将要显示的新页面的index索引。 |

**返回值：**

| 类型 | 说明 |
| --- | --- |
| boolean | 当回调函数handler的返回值为true时，Tabs可以切换到新页面。
当回调函数handler的返回值为false时，Tabs无法切换到新页面，仍然显示原来页面内容。

 |

TabsAnimationEvent11+对象说明
-------------------------

Tabs组件动画相关信息集合。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

| 名称 | 类型 | 描述 |
| --- | --- | --- |
| currentOffset | number | Tabs当前显示元素在主轴方向上，相对于Tabs起始位置的位移。单位VP，默认值为0。 |
| targetOffset | number | Tabs动画目标元素在主轴方向上，相对于Tabs起始位置的位移。单位VP，默认值为0。 |
| velocity | number | Tabs离手动画开始时的离手速度。单位VP/S，默认值为0。 |

TabContentAnimatedTransition11+对象说明
-----------------------------------

Tabs自定义切换动画相关信息。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

TabContentTransitionProxy11+对象说明
--------------------------------

Tabs自定义切换动画执行过程中，返回给开发者的proxy对象。开发者可通过该对象获取自定义动画的起始和目标页面信息，同时，也可以通过调用该对象的finishTransition接口通知Tabs组件自定义动画已结束。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### 属性

| 名称 | 类型 | 描述 |
| --- | --- | --- |
| from | number | 自定义动画起始页面对应的index值。 |
| to | number | 自定义动画目标页面对应的index值。 |

### finishTransition

finishTransition()

通知Tabs组件，此页面的自定义动画已结束。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

TabsController
--------------

Tabs组件的控制器，用于控制Tabs组件进行页签切换。不支持一个TabsController控制多个Tabs组件。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### 导入对象

1.  let controller: TabsController = new TabsController()

### constructor

constructor()

TabsController的构造函数。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

### changeIndex

changeIndex(value: number): void

控制Tabs切换到指定页签。

**元服务API：** 从API version 11开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 参数类型 | 必填 | 参数描述 |
| --- | --- | --- | --- |
| value | number | 是 | 页签在Tabs里的索引值，索引值从0开始。
**说明：**

设置小于0或大于最大数量的值时，取默认值0。

 |

### preloadItems12+

preloadItems(indices: Optional<Array<number>>): Promise<void>

控制Tabs预加载指定子节点。调用该接口后会一次性加载所有指定的子节点，因此为了性能考虑，建议分批加载子节点。

**元服务API：** 从API version 12开始，该接口支持在元服务中使用。

**系统能力：** SystemCapability.ArkUI.ArkUI.Full

**参数：**

| 参数名 | 参数类型 | 必填 | 参数描述 |
| --- | --- | --- | --- |
| indices | Optional<Array<number>> | 是 | 需预加载的子节点的下标数组。
默认值：空数组。

 |

**返回值：**

| 类型 | 说明 |
| --- | --- |
| Promise<void> | 预加载完成后触发的回调。 |

**错误码：**

以下错误码的详细介绍请参见[通用错误码](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/errorcode-universal-V5)错误码。

| 错误码ID | 错误信息 |
| --- | --- |
| 401 | Parameter invalid. Possible causes: 1. The type of the parameter is not Array<number>; 2. The parameter is an empty array; 3. The parameter contains an invalid index. |

示例
--

### 示例1

本示例通过onChange实现切换时自定义tabBar和TabContent的联动。

2.  @Entry
3.  @Component
4.  struct TabsExample {
5.    @State fontColor: string = '#182431'
6.    @State selectedFontColor: string = '#007DFF'
7.    @State currentIndex: number = 0
8.    private controller: TabsController = new TabsController()

10.    @Builder tabBuilder(index: number, name: string) {
11.      Column() {
12.        Text(name)
13.          .fontColor(this.currentIndex === index ? this.selectedFontColor : this.fontColor)
14.          .fontSize(16)
15.          .fontWeight(this.currentIndex === index ? 500 : 400)
16.          .lineHeight(22)
17.          .margin({ top: 17, bottom: 7 })
18.        Divider()
19.          .strokeWidth(2)
20.          .color('#007DFF')
21.          .opacity(this.currentIndex === index ? 1 : 0)
22.      }.width('100%')
23.    }

25.    build() {
26.      Column() {
27.        Tabs({ barPosition: BarPosition.Start, index: this.currentIndex, controller: this.controller }) {
28.          TabContent() {
29.            Column().width('100%').height('100%').backgroundColor('#00CB87')
30.          }.tabBar(this.tabBuilder(0, 'green'))

32.          TabContent() {
33.            Column().width('100%').height('100%').backgroundColor('#007DFF')
34.          }.tabBar(this.tabBuilder(1, 'blue'))

36.          TabContent() {
37.            Column().width('100%').height('100%').backgroundColor('#FFBF00')
38.          }.tabBar(this.tabBuilder(2, 'yellow'))

40.          TabContent() {
41.            Column().width('100%').height('100%').backgroundColor('#E67C92')
42.          }.tabBar(this.tabBuilder(3, 'pink'))
43.        }
44.        .vertical(false)
45.        .barMode(BarMode.Fixed)
46.        .barWidth(360)
47.        .barHeight(56)
48.        .animationDuration(400)
49.        .onChange((index: number) => {
50.          this.currentIndex = index
51.        })
52.        .width(360)
53.        .height(296)
54.        .margin({ top: 52 })
55.        .backgroundColor('#F1F3F5')
56.      }.width('100%')
57.    }
58.  }

![Image 1](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240816151305.89467137475355160975212371426177:50001231000000:2800:4AFEA421AC5A02EE611782FFFF9AFF947F8E18C9B5F79E70C7F28120C73F027C.gif?needInitFileName=true?needInitFileName=true)

### 示例2

本示例通过divider实现了分割线各种属性的展示。

2.  @Entry
3.  @Component
4.  struct TabsDivider1 {
5.    private controller1: TabsController = new TabsController()
6.    @State dividerColor: string = 'red'
7.    @State strokeWidth: number = 2
8.    @State startMargin: number = 0
9.    @State endMargin: number = 0
10.    @State nullFlag: boolean = false

12.    build() {
13.      Column() {
14.        Tabs({ controller: this.controller1 }) {
15.          TabContent() {
16.            Column().width('100%').height('100%').backgroundColor(Color.Pink)
17.          }.tabBar('pink')

19.          TabContent() {
20.            Column().width('100%').height('100%').backgroundColor(Color.Yellow)
21.          }.tabBar('yellow')

23.          TabContent() {
24.            Column().width('100%').height('100%').backgroundColor(Color.Blue)
25.          }.tabBar('blue')

27.          TabContent() {
28.            Column().width('100%').height('100%').backgroundColor(Color.Green)
29.          }.tabBar('green')

31.          TabContent() {
32.            Column().width('100%').height('100%').backgroundColor(Color.Red)
33.          }.tabBar('red')
34.        }
35.        .vertical(true)
36.        .scrollable(true)
37.        .barMode(BarMode.Fixed)
38.        .barWidth(70)
39.        .barHeight(200)
40.        .animationDuration(400)
41.        .onChange((index: number) => {
42.          console.info(index.toString())
43.        })
44.        .height('200vp')
45.        .margin({ bottom: '12vp' })
46.        .divider(this.nullFlag ? null : {
47.          strokeWidth: this.strokeWidth,
48.          color: this.dividerColor,
49.          startMargin: this.startMargin,
50.          endMargin: this.endMargin
51.        })

53.        Button('常规Divider').width('100%').margin({ bottom: '12vp' })
54.          .onClick(() => {
55.            this.nullFlag = false;
56.            this.strokeWidth = 2;
57.            this.dividerColor = 'red';
58.            this.startMargin = 0;
59.            this.endMargin = 0;
60.          })
61.        Button('空Divider').width('100%').margin({ bottom: '12vp' })
62.          .onClick(() => {
63.            this.nullFlag = true
64.          })
65.        Button('颜色变为蓝色').width('100%').margin({ bottom: '12vp' })
66.          .onClick(() => {
67.            this.dividerColor = 'blue'
68.          })
69.        Button('宽度增加').width('100%').margin({ bottom: '12vp' })
70.          .onClick(() => {
71.            this.strokeWidth += 2
72.          })
73.        Button('宽度减小').width('100%').margin({ bottom: '12vp' })
74.          .onClick(() => {
75.            if (this.strokeWidth > 2) {
76.              this.strokeWidth -= 2
77.            }
78.          })
79.        Button('上边距增加').width('100%').margin({ bottom: '12vp' })
80.          .onClick(() => {
81.            this.startMargin += 2
82.          })
83.        Button('上边距减少').width('100%').margin({ bottom: '12vp' })
84.          .onClick(() => {
85.            if (this.startMargin > 2) {
86.              this.startMargin -= 2
87.            }
88.          })
89.        Button('下边距增加').width('100%').margin({ bottom: '12vp' })
90.          .onClick(() => {
91.            this.endMargin += 2
92.          })
93.        Button('下边距减少').width('100%').margin({ bottom: '12vp' })
94.          .onClick(() => {
95.            if (this.endMargin > 2) {
96.              this.endMargin -= 2
97.            }
98.          })
99.      }.padding({ top: '24vp', left: '24vp', right: '24vp' })
100.    }
101.  }

![Image 2](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240816151305.88141537660440745183160851013989:50001231000000:2800:AB4817EC175913925B7491CB8C02A6C7E397C7E5E777B549A74FE5AADEC23A2B.gif?needInitFileName=true?needInitFileName=true)

### 示例3

本示例通过fadingEdge实现了切换子页签渐隐和不渐隐。

2.  @Entry
3.  @Component
4.  struct TabsOpaque {
5.    @State message: string = 'Hello World'
6.    private controller: TabsController = new TabsController()
7.    private controller1: TabsController = new TabsController()
8.    @State selfFadingFade: boolean = true;

10.    build() {
11.      Column() {
12.        Button('子页签设置渐隐').width('100%').margin({ bottom: '12vp' })
13.          .onClick((event?: ClickEvent) => {
14.            this.selfFadingFade = true;
15.          })
16.        Button('子页签设置不渐隐').width('100%').margin({ bottom: '12vp' })
17.          .onClick((event?: ClickEvent) => {
18.            this.selfFadingFade = false;
19.          })
20.        Tabs({ barPosition: BarPosition.End, controller: this.controller }) {
21.          TabContent() {
22.            Column().width('100%').height('100%').backgroundColor(Color.Pink)
23.          }.tabBar('pink')

25.          TabContent() {
26.            Column().width('100%').height('100%').backgroundColor(Color.Yellow)
27.          }.tabBar('yellow')

29.          TabContent() {
30.            Column().width('100%').height('100%').backgroundColor(Color.Blue)
31.          }.tabBar('blue')

33.          TabContent() {
34.            Column().width('100%').height('100%').backgroundColor(Color.Green)
35.          }.tabBar('green')

37.          TabContent() {
38.            Column().width('100%').height('100%').backgroundColor(Color.Green)
39.          }.tabBar('green')

41.          TabContent() {
42.            Column().width('100%').height('100%').backgroundColor(Color.Green)
43.          }.tabBar('green')

45.          TabContent() {
46.            Column().width('100%').height('100%').backgroundColor(Color.Green)
47.          }.tabBar('green')

49.          TabContent() {
50.            Column().width('100%').height('100%').backgroundColor(Color.Green)
51.          }.tabBar('green')
52.        }
53.        .vertical(false)
54.        .scrollable(true)
55.        .barMode(BarMode.Scrollable)
56.        .barHeight(80)
57.        .animationDuration(400)
58.        .onChange((index: number) => {
59.          console.info(index.toString())
60.        })
61.        .fadingEdge(this.selfFadingFade)
62.        .height('30%')
63.        .width('100%')

65.        Tabs({ barPosition: BarPosition.Start, controller: this.controller1 }) {
66.          TabContent() {
67.            Column().width('100%').height('100%').backgroundColor(Color.Pink)
68.          }.tabBar('pink')

70.          TabContent() {
71.            Column().width('100%').height('100%').backgroundColor(Color.Yellow)
72.          }.tabBar('yellow')

74.          TabContent() {
75.            Column().width('100%').height('100%').backgroundColor(Color.Blue)
76.          }.tabBar('blue')

78.          TabContent() {
79.            Column().width('100%').height('100%').backgroundColor(Color.Green)
80.          }.tabBar('green')

82.          TabContent() {
83.            Column().width('100%').height('100%').backgroundColor(Color.Green)
84.          }.tabBar('green')

86.          TabContent() {
87.            Column().width('100%').height('100%').backgroundColor(Color.Green)
88.          }.tabBar('green')
89.        }
90.        .vertical(true)
91.        .scrollable(true)
92.        .barMode(BarMode.Scrollable)
93.        .barHeight(200)
94.        .barWidth(80)
95.        .animationDuration(400)
96.        .onChange((index: number) => {
97.          console.info(index.toString())
98.        })
99.        .fadingEdge(this.selfFadingFade)
100.        .height('30%')
101.        .width('100%')
102.      }
103.      .padding({ top: '24vp', left: '24vp', right: '24vp' })
104.    }
105.  }

![Image 3](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240816151305.26130430107297343708426755527269:50001231000000:2800:838E9C5CB8ED18ED916BD2CBC4461BE1DC9E8808487DB6D18A6DAC2152399241.gif?needInitFileName=true?needInitFileName=true)

### 示例4

本示例通过barOverlap实现了TabBar是否背后变模糊并叠加在TabContent之上。

2.  @Entry
3.  @Component
4.  struct barBackgroundColorTest {
5.    private controller: TabsController = new TabsController()
6.    @State barOverlap: boolean = true;
7.    @State barBackgroundColor: string = '#88888888';

9.    build() {
10.      Column() {
11.        Button("barOverlap变化").width('100%').margin({ bottom: '12vp' })
12.          .onClick((event?: ClickEvent) => {
13.            if (this.barOverlap) {
14.              this.barOverlap = false;
15.            } else {
16.              this.barOverlap = true;
17.            }
18.          })

20.        Tabs({ barPosition: BarPosition.Start, index: 0, controller: this.controller }) {
21.          TabContent() {
22.            Column() {
23.              Text(\`barOverlap ${this.barOverlap}\`).fontSize(16).margin({ top: this.barOverlap ? '56vp' : 0 })
24.              Text(\`barBackgroundColor ${this.barBackgroundColor}\`).fontSize(16)
25.            }.width('100%').width('100%').height('100%')
26.            .backgroundColor(Color.Pink)
27.          }
28.          .tabBar(new BottomTabBarStyle($r('sys.media.ohos\_app\_icon'), "1"))

30.          TabContent() {
31.            Column() {
32.              Text(\`barOverlap ${this.barOverlap}\`).fontSize(16).margin({ top: this.barOverlap ? '56vp' : 0 })
33.              Text(\`barBackgroundColor ${this.barBackgroundColor}\`).fontSize(16)
34.            }.width('100%').width('100%').height('100%')
35.            .backgroundColor(Color.Yellow)
36.          }
37.          .tabBar(new BottomTabBarStyle($r('sys.media.ohos\_app\_icon'), "2"))

39.          TabContent() {
40.            Column() {
41.              Text(\`barOverlap ${this.barOverlap}\`).fontSize(16).margin({ top: this.barOverlap ? '56vp' : 0 })
42.              Text(\`barBackgroundColor ${this.barBackgroundColor}\`).fontSize(16)
43.            }.width('100%').width('100%').height('100%')
44.            .backgroundColor(Color.Green)
45.          }
46.          .tabBar(new BottomTabBarStyle($r('sys.media.ohos\_app\_icon'), "3"))
47.        }
48.        .vertical(false)
49.        .barMode(BarMode.Fixed)
50.        .height('60%')
51.        .barOverlap(this.barOverlap)
52.        .scrollable(true)
53.        .animationDuration(10)
54.        .barBackgroundColor(this.barBackgroundColor)
55.      }
56.      .height(500)
57.      .padding({ top: '24vp', left: '24vp', right: '24vp' })
58.    }
59.  }

![Image 4](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240816151305.29378251192902092346362579569469:50001231000000:2800:0C01A942F53DFA86843497EB44E1C8C1AD3480817598F38A5570FE77B7C21303.gif?needInitFileName=true?needInitFileName=true)

### 示例5

本示例通过barGridAlign实现了以栅格化方式设置TabBar的可见区域。

2.  @Entry
3.  @Component
4.  struct TabsExample5 {
5.    private controller: TabsController = new TabsController()
6.    @State gridMargin: number = 10
7.    @State gridGutter: number = 10
8.    @State sm: number = -2
9.    @State clickedContent: string = "";

11.    build() {
12.      Column() {
13.        Row() {
14.          Button("gridMargin+10 " + this.gridMargin)
15.            .width('47%')
16.            .height(50)
17.            .margin({ top: 5 })
18.            .onClick((event?: ClickEvent) => {
19.              this.gridMargin += 10
20.            })
21.            .margin({ right: '6%', bottom: '12vp' })
22.          Button("gridMargin-10 " + this.gridMargin)
23.            .width('47%')
24.            .height(50)
25.            .margin({ top: 5 })
26.            .onClick((event?: ClickEvent) => {
27.              this.gridMargin -= 10
28.            })
29.            .margin({ bottom: '12vp' })
30.        }

32.        Row() {
33.          Button("gridGutter+10 " + this.gridGutter)
34.            .width('47%')
35.            .height(50)
36.            .margin({ top: 5 })
37.            .onClick((event?: ClickEvent) => {
38.              this.gridGutter += 10
39.            })
40.            .margin({ right: '6%', bottom: '12vp' })
41.          Button("gridGutter-10 " + this.gridGutter)
42.            .width('47%')
43.            .height(50)
44.            .margin({ top: 5 })
45.            .onClick((event?: ClickEvent) => {
46.              this.gridGutter -= 10
47.            })
48.            .margin({ bottom: '12vp' })
49.        }

51.        Row() {
52.          Button("sm+2 " + this.sm)
53.            .width('47%')
54.            .height(50)
55.            .margin({ top: 5 })
56.            .onClick((event?: ClickEvent) => {
57.              this.sm += 2
58.            })
59.            .margin({ right: '6%' })
60.          Button("sm-2 " + this.sm).width('47%').height(50).margin({ top: 5 })
61.            .onClick((event?: ClickEvent) => {
62.              this.sm -= 2
63.            })
64.        }

66.        Text("点击内容:" + this.clickedContent).width('100%').height(200).margin({ top: 5 })

69.        Tabs({ barPosition: BarPosition.End, controller: this.controller }) {
70.          TabContent() {
71.            Column().width('100%').height('100%').backgroundColor(Color.Pink)
72.          }.tabBar(BottomTabBarStyle.of($r("sys.media.ohos\_app\_icon"), "1"))

74.          TabContent() {
75.            Column().width('100%').height('100%').backgroundColor(Color.Green)
76.          }.tabBar(BottomTabBarStyle.of($r("sys.media.ohos\_app\_icon"), "2"))

78.          TabContent() {
79.            Column().width('100%').height('100%').backgroundColor(Color.Blue)
80.          }.tabBar(BottomTabBarStyle.of($r("sys.media.ohos\_app\_icon"), "3"))
81.        }
82.        .width('350vp')
83.        .animationDuration(300)
84.        .height('60%')
85.        .barGridAlign({ sm: this.sm, margin: this.gridMargin, gutter: this.gridGutter })
86.        .backgroundColor(0xf1f3f5)
87.        .onTabBarClick((index: number) => {
88.          this.clickedContent += "now index " + index + " is clicked\\n";
89.        })
90.      }
91.      .width('100%')
92.      .height(500)
93.      .margin({ top: 5 })
94.      .padding('10vp')
95.    }
96.  }

![Image 5](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240816151305.54255594335175980656915918235758:50001231000000:2800:6CF16FC77340E68E29FC3DC431399B9D8DC3530E5C74648EE71B3322E4586E90.gif?needInitFileName=true?needInitFileName=true)

### 示例6

本示例实现了barMode的ScrollableBarModeOptions参数，该参数仅在Scrollable模式下有效。

2.  @Entry
3.  @Component
4.  struct TabsExample6 {
5.    private controller: TabsController = new TabsController()
6.    @State scrollMargin: number = 0
7.    @State layoutStyle: LayoutStyle = LayoutStyle.ALWAYS\_CENTER
8.    @State text: string = "文本"

10.    build() {
11.      Column() {
12.        Row() {
13.          Button("scrollMargin+10 " + this.scrollMargin)
14.            .width('47%')
15.            .height(50)
16.            .margin({ top: 5 })
17.            .onClick((event?: ClickEvent) => {
18.              this.scrollMargin += 10
19.            })
20.            .margin({ right: '6%', bottom: '12vp' })
21.          Button("scrollMargin-10 " + this.scrollMargin)
22.            .width('47%')
23.            .height(50)
24.            .margin({ top: 5 })
25.            .onClick((event?: ClickEvent) => {
26.              this.scrollMargin -= 10
27.            })
28.            .margin({ bottom: '12vp' })
29.        }

31.        Row() {
32.          Button("文本增加 ")
33.            .width('47%')
34.            .height(50)
35.            .margin({ top: 5 })
36.            .onClick((event?: ClickEvent) => {
37.              this.text += '文本增加'
38.            })
39.            .margin({ right: '6%', bottom: '12vp' })
40.          Button("文本重置")
41.            .width('47%')
42.            .height(50)
43.            .margin({ top: 5 })
44.            .onClick((event?: ClickEvent) => {
45.              this.text = "文本"
46.            })
47.            .margin({ bottom: '12vp' })
48.        }

50.        Row() {
51.          Button("layoutStyle.ALWAYS\_CENTER")
52.            .width('100%')
53.            .height(50)
54.            .margin({ top: 5 })
55.            .fontSize(15)
56.            .onClick((event?: ClickEvent) => {
57.              this.layoutStyle = LayoutStyle.ALWAYS\_CENTER;
58.            })
59.            .margin({ bottom: '12vp' })
60.        }

62.        Row() {
63.          Button("layoutStyle.ALWAYS\_AVERAGE\_SPLIT")
64.            .width('100%')
65.            .height(50)
66.            .margin({ top: 5 })
67.            .fontSize(15)
68.            .onClick((event?: ClickEvent) => {
69.              this.layoutStyle = LayoutStyle.ALWAYS\_AVERAGE\_SPLIT;
70.            })
71.            .margin({ bottom: '12vp' })
72.        }

74.        Row() {
75.          Button("layoutStyle.SPACE\_BETWEEN\_OR\_CENTER")
76.            .width('100%')
77.            .height(50)
78.            .margin({ top: 5 })
79.            .fontSize(15)
80.            .onClick((event?: ClickEvent) => {
81.              this.layoutStyle = LayoutStyle.SPACE\_BETWEEN\_OR\_CENTER;
82.            })
83.            .margin({ bottom: '12vp' })
84.        }

86.        Tabs({ barPosition: BarPosition.End, controller: this.controller }) {
87.          TabContent() {
88.            Column().width('100%').height('100%').backgroundColor(Color.Pink)
89.          }.tabBar(SubTabBarStyle.of(this.text))

91.          TabContent() {
92.            Column().width('100%').height('100%').backgroundColor(Color.Green)
93.          }.tabBar(SubTabBarStyle.of(this.text))

95.          TabContent() {
96.            Column().width('100%').height('100%').backgroundColor(Color.Blue)
97.          }.tabBar(SubTabBarStyle.of(this.text))
98.        }
99.        .animationDuration(300)
100.        .height('60%')
101.        .backgroundColor(0xf1f3f5)
102.        .barMode(BarMode.Scrollable, { margin: this.scrollMargin, nonScrollableLayoutStyle: this.layoutStyle })
103.      }
104.      .width('100%')
105.      .height(500)
106.      .margin({ top: 5 })
107.      .padding('24vp')
108.    }
109.  }

![Image 6](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240816151305.24870505536253120707536566850008:50001231000000:2800:470250CB1DB10EB0408F3C27A8632AE48BF47F888878E1DC8D6B96D24653A177.gif?needInitFileName=true?needInitFileName=true)

### 示例7

本示例通过customContentTransition实现了自定义Tabs页面的切换动画。

2.  interface itemType {
3.    text: string,
4.    backgroundColor: Color
5.  }

7.  @Entry
8.  @Component
9.  struct TabsCustomAnimationExample {
10.    @State data: itemType\[\] = \[
11.      {
12.        text: 'Red',
13.        backgroundColor: Color.Red
14.      },
15.      {
16.        text: 'Yellow',
17.        backgroundColor: Color.Yellow
18.      },
19.      {
20.        text: 'Blue',
21.        backgroundColor: Color.Blue
22.      }\]
23.    @State opacityList: number\[\] = \[\]
24.    @State scaleList: number\[\] = \[\]

26.    private durationList: number\[\] = \[\]
27.    private timeoutList: number\[\] = \[\]
28.    private customContentTransition: (from: number, to: number) => TabContentAnimatedTransition = (from: number, to: number) => {
29.      let tabContentAnimatedTransition = {
30.        timeout: this.timeoutList\[from\],
31.        transition: (proxy: TabContentTransitionProxy) => {
32.          this.scaleList\[from\] = 1.0
33.          this.scaleList\[to\] = 0.5
34.          this.opacityList\[from\] = 1.0
35.          this.opacityList\[to\] = 0.5
36.          animateTo({
37.            duration: this.durationList\[from\],
38.            onFinish: () => {
39.              proxy.finishTransition()
40.            }
41.          }, () => {
42.            this.scaleList\[from\] = 0.5
43.            this.scaleList\[to\] = 1.0
44.            this.opacityList\[from\] = 0.5
45.            this.opacityList\[to\] = 1.0
46.          })
47.        }
48.      } as TabContentAnimatedTransition
49.      return tabContentAnimatedTransition
50.    }

52.    aboutToAppear(): void {
53.      let duration = 1000
54.      let timeout = 1000
55.      for (let i = 1; i <= this.data.length; i++) {
56.        this.opacityList.push(1.0)
57.        this.scaleList.push(1.0)
58.        this.durationList.push(duration \* i)
59.        this.timeoutList.push(timeout \* i)
60.      }
61.    }

63.    build() {
64.      Column() {
65.        Tabs() {
66.          ForEach(this.data, (item: itemType, index: number) => {
67.            TabContent() {}
68.            .tabBar(item.text)
69.            .backgroundColor(item.backgroundColor)

71.            .opacity(this.opacityList\[index\])
72.            .scale({ x: this.scaleList\[index\], y: this.scaleList\[index\] })
73.          })
74.        }
75.        .backgroundColor(0xf1f3f5)
76.        .width('100%')
77.        .height(500)
78.        .customContentTransition(this.customContentTransition)
79.      }
80.    }
81.  }

![Image 7](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240816151305.29428213123754079864818369715546:50001231000000:2800:B7307930B6AEC70B5F8995F9E88C4B19ADE667689801BD68BB12866F10117412.gif?needInitFileName=true?needInitFileName=true)

### 示例8

本示例通过onContentWillChange实现了自定义页面手势滑动切换拦截。

2.  @Entry
3.  @Component
4.  struct TabsExample {
5.    @State currentIndex: number = 2
6.    private controller: TabsController = new TabsController()
7.    @Builder tabBuilder(title: string,targetIndex: number) {
8.      Column(){
9.        Text(title).fontColor(this.currentIndex === targetIndex ? '#1698CE' : '#6B6B6B')
10.      }.width('100%')
11.      .height(50)
12.      .justifyContent(FlexAlign.Center)
13.    }
14.    build() {
15.      Column() {
16.        Tabs({ barPosition: BarPosition.End, controller: this.controller, index: this.currentIndex }) {
17.          TabContent() {
18.            Column(){
19.              Text('首页的内容')
20.            }.width('100%').height('100%').backgroundColor('#00CB87').justifyContent(FlexAlign.Center)
21.          }.tabBar(this.tabBuilder('首页',0))

23.          TabContent() {
24.            Column(){
25.              Text('发现的内容')
26.            }.width('100%').height('100%').backgroundColor('#007DFF').justifyContent(FlexAlign.Center)
27.          }.tabBar(this.tabBuilder('发现',1))

29.          TabContent() {
30.            Column(){
31.              Text('推荐的内容')
32.            }.width('100%').height('100%').backgroundColor('#FFBF00').justifyContent(FlexAlign.Center)
33.          }.tabBar(this.tabBuilder('推荐',2))

35.          TabContent() {
36.            Column(){
37.              Text('我的内容')
38.            }.width('100%').height('100%').backgroundColor('#E67C92').justifyContent(FlexAlign.Center)
39.          }.tabBar(this.tabBuilder('我的',3))
40.        }
41.        .vertical(false)
42.        .barMode(BarMode.Fixed)
43.        .barWidth(360)
44.        .barHeight(60)
45.        .animationDuration(0)
46.        .onChange((index: number) => {
47.          this.currentIndex = index
48.        })
49.        .width(360)
50.        .height(600)
51.        .backgroundColor('#F1F3F5')
52.        .scrollable(true)
53.        .onContentWillChange((currentIndex, comingIndex) => {
54.          if (comingIndex == 2) {
55.            return false
56.          }
57.          return true
58.        })

60.        Button('动态修改index').width('50%').margin({ top: 20 })
61.          .onClick(()=>{
62.            this.currentIndex = (this.currentIndex + 1) % 4
63.          })

65.        Button('changeIndex').width('50%').margin({ top: 20 })
66.          .onClick(()=>{
67.            this.currentIndex = (this.currentIndex + 1) % 4
68.            this.controller.changeIndex(this.currentIndex)
69.          })
70.      }.width('100%')
71.    }
72.  }

![Image 8](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240816151305.61397092072339333493951978967035:50001231000000:2800:89A7A2F973EE0D8D0B7A06FFC620EEAF2A90BA62A38A4D97368716F4E05B4297.gif?needInitFileName=true?needInitFileName=true)

### 示例9

本示例通过onChange、onAnimationStart、onAnimationEnd、onGestureSwipe等接口实现了自定义TabBar的切换动画。

2.  import { ComponentUtils } from '@kit.ArkUI'

4.  @Entry
5.  @Component
6.  struct TabsExample {
7.    @State currentIndex: number = 0
8.    @State animationDuration: number = 300
9.    @State indicatorLeftMargin: number = 0
10.    @State indicatorWidth: number = 0
11.    private tabsWidth: number = 0
12.    private componentUtils: ComponentUtils = this.getUIContext().getComponentUtils()

14.    @Builder
15.    tabBuilder(index: number, name: string) {
16.      Column() {
17.        Text(name)
18.          .fontSize(16)
19.          .fontColor(this.currentIndex === index ? '#007DFF' : '#182431')
20.          .fontWeight(this.currentIndex === index ? 500 : 400)
21.          .id(index.toString())
22.          .onAreaChange((oldValue: Area,newValue: Area) => {
23.            if (this.currentIndex === index && (this.indicatorLeftMargin === 0 || this.indicatorWidth === 0)){
24.              if (newValue.position.x != undefined) {
25.                let positionX = Number.parseFloat(newValue.position.x.toString())
26.                this.indicatorLeftMargin = Number.isNaN(positionX) ? 0 : positionX
27.              }
28.              let width = Number.parseFloat(newValue.width.toString())
29.              this.indicatorWidth = Number.isNaN(width) ? 0 : width
30.            }
31.          })
32.      }.width('100%')
33.    }

35.    build() {
36.      Stack({ alignContent: Alignment.TopStart }) {
37.        Tabs({ barPosition: BarPosition.Start }) {
38.          TabContent() {
39.            Column().width('100%').height('100%').backgroundColor('#00CB87')
40.          }.tabBar(this.tabBuilder(0, 'green'))

42.          TabContent() {
43.            Column().width('100%').height('100%').backgroundColor('#007DFF')
44.          }.tabBar(this.tabBuilder(1, 'blue'))

46.          TabContent() {
47.            Column().width('100%').height('100%').backgroundColor('#FFBF00')
48.          }.tabBar(this.tabBuilder(2, 'yellow'))

50.          TabContent() {
51.            Column().width('100%').height('100%').backgroundColor('#E67C92')
52.          }.tabBar(this.tabBuilder(3, 'pink'))
53.        }
54.        .onAreaChange((oldValue: Area,newValue: Area)=> {
55.          let width = Number.parseFloat(newValue.width.toString())
56.          this.tabsWidth = Number.isNaN(width) ? 0 : width
57.        })
58.        .barWidth('100%')
59.        .barHeight(56)
60.        .width('100%')
61.        .height(296)
62.        .backgroundColor('#F1F3F5')
63.        .animationDuration(this.animationDuration)
64.        .onChange((index: number) => {
65.          this.currentIndex = index  
66.        })
67.        .onAnimationStart((index: number, targetIndex: number, event: TabsAnimationEvent) => {

69.          this.currentIndex = targetIndex
70.          let targetIndexInfo = this.getTextInfo(targetIndex)
71.          this.startAnimateTo(this.animationDuration, targetIndexInfo.left, targetIndexInfo.width)
72.        })
73.        .onAnimationEnd((index: number,event: TabsAnimationEvent) => {

75.          let currentIndicatorInfo = this.getCurrentIndicatorInfo(index,event)
76.          this.startAnimateTo(0,currentIndicatorInfo.left,currentIndicatorInfo.width)
77.        })
78.        .onGestureSwipe((index: number,event: TabsAnimationEvent) => {

80.          let currentIndicatorInfo = this.getCurrentIndicatorInfo(index,event)
81.          this.currentIndex = currentIndicatorInfo.index
82.          this.indicatorLeftMargin = currentIndicatorInfo.left
83.          this.indicatorWidth = currentIndicatorInfo.width
84.        })

86.        Column()
87.          .height(2)
88.          .width(this.indicatorWidth)
89.          .margin({ left: this.indicatorLeftMargin, top:48})
90.          .backgroundColor('#007DFF')
91.      }.width('100%')
92.    }

94.    private getTextInfo(index: number): Record<string, number\> {
95.      let rectangle = this.componentUtils.getRectangleById(index.toString())
96.      return { 'left': px2vp(rectangle.windowOffset.x), 'width': px2vp(rectangle.size.width) }
97.    }

99.    private getCurrentIndicatorInfo(index: number, event: TabsAnimationEvent): Record<string, number\> {
100.      let nextIndex = index
101.      if (index > 0 && event.currentOffset > 0) {
102.        nextIndex--
103.      } else if (index < 3 && event.currentOffset < 0) {
104.        nextIndex++
105.      }
106.      let indexInfo = this.getTextInfo(index)
107.      let nextIndexInfo = this.getTextInfo(nextIndex)
108.      let swipeRatio = Math.abs(event.currentOffset / this.tabsWidth)
109.      let currentIndex = swipeRatio > 0.5 ? nextIndex : index  
110.      let currentLeft = indexInfo.left + (nextIndexInfo.left - indexInfo.left) \* swipeRatio
111.      let currentWidth = indexInfo.width + (nextIndexInfo.width - indexInfo.width) \* swipeRatio
112.      return { 'index': currentIndex, 'left': currentLeft, 'width': currentWidth }
113.    }

115.    private startAnimateTo(duration: number, leftMargin: number, width: number) {
116.      animateTo({
117.        duration: duration, 
118.        curve: Curve.Linear, 
119.        iterations: 1, 
120.        playMode: PlayMode.Normal, 
121.        onFinish: () => {
122.          console.info('play end')
123.        }
124.      }, () => {
125.        this.indicatorLeftMargin = leftMargin
126.        this.indicatorWidth = width
127.      })
128.    }
129.  }

![Image 9](https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240816151305.87872378763808174095838469786939:50001231000000:2800:6F87BAD3F2E28D72AF1E65B0148468BF7FF77682050DC52E486E296CB74E3B4C.gif?needInitFileName=true?needInitFileName=true)

### 示例10

本示例通过preloadItems接口实现了预加载指定子节点。

2.  import { BusinessError } from '@kit.BasicServicesKit'

4.  @Entry
5.  @Component
6.  struct TabsPreloadItems {
7.    @State currentIndex: number = 1
8.    private tabsController: TabsController = new TabsController()

10.    build() {
11.      Column() {
12.        Tabs({ index: this.currentIndex, controller: this.tabsController }) {
13.          TabContent() {
14.            MyComponent({ color: '#00CB87' })
15.          }.tabBar(SubTabBarStyle.of('green'))

17.          TabContent() {
18.            MyComponent({ color: '#007DFF' })
19.          }.tabBar(SubTabBarStyle.of('blue'))

21.          TabContent() {
22.            MyComponent({ color: '#FFBF00' })
23.          }.tabBar(SubTabBarStyle.of('yellow'))

25.          TabContent() {
26.            MyComponent({ color: '#E67C92' })
27.          }.tabBar(SubTabBarStyle.of('pink'))
28.        }
29.        .width(360)
30.        .height(296)
31.        .backgroundColor('#F1F3F5')
32.        .onChange((index: number) => {
33.          this.currentIndex = index
34.        })

36.        Button('preload items: \[0, 2, 3\]')
37.          .margin(5)
38.          .onClick(() => {

40.            this.tabsController.preloadItems(\[0, 2, 3\])
41.              .then(() => {
42.                console.info('preloadItems success.')
43.              })
44.              .catch((error: BusinessError) => {
45.                console.error('preloadItems failed, error code: ' + error.code + ', error message: ' + error.message)
46.              })
47.          })
48.      }
49.    }
50.  }

52.  @Component
53.  struct MyComponent {
54.    private color: string = ""

56.    aboutToAppear(): void {
57.      console.info('aboutToAppear backgroundColor:' + this.color)
58.    }

60.    aboutToDisappear(): void {
61.      console.info('aboutToDisappear backgroundColor:' + this.color)
62.    }

64.    build() {
65.      Column()
66.        .width('100%')
67.        .height('100%')
68.        .backgroundColor(this.color)
69.    }
70.  }
