{#你在一家软件公司工作，你被指派去为将安卓布局文件转译为鸿蒙ArkUI代码。#}
你在一家软件公司工作，你被指派去为将安卓布局文件拆分为更小的转译单位。

技术主管已经将代码转译分为以下步骤：
{% for task in tasks %}
{{ loop.index }}. {{ task.description }}{% if task.done %}（已完成）{% endif %}\n
{% endfor %}

你当前需要处理的任务是：
{{ current_task.description }}

{#
以下是可能需要用到的ArkUI类型定义：
{% include "harmony/types.prompt" %}

以下是可能需要用到的ArkUI组件文档：
{% include "harmony/components.prompt" %}
#}

{% include "partials/files_list.prompt" %}
{# {% include "partials/resources_list.prompt" %} #}

以下是待转译的安卓布局代码：
{% if android_layout %}
# android_layout.name
{{ android_layout.content }}
{% endif %}

{#在开始编码之前，你的工作是根据安卓页面表达的语义，将安卓布局文件的拆分为更小的转译单位。#}
{#现在，根据ArkUI组件文档、当前项目信息，逐步思考安卓布局文件转译过程，并为其创建整个开发计划。#}
{#**重要**：在开发计划描述中，你应该指出需要转译安卓布局组件的全部代码，你一定不可以忽略任何一个组件。#}

在开始编码之前，你的工作是根据安卓页面的语义，将安卓布局文件拆分为更小的转译单位，并为每一个转译单位编写功能、布局和样式描述。
每个转译单位可以是单个组件或多个组件构成，确保转译过程中的每个单位与其功能保持紧密相关。
拆分时，应根据页面的逻辑结构、组件的关联性和可复用性进行适当组合，以生成符合业务需求的合适转译单位。
现在，根据当前项目信息，逐步思考安卓布局文件的转译过程，并为其创建一个详尽的开发计划。
**重要**：你应该将功能语义相关的组件组合成一个转译单位，确保转译单位的功能和布局描述完整。
**重要**：在开发计划中，你需要完整转译安卓布局文件中所有的组件及其相应的代码。每个组件的代码都必须被考虑，且在组合成转译单位时，不得遗漏任何关键组件或逻辑。确保转译单位可以最大程度复用，且功能上独立或与其他组件协调工作。
**重要**：在开发计划中，你必须以逻辑方式排序转译单位，以便依赖其他功能的任务在后期实施。
**重要**：你编写的安卓组件功能、布局、样式描述需要尽可能详细，但不能包含过多安卓特有的内容，应该使用更通用的语言表述，以免影响转译工作。
**重要**：组件功能、布局、样式描述需要涵盖以下方面：布局属性（如宽度、高度、边距等）、组件的样式和外观（如颜色、字体、透明度等）、组件的排列和嵌套关系（如垂直或水平布局、对齐方式）、组件的功能和交互（如点击事件、输入验证），当涉及到自定义背景、颜色等时需要指出资源名。


{#{% include "harmony/rules/breakdown_android_layout_rules.prompt" %}#}


{% include "harmony/examples/breakdown_layout_example.prompt" %}

"""
你是一个专业的安卓开发者，现在你需要为下列安卓布局文件编写详细的功能、布局和样式描述。
代码：
<androidx.cardview.widget.CardView
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginBottom="4dp"
    android:layout_marginLeft="@dimen/activity_horizontal_margin"
    android:layout_marginRight="@dimen/activity_horizontal_margin"
    android:layout_marginTop="4dp"
    android:padding="16dp"
    app:cardCornerRadius="8dp">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical" android:padding="8dp">

        <ImageView
            android:id="@+id/imageViewLogo"
            android:layout_width="wrap_content"
            android:layout_height="200dp"
            android:layout_gravity="center"
            android:layout_marginBottom="8dp"
            android:layout_marginLeft="8dp"
            android:layout_marginRight="8dp"
            android:layout_marginTop="8dp"
            app:srcCompat="@drawable/bookdash_logo" />

    </LinearLayout>
</androidx.cardview.widget.CardView>
现有描述：
创建一张展示Logo的卡片。卡片的宽度占满父布局，高度根据内容自适应，内边距为 16dp，边角圆度为 8dp。卡片内部包含一个线性布局，其中有一个充满图像的视图用于展示Logo，且其横向和纵向均居中。

你将获得一段 UI 布局代码的描述以及对应的代码。你的任务是基于现有代码，补充详细的布局和样式信息。你需要描述以下几点：

布局属性：为每个组件添加详细的布局属性，例如宽度、高度、边距、内边距等。
样式和外观：描述组件的视觉效果，包括颜色、字体大小、边框样式、圆角处理等。如涉及到自定义的资源（如颜色或背景），请明确指出资源名称。
排列和嵌套关系：描述组件在布局中的排列方式，如水平或垂直方向，组件之间的对齐方式，及其父子关系。
资源引用：如果代码中引用了资源文件，请明确指出资源名称，例如引用了资源bookdash_logo作为logo的图片。

**重要**：不能包含安卓特有的内容，例如match_parent, dp等等，应该使用更通用的语言表述，确保描述的内容适用于多种 UI 开发框架。

示例：
该组件通过 Flex 布局实现了一个展示多种类型按钮（如普通按钮、胶囊按钮、圆形按钮）及其状态效果的界面。布局宽度占据整个屏幕，高度设为 400vp，内边距为左右 35vp、顶部 35vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组按钮。每个按钮组的按钮以水平布局方式排列，按钮之间的间距均匀分布，且对齐方式为居中对齐。
按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过 Flex 组件进行分隔。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。
整个布局通过 Flex 布局保证按钮在垂直方向上有序排列，确保界面整洁美观。
"""

