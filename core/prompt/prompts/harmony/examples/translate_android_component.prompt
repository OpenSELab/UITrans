{# 这里规则会越来越多，为了不超出上下文，后期可能会索引规则 #}
在转译过程中，你需要严格遵守以下规则：
### 规则 1
你必须准确、完整地实现安卓布局代码地转译。
准确意味着你需要将安卓布局代码中的每个组件、属性、值都转译为对应的鸿蒙ArkUI代码，一定不要添加任何多余的或不存在的组件、属性、值。
完整意味着你需要将安卓布局代码中的所有组件、属性、值都转译为对应的鸿蒙ArkUI代码，一定不要遗漏任何组件、属性、值。
正确示例：
```
安卓布局文件：
<TextView
    android:id="@+id/textview_first"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="@string/lorem_ipsum" />
对应的鸿蒙ArkUI代码：
Text($r("app.string.lorem_ipsum"))
  .id("textview_first")
  .width('auto')
  .height('auto')
```
错误示例：
```
安卓布局文件
<TextView
    android:id="@+id/textview_first"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_marginTop="16dp"
    android:text="@string/lorem_ipsum"
    app:layout_constraintBottom_toBottomOf="parent"
    app:layout_constraintEnd_toEndOf="parent"
    app:layout_constraintStart_toStartOf="parent"
    app:layout_constraintTop_toBottomOf="@id/button_first" />
错误的鸿蒙ArkUI代码：
// 未完整、准确地实现安卓布局代码的转译。
// 遗漏了id、marginTop、constraintBottom_toBottomOf、constraintEnd_toEndOf、constraintStart_toStartOf、constraintTop_toBottomOf属性，并且添加了额外的maxLines属性。
Text($r("app.string.lorem_ipsum"))
  .maxLines(10)
修改后的正确鸿蒙ArkUI代码：
RelativeContainer() {
  Text($r('app.string.lorem_ipsum'))  // 对android:text="@string/lorem_ipsum"的转译
    .id('textview_first')  // 对android:id="@+id/textview_first"的转译
    .margin({ top: '16vp' })  // 对android:layout_marginTop="16dp"的转译
    .alignRules({
        top: { anchor: 'button_first', align: VerticalAlign.Bottom },  // 对app:layout_constraintTop_toBottomOf="@id/button_first"的转译
        bottom: { anchor: '__container__', align: VerticalAlign.Bottom },  // 对app:layout_constraintBottom_toBottomOf="parent"的转译
        left: { anchor: '__container__', align: HorizontalAlign.Start },  // 对app:layout_constraintStart_toStartOf="parent"的转译
        right: { anchor: '__container__', align: HorizontalAlign.End }  // 对app:layout_constraintEnd_toEndOf="parent"的转译
    })  // 使用RelativeContainer与alignRules实现对layout_constraintXXX_toXXXOf属性的转译
}
额外示例：
利用RelativeContainer实现子组件垂直水平居中：
RelativeContainer() {
  Text($r('app.string.lorem_ipsum'))  // 对android:text="@string/lorem_ipsum"的转译
    .id('textview_first')  // 对android:id="@+id/textview_first"的转译
    .margin({ top: '16vp' })  // 对android:layout_marginTop="16dp"的转译
    .alignRules({
        center: {anchor: '__container__', align: VerticalAlign.Center},
        middle: {anchor: '__container__', align: HorizontalAlign.Center}
    })
}
```