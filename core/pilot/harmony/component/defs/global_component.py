GLOBAL_COMPONENT = {
    "AlertDialog": {
        "description": "显示警告弹窗组件，可设置文本内容与响应回调。",
        "interfaces": [
            {
                "description": "AlertDialog.show(value: AlertDialogParamWithConfirm | AlertDialogParamWithButtons | AlertDialogParamWithOptions) 定义警告弹窗并弹出。",
                "params": {
                    "value": {
                        "type": [
                            "AlertDialogParamWithConfirm",
                            "AlertDialogParamWithButtons",
                            "AlertDialogParamWithOptions"
                        ],
                        "required": True,
                        "description": "定义警告弹窗的参数对象。"
                    }
                }
            }
        ],
        "attributes": {},
        "events": {},
        "examples": [
            """/*\n实现思路：\n本示例展示了如何使用ArkUI框架中的AlertDialog组件，并自定义其显示和退出动画的持续时间。通过设置不同的动画效果和持续时间，可以实现更加个性化的对话框显示效果。\n\n总体功能与效果描述：\n点击按钮后，显示一个自定义动画效果的AlertDialog，对话框显示动画持续3秒，退出动画持续100毫秒。对话框显示在屏幕顶部，并包含一个确认按钮和一个取消回调。\n*/\n\n// AlertDialogExample.ets\nimport { router } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct AlertDialogExample {\n  build() {\n    Column({ space: 5 }) {\n      Button('AlertDialog Set Duration')\n        .onClick(() => {\n          // 显示AlertDialog，并设置自定义动画效果和持续时间\n          AlertDialog.show({\n            title: 'AlertDialog 1', // 对话框标题\n            message: 'Set Animation Duration open 3 second, close 100ms', // 对话框消息内容\n            autoCancel: True, // 自动取消对话框\n            alignment: DialogAlignment.Top, // 对话框对齐方式为顶部\n            offset: { dx: 0, dy: -20 }, // 对话框偏移量\n            gridCount: 3, // 对话框网格数\n            transition: TransitionEffect.asymmetric(\n              // 显示动画效果：透明度和缩放，持续3秒，曲线为Sharp\n              TransitionEffect.OPACITY.animation({ duration: 3000, curve: Curve.Sharp }).combine(\n                TransitionEffect.scale({ x: 1.5, y: 1.5 }).animation({ duration: 3000, curve: Curve.Sharp })\n              ),\n              // 退出动画效果：透明度和缩放，持续100毫秒，曲线为Smooth\n              TransitionEffect.OPACITY.animation({ duration: 100, curve: Curve.Smooth }).combine(\n                TransitionEffect.scale({ x: 0.5, y: 0.5 }).animation({ duration: 100, curve: Curve.Smooth })\n              )\n            ),\n            confirm: {\n              value: 'button', // 确认按钮文本\n              action: () => {\n                console.info('Button-clicking callback'); // 确认按钮点击回调\n              }\n            },\n            cancel: () => {\n              console.info('Closed callbacks'); // 对话框关闭回调\n            }\n          });\n        })\n        .backgroundColor(0x317aff) // 按钮背景颜色\n        .height("88px") // 按钮高度\n    }\n    .width('100%') // 列宽度\n    .margin({ top: 5 }) // 列顶部外边距\n  }\n}""",
            """/*\n实现思路：\n本示例展示了如何在鸿蒙系统中使用ArkUI框架创建一个弹出对话框。对话框可以显示在主窗体之外，支持多种配置选项，如标题、副标题、消息内容、按钮布局、按钮行为等。\n\n总体功能与效果描述：\n点击按钮后，会弹出一个包含标题、副标题和消息内容的对话框。对话框支持自动取消、居中对齐、模态显示等特性。对话框中包含三个按钮，每个按钮都有自己的行为和样式。\n*/\n\n// AlertDialogExample.ets\n@Entry\n@Component\nstruct AlertDialogExample {\n  build() {\n    Column({ space: 5 }) {\n      Button('one button dialog')\n        .onClick(() => {\n          // 显示一个弹出对话框\n          AlertDialog.show(\n            {\n              title: 'title', // 对话框标题\n              subtitle: 'subtitle', // 对话框副标题\n              message: 'text', // 对话框消息内容\n              autoCancel: True, // 自动取消对话框\n              alignment: DialogAlignment.Center, // 对话框居中对齐\n              gridCount: 4, // 对话框网格计数\n              showInSubWindow: True, // 在子窗口中显示对话框\n              isModal: True, // 模态对话框\n              offset: { dx: 0, dy: -20 }, // 对话框偏移量\n              buttonDirection: DialogButtonDirection.HORIZONTAL, // 按钮水平布局\n              buttons: [\n                {\n                  value: '按钮', // 按钮文本\n                  action: () => {\n                    console.info('Callback when button1 is clicked') // 按钮1点击回调\n                  }\n                },\n                {\n                  value: '按钮', // 按钮文本\n                  action: () => {\n                    console.info('Callback when button2 is clicked') // 按钮2点击回调\n                  }\n                },\n                {\n                  value: '按钮', // 按钮文本\n                  enabled: True, // 按钮启用\n                  defaultFocus: True, // 默认焦点按钮\n                  style: DialogButtonStyle.HIGHLIGHT, // 按钮高亮样式\n                  action: () => {\n                    console.info('Callback when button3 is clicked') // 按钮3点击回调\n                  }\n                },\n              ],\n              cancel: () => {\n                console.info('Closed callbacks') // 对话框关闭回调\n              },\n              onWillDismiss: (dismissDialogAction: DismissDialogAction) => {\n                console.info("reason=" + JSON.stringify(dismissDialogAction.reason)) // 对话框即将关闭的原因\n                console.log("dialog onWillDismiss")\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                  dismissDialogAction.dismiss() // 按下返回键关闭对话框\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                  dismissDialogAction.dismiss() // 点击外部区域关闭对话框\n                }\n              }\n            })\n        })\n    }.width('100%').margin({ top: 5 }).backgroundColor(0x317aff) // 设置组件的宽度、上边距和背景颜色\n  }\n}""",
            """/*\n实现思路：\n本示例展示了如何使用AlertDialog组件来创建一个自定义样式的对话框。通过设置对话框的各项属性，如宽度、高度、背景色、边框样式、阴影等，来实现一个具有特定外观和行为的对话框。\n\n总体功能与效果描述：\n点击按钮后，会弹出一个自定义样式的对话框，对话框包含标题、消息内容和一个确认按钮。对话框的样式包括特定的宽度、高度、背景色、边框样式、阴影等。点击确认按钮或关闭对话框时，会触发相应的回调函数。\n*/\n\n// AlertDialogExample.ets\n@Entry\n@Component\nstruct AlertDialogExample {\n  build() {\n    Column({ space: 5 }) {\n      Button('one button dialog')\n        .onClick(() => {\n          // 显示一个自定义样式的对话框\n          AlertDialog.show(\n            {\n              title: 'title', // 对话框标题\n              message: 'text', // 对话框消息内容\n              autoCancel: True, // 自动关闭对话框\n              alignment: DialogAlignment.Center, // 对话框对齐方式\n              offset: { dx: 0, dy: -20 }, // 对话框偏移量\n              gridCount: 3, // 对话框网格数\n              width: 300, // 对话框宽度\n              height: 200, // 对话框高度\n              cornerRadius: 20, // 对话框圆角半径\n              borderWidth: 1, // 对话框边框宽度\n              borderStyle: BorderStyle.Dashed, // 对话框边框样式\n              borderColor: Color.Blue, // 对话框边框颜色\n              backgroundColor: Color.White, // 对话框背景颜色\n              shadow: ({ radius: 20, color: Color.Grey, offsetX: 50, offsetY: 0}), // 对话框阴影\n              textStyle: { wordBreak: WordBreak.BREAK_ALL }, // 对话框文本样式\n              confirm: {\n                value: 'button', // 确认按钮文本\n                action: () => {\n                  // 确认按钮点击回调\n                  console.info('Button-clicking callback')\n                }\n              },\n              cancel: () => {\n                // 对话框关闭回调\n                console.info('Closed callbacks')\n              },\n              onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n                // 对话框即将关闭回调\n                console.info("reason=" + JSON.stringify(dismissDialogAction.reason))\n                console.log("dialog onWillDismiss")\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                  // 按下返回键关闭对话框\n                  dismissDialogAction.dismiss()\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                  // 点击对话框外部关闭对话框\n                  dismissDialogAction.dismiss()\n                }\n              }\n            }\n          )\n        })\n        .backgroundColor(0x317aff) // 按钮背景颜色\n    }.width('100%').margin({ top: 5 }) // 列的宽度为100%，顶部外边距为5\n  }\n}""",
            """/*\n实现思路：\n本示例展示了如何在鸿蒙ArkUI中使用AlertDialog组件来创建不同按钮数量的弹窗。通过点击不同的按钮，可以触发不同配置的弹窗显示。每个弹窗的配置包括标题、副标题、消息内容、按钮布局、按钮行为等。\n\n总体功能与效果描述：\n用户可以通过点击界面上的三个按钮，分别触发一个、两个和三个按钮的弹窗显示。每个弹窗都有相应的标题和消息内容，并且按钮具有不同的行为回调。\n*/\n\n// AlertDialogExample.ets\n@Entry\n@Component\nstruct AlertDialogExample {\n  build() {\n    Column({ space: 5 }) {\n      // 按钮：触发一个按钮的弹窗\n      Button('one button dialog')\n        .onClick(() => {\n          // 显示一个按钮的弹窗\n          AlertDialog.show(\n            {\n              title: 'title', // 弹窗标题\n              message: 'text', // 弹窗消息内容\n              autoCancel: True, // 自动取消弹窗\n              alignment: DialogAlignment.Bottom, // 弹窗对齐方式\n              offset: { dx: 0, dy: -20 }, // 弹窗偏移量\n              gridCount: 3, // 弹窗按钮网格数\n              confirm: {\n                value: 'button', // 按钮文本\n                action: () => {\n                  console.info('Button-clicking callback') // 按钮点击回调\n                }\n              },\n              cancel: () => {\n                console.info('Closed callbacks') // 弹窗关闭回调\n              },\n              onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n                console.info("reason=" + JSON.stringify(dismissDialogAction.reason)) // 弹窗即将关闭的原因\n                console.log("dialog onWillDismiss")\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                  dismissDialogAction.dismiss() // 按下返回键关闭弹窗\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                  dismissDialogAction.dismiss() // 点击弹窗外部关闭弹窗\n                }\n              }\n            }\n          )\n        })\n        .backgroundColor(0x317aff) // 按钮背景颜色\n\n      // 按钮：触发两个按钮的弹窗\n      Button('two button dialog')\n        .onClick(() => {\n          // 显示两个按钮的弹窗\n          AlertDialog.show(\n            {\n              title: 'title', // 弹窗标题\n              subtitle: 'subtitle', // 弹窗副标题\n              message: 'text', // 弹窗消息内容\n              autoCancel: True, // 自动取消弹窗\n              alignment: DialogAlignment.Bottom, // 弹窗对齐方式\n              gridCount: 4, // 弹窗按钮网格数\n              offset: { dx: 0, dy: -20 }, // 弹窗偏移量\n              primaryButton: {\n                value: 'cancel', // 第一个按钮文本\n                action: () => {\n                  console.info('Callback when the first button is clicked') // 第一个按钮点击回调\n                }\n              },\n              secondaryButton: {\n                enabled: True, // 第二个按钮启用\n                defaultFocus: True, // 第二个按钮默认聚焦\n                style: DialogButtonStyle.HIGHLIGHT, // 第二个按钮样式\n                value: 'ok', // 第二个按钮文本\n                action: () => {\n                  console.info('Callback when the second button is clicked') // 第二个按钮点击回调\n                }\n              },\n              cancel: () => {\n                console.info('Closed callbacks') // 弹窗关闭回调\n              },\n              onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n                console.info("reason=" + JSON.stringify(dismissDialogAction.reason)) // 弹窗即将关闭的原因\n                console.log("dialog onWillDismiss")\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                  dismissDialogAction.dismiss() // 按下返回键关闭弹窗\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                  dismissDialogAction.dismiss() // 点击弹窗外部关闭弹窗\n                }\n              }\n            }\n          )\n        }).backgroundColor(0x317aff) // 按钮背景颜色\n\n      // 按钮：触发三个按钮的弹窗\n      Button('three button dialog')\n        .onClick(() => {\n          // 显示三个按钮的弹窗\n          AlertDialog.show(\n            {\n              title: 'title', // 弹窗标题\n              subtitle: 'subtitle', // 弹窗副标题\n              message: 'text', // 弹窗消息内容\n              autoCancel: True, // 自动取消弹窗\n              alignment: DialogAlignment.Bottom, // 弹窗对齐方式\n              gridCount: 4, // 弹窗按钮网格数\n              offset: { dx: 0, dy: -20 }, // 弹窗偏移量\n              buttonDirection: DialogButtonDirection.HORIZONTAL, // 按钮布局方向\n              buttons: [\n                {\n                  value: '按钮', // 第一个按钮文本\n                  action: () => {\n                    console.info('Callback when button1 is clicked') // 第一个按钮点击回调\n                  }\n                },\n                {\n                  value: '按钮', // 第二个按钮文本\n                  action: () => {\n                    console.info('Callback when button2 is clicked') // 第二个按钮点击回调\n                  }\n                },\n                {\n                  value: '按钮', // 第三个按钮文本\n                  enabled: True, // 第三个按钮启用\n                  defaultFocus: True, // 第三个按钮默认聚焦\n                  style: DialogButtonStyle.HIGHLIGHT, // 第三个按钮样式\n                  action: () => {\n                    console.info('Callback when button3 is clicked') // 第三个按钮点击回调\n                  }\n                },\n              ],\n              cancel: () => {\n                console.info('Closed callbacks') // 弹窗关闭回调\n              },\n              onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n                console.info("reason=" + JSON.stringify(dismissDialogAction.reason)) // 弹窗即将关闭的原因\n                console.log("dialog onWillDismiss")\n                if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                  dismissDialogAction.dismiss() // 按下返回键关闭弹窗\n                }\n                if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                  dismissDialogAction.dismiss() // 点击弹窗外部关闭弹窗\n                }\n              }\n            }\n          )\n        }).backgroundColor(0x317aff) // 按钮背景颜色\n    }.width('100%').margin({ top: 5 })\n  }\n}"""
        ]
    },
    "ActionSheet": {
        "description": "列表选择弹窗 (ActionSheet) 是一个全局UI方法，属于ArkTS组件，用于在ArkUI（方舟UI框架）中显示一个带有多个选项的弹窗。",
        "interfaces": [
            {
                "description": "ActionSheet.show(value: ActionSheetOptions) 定义列表弹窗并弹出。",
                "params": {
                    "value": {
                        "type": "ActionSheetOptions",
                        "required": True,
                        "description": "配置列表选择弹窗的参数。"
                    }
                }
            }
        ],
        "attributes": {},
        "events": {},
        "is_common_attrs": True,
        "examples": [
            """/*\n实现思路：\n本示例展示了如何使用ActionSheet组件，通过点击按钮触发ActionSheet的显示，并处理其各种事件和回调。\n总体功能与效果描述：\n用户点击按钮后，会弹出一个ActionSheet，包含标题、副标题、消息、确认按钮、取消按钮以及多个选项。每个选项点击后会触发相应的回调函数，并在控制台输出相应信息。\n*/\n\n// ActionSheetExample.ets\n@Entry\n@Component\nstruct ActionSheetExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Button('Click to Show ActionSheet')\n        .onClick(() => {\n          ActionSheet.show({\n            title: 'ActionSheet title', // ActionSheet的标题\n            subtitle: 'ActionSheet subtitle', // ActionSheet的副标题\n            message: 'message', // ActionSheet的消息内容\n            autoCancel: True, // 是否自动取消\n            showInSubWindow: True, // 是否在子窗口中显示\n            isModal: True, // 是否为模态对话框\n            confirm: {\n              defaultFocus: True, // 确认按钮是否默认聚焦\n              value: 'Confirm button', // 确认按钮的文本\n              action: () => {\n                console.log('Get Alert Dialog handled') // 确认按钮点击后的回调\n              }\n            },\n            cancel: () => {\n              console.log('actionSheet canceled') // 取消按钮点击后的回调\n            },\n            onWillDismiss: (dismissDialogAction: DismissDialogAction) => {\n              console.info("reason=" + JSON.stringify(dismissDialogAction.reason)) // 对话框即将关闭时的回调，输出关闭原因\n              console.log("dialog onWillDismiss")\n              if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                dismissDialogAction.dismiss() // 如果原因是按下返回键，则关闭对话框\n              }\n              if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                dismissDialogAction.dismiss() // 如果原因是点击外部区域，则关闭对话框\n              }\n            },\n            alignment: DialogAlignment.Center, // 对话框的对齐方式\n            offset: { dx: 0, dy: -10 }, // 对话框的偏移量\n            sheets: [\n              {\n                title: 'apples', // 选项1的标题\n                action: () => {\n                  console.log('apples') // 选项1点击后的回调\n                }\n              },\n              {\n                title: 'bananas', // 选项2的标题\n                action: () => {\n                  console.log('bananas') // 选项2点击后的回调\n                }\n              },\n              {\n                title: 'pears', // 选项3的标题\n                action: () => {\n                  console.log('pears') // 选项3点击后的回调\n                }\n              }\n            ]\n          })\n        })\n    }.width('100%')\n    .height('100%')\n  }\n}""",
            """/*\n实现思路：\n本示例展示了如何在鸿蒙ArkUI中使用ActionSheet组件。通过点击按钮，弹出一个底部对齐的动作表单，包含标题、副标题、消息、确认按钮、取消按钮以及多个选项。每个选项点击后会触发相应的动作。\n\n总体功能与效果描述：\n用户点击按钮后，屏幕底部会弹出一个动作表单，包含标题、副标题、消息、确认按钮、取消按钮以及三个选项（苹果、香蕉、梨）。用户可以选择任意选项或点击取消按钮，每个操作都会在控制台输出相应的日志信息。\n*/\n\n// ActionSheetExample.ets\n@Entry\n@Component\nstruct ActionSheetExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Button('Click to Show ActionSheet')\n        .onClick(() => {\n          ActionSheet.show({\n            title: 'ActionSheet title', // 动作表单的标题\n            subtitle: 'ActionSheet subtitle', // 动作表单的副标题\n            message: 'message', // 动作表单的消息内容\n            autoCancel: True, // 自动取消动作表单\n            confirm: {\n              defaultFocus: True, // 确认按钮默认聚焦\n              value: 'Confirm button', // 确认按钮的文本\n              action: () => {\n                console.log('Get Alert Dialog handled') // 确认按钮点击后的动作\n              }\n            },\n            cancel: () => {\n              console.log('actionSheet canceled') // 取消按钮点击后的动作\n            },\n            onWillDismiss: (dismissDialogAction: DismissDialogAction) => {\n              console.info("reason=" + JSON.stringify(dismissDialogAction.reason)) // 动作表单即将消失的原因\n              console.log("dialog onWillDismiss")\n              if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                dismissDialogAction.dismiss() // 按下返回键时关闭动作表单\n              }\n              if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                dismissDialogAction.dismiss() // 点击外部区域时关闭动作表单\n              }\n            },\n            alignment: DialogAlignment.Bottom, // 动作表单的对齐方式为底部\n            offset: { dx: 0, dy: -10 }, // 动作表单的偏移量\n            sheets: [\n              {\n                title: 'apples', // 第一个选项的标题\n                action: () => {\n                  console.log('apples') // 第一个选项点击后的动作\n                }\n              },\n              {\n                title: 'bananas', // 第二个选项的标题\n                action: () => {\n                  console.log('bananas') // 第二个选项点击后的动作\n                }\n              },\n              {\n                title: 'pears', // 第三个选项的标题\n                action: () => {\n                  console.log('pears') // 第三个选项点击后的动作\n                }\n              }\n            ]\n          })\n        })\n    }.width('100%')\n    .height('100%')\n  }\n}""",
            """/*\n实现思路：\n本示例展示了如何在鸿蒙ArkUI中使用ActionSheet组件，并自定义其显示和退出动画的持续时间。通过点击按钮触发ActionSheet的显示，并设置不同的动画效果和持续时间。\n\n总体功能与效果描述：\n- 点击按钮后，显示一个ActionSheet，包含标题、消息、确认按钮、取消按钮和多个选项。\n- ActionSheet的显示动画持续3秒，退出动画持续100毫秒。\n- 动画效果包括透明度和缩放变化。\n- 点击确认按钮和取消按钮时，会触发相应的回调函数。\n- 点击选项时，会触发相应的回调函数并打印选项名称。\n*/\n\n// ActionSheetExample.ets\nimport { router } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct ActionSheetExample {\n  build() {\n    Column({ space: 5 }) {\n      Button('ActionSheet Set Duration')\n        .onClick(() => {\n          // 显示ActionSheet，并设置动画效果和持续时间\n          ActionSheet.show({\n            title: 'ActionSheet 1', // ActionSheet的标题\n            message: 'Set Animation Duration open 3 second, close 100 ms', // ActionSheet的消息\n            autoCancel: True, // 自动取消ActionSheet\n            alignment: DialogAlignment.Top, // ActionSheet的对齐方式\n            transition: TransitionEffect.asymmetric(\n              // 显示动画效果：透明度和缩放，持续3秒\n              TransitionEffect.OPACITY.animation({ duration: 3000, curve: Curve.Sharp }).combine(\n                TransitionEffect.scale({ x: 1.5, y: 1.5 }).animation({ duration: 3000, curve: Curve.Sharp })\n              ),\n              // 退出动画效果：透明度和缩放，持续100毫秒\n              TransitionEffect.OPACITY.animation({ duration: 100, curve: Curve.Smooth }).combine(\n                TransitionEffect.scale({ x: 0.5, y: 0.5 }).animation({ duration: 100, curve: Curve.Smooth })\n              )\n            ),\n            offset: { dx: 0, dy: -20 }, // ActionSheet的偏移量\n            confirm: {\n              value: 'button', // 确认按钮的文本\n              action: () => {\n                console.info('Button-clicking callback') // 确认按钮点击回调\n              }\n            },\n            cancel: () => {\n              console.info('Closed callbacks') // 取消按钮点击回调\n            },\n            sheets: [\n              {\n                title: 'apples', // 选项1的标题\n                action: () => {\n                  console.log('apples') // 选项1点击回调\n                }\n              },\n              {\n                title: 'bananas', // 选项2的标题\n                action: () => {\n                  console.log('bananas') // 选项2点击回调\n                }\n              },\n              {\n                title: 'pears', // 选项3的标题\n                action: () => {\n                  console.log('pears') // 选项3点击回调\n                }\n              }\n            ]\n          })\n        }).backgroundColor(0x317aff).height("88px") // 按钮的背景颜色和高度\n    }.width('100%').margin({ top: 5 }) // 列的宽度和小于顶部边距\n  }\n}""",
            """/*\n实现思路：\n本示例展示了如何使用ArkUI框架创建一个自定义样式的ActionSheet组件。通过点击按钮触发ActionSheet的显示，并设置其样式、内容和行为。\n\n总体功能与效果描述：\n用户点击按钮后，屏幕底部会弹出一个自定义样式的ActionSheet，包含标题、副标题、消息、确认按钮、取消按钮以及多个选项。用户可以选择选项或取消操作，并在控制台中输出相应信息。\n*/\n\n// ActionSheetExample.ets\n@Entry\n@Component\nstruct ActionSheetExample {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Button('Click to Show ActionSheet')\n        .onClick(() => {\n          ActionSheet.show({\n            title: 'ActionSheet title', // 设置ActionSheet的标题\n            subtitle: 'ActionSheet subtitle', // 设置ActionSheet的副标题\n            message: 'message', // 设置ActionSheet的消息内容\n            autoCancel: True, // 设置ActionSheet是否自动取消\n            width: 300, // 设置ActionSheet的宽度\n            height: 350, // 设置ActionSheet的高度\n            cornerRadius: 20, // 设置ActionSheet的圆角半径\n            borderWidth: 1, // 设置ActionSheet的边框宽度\n            borderStyle: BorderStyle.Solid, // 设置ActionSheet的边框样式\n            borderColor: Color.Blue, // 设置ActionSheet的边框颜色\n            backgroundColor: Color.White, // 设置ActionSheet的背景颜色\n            shadow: ({ radius: 20, color: Color.Grey, offsetX: 50, offsetY: 0}), // 设置ActionSheet的阴影效果\n            confirm: {\n              defaultFocus: True, // 设置确认按钮是否默认聚焦\n              value: 'Confirm button', // 设置确认按钮的文本\n              action: () => {\n                console.log('Get Alert Dialog handled') // 确认按钮点击后的操作\n              }\n            },\n            cancel: () => {\n              console.log('actionSheet canceled') // 取消按钮点击后的操作\n            },\n            onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n              console.info("reason=" + JSON.stringify(dismissDialogAction.reason)) // 输出取消原因\n              console.log("dialog onWillDismiss") // 输出对话框即将消失的日志\n              if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n                dismissDialogAction.dismiss() // 处理按下返回键的取消操作\n              }\n              if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n                dismissDialogAction.dismiss() // 处理点击外部区域的取消操作\n              }\n            },\n            alignment: DialogAlignment.Bottom, // 设置ActionSheet的对齐方式\n            offset: { dx: 0, dy: -10 }, // 设置ActionSheet的偏移量\n            sheets: [\n              {\n                title: 'apples', // 设置第一个选项的标题\n                action: () => {\n                  console.log('apples') // 第一个选项点击后的操作\n                }\n              },\n              {\n                title: 'bananas', // 设置第二个选项的标题\n                action: () => {\n                  console.log('bananas') // 第二个选项点击后的操作\n                }\n              },\n              {\n                title: 'pears', // 设置第三个选项的标题\n                action: () => {\n                  console.log('pears') // 第三个选项点击后的操作\n                }\n              }\n            ]\n          })\n        })\n    }.width('100%')\n    .height('100%')\n  }\n}""",
        ]
    },
    "CustomDialog": {
        "description": "通过CustomDialogController类显示自定义弹窗。使用弹窗组件时，可优先考虑自定义弹窗，便于自定义弹窗的样式与内容。",
        "details": "自定义弹窗的所有参数，不支持动态刷新。",
        "interfaces": [
            {
                "description": "constructor(value: CustomDialogControllerOptions)配置自定义弹窗的参数。",
                "params": {
                    "value": {
                        "type": "CustomDialogControllerOptions",
                        "required": True,
                        "description": "配置自定义弹窗的参数。"
                    }
                }
            }
        ],
        "attributes": {},
        "events": {},
        "is_common_attrs": True,
        "examples": [
            """/*\n实现思路：\n1. 定义一个自定义对话框组件CustomDialogExample，包含一个文本和一个按钮，点击按钮可以关闭对话框。\n2. 定义一个使用自定义对话框的组件CustomDialogUser，包含一个按钮，点击按钮可以打开自定义对话框。\n3. 使用CustomDialogController来控制对话框的显示和隐藏。\n4. 设置对话框的样式，如宽度、高度、背景色、阴影等。\n5. 处理对话框的取消和确认回调，以及对话框即将关闭时的回调。\n\n总体功能与效果描述：\n1. 点击主界面上的按钮可以打开自定义对话框。\n2. 自定义对话框中包含一个文本和一个按钮，点击按钮可以关闭对话框。\n3. 对话框具有自定义的样式，如宽度、高度、背景色、阴影等。\n4. 对话框的取消和确认操作会触发相应的回调函数。\n5. 对话框即将关闭时会触发onWillDismiss回调，根据关闭原因执行相应操作。\n*/\n\n// xxx.ets\n@CustomDialog\nstruct CustomDialogExample {\n  controller?: CustomDialogController // 对话框控制器\n  cancel: () => void = () => { } // 取消回调函数\n  confirm: () => void = () => { } // 确认回调函数\n\n  build() {\n    Column() {\n      Text('这是自定义弹窗') // 显示文本\n        .fontSize(30) // 设置字体大小\n        .height(100) // 设置高度\n      Button('点我关闭弹窗') // 显示按钮\n        .onClick(() => {\n          if (this.controller != undefined) {\n            this.controller.close() // 点击按钮关闭对话框\n          }\n        })\n        .margin(20) // 设置按钮外边距\n    }\n  }\n}\n\n@Entry\n@Component\nstruct CustomDialogUser {\n  dialogController: CustomDialogController | null = new CustomDialogController({\n    builder: CustomDialogExample({\n      cancel: ()=> { this.onCancel() }, // 设置取消回调\n      confirm: ()=> { this.onAccept() } // 设置确认回调\n    }),\n    cancel: this.existApp, // 设置点击空白区域回调\n    autoCancel: True, // 设置自动取消\n    onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n      console.info("reason=" + JSON.stringify(dismissDialogAction.reason)) // 打印关闭原因\n      console.log("dialog onWillDismiss") // 打印日志\n      if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n        dismissDialogAction.dismiss() // 根据原因关闭对话框\n      }\n      if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n        dismissDialogAction.dismiss() // 根据原因关闭对话框\n      }\n    },\n    alignment: DialogAlignment.Center, // 设置对话框对齐方式\n    offset: { dx: 0, dy: -20 }, // 设置对话框偏移\n    customStyle: False, // 设置是否使用自定义样式\n    cornerRadius: 20, // 设置圆角半径\n    width: 300, // 设置宽度\n    height: 200, // 设置高度\n    borderWidth: 1, // 设置边框宽度\n    borderStyle: BorderStyle.Dashed, // 设置边框样式\n    borderColor: Color.Blue, // 设置边框颜色\n    backgroundColor: Color.White, // 设置背景颜色\n    shadow: ({ radius: 20, color: Color.Grey, offsetX: 50, offsetY: 0}) // 设置阴影\n  })\n\n  // 在自定义组件即将析构销毁时将dialogController置空\n  aboutToDisappear() {\n    this.dialogController = null // 将dialogController置空\n  }\n\n  onCancel() {\n    console.info('Callback when the first button is clicked') // 打印取消回调日志\n  }\n\n  onAccept() {\n    console.info('Callback when the second button is clicked') // 打印确认回调日志\n  }\n\n  existApp() {\n    console.info('Click the callback in the blank area') // 打印点击空白区域回调日志\n  }\n\n  build() {\n    Column() {\n      Button('click me') // 显示按钮\n        .onClick(() => {\n          if (this.dialogController != null) {\n            this.dialogController.open() // 点击按钮打开对话框\n          }\n        }).backgroundColor(0x317aff) // 设置按钮背景颜色\n    }.width('100%').margin({ top: 5 }) // 设置列的宽度和上边距\n  }\n}""",

            """/*\n实现思路：\n1. 创建一个自定义对话框组件，该组件包含一个文本和一个按钮，点击按钮可以关闭对话框。\n2. 创建一个主组件，该组件包含一个按钮，点击按钮可以打开自定义对话框。\n3. 使用CustomDialogController来控制对话框的显示和隐藏。\n4. 设置对话框的属性，如对齐方式、偏移量、网格数、是否在子窗口显示、是否模态、自定义样式、圆角半径等。\n5. 定义对话框的回调函数，如取消、确认、空白区域点击等。\n总体功能与效果描述：\n- 点击主组件中的按钮，可以打开一个自定义对话框。\n- 对话框中包含一个文本和一个按钮，点击按钮可以关闭对话框。\n- 对话框可以设置多种属性，如对齐方式、偏移量、网格数、是否在子窗口显示、是否模态、自定义样式、圆角半径等。\n- 对话框的关闭行为可以通过回调函数进行自定义处理。\n*/\n\n// xxx.ets\n@CustomDialog\nstruct CustomDialogExample {\n  controller?: CustomDialogController // 对话框控制器，用于控制对话框的显示和隐藏\n  cancel: () => void = () => { // 取消按钮的回调函数\n  }\n  confirm: () => void = () => { // 确认按钮的回调函数\n  }\n  build() {\n    Column() {\n      Text('可展示在主窗口外的弹窗') // 对话框中的文本\n        .fontSize(30) // 设置文本的字体大小\n        .height(100) // 设置文本的高度\n      Button('点我关闭弹窗') // 对话框中的按钮\n        .onClick(() => { // 按钮的点击事件\n          if (this.controller != undefined) { // 检查控制器是否存在\n            this.controller.close() // 关闭对话框\n          }\n        })\n        .margin(20) // 设置按钮的外边距\n    }\n  }\n}\n\n@Entry\n@Component\nstruct CustomDialogUser {\n  dialogController: CustomDialogController | null = new CustomDialogController({\n    builder: CustomDialogExample({ // 创建自定义对话框实例\n      cancel: ()=> { this.onCancel() }, // 设置取消按钮的回调函数\n      confirm: ()=> { this.onAccept() } // 设置确认按钮的回调函数\n    }),\n    cancel: this.existApp, // 设置空白区域点击的回调函数\n    autoCancel: True, // 设置是否自动取消对话框\n    onWillDismiss:(dismissDialogAction: DismissDialogAction)=> { // 设置对话框即将关闭时的回调函数\n      console.info("reason=" + JSON.stringify(dismissDialogAction.reason)) // 打印关闭原因\n      console.log("dialog onWillDismiss") // 打印日志\n      if (dismissDialogAction.reason == DismissReason.PRESS_BACK) { // 如果关闭原因是按下返回键\n        dismissDialogAction.dismiss() // 关闭对话框\n      }\n      if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) { // 如果关闭原因是点击外部区域\n        dismissDialogAction.dismiss() // 关闭对话框\n      }\n    },\n    alignment: DialogAlignment.Center, // 设置对话框的对齐方式\n    offset: { dx: 0, dy: -20 }, // 设置对话框的偏移量\n    gridCount: 4, // 设置对话框的网格数\n    showInSubWindow: True, // 设置是否在子窗口显示对话框\n    isModal: True, // 设置对话框是否为模态\n    customStyle: False, // 设置是否使用自定义样式\n    cornerRadius: 10, // 设置对话框的圆角半径\n  })\n  // 在自定义组件即将析构销毁时将dialogController置空\n  aboutToDisappear() {\n    this.dialogController = null // 将dialogController置空\n  }\n\n  onCancel() {\n    console.info('Callback when the first button is clicked') // 打印取消按钮点击的日志\n  }\n\n  onAccept() {\n    console.info('Callback when the second button is clicked') // 打印确认按钮点击的日志\n  }\n\n  existApp() {\n    console.info('Click the callback in the blank area') // 打印空白区域点击的日志\n  }\n\n  build() {\n    Column() {\n      Button('click me') // 主组件中的按钮\n        .onClick(() => { // 按钮的点击事件\n          if (this.dialogController != null) { // 检查控制器是否存在\n            this.dialogController.open() // 打开对话框\n          }\n        }).backgroundColor(0x317aff) // 设置按钮的背景颜色\n    }.width('100%').margin({ top: 5 }) // 设置列的宽度和上边距\n  }\n}""",

            """/*\n实现思路：\n1. 创建两个自定义对话框组件，分别用于显示不同的内容和功能。\n2. 使用CustomDialogController来控制对话框的显示和隐藏。\n3. 在主组件中使用@State和@Link装饰器来管理状态和输入值。\n4. 实现对话框的打开、关闭以及回调处理。\n\n总体功能与效果描述：\n1. 主组件中有一个按钮，点击后打开第一个自定义对话框。\n2. 第一个自定义对话框中包含文本输入框和两个按钮（取消和确认）。\n3. 第一个自定义对话框中还有一个按钮，点击后打开第二个自定义对话框。\n4. 第二个自定义对话框中包含文本和一个按钮，点击后关闭第二个自定义对话框。\n5. 对话框的打开和关闭通过CustomDialogController进行控制。\n*/\n\n// xxx.ets\n@CustomDialog\nstruct CustomDialogExampleTwo {\n  controllerTwo?: CustomDialogController // 控制第二个对话框的控制器\n  build() {\n    Column() {\n      Text('我是第二个弹窗')\n        .fontSize(30)\n        .height(100)\n      Button('点我关闭第二个弹窗')\n        .onClick(() => {\n          if (this.controllerTwo != undefined) {\n            this.controllerTwo.close() // 关闭第二个对话框\n          }\n        })\n        .margin(20)\n    }\n  }\n}\n\n@CustomDialog\n@Component\nstruct CustomDialogExample {\n  @Link textValue: string // 绑定文本输入框的值\n  @Link inputValue: string // 绑定输入框的值\n  dialogControllerTwo: CustomDialogController | null = new CustomDialogController({\n    builder: CustomDialogExampleTwo(),\n    alignment: DialogAlignment.Bottom,\n    onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n      console.info("reason=" + JSON.stringify(dismissDialogAction.reason))\n      console.log("dialog onWillDismiss")\n      if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n        dismissDialogAction.dismiss()\n      }\n      if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n        dismissDialogAction.dismiss()\n      }\n    },\n    offset: { dx: 0, dy: -25 }\n  })\n  controller?: CustomDialogController // 控制第一个对话框的控制器\n  cancel: () => void = () => {} // 取消按钮的回调函数\n  confirm: () => void = () => {} // 确认按钮的回调函数\n\n  build() {\n    Column() {\n      Text('Change text').fontSize(20).margin({ top: 10, bottom: 10 })\n      TextInput({ placeholder: '', text: this.textValue }).height(60).width('90%')\n        .onChange((value: string) => {\n          this.textValue = value // 更新文本输入框的值\n        })\n      Text('Whether to change a text?').fontSize(16).margin({ bottom: 10 })\n      Flex({ justifyContent: FlexAlign.SpaceAround }) {\n        Button('cancel')\n          .onClick(() => {\n            if (this.controller != undefined) {\n              this.controller.close() // 关闭第一个对话框\n              this.cancel() // 调用取消按钮的回调函数\n            }\n          }).backgroundColor(0xffffff).fontColor(Color.Black)\n        Button('confirm')\n          .onClick(() => {\n            if (this.controller != undefined) {\n              this.inputValue = this.textValue // 更新输入框的值\n              this.controller.close() // 关闭第一个对话框\n              this.confirm() // 调用确认按钮的回调函数\n            }\n          }).backgroundColor(0xffffff).fontColor(Color.Red)\n      }.margin({ bottom: 10 })\n\n      Button('点我打开第二个弹窗')\n        .onClick(() => {\n          if (this.dialogControllerTwo != null) {\n            this.dialogControllerTwo.open() // 打开第二个对话框\n          }\n        })\n        .margin(20)\n    }.borderRadius(10)\n  }\n}\n\n@Entry\n@Component\nstruct CustomDialogUser {\n  @State textValue: string = '' // 文本输入框的初始值\n  @State inputValue: string = 'click me' // 按钮的初始文本\n  dialogController: CustomDialogController | null = new CustomDialogController({\n    builder: CustomDialogExample({\n      cancel: ()=> { this.onCancel() },\n      confirm: ()=> { this.onAccept() },\n      textValue: $textValue,\n      inputValue: $inputValue\n    }),\n    cancel: this.exitApp,\n    autoCancel: True,\n    onWillDismiss:(dismissDialogAction: DismissDialogAction)=> {\n      console.info("reason=" + JSON.stringify(dismissDialogAction.reason))\n      console.log("dialog onWillDismiss")\n      if (dismissDialogAction.reason == DismissReason.PRESS_BACK) {\n        dismissDialogAction.dismiss()\n      }\n      if (dismissDialogAction.reason == DismissReason.TOUCH_OUTSIDE) {\n        dismissDialogAction.dismiss()\n      }\n    },\n    alignment: DialogAlignment.Bottom,\n    offset: { dx: 0, dy: -20 },\n    gridCount: 4,\n    customStyle: False,\n    cornerRadius: 10,\n  })\n\n  aboutToDisappear() {\n    this.dialogController = null // 在自定义组件即将析构销毁时将dialogController置空\n  }\n\n  onCancel() {\n    console.info('Callback when the first button is clicked') // 取消按钮的回调函数\n  }\n\n  onAccept() {\n    console.info('Callback when the second button is clicked') // 确认按钮的回调函数\n  }\n\n  exitApp() {\n    console.info('Click the callback in the blank area') // 点击空白区域的回调函数\n  }\n\n  build() {\n    Column() {\n      Button(this.inputValue)\n        .onClick(() => {\n          if (this.dialogController != null) {\n            this.dialogController.open() // 打开第一个对话框\n          }\n        }).backgroundColor(0x317aff)\n    }.width('100%').margin({ top: 5 })\n  }\n}"""
        ]
    },
    "CalendarPickerDialog": {

        "description": "点击日期弹出日历选择器弹窗，可选择弹窗内任意日期。",
        "interfaces": [
            {
                "description": "static show(options?: CalendarDialogOptions)定义日历选择器弹窗并弹出。",
                "params": {
                    "options": {
                        "type": "CalendarDialogOptions",
                        "required": False,
                        "description": "配置日历选择器弹窗的参数。"
                    }
                }
            }
        ],
        "attributes": {
        },
        "events": {},

        "examples": [
            """/*\n实现思路：\n本示例展示了如何使用CalendarPickerDialog组件来显示一个日历选择对话框。用户可以通过点击按钮来触发对话框的显示，并在对话框中选择日期。对话框提供了多种回调函数来处理用户的选择、取消、显示和隐藏等事件。\n\n总体功能与效果描述：\n用户点击按钮后，会弹出一个日历选择对话框，用户可以在对话框中选择日期。选择完成后，会触发相应的回调函数，并在控制台输出相关信息。\n*/\n\n// CalendarPickerDialogExample.ets\n@Entry\n@Component\nstruct CalendarPickerDialogExample {\n  // 初始化一个默认选择的日期\n  private selectedDate: Date = new Date('2024-04-23')\n\n  build() {\n    Column() {\n      Button("Show CalendarPicker Dialog")\n        .margin(20)\n        .onClick(() => {\n          // 点击按钮时，显示日历选择对话框\n          console.info("CalendarDialog.show")\n          CalendarPickerDialog.show({\n            selected: this.selectedDate, // 设置默认选择的日期\n            onAccept: (value) => {\n              // 用户确认选择日期时触发\n              console.info("calendar onAccept:" + JSON.stringify(value))\n            },\n            onCancel: () => {\n              // 用户取消选择时触发\n              console.info("calendar onCancel")\n            },\n            onChange: (value) => {\n              // 用户在日历中选择日期时触发\n              console.info("calendar onChange:" + JSON.stringify(value))\n            },\n            onDidAppear: () => {\n              // 对话框完全显示后触发\n              console.info("calendar onDidAppear")\n            },\n            onDidDisappear: () => {\n              // 对话框完全消失后触发\n              console.info("calendar onDidDisappear")\n            },\n            onWillAppear: () => {\n              // 对话框即将显示时触发\n              console.info("calendar onWillAppear")\n            },\n            onWillDisappear: () => {\n              // 对话框即将消失时触发\n              console.info("calendar onWillDisappear")\n            }\n          })\n        })\n    }.width('100%')\n  }\n}""",

            """/*\n实现思路：\n本示例展示了如何使用自定义样式的按钮来显示一个日历选择对话框。通过设置按钮的点击事件，调用日历选择对话框，并自定义对话框中接受和取消按钮的样式。\n\n总体功能与效果描述：\n用户点击按钮后，会弹出一个日历选择对话框，对话框中的接受和取消按钮具有自定义的样式，包括字体颜色、大小、背景颜色等。用户可以选择日期并接受或取消选择。\n*/\n\n// CalendarPickerDialogExample.ets\n@Entry\n@Component\nstruct CalendarPickerDialogExample {\n  // 初始化选中的日期为当前日期\n  private selectedDate: Date = new Date()\n\n  build() {\n    Column() {\n      // 创建一个按钮，点击时显示日历选择对话框\n      Button("Show CalendarPicker Dialog")\n        .margin(20) // 设置按钮的外边距\n        .onClick(() => {\n          console.info("CalendarDialog.show") // 输出日志信息\n          CalendarPickerDialog.show({\n            selected: this.selectedDate, // 设置初始选中的日期\n            acceptButtonStyle: { \n              type: ButtonType.Normal, \n              style: ButtonStyleMode.NORMAL, \n              role: ButtonRole.NORMAL, \n              fontColor: Color.Red, // 设置接受按钮的字体颜色为红色\n              fontSize: '26fp', // 设置接受按钮的字体大小\n              fontWeight: FontWeight.Bolder, // 设置接受按钮的字体加粗\n              fontStyle: FontStyle.Normal, // 设置接受按钮的字体样式为正常\n              fontFamily: 'sans-serif', // 设置接受按钮的字体家族\n              backgroundColor: '#80834511', // 设置接受按钮的背景颜色\n              borderRadius: 20 // 设置接受按钮的边框圆角\n            },\n            cancelButtonStyle: { \n              type: ButtonType.Normal, \n              style: ButtonStyleMode.NORMAL, \n              role: ButtonRole.NORMAL, \n              fontColor: Color.Blue, // 设置取消按钮的字体颜色为蓝色\n              fontSize: '16fp', // 设置取消按钮的字体大小\n              fontWeight: FontWeight.Normal, // 设置取消按钮的字体为正常\n              fontStyle: FontStyle.Italic, // 设置取消按钮的字体样式为斜体\n              fontFamily: 'sans-serif', // 设置取消按钮的字体家族\n              backgroundColor: '#50182431', // 设置取消按钮的背景颜色\n              borderRadius: 10 // 设置取消按钮的边框圆角\n            },\n            onAccept: (value) => {\n              console.info("calendar onAccept:" + JSON.stringify(value)) // 输出接受事件的日志信息\n            },\n            onCancel: () => {\n              console.info("calendar onCancel") // 输出取消事件的日志信息\n            },\n            onChange: (value) => {\n              console.info("calendar onChange:" + JSON.stringify(value)) // 输出日期变化事件的日志信息\n            },\n            onDidAppear: () => {\n              console.info("calendar onDidAppear") // 输出对话框显示后的日志信息\n            },\n            onDidDisappear: () => {\n              console.info("calendar onDidDisappear") // 输出对话框消失后的日志信息\n            },\n            onWillAppear: () => {\n              console.info("calendar onWillAppear") // 输出对话框即将显示的日志信息\n            },\n            onWillDisappear: () => {\n              console.info("calendar onWillDisappear") // 输出对话框即将消失的日志信息\n            }\n          })\n        })\n    }.width('100%') // 设置列的宽度为100%\n  }\n}"""
        ],
    },
    "DatePickerDialog": {
        "description": "日期滑动选择器弹窗，用于在弹窗上展示日期选择器。",
        "interfaces": [
            {
                "description": "DatePickerDialog.show(options?: DatePickerDialogOptions)",
                "params": {
                    "options": {
                        "type": "DatePickerDialogOptions",
                        "required": False,
                        "description": "配置日期选择器弹窗的参数。"
                    }
                }
            }
        ],
        "attributes": {},
        "events": {},
        "examples": [
            """/*\n实现思路：\n本示例展示了如何使用自定义样式的按钮来触发一个日期选择对话框。通过设置按钮的点击事件，弹出一个日期选择对话框，并自定义对话框中的各种样式，包括文本样式、按钮样式等。同时，处理对话框的各种回调事件，如日期选择确认、取消、日期变化等。\n\n总体功能与效果描述：\n用户点击按钮后，弹出一个自定义样式的日期选择对话框。用户可以选择日期，并通过自定义的按钮样式确认或取消选择。选择结果会通过回调函数进行处理，并在控制台输出相关信息。\n*/\n\n// xxx.ets\n@Entry\n@Component\nstruct DatePickerDialogExample {\n  // 初始化选中的日期\n  selectedDate: Date = new Date("2010-1-1")\n\n  build() {\n    Column() {\n      // 创建一个按钮，点击时触发日期选择对话框\n      Button("DatePickerDialog")\n        .margin(20) // 设置按钮的边距\n        .onClick(() => {\n          // 显示日期选择对话框\n          DatePickerDialog.show({\n            start: new Date("2000-1-1"), // 设置日期选择范围的开始日期\n            end: new Date("2100-12-31"), // 设置日期选择范围的结束日期\n            selected: this.selectedDate, // 设置初始选中的日期\n            showTime: True, // 显示时间选择\n            useMilitaryTime: False, // 不使用24小时制\n            // 设置对话框中未选中日期的文本样式\n            disappearTextStyle: { color: Color.Pink, font: { size: '22fp', weight: FontWeight.Bold } },\n            // 设置对话框中选中日期的文本样式\n            textStyle: { color: '#ff00ff00', font: { size: '18fp', weight: FontWeight.Normal } },\n            // 设置对话框中选中日期的文本样式\n            selectedTextStyle: { color: '#ff182431', font: { size: '14fp', weight: FontWeight.Regular } },\n            // 设置确认按钮的样式\n            acceptButtonStyle: { type: ButtonType.Normal, style: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL, fontColor: Color.Red,\n              fontSize: '26fp', fontWeight: FontWeight.Bolder, fontStyle: FontStyle.Normal, fontFamily: 'sans-serif', backgroundColor: '#80834511',\n              borderRadius: 20 },\n            // 设置取消按钮的样式\n            cancelButtonStyle: { type: ButtonType.Normal, style: ButtonStyleMode.NORMAL, role: ButtonRole.NORMAL, fontColor: Color.Blue,\n              fontSize: '16fp', fontWeight: FontWeight.Normal, fontStyle: FontStyle.Italic, fontFamily: 'sans-serif', backgroundColor: '#50182431',\n              borderRadius: 10 },\n            // 确认按钮点击时的回调函数\n            onDateAccept: (value: Date) => {\n              this.selectedDate = value // 更新选中的日期\n              console.info("DatePickerDialog:onDateAccept()" + value.toString()) // 输出确认的日期\n            },\n            // 取消按钮点击时的回调函数\n            onCancel: () => {\n              console.info("DatePickerDialog:onCancel()") // 输出取消操作\n            },\n            // 日期变化时的回调函数\n            onDateChange: (value: Date) => {\n              console.info("DatePickerDialog:onDateChange()" + value.toString()) // 输出变化的日期\n            },\n            // 对话框显示时的回调函数\n            onDidAppear: () => {\n              console.info("DatePickerDialog:onDidAppear()") // 输出对话框显示\n            },\n            // 对话框消失时的回调函数\n            onDidDisappear: () => {\n              console.info("DatePickerDialog:onDidDisappear()") // 输出对话框消失\n            },\n            // 对话框即将显示时的回调函数\n            onWillAppear: () => {\n              console.info("DatePickerDialog:onWillAppear()") // 输出对话框即将显示\n            },\n            // 对话框即将消失时的回调函数\n            onWillDisappear: () => {\n              console.info("DatePickerDialog:onWillDisappear()") // 输出对话框即将消失\n            }\n          })\n        })\n    }.width('100%') // 设置列的宽度为100%\n  }\n}""",

            """/*\n实现思路：\n本示例展示了如何在鸿蒙ArkUI中使用DatePickerDialog组件，包括显示一个标准的日期选择对话框和一个农历日期选择对话框。通过按钮触发对话框的显示，并在对话框中选择日期后，更新选中的日期并打印相关日志。\n\n总体功能与效果描述：\n用户可以通过点击按钮显示日期选择对话框，选择日期后，对话框会关闭并更新选中的日期。对话框支持标准的公历日期选择和农历日期选择，并提供了多种事件回调以处理用户交互。\n*/\n\n// DatePickerDialogExample.ets\n@Entry\n@Component\nstruct DatePickerDialogExample {\n  // 初始化选中的日期为2010年1月1日\n  selectedDate: Date = new Date("2010-1-1")\n\n  build() {\n    Column() {\n      // 按钮用于触发标准日期选择对话框\n      Button("DatePickerDialog")\n        .margin(20)\n        .onClick(() => {\n          DatePickerDialog.show({\n            // 设置日期选择范围\n            start: new Date("2000-1-1"),\n            end: new Date("2100-12-31"),\n            // 初始选中的日期\n            selected: this.selectedDate,\n            // 显示时间选择\n            showTime: True,\n            // 不使用24小时制\n            useMilitaryTime: False,\n            // 对话框消失时的文本样式\n            disappearTextStyle: { color: Color.Pink, font: { size: '22fp', weight: FontWeight.Bold } },\n            // 普通文本样式\n            textStyle: { color: '#ff00ff00', font: { size: '18fp', weight: FontWeight.Normal } },\n            // 选中日期的文本样式\n            selectedTextStyle: { color: '#ff182431', font: { size: '14fp', weight: FontWeight.Regular } },\n            // 用户确认选择日期时的回调\n            onDateAccept: (value: Date) => {\n              this.selectedDate = value\n              console.info("DatePickerDialog:onDateAccept()" + value.toString())\n            },\n            // 用户取消选择时的回调\n            onCancel: () => {\n              console.info("DatePickerDialog:onCancel()")\n            },\n            // 日期变化时的回调\n            onDateChange: (value: Date) => {\n              console.info("DatePickerDialog:onDateChange()" + value.toString())\n            },\n            // 对话框显示时的回调\n            onDidAppear: () => {\n              console.info("DatePickerDialog:onDidAppear()")\n            },\n            // 对话框消失时的回调\n            onDidDisappear: () => {\n              console.info("DatePickerDialog:onDidDisappear()")\n            },\n            // 对话框即将显示时的回调\n            onWillAppear: () => {\n              console.info("DatePickerDialog:onWillAppear()")\n            },\n            // 对话框即将消失时的回调\n            onWillDisappear: () => {\n              console.info("DatePickerDialog:onWillDisappear()")\n            }\n          })\n        })\n\n      // 按钮用于触发农历日期选择对话框\n      Button("Lunar DatePickerDialog")\n        .margin(20)\n        .onClick(() => {\n          DatePickerDialog.show({\n            // 设置日期选择范围\n            start: new Date("2000-1-1"),\n            end: new Date("2100-12-31"),\n            // 初始选中的日期\n            selected: this.selectedDate,\n            // 使用农历日期选择\n            lunar: True,\n            // 对话框消失时的文本样式\n            disappearTextStyle: { color: Color.Pink, font: { size: '22fp', weight: FontWeight.Bold } },\n            // 普通文本样式\n            textStyle: { color: '#ff00ff00', font: { size: '18fp', weight: FontWeight.Normal } },\n            // 选中日期的文本样式\n            selectedTextStyle: { color: '#ff182431', font: { size: '14fp', weight: FontWeight.Regular } },\n            // 用户确认选择日期时的回调\n            onDateAccept: (value: Date) => {\n              this.selectedDate = value\n              console.info("DatePickerDialog:onDateAccept()" + value.toString())\n            },\n            // 用户取消选择时的回调\n            onCancel: () => {\n              console.info("DatePickerDialog:onCancel()")\n            },\n            // 日期变化时的回调\n            onDateChange: (value: Date) => {\n              console.info("DatePickerDialog:onDateChange()" + value.toString())\n            },\n            // 对话框显示时的回调\n            onDidAppear: () => {\n              console.info("DatePickerDialog:onDidAppear()")\n            },\n            // 对话框消失时的回调\n            onDidDisappear: () => {\n              console.info("DatePickerDialog:onDidDisappear()")\n            },\n            // 对话框即将显示时的回调\n            onWillAppear: () => {\n              console.info("DatePickerDialog:onWillAppear()")\n            },\n            // 对话框即将消失时的回调\n            onWillDisappear: () => {\n              console.info("DatePickerDialog:onWillDisappear()")\n            }\n          })\n        })\n    }.width('100%')\n  }\n}"""
        ]
    },
    "TimePickerDialog": {
        "description": "时间滑动选择器弹窗 (TimePickerDialog) 是一个全局UI方法，用于以24小时的时间区间创建时间滑动选择器，并展示在弹窗上。",
        "interfaces": [
            {
                "description": "static show(options?: TimePickerDialogOptions) 定义时间滑动选择器弹窗并弹出。",
                "params": {
                    "options": {
                        "type": "TimePickerDialogOptions",
                        "required": False,
                        "description": "配置时间选择器弹窗的参数。"
                    }
                }
            }
        ],
        "attributes": {},
        "events": {},
        "examples": [
            """/*\n实现思路：\n本示例展示了如何在鸿蒙系统中使用ArkUI框架创建一个带有自定义样式的TimePickerDialog。通过点击按钮，可以弹出一个时间选择对话框，用户可以选择时间，并且对话框的样式（包括文本样式、按钮样式等）都可以自定义。\n\n总体功能与效果描述：\n用户点击按钮后，会弹出一个24小时制的时间选择对话框。对话框中的文本样式、按钮样式等都可以根据需求进行自定义，以满足不同的设计需求。\n*/\n\n// TimePickerDialogExample.ets\n@Entry\n@Component\nstruct TimePickerDialogExample {\n  // 初始选择时间为2020年12月25日 08:30:00\n  private selectTime: Date = new Date('2020-12-25T08:30:00')\n\n  build() {\n    Column() {\n      // 创建一个按钮，点击后弹出时间选择对话框\n      Button("TimePickerDialog 24小时制")\n        .margin(20) // 设置按钮的外边距\n        .onClick(() => {\n          // 显示时间选择对话框\n          TimePickerDialog.show({\n            selected: this.selectTime, // 初始选择的时间\n            useMilitaryTime: True, // 使用24小时制\n            disappearTextStyle: { color: Color.Red, font: { size: 15, weight: FontWeight.Lighter } }, // 对话框消失时的文本样式\n            textStyle: { color: Color.Black, font: { size: 20, weight: FontWeight.Normal } }, // 普通文本样式\n            selectedTextStyle: { color: Color.Blue, font: { size: 30, weight: FontWeight.Bolder } }, // 选中时间的文本样式\n            acceptButtonStyle: { \n              type: ButtonType.Normal, \n              style: ButtonStyleMode.NORMAL, \n              role: ButtonRole.NORMAL, \n              fontColor: Color.Red, \n              fontSize: '26fp', \n              fontWeight: FontWeight.Bolder, \n              fontStyle: FontStyle.Normal, \n              fontFamily: 'sans-serif', \n              backgroundColor: '#80834511', \n              borderRadius: 20 \n            }, // 确认按钮的样式\n            cancelButtonStyle: { \n              type: ButtonType.Normal, \n              style: ButtonStyleMode.NORMAL, \n              role: ButtonRole.NORMAL, \n              fontColor: Color.Blue, \n              fontSize: '16fp', \n              fontWeight: FontWeight.Normal, \n              fontStyle: FontStyle.Italic, \n              fontFamily: 'sans-serif', \n              backgroundColor: '#50182431', \n              borderRadius: 10 \n            }, // 取消按钮的样式\n            onAccept: (value: TimePickerResult) => {\n              // 用户确认选择的时间\n              if (value.hour != undefined && value.minute != undefined) {\n                this.selectTime.setHours(value.hour, value.minute)\n                console.info("TimePickerDialog:onAccept()" + JSON.stringify(value))\n              }\n            },\n            onCancel: () => {\n              // 用户取消选择\n              console.info("TimePickerDialog:onCancel()")\n            },\n            onChange: (value: TimePickerResult) => {\n              // 用户改变选择的时间\n              console.info("TimePickerDialog:onChange()" + JSON.stringify(value))\n            },\n            onDidAppear: () => {\n              // 对话框已经显示\n              console.info("TimePickerDialog:onDidAppear()")\n            },\n            onDidDisappear: () => {\n              // 对话框已经消失\n              console.info("TimePickerDialog:onDidDisappear()")\n            },\n            onWillAppear: () => {\n              // 对话框即将显示\n              console.info("TimePickerDialog:onWillAppear()")\n            },\n            onWillDisappear: () => {\n              // 对话框即将消失\n              console.info("TimePickerDialog:onWillDisappear()")\n            }\n          })\n        })\n    }.width('100%') // 设置列的宽度为100%\n  }\n}""",

            """/*\n实现思路：\n本示例展示了如何在鸿蒙ArkUI中使用TimePickerDialog组件，包括12小时制和24小时制的时间选择器对话框。通过按钮触发对话框的显示，并在对话框中选择时间后，更新选择的时间并打印相关日志。\n\n总体功能与效果描述：\n用户可以通过点击按钮显示时间选择对话框，选择时间后，对话框会关闭并更新选择的时间。对话框支持12小时制和24小时制，并提供了多种样式和事件回调。\n*/\n\n// TimePickerDialogExample.ets\n@Entry\n@Component\nstruct TimePickerDialogExample {\n  // 初始选择时间为2020年12月25日 08:30:00\n  private selectTime: Date = new Date('2020-12-25T08:30:00')\n\n  build() {\n    Column() {\n      // 按钮触发12小时制时间选择对话框\n      Button("TimePickerDialog 12小时制")\n        .margin(20)\n        .onClick(() => {\n          TimePickerDialog.show({\n            selected: this.selectTime, // 初始选择时间\n            disappearTextStyle: { color: Color.Red, font: { size: 15, weight: FontWeight.Lighter } }, // 对话框消失时的文本样式\n            textStyle: { color: Color.Black, font: { size: 20, weight: FontWeight.Normal } }, // 普通文本样式\n            selectedTextStyle: { color: Color.Blue, font: { size: 30, weight: FontWeight.Bolder } }, // 选中时间的文本样式\n            onAccept: (value: TimePickerResult) => {\n              // 设置selectTime为按下确定按钮时的时间，这样当弹窗再次弹出时显示选中的为上一次确定的时间\n              if (value.hour != undefined && value.minute != undefined) {\n                this.selectTime.setHours(value.hour, value.minute)\n                console.info("TimePickerDialog:onAccept()" + JSON.stringify(value))\n              }\n            },\n            onCancel: () => {\n              console.info("TimePickerDialog:onCancel()")\n            },\n            onChange: (value: TimePickerResult) => {\n              console.info("TimePickerDialog:onChange()" + JSON.stringify(value))\n            },\n            onDidAppear: () => {\n              console.info("TimePickerDialog:onDidAppear()")\n            },\n            onDidDisappear: () => {\n              console.info("TimePickerDialog:onDidDisappear()")\n            },\n            onWillAppear: () => {\n              console.info("TimePickerDialog:onWillAppear()")\n            },\n            onWillDisappear: () => {\n              console.info("TimePickerDialog:onWillDisappear()")\n            }\n          })\n        })\n\n      // 按钮触发24小时制时间选择对话框\n      Button("TimePickerDialog 24小时制")\n        .margin(20)\n        .onClick(() => {\n          TimePickerDialog.show({\n            selected: this.selectTime, // 初始选择时间\n            useMilitaryTime: True, // 使用24小时制\n            disappearTextStyle: { color: Color.Red, font: { size: 15, weight: FontWeight.Lighter } }, // 对话框消失时的文本样式\n            textStyle: { color: Color.Black, font: { size: 20, weight: FontWeight.Normal } }, // 普通文本样式\n            selectedTextStyle: { color: Color.Blue, font: { size: 30, weight: FontWeight.Bolder } }, // 选中时间的文本样式\n            onAccept: (value: TimePickerResult) => {\n              if (value.hour != undefined && value.minute != undefined) {\n                this.selectTime.setHours(value.hour, value.minute)\n                console.info("TimePickerDialog:onAccept()" + JSON.stringify(value))\n              }\n            },\n            onCancel: () => {\n              console.info("TimePickerDialog:onCancel()")\n            },\n            onChange: (value: TimePickerResult) => {\n              console.info("TimePickerDialog:onChange()" + JSON.stringify(value))\n            },\n            onDidAppear: () => {\n              console.info("TimePickerDialog:onDidAppear()")\n            },\n            onDidDisappear: () => {\n              console.info("TimePickerDialog:onDidDisappear()")\n            },\n            onWillAppear: () => {\n              console.info("TimePickerDialog:onWillAppear()")\n            },\n            onWillDisappear: () => {\n              console.info("TimePickerDialog:onWillDisappear()")\n            }\n          })\n        })\n    }.width('100%')\n  }\n}"""
        ]
    },
    "TextPickerDialog": {
        "description": "文本滑动选择器弹窗，用于在指定的选择范围内创建文本选择器并展示在弹窗上。",
        "interfaces": [
            {
                "description": "static show(options?: TextPickerDialogOptions) 定义文本滑动选择器弹窗并弹出。",
                "params": {
                    "options": {
                        "type": "TextPickerDialogOptions",
                        "required": False,
                        "description": "配置文本选择器弹窗的参数。"
                    }
                }
            }
        ],
        "attributes": {},
        "events": {},
        "examples": [
            """/*\n实现思路：\n本示例展示了如何使用TextPickerDialog组件，通过点击按钮弹出一个文本选择对话框，用户可以在对话框中选择一个选项，并在点击确定后将选中的文本显示在页面上。\n\n总体功能与效果描述：\n用户点击按钮后，弹出一个包含多个文本选项的对话框，用户可以选择一个选项并点击确定，选中的文本将显示在页面上。同时，对话框提供了多种回调函数，用于处理用户操作的不同阶段。\n*/\n\n// xxx.ets\n@Entry\n@Component\nstruct TextPickerDialogExample {\n  // 定义选中的索引，初始值为0\n  private select: number | number[] = 0\n  // 定义文本选项数组\n  private fruits: string[] = ['apple1', 'orange2', 'peach3', 'grape4', 'banana5']\n  // 定义状态变量，用于显示选中的文本\n  @State v: string = ''\n\n  build() {\n    Row() {\n      Column() {\n        // 创建一个按钮，按钮文本显示当前选中的文本\n        Button("TextPickerDialog:" + this.v)\n          .margin(20)\n          .onClick(() => {\n            // 显示文本选择对话框\n            TextPickerDialog.show({\n              // 设置对话框的选项范围\n              range: this.fruits,\n              // 设置初始选中的索引\n              selected: this.select,\n              // 设置对话框消失时的文本样式\n              disappearTextStyle: {color: Color.Red, font: {size: 15, weight: FontWeight.Lighter}},\n              // 设置对话框中文本的默认样式\n              textStyle: {color: Color.Black, font: {size: 20, weight: FontWeight.Normal}},\n              // 设置选中项的文本样式\n              selectedTextStyle: {color: Color.Blue, font: {size: 30, weight: FontWeight.Bolder}},\n              // 点击确定按钮时的回调函数\n              onAccept: (value: TextPickerResult) => {\n                // 设置select为按下确定按钮时候的选中项index\n                this.select = value.index\n                console.log(this.select + '')\n                // 点击确定后，被选到的文本数据展示到页面\n                this.v = value.value as string\n                console.info("TextPickerDialog:onAccept()" + JSON.stringify(value))\n              },\n              // 点击取消按钮时的回调函数\n              onCancel: () => {\n                console.info("TextPickerDialog:onCancel()")\n              },\n              // 选项改变时的回调函数\n              onChange: (value: TextPickerResult) => {\n                console.info("TextPickerDialog:onChange()" + JSON.stringify(value))\n              },\n              // 对话框出现时的回调函数\n              onDidAppear: () => {\n                console.info("TextPickerDialog:onDidAppear()")\n              },\n              // 对话框消失时的回调函数\n              onDidDisappear: () => {\n                console.info("TextPickerDialog:onDidDisappear()")\n              },\n              // 对话框即将出现时的回调函数\n              onWillAppear: () => {\n                console.info("TextPickerDialog:onWillAppear()")\n              },\n              // 对话框即将消失时的回调函数\n              onWillDisappear: () => {\n                console.info("TextPickerDialog:onWillDisappear()")\n              }\n            })\n          })\n      }.width('100%')\n    }.height('100%')\n  }\n}""",

            """/*\n实现思路：\n本示例展示了如何使用TextPickerDialog组件，通过自定义按钮样式和文本样式来创建一个文本选择对话框。用户可以通过点击按钮触发对话框，选择列表中的项目，并在点击确定后将选中的文本显示在页面上。\n\n总体功能与效果描述：\n- 显示一个按钮，点击按钮后弹出一个文本选择对话框。\n- 对话框中包含一个文本选择列表，用户可以选择列表中的项目。\n- 对话框中的按钮和文本样式可以自定义。\n- 点击确定按钮后，选中的文本会显示在页面上。\n*/\n\n// xxx.ets\n@Entry\n@Component\nstruct TextPickerDialogExample {\n  // 定义选择的索引或索引数组，初始值为0\n  private select: number | number[] = 0\n  // 定义文本选择列表的内容\n  private fruits: string[] = ['apple1', 'orange2', 'peach3', 'grape4', 'banana5']\n  // 定义状态变量v，用于存储选中的文本\n  @State v: string = ''\n\n  build() {\n    Row() {\n      Column() {\n        // 创建一个按钮，按钮文本显示当前选中的文本\n        Button("TextPickerDialog:" + this.v)\n          .margin(20)\n          .onClick(() => {\n            // 显示文本选择对话框\n            TextPickerDialog.show({\n              // 设置文本选择列表的范围\n              range: this.fruits,\n              // 设置初始选中的项目\n              selected: this.select,\n              // 设置对话框消失时的文本样式\n              disappearTextStyle: {color: Color.Red, font: {size: 15, weight: FontWeight.Lighter}},\n              // 设置对话框中文本的默认样式\n              textStyle: {color: Color.Black, font: {size: 20, weight: FontWeight.Normal}},\n              // 设置选中项目的文本样式\n              selectedTextStyle: {color: Color.Blue, font: {size: 30, weight: FontWeight.Bolder}},\n              // 设置确定按钮的样式\n              acceptButtonStyle: { \n                type: ButtonType.Normal, \n                style: ButtonStyleMode.NORMAL, \n                role: ButtonRole.NORMAL, \n                fontColor: Color.Red,\n                fontSize: '26fp', \n                fontWeight: FontWeight.Bolder, \n                fontStyle: FontStyle.Normal, \n                fontFamily: 'sans-serif', \n                backgroundColor: '#80834511',\n                borderRadius: 20 \n              },\n              // 设置取消按钮的样式\n              cancelButtonStyle: { \n                type: ButtonType.Normal, \n                style: ButtonStyleMode.NORMAL, \n                role: ButtonRole.NORMAL, \n                fontColor: Color.Blue,\n                fontSize: '16fp', \n                fontWeight: FontWeight.Normal, \n                fontStyle: FontStyle.Italic, \n                fontFamily: 'sans-serif', \n                backgroundColor: '#50182431',\n                borderRadius: 10 \n              },\n              // 点击确定按钮时的回调函数\n              onAccept: (value: TextPickerResult) => {\n                // 设置select为按下确定按钮时候的选中项index\n                this.select = value.index\n                console.log(this.select + '')\n                // 点击确定后，被选到的文本数据展示到页面\n                this.v = value.value as string\n                console.info("TextPickerDialog:onAccept()" + JSON.stringify(value))\n              },\n              // 点击取消按钮时的回调函数\n              onCancel: () => {\n                console.info("TextPickerDialog:onCancel()")\n              },\n              // 选择项目改变时的回调函数\n              onChange: (value: TextPickerResult) => {\n                console.info("TextPickerDialog:onChange()" + JSON.stringify(value))\n              },\n              // 对话框出现时的回调函数\n              onDidAppear: () => {\n                console.info("TextPickerDialog:onDidAppear()")\n              },\n              // 对话框消失时的回调函数\n              onDidDisappear: () => {\n                console.info("TextPickerDialog:onDidDisappear()")\n              },\n              // 对话框即将出现时的回调函数\n              onWillAppear: () => {\n                console.info("TextPickerDialog:onWillAppear()")\n              },\n              // 对话框即将消失时的回调函数\n              onWillDisappear: () => {\n                console.info("TextPickerDialog:onWillDisappear()")\n              }\n            })\n          })\n      }.width('100%')\n    }.height('100%')\n  }\n}"""
        ]
    }
}
