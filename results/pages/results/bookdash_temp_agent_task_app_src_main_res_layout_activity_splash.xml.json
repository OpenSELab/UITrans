{"android_layout": {"name": "app/src/main/res/layout/activity_splash.xml", "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:orientation=\"vertical\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\">\n\n    <ImageView\n        android:layout_width=\"150dp\"\n        android:layout_height=\"200dp\"\n        android:id=\"@+id/imageView\"\n        android:layout_gravity=\"center_horizontal\"\n        android:layout_centerVertical=\"true\"\n        android:scaleType=\"fitCenter\"\n        android:layout_centerHorizontal=\"true\"\n        android:src=\"@drawable/bookdash_icon\"/>\n\n</RelativeLayout>", "java": "package org.bookdash.android.presentation.splash;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport org.bookdash.android.R;\nimport org.bookdash.android.di.Injection;\nimport org.bookdash.android.presentation.main.MainActivity;\n\nimport za.co.riggaroo.materialhelptutorial.tutorial.MaterialTutorialActivity;\n\n/**\n * @author Rebecca Franks\n * @since 2015/07/16 3:16 PM\n */\npublic class SplashActivity extends AppCompatActivity implements SplashContract.View {\n    private static final int SPLASH_SCREEN_REQUEST_CODE = 1;\n    private SplashContract.UserActionsListener splashPresenter;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_splash);\n        splashPresenter = new SplashPresenter(this, Injection.provideSettingsRepo(this));\n        showSplashAfterDelay();\n    }\n\n    private void showSplashAfterDelay() {\n        (new Handler()).postDelayed(new Runnable() {\n            @Override\n            public void run() {\n                splashPresenter.loadSplash();\n            }\n        }, 1000);\n\n    }\n\n    @Override\n    public void loadTutorial() {\n        Intent mainAct = new Intent(SplashActivity.this, MaterialTutorialActivity.class);\n        mainAct.putParcelableArrayListExtra(MaterialTutorialActivity.MATERIAL_TUTORIAL_ARG_TUTORIAL_ITEMS, splashPresenter.getTutorialItems(this));\n        startActivityForResult(mainAct, SPLASH_SCREEN_REQUEST_CODE);\n    }\n\n\n    @Override\n    public void loadMainScreen() {\n        Intent mainAct = new Intent(SplashActivity.this, MainActivity.class);\n        startActivity(mainAct);\n        finish();\n    }\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        //    super.onActivityResult(requestCode, resultCode, data);\n        if (resultCode == RESULT_OK && requestCode == SPLASH_SCREEN_REQUEST_CODE) {\n            splashPresenter.finishedTutorial();\n\n        }\n    }\n}\n", "contains": [], "mock_data": {}, "source": "bookdash"}, "breakdown_android_layout": {"tasks": [{"description": "实现安卓布局组件 ImageView 的转译，并保持布局和样式尽可能一致。", "done": false, "component": {"name": ["ImageView"], "content": "<ImageView\n    android:layout_width=\"150dp\"\n    android:layout_height=\"200dp\"\n    android:id=\"@+id/imageView\"\n    android:layout_gravity=\"center_horizontal\"\n    android:layout_centerVertical=\"true\"\n    android:scaleType=\"fitCenter\"\n    android:layout_centerHorizontal=\"true\"\n    android:src=\"@drawable/bookdash_icon\"/>"}}]}, "translations": [{"description": "实现安卓布局组件 ImageView 的转译，并保持布局和样式尽可能一致。", "source_component": "ImageView", "source_component_code": "<ImageView\n    android:layout_width=\"150dp\"\n    android:layout_height=\"200dp\"\n    android:id=\"@+id/imageView\"\n    android:layout_gravity=\"center_horizontal\"\n    android:layout_centerVertical=\"true\"\n    android:scaleType=\"fitCenter\"\n    android:layout_centerHorizontal=\"true\"\n    android:src=\"@drawable/bookdash_icon\"/>", "source_component_description": "图像视图，宽度为150vp，高度为200vp，水平居中对齐，垂直居中对齐，缩放类型为适应中心，引用资源app.media.bookdash_icon作为图像源。", "target_component": ["Image", "Column", "Row"], "target_component_code": "Column() {\n  Row() {\n    Image($r('app.media.bookdash_icon'))\n      .width('150vp')\n      .height('200vp')\n      .objectFit(ImageFit.Cover)\n  }\n  .width('100%')\n  .justifyContent(FlexAlign.Center)\n}\n.width('100%')\n.height('100%')\n.justifyContent(FlexAlign.Center)\n.alignItems(VerticalAlign.Center)", "target_component_description": "实现了一个图像视图，图像视图的宽度和高度分别为150vp和200vp，图像视图在水平和垂直方向上都居中对齐，图像的缩放类型为适应中心，图像源引用了 app.media.bookdash_icon 资源。\n\n图像视图，宽度为150vp，高度为200vp，水平居中对齐，垂直居中对齐，缩放类型为适应中心，引用资源app.media.bookdash_icon作为图像源。", "explanation": "首先，使用Column组件作为根容器，确保整个布局在垂直方向上居中。然后，在Column内部嵌套一个Row组件，用于在水平方向上居中对齐子组件。在Row内部放置Image组件，设置其宽度为150vp，高度为200vp，并使用objectFit(ImageFit.Cover)来确保图像适应视图的中心。最后，通过设置Column和Row的justifyContent和alignItems属性，确保Image组件在水平和垂直方向上都居中对齐。"}], "translation_agent_task": {"id": "dHzyvXU843vLxJikjFEsnP", "description": "转译安卓布局组件", "subtasks": [{"id": "dFssRbAAwvTM2sA9fbg3qK", "description": "根据转译表转译组件v1", "subtasks": [{"id": "j7EytsKLpSoSZrYVgrfdZo", "description": "生成组件描述", "subtasks": [], "details": {"prompt": "请根据以下安卓XML代码编写一个详细的通用描述和功能描述，供其他开发框架如iOS或鸿蒙的开发者实现同样的布局样式。描述应包含以下内容：\n\n布局属性：包括组件的宽度、高度、边距、填充、对齐方式等。\n组件样式和外观：包括颜色、字体、透明度、圆角等。\n组件排列和嵌套关系：例如垂直或水平布局、组件之间的对齐方式、父子关系。\n组件功能和交互：例如按钮的点击事件、输入框的输入验证逻辑等。\n引用的资源：如自定义的背景图片、颜色等，请指出资源路径或名称。\n请避免使用安卓特有的术语，而是使用通用的描述语言，确保其他框架的开发者可以理解并实现同样的布局和功能，例如：match_parent描述为占满父容器的宽度。同时，请确保描述涵盖每个组件的属性、样式和功能。\n\n你在编写通用描述和功能描述时，需要遵守以下规则：\n## 规则#1\n这条规则适用于所有组件的宽度、高度、外边距、内边距、字体大小等属性的单位。\n对于高度、宽度、外边距、内边距等等属性的单位应全部采用vp；\n对于字体大小等属性的单位应全部采用fp。\n\n## 规则#2\n这条规则适用于字体设置。\n若安卓组件中存在字体集的设置，应将其修改为'HarmonyOS Sans'字体集；\n若安卓组件中不存在字体集的设置，请保持不变。\n\n## 规则#3\n这条规则适用于资源引用。\n对于引用@drawable的资源，请将其修改为media;\n对于引用@color的资源，请将其修改为color;\n对于引用@strings的资源，请将其修改为string;\n对于引用@dimen的资源，请将其修改为float;\n对于引用@array的资源，如果资源是字符串数组，请将其修改为strarray，如果资源是整型数组，请将其修改为intarray。\n\n## 规则#4\n这条规则适用于通用描述的顺序。\n通用描述的顺序应该按照组件的逻辑顺序进行排列，确保描述的完整性和逻辑性。\n每个组件的描述应该包括布局属性、样式和外观、排列和嵌套关系、功能和交互、引用的资源等内容。\n\n## 规则#5\n这条规则适用于通用描述的内容。\n通用描述应该按照组件的嵌套关系进行描述，从外到内逐级描述每个组件的属性、样式和功能。\n请忽略有关主题的描述。\n\n## 规则6\n这条规则适用于功能效果描述。\n功能效果描述应该侧重于页面呈现的效果，包括组件的默认属性和默认行为，而不是具体的代码实现细节。\n例如：安卓复选框是包含文字的，而鸿蒙复选框是不包含文字的，因此在功能效果描述中应该添加复选框右侧文字的描述。\n安卓组件：\n<ChekBox\n    android:id=\"@+id/checkbox\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Check me\" />\n功能效果描述：一个复选框，右侧包含文字“Check me”，整体宽度和高度自适应。\n\n以下是一个可供参考的示例：\n安卓XML示例代码：\n```xml\n<LinearLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    android:padding=\"16dp\"\n    android:background=\"@drawable/custom_background\">\n\n    <TextView\n        android:id=\"@+id/title\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World\"\n        android:textColor=\"@color/primary_text\"\n        android:textSize=\"18sp\" />\n\n    <Button\n        android:id=\"@+id/submit_button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Submit\"\n        android:backgroundTint=\"#FF5722\" />\n</LinearLayout>\n```\n通用描述示例：\n- 垂直线性容器，宽度占满父容器，高度自适应，内边距为16vp，背景引用资源app.media.custom_background。\n    - 文本视图，宽度自适应，高度自适应，文本内容为“Hello World”，文本颜色引用资源app.color.primary_text，字体大小为18fp。\n    - 按钮，宽度自适应，高度自适应，文本内容为“Submit”，背景颜色为#FF5722。\n\n功能效果描述示例：\n实现了一个垂直线性容器，在容器中包含一个文本视图和一个按钮，其中文本视图，高度和宽度自适应，显示“Hello World”，字体颜色引用了 app.color.primary_text 资源，字体大小为18fp；在文本视图的正下方有一个按钮，按钮宽度和高度自适应，按钮显示“Submit”，背景颜色为 #FF5722。\n\n安卓XML代码如下：\n<ImageView\n    android:layout_width=\"150dp\"\n    android:layout_height=\"200dp\"\n    android:id=\"@+id/imageView\"\n    android:layout_gravity=\"center_horizontal\"\n    android:layout_centerVertical=\"true\"\n    android:scaleType=\"fitCenter\"\n    android:layout_centerHorizontal=\"true\"\n    android:src=\"@drawable/bookdash_icon\"/>\n请根据以上安卓XML代码编写一个通用描述，然后编写这页面实现的功能效果描述。\n\n**重要**：请确保通用描述和功能效果描述的准确性和完整性，确保其他开发者可以根据描述实现相同的布局和功能。\n", "component_description": {"layout_description": "图像视图，宽度为150vp，高度为200vp，水平居中对齐，垂直居中对齐，缩放类型为适应中心，引用资源app.media.bookdash_icon作为图像源。", "function_description": "实现了一个图像视图，图像视图的宽度和高度分别为150vp和200vp，图像视图在水平和垂直方向上都居中对齐，图像的缩放类型为适应中心，图像源引用了 app.media.bookdash_icon 资源。"}}}, {"id": "CcQrTN5G366gE4j9ECmVXm", "description": "查询组件文档", "subtasks": [{"id": "5edtFbqhMxztLNg3aMovQ4", "description": "生成组件查询", "subtasks": [], "details": {"prompt": "你在一家软件公司工作，你被指派去为将安卓组件转译为鸿蒙ArkUI代码。\n\n\n待转译的安卓组件如下：\n# ['ImageView']\n功能效果描述：实现了一个图像视图，图像视图的宽度和高度分别为150vp和200vp，图像视图在水平和垂直方向上都居中对齐，图像的缩放类型为适应中心，图像源引用了 app.media.bookdash_icon 资源。\n通用布局描述：图像视图，宽度为150vp，高度为200vp，水平居中对齐，垂直居中对齐，缩放类型为适应中心，引用资源app.media.bookdash_icon作为图像源。\n<ImageView\n    android:layout_width=\"150dp\"\n    android:layout_height=\"200dp\"\n    android:id=\"@+id/imageView\"\n    android:layout_gravity=\"center_horizontal\"\n    android:layout_centerVertical=\"true\"\n    android:scaleType=\"fitCenter\"\n    android:layout_centerHorizontal=\"true\"\n    android:src=\"@drawable/bookdash_icon\"/>\n\n实现这个需求可能会使用到某些ArkUI组件。\n以下是关于鸿蒙ArkUI API 12的组件基本文档：\n## AlphabetIndexer\n可以与容器组件联动用于按逻辑结构快速定位容器显示区域的组件。\n## Blank\n空白填充组件，在容器主轴方向上，空白填充组件具有自动填充容器空余部分的能力。仅当父组件为Row/Column/Flex时生效。\n## Button\n按钮组件，可快速创建不同样式的按钮。可以包含单个子组件。\n## CalendarPicker\n日历选择器组件，提供下拉日历弹窗，可以让用户选择日期。\n## Checkbox\n提供多选框组件，通常用于某选项的打开或关闭。可以包含Text组件。\n## CheckboxGroup\n多选框群组，用于控制多选框全选或者不全选状态。\n## Component3D\n3D渲染组件，可以加载3D模型资源并做自定义渲染，通常用于3D动效场景。\n## ContainerSpan\nText组件的子组件，用于统一管理多个Span、ImageSpan的背景色及圆角弧度。\n## DataPanel\n数据面板组件，用于将多个数据占比情况使用占比图进行展示。\n## DatePicker\n日期选择器组件，用于根据指定日期范围创建日期滑动选择器。\n## Divider\n提供分隔器组件，分隔不同内容块/内容元素。\n## Gauge\n数据量规图表组件，用于将数据展示为环形图表。\n## Image\n图片组件，常用于在应用中显示图片。Image支持加载PixelMap、ResourceStr和DrawableDescriptor类型的数据源，支持png、jpg、jpeg、bmp、svg、webp、gif和heif类型的图片格式。\n## ImageAnimator\n提供帧动画组件来实现逐帧播放图片的能力，可以配置需要播放的图片列表，每张图片可以配置时长。\n## ImageSpan\nText、ContainerSpan组件的子组件，用于显示行内图片。\n## LoadingProgress\n用于显示加载动效的组件。\n## Marquee\n跑马灯组件，用于滚动展示一段单行文本。仅当文本内容宽度超过跑马灯组件宽度时滚动，不超过时不滚动。\n## Menu\n以垂直列表形式显示的菜单。\n## MenuItem\n用来展示菜单Menu中具体的item菜单项。\n## MenuItemGroup\n该组件用来展示菜单MenuItem的分组。\n## Navigation\nNavigation组件是路由导航的根视图容器，一般作为Page页面的根容器使用，其内部默认包含了标题栏、内容区和工具栏，其中内容区默认首页显示导航内容（Navigation的子组件）或非首页显示（[NavDestination](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navdestination-V5)的子组件），首页和非首页通过路由进行切换。\n## NavRouter\n导航组件，默认提供点击响应处理，不需要开发者自定义点击事件逻辑。\n## NavDestination\n作为子页面的根容器，用于显示Navigation的内容区。\n## NodeContainer\n基础组件，不支持尾随添加子节点。组件接受一个NodeController的实例接口。需要NodeController组合使用。该组件下仅支持挂载自定义节点FrameNode或者是BuilderNode中获取的根节点FrameNode。不支持挂载查询获得的原生系统组件代理节点。\n## PatternLock\n图案密码锁组件，以九宫格图案的方式输入密码，用于密码验证场景。手指在PatternLock组件区域按下时开始进入输入状态，手指离开屏幕时结束输入状态完成密码输入。\n## Progress\n进度条组件，用于显示内容加载或操作处理等进度。\n## QRCode\n用于显示单个二维码的组件。\n## Radio\n单选框，提供相应的用户交互选择项。\n## Rating\n提供在给定范围内选择评分的组件。Rating组件的接口，用于设置评分值和是否作为指示器使用。\n## RichEditor\n支持图文混排和文本交互式编辑的组件。\n## RichText\n富文本组件，解析并显示HTML格式文本。\n## ScrollBar\n滚动条组件ScrollBar，用于配合可滚动组件使用，如List、Grid、Scroll。\n## Search\n搜索框组件，适用于浏览器的搜索内容输入框等应用场景。可以包含单个子组件。\n## Select\n提供下拉选择菜单，可以让用户在多个选项之间选择。可以包含单个子组件。\n## Slider\n滑动条组件，通常用于快速调节设置值，如音量调节、亮度调节等应用场景。\n## Span\n作为Text、ContainerSpan组件的子组件，用于显示行内文本的组件。\n## Stepper\n步骤导航器组件，适用于引导用户按照步骤完成任务的导航场景。\n## StepperItem\n用作Stepper组件的页面子组件。\n## SymbolSpan\n作为Text组件的子组件，用于显示图标小符号的组件。\n## SymbolGlyph\n显示图标小符号的组件。\n## Text\n显示一段文本的组件，可以包含Span、ImageSpan、SymbolSpan和ContainerSpan子组件。\n## TextArea\n多行文本输入框组件，当输入的文本内容超过组件宽度时会自动换行显示。\n## TextClock\nTextClock组件通过文本将当前系统时间显示在设备上。支持不同时区的时间显示，最高精度到秒级。\n## TextPicker\n根据range指定的选择范围创建文本选择器。\n## TextTimer\n通过文本显示计时信息并控制其计时器状态的组件。\n## TimePicker\n时间选择组件，根据指定参数创建选择器，支持选择小时及分钟。\n## Toggle\n组件提供勾选框样式、状态按钮样式及开关样式。\n## TextInput\n单行文本输入框组件。\n## XComponent\n可用于EGL/OpenGLES和媒体数据写入，并显示在XComponent组件。\n## Canvas\n提供画布组件，用于自定义绘制图形。\n## CanvasGradient\n渐变对象。\n## CanvasPattern\n一个Object对象，使用createPattern方法创建，通过指定图像和重复方式创建图片填充的模板。\n## DrawingRenderingContext\n使用DrawingRenderingContext在Canvas组件上进行绘制，绘制对象可以是矩形、文本、图片等。\n## ImageBitmap\nImageBitmap对象可以存储canvas渲染的像素数据。\n## ImageData\nImageData对象可以存储canvas渲染的像素数据。\n## Matrix2D\n矩阵对象，可以对矩阵进行缩放、旋转、平移等变换。\n## OffscreenCanvas\nOffscreenCanvas组件用于自定义绘制图形，可以在屏幕外渲染的画布，避免影响应用程序主线程性能。\n## OffscreenCanvasRenderingContext2D\n使用OffscreenCanvasRenderingContext2D在Canvas上进行离屏绘制，绘制对象可以是矩形、文本、图片等。离屏绘制是指将需要绘制的内容先绘制在缓存区，然后将其转换成图片，一次性绘制到canvas上，加快了绘制速度。\n## Path2D\n路径对象，支持通过对象的接口进行路径的描述，并通过Canvas的stroke接口或者fill接口进行绘制。\n## Badge\n可以附加在单个组件上用于信息标记的容器组件。\n## Column\n沿垂直方向布局的容器组件，可以包含子组件。\n## ColumnSplit\n将子组件纵向布局，并在每个子组件之间插入一根横向的分割线。\n## Counter\n计数器组件，提供相应的增加或者减少的计数操作。\n## EmbeddedComponent\n用于支持在当前页面嵌入本应用内其他EmbeddedUIExtensionAbility提供的UI。EmbeddedUIExtensionAbility在独立进程中运行，完成页面布局和渲染。通常用于有进程隔离诉求的模块化开发场景。\n## Flex\n以弹性方式布局子组件的容器组件。\n## GridCol\n栅格子组件，必须作为栅格容器组件(GridRow)的子组件使用。可以包含单个子组件。\n## GridRow\n栅格容器组件，仅可以和栅格子组件(GridCol)在栅格布局场景中使用。\n## Grid\n网格容器，由“行”和“列”分割的单元格所组成，通过指定“项目”所在的单元格做出各种各样的布局。\n## GridItem\n网格容器中单项内容容器，仅支持作为Grid组件的子组件使用。\n## List\n列表包含一系列相同宽度的列表项。适合连续、多行呈现同类数据，例如图片和文本。可以包含ListItem、ListItemGroup子组件，支持渲染控制类型（if/else、ForEach、LazyForEach和Repeat）。\n## ListItem\n用来展示列表具体item，必须配合List来使用。\n## ListItemGroup\n该组件用来展示列表item分组，宽度默认充满List组件，必须配合List组件来使用。\n## RelativeContainer\n相对布局组件，用于复杂场景中元素对齐的布局。\n## Row\n沿水平方向布局容器，可以包含子组件。\n## Scroll\n可滚动的容器组件，当子组件的布局尺寸超过父组件的尺寸时，内容可以滚动，支持单个子组件。\n## Stack\n堆叠容器，子组件按照顺序依次入栈，后一个子组件覆盖前一个子组件。可以包含多个子组件。\n## Tabs\n通过页签进行内容视图切换的容器组件，每个页签对应一个内容视图，不支持自定义组件作为子组件， 仅可包含子组件TabContent。\n## TabContent\n仅在Tabs中使用，对应一个切换页签的内容视图，支持单个子组件。\n## WaterFlow\n瀑布流容器，由“行”和“列”分割的单元格所组成，通过容器自身的排列规则，将不同大小的“项目”自上而下，如瀑布般紧密布局。\n## WithTheme\nWithTheme组件用于设置应用局部页面自定义主题风格，可设置子组件深浅色模式和自定义配色。\n## Circle\n用于绘制圆形的组件。\n## Ellipse\n椭圆绘制组件。\n## Line\n直线绘制组件。\n## Polyline\n折线绘制组件。\n## Polygon\n多边形绘制组件。\n## Path\n路径绘制组件，根据绘制路径生成封闭的自定义形状。\n## Rect\n绘制组件的父组件，实现类似SVG的效果。绘制组件单独使用，用于在页面上绘制指定的图形。\n## Shape\n矩形绘制组件。\n## AlertDialog\n显示警告弹窗组件，可设置文本内容与响应回调。\n## ActionSheet\n列表选择弹窗 (ActionSheet) 是一个全局UI方法，属于ArkTS组件，用于在ArkUI（方舟UI框架）中显示一个带有多个选项的弹窗。\n## CustomDialog\n通过CustomDialogController类显示自定义弹窗。使用弹窗组件时，可优先考虑自定义弹窗，便于自定义弹窗的样式与内容。\n## CalendarPickerDialog\n点击日期弹出日历选择器弹窗，可选择弹窗内任意日期。\n## DatePickerDialog\n日期滑动选择器弹窗，用于在弹窗上展示日期选择器。\n## TimePickerDialog\n时间滑动选择器弹窗 (TimePickerDialog) 是一个全局UI方法，用于以24小时的时间区间创建时间滑动选择器，并展示在弹窗上。\n## TextPickerDialog\n文本滑动选择器弹窗，用于在指定的选择范围内创建文本选择器并展示在弹窗上。\n## Video\n用于播放视频文件并控制其播放状态的组件。\n## LocationButton\n安全控件的位置控件，用户通过点击该位置按钮，可以临时获取精准定位权限，而不需要权限弹框授权确认。\n## PasteButton\n安全控件的粘贴按钮，用户通过点击该粘贴按钮，可以临时获取读取剪贴板权限。\n## SaveButton\n安全控件的保存控件，用户通过点击该保存按钮，可以临时获取存储权限，而不需要权限弹框授权确认。\n## ChipGroup\nChipGroup高级组件，提供操作块群组，用于对文件或者资源内容进行分类等场景。\n## Chip\n操作块组件，用于搜索框历史记录或者邮件发送列表等场景。\n## ToolBar\n工具栏用于展示针对当前界面内容的操作选项，在界面底部显示。底部最多显示5个入口，超过则收纳入“更多”子项中，在最右侧显示。\n## ComposeTitleBar\n一种普通标题栏，支持设置标题、头像（可选）和副标题（可选），可用于一级页面、二级及其以上界面配置返回键。\n\n\n\n在开始任务之前，你需要对待转译的安卓组件进行分析，以便选择合适的ArkUI组件来实现相同的功能。\n然后，你需要从上述ArkUI组件中选择一个或多个组件，使其能够实现上述安卓组件的功能，并保持布局和样式尽可能一致。\n对于无法直接转译的安卓组件，你可以通过组合多个ArkUI组件来实现，一定不能选择不存在的组件。\n在完成选择后，你需要编写一条或多条用于在知识库或RAG系统中检索的查询语句。每条查询应聚焦于不同的功能细节或组件的具体属性，帮助快速、精确地检索到相关的文档、代码示例或实现方法。\n**重要**：你只能从[AlphabetIndexer, Blank, Button, CalendarPicker, Checkbox, CheckboxGroup, Component3D, ContainerSpan, DataPanel, DatePicker, Divider, Gauge, Image, ImageAnimator, ImageSpan, LoadingProgress, Marquee, Menu, MenuItem, MenuItemGroup, Navigation, NavRouter, NavDestination, NodeContainer, PatternLock, Progress, QRCode, Radio, Rating, RichEditor, RichText, ScrollBar, Search, Select, Slider, Span, Stepper, StepperItem, SymbolSpan, SymbolGlyph, Text, TextArea, TextClock, TextPicker, TextTimer, TimePicker, Toggle, TextInput, XComponent, Canvas, CanvasGradient, CanvasPattern, DrawingRenderingContext, ImageBitmap, ImageData, Matrix2D, OffscreenCanvas, OffscreenCanvasRenderingContext2D, Path2D, Badge, Column, ColumnSplit, Counter, EmbeddedComponent, Flex, GridCol, GridRow, Grid, GridItem, List, ListItem, ListItemGroup, RelativeContainer, Row, Scroll, Stack, Tabs, TabContent, WaterFlow, WithTheme, Circle, Ellipse, Line, Polyline, Polygon, Path, Rect, Shape, AlertDialog, ActionSheet, CustomDialog, CalendarPickerDialog, DatePickerDialog, TimePickerDialog, TextPickerDialog, Video, LocationButton, PasteButton, SaveButton, ChipGroup, Chip, ToolBar, ComposeTitleBar]中选择ArkUI组件，请你认真检查，一定不可以选择不存在的ArkUI组件。\n**重要**：查询语句需要涵盖以下方面：布局属性（如宽度、高度、边距等）、组件的样式和外观（如颜色、字体、透明度等）、组件的排列和嵌套关系（如垂直或水平布局、对齐方式）、组件的功能和交互（如点击事件、输入验证），确保每条查询简洁明了且仅聚焦单一方面，突出关键信息，以便加快内容检索过程。\n\n## 以下是选择组件的额外规则：\n* 规则1：待转译的安卓布局文件中存在属性layout_constraintXXX_toXXXOf，其中XXX为Start、End、Top、Bottom等，你应该额外选择鸿蒙ArkUI的RelativeContainer组件。\n* 规则2：当使用com.google.android.material.appbar.AppBarLayout与androidx.appcompat.widget.Toolbar实现标题栏时，你应该选择Row、Text、Image等组件来实现标题栏，需要注意鸿蒙组件的Toolbar特指底部导航栏而非安卓中的标题栏。\n* 规则3：Scroll组件的子组件通常采用Column或Row组件，你应该根据滚动的方向来选择，当滚动方向为垂直时，应该选择Column组件，当滚动方向为水平时，应该选择Row组件。\n\n以下是一个示例：\n安卓组件：EditText\n<EditText\nandroid:id=\"@+id/et_1\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"50dp\"\nandroid:layout_marginBottom=\"15dp\"\nandroid:autofillHints=\"\"\nandroid:hint=\"请输入文字\"\nandroid:inputType=\"text\"\nandroid:paddingLeft=\"15dp\"\nandroid:paddingRight=\"15dp\"\nandroid:textColor=\"@color/black\"\nandroid:textSize=\"16sp\" />\n回答：\n```json\n{\n    \"components\": [\"TextInput\"],\n    \"queries\": [\n        {\n            \"queries\": [\"设置输入框的高度\", \"设置输入框的宽度\", \"设置输入框的底部边距\", \"设置输入框的提示文本\", \"设置输入框的输入类型\", \"设置输入框的左内边距\", \"设置输入框的右内边距\", \"设置输入框的文本颜色\", \"设置输入框的字体大小\"],\n            \"component\": \"TextInput\",\n        },\n    ],\n    \"idea\": \"可以选择TextInput组件来实现EditText组件的功能，设置TextInput组件的属性来实现EditText组件的样式和功能。\"\n}\n```", "component_query": {"components": ["Image", "Column", "Row"], "queries": [{"component": "Image", "queries": ["设置图片的宽度为150vp", "设置图片的高度为200vp", "设置图片的缩放类型为适应中心", "设置图片的资源引用为app.media.bookdash_icon"]}, {"component": "Column", "queries": ["设置Column组件的垂直居中对齐"]}, {"component": "Row", "queries": ["设置Row组件的水平居中对齐"]}], "idea": "选择Image组件来显示图片，并设置其宽度和高度以及缩放类型。使用Column和Row组件来实现图像视图在水平和垂直方向上的居中对齐。"}}}, {"id": "dSP9283Kz22hmjtXdKF8e3", "description": "修正组件查询", "subtasks": [], "details": {"component_query": {"components": ["Image", "Column", "Row"], "queries": [{"component": "Image", "queries": ["设置图片的宽度为150vp", "设置图片的高度为200vp", "设置图片的缩放类型为适应中心", "设置图片的资源引用为app.media.bookdash_icon"]}, {"component": "Column", "queries": ["设置Column组件的垂直居中对齐"]}, {"component": "Row", "queries": ["设置Row组件的水平居中对齐"]}], "idea": "选择Image组件来显示图片，并设置其宽度和高度以及缩放类型。使用Column和Row组件来实现图像视图在水平和垂直方向上的居中对齐。"}, "corrected_component_query": {"components": ["Image", "Column", "Row"], "queries": [{"component": "Image", "queries": ["设置图片的宽度为150vp", "设置图片的高度为200vp", "设置图片的缩放类型为适应中心", "设置图片的资源引用为app.media.bookdash_icon"]}, {"component": "Column", "queries": ["设置Column组件的垂直居中对齐"]}, {"component": "Row", "queries": ["设置Row组件的水平居中对齐"]}], "idea": "选择Image组件来显示图片，并设置其宽度和高度以及缩放类型。使用Column和Row组件来实现图像视图在水平和垂直方向上的居中对齐。"}}}, {"id": "eXCJx2A4JSAsRpRCLnuF4j", "description": "查询示例文档", "subtasks": [], "details": {"query": "实现了一个图像视图，图像视图的宽度和高度分别为150vp和200vp，图像视图在水平和垂直方向上都居中对齐，图像的缩放类型为适应中心，图像源引用了 app.media.bookdash_icon 资源。", "k": 3, "component_name": ["Image", "Column", "Row"], "score_threshold": 0.6, "example_knowledge_results": [[{"id": null, "metadata": {"component_name": "Image", "source": "harmony-component-example-doc", "table_id": 222}, "page_content": "该组件通过 Flex 布局实现了一个展示多种图像及其 objectFit 效果的界面。布局宽度为 360vp，高度为 320vp，内边距为右侧 10vp、顶部 10vp。组件的垂直方向上被分为两个部分，每个部分包含两张图像。每张图像的宽度为 110vp，高度为 110vp，外边距为 15vp。图像的边框宽度为 2vp，颜色为粉色。图像的 objectFit 属性分别设置为不同的值，以展示不同的图像适应效果。\n图像的排列方式为水平布局，每行包含两张图像，图像之间的间距均匀分布，且对齐方式为居中对齐。图像的样式包括边框颜色、宽度和高度等属性，支持不同的样式展示。图像的功能包括 objectFit 效果，用户可以通过设置不同的 objectFit 属性来调整图像的显示效果。\n整个布局通过 Flex 布局保证图像在垂直方向上有序排列，确保界面整洁美观。", "type": "Document"}, 0.7070621848106384], [{"id": null, "metadata": {"component_name": "Image", "source": "harmony-component-example-doc", "table_id": 218}, "page_content": "该组件通过 Flex 布局实现了一个展示多种类型图片（如 PNG、GIF、SVG、JPG）的界面。布局宽度为 360vp，高度为 320vp，内边距为右 10vp、顶部 10vp。组件的垂直方向上被分为两个部分，每个部分包含两张图片。每张图片以水平布局方式排列，图片之间的间距均匀分布，且对齐方式为居中对齐。\n图片的样式包括宽度、高度、边距等属性，每张图片的宽度为 110vp，高度为 110vp，边距为 15vp。图片的功能包括加载不同类型的图片资源，并通过 overlay 方法在图片底部添加文本标签，标签内容为图片的文件类型（如 PNG、GIF、SVG、JPG），标签的对齐方式为底部对齐，偏移量为 y 轴方向 20vp。\n整个布局通过 Flex 布局保证图片在垂直方向上有序排列，确保界面整洁美观。", "type": "Document"}, 0.7006779909133911], [{"id": null, "metadata": {"component_name": "Image", "source": "harmony-component-example-doc", "table_id": 216}, "page_content": "该组件通过 Column 布局实现了一个展示两张图片的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为两个部分，每个部分包含一张图片。每张图片的宽度为 100vp，高度为 100vp。\n图片的样式包括宽度、高度等属性，支持不同的样式展示。图片的功能包括点击事件和动画结束事件，用户可以通过点击图片触发相应操作，图片也可以在动画结束后进行状态切换。\n整个布局通过 Column 布局保证图片在垂直方向上有序排列，确保界面整洁美观。", "type": "Document"}, 0.6924965977668762]], "component_examples": {"Image": [{"description": "该组件通过 Flex 布局实现了一个展示多种图像及其 objectFit 效果的界面。布局宽度为 360vp，高度为 320vp，内边距为右侧 10vp、顶部 10vp。组件的垂直方向上被分为两个部分，每个部分包含两张图像。每张图像的宽度为 110vp，高度为 110vp，外边距为 15vp。图像的边框宽度为 2vp，颜色为粉色。图像的 objectFit 属性分别设置为不同的值，以展示不同的图像适应效果。\n图像的排列方式为水平布局，每行包含两张图像，图像之间的间距均匀分布，且对齐方式为居中对齐。图像的样式包括边框颜色、宽度和高度等属性，支持不同的样式展示。图像的功能包括 objectFit 效果，用户可以通过设置不同的 objectFit 属性来调整图像的显示效果。\n整个布局通过 Flex 布局保证图像在垂直方向上有序排列，确保界面整洁美观。", "code": "@Entry\n@Component\nstruct ImageExample {\n  build() {\n    Column() {\n      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start }) {\n        Row() {\n          // 第一张图像，资源名为 app.media.sky，宽度为 110vp，高度为 110vp，外边距为 15vp，边框宽度为 2vp，颜色为粉色，objectFit 属性设置为 ImageFit.TOP_START\n          Image($r('app.media.sky'))\n            .width(110).height(110).margin(15)\n            .overlay('png', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n            .border({ width: 2, color: Color.Pink })\n            .objectFit(ImageFit.TOP_START)\n\n          // 第二张图像，资源名为 app.media.loading，宽度为 110vp，高度为 110vp，外边距为 15vp，边框宽度为 2vp，颜色为粉色，objectFit 属性设置为 ImageFit.BOTTOM_START\n          Image($r('app.media.loading'))\n            .width(110).height(110).margin(15)\n            .overlay('gif', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n            .border({ width: 2, color: Color.Pink })\n            .objectFit(ImageFit.BOTTOM_START)\n        }\n        Row() {\n          // 第三张图像，资源名为 app.media.svg，宽度为 110vp，高度为 110vp，外边距为 15vp，边框宽度为 2vp，颜色为粉色，objectFit 属性设置为 ImageFit.TOP_END\n          Image($r('app.media.svg'))\n            .width(110).height(110).margin(15)\n            .overlay('svg', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n            .border({ width: 2, color: Color.Pink })\n            .objectFit(ImageFit.TOP_END)\n\n          // 第四张图像，资源名为 app.media.jpg，宽度为 110vp，高度为 110vp，外边距为 15vp，边框宽度为 2vp，颜色为粉色，objectFit 属性设置为 ImageFit.CENTER\n          Image($r('app.media.jpg'))\n            .width(110).height(110).margin(15)\n            .overlay('jpg', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n            .border({ width: 2, color: Color.Pink })\n            .objectFit(ImageFit.CENTER)\n        }\n      }\n    }.height(320).width(360).padding({ right: 10, top: 10 })\n  }\n}"}, {"description": "该组件通过 Flex 布局实现了一个展示多种类型图片（如 PNG、GIF、SVG、JPG）的界面。布局宽度为 360vp，高度为 320vp，内边距为右 10vp、顶部 10vp。组件的垂直方向上被分为两个部分，每个部分包含两张图片。每张图片以水平布局方式排列，图片之间的间距均匀分布，且对齐方式为居中对齐。\n图片的样式包括宽度、高度、边距等属性，每张图片的宽度为 110vp，高度为 110vp，边距为 15vp。图片的功能包括加载不同类型的图片资源，并通过 overlay 方法在图片底部添加文本标签，标签内容为图片的文件类型（如 PNG、GIF、SVG、JPG），标签的对齐方式为底部对齐，偏移量为 y 轴方向 20vp。\n整个布局通过 Flex 布局保证图片在垂直方向上有序排列，确保界面整洁美观。", "code": "@Entry\n@Component\nstruct ImageExample1 {\n  build() {\n    Column() {\n      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start }) {\n        Row() {\n          // 加载 PNG 图片，设置图片的宽度、高度和边距，并在图片底部添加文本标签 \"png\"\n          Image($r('app.media.ic_camera_master_ai_leaf'))\n            .width(110).height(110).margin(15)\n            .overlay('png', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n\n          // 加载 GIF 图片，设置图片的宽度、高度和边距，并在图片底部添加文本标签 \"gif\"\n          Image($r('app.media.loading'))\n            .width(110).height(110).margin(15)\n            .overlay('gif', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n        }\n        Row() {\n          // 加载 SVG 图片，设置图片的宽度、高度和边距，并在图片底部添加文本标签 \"svg\"\n          Image($r('app.media.ic_camera_master_ai_clouded'))\n            .width(110).height(110).margin(15)\n            .overlay('svg', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n\n          // 加载 JPG 图片，设置图片的宽度、高度和边距，并在图片底部添加文本标签 \"jpg\"\n          Image($r('app.media.ic_public_favor_filled'))\n            .width(110).height(110).margin(15)\n            .overlay('jpg', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n        }\n      }\n    }.height(320).width(360).padding({ right: 10, top: 10 })\n  }\n}"}, {"description": "该组件通过 Column 布局实现了一个展示两张图片的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为两个部分，每个部分包含一张图片。每张图片的宽度为 100vp，高度为 100vp。\n图片的样式包括宽度、高度等属性，支持不同的样式展示。图片的功能包括点击事件和动画结束事件，用户可以通过点击图片触发相应操作，图片也可以在动画结束后进行状态切换。\n整个布局通过 Column 布局保证图片在垂直方向上有序排列，确保界面整洁美观。", "code": "@Entry\n@Component\nstruct ImageExample3 {\n  // 定义三张图片资源\n  private imageOne: Resource = $r('app.media.earth');\n  private imageTwo: Resource = $r('app.media.star');\n  private imageThree: Resource = $r('app.media.moveStar');\n\n  // 定义两个状态变量，用于控制图片的显示\n  @State src: Resource = this.imageOne;\n  @State src2: Resource = this.imageThree;\n\n  build() {\n    Column() {\n      // 第一张图片，点击后切换为第二张图片\n      Image(this.src)\n        .width(100) // 设置图片宽度为 100vp\n        .height(100) // 设置图片高度为 100vp\n        .onClick(() => {\n          // 点击事件，切换图片为第二张图片\n          this.src = this.imageTwo;\n        })\n\n      // 第二张图片，动画结束后切换为第一张图片\n      Image(this.src2)\n        .width(100) // 设置图片宽度为 100vp\n        .height(100) // 设置图片高度为 100vp\n        .onFinish(() => {\n          // 动画结束事件，切换图片为第一张图片\n          this.src2 = this.imageOne;\n        })\n    }\n    .width('100%') // 设置布局宽度为 100%\n    .height('100%') // 设置布局高度为 100%\n  }\n}"}]}}}, {"id": "N9RUTfdvLwcHM98Q7V3f9F", "description": "查询组件文档", "subtasks": [{"id": "9CSkozW8hbhWWruUzUR8pW", "description": "依次从知识库中查询每个组件的相关属性、事件文档", "subtasks": [{"id": "JtWR3BWYjWTjWwzSBcGGwq", "description": "查询组件Image的相关属性、事件文档", "subtasks": [], "details": {"query": ["设置图片的宽度为150vp", "设置图片的高度为200vp", "设置图片的缩放类型为适应中心", "设置图片的资源引用为app.media.bookdash_icon"], "n_results": 10, "query_results": {"ids": [["bd88bdf5-c228-4034-af03-225c2d433083", "e00f8a63-c4a4-425e-817c-3ec42c9e5580", "ed850cab-af82-45d6-ba4f-d03878b46941", "7bbf55ff-10c4-40df-bb2c-5e7d861c54ac", "760646e4-25ee-45c7-afff-c0e6ba5753fc", "fa66a688-14fe-4006-a250-63f31adfb281", "0296daf5-4a2c-4dd8-ab7b-b3c351dd4ce3", "4af9acf0-7a3c-44d4-82d9-2828212cca26", "fbaf4c7f-24a8-45c2-b1f3-5e316867163f", "48715149-f0ac-4328-9429-801f894ef8e9"], ["16d2a454-aec5-4a67-8522-da1b0d6a20ae", "bd88bdf5-c228-4034-af03-225c2d433083", "e00f8a63-c4a4-425e-817c-3ec42c9e5580", "760646e4-25ee-45c7-afff-c0e6ba5753fc", "7bbf55ff-10c4-40df-bb2c-5e7d861c54ac", "35555aee-0c6f-4e01-9367-11dfc32fca87", "0296daf5-4a2c-4dd8-ab7b-b3c351dd4ce3", "4af9acf0-7a3c-44d4-82d9-2828212cca26", "fbaf4c7f-24a8-45c2-b1f3-5e316867163f", "896d3e5c-2dc7-47f7-985f-4439bf645b0c"], ["982e7f22-f5f1-4eef-b10f-f0fa52bf6fce", "fa66a688-14fe-4006-a250-63f31adfb281", "621abd37-14ff-4471-bd8a-2b44d6483327", "e00f8a63-c4a4-425e-817c-3ec42c9e5580", "896d3e5c-2dc7-47f7-985f-4439bf645b0c", "4af9acf0-7a3c-44d4-82d9-2828212cca26", "7bbf55ff-10c4-40df-bb2c-5e7d861c54ac", "0296daf5-4a2c-4dd8-ab7b-b3c351dd4ce3", "bd88bdf5-c228-4034-af03-225c2d433083", "8c7ce776-da25-45a7-aa7d-7568be72f79e"], ["e00f8a63-c4a4-425e-817c-3ec42c9e5580", "7bbf55ff-10c4-40df-bb2c-5e7d861c54ac", "4af9acf0-7a3c-44d4-82d9-2828212cca26", "621abd37-14ff-4471-bd8a-2b44d6483327", "fa66a688-14fe-4006-a250-63f31adfb281", "8c7ce776-da25-45a7-aa7d-7568be72f79e", "bd88bdf5-c228-4034-af03-225c2d433083", "ce502fef-692f-40de-ae1d-e83783ff594e", "ffc567f0-6edc-42a5-9ec1-b62cc55f9fd7", "f4daa492-1611-4f45-946f-a09d73048876"]], "distances": [[0.3894936442375183, 0.38994354009628296, 0.39795124530792236, 0.4022173285484314, 0.40247035026550293, 0.40340930223464966, 0.4096214175224304, 0.4145698547363281, 0.4207606911659241, 0.42372310161590576], [0.3946078419685364, 0.4044812321662903, 0.40506935119628906, 0.41085565090179443, 0.4207828640937805, 0.4234025478363037, 0.42741823196411133, 0.4286372661590576, 0.4321587085723877, 0.43651145696640015], [0.3439790606498718, 0.3662910461425781, 0.3869044780731201, 0.3918200731277466, 0.40190649032592773, 0.40491193532943726, 0.41703832149505615, 0.41797488927841187, 0.4236486554145813, 0.43001341819763184], [0.428635835647583, 0.43746715784072876, 0.44977957010269165, 0.4545472264289856, 0.4579538106918335, 0.45834195613861084, 0.4616825580596924, 0.4631223678588867, 0.46585381031036377, 0.4738317131996155]], "metadatas": [[{"component_name": "Image", "name": "sourceSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "alt", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "width", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "objectRepeat", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "onComplete", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Image", "name": "resizable", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "fitOriginalSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "objectFit", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "aspectRatio", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "size", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "Image", "name": "height", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "sourceSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "alt", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "onComplete", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Image", "name": "objectRepeat", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "lineHeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "fitOriginalSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "objectFit", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "aspectRatio", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "interpolation", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "Image", "name": "autoResize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "resizable", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "matchTextDirection", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "alt", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "interpolation", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "objectFit", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "objectRepeat", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "fitOriginalSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "sourceSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "syncLoad", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "Image", "name": "alt", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "objectRepeat", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "objectFit", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "matchTextDirection", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "resizable", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "syncLoad", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "sourceSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "copyOption", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "markAnchor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "fontFamily", "source": "harmony-component-doc", "type": "attribute"}]], "embeddings": null, "documents": [["设置图片解码尺寸。仅在目标尺寸小于图源尺寸时生效。svg类型图源和PixelMap资源不支持该属性。\n属性名称：sourceSize\n属性参数：{'value': {\"type\":{\"width\":\"number\",\"height\":\"number\"},\"required\":true,\"description\":\"图片解码尺寸，降低图片的分辨率，常用于需要让图片显示尺寸比组件尺寸更小的场景。和ImageFit.None配合使用时可在组件内显示小图。\",\"default\":null}}\n", "设置图片加载时显示的占位图。\n属性名称：alt\n属性参数：{'value': {\"type\":[\"string\",\"Resource\",\"PixelMap\"],\"required\":true,\"description\":\"加载时显示的占位图，支持本地图片（png、jpg、bmp、svg、gif和heif类型）,支持PixelMap类型图片，不支持网络图片。\",\"default\":null}}\n", "设置组件自身的宽度，缺省时使用元素自身内容需要的宽度。若子组件的宽大于父组件的宽，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：width\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件宽度。单位：vp\",\"default\":null}}\n", "设置图片的重复样式，从中心点向两边重复，剩余空间不足放下一张图片时会截断。svg类型图源不支持该属性。\n属性名称：objectRepeat\n属性参数：{'value': {\"type\":\"ImageRepeat\",\"required\":true,\"description\":\"图片的重复样式。\",\"default\":\"ImageRepeat.NoRepeat\"}}\n", "图片数据加载成功和解码成功时均触发该回调，返回成功加载的图片尺寸。\n事件名称：onComplete\n事件参数：{'width': {\"type\":\"number\",\"required\":true,\"description\":\"图片的宽。单位：像素\",\"default\":null}, 'height': {\"type\":\"number\",\"required\":true,\"description\":\"图片的高。单位：像素\",\"default\":null}, 'componentWidth': {\"type\":\"number\",\"required\":true,\"description\":\"组件的宽。单位：像素\",\"default\":null}, 'componentHeight': {\"type\":\"number\",\"required\":true,\"description\":\"组件的高。单位：像素\",\"default\":null}, 'loadingStatus': {\"type\":\"number\",\"required\":true,\"description\":\"图片加载成功的状态值。返回的状态值为0时，表示图片数据加载成功。返回的状态值为1时，表示图片解码成功。\",\"default\":null}, 'contentWidth': {\"type\":\"number\",\"required\":true,\"description\":\"图片实际绘制的宽度。单位：像素。仅在loadingStatus返回1时有效。\",\"default\":null}, 'contentHeight': {\"type\":\"number\",\"required\":true,\"description\":\"图片实际绘制的高度。单位：像素。仅在loadingStatus返回1时有效。\",\"default\":null}, 'contentOffsetX': {\"type\":\"number\",\"required\":true,\"description\":\"实际绘制内容相对于组件自身的x轴偏移。单位：像素。仅在loadingStatus返回1时有效。\",\"default\":null}, 'contentOffsetY': {\"type\":\"number\",\"required\":true,\"description\":\"实际绘制内容相对于组件自身的y轴偏移。单位：像素。仅在loadingStatus返回1时有效。\",\"default\":null}}\n事件返回值：None\n", "设置图像拉伸时可调整大小的图像选项。拉伸对拖拽缩略图以及占位图有效。\n属性名称：resizable\n属性参数：{'value': {\"type\":\"ResizableOptions\",\"required\":true,\"description\":\"图像拉伸时可调整大小的图像选项。\",\"default\":null}}\n", "设置图片的显示尺寸是否跟随图源尺寸。图片组件尺寸未设置时，其显示尺寸是否跟随图源尺寸。\n属性名称：fitOriginalSize\n属性参数：{'value': {\"type\":\"boolean\",\"required\":true,\"description\":\"图片的显示尺寸是否跟随图源尺寸\",\"default\":false}}\n", "设置图片的填充效果。\n属性名称：objectFit\n属性参数：{'value': {\"type\":\"ImageFit\",\"required\":true,\"description\":\"图片的填充效果。\",\"default\":\"ImageFit.Cover\"}}\n", "指定当前组件的宽高比。\n属性名称：aspectRatio\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"指定当前组件的宽高比，aspectRatio = width/height。API version 9及以前，默认值为：1.0。API version 10：无默认值。该属性在不设置值或者设置非法值时不生效。例如，Row只设置宽度且没有子组件，aspectRatio不设置值或者设置成负数时，此时Row高度为0。\",\"default\":null}}\n", "设置高宽尺寸。从API version 10开始，该接口支持calc计算特性。\n属性名称：size\n属性参数：{'value': {\"type\":\"SizeOptions\",\"required\":true,\"description\":\"要设置的高宽尺寸。\",\"default\":null}}\n"], ["设置组件自身的高度，缺省时使用元素自身内容需要的高度。若子组件的高大于父组件的高，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：height\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件高度。单位：vp\",\"default\":null}}\n", "设置图片解码尺寸。仅在目标尺寸小于图源尺寸时生效。svg类型图源和PixelMap资源不支持该属性。\n属性名称：sourceSize\n属性参数：{'value': {\"type\":{\"width\":\"number\",\"height\":\"number\"},\"required\":true,\"description\":\"图片解码尺寸，降低图片的分辨率，常用于需要让图片显示尺寸比组件尺寸更小的场景。和ImageFit.None配合使用时可在组件内显示小图。\",\"default\":null}}\n", "设置图片加载时显示的占位图。\n属性名称：alt\n属性参数：{'value': {\"type\":[\"string\",\"Resource\",\"PixelMap\"],\"required\":true,\"description\":\"加载时显示的占位图，支持本地图片（png、jpg、bmp、svg、gif和heif类型）,支持PixelMap类型图片，不支持网络图片。\",\"default\":null}}\n", "图片数据加载成功和解码成功时均触发该回调，返回成功加载的图片尺寸。\n事件名称：onComplete\n事件参数：{'width': {\"type\":\"number\",\"required\":true,\"description\":\"图片的宽。单位：像素\",\"default\":null}, 'height': {\"type\":\"number\",\"required\":true,\"description\":\"图片的高。单位：像素\",\"default\":null}, 'componentWidth': {\"type\":\"number\",\"required\":true,\"description\":\"组件的宽。单位：像素\",\"default\":null}, 'componentHeight': {\"type\":\"number\",\"required\":true,\"description\":\"组件的高。单位：像素\",\"default\":null}, 'loadingStatus': {\"type\":\"number\",\"required\":true,\"description\":\"图片加载成功的状态值。返回的状态值为0时，表示图片数据加载成功。返回的状态值为1时，表示图片解码成功。\",\"default\":null}, 'contentWidth': {\"type\":\"number\",\"required\":true,\"description\":\"图片实际绘制的宽度。单位：像素。仅在loadingStatus返回1时有效。\",\"default\":null}, 'contentHeight': {\"type\":\"number\",\"required\":true,\"description\":\"图片实际绘制的高度。单位：像素。仅在loadingStatus返回1时有效。\",\"default\":null}, 'contentOffsetX': {\"type\":\"number\",\"required\":true,\"description\":\"实际绘制内容相对于组件自身的x轴偏移。单位：像素。仅在loadingStatus返回1时有效。\",\"default\":null}, 'contentOffsetY': {\"type\":\"number\",\"required\":true,\"description\":\"实际绘制内容相对于组件自身的y轴偏移。单位：像素。仅在loadingStatus返回1时有效。\",\"default\":null}}\n事件返回值：None\n", "设置图片的重复样式，从中心点向两边重复，剩余空间不足放下一张图片时会截断。svg类型图源不支持该属性。\n属性名称：objectRepeat\n属性参数：{'value': {\"type\":\"ImageRepeat\",\"required\":true,\"description\":\"图片的重复样式。\",\"default\":\"ImageRepeat.NoRepeat\"}}\n", "设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小。\n属性名称：lineHeight\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本行高，为number类型时单位为fp。\",\"default\":null}}\n", "设置图片的显示尺寸是否跟随图源尺寸。图片组件尺寸未设置时，其显示尺寸是否跟随图源尺寸。\n属性名称：fitOriginalSize\n属性参数：{'value': {\"type\":\"boolean\",\"required\":true,\"description\":\"图片的显示尺寸是否跟随图源尺寸\",\"default\":false}}\n", "设置图片的填充效果。\n属性名称：objectFit\n属性参数：{'value': {\"type\":\"ImageFit\",\"required\":true,\"description\":\"图片的填充效果。\",\"default\":\"ImageFit.Cover\"}}\n", "指定当前组件的宽高比。\n属性名称：aspectRatio\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"指定当前组件的宽高比，aspectRatio = width/height。API version 9及以前，默认值为：1.0。API version 10：无默认值。该属性在不设置值或者设置非法值时不生效。例如，Row只设置宽度且没有子组件，aspectRatio不设置值或者设置成负数时，此时Row高度为0。\",\"default\":null}}\n", "设置图片的插值效果，即缓解图片在缩放时的锯齿问题。svg类型图源不支持该属性。\n属性名称：interpolation\n属性参数：{'value': {\"type\":\"ImageInterpolation\",\"required\":true,\"description\":\"图片的插值效果。\",\"default\":\"ImageInterpolation.None\"}}\n"], ["设置图片解码过程中是否对图源自动缩放。降采样解码时图片的部分信息丢失，因此可能会导致图片质量的下降（如：出现锯齿），这时可以选择把autoResize设为false，按原图尺寸解码，提升显示效果，但会增加内存占用。\n属性名称：autoResize\n属性参数：{'value': {\"type\":\"boolean\",\"required\":true,\"description\":\"图片解码过程中是否对图源自动缩放。\",\"default\":false}}\n", "设置图像拉伸时可调整大小的图像选项。拉伸对拖拽缩略图以及占位图有效。\n属性名称：resizable\n属性参数：{'value': {\"type\":\"ResizableOptions\",\"required\":true,\"description\":\"图像拉伸时可调整大小的图像选项。\",\"default\":null}}\n", "设置图片是否跟随系统语言方向，在RTL语言环境下显示镜像翻转显示效果。\n属性名称：matchTextDirection\n属性参数：{'value': {\"type\":\"boolean\",\"required\":true,\"description\":\"图片是否跟随系统语言方向。\",\"default\":false}}\n", "设置图片加载时显示的占位图。\n属性名称：alt\n属性参数：{'value': {\"type\":[\"string\",\"Resource\",\"PixelMap\"],\"required\":true,\"description\":\"加载时显示的占位图，支持本地图片（png、jpg、bmp、svg、gif和heif类型）,支持PixelMap类型图片，不支持网络图片。\",\"default\":null}}\n", "设置图片的插值效果，即缓解图片在缩放时的锯齿问题。svg类型图源不支持该属性。\n属性名称：interpolation\n属性参数：{'value': {\"type\":\"ImageInterpolation\",\"required\":true,\"description\":\"图片的插值效果。\",\"default\":\"ImageInterpolation.None\"}}\n", "设置图片的填充效果。\n属性名称：objectFit\n属性参数：{'value': {\"type\":\"ImageFit\",\"required\":true,\"description\":\"图片的填充效果。\",\"default\":\"ImageFit.Cover\"}}\n", "设置图片的重复样式，从中心点向两边重复，剩余空间不足放下一张图片时会截断。svg类型图源不支持该属性。\n属性名称：objectRepeat\n属性参数：{'value': {\"type\":\"ImageRepeat\",\"required\":true,\"description\":\"图片的重复样式。\",\"default\":\"ImageRepeat.NoRepeat\"}}\n", "设置图片的显示尺寸是否跟随图源尺寸。图片组件尺寸未设置时，其显示尺寸是否跟随图源尺寸。\n属性名称：fitOriginalSize\n属性参数：{'value': {\"type\":\"boolean\",\"required\":true,\"description\":\"图片的显示尺寸是否跟随图源尺寸\",\"default\":false}}\n", "设置图片解码尺寸。仅在目标尺寸小于图源尺寸时生效。svg类型图源和PixelMap资源不支持该属性。\n属性名称：sourceSize\n属性参数：{'value': {\"type\":{\"width\":\"number\",\"height\":\"number\"},\"required\":true,\"description\":\"图片解码尺寸，降低图片的分辨率，常用于需要让图片显示尺寸比组件尺寸更小的场景。和ImageFit.None配合使用时可在组件内显示小图。\",\"default\":null}}\n", "设置是否同步加载图片。建议加载尺寸较小的本地图片时将syncLoad设为true，因为耗时较短，在主线程上执行即可。\n属性名称：syncLoad\n属性参数：{'value': {\"type\":\"boolean\",\"required\":true,\"description\":\"是否同步加载图片，默认是异步加载。同步加载时阻塞UI线程，不会显示占位图。\",\"default\":false}}\n"], ["设置图片加载时显示的占位图。\n属性名称：alt\n属性参数：{'value': {\"type\":[\"string\",\"Resource\",\"PixelMap\"],\"required\":true,\"description\":\"加载时显示的占位图，支持本地图片（png、jpg、bmp、svg、gif和heif类型）,支持PixelMap类型图片，不支持网络图片。\",\"default\":null}}\n", "设置图片的重复样式，从中心点向两边重复，剩余空间不足放下一张图片时会截断。svg类型图源不支持该属性。\n属性名称：objectRepeat\n属性参数：{'value': {\"type\":\"ImageRepeat\",\"required\":true,\"description\":\"图片的重复样式。\",\"default\":\"ImageRepeat.NoRepeat\"}}\n", "设置图片的填充效果。\n属性名称：objectFit\n属性参数：{'value': {\"type\":\"ImageFit\",\"required\":true,\"description\":\"图片的填充效果。\",\"default\":\"ImageFit.Cover\"}}\n", "设置图片是否跟随系统语言方向，在RTL语言环境下显示镜像翻转显示效果。\n属性名称：matchTextDirection\n属性参数：{'value': {\"type\":\"boolean\",\"required\":true,\"description\":\"图片是否跟随系统语言方向。\",\"default\":false}}\n", "设置图像拉伸时可调整大小的图像选项。拉伸对拖拽缩略图以及占位图有效。\n属性名称：resizable\n属性参数：{'value': {\"type\":\"ResizableOptions\",\"required\":true,\"description\":\"图像拉伸时可调整大小的图像选项。\",\"default\":null}}\n", "设置是否同步加载图片。建议加载尺寸较小的本地图片时将syncLoad设为true，因为耗时较短，在主线程上执行即可。\n属性名称：syncLoad\n属性参数：{'value': {\"type\":\"boolean\",\"required\":true,\"description\":\"是否同步加载图片，默认是异步加载。同步加载时阻塞UI线程，不会显示占位图。\",\"default\":false}}\n", "设置图片解码尺寸。仅在目标尺寸小于图源尺寸时生效。svg类型图源和PixelMap资源不支持该属性。\n属性名称：sourceSize\n属性参数：{'value': {\"type\":{\"width\":\"number\",\"height\":\"number\"},\"required\":true,\"description\":\"图片解码尺寸，降低图片的分辨率，常用于需要让图片显示尺寸比组件尺寸更小的场景。和ImageFit.None配合使用时可在组件内显示小图。\",\"default\":null}}\n", "设置图片是否可复制。当copyOption设置为非CopyOptions.None时，支持使用长按、鼠标右击、快捷组合键'CTRL+C'等方式进行复制。svg图片不支持复制。\n属性名称：copyOption\n属性参数：{'value': {\"type\":\"CopyOptions\",\"required\":true,\"description\":\"图片是否可复制。\",\"default\":\"CopyOptions.None\"}}\n", "设置子元素在位置定位时的锚点。\n属性名称：markAnchor\n属性参数：{'value': {\"type\":[\"Position\",\"LocalizedPosition\"],\"required\":true,\"description\":\"设置子元素在位置定位时的锚点，从position或offset的位置上，进一步偏移。设置.position({x: value1, y: value2}).markAnchor({x: value3, y: value4})，效果等于设置.position({x: value1 - value3, y: value2 - value4})，offset同理。单独使用markAnchor，设置.markAnchor({x: value1, y: value2})，效果等于设置.offset({x: -value1, y: -value2})。\",\"default\":null}}\n", "设置字体列表。\n属性名称：fontFamily\n属性参数：{'value': {\"type\":[\"string\",\"Resource\"],\"required\":true,\"description\":\"字体列表。默认字体'HarmonyOS Sans'。应用当前支持'HarmonyOS Sans'字体和注册自定义字体。卡片当前仅支持'HarmonyOS Sans'字体。\",\"default\":\"HarmonyOS Sans\"}}\n"]], "uris": null, "data": null, "included": ["metadatas", "documents", "distances"]}}}, {"id": "gxYxTHVJQuJZdL6MMcxVnP", "description": "查询组件Column的相关属性、事件文档", "subtasks": [], "details": {"query": ["设置Column组件的垂直居中对齐"], "n_results": 10, "query_results": {"ids": [["a44c0ffe-dffc-4cb3-a6c5-17b220f6ad0c", "09af9fd0-9440-4136-8bbf-9835ad3e65e8", "91a5fea0-4a01-4fa8-ad43-db72f51f3ed5", "04d98ac5-e176-4e46-a0e0-7cf93182d0c7", "33ea25aa-cac4-4f85-b3b7-f1b9a5bac825", "d82cc3ce-d0d6-419c-bf57-9ab4f36ea11d", "b6443713-fdd1-4b76-b02a-276d24cc6f59", "872aac8e-8101-46e9-90b6-fbd034359d5d", "f12a099d-8fd6-4be6-b7fd-85791b7fa4e3", "b28478cc-39e7-47f6-a8d5-1be66cd8fd1b"]], "distances": [[0.288895845413208, 0.2993379831314087, 0.3542857766151428, 0.3685433864593506, 0.37001508474349976, 0.40009361505508423, 0.4305152893066406, 0.4400285482406616, 0.4401629567146301, 0.4437529444694519]], "metadatas": [[{"component_name": "Column", "name": "alignItems", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "justifyContent", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "position", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "height", "source": "harmony-component-doc", "type": "attribute"}]], "embeddings": null, "documents": [["设置子组件在水平方向上的对齐格式。\n属性名称：alignItems\n属性参数：{'value': {\"type\":\"HorizontalAlign\",\"required\":true,\"description\":\"子组件在水平方向上的对齐格式。\",\"default\":\"HorizontalAlign.Center\"}}\n", "设置子组件在垂直方向上的对齐格式。\n属性名称：justifyContent\n属性参数：{'value': {\"type\":\"FlexAlign\",\"required\":true,\"description\":\"子组件在垂直方向上的对齐格式。\",\"default\":\"FlexAlign.Start\"}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "绝对定位，确定子组件相对父组件的位置。\n属性名称：position\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"绝对定位，确定子组件相对父组件的位置。当父容器为Row/Column/Flex时，设置position的子组件不占位。Position类型基于父组件左上角确定位置;Edges类型基于父组件四边确定位置，top/left/right/bottom分别为组件各边距离父组件相应边的边距，通过边距来确定组件相对于父组件的位置;LocalizedEdges类型基于父组件四边确定位置，支持镜像模式。适用于置顶显示、悬浮按钮等组件在父容器中位置固定的场景。不支持在宽高为零的布局容器上设置。当父容器为RelativeContainer, 且子组件设置了alignRules属性, 则子组件的position属性不生效。\",\"default\":null}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "设置组件自身的高度，缺省时使用元素自身内容需要的高度。若子组件的高大于父组件的高，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：height\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件高度。单位：vp\",\"default\":null}}\n"]], "uris": null, "data": null, "included": ["metadatas", "documents", "distances"]}}}, {"id": "jDfoxYeTH6mkugKEtPFmkR", "description": "查询组件Row的相关属性、事件文档", "subtasks": [], "details": {"query": ["设置Row组件的水平居中对齐"], "n_results": 10, "query_results": {"ids": [["f7b67e63-ea08-4638-a40f-13d01ba5018a", "b4bd2554-14f5-4f93-88d4-a9364b2a1a98", "39c2af71-1a85-4240-b629-de8556bf1d56", "09116475-d460-4e37-b890-116e56dfa4e4", "1702e389-fc07-4b21-96d8-73072748fd93", "e2c837c5-9be8-4c0b-9c02-9110c16fba0c", "1258b0a7-c720-4c4f-a4f8-8cc6c86bda4c", "5ef6211a-73b4-4e16-82a1-072280f45ac2", "ce772f3f-6928-487d-84fe-ecb0070db9d9", "39ab6d3a-08f9-4c30-834f-cf418da72340"]], "distances": [[0.3420678377151489, 0.3545454144477844, 0.36197197437286377, 0.38189518451690674, 0.3969007730484009, 0.41590309143066406, 0.4188816547393799, 0.4348257780075073, 0.45127224922180176, 0.4514678716659546]], "metadatas": [[{"component_name": "Row", "name": "justifyContent", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Row", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Row", "name": "alignItems", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Row", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Row", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Row", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Row", "name": "aspectRatio", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Row", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Row", "name": "pixelRound", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Row", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}]], "embeddings": null, "documents": [["设置子组件在水平方向上的对齐格式。\n属性名称：justifyContent\n属性参数：{'value': {\"type\":\"FlexAlign\",\"required\":true,\"description\":\"子组件在水平方向上的对齐格式。默认值：FlexAlign.Start\",\"default\":null}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "设置子组件在垂直方向上的对齐格式。\n属性名称：alignItems\n属性参数：{'value': {\"type\":\"VerticalAlign\",\"required\":true,\"description\":\"子组件在垂直方向上的对齐格式。默认值：VerticalAlign.Center\",\"default\":null}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "指定当前组件的宽高比。\n属性名称：aspectRatio\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"指定当前组件的宽高比，aspectRatio = width/height。API version 9及以前，默认值为：1.0。API version 10：无默认值。该属性在不设置值或者设置非法值时不生效。例如，Row只设置宽度且没有子组件，aspectRatio不设置值或者设置成负数时，此时Row高度为0。\",\"default\":null}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "指定当前组件的像素级取整对齐方式。\n属性名称：pixelRound\n属性参数：{'value': {\"type\":\"PixelRoundPolicy\",\"required\":true,\"description\":\"指定当前组件的像素级取整对齐方式。\",\"default\":null}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n"]], "uris": null, "data": null, "included": ["metadatas", "documents", "distances"]}}}], "details": null}, {"id": "RXNH883Wd3EoPydt8kz9W3", "description": "过滤低于阈值的查询结果", "subtasks": [{"id": "YF24Bm5zhNY7jAMCFnqtkv", "description": "过滤低于阈值的查询结果: 设置图片的宽度为150vp", "subtasks": [], "details": {"query": "设置图片的宽度为150vp", "result_ids": ["bd88bdf5-c228-4034-af03-225c2d433083", "e00f8a63-c4a4-425e-817c-3ec42c9e5580", "ed850cab-af82-45d6-ba4f-d03878b46941", "7bbf55ff-10c4-40df-bb2c-5e7d861c54ac", "760646e4-25ee-45c7-afff-c0e6ba5753fc", "fa66a688-14fe-4006-a250-63f31adfb281", "0296daf5-4a2c-4dd8-ab7b-b3c351dd4ce3", "4af9acf0-7a3c-44d4-82d9-2828212cca26", "fbaf4c7f-24a8-45c2-b1f3-5e316867163f", "48715149-f0ac-4328-9429-801f894ef8e9"], "result_documents": ["设置图片解码尺寸。仅在目标尺寸小于图源尺寸时生效。svg类型图源和PixelMap资源不支持该属性。\n属性名称：sourceSize\n属性参数：{'value': {\"type\":{\"width\":\"number\",\"height\":\"number\"},\"required\":true,\"description\":\"图片解码尺寸，降低图片的分辨率，常用于需要让图片显示尺寸比组件尺寸更小的场景。和ImageFit.None配合使用时可在组件内显示小图。\",\"default\":null}}\n", "设置图片加载时显示的占位图。\n属性名称：alt\n属性参数：{'value': {\"type\":[\"string\",\"Resource\",\"PixelMap\"],\"required\":true,\"description\":\"加载时显示的占位图，支持本地图片（png、jpg、bmp、svg、gif和heif类型）,支持PixelMap类型图片，不支持网络图片。\",\"default\":null}}\n", "设置组件自身的宽度，缺省时使用元素自身内容需要的宽度。若子组件的宽大于父组件的宽，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：width\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件宽度。单位：vp\",\"default\":null}}\n", "设置图片的重复样式，从中心点向两边重复，剩余空间不足放下一张图片时会截断。svg类型图源不支持该属性。\n属性名称：objectRepeat\n属性参数：{'value': {\"type\":\"ImageRepeat\",\"required\":true,\"description\":\"图片的重复样式。\",\"default\":\"ImageRepeat.NoRepeat\"}}\n", "图片数据加载成功和解码成功时均触发该回调，返回成功加载的图片尺寸。\n事件名称：onComplete\n事件参数：{'width': {\"type\":\"number\",\"required\":true,\"description\":\"图片的宽。单位：像素\",\"default\":null}, 'height': {\"type\":\"number\",\"required\":true,\"description\":\"图片的高。单位：像素\",\"default\":null}, 'componentWidth': {\"type\":\"number\",\"required\":true,\"description\":\"组件的宽。单位：像素\",\"default\":null}, 'componentHeight': {\"type\":\"number\",\"required\":true,\"description\":\"组件的高。单位：像素\",\"default\":null}, 'loadingStatus': {\"type\":\"number\",\"required\":true,\"description\":\"图片加载成功的状态值。返回的状态值为0时，表示图片数据加载成功。返回的状态值为1时，表示图片解码成功。\",\"default\":null}, 'contentWidth': {\"type\":\"number\",\"required\":true,\"description\":\"图片实际绘制的宽度。单位：像素。仅在loadingStatus返回1时有效。\",\"default\":null}, 'contentHeight': {\"type\":\"number\",\"required\":true,\"description\":\"图片实际绘制的高度。单位：像素。仅在loadingStatus返回1时有效。\",\"default\":null}, 'contentOffsetX': {\"type\":\"number\",\"required\":true,\"description\":\"实际绘制内容相对于组件自身的x轴偏移。单位：像素。仅在loadingStatus返回1时有效。\",\"default\":null}, 'contentOffsetY': {\"type\":\"number\",\"required\":true,\"description\":\"实际绘制内容相对于组件自身的y轴偏移。单位：像素。仅在loadingStatus返回1时有效。\",\"default\":null}}\n事件返回值：None\n", "设置图像拉伸时可调整大小的图像选项。拉伸对拖拽缩略图以及占位图有效。\n属性名称：resizable\n属性参数：{'value': {\"type\":\"ResizableOptions\",\"required\":true,\"description\":\"图像拉伸时可调整大小的图像选项。\",\"default\":null}}\n", "设置图片的显示尺寸是否跟随图源尺寸。图片组件尺寸未设置时，其显示尺寸是否跟随图源尺寸。\n属性名称：fitOriginalSize\n属性参数：{'value': {\"type\":\"boolean\",\"required\":true,\"description\":\"图片的显示尺寸是否跟随图源尺寸\",\"default\":false}}\n", "设置图片的填充效果。\n属性名称：objectFit\n属性参数：{'value': {\"type\":\"ImageFit\",\"required\":true,\"description\":\"图片的填充效果。\",\"default\":\"ImageFit.Cover\"}}\n", "指定当前组件的宽高比。\n属性名称：aspectRatio\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"指定当前组件的宽高比，aspectRatio = width/height。API version 9及以前，默认值为：1.0。API version 10：无默认值。该属性在不设置值或者设置非法值时不生效。例如，Row只设置宽度且没有子组件，aspectRatio不设置值或者设置成负数时，此时Row高度为0。\",\"default\":null}}\n", "设置高宽尺寸。从API version 10开始，该接口支持calc计算特性。\n属性名称：size\n属性参数：{'value': {\"type\":\"SizeOptions\",\"required\":true,\"description\":\"要设置的高宽尺寸。\",\"default\":null}}\n"], "result_metadatas": [{"component_name": "Image", "name": "sourceSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "alt", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "width", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "objectRepeat", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "onComplete", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Image", "name": "resizable", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "fitOriginalSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "objectFit", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "aspectRatio", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "size", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.3894936442375183, 0.38994354009628296, 0.39795124530792236, 0.4022173285484314, 0.40247035026550293, 0.40340930223464966, 0.4096214175224304, 0.4145698547363281, 0.4207606911659241, 0.42372310161590576], "threshold": 0.6, "query_text_results": [["设置图片解码尺寸。仅在目标尺寸小于图源尺寸时生效。svg类型图源和PixelMap资源不支持该属性。\n属性名称：sourceSize\n属性参数：{'value': {\"type\":{\"width\":\"number\",\"height\":\"number\"},\"required\":true,\"description\":\"图片解码尺寸，降低图片的分辨率，常用于需要让图片显示尺寸比组件尺寸更小的场景。和ImageFit.None配合使用时可在组件内显示小图。\",\"default\":null}}\n", {"component_name": "Image", "name": "sourceSize", "source": "harmony-component-doc", "type": "attribute"}, 0.6105063557624817], ["设置图片加载时显示的占位图。\n属性名称：alt\n属性参数：{'value': {\"type\":[\"string\",\"Resource\",\"PixelMap\"],\"required\":true,\"description\":\"加载时显示的占位图，支持本地图片（png、jpg、bmp、svg、gif和heif类型）,支持PixelMap类型图片，不支持网络图片。\",\"default\":null}}\n", {"component_name": "Image", "name": "alt", "source": "harmony-component-doc", "type": "attribute"}, 0.610056459903717], ["设置组件自身的宽度，缺省时使用元素自身内容需要的宽度。若子组件的宽大于父组件的宽，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：width\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件宽度。单位：vp\",\"default\":null}}\n", {"component_name": "Image", "name": "width", "source": "harmony-component-doc", "type": "attribute"}, 0.6020487546920776]]}}, {"id": "D24RvnVvVRMFg4Nz49GgnN", "description": "过滤低于阈值的查询结果: 设置图片的高度为200vp", "subtasks": [], "details": {"query": "设置图片的高度为200vp", "result_ids": ["16d2a454-aec5-4a67-8522-da1b0d6a20ae", "bd88bdf5-c228-4034-af03-225c2d433083", "e00f8a63-c4a4-425e-817c-3ec42c9e5580", "760646e4-25ee-45c7-afff-c0e6ba5753fc", "7bbf55ff-10c4-40df-bb2c-5e7d861c54ac", "35555aee-0c6f-4e01-9367-11dfc32fca87", "0296daf5-4a2c-4dd8-ab7b-b3c351dd4ce3", "4af9acf0-7a3c-44d4-82d9-2828212cca26", "fbaf4c7f-24a8-45c2-b1f3-5e316867163f", "896d3e5c-2dc7-47f7-985f-4439bf645b0c"], "result_documents": ["设置组件自身的高度，缺省时使用元素自身内容需要的高度。若子组件的高大于父组件的高，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：height\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件高度。单位：vp\",\"default\":null}}\n", "设置图片解码尺寸。仅在目标尺寸小于图源尺寸时生效。svg类型图源和PixelMap资源不支持该属性。\n属性名称：sourceSize\n属性参数：{'value': {\"type\":{\"width\":\"number\",\"height\":\"number\"},\"required\":true,\"description\":\"图片解码尺寸，降低图片的分辨率，常用于需要让图片显示尺寸比组件尺寸更小的场景。和ImageFit.None配合使用时可在组件内显示小图。\",\"default\":null}}\n", "设置图片加载时显示的占位图。\n属性名称：alt\n属性参数：{'value': {\"type\":[\"string\",\"Resource\",\"PixelMap\"],\"required\":true,\"description\":\"加载时显示的占位图，支持本地图片（png、jpg、bmp、svg、gif和heif类型）,支持PixelMap类型图片，不支持网络图片。\",\"default\":null}}\n", "图片数据加载成功和解码成功时均触发该回调，返回成功加载的图片尺寸。\n事件名称：onComplete\n事件参数：{'width': {\"type\":\"number\",\"required\":true,\"description\":\"图片的宽。单位：像素\",\"default\":null}, 'height': {\"type\":\"number\",\"required\":true,\"description\":\"图片的高。单位：像素\",\"default\":null}, 'componentWidth': {\"type\":\"number\",\"required\":true,\"description\":\"组件的宽。单位：像素\",\"default\":null}, 'componentHeight': {\"type\":\"number\",\"required\":true,\"description\":\"组件的高。单位：像素\",\"default\":null}, 'loadingStatus': {\"type\":\"number\",\"required\":true,\"description\":\"图片加载成功的状态值。返回的状态值为0时，表示图片数据加载成功。返回的状态值为1时，表示图片解码成功。\",\"default\":null}, 'contentWidth': {\"type\":\"number\",\"required\":true,\"description\":\"图片实际绘制的宽度。单位：像素。仅在loadingStatus返回1时有效。\",\"default\":null}, 'contentHeight': {\"type\":\"number\",\"required\":true,\"description\":\"图片实际绘制的高度。单位：像素。仅在loadingStatus返回1时有效。\",\"default\":null}, 'contentOffsetX': {\"type\":\"number\",\"required\":true,\"description\":\"实际绘制内容相对于组件自身的x轴偏移。单位：像素。仅在loadingStatus返回1时有效。\",\"default\":null}, 'contentOffsetY': {\"type\":\"number\",\"required\":true,\"description\":\"实际绘制内容相对于组件自身的y轴偏移。单位：像素。仅在loadingStatus返回1时有效。\",\"default\":null}}\n事件返回值：None\n", "设置图片的重复样式，从中心点向两边重复，剩余空间不足放下一张图片时会截断。svg类型图源不支持该属性。\n属性名称：objectRepeat\n属性参数：{'value': {\"type\":\"ImageRepeat\",\"required\":true,\"description\":\"图片的重复样式。\",\"default\":\"ImageRepeat.NoRepeat\"}}\n", "设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小。\n属性名称：lineHeight\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本行高，为number类型时单位为fp。\",\"default\":null}}\n", "设置图片的显示尺寸是否跟随图源尺寸。图片组件尺寸未设置时，其显示尺寸是否跟随图源尺寸。\n属性名称：fitOriginalSize\n属性参数：{'value': {\"type\":\"boolean\",\"required\":true,\"description\":\"图片的显示尺寸是否跟随图源尺寸\",\"default\":false}}\n", "设置图片的填充效果。\n属性名称：objectFit\n属性参数：{'value': {\"type\":\"ImageFit\",\"required\":true,\"description\":\"图片的填充效果。\",\"default\":\"ImageFit.Cover\"}}\n", "指定当前组件的宽高比。\n属性名称：aspectRatio\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"指定当前组件的宽高比，aspectRatio = width/height。API version 9及以前，默认值为：1.0。API version 10：无默认值。该属性在不设置值或者设置非法值时不生效。例如，Row只设置宽度且没有子组件，aspectRatio不设置值或者设置成负数时，此时Row高度为0。\",\"default\":null}}\n", "设置图片的插值效果，即缓解图片在缩放时的锯齿问题。svg类型图源不支持该属性。\n属性名称：interpolation\n属性参数：{'value': {\"type\":\"ImageInterpolation\",\"required\":true,\"description\":\"图片的插值效果。\",\"default\":\"ImageInterpolation.None\"}}\n"], "result_metadatas": [{"component_name": "Image", "name": "height", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "sourceSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "alt", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "onComplete", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Image", "name": "objectRepeat", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "lineHeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "fitOriginalSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "objectFit", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "aspectRatio", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "interpolation", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.3946078419685364, 0.4044812321662903, 0.40506935119628906, 0.41085565090179443, 0.4207828640937805, 0.4234025478363037, 0.42741823196411133, 0.4286372661590576, 0.4321587085723877, 0.43651145696640015], "threshold": 0.6, "query_text_results": [["设置组件自身的高度，缺省时使用元素自身内容需要的高度。若子组件的高大于父组件的高，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：height\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件高度。单位：vp\",\"default\":null}}\n", {"component_name": "Image", "name": "height", "source": "harmony-component-doc", "type": "attribute"}, 0.6053921580314636]]}}, {"id": "YiWqLTJbzTutCwvBS4nYUJ", "description": "过滤低于阈值的查询结果: 设置图片的缩放类型为适应中心", "subtasks": [], "details": {"query": "设置图片的缩放类型为适应中心", "result_ids": ["982e7f22-f5f1-4eef-b10f-f0fa52bf6fce", "fa66a688-14fe-4006-a250-63f31adfb281", "621abd37-14ff-4471-bd8a-2b44d6483327", "e00f8a63-c4a4-425e-817c-3ec42c9e5580", "896d3e5c-2dc7-47f7-985f-4439bf645b0c", "4af9acf0-7a3c-44d4-82d9-2828212cca26", "7bbf55ff-10c4-40df-bb2c-5e7d861c54ac", "0296daf5-4a2c-4dd8-ab7b-b3c351dd4ce3", "bd88bdf5-c228-4034-af03-225c2d433083", "8c7ce776-da25-45a7-aa7d-7568be72f79e"], "result_documents": ["设置图片解码过程中是否对图源自动缩放。降采样解码时图片的部分信息丢失，因此可能会导致图片质量的下降（如：出现锯齿），这时可以选择把autoResize设为false，按原图尺寸解码，提升显示效果，但会增加内存占用。\n属性名称：autoResize\n属性参数：{'value': {\"type\":\"boolean\",\"required\":true,\"description\":\"图片解码过程中是否对图源自动缩放。\",\"default\":false}}\n", "设置图像拉伸时可调整大小的图像选项。拉伸对拖拽缩略图以及占位图有效。\n属性名称：resizable\n属性参数：{'value': {\"type\":\"ResizableOptions\",\"required\":true,\"description\":\"图像拉伸时可调整大小的图像选项。\",\"default\":null}}\n", "设置图片是否跟随系统语言方向，在RTL语言环境下显示镜像翻转显示效果。\n属性名称：matchTextDirection\n属性参数：{'value': {\"type\":\"boolean\",\"required\":true,\"description\":\"图片是否跟随系统语言方向。\",\"default\":false}}\n", "设置图片加载时显示的占位图。\n属性名称：alt\n属性参数：{'value': {\"type\":[\"string\",\"Resource\",\"PixelMap\"],\"required\":true,\"description\":\"加载时显示的占位图，支持本地图片（png、jpg、bmp、svg、gif和heif类型）,支持PixelMap类型图片，不支持网络图片。\",\"default\":null}}\n", "设置图片的插值效果，即缓解图片在缩放时的锯齿问题。svg类型图源不支持该属性。\n属性名称：interpolation\n属性参数：{'value': {\"type\":\"ImageInterpolation\",\"required\":true,\"description\":\"图片的插值效果。\",\"default\":\"ImageInterpolation.None\"}}\n", "设置图片的填充效果。\n属性名称：objectFit\n属性参数：{'value': {\"type\":\"ImageFit\",\"required\":true,\"description\":\"图片的填充效果。\",\"default\":\"ImageFit.Cover\"}}\n", "设置图片的重复样式，从中心点向两边重复，剩余空间不足放下一张图片时会截断。svg类型图源不支持该属性。\n属性名称：objectRepeat\n属性参数：{'value': {\"type\":\"ImageRepeat\",\"required\":true,\"description\":\"图片的重复样式。\",\"default\":\"ImageRepeat.NoRepeat\"}}\n", "设置图片的显示尺寸是否跟随图源尺寸。图片组件尺寸未设置时，其显示尺寸是否跟随图源尺寸。\n属性名称：fitOriginalSize\n属性参数：{'value': {\"type\":\"boolean\",\"required\":true,\"description\":\"图片的显示尺寸是否跟随图源尺寸\",\"default\":false}}\n", "设置图片解码尺寸。仅在目标尺寸小于图源尺寸时生效。svg类型图源和PixelMap资源不支持该属性。\n属性名称：sourceSize\n属性参数：{'value': {\"type\":{\"width\":\"number\",\"height\":\"number\"},\"required\":true,\"description\":\"图片解码尺寸，降低图片的分辨率，常用于需要让图片显示尺寸比组件尺寸更小的场景。和ImageFit.None配合使用时可在组件内显示小图。\",\"default\":null}}\n", "设置是否同步加载图片。建议加载尺寸较小的本地图片时将syncLoad设为true，因为耗时较短，在主线程上执行即可。\n属性名称：syncLoad\n属性参数：{'value': {\"type\":\"boolean\",\"required\":true,\"description\":\"是否同步加载图片，默认是异步加载。同步加载时阻塞UI线程，不会显示占位图。\",\"default\":false}}\n"], "result_metadatas": [{"component_name": "Image", "name": "autoResize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "resizable", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "matchTextDirection", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "alt", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "interpolation", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "objectFit", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "objectRepeat", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "fitOriginalSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "sourceSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "syncLoad", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.3439790606498718, 0.3662910461425781, 0.3869044780731201, 0.3918200731277466, 0.40190649032592773, 0.40491193532943726, 0.41703832149505615, 0.41797488927841187, 0.4236486554145813, 0.43001341819763184], "threshold": 0.6, "query_text_results": [["设置图片解码过程中是否对图源自动缩放。降采样解码时图片的部分信息丢失，因此可能会导致图片质量的下降（如：出现锯齿），这时可以选择把autoResize设为false，按原图尺寸解码，提升显示效果，但会增加内存占用。\n属性名称：autoResize\n属性参数：{'value': {\"type\":\"boolean\",\"required\":true,\"description\":\"图片解码过程中是否对图源自动缩放。\",\"default\":false}}\n", {"component_name": "Image", "name": "autoResize", "source": "harmony-component-doc", "type": "attribute"}, 0.6560209393501282], ["设置图像拉伸时可调整大小的图像选项。拉伸对拖拽缩略图以及占位图有效。\n属性名称：resizable\n属性参数：{'value': {\"type\":\"ResizableOptions\",\"required\":true,\"description\":\"图像拉伸时可调整大小的图像选项。\",\"default\":null}}\n", {"component_name": "Image", "name": "resizable", "source": "harmony-component-doc", "type": "attribute"}, 0.6337089538574219], ["设置图片是否跟随系统语言方向，在RTL语言环境下显示镜像翻转显示效果。\n属性名称：matchTextDirection\n属性参数：{'value': {\"type\":\"boolean\",\"required\":true,\"description\":\"图片是否跟随系统语言方向。\",\"default\":false}}\n", {"component_name": "Image", "name": "matchTextDirection", "source": "harmony-component-doc", "type": "attribute"}, 0.6130955219268799]]}}, {"id": "Qua3tJkLMCz79hrQ2LVbEg", "description": "过滤低于阈值的查询结果: 设置图片的资源引用为app.media.bookdash_icon", "subtasks": [], "details": {"query": "设置图片的资源引用为app.media.bookdash_icon", "result_ids": ["e00f8a63-c4a4-425e-817c-3ec42c9e5580", "7bbf55ff-10c4-40df-bb2c-5e7d861c54ac", "4af9acf0-7a3c-44d4-82d9-2828212cca26", "621abd37-14ff-4471-bd8a-2b44d6483327", "fa66a688-14fe-4006-a250-63f31adfb281", "8c7ce776-da25-45a7-aa7d-7568be72f79e", "bd88bdf5-c228-4034-af03-225c2d433083", "ce502fef-692f-40de-ae1d-e83783ff594e", "ffc567f0-6edc-42a5-9ec1-b62cc55f9fd7", "f4daa492-1611-4f45-946f-a09d73048876"], "result_documents": ["设置图片加载时显示的占位图。\n属性名称：alt\n属性参数：{'value': {\"type\":[\"string\",\"Resource\",\"PixelMap\"],\"required\":true,\"description\":\"加载时显示的占位图，支持本地图片（png、jpg、bmp、svg、gif和heif类型）,支持PixelMap类型图片，不支持网络图片。\",\"default\":null}}\n", "设置图片的重复样式，从中心点向两边重复，剩余空间不足放下一张图片时会截断。svg类型图源不支持该属性。\n属性名称：objectRepeat\n属性参数：{'value': {\"type\":\"ImageRepeat\",\"required\":true,\"description\":\"图片的重复样式。\",\"default\":\"ImageRepeat.NoRepeat\"}}\n", "设置图片的填充效果。\n属性名称：objectFit\n属性参数：{'value': {\"type\":\"ImageFit\",\"required\":true,\"description\":\"图片的填充效果。\",\"default\":\"ImageFit.Cover\"}}\n", "设置图片是否跟随系统语言方向，在RTL语言环境下显示镜像翻转显示效果。\n属性名称：matchTextDirection\n属性参数：{'value': {\"type\":\"boolean\",\"required\":true,\"description\":\"图片是否跟随系统语言方向。\",\"default\":false}}\n", "设置图像拉伸时可调整大小的图像选项。拉伸对拖拽缩略图以及占位图有效。\n属性名称：resizable\n属性参数：{'value': {\"type\":\"ResizableOptions\",\"required\":true,\"description\":\"图像拉伸时可调整大小的图像选项。\",\"default\":null}}\n", "设置是否同步加载图片。建议加载尺寸较小的本地图片时将syncLoad设为true，因为耗时较短，在主线程上执行即可。\n属性名称：syncLoad\n属性参数：{'value': {\"type\":\"boolean\",\"required\":true,\"description\":\"是否同步加载图片，默认是异步加载。同步加载时阻塞UI线程，不会显示占位图。\",\"default\":false}}\n", "设置图片解码尺寸。仅在目标尺寸小于图源尺寸时生效。svg类型图源和PixelMap资源不支持该属性。\n属性名称：sourceSize\n属性参数：{'value': {\"type\":{\"width\":\"number\",\"height\":\"number\"},\"required\":true,\"description\":\"图片解码尺寸，降低图片的分辨率，常用于需要让图片显示尺寸比组件尺寸更小的场景。和ImageFit.None配合使用时可在组件内显示小图。\",\"default\":null}}\n", "设置图片是否可复制。当copyOption设置为非CopyOptions.None时，支持使用长按、鼠标右击、快捷组合键'CTRL+C'等方式进行复制。svg图片不支持复制。\n属性名称：copyOption\n属性参数：{'value': {\"type\":\"CopyOptions\",\"required\":true,\"description\":\"图片是否可复制。\",\"default\":\"CopyOptions.None\"}}\n", "设置子元素在位置定位时的锚点。\n属性名称：markAnchor\n属性参数：{'value': {\"type\":[\"Position\",\"LocalizedPosition\"],\"required\":true,\"description\":\"设置子元素在位置定位时的锚点，从position或offset的位置上，进一步偏移。设置.position({x: value1, y: value2}).markAnchor({x: value3, y: value4})，效果等于设置.position({x: value1 - value3, y: value2 - value4})，offset同理。单独使用markAnchor，设置.markAnchor({x: value1, y: value2})，效果等于设置.offset({x: -value1, y: -value2})。\",\"default\":null}}\n", "设置字体列表。\n属性名称：fontFamily\n属性参数：{'value': {\"type\":[\"string\",\"Resource\"],\"required\":true,\"description\":\"字体列表。默认字体'HarmonyOS Sans'。应用当前支持'HarmonyOS Sans'字体和注册自定义字体。卡片当前仅支持'HarmonyOS Sans'字体。\",\"default\":\"HarmonyOS Sans\"}}\n"], "result_metadatas": [{"component_name": "Image", "name": "alt", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "objectRepeat", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "objectFit", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "matchTextDirection", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "resizable", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "syncLoad", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "sourceSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "copyOption", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "markAnchor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Image", "name": "fontFamily", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.428635835647583, 0.43746715784072876, 0.44977957010269165, 0.4545472264289856, 0.4579538106918335, 0.45834195613861084, 0.4616825580596924, 0.4631223678588867, 0.46585381031036377, 0.4738317131996155], "threshold": 0.6, "query_text_results": []}}], "details": null}, {"id": "cLeApyQUDE3uefxfTiNZH2", "description": "过滤低于阈值的查询结果", "subtasks": [{"id": "UtHK6qhjBo5FPC9d9NBJVA", "description": "过滤低于阈值的查询结果: 设置Column组件的垂直居中对齐", "subtasks": [], "details": {"query": "设置Column组件的垂直居中对齐", "result_ids": ["a44c0ffe-dffc-4cb3-a6c5-17b220f6ad0c", "09af9fd0-9440-4136-8bbf-9835ad3e65e8", "91a5fea0-4a01-4fa8-ad43-db72f51f3ed5", "04d98ac5-e176-4e46-a0e0-7cf93182d0c7", "33ea25aa-cac4-4f85-b3b7-f1b9a5bac825", "d82cc3ce-d0d6-419c-bf57-9ab4f36ea11d", "b6443713-fdd1-4b76-b02a-276d24cc6f59", "872aac8e-8101-46e9-90b6-fbd034359d5d", "f12a099d-8fd6-4be6-b7fd-85791b7fa4e3", "b28478cc-39e7-47f6-a8d5-1be66cd8fd1b"], "result_documents": ["设置子组件在水平方向上的对齐格式。\n属性名称：alignItems\n属性参数：{'value': {\"type\":\"HorizontalAlign\",\"required\":true,\"description\":\"子组件在水平方向上的对齐格式。\",\"default\":\"HorizontalAlign.Center\"}}\n", "设置子组件在垂直方向上的对齐格式。\n属性名称：justifyContent\n属性参数：{'value': {\"type\":\"FlexAlign\",\"required\":true,\"description\":\"子组件在垂直方向上的对齐格式。\",\"default\":\"FlexAlign.Start\"}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "绝对定位，确定子组件相对父组件的位置。\n属性名称：position\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"绝对定位，确定子组件相对父组件的位置。当父容器为Row/Column/Flex时，设置position的子组件不占位。Position类型基于父组件左上角确定位置;Edges类型基于父组件四边确定位置，top/left/right/bottom分别为组件各边距离父组件相应边的边距，通过边距来确定组件相对于父组件的位置;LocalizedEdges类型基于父组件四边确定位置，支持镜像模式。适用于置顶显示、悬浮按钮等组件在父容器中位置固定的场景。不支持在宽高为零的布局容器上设置。当父容器为RelativeContainer, 且子组件设置了alignRules属性, 则子组件的position属性不生效。\",\"default\":null}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "设置组件自身的高度，缺省时使用元素自身内容需要的高度。若子组件的高大于父组件的高，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：height\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件高度。单位：vp\",\"default\":null}}\n"], "result_metadatas": [{"component_name": "Column", "name": "alignItems", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "justifyContent", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "position", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "height", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.288895845413208, 0.2993379831314087, 0.3542857766151428, 0.3685433864593506, 0.37001508474349976, 0.40009361505508423, 0.4305152893066406, 0.4400285482406616, 0.4401629567146301, 0.4437529444694519], "threshold": 0.6, "query_text_results": [["设置子组件在水平方向上的对齐格式。\n属性名称：alignItems\n属性参数：{'value': {\"type\":\"HorizontalAlign\",\"required\":true,\"description\":\"子组件在水平方向上的对齐格式。\",\"default\":\"HorizontalAlign.Center\"}}\n", {"component_name": "Column", "name": "alignItems", "source": "harmony-component-doc", "type": "attribute"}, 0.711104154586792], ["设置子组件在垂直方向上的对齐格式。\n属性名称：justifyContent\n属性参数：{'value': {\"type\":\"FlexAlign\",\"required\":true,\"description\":\"子组件在垂直方向上的对齐格式。\",\"default\":\"FlexAlign.Start\"}}\n", {"component_name": "Column", "name": "justifyContent", "source": "harmony-component-doc", "type": "attribute"}, 0.7006620168685913], ["子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", {"component_name": "Column", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, 0.6457142233848572], ["设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", {"component_name": "Column", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, 0.6314566135406494], ["指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", {"component_name": "Column", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, 0.6299849152565002]]}}], "details": null}, {"id": "KZSQdRbafCHg8uiLZ8An5u", "description": "过滤低于阈值的查询结果", "subtasks": [{"id": "VMdEmqMy3gTXrTQ4F4ahoi", "description": "过滤低于阈值的查询结果: 设置Row组件的水平居中对齐", "subtasks": [], "details": {"query": "设置Row组件的水平居中对齐", "result_ids": ["f7b67e63-ea08-4638-a40f-13d01ba5018a", "b4bd2554-14f5-4f93-88d4-a9364b2a1a98", "39c2af71-1a85-4240-b629-de8556bf1d56", "09116475-d460-4e37-b890-116e56dfa4e4", "1702e389-fc07-4b21-96d8-73072748fd93", "e2c837c5-9be8-4c0b-9c02-9110c16fba0c", "1258b0a7-c720-4c4f-a4f8-8cc6c86bda4c", "5ef6211a-73b4-4e16-82a1-072280f45ac2", "ce772f3f-6928-487d-84fe-ecb0070db9d9", "39ab6d3a-08f9-4c30-834f-cf418da72340"], "result_documents": ["设置子组件在水平方向上的对齐格式。\n属性名称：justifyContent\n属性参数：{'value': {\"type\":\"FlexAlign\",\"required\":true,\"description\":\"子组件在水平方向上的对齐格式。默认值：FlexAlign.Start\",\"default\":null}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "设置子组件在垂直方向上的对齐格式。\n属性名称：alignItems\n属性参数：{'value': {\"type\":\"VerticalAlign\",\"required\":true,\"description\":\"子组件在垂直方向上的对齐格式。默认值：VerticalAlign.Center\",\"default\":null}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "指定当前组件的宽高比。\n属性名称：aspectRatio\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"指定当前组件的宽高比，aspectRatio = width/height。API version 9及以前，默认值为：1.0。API version 10：无默认值。该属性在不设置值或者设置非法值时不生效。例如，Row只设置宽度且没有子组件，aspectRatio不设置值或者设置成负数时，此时Row高度为0。\",\"default\":null}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "指定当前组件的像素级取整对齐方式。\n属性名称：pixelRound\n属性参数：{'value': {\"type\":\"PixelRoundPolicy\",\"required\":true,\"description\":\"指定当前组件的像素级取整对齐方式。\",\"default\":null}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n"], "result_metadatas": [{"component_name": "Row", "name": "justifyContent", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Row", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Row", "name": "alignItems", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Row", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Row", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Row", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Row", "name": "aspectRatio", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Row", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Row", "name": "pixelRound", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Row", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.3420678377151489, 0.3545454144477844, 0.36197197437286377, 0.38189518451690674, 0.3969007730484009, 0.41590309143066406, 0.4188816547393799, 0.4348257780075073, 0.45127224922180176, 0.4514678716659546], "threshold": 0.6, "query_text_results": [["设置子组件在水平方向上的对齐格式。\n属性名称：justifyContent\n属性参数：{'value': {\"type\":\"FlexAlign\",\"required\":true,\"description\":\"子组件在水平方向上的对齐格式。默认值：FlexAlign.Start\",\"default\":null}}\n", {"component_name": "Row", "name": "justifyContent", "source": "harmony-component-doc", "type": "attribute"}, 0.6579321622848511], ["指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", {"component_name": "Row", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, 0.6454545855522156], ["设置子组件在垂直方向上的对齐格式。\n属性名称：alignItems\n属性参数：{'value': {\"type\":\"VerticalAlign\",\"required\":true,\"description\":\"子组件在垂直方向上的对齐格式。默认值：VerticalAlign.Center\",\"default\":null}}\n", {"component_name": "Row", "name": "alignItems", "source": "harmony-component-doc", "type": "attribute"}, 0.6380280256271362], ["子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", {"component_name": "Row", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, 0.6181048154830933], ["设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", {"component_name": "Row", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, 0.6030992269515991]]}}], "details": null}], "details": null}, {"id": "GdUtJN8brjsy5gpMEDxNaK", "description": "生成组件文档", "subtasks": [], "details": {"component_documents": ["# Image\n接口描述：通过图片数据源获取图片，用于后续渲染展示。\n接口参数：{'src': {\"type\":[\"PixelMap\",\"ResourceStr\",\"DrawableDescriptor\"],\"required\":true,\"description\":\"图片的数据源，支持本地图片和网络图片，引用方式请参考[加载图片资源](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-graphics-display-V5#%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90)。\",\"default\":null}}\n\n接口描述：通过图片数据源获取图片，用于后续渲染展示。\n接口参数：{'src': {\"type\":[\"PixelMap\",\"ResourceStr\",\"DrawableDescriptor\"],\"required\":true,\"description\":\"图片的数据源，支持本地图片和网络图片，引用方式请参考[加载图片资源](https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-graphics-display-V5#%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90)。\",\"default\":null}, 'imageAIOptions': {\"type\":\"ImageAIOptions\",\"required\":true,\"description\":\"给组件设置一个AI分析选项，通过此项可配置分析类型或绑定一个分析控制器。\",\"default\":null}}\n设置图片解码尺寸。仅在目标尺寸小于图源尺寸时生效。svg类型图源和PixelMap资源不支持该属性。\n属性名称：sourceSize\n属性参数：{'value': {\"type\":{\"width\":\"number\",\"height\":\"number\"},\"required\":true,\"description\":\"图片解码尺寸，降低图片的分辨率，常用于需要让图片显示尺寸比组件尺寸更小的场景。和ImageFit.None配合使用时可在组件内显示小图。\",\"default\":null}}\n设置图片加载时显示的占位图。\n属性名称：alt\n属性参数：{'value': {\"type\":[\"string\",\"Resource\",\"PixelMap\"],\"required\":true,\"description\":\"加载时显示的占位图，支持本地图片（png、jpg、bmp、svg、gif和heif类型）,支持PixelMap类型图片，不支持网络图片。\",\"default\":null}}\n设置组件自身的宽度，缺省时使用元素自身内容需要的宽度。若子组件的宽大于父组件的宽，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：width\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件宽度。单位：vp\",\"default\":null}}\n设置组件自身的高度，缺省时使用元素自身内容需要的高度。若子组件的高大于父组件的高，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：height\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件高度。单位：vp\",\"default\":null}}\n设置图片解码过程中是否对图源自动缩放。降采样解码时图片的部分信息丢失，因此可能会导致图片质量的下降（如：出现锯齿），这时可以选择把autoResize设为false，按原图尺寸解码，提升显示效果，但会增加内存占用。\n属性名称：autoResize\n属性参数：{'value': {\"type\":\"boolean\",\"required\":true,\"description\":\"图片解码过程中是否对图源自动缩放。\",\"default\":false}}\n设置图像拉伸时可调整大小的图像选项。拉伸对拖拽缩略图以及占位图有效。\n属性名称：resizable\n属性参数：{'value': {\"type\":\"ResizableOptions\",\"required\":true,\"description\":\"图像拉伸时可调整大小的图像选项。\",\"default\":null}}\n设置图片是否跟随系统语言方向，在RTL语言环境下显示镜像翻转显示效果。\n属性名称：matchTextDirection\n属性参数：{'value': {\"type\":\"boolean\",\"required\":true,\"description\":\"图片是否跟随系统语言方向。\",\"default\":false}}\n示例：该组件通过 Flex 布局实现了一个展示多种图像及其 objectFit 效果的界面。布局宽度为 360vp，高度为 320vp，内边距为右侧 10vp、顶部 10vp。组件的垂直方向上被分为两个部分，每个部分包含两张图像。每张图像的宽度为 110vp，高度为 110vp，外边距为 15vp。图像的边框宽度为 2vp，颜色为粉色。图像的 objectFit 属性分别设置为不同的值，以展示不同的图像适应效果。\n图像的排列方式为水平布局，每行包含两张图像，图像之间的间距均匀分布，且对齐方式为居中对齐。图像的样式包括边框颜色、宽度和高度等属性，支持不同的样式展示。图像的功能包括 objectFit 效果，用户可以通过设置不同的 objectFit 属性来调整图像的显示效果。\n整个布局通过 Flex 布局保证图像在垂直方向上有序排列，确保界面整洁美观。\n@Entry\n@Component\nstruct ImageExample {\n  build() {\n    Column() {\n      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start }) {\n        Row() {\n          // 第一张图像，资源名为 app.media.sky，宽度为 110vp，高度为 110vp，外边距为 15vp，边框宽度为 2vp，颜色为粉色，objectFit 属性设置为 ImageFit.TOP_START\n          Image($r('app.media.sky'))\n            .width(110).height(110).margin(15)\n            .overlay('png', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n            .border({ width: 2, color: Color.Pink })\n            .objectFit(ImageFit.TOP_START)\n\n          // 第二张图像，资源名为 app.media.loading，宽度为 110vp，高度为 110vp，外边距为 15vp，边框宽度为 2vp，颜色为粉色，objectFit 属性设置为 ImageFit.BOTTOM_START\n          Image($r('app.media.loading'))\n            .width(110).height(110).margin(15)\n            .overlay('gif', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n            .border({ width: 2, color: Color.Pink })\n            .objectFit(ImageFit.BOTTOM_START)\n        }\n        Row() {\n          // 第三张图像，资源名为 app.media.svg，宽度为 110vp，高度为 110vp，外边距为 15vp，边框宽度为 2vp，颜色为粉色，objectFit 属性设置为 ImageFit.TOP_END\n          Image($r('app.media.svg'))\n            .width(110).height(110).margin(15)\n            .overlay('svg', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n            .border({ width: 2, color: Color.Pink })\n            .objectFit(ImageFit.TOP_END)\n\n          // 第四张图像，资源名为 app.media.jpg，宽度为 110vp，高度为 110vp，外边距为 15vp，边框宽度为 2vp，颜色为粉色，objectFit 属性设置为 ImageFit.CENTER\n          Image($r('app.media.jpg'))\n            .width(110).height(110).margin(15)\n            .overlay('jpg', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n            .border({ width: 2, color: Color.Pink })\n            .objectFit(ImageFit.CENTER)\n        }\n      }\n    }.height(320).width(360).padding({ right: 10, top: 10 })\n  }\n}\n\n示例：该组件通过 Flex 布局实现了一个展示多种类型图片（如 PNG、GIF、SVG、JPG）的界面。布局宽度为 360vp，高度为 320vp，内边距为右 10vp、顶部 10vp。组件的垂直方向上被分为两个部分，每个部分包含两张图片。每张图片以水平布局方式排列，图片之间的间距均匀分布，且对齐方式为居中对齐。\n图片的样式包括宽度、高度、边距等属性，每张图片的宽度为 110vp，高度为 110vp，边距为 15vp。图片的功能包括加载不同类型的图片资源，并通过 overlay 方法在图片底部添加文本标签，标签内容为图片的文件类型（如 PNG、GIF、SVG、JPG），标签的对齐方式为底部对齐，偏移量为 y 轴方向 20vp。\n整个布局通过 Flex 布局保证图片在垂直方向上有序排列，确保界面整洁美观。\n@Entry\n@Component\nstruct ImageExample1 {\n  build() {\n    Column() {\n      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start }) {\n        Row() {\n          // 加载 PNG 图片，设置图片的宽度、高度和边距，并在图片底部添加文本标签 \"png\"\n          Image($r('app.media.ic_camera_master_ai_leaf'))\n            .width(110).height(110).margin(15)\n            .overlay('png', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n\n          // 加载 GIF 图片，设置图片的宽度、高度和边距，并在图片底部添加文本标签 \"gif\"\n          Image($r('app.media.loading'))\n            .width(110).height(110).margin(15)\n            .overlay('gif', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n        }\n        Row() {\n          // 加载 SVG 图片，设置图片的宽度、高度和边距，并在图片底部添加文本标签 \"svg\"\n          Image($r('app.media.ic_camera_master_ai_clouded'))\n            .width(110).height(110).margin(15)\n            .overlay('svg', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n\n          // 加载 JPG 图片，设置图片的宽度、高度和边距，并在图片底部添加文本标签 \"jpg\"\n          Image($r('app.media.ic_public_favor_filled'))\n            .width(110).height(110).margin(15)\n            .overlay('jpg', { align: Alignment.Bottom, offset: { x: 0, y: 20 } })\n        }\n      }\n    }.height(320).width(360).padding({ right: 10, top: 10 })\n  }\n}\n\n示例：该组件通过 Column 布局实现了一个展示两张图片的界面。布局宽度占据整个屏幕，高度设为 100%。组件的垂直方向上被分为两个部分，每个部分包含一张图片。每张图片的宽度为 100vp，高度为 100vp。\n图片的样式包括宽度、高度等属性，支持不同的样式展示。图片的功能包括点击事件和动画结束事件，用户可以通过点击图片触发相应操作，图片也可以在动画结束后进行状态切换。\n整个布局通过 Column 布局保证图片在垂直方向上有序排列，确保界面整洁美观。\n@Entry\n@Component\nstruct ImageExample3 {\n  // 定义三张图片资源\n  private imageOne: Resource = $r('app.media.earth');\n  private imageTwo: Resource = $r('app.media.star');\n  private imageThree: Resource = $r('app.media.moveStar');\n\n  // 定义两个状态变量，用于控制图片的显示\n  @State src: Resource = this.imageOne;\n  @State src2: Resource = this.imageThree;\n\n  build() {\n    Column() {\n      // 第一张图片，点击后切换为第二张图片\n      Image(this.src)\n        .width(100) // 设置图片宽度为 100vp\n        .height(100) // 设置图片高度为 100vp\n        .onClick(() => {\n          // 点击事件，切换图片为第二张图片\n          this.src = this.imageTwo;\n        })\n\n      // 第二张图片，动画结束后切换为第一张图片\n      Image(this.src2)\n        .width(100) // 设置图片宽度为 100vp\n        .height(100) // 设置图片高度为 100vp\n        .onFinish(() => {\n          // 动画结束事件，切换图片为第一张图片\n          this.src2 = this.imageOne;\n        })\n    }\n    .width('100%') // 设置布局宽度为 100%\n    .height('100%') // 设置布局高度为 100%\n  }\n}\n\n", "# Column\n接口描述：Column(value?: {space?: string | number})\n接口参数：{'space': {\"type\":[\"string\",\"number\"],\"required\":false,\"description\":\"纵向布局元素垂直方向间距。从API version 9开始，space为负数或者justifyContent设置为FlexAlign.SpaceBetween、FlexAlign.SpaceAround、FlexAlign.SpaceEvenly时不生效。\",\"default\":0}}\n设置子组件在水平方向上的对齐格式。\n属性名称：alignItems\n属性参数：{'value': {\"type\":\"HorizontalAlign\",\"required\":true,\"description\":\"子组件在水平方向上的对齐格式。\",\"default\":\"HorizontalAlign.Center\"}}\n设置子组件在垂直方向上的对齐格式。\n属性名称：justifyContent\n属性参数：{'value': {\"type\":\"FlexAlign\",\"required\":true,\"description\":\"子组件在垂直方向上的对齐格式。\",\"default\":\"FlexAlign.Start\"}}\n子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "# Row\n接口描述：Row(value?:{space?: number | string })\n接口参数：{'value': {\"type\":\"object\",\"required\":false,\"description\":\"包含space参数的对象。\",\"default\":null}}\n设置子组件在水平方向上的对齐格式。\n属性名称：justifyContent\n属性参数：{'value': {\"type\":\"FlexAlign\",\"required\":true,\"description\":\"子组件在水平方向上的对齐格式。默认值：FlexAlign.Start\",\"default\":null}}\n指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n设置子组件在垂直方向上的对齐格式。\n属性名称：alignItems\n属性参数：{'value': {\"type\":\"VerticalAlign\",\"required\":true,\"description\":\"子组件在垂直方向上的对齐格式。默认值：VerticalAlign.Center\",\"default\":null}}\n子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n"], "related_types": {"Resource": {"description": "资源引用类型，用于设置组件属性的值。可以通过$r或者$rawfile创建Resource类型对象，不可以修改Resource中的各属性的值。", "type": "Resource", "enum": null, "enumDescriptions": null, "examples": ["```ets\n// belonging：系统资源或者应用资源，相应的取值为'sys'和'app'；\n// type：资源类型，支持'boolean'、'color'、'float'、'intarray'、'integer'、'pattern'、'plural'、'strarray'、'string'、'media'；\n// name：资源名称，在资源定义时确定。\n$r('belonging.type.name')\n```", "```ets\n// filename：工程中resources/rawfile目录下的文件名称。\n$rawfile('filename')\n```"]}, "ResizableOptions": {"description": "图像拉伸时可调整大小的图像选项。", "type": "object", "properties": {"slice": {"type": "EdgeWidths", "required": true, "description": "边框宽度类型，用于描述组件边框不同方向的宽度。只有当bottom和right同时大于0时，该属性生效。", "enum": null, "enumDescriptions": null, "default": null}}, "examples": null}, "EdgeWidths": {"description": "EdgeWidths参数说明", "type": "object", "properties": {"top": {"type": "Length", "required": false, "description": "图片顶部拉伸时保持不变距离。", "enum": null, "enumDescriptions": null, "default": 0}, "right": {"type": "Length", "required": false, "description": "图片右部拉伸时保持不变距离。", "enum": null, "enumDescriptions": null, "default": 0}, "bottom": {"type": "Length", "required": false, "description": "图片底部拉伸时保持不变距离。", "enum": null, "enumDescriptions": null, "default": 0}, "left": {"type": "Length", "required": false, "description": "图片左部拉伸时保持不变距离。", "enum": null, "enumDescriptions": null, "default": 0}}, "examples": null}, "Length": {"description": "长度类型，用于描述尺寸单位。\n* string：需要显式指定像素单位，如'10px'，或百分比字符串，如'100%'。\n* number：默认单位为vp。\n* Resource：资源引用类型，引入系统或应用资源中的尺寸。", "type": ["string", "number", "Resource"], "enum": null, "enumDescriptions": null, "examples": null}, "ResourceStr": {"description": "字符串类型，用于描述字符串入参可以使用的类型。\n* string：字符串类型。\n* Resource：资源引用类型，引入系统资源或者应用资源中的字符串。", "type": ["string", "Resource"], "enum": null, "enumDescriptions": null, "examples": null}}}}, {"id": "L95iVTj8j8jbDV2Cot2gAx", "description": "生成类型文档", "subtasks": [], "details": {"type_documents": ["类型名：Resource\n类型描述：资源引用类型，用于设置组件属性的值。可以通过$r或者$rawfile创建Resource类型对象，不可以修改Resource中的各属性的值。\n类型：Resource\n类型Resource示例：\n```ets\n// belonging：系统资源或者应用资源，相应的取值为'sys'和'app'；\n// type：资源类型，支持'boolean'、'color'、'float'、'intarray'、'integer'、'pattern'、'plural'、'strarray'、'string'、'media'；\n// name：资源名称，在资源定义时确定。\n$r('belonging.type.name')\n```\n类型Resource示例：\n```ets\n// filename：工程中resources/rawfile目录下的文件名称。\n$rawfile('filename')\n```\n", "类型名：ResizableOptions\n类型描述：图像拉伸时可调整大小的图像选项。\n参数：{'slice': {\"type\":\"EdgeWidths\",\"required\":true,\"description\":\"边框宽度类型，用于描述组件边框不同方向的宽度。只有当bottom和right同时大于0时，该属性生效。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}}\n", "类型名：EdgeWidths\n类型描述：EdgeWidths参数说明\n参数：{'top': {\"type\":\"Length\",\"required\":false,\"description\":\"图片顶部拉伸时保持不变距离。\",\"enum\":null,\"enumDescriptions\":null,\"default\":0}, 'right': {\"type\":\"Length\",\"required\":false,\"description\":\"图片右部拉伸时保持不变距离。\",\"enum\":null,\"enumDescriptions\":null,\"default\":0}, 'bottom': {\"type\":\"Length\",\"required\":false,\"description\":\"图片底部拉伸时保持不变距离。\",\"enum\":null,\"enumDescriptions\":null,\"default\":0}, 'left': {\"type\":\"Length\",\"required\":false,\"description\":\"图片左部拉伸时保持不变距离。\",\"enum\":null,\"enumDescriptions\":null,\"default\":0}}\n", "类型名：Length\n类型描述：长度类型，用于描述尺寸单位。\n* string：需要显式指定像素单位，如'10px'，或百分比字符串，如'100%'。\n* number：默认单位为vp。\n* Resource：资源引用类型，引入系统或应用资源中的尺寸。\n类型：['string', 'number', 'Resource']\n", "类型名：ResourceStr\n类型描述：字符串类型，用于描述字符串入参可以使用的类型。\n* string：字符串类型。\n* Resource：资源引用类型，引入系统资源或者应用资源中的字符串。\n类型：['string', 'Resource']\n"]}}], "details": {"android_component": {"name": ["ImageView"], "content": "<ImageView\n    android:layout_width=\"150dp\"\n    android:layout_height=\"200dp\"\n    android:id=\"@+id/imageView\"\n    android:layout_gravity=\"center_horizontal\"\n    android:layout_centerVertical=\"true\"\n    android:scaleType=\"fitCenter\"\n    android:layout_centerHorizontal=\"true\"\n    android:src=\"@drawable/bookdash_icon\"/>", "layout_description": "图像视图，宽度为150vp，高度为200vp，水平居中对齐，垂直居中对齐，缩放类型为适应中心，引用资源app.media.bookdash_icon作为图像源。", "function_description": "实现了一个图像视图，图像视图的宽度和高度分别为150vp和200vp，图像视图在水平和垂直方向上都居中对齐，图像的缩放类型为适应中心，图像源引用了 app.media.bookdash_icon 资源。"}}}, {"id": "LPcnb5anMprAdpe2CBRtma", "description": "转译组件v1", "subtasks": [], "details": {"prompt": "你在一家软件公司工作，你被指派去根据安卓组件描述生成鸿蒙ArkUI代码。\n\n\n\n\n以下是可供参考的鸿蒙组件文档：\n以下是关于鸿蒙ArkUI API 12的组件基本文档：\n## Image\n图片组件，常用于在应用中显示图片。Image支持加载PixelMap、ResourceStr和DrawableDescriptor类型的数据源，支持png、jpg、jpeg、bmp、svg、webp、gif和heif类型的图片格式。\n## Column\n沿垂直方向布局的容器组件，可以包含子组件。\n## Row\n沿水平方向布局容器，可以包含子组件。\n\n# 声明式UI描述\nArkTS以声明方式组合和扩展组件来描述应用程序的UI，同时还提供了基本的属性、事件和子组件配置方法。\n\n## 创建组件\n根据组件构造方法的不同，创建组件包含有参数和无参数两种方式。\n\n### 无参数\n如果组件的接口定义没有包含必选构造参数，则组件后面的“()”不需要配置任何内容。例如，Divider组件不包含构造参数。\n```ets\nColumn() {\n  Text('item 1')\n  Divider()\n  Text('item 2')\n}\n```\n\n### 有参数\n- Image组件的必选参数src。\n```ets\nImage('https://xyz/test.jpg')\n```\n- Text组件的非必选参数content。\n```ets\n// string类型的参数\nText('test')\n// $r形式引入应用资源，可应用于多语言场景\nText($r('app.string.title_value'))\n// 无参数形式\nText()\n```\n- 变量或表达式也可以用于参数赋值，其中表达式返回的结果类型必须满足参数类型要求。\n例如，设置变量或表达式来构造Image和Text组件的参数。\n```ets\nImage(this.imagePath)\nImage('https://' + this.imageUrl)\nText(`count: ${this.count}`)\n```\n\n## 配置属性\n属性方法以“.”链式调用的方式配置系统组件的样式和其他属性，建议每个属性方法单独写一行。\n\n- 设置Text组件的字体大小。\n```ets\nText('test')\n  .fontSize(20)\n```\n- 配置组件的多个属性。\n```ets\nImage('test.jpg')\n  .alt('error.jpg')\n  .width(100)\n  .height(100)\n```\n- 除了直接传递常量参数外，还可以传递变量或表达式。\n```ets\nText('hello')\n  .fontSize(this.size)\nImage('test.jpg')\n  .width(this.count % 2 === 0 ? 100 : 200)\n  .height(this.offset + 100)\n```\n- 对于系统组件，ArkUI还为其属性预定义了一些枚举类型供开发者调用，枚举类型可以作为参数传递，但必须满足参数类型要求。\n例如，可以按以下方式配置Text组件的颜色和字体样式。\n```ets\nText('hello')\n  .fontSize(20)\n  .fontColor(Color.Red)\n  .fontWeight(FontWeight.Bold)\n```\n\n## 配置事件\n事件方法以“.”链式调用的方式配置系统组件支持的事件，建议每个事件方法单独写一行。\n\n- 使用箭头函数配置组件的事件方法。\n```ets\nButton('Click me')\n  .onClick(() => {\n    this.myText = 'ArkUI';\n  })\n```\n- 使用组件的成员函数配置组件的事件方法，需要bind this。ArkTS语法不推荐使用成员函数配合bind this去配置组件的事件方法。\n```ets\nmyClickHandler(): void {\n  this.counter += 2;\n}\n...\nButton('add counter')\n  .onClick(this.myClickHandler.bind(this))\n```\n- 使用声明的箭头函数，可以直接调用，不需要bind this。\n```ets\nfn = () => {\n  console.info(`counter: ${this.counter}`)\n  this.counter++\n}\n...\nButton('add counter')\n  .onClick(this.fn)\n```\n\n## 配置子组件\n如果组件支持子组件配置，则需在尾随闭包\"{...}\"中为组件添加子组件的UI描述。Column、Row、Stack、Grid、List等组件都是容器组件。\n\n- 容器组件均支持子组件配置，可以实现相对复杂的多级嵌套。\n```ets\nColumn() {\n  Row() {\n    Image('test1.jpg')\n      .width(100)\n      .height(100)\n    Button('click +1')\n      .onClick(() => {\n        console.info('+1 clicked!');\n      })\n  }\n  .width('100%')\n}\n```\n以下是关于安卓组件转译为鸿蒙ArkUI组件的示例代码：\n\n## 示例#1\n### ['Image'] 组件\n通过 Image 组件实现了一个图像显示界面，用于在应用中创建一个图像显示界面。图像视图的图像资源通过 $r('app.media.img_2') 进行设置，唯一标识符 id 为“iv_show”，宽度为 500vp，高度为 250vp，顶部边距为 50vp，背景颜色为红色 (#ff0000)，图像适应方式为 ImageFit.Contain。用户可以通过图像视图查看和操作图像内容。\n```\n      Image($r('app.media.img_2'))\n.id('iv_show')\n.width('500vp')\n.height('250vp')\n.margin({ top: '50vp' })\n.backgroundColor('#ff0000')\n.objectFit(ImageFit.Contain)\n```\n\n这些资源目前在项目中已经定义：\n# 资源变量\n## color\nstart_window_background, white, ivory, lightyellow, yellow, snow, floralwhite, lemonchiffon, cornk, seaShell, lavenderblush, papayawhip, blanchedalmond, mistyrose, bisque, moccasin, navajowhite, peachpuff, gold, pink, lightpink, goldyellow, orange, lightsalmon, darkorange, coral, hotpink, tomato, orangered, deeppink, fuchsia, magenta, red, oldlace, lightgoldenrodyellow, linen, antiquewhite, salmon, ghostwhite, mintcream, whitesmoke, beige, wheat, sandybrown, azure, honeydew, aliceblue, khaki, lightcoral, palegoldenrod, violet, darksalmon, lavender, lightcyan, burlywood, plum, gainsboro, crimson, palevioletred, goldenrod, orchid, thistle, lightgray, tan, chocolate, peru, indianred, mediumvioletred, silver, darkkhaki, rosybrown, mediumorchid, darkgoldenrod, firebrick, powderblue, lightsteelblue, paleturquoise, greenyellow, lightblue, darkgray, darkgrey, brown, sienna, darkorchid, palegreen, darkviolet, mediumpurple, lightgreen, darkseagreen, saddlebrown, darkmagenta, darkred, blueviolet, lightskyblue, skyblue, gray, grey, olive, purple, maroon, aquamarine, chartreuse, lawngreen, mediumslateblue, lightslategray, lightslategrey, slategray, slategrey, olivedrab, slateblue, dimgray, dimgrey, mediumaquamarine, cornflowerblue, cadetblue, darkolivegreen, indigo, mediumturquoise, darkslateblue, steelblue, royalblue, turquoise, mediumseagreen, limegreen, darkslategray, darkslategrey, seagreen, forestgreen, lightseagreen, dodgerblue, midnightblue, aqua, cyan, springgreen, lime, mediumspringgreen, darkturquoise, deepskyblue, darkcyan, teal, green, darkgreen, blue, mediumblue, darkblue, navy, colorPrimary, colorPrimaryDark, bg_color, black, transparent, detail_bgColor, defaultTextColor, viewfinder_frame, viewfinder_mask, possible_result_points, result_view, backColor, limit_buy_border_bg, search_toolbar_bg, toast_color, login_button, app_green, app_green_alpha, green_btn_color_pressed, red_btn_color_normal, red_btn_color_pressed, red_btn_color_disable, grey_btn_color_normal, grey_btn_color_pressed, grey_btn_color_disable, grey_btn_stroke_color_normal, grey_btn_stroke_color_pressed, grey_btn_stroke_color_disable, black_btn_color_normal, black_btn_color_pressed, black_btn_color_disable, black_btn_stroke_color_normal, black_btn_stroke_color_pressed, black_btn_stroke_color_disable, normal_text_color, normal_text_color_disable, white_color_disable, border_color, login_unable_bg_green, login_unable_bg, base_title_bg_color, base_title_color, base_title_right_color, base_blue, base_black, base_gray, base_blue_selector, base_bg_color, base_line, base_text_color_gray, base_texthint_color_gray, base_white, base_color, small_base_coloruser, base_red_color, userInfo_font\n## float\nactivity_horizontal_margin, activity_vertical_margin, buttonCornerSize, dialog_round_radius, smallButtonHeight, smallButtonWidth, normalButtonHeight, normalButtonWidth, bigButtonTextSize, normalButtonTextSize, smallButtonTextSize, ware_grid_img_width, ware_grid_img_height, ware_img_height, ware_img_width, small_ware_img_width, category_layout_width, base_text_size, small_text_size, big_text_size, smaller_text_size, bigger_text_size, text_18, text_14, text_12, screenPadding, basicPaddingSize, inputEditTextMinHeight, searchViewMinHeight, smallPadding, largePadding, largerPadding, largestPadding, smallerPadding, littlePadding, middlePadding, basePadding, footerPadding, noPadding\n## string\nmodule_desc, EntryAbility_desc, EntryAbility_label, app_name, hello_world, action_settings, home, hot, catagory, cart, mine, title_activity_ware_detail, share, my_orders, my_favorite, my_info, my_addresses, my_msg, logout, to_login, token_error, title_activity_new_order, title_activity_reg, create_order, pay_result, add_addresses, code_end\n\n# 资源文件\nbackground.png\\n\nbl_gb.png\\n\ncompany_logo.png\\n\ndefault_head.png\\n\nforeground.png\\n\nguide_1.png\\n\nguide_2.png\\n\nguide_3.png\\n\nguide_4.png\\n\nicon_add.png\\n\nicon_alipay_72.png\\n\nicon_back_32px.png\\n\nicon_bd_72.png\\n\nicon_cancel_128.png\\n\nicon_cart.png\\n\nicon_cartfill_press.png\\n\nicon_check_32.png\\n\nicon_check_checked_32.png\\n\nicon_check_false.png\\n\nicon_check_true.png\\n\nicon_delete_32.png\\n\nicon_discover.png\\n\nicon_discover_press.png\\n\nicon_edit_32.png\\n\nicon_favorite.png\\n\nicon_grid_32.png\\n\nicon_home.png\\n\nicon_home_press.png\\n\nicon_hot.png\\n\nicon_hot_press.png\\n\nicon_list_32.png\\n\nicon_list_o.png\\n\nicon_location.png\\n\nicon_lock.png\\n\nicon_msg.png\\n\nicon_my_info.png\\n\nicon_right_64.png\\n\nicon_search.png\\n\nicon_success_128.png\\n\nicon_telphone_32.png\\n\nicon_trash_32.png\\n\nicon_user.png\\n\nicon_user_press.png\\n\nicon_wechat_72.png\\n\nkongj.png\\n\nlayered_image.json\\n\npengyq.png\\n\nqq.png\\n\nshop_emptycart.png\\n\nsplash.png\\n\nstartIcon.png\\n\nstart_btn_click.png\\n\nstart_btn_normal.png\\n\nweather_bg.png\\n\nweib.png\\n\nweixin.png\\n\n\n技术主管已经将代码转译分为以下步骤：\n1. 实现安卓布局组件 ImageView 的转译，并保持布局和样式尽可能一致。\\n\n\n\n你当前需要处理的任务是：\n实现安卓布局组件 ImageView 的转译，并保持布局和样式尽可能一致。\n\n以下是待转译的安卓组件描述：\n# 待转译的安卓组件名：['ImageView']\n功能描述：实现了一个图像视图，图像视图的宽度和高度分别为150vp和200vp，图像视图在水平和垂直方向上都居中对齐，图像的缩放类型为适应中心，图像源引用了 app.media.bookdash_icon 资源。\n安卓布局描述：图像视图，宽度为150vp，高度为200vp，水平居中对齐，垂直居中对齐，缩放类型为适应中心，引用资源app.media.bookdash_icon作为图像源。\n实现转译的思路：选择Image组件来显示图片，并设置其宽度和高度以及缩放类型。使用Column和Row组件来实现图像视图在水平和垂直方向上的居中对齐。\n<ImageView\n    android:layout_width=\"150dp\"\n    android:layout_height=\"200dp\"\n    android:id=\"@+id/imageView\"\n    android:layout_gravity=\"center_horizontal\"\n    android:layout_centerVertical=\"true\"\n    android:scaleType=\"fitCenter\"\n    android:layout_centerHorizontal=\"true\"\n    android:src=\"@drawable/bookdash_icon\"/>\n\n\n你的工作是根据**鸿蒙组件文档**、当前项目信息准确地、完整的根据安卓组件描述生成鸿蒙ArkUI组件代码，不可以使用不存在的鸿蒙组件以及不存在的属性和事件。\n在生成时，你需要确保生成过程中所有使用的ArkUI组件、属性和事件与安卓组件描述实现的功能、行为一致。\n在整个过程中，请严格遵循文档规范，每一步都需要详细对照官方文档，确保没有任何遗漏或误解。\n**重要**：你必须严格按照待转译的安卓组件描述来编写鸿蒙ArkUI代码，不可忽略任何可以实现的属性、样式、功能等，也不可以添加任何未在安卓组件描述中提到的功能。\n**重要**：必须确保所选用的组件、类型、属性和方法完全符合鸿蒙ArkUI官方文档的定义与规范, 必须确保使用的资源文件都已被定义。\n**重要**：当你无法通过单个组件实现功能时，可以通过组合多个组件来实现，但不可选择不存在的组件，例如Checkbox需要与Text组件搭配才能够实现复选框旁侧有文字的效果，卡片需要利用Stack布局及Text等组件来实现。\n**重要**：ArkUI以声明方式组合和扩展组件来描述应用程序的UI，同时还提供了基本的属性、事件和子组件配置方法。\n\n在你编写鸿蒙ArUI组件时，需要遵守以下规则：\n* 1. 当组件的宽度和高度是根据内容自适应时，需要使用'auto'；当组件的宽度和高度是跟随父组件时，需要使用'100%'，例如：android:layout_width=\"wrap_content\"应该转译为width=\"auto\"；android:layout_width=\"match_parent\"应该转译为width=\"100%\"。\n* 2. 引用资源时，需要使用$r('app.xxx.yyy'), 其中xxx为资源类型，yyy为资源名称，例如：Image($r('app.media.custom_background'))。\n* 3. 对于安卓系统属性例如@attr/black，在鸿蒙中你应该将其转译为Color.Black。\n* 4. 在鸿蒙中，对于marquee效果的文本，你应该使用.textOverflow({ overflow: TextOverflow.MARQUEE })即可，不需要额外的设置。\n* 5. 在鸿蒙中，当你转译的只有容器组件时，你需要注明子组件所在的位置，例如：Scroll() {\\n  Column() {\\n    // 子组件\\n  }\\n}。\n* 6. 在鸿蒙中，你应该根据所需效果确保为每一个Image添加objectFit，以保证图片的显示效果，例如：Image(xxx)\\n  .objectFit(ImageFit.Contain)。\n\n\n在转译过程中，你需要严格遵守以下规则：\n### 规则 1\n你必须准确、完整地实现安卓布局代码地转译。\n准确意味着你需要将安卓布局代码中的每个组件、属性、值都转译为对应的鸿蒙ArkUI代码，一定不要添加任何多余的或不存在的组件、属性、值。\n完整意味着你需要将安卓布局代码中的所有组件、属性、值都转译为对应的鸿蒙ArkUI代码，一定不要遗漏任何组件、属性、值。\n正确示例：\n```\n安卓布局文件：\n<TextView\n    android:id=\"@+id/textview_first\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/lorem_ipsum\" />\n对应的鸿蒙ArkUI代码：\nText($r(\"app.string.lorem_ipsum\"))\n  .id(\"textview_first\")\n  .width('auto')\n  .height('auto')\n```\n错误示例：\n```\n安卓布局文件\n<TextView\n    android:id=\"@+id/textview_first\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_marginTop=\"16dp\"\n    android:text=\"@string/lorem_ipsum\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintEnd_toEndOf=\"parent\"\n    app:layout_constraintStart_toStartOf=\"parent\"\n    app:layout_constraintTop_toBottomOf=\"@id/button_first\" />\n错误的鸿蒙ArkUI代码：\n// 未完整、准确地实现安卓布局代码的转译。\n// 遗漏了id、marginTop、constraintBottom_toBottomOf、constraintEnd_toEndOf、constraintStart_toStartOf、constraintTop_toBottomOf属性，并且添加了额外的maxLines属性。\nText($r(\"app.string.lorem_ipsum\"))\n  .maxLines(10)\n修改后的正确鸿蒙ArkUI代码：\nRelativeContainer() {\n  Text($r('app.string.lorem_ipsum'))  // 对android:text=\"@string/lorem_ipsum\"的转译\n    .id('textview_first')  // 对android:id=\"@+id/textview_first\"的转译\n    .margin({ top: '16vp' })  // 对android:layout_marginTop=\"16dp\"的转译\n    .alignRules({\n        top: { anchor: 'button_first', align: VerticalAlign.Bottom },  // 对app:layout_constraintTop_toBottomOf=\"@id/button_first\"的转译\n        bottom: { anchor: '__container__', align: VerticalAlign.Bottom },  // 对app:layout_constraintBottom_toBottomOf=\"parent\"的转译\n        left: { anchor: '__container__', align: HorizontalAlign.Start },  // 对app:layout_constraintStart_toStartOf=\"parent\"的转译\n        right: { anchor: '__container__', align: HorizontalAlign.End }  // 对app:layout_constraintEnd_toEndOf=\"parent\"的转译\n    })  // 使用RelativeContainer与alignRules实现对layout_constraintXXX_toXXXOf属性的转译\n}\n额外示例：\n利用RelativeContainer实现子组件垂直水平居中：\nRelativeContainer() {\n  Text($r('app.string.lorem_ipsum'))  // 对android:text=\"@string/lorem_ipsum\"的转译\n    .id('textview_first')  // 对android:id=\"@+id/textview_first\"的转译\n    .margin({ top: '16vp' })  // 对android:layout_marginTop=\"16dp\"的转译\n    .alignRules({\n        center: {anchor: '__container__', align: VerticalAlign.Center},\n        middle: {anchor: '__container__', align: HorizontalAlign.Center}\n    })\n}\n```\n\n", "translated_component": {"harmony_component": "Column() {\n  Row() {\n    Image($r('app.media.bookdash_icon'))\n      .width('150vp')\n      .height('200vp')\n      .objectFit(ImageFit.Cover)\n  }\n  .width('100%')\n  .justifyContent(FlexAlign.Center)\n}\n.width('100%')\n.height('100%')\n.justifyContent(FlexAlign.Center)\n.alignItems(VerticalAlign.Center)", "explanation": "首先，使用Column组件作为根容器，确保整个布局在垂直方向上居中。然后，在Column内部嵌套一个Row组件，用于在水平方向上居中对齐子组件。在Row内部放置Image组件，设置其宽度为150vp，高度为200vp，并使用objectFit(ImageFit.Cover)来确保图像适应视图的中心。最后，通过设置Column和Row的justifyContent和alignItems属性，确保Image组件在水平和垂直方向上都居中对齐。"}}}, {"id": "HfLYHBf3Fu9VHDyuFLgQYS", "description": "后处理鸿蒙组件代码", "subtasks": [], "details": {"harmony_component_code": "Column() {\n  Row() {\n    Image($r('app.media.bookdash_icon'))\n      .width('150vp')\n      .height('200vp')\n      .objectFit(ImageFit.Cover)\n  }\n  .width('100%')\n  .justifyContent(FlexAlign.Center)\n}\n.width('100%')\n.height('100%')\n.justifyContent(FlexAlign.Center)\n.alignItems(VerticalAlign.Center)"}}], "details": null}], "details": {"breakdown_android_layout": {"tasks": [{"description": "实现安卓布局组件 ImageView 的转译，并保持布局和样式尽可能一致。", "done": false, "component": {"name": ["ImageView"], "content": "<ImageView\n    android:layout_width=\"150dp\"\n    android:layout_height=\"200dp\"\n    android:id=\"@+id/imageView\"\n    android:layout_gravity=\"center_horizontal\"\n    android:layout_centerVertical=\"true\"\n    android:scaleType=\"fitCenter\"\n    android:layout_centerHorizontal=\"true\"\n    android:src=\"@drawable/bookdash_icon\"/>"}}]}, "translated_android_components": [{"description": "实现安卓布局组件 ImageView 的转译，并保持布局和样式尽可能一致。", "source_component": "ImageView", "source_component_code": "<ImageView\n    android:layout_width=\"150dp\"\n    android:layout_height=\"200dp\"\n    android:id=\"@+id/imageView\"\n    android:layout_gravity=\"center_horizontal\"\n    android:layout_centerVertical=\"true\"\n    android:scaleType=\"fitCenter\"\n    android:layout_centerHorizontal=\"true\"\n    android:src=\"@drawable/bookdash_icon\"/>", "source_component_description": "图像视图，宽度为150vp，高度为200vp，水平居中对齐，垂直居中对齐，缩放类型为适应中心，引用资源app.media.bookdash_icon作为图像源。", "target_component": ["Image", "Column", "Row"], "target_component_code": "Column() {\n  Row() {\n    Image($r('app.media.bookdash_icon'))\n      .width('150vp')\n      .height('200vp')\n      .objectFit(ImageFit.Cover)\n  }\n  .width('100%')\n  .justifyContent(FlexAlign.Center)\n}\n.width('100%')\n.height('100%')\n.justifyContent(FlexAlign.Center)\n.alignItems(VerticalAlign.Center)", "target_component_description": "实现了一个图像视图，图像视图的宽度和高度分别为150vp和200vp，图像视图在水平和垂直方向上都居中对齐，图像的缩放类型为适应中心，图像源引用了 app.media.bookdash_icon 资源。\n\n图像视图，宽度为150vp，高度为200vp，水平居中对齐，垂直居中对齐，缩放类型为适应中心，引用资源app.media.bookdash_icon作为图像源。", "explanation": "首先，使用Column组件作为根容器，确保整个布局在垂直方向上居中。然后，在Column内部嵌套一个Row组件，用于在水平方向上居中对齐子组件。在Row内部放置Image组件，设置其宽度为150vp，高度为200vp，并使用objectFit(ImageFit.Cover)来确保图像适应视图的中心。最后，通过设置Column和Row的justifyContent和alignItems属性，确保Image组件在水平和垂直方向上都居中对齐。"}]}}, "assemble_harmony_layout": "根据技术主管分配的任务，我已经完成了安卓布局组件 `ImageView` 的转译，并保持了布局和样式尽可能一致。现在，我将把已经完成的转译任务结果合并为一个整体的 ArkUI 布局文件。\n\n### 合并后的 ArkUI 布局文件\n\n```ets\n// 文件路径: app/src/main/ets/pages/SplashPage.ets\n\n@Entry\n@Component\nstruct SplashPage {\n  build() {\n    Column() {\n      Row() {\n        Image($r('app.media.bookdash_icon'))\n          .width('150vp')\n          .height('200vp')\n          .objectFit(ImageFit.Cover)\n      }\n      .width('100%')\n      .justifyContent(FlexAlign.Center)\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n    .alignItems(VerticalAlign.Center)\n  }\n}\n```\n\n### 解释\n\n1. **结构层次**：\n   - 使用 `Column` 作为最外层的容器，确保整个布局在垂直方向上居中对齐。\n   - 在 `Column` 内部嵌套一个 `Row`，用于在水平方向上居中对齐 `Image` 组件。\n\n2. **组件属性**：\n   - `Image` 组件的 `width` 和 `height` 分别设置为 `150vp` 和 `200vp`，与原始安卓布局中的 `ImageView` 一致。\n   - `objectFit(ImageFit.Cover)` 用于设置图像的缩放类型为适应中心，与安卓布局中的 `scaleType=\"fitCenter\"` 一致。\n   - `Image` 组件的 `src` 属性引用 `app.media.bookdash_icon` 资源，与原始安卓布局中的 `android:src=\"@drawable/bookdash_icon\"` 一致。\n\n3. **布局对齐**：\n   - `Row` 组件的 `justifyContent(FlexAlign.Center)` 确保 `Image` 在水平方向上居中对齐。\n   - `Column` 组件的 `justifyContent(FlexAlign.Center)` 和 `alignItems(VerticalAlign.Center)` 确保整个布局在垂直和水平方向上都居中对齐。\n\n通过以上步骤，我已经将安卓布局文件 `activity_splash.xml` 成功转译为鸿蒙 ArkUI 布局文件 `SplashPage.ets`，并且保持了原始布局的语义和结构一致性。", "time": 95.1149570941925}