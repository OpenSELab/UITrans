{
    "name": "app\\src\\main\\res\\layout\\fragment_map.xml",
    "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nxmlns:app=\"http://schemas.android.com/apk/res-auto\"\nxmlns:tools=\"http://schemas.android.com/tools\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\">\n\n<com.mapbox.mapboxsdk.maps.MapView\nandroid:id=\"@+id/map\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\"\napp:layout_constraintBottom_toBottomOf=\"parent\"\napp:layout_constraintEnd_toEndOf=\"parent\"\napp:layout_constraintStart_toStartOf=\"parent\"\napp:layout_constraintTop_toTopOf=\"parent\"\napp:maplibre_uiLogo=\"false\"\napp:maplibre_uiAttribution=\"false\"\napp:maplibre_uiCompassMarginTop=\"72dp\"\napp:maplibre_uiRotateGestures=\"true\"/>\n\n<View\nandroid:layout_width=\"0dp\"\nandroid:layout_height=\"0dp\"\nandroid:background=\"?attributionBackground\"\napp:layout_constraintStart_toStartOf=\"@id/logo\"\napp:layout_constraintEnd_toEndOf=\"@id/attribution\"\napp:layout_constraintTop_toTopOf=\"@id/attribution\"\napp:layout_constraintBottom_toBottomOf=\"@id/attribution\" />\n\n<ImageView\nandroid:id=\"@+id/logo\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:padding=\"4dp\"\napp:layout_constraintStart_toStartOf=\"@id/map\"\napp:layout_constraintTop_toTopOf=\"@id/attribution\"\napp:layout_constraintBottom_toBottomOf=\"@id/map\"\napp:srcCompat=\"@drawable/maplibre_logo_icon\"/>\n\n<TextView\nandroid:id=\"@+id/attribution\"\nandroid:layout_width=\"0dp\"\nandroid:layout_height=\"wrap_content\"\nandroid:padding=\"4dp\"\nandroid:textSize=\"12sp\"\nandroid:text=\"@string/map_attribution\"\nandroid:textColorLink=\"?android:textColorTertiary\"\napp:layout_constraintHorizontal_bias=\"0\"\napp:layout_constraintWidth_default=\"wrap\"\napp:layout_constraintStart_toEndOf=\"@+id/logo\"\napp:layout_constraintEnd_toStartOf=\"@id/gpsFab\"\napp:layout_constraintBottom_toBottomOf=\"@+id/map\"\ntools:text=\"© JawgMaps, © OSM Contributors\\nImprove this map\"/>\n\n<com.google.android.material.floatingactionbutton.FloatingActionButton\nandroid:id=\"@+id/gpsFab\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_margin=\"16dp\"\nandroid:clickable=\"true\"\nandroid:focusable=\"true\"\nandroid:tint=\"@color/fabForegroundInitial\"\napp:backgroundTint=\"@color/fabBackground\"\napp:behavior_autoHide=\"true\"\napp:elevation=\"4dp\"\napp:fabSize=\"normal\"\napp:layout_constraintBottom_toBottomOf=\"parent\"\napp:layout_constraintEnd_toEndOf=\"parent\"\napp:srcCompat=\"@drawable/ic_gps\"/>\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n",
    "java": "package de.grobox.transportr.map\n\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Toast\nimport androidx.annotation.LayoutRes\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.loader.app.LoaderManager\nimport androidx.loader.app.LoaderManager.LoaderCallbacks\nimport androidx.loader.content.Loader\nimport com.mapbox.mapboxsdk.annotations.Marker\nimport com.mapbox.mapboxsdk.annotations.MarkerOptions\nimport com.mapbox.mapboxsdk.geometry.LatLng\nimport com.mapbox.mapboxsdk.maps.MapboxMap\nimport com.mapbox.mapboxsdk.maps.MapboxMap.OnMarkerClickListener\nimport com.mapbox.mapboxsdk.maps.Style\nimport de.grobox.transportr.R\nimport de.grobox.transportr.locations.NearbyLocationsLoader\nimport de.grobox.transportr.locations.WrapLocation\nimport de.grobox.transportr.networks.TransportNetwork\nimport de.grobox.transportr.utils.Constants.LOADER_NEARBY_STATIONS\nimport de.schildbach.pte.dto.Location\nimport de.schildbach.pte.dto.LocationType.STATION\nimport de.schildbach.pte.dto.NearbyLocationsResult\nimport de.schildbach.pte.dto.NearbyLocationsResult.Status.OK\nimport javax.inject.Inject\n\ninternal class MapFragment : GpsMapFragment<MapViewModel>(), LoaderCallbacks<NearbyLocationsResult>, OnMarkerClickListener {\n\n@Inject\ninternal lateinit var viewModelFactory: ViewModelProvider.Factory\n\noverride lateinit var viewModel: MapViewModel\nprivate lateinit var nearbyStationsDrawer: NearbyStationsDrawer\n\nprivate var selectedLocationMarker: Marker? = null\n\noverride val layout: Int\n@LayoutRes\nget() = R.layout.fragment_map\n\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\ncomponent.inject(this)\nviewModel = ViewModelProvider(activity!!, viewModelFactory).get(MapViewModel::class.java)\n\nval v = super.onCreateView(inflater, container, savedInstanceState)\nviewModel.transportNetwork.observe(viewLifecycleOwner) { onTransportNetworkChanged(it) }\n\nnearbyStationsDrawer = NearbyStationsDrawer(context)\n\nreturn v\n}\n\noverride fun onMapReady(mapboxMap: MapboxMap) {\nsuper.onMapReady(mapboxMap)\n\nval location = Location(STATION, \"fake\")\nval args = NearbyLocationsLoader.getBundle(location, 0)\nLoaderManager.getInstance(this).initLoader(LOADER_NEARBY_STATIONS, args, this)\n\nmapboxMap.addOnMapClickListener { viewModel.mapClicked.call(); false }\nmapboxMap.addOnMapLongClickListener { point -> viewModel.selectLocation(WrapLocation(point)); false }\nmapboxMap.setOnMarkerClickListener(this)\n\n// observe map related data\nviewModel.getSelectedLocation().observe(this, Observer { onLocationSelected(it) })\nviewModel.getSelectedLocationClicked().observe(this, Observer { onSelectedLocationClicked(it) })\nviewModel.getFindNearbyStations().observe(this, Observer { findNearbyStations(it) })\n}\n\noverride fun onMapStyleLoaded(style: Style) {\nsuper.onMapStyleLoaded(style)\nif (viewModel.transportNetworkWasChanged || map?.isInitialPosition() == true) {\nzoomInOnFreshStart()\nviewModel.transportNetworkWasChanged = false\n}\n}\n\nprivate fun MapboxMap.isInitialPosition(): Boolean {\nreturn cameraPosition.zoom == minZoomLevel &&\ncameraPosition.target == LatLng(0.0, 0.0)\n}\n\nprivate fun zoomInOnFreshStart() {\n// zoom to favorite locations or only current location, if no favorites exist\nviewModel.liveBounds.observe(this) { bounds ->\nif (bounds != null) {\nzoomToBounds(bounds)\n} else if (getLastKnownLocation() != null) {\nmap?.zoomToMyLocation()\n}\nviewModel.liveBounds.removeObservers(this)\n}\n}\n\noverride fun onMarkerClick(marker: Marker): Boolean {\nif (marker == selectedLocationMarker) {\nviewModel.markerClicked.call()\nreturn true\n}\nval wrapLocation = nearbyStationsDrawer.getClickedNearbyStation(marker)\nif (wrapLocation != null) {\nviewModel.selectLocation(wrapLocation)\nreturn true\n}\nreturn false\n}\n\nprivate fun onTransportNetworkChanged(network: TransportNetwork?) {\nif (network != null && map != null) {\n// activity will reload and then zoom in to new area because this is set\nviewModel.transportNetworkWasChanged = true\n// prevent loader from re-adding nearby stations\nLoaderManager.getInstance(this).destroyLoader(LOADER_NEARBY_STATIONS)\n}\n}\n\nprivate fun onLocationSelected(location: WrapLocation?) {\nif (location == null) return\nval latLng = location.latLng\naddMarker(latLng)\nanimateTo(latLng, LOCATION_ZOOM)\nviewModel.clearSelectedLocation()\n}\n\nprivate fun onSelectedLocationClicked(latLng: LatLng?) {\nif (latLng == null) return\nanimateTo(latLng, LOCATION_ZOOM)\n}\n\nprivate fun addMarker(latLng: LatLng) {\nselectedLocationMarker?.let { map?.removeMarker(it) }\nselectedLocationMarker = map?.addMarker(MarkerOptions().position(latLng))\n}\n\nprivate fun findNearbyStations(location: WrapLocation?) {\nif (location == null) return\nval args = NearbyLocationsLoader.getBundle(location.location, 1000)\nLoaderManager.getInstance(this).restartLoader(LOADER_NEARBY_STATIONS, args, this).forceLoad()\n}\n\n/* Nearby Stations Loader */\n\noverride fun onCreateLoader(id: Int, args: Bundle?): Loader<NearbyLocationsResult> {\nreturn NearbyLocationsLoader(context, viewModel.transportNetwork.value, args)\n}\n\noverride fun onLoadFinished(loader: Loader<NearbyLocationsResult>, result: NearbyLocationsResult?) {\nmap?.let { map ->\nif (result != null && result.status == OK && result.locations != null && result.locations.size > 0) {\nnearbyStationsDrawer.draw(map, result.locations)\n} else {\nToast.makeText(context, R.string.error_find_nearby_stations, Toast.LENGTH_SHORT).show()\n}\nviewModel.setNearbyStationsFound(true)\n}\n}\n\noverride fun onLoaderReset(loader: Loader<NearbyLocationsResult>) {\nnearbyStationsDrawer.reset()\n}\n\n} ",
    "contains": [],
    "source": "Transportr",
    "time": 43.08406162261963,
    "result": {
        "harmony_component_code": "Column() {\n  MapView()\n    .id('map')\n    .width('100%')\n    .height('100%')\n    .logo(false)\n    .attribution(false)\n    .compassMarginTop('72vp')\n    .rotateGestures(true)\n  View()\n    .width('0vp')\n    .height('0vp')\n    .backgroundColor($r('app.color.attributionBackground'))\n    .alignRules({\n      start: { anchor: 'logo', align: HorizontalAlign.Start },\n      end: { anchor: 'attribution', align: HorizontalAlign.End },\n      top: { anchor: 'attribution', align: VerticalAlign.Top },\n      bottom: { anchor: 'attribution', align: VerticalAlign.Bottom }\n    })\n  Image($r('app.media.maplibre_logo_icon'))\n    .id('logo')\n    .width('auto')\n    .height('auto')\n    .padding('4vp')\n    .alignRules({\n      start: { anchor: 'map', align: HorizontalAlign.Start },\n      top: { anchor: 'attribution', align: VerticalAlign.Top },\n      bottom: { anchor: 'map', align: VerticalAlign.Bottom }\n    })\n  Text($r('app.string.map_attribution'))\n    .id('attribution')\n    .width('0vp')\n    .height('auto')\n    .padding('4vp')\n    .fontSize('12fp')\n    .textColor($r('app.color.textColorTertiary'))\n    .alignRules({\n      start: { anchor: 'logo', align: HorizontalAlign.End },\n      end: { anchor: 'gpsFab', align: HorizontalAlign.Start },\n      bottom: { anchor: 'map', align: VerticalAlign.Bottom }\n    })\n  FloatingActionButton()\n    .id('gpsFab')\n    .width('auto')\n    .height('auto')\n    .margin('16vp')\n    .tint($r('app.color.fabForegroundInitial'))\n    .backgroundColor($r('app.color.fabBackground'))\n    .autoHide(true)\n    .elevation('4vp')\n    .size(FloatingActionButtonSize.Normal)\n    .alignRules({\n      end: { anchor: '__container__', align: HorizontalAlign.End },\n      bottom: { anchor: '__container__', align: VerticalAlign.Bottom }\n    })\n    .icon($r('app.media.ic_gps'))\n}"
    },
    "explanation": "1. 使用Column作为根容器，模拟ConstraintLayout的布局行为。\n2. MapView组件对应原安卓的MapView，设置其宽度和高度为100%以匹配父容器。\n3. View组件用于背景色，设置其宽度和高度为0以隐藏，并通过alignRules实现对齐。\n4. ImageView组件对应Image，设置其宽度和高度为auto以自适应内容，并通过alignRules实现对齐。\n5. TextView组件对应Text，设置其宽度和高度，并通过alignRules实现对齐。\n6. FloatingActionButton组件对应FloatingActionButton，设置其宽度和高度为auto以自适应内容，并通过alignRules实现对齐。\n7. 所有组件的属性设置均严格按照安卓组件描述进行转译，确保功能和行为一致。"
}