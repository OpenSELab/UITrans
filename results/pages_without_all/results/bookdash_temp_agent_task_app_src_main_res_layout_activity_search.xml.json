{
    "name": "app/src/main/res/layout/activity_search.xml",
    "content": "<androidx.coordinatorlayout.widget.CoordinatorLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:fitsSystemWindows=\"true\"\n    >\n\n    <ImageView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:scaleType=\"centerCrop\"\n        android:src=\"@drawable/appbackground\"/>\n\n    <com.google.android.material.appbar.AppBarLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:theme=\"@style/AppTheme.AppBarOverlay\">\n\n        <androidx.appcompat.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:background=\"?attr/colorPrimary\"\n            android:title=\"@string/book_dash\"\n            app:layout_scrollFlags=\"scroll|enterAlways\"\n            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"/>\n\n\n    </com.google.android.material.appbar.AppBarLayout>\n\n    <RelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <fr.castorflex.android.circularprogressbar.CircularProgressBar\n            xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n            android:id=\"@+id/progress_bar_search\"\n            android:layout_width=\"48dp\"\n            android:layout_height=\"48dp\"\n            android:layout_alignParentBottom=\"false\"\n            android:layout_centerInParent=\"true\"\n            android:layout_gravity=\"center\"\n            android:layout_marginBottom=\"8dp\"\n            android:layout_marginTop=\"16dp\"\n            android:foregroundGravity=\"center|center_vertical|center_horizontal\"\n            android:indeterminate=\"true\"\n            app:cpb_color=\"@color/colorAccent\"\n            app:cpb_max_sweep_angle=\"300\"\n            app:cpb_min_sweep_angle=\"10\"\n            app:cpb_rotation_speed=\"1.0\"\n            app:cpb_stroke_width=\"4dp\"\n            app:cpb_sweep_speed=\"1.0\"/>\n    </RelativeLayout>\n\n\n    <RelativeLayout\n        android:id=\"@+id/linear_layout_error\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_centerInParent=\"true\"\n        android:visibility=\"gone\"\n        tools:visibility=\"visible\">\n\n\n        <Button\n            android:id=\"@+id/button_retry\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_centerHorizontal=\"true\"\n            android:layout_centerInParent=\"true\"\n            android:layout_gravity=\"center\"\n            android:gravity=\"center\"\n            android:text=\"@string/button_retry_text\"/>\n\n        <TextView\n            android:id=\"@+id/text_view_error_screen\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_above=\"@id/button_retry\"\n            android:layout_centerHorizontal=\"true\"\n            android:layout_gravity=\"center\"\n            android:layout_margin=\"8dp\"\n            android:text=\"@string/error_loading_books\"/>\n    </RelativeLayout>\n\n    <androidx.recyclerview.widget.RecyclerView\n        android:id=\"@+id/recycler_view_books\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:clipToPadding=\"false\"\n        android:paddingLeft=\"@dimen/book_list_padding\"\n        android:paddingRight=\"@dimen/book_list_padding\"\n        android:scrollbars=\"vertical\"\n        android:visibility=\"visible\"\n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n        tools:listitem=\"@layout/list_item_book\"/>\n\n</androidx.coordinatorlayout.widget.CoordinatorLayout>\n\n",
    "java": "package org.bookdash.android.presentation.search;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.text.TextUtils;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.TextView;\n\nimport androidx.appcompat.app.ActionBar;\nimport androidx.appcompat.widget.SearchView;\nimport androidx.appcompat.widget.Toolbar;\nimport androidx.core.content.ContextCompat;\nimport androidx.recyclerview.widget.GridLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport org.bookdash.android.R;\nimport org.bookdash.android.di.Injection;\nimport org.bookdash.android.domain.model.firebase.FireBookDetails;\nimport org.bookdash.android.presentation.activity.BaseAppCompatActivity;\nimport org.bookdash.android.presentation.bookinfo.BookInfoActivity;\nimport org.bookdash.android.presentation.listbooks.BookAdapter;\nimport org.bookdash.android.presentation.listbooks.BookViewHolder;\n\nimport java.util.List;\n\nimport fr.castorflex.android.circularprogressbar.CircularProgressBar;\nimport rx.android.schedulers.AndroidSchedulers;\nimport rx.schedulers.Schedulers;\nimport timber.log.Timber;\n\n/**\n * @author rebeccafranks\n * @since 2016/12/11\n */\n\npublic class SearchActivity extends BaseAppCompatActivity implements SearchContract.View {\n\n    SearchContract.Presenter searchPresenter;\n    private Toolbar toolbar;\n    private String searchQuery;\n    private RecyclerView recyclerViewBooks;\n    private BookAdapter bookAdapter;\n    private CircularProgressBar circularProgressBar;\n    private View.OnClickListener bookClickListener = new View.OnClickListener() {\n        @Override\n        public void onClick(final View view) {\n            BookViewHolder viewHolder = (BookViewHolder) view.getTag();\n            FireBookDetails bookDetail = viewHolder.bookDetail;\n            BookInfoActivity.startBookInfo(SearchActivity.this, bookDetail);\n        }\n    };\n    private View errorLayout;\n    private TextView errorText;\n    private Button errorRetryButton;\n\n    public static void start(final Activity activity) {\n        Intent intent = new Intent(activity, SearchActivity.class);\n        activity.startActivity(intent);\n    }\n\n    @Override\n    protected void onCreate(final Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_search);\n\n        toolbar = (Toolbar) findViewById(R.id.toolbar);\n        toolbar.setTitle(getString(R.string.search_query_hint));\n        toolbar.setNavigationIcon(R.drawable.ic_arrow_back);\n\n        ActionBar actionBar = getSupportActionBar();\n\n        setSupportActionBar(toolbar);\n\n        if (actionBar != null) {\n            actionBar.setDisplayHomeAsUpEnabled(true);\n            actionBar.setHomeButtonEnabled(true);\n            actionBar.setDisplayShowTitleEnabled(false);\n            actionBar.setDisplayUseLogoEnabled(false);\n            actionBar.setDisplayShowHomeEnabled(true);\n\n        }\n        searchPresenter = new SearchPresenter(Injection.provideBookService(), Injection.provideAnalytics(),\n                AndroidSchedulers.mainThread(), Schedulers.io());\n        searchPresenter.attachView(this);\n\n        recyclerViewBooks = (RecyclerView) findViewById(R.id.recycler_view_books);\n        recyclerViewBooks.setLayoutManager(new GridLayoutManager(this, getResources().getInteger(R.integer.book_span)));\n        circularProgressBar = (CircularProgressBar) findViewById(R.id.progress_bar_search);\n        errorLayout = findViewById(R.id.linear_layout_error);\n        errorText = (TextView) findViewById(R.id.text_view_error_screen);\n\n        errorRetryButton = (Button) findViewById(R.id.button_retry);\n        errorRetryButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(final View view) {\n                searchPresenter.search(searchQuery);\n            }\n        });\n        setStatusBarColor(ContextCompat.getColor(getApplicationContext(), R.color.colorPrimaryDark));\n        hideLoading();\n    }\n    private void setStatusBarColor(int color) {\n        if (isFinishing()) {\n            return;\n        }\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n            Window window = getWindow();\n            window.setStatusBarColor(color);\n        }\n    }\n\n    @Override\n    protected String getScreenName() {\n        return \"SearchActivity\";\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(final Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_search, menu);\n\n        final MenuItem item = menu.findItem(R.id.action_menu_search);\n        final SearchView searchView = (SearchView) item.getActionView();\n\n        toolbar.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                item.expandActionView();\n                searchView.setQuery(searchQuery, false);\n            }\n        });\n\n        if (searchView != null) {\n            item.expandActionView();\n            if (searchQuery != null) {\n                toolbar.setTitle(searchQuery);\n                searchView.setQuery(searchQuery, false);\n\n            }\n\n            searchView.setQueryHint(getString(R.string.search_query_hint));\n            searchView.setIconified(false);\n\n            searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\n                @Override\n                public boolean onQueryTextSubmit(String query) {\n                    Timber.d(\"Search submitted with query:\" + query);\n                    if (TextUtils.isEmpty(query)) {\n                        return true;\n                    }\n                    item.collapseActionView();\n                    searchPresenter.search(query);\n                    toolbar.setTitle(query);\n                    return true;\n                }\n\n                @Override\n                public boolean onQueryTextChange(String query) {\n                    Timber.d(\"Search query:\" + query);\n                    if (TextUtils.isEmpty(query)) {\n                        return true;\n                    }\n                    searchPresenter.search(query);\n                    toolbar.setTitle(query);\n                    return true;\n                }\n            });\n        }\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case android.R.id.home:\n                onBackPressed();\n                return true;\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n\n    @Override\n    public void showSearchResults(final List<FireBookDetails> bookList) {\n        recyclerViewBooks.setVisibility(View.VISIBLE);\n        bookAdapter = new BookAdapter(bookList, this, bookClickListener);\n        recyclerViewBooks.setAdapter(bookAdapter);\n    }\n\n    @Override\n    public void showErrorMessage(final String errorMsg) {\n        recyclerViewBooks.setVisibility(View.GONE);\n        errorLayout.setVisibility(View.VISIBLE);\n        errorText.setText(errorMsg);\n    }\n\n    @Override\n    public void showLoading() {\n        circularProgressBar.setVisibility(View.VISIBLE);\n        recyclerViewBooks.setVisibility(View.GONE);\n        errorLayout.setVisibility(View.GONE);\n    }\n\n    @Override\n    public void hideLoading() {\n        circularProgressBar.setVisibility(View.GONE);\n\n    }\n\n    @Override\n    public void showNoInternetMessage() {\n        recyclerViewBooks.setVisibility(View.GONE);\n        errorLayout.setVisibility(View.VISIBLE);\n        errorText.setText(getText(R.string.search_no_internet_text));\n    }\n\n    @Override\n    public void showNoResultsMessage() {\n        recyclerViewBooks.setVisibility(View.GONE);\n        errorLayout.setVisibility(View.VISIBLE);\n        errorText.setText(getText(R.string.search_no_results_found));\n    }\n\n    @Override\n    public void showRetryButton() {\n        errorRetryButton.setVisibility(View.VISIBLE);\n    }\n\n    @Override\n    public void hideRetryButton() {\n        errorRetryButton.setVisibility(View.INVISIBLE);\n    }\n}\n",
    "contains": [
        "app/src/main/res/menu/menu_search.xml"
    ],
    "mock_data": {},
    "source": "bookdash",
    "time": 51.84040141105652,
    "result": {
        "harmony_component_code": "Column() {\n  Image($r('app.media.appbackground'))\n    .width('100%')\n    .height('100%')\n    .objectFit(ImageFit.Cover)\n\n  Column() {\n    Toolbar()\n      .width('100%')\n      .height('56vp')\n      .backgroundColor(Color.Primary)\n      .title($r('app.string.book_dash'))\n      .scrollable(true)\n      .popupTheme($r('app.style.ThemeOverlay.AppCompat.Light'))\n  }\n  .width('100%')\n\n  RelativeContainer() {\n    CircularProgressIndicator()\n      .id('progress_bar_search')\n      .width('48vp')\n      .height('48vp')\n      .alignRules({\n        center: { anchor: '__container__', align: VerticalAlign.Center },\n        middle: { anchor: '__container__', align: HorizontalAlign.Center }\n      })\n      .margin({ top: '16vp', bottom: '8vp' })\n      .color($r('app.color.colorAccent'))\n      .maxSweepAngle(300)\n      .minSweepAngle(10)\n      .rotationSpeed(1.0)\n      .strokeWidth('4vp')\n      .sweepSpeed(1.0)\n  }\n  .width('100%')\n  .height('100%')\n\n  RelativeContainer() {\n    Button('Retry')\n      .id('button_retry')\n      .width('auto')\n      .height('auto')\n      .alignRules({\n        center: { anchor: '__container__', align: VerticalAlign.Center },\n        middle: { anchor: '__container__', align: HorizontalAlign.Center }\n      })\n      .text($r('app.string.button_retry_text'))\n\n    Text($r('app.string.error_loading_books'))\n      .id('text_view_error_screen')\n      .width('auto')\n      .height('auto')\n      .alignRules({\n        center: { anchor: 'button_retry', align: VerticalAlign.Center },\n        middle: { anchor: '__container__', align: HorizontalAlign.Center }\n      })\n      .margin({ top: '8vp', bottom: '8vp' })\n  }\n  .width('100%')\n  .height('100%')\n  .visibility(Visibility.Hidden)\n\n  List() {\n    // List items here\n  }\n  .id('recycler_view_books')\n  .width('100%')\n  .height('100%')\n  .padding({ left: $r('app.dimen.book_list_padding'), right: $r('app.dimen.book_list_padding') })\n  .scrollable(true)\n  .visibility(Visibility.Visible)\n}\n.width('100%')\n.height('100%')"
    },
    "explanation": "1. 使用Column作为根容器，模拟CoordinatorLayout的布局行为。\n2. Image组件用于显示背景图片，设置width和height为'100%'以覆盖整个父容器，并使用objectFit(ImageFit.Cover)确保图片覆盖整个区域。\n3. Toolbar组件模拟AppBarLayout和Toolbar，设置宽度为'100%'，高度为'56vp'，背景颜色为Color.Primary，标题为$r('app.string.book_dash')，并设置为可滚动。\n4. 使用RelativeContainer来实现RelativeLayout的布局行为，CircularProgressIndicator用于显示进度条，设置为居中显示，并配置相关属性。\n5. 另一个RelativeContainer用于显示错误信息和重试按钮，设置为居中显示，并配置相关属性。\n6. List组件用于显示书籍列表，设置宽度为'100%'，高度为'100%'，并设置左右内边距为$r('app.dimen.book_list_padding')，设置为可滚动，并设置可见性为可见。"
}