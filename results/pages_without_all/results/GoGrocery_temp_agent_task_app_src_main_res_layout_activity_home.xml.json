{
    "name": "app/src/main/res/layout/activity_home.xml",
    "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"app.infiniverse.grocery.HomeActivity\">\n\n    <android.support.design.widget.AppBarLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:theme=\"@style/MyTheme.AppBarOverlay\">\n\n        <include layout=\"@layout/toolbar\" />\n\n\n    </android.support.design.widget.AppBarLayout>\n\n    <include layout=\"@layout/content_home\" />\n\n\n</android.support.design.widget.CoordinatorLayout>\n",
    "java": "package app.infiniverse.grocery;\n\nimport android.annotation.SuppressLint;\nimport android.app.AlertDialog;\nimport android.app.SearchManager;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.support.design.widget.Snackbar;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.LinearLayoutManager;\nimport android.support.v7.widget.RecyclerView;\nimport android.support.v7.widget.SearchView;\nimport android.support.v7.widget.Toolbar;\nimport android.telephony.SmsManager;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.AdapterView;\nimport android.widget.GridView;\nimport android.widget.LinearLayout;\nimport android.widget.ProgressBar;\nimport android.widget.Toast;\n\nimport com.daimajia.slider.library.Indicators.PagerIndicator;\nimport com.daimajia.slider.library.SliderLayout;\nimport com.daimajia.slider.library.SliderTypes.BaseSliderView;\nimport com.daimajia.slider.library.SliderTypes.DefaultSliderView;\nimport com.mikepenz.itemanimators.AlphaCrossFadeAnimator;\nimport com.mikepenz.materialdrawer.AccountHeader;\nimport com.mikepenz.materialdrawer.AccountHeaderBuilder;\nimport com.mikepenz.materialdrawer.Drawer;\nimport com.mikepenz.materialdrawer.DrawerBuilder;\nimport com.mikepenz.materialdrawer.model.DividerDrawerItem;\nimport com.mikepenz.materialdrawer.model.ExpandableDrawerItem;\nimport com.mikepenz.materialdrawer.model.PrimaryDrawerItem;\nimport com.mikepenz.materialdrawer.model.ProfileDrawerItem;\nimport com.mikepenz.materialdrawer.model.ProfileSettingDrawerItem;\nimport com.mikepenz.materialdrawer.model.SecondaryDrawerItem;\nimport com.mikepenz.materialdrawer.model.interfaces.IDrawerItem;\nimport com.mikepenz.materialdrawer.model.interfaces.IProfile;\nimport com.mikepenz.materialdrawer.model.interfaces.Nameable;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class HomeActivity extends AppCompatActivity\n        implements BaseSliderView.OnSliderClickListener,AddorRemoveCallbacks {\n\n    SliderLayout sliderShow;\n    private static int cart_count=0;\n    HashMap<String, String> url_maps = new HashMap<>();\n\n        private GridView mGridView;\n    private ProgressBar mProgressBar;\n    List<String> bsp_id_list = new ArrayList<String>();\n    private Bsp_Grid mGridAdapter;\n    private ArrayList<GridItem> mGridData;\n    public static final String PREFS = \"PREFS\";\n    SharedPreferences sp;\n    LinearLayout l2;\n    SharedPreferences.Editor editor;\n\n    private Drawer result = null;\n    private AccountHeader headerResult = null;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_home);\n        Toolbar toolbar = findViewById(R.id.mytoolbar);\n        setSupportActionBar(toolbar);\n        sp = getApplicationContext().getSharedPreferences(PREFS, MODE_PRIVATE);\n        editor = sp.edit();\n        l2 = findViewById(R.id.ll_best_selling);\n        mProgressBar =findViewById(R.id.progressBar);\n\n\n        handleIntent(getIntent());\n        final IProfile profile;\n        if (sp.getString(\"loginid\", null) == null) {\n            profile = new ProfileDrawerItem().withName(\"RKS\").withEmail(\"profile@rks.com\").withIcon(R.drawable.icon).withTag(\"RKS\");\n\n        } else {\n            profile = new ProfileDrawerItem().withName(sp.getString(\"name\", null)).withEmail(sp.getString(\"mobile\", null)).withIcon(R.drawable.icon).withTag(\"CUSTOMER\");\n\n        }\n\n//        SecondaryDrawerItem item2 = new SecondaryDrawerItem().withIdentifier(0).withName(\"Adarsh\");\n\n        final Intent i = new Intent(this, ProfileActivity.class);\n        final Intent r = new Intent(this, RegisterActivity.class);\n\n        headerResult = new AccountHeaderBuilder()\n                .withActivity(this)\n                .withTranslucentStatusBar(true)\n                .withHeaderBackground(R.drawable.profile_bg)\n                .addProfiles(\n                        profile,\n                        //don't ask but google uses 14dp for the add account icon in gmail but 20dp for the normal icons (like manage account)\n                        new ProfileSettingDrawerItem().withName(\"Register Now\").withDescription(\"Add new RKS Account\").withTag(\"REGISTER\")\n\n                )\n                .withOnAccountHeaderListener(new AccountHeader.OnAccountHeaderListener() {\n\n\n                    @Override\n                    public boolean onProfileChanged(View view, IProfile profile, boolean current) {\n                        //sample usage of the onProfileChanged listener\n                        //if the clicked item has the identifier 1 add a new profile ;)\n                        if (profile instanceof IDrawerItem && ((IDrawerItem) profile).getTag().equals(\"CUSTOMER\")) {\n//                            headerResult.removeProfile(profile);\n                            startActivity(i);\n                        } else if (profile instanceof IDrawerItem && ((IDrawerItem) profile).getTag().equals(\"REGISTER\")) {\n                            startActivity(r);\n\n                        }\n                        //false if you have not consumed the event and it should close the drawer\n                        return false;\n                    }\n                })\n                .withSavedInstance(savedInstanceState)\n                .build();\n\n\n        new DrawerBuilder().withActivity(this).build();\n\n\n        result = new DrawerBuilder()\n                .withActivity(this)\n                .withToolbar(toolbar)\n                .withHasStableIds(true)\n                .withItemAnimator(new AlphaCrossFadeAnimator())\n                .withAccountHeader(headerResult) //set the AccountHeader we created earlier for the header\n                .addDrawerItems(\n                )\n                .withOnDrawerItemClickListener(new Drawer.OnDrawerItemClickListener() {\n                    @Override\n                    public boolean onItemClick(View view, int position, IDrawerItem drawerItem) {\n\n                        if (drawerItem != null) {\n                            if (drawerItem.getTag().toString().equals(\"LOGIN\")) {\n                                Intent i = new Intent(HomeActivity.this, LoginActivity.class);\n                                startActivity(i);\n                                finish();\n\n                            } else if (drawerItem.getTag().toString().equals(\"ORDER_HISTORY\")) {\n                                Intent i = new Intent(HomeActivity.this, OrderActivity.class);\n                                startActivity(i);\n\n                            } else if (drawerItem.getTag().toString().equals(\"MY_CART\")) {\n                                Intent i = new Intent(HomeActivity.this, MyCart.class);\n                                startActivity(i);\n\n                            } else if (drawerItem.getTag().toString().equals(\"LOG_OUT\")) {\n                                cart_count=0;\n                                invalidateOptionsMenu();\n                                editor.clear().apply();\n                                Intent i = new Intent(HomeActivity.this, StartActivity.class);\n                                startActivity(i);\n                                finish();\n\n                            } else if (drawerItem.getTag().toString().equals(\"CATEGORIES\")) {\n\n                            } else if (drawerItem.getTag().toString().equals(\"SUB_CATEGORIES\")) {\n                                Intent intent = new Intent(HomeActivity.this, Category_wise_products.class);\n                                intent.putExtra(\"sub_cat_id\", String.valueOf(drawerItem.getIdentifier()));\n                                intent.putExtra(\"cart_count\",\"\"+cart_count);\n                                intent.putExtra(\"sub_category\", ((Nameable)drawerItem).getName().toString());\n                                startActivity(intent);\n                            }\n                        }\n\n                        return false;\n                    }\n                })\n                .withSavedInstance(savedInstanceState)\n                .withShowDrawerOnFirstLaunch(true)\n//                .withShowDrawerUntilDraggedOpened(true)\n                .build();\n\n\n        if (sp.getString(\"loginid\", null) != null) {\n            PrimaryDrawerItem order_history = new PrimaryDrawerItem().withName(\"Order History\").withIcon(R.drawable.ic_history_black).withTag(\"ORDER_HISTORY\");\n            PrimaryDrawerItem my_cart = new PrimaryDrawerItem().withName(\"My Cart\").withIcon(R.drawable.ic_shopping_cart_black).withTag(\"MY_CART\");\n            result.addItem(order_history);\n            result.addItem(my_cart);\n            result.addStickyFooterItem(new PrimaryDrawerItem().withName(\"Log Out\").withIcon(R.drawable.ic_log_out).withTag(\"LOG_OUT\"));\n\n\n\n\n        } else {\n            result.addStickyFooterItem(new PrimaryDrawerItem().withName(\"Log In\").withIcon(R.drawable.ic_person_black).withTag(\"LOGIN\"));\n        }\n\n\n\n        result.addItem(new DividerDrawerItem());\n        result.addItem(new SecondaryDrawerItem().withName(\"Shop By Category\").withTag(\"CATEGORY_LABEL\").withSelectable(false).withSetSelected(false).withTextColor(getResources().getColor(R.color.material)));\n        result.addItem(new DividerDrawerItem());\n\n        class Categories extends AsyncTask<String, Void, String> {\n\n            @Override\n            protected String doInBackground(String... params) {\n                String productUrl = getResources().getString(R.string.base_url) + \"getCategoryAndSubCategory/\";\n\n                try {\n                    URL url = new URL(productUrl);\n\n                    HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();\n                    httpURLConnection.setRequestMethod(\"POST\");\n                    httpURLConnection.setDoInput(true);\n                    httpURLConnection.setDoOutput(true);\n\n                    InputStream inputStream = httpURLConnection.getInputStream();\n                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"));\n                    String result = \"\", line = \"\";\n                    while ((line = bufferedReader.readLine()) != null) {\n                        result += line;\n                    }\n                    return result;\n                } catch (Exception e) {\n                    return e.toString();\n                }\n            }\n\n            @Override\n            protected void onPostExecute(String s) {\n                super.onPostExecute(s);\n                AlertDialog.Builder builder = new AlertDialog.Builder(HomeActivity.this);\n                builder.setTitle(\"Received Message\");\n                try {\n\n                    JSONObject json_data = new JSONObject(s);\n                    Iterator<String> temp = json_data.keys();\n                    while (temp.hasNext()) {\n                        String key = temp.next();\n                        JSONArray sub_cat = json_data.getJSONArray(key);\n                        ExpandableDrawerItem item = new ExpandableDrawerItem().withName(key.replace(\"&amp;\",\"&\")).withIcon(R.drawable.ic_filter_list_black).withIdentifier(0).withSelectable(false).withTag(\"CATEGORIES\");\n                        JSONObject sub_cat_json_data = new JSONObject();\n                        for (int i = 0; i < sub_cat.length(); i++) {\n                            sub_cat_json_data = sub_cat.getJSONObject(i);\n//                            product_ids[i] = json_data.getString(\"id\");\n                            item.withSubItems(new SecondaryDrawerItem().withLevel(2).withName(sub_cat_json_data.getString(\"sub_category\").replace(\"&amp;\",\"&\")).withIcon(R.drawable.ic_minus_black).withIdentifier(Integer.parseInt(sub_cat_json_data.getString(\"id\"))).withTag(\"SUB_CATEGORIES\"));\n\n\n                        }\n                        result.addItem(item);\n                    }\n\n//                    Toast.makeText(HomeActivity.this, \"\"+json_data.length(), Toast.LENGTH_SHORT).show();\n                } catch (JSONException e) {\n                    builder.setCancelable(true);\n                    builder.setTitle(\"No Internet Connection\");\n//                    builder.setMessage(e.toString());\n                    builder.setNeutralButton(\"OK\", new DialogInterface.OnClickListener() {\n                        @Override\n                        public void onClick(DialogInterface dialogInterface, int i) {\n\n                        }\n                    });\n                    builder.show();\n                }\n            }\n\n            @Override\n            protected void onPreExecute() {\n                super.onPreExecute();\n            }\n\n        }\n        Categories categories = new Categories();\n        categories.execute();\n\n        getSupportActionBar().setDisplayHomeAsUpEnabled(false);\n        result.getActionBarDrawerToggle().setDrawerIndicatorEnabled(true);\n\n\n        @SuppressLint(\"StaticFieldLeak\")\n        class LoadSliderImages extends AsyncTask<Void, Void, String> {\n\n            @Override\n            protected void onPreExecute() {\n                super.onPreExecute();\n            }\n\n            @Override\n            protected void onPostExecute(String s) {\n                super.onPostExecute(s);\n                try {\n                    JSONArray jArray = new JSONArray(s);\n                    JSONObject json_data = new JSONObject();\n                    for (int i = 0; i < jArray.length(); i++) {\n                        json_data = jArray.getJSONObject(i);\n                        String str = getResources().getString(R.string.img_base_url) + \"slider_images/\" + json_data.getString(\"image\");\n                        url_maps.put(\"\", str);\n                        sliderShow = findViewById(R.id.slider);\n                        for (String name : url_maps.keySet()) {\n                            DefaultSliderView defaultSliderView = new DefaultSliderView(HomeActivity.this);\n                            // initialize a SliderLayout\n                            defaultSliderView\n                                    .image(url_maps.get(name))\n                                    .setOnSliderClickListener(HomeActivity.this);\n\n\n                            defaultSliderView.bundle(new Bundle());\n                            defaultSliderView.getBundle()\n                                    .putString(\"extra\",json_data.getString(\"product_id\"));\n\n\n                            sliderShow.addSlider(defaultSliderView);\n                        }\n                        sliderShow.setPresetIndicator(SliderLayout.PresetIndicators.Center_Bottom);\n                        sliderShow.setCustomIndicator((PagerIndicator) findViewById(R.id.custom_indicator));\n                    }\n\n                } catch (Exception e) {\n                    Toast.makeText(HomeActivity.this, \"No Internet Connection\", Toast.LENGTH_SHORT).show();\n                }\n//                Toast.makeText(getApplicationContext(), s, Toast.LENGTH_SHORT).show();\n            }\n\n            //in this method we are fetching the json string\n            @Override\n            protected String doInBackground(Void... voids) {\n                try {\n                    String urls = getResources().getString(R.string.base_url).concat(\"slider_images\");\n                    URL url = new URL(urls);\n\n                    //Opening the URL using HttpURLConnection\n                    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n\n                    //StringBuilder object to read the string from the service\n                    StringBuilder sb = new StringBuilder();\n\n                    //We will use a buffered reader to read the string from service\n                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n                    //A simple string to read values from each line\n                    String json;\n\n                    //reading until we don't find null\n                    while ((json = bufferedReader.readLine()) != null) {\n\n                        //appending it to string builder\n                        sb.append(json + \"\\n\");\n                    }\n\n                    //finally returning the read string\n                    return sb.toString().trim();\n                } catch (Exception e) {\n                    return null;\n                }\n\n            }\n        }\n        LoadSliderImages sliderImgLoaderObj = new LoadSliderImages();\n        sliderImgLoaderObj.execute();\n\n\n\n        /*  Grid View Best Selling Product  */\n\n        mGridView = findViewById(R.id.gridView);\n\n        mProgressBar = findViewById(R.id.progressBar);\n\n        //Initialize with empty data\n        mGridData = new ArrayList<>();\n        mGridAdapter = new Bsp_Grid(this, R.layout.bsp_grid_single, mGridData);\n        mGridView.setAdapter(mGridAdapter);\n\n        //Grid view click event\n        mGridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n            public void onItemClick(AdapterView<?> parent, View v, int position, long id) {\n\n                Product detail = new Product();\n                detail.startProductDetailActivity(bsp_id_list.get(position), HomeActivity.this);\n//                Toast.makeText(HomeActivity.this, bsp_id_list.get(position), Toast.LENGTH_SHORT).show();\n//        Get item at position\n//                GridItem item = (GridItem) parent.getItemAtPosition(position);\n//\n//                Intent intent = new Intent(GridViewActivity.this, DetailsActivity.class);\n//                ImageView imageView = (ImageView) v.findViewById(R.id.grid_item_image);\n//\n//                // Interesting data to pass across are the thumbnail size/location, the\n//                // resourceId of the source bitmap, the picture description, and the\n//                // orientation (to avoid returning back to an obsolete configuration if\n//                // the device rotates again in the meantime)\n//\n//                int[] screenLocation = new int[2];\n//                imageView.getLocationOnScreen(screenLocation);\n//\n//                //Pass the image title and url to DetailsActivity\n//                intent.putExtra(\"left\", screenLocation[0]).\n//                        putExtra(\"top\", screenLocation[1]).\n//                        putExtra(\"width\", imageView.getWidth()).\n//                        putExtra(\"height\", imageView.getHeight()).\n//                        putExtra(\"title\", item.getTitle()).\n//                        putExtra(\"image\", item.getImage());\n//\n//                //Start details activity\n////                startActivity(intent);\n            }\n        });\n\n        //Start download\n        new LoadGridImages().execute();\n\n        mProgressBar.setVisibility(View.VISIBLE);\n        class BestDeals extends AsyncTask<String, Void, String> {\n\n            @Override\n            protected String doInBackground(String... params) {\n                String productUrl = getResources().getString(R.string.base_url) + \"getBestSellingProducts/\";\n\n                try {\n                    URL url = new URL(productUrl);\n\n                    HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();\n                    httpURLConnection.setRequestMethod(\"POST\");\n                    httpURLConnection.setDoInput(true);\n                    httpURLConnection.setDoOutput(true);\n\n                    InputStream inputStream = httpURLConnection.getInputStream();\n                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"));\n                    String result = \"\", line = \"\";\n                    while ((line = bufferedReader.readLine()) != null) {\n                        result += line;\n                    }\n                    return result;\n                } catch (Exception e) {\n                    return e.toString();\n                }\n            }\n\n            @Override\n            protected void onPostExecute(String s) {\n                super.onPostExecute(s);\n                AlertDialog.Builder builder = new AlertDialog.Builder(HomeActivity.this);\n                builder.setTitle(\"Received Message\");\n\n                try {\n\n                    JSONArray productArray = new JSONArray(s);\n\n                    String[] product_ids = new String[productArray.length()];\n                    String[] product_names = new String[productArray.length()];\n                    String[] product_descs = new String[productArray.length()];\n                    String[] product_imgs = new String[productArray.length()];\n                    String[] product_prices = new String[productArray.length()];\n                    String[] product_brands = new String[productArray.length()];\n                    String[] product_sps = new String[productArray.length()];\n                    String[] product_dps = new String[productArray.length()];\n\n\n                    JSONObject json_data = new JSONObject();\n                    for (int i = 0; i < productArray.length(); i++) {\n                        json_data = productArray.getJSONObject(i);\n                        product_ids[i] = json_data.getString(\"id\");\n                        product_names[i] = json_data.getString(\"name\");\n                        product_descs[i] = json_data.getString(\"description\");\n                        product_imgs[i] = json_data.getString(\"image\");\n                        product_prices[i] = json_data.getString(\"mrp\") + \" /-\";\n                        product_brands[i] = json_data.getString(\"brand\");\n                        product_sps[i] = \"\\u20B9\" + json_data.getString(\"selling_price\") + \" /-\";\n                        double p_mrp = Double.parseDouble(json_data.getString(\"mrp\"));\n                        double p_sp = Double.parseDouble(json_data.getString(\"selling_price\"));\n                        double p_dp = (p_mrp - p_sp) / (p_mrp / 100);\n                        int p_dp_i = (int) p_dp;\n                        product_dps[i] = String.valueOf(p_dp_i);\n\n\n                    }\n\n                    l2.setVisibility(View.VISIBLE);\n                    mProgressBar.setVisibility(View.GONE);\n\n                    RecyclerView product_recyclerview = findViewById(R.id.recyclerview_best_deals);\n                    product_recyclerview.setNestedScrollingEnabled(false);\n                    product_recyclerview.setLayoutManager(new LinearLayoutManager(HomeActivity.this));\n                    product_recyclerview.setAdapter(new Recent_Products_Adapter(product_ids, product_names, product_descs, product_imgs, product_prices, product_brands, product_sps, product_dps, HomeActivity.this));\n                } catch (JSONException e) {\n                    builder.setCancelable(true);\n                    builder.setTitle(\"No Internet Connection\");\n//                    builder.setMessage(s);\n                    builder.setNeutralButton(\"OK\", new DialogInterface.OnClickListener() {\n                        @Override\n                        public void onClick(DialogInterface dialogInterface, int i) {\n\n                        }\n                    });\n                    builder.show();\n                }\n\n            }\n\n            @Override\n            protected void onPreExecute() {\n                super.onPreExecute();\n            }\n\n\n        }\n        BestDeals products = new BestDeals();\n        products.execute();\n\n//\n//        class RecentProducts extends AsyncTask<String, Void, String> {\n//\n//            @Override\n//            protected String doInBackground(String... params) {\n//                String productUrl = getResources().getString(R.string.base_url) + \"getRecentProducts/\";\n//\n//                try {\n//                    URL url = new URL(productUrl);\n//\n//                    HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();\n//                    httpURLConnection.setRequestMethod(\"POST\");\n//                    httpURLConnection.setDoInput(true);\n//                    httpURLConnection.setDoOutput(true);\n//\n//                    InputStream inputStream = httpURLConnection.getInputStream();\n//                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"));\n//                    String result = \"\", line = \"\";\n//                    while ((line = bufferedReader.readLine()) != null) {\n//                        result += line;\n//                    }\n//                    return result;\n//                } catch (Exception e) {\n//                    return e.toString();\n//                }\n//            }\n//\n//            @Override\n//            protected void onPostExecute(String s) {\n//                super.onPostExecute(s);\n//                AlertDialog.Builder builder = new AlertDialog.Builder(HomeActivity.this);\n//                builder.setTitle(\"Received Message\");\n//\n//                try {\n//\n//                    JSONArray productArray = new JSONArray(s);\n//\n//                    String[] product_ids = new String[productArray.length()];\n//                    String[] product_names = new String[productArray.length()];\n//                    String[] product_descs = new String[productArray.length()];\n//                    String[] product_imgs = new String[productArray.length()];\n//                    String[] product_prices = new String[productArray.length()];\n//                    String[] product_brands = new String[productArray.length()];\n//                    String[] product_sps = new String[productArray.length()];\n//                    String[] product_dps = new String[productArray.length()];\n//\n//\n//                    JSONObject json_data = new JSONObject();\n//                    for (int i = 0; i < productArray.length(); i++) {\n//                        json_data = productArray.getJSONObject(i);\n//                        product_ids[i] = json_data.getString(\"id\");\n//                        product_names[i] = json_data.getString(\"name\");\n//                        product_descs[i] = json_data.getString(\"description\");\n//                        product_imgs[i] = json_data.getString(\"image\");\n//                        product_prices[i] = json_data.getString(\"mrp\") + \" /-\";\n//                        product_brands[i] = json_data.getString(\"brand\");\n//                        product_sps[i] = \"\\u20B9\" + json_data.getString(\"selling_price\") + \" /-\";\n//                        double p_mrp = Double.parseDouble(json_data.getString(\"mrp\"));\n//                        double p_sp = Double.parseDouble(json_data.getString(\"selling_price\"));\n//                        double p_dp = (p_mrp - p_sp) / (p_mrp / 100);\n//                        int p_dp_i = (int) p_dp;\n//                        product_dps[i] = String.valueOf(p_dp_i);\n//\n//\n//                    }\n//                    RecyclerView product_recyclerview = findViewById(R.id.recyclerview_recent_products);\n//                    product_recyclerview.setNestedScrollingEnabled(false);\n//                    product_recyclerview.setLayoutManager(new LinearLayoutManager(HomeActivity.this));\n//                    product_recyclerview.setAdapter(new Recent_Products_Adapter(product_ids, product_names, product_descs, product_imgs, product_prices, product_brands, product_sps, product_dps, HomeActivity.this));\n//                } catch (JSONException e) {\n//                    builder.setCancelable(true);\n//                    builder.setTitle(\"No Internet Connection\");\n//                    builder.setMessage(s);\n//                    builder.setNeutralButton(\"OK\", new DialogInterface.OnClickListener() {\n//                        @Override\n//                        public void onClick(DialogInterface dialogInterface, int i) {\n//\n//                        }\n//                    });\n//                    builder.show();\n//                }\n//\n//            }\n//\n//            @Override\n//            protected void onPreExecute() {\n//                super.onPreExecute();\n//            }\n//\n//\n//        }\n//        RecentProducts recentProducts = new RecentProducts();\n//        recentProducts.execute();\n\n\n    }\n\n\n\n\n    class LoadGridImages extends AsyncTask<Void, Void, String> {\n\n        @Override\n        protected void onPreExecute() {\n            super.onPreExecute();\n        }\n\n        @Override\n        protected void onPostExecute(String s) {\n            super.onPostExecute(s);\n//                Toast.makeText(HomeActivity.this, s, Toast.LENGTH_SHORT).show();\n            try {\n                JSONArray jArray = new JSONArray(s);\n                JSONObject json_data = new JSONObject();\n                GridItem item;\n\n                for (int i = 0; i < jArray.length(); i++) {\n\n                    json_data = jArray.getJSONObject(i);\n                    String title=\"Nothing\";\n                    if(json_data.getString(\"name\").length()>20) {\n                        title = json_data.getString(\"name\").substring(0, 19);\n                    }else{\n                        title = json_data.getString(\"name\");\n                    }\n                    item = new GridItem();\n                    item.setTitle(title);\n\n                    item.setImage(getResources().getString(R.string.img_base_url) + \"product_images/\" + json_data.getString(\"image\"));\n                    bsp_id_list.add(json_data.getString(\"id\"));\n                    mGridData.add(item);\n                }\n\n                mGridAdapter.setGridData(mGridData);\n                mProgressBar.setVisibility(View.GONE);\n\n            } catch (Exception e) {\n                Toast.makeText(HomeActivity.this, \"No Internet Connection\", Toast.LENGTH_SHORT).show();\n            }\n//                Toast.makeText(getApplicationContext(), s, Toast.LENGTH_SHORT).show();\n        }\n\n        //in this method we are fetching the json string\n        @Override\n        protected String doInBackground(Void... voids) {\n            try {\n                String urls = getResources().getString(R.string.base_url).concat(\"getRecentProducts\");\n                URL url = new URL(urls);\n\n                //Opening the URL using HttpURLConnection\n                HttpURLConnection con = (HttpURLConnection) url.openConnection();\n\n                //StringBuilder object to read the string from the service\n                StringBuilder sb = new StringBuilder();\n\n                //We will use a buffered reader to read the string from service\n                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n                //A simple string to read values from each line\n                String json;\n\n                //reading until we don't find null\n                while ((json = bufferedReader.readLine()) != null) {\n\n                    //appending it to string builder\n                    sb.append(json + \"\\n\");\n                }\n\n                //finally returning the read string\n                return sb.toString().trim();\n            } catch (Exception e) {\n                return null;\n            }\n\n        }\n    }\n\n\n    @Override\n    protected void onPostResume() {\n        super.onPostResume();\n        invalidateOptionsMenu();\n\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onBackPressed() {\n\n\n        if (result != null && result.isDrawerOpen()) {\n            result.closeDrawer();\n        } else {\n            super.onBackPressed();\n        }\n\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.home, menu);\n\n        final MenuItem menuItem = menu.findItem(R.id.cart);\n        menuItem.setIcon(Converter.convertLayoutToImage(HomeActivity.this,cart_count,R.drawable.ic_shopping_cart_white));\n\n\n        if(sp.getString(\"loginid\",null)!=null){\n            class GetCartItemCount extends AsyncTask<String, Void, String> {\n\n                @Override\n                protected void onPreExecute() {\n                    super.onPreExecute();\n                }\n\n                @Override\n                protected void onPostExecute(String s) {\n                    super.onPostExecute(s);\n                    cart_count = Integer.parseInt(s);\n                    menuItem.setIcon(Converter.convertLayoutToImage(HomeActivity.this,cart_count,R.drawable.ic_shopping_cart_white));\n                }\n\n                @Override\n                protected String doInBackground(String... params) {\n\n                    String urls = getResources().getString(R.string.base_url).concat(\"getItemCount/\");\n                    try {\n                        URL url = new URL(urls);\n                        HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();\n                        httpURLConnection.setRequestMethod(\"POST\");\n                        httpURLConnection.setDoInput(true);\n                        httpURLConnection.setDoOutput(true);\n                        OutputStream outputStream = httpURLConnection.getOutputStream();\n                        BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream, \"UTF-8\"));\n                        String post_Data = URLEncoder.encode(\"login_id\", \"UTF-8\") + \"=\" + URLEncoder.encode(params[0], \"UTF-8\");\n\n                        bufferedWriter.write(post_Data);\n                        bufferedWriter.flush();\n                        bufferedWriter.close();\n                        outputStream.close();\n                        InputStream inputStream = httpURLConnection.getInputStream();\n                        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"));\n                        String result = \"\", line = \"\";\n                        while ((line = bufferedReader.readLine()) != null) {\n                            result += line;\n                        }\n                        return result;\n                    } catch (Exception e) {\n                        return e.toString();\n                    }\n                }\n            }\n\n            //creating asynctask object and executing it\n            GetCartItemCount catItemObj = new GetCartItemCount();\n            catItemObj.execute(sp.getString(\"loginid\",null));\n        }\n\n        SearchManager searchManager =\n                (SearchManager) getSystemService(Context.SEARCH_SERVICE);\n        SearchView searchView = (SearchView) menu.findItem(R.id.action_search).getActionView();\n        searchView.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()));\n\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n\n        int id = item.getItemId();\n\n        if (id == R.id.cart) {\n\n\n\n            if(sp.getString(\"loginid\",null)!=null) {\n                Intent i = new Intent(this, MyCart.class);\n                startActivity(i);\n                return true;\n            }else{\n                AlertDialog.Builder builder = new AlertDialog.Builder(HomeActivity.this);\n                builder.setTitle(\"Heyy..\")\n                        .setMessage(\"To see your cart you have to login first. Do you want to login \")\n                        .setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\n                            @Override\n                            public void onClick(DialogInterface dialog, int which) {\n                                Intent intent=new Intent(HomeActivity.this,LoginActivity.class);\n                                startActivity(intent);\n                            }\n                        })\n                        .setNegativeButton(\"No Just Continue \", new DialogInterface.OnClickListener() {\n                            @Override\n                            public void onClick(DialogInterface dialog, int which) {\n                            }\n                        })\n                        .setCancelable(false);\n                builder.show();\n            }\n        }\n\n\n        return super.onOptionsItemSelected(item);\n    }\n\n\n    @Override\n    public void onSliderClick(BaseSliderView slider) {\n\n        String product_id=slider.getBundle().get(\"extra\").toString();\n        Product detail = new Product();\n        detail.startProductDetailActivity(product_id, HomeActivity.this);\n\n\n    }\n\n\n    @Override\n    protected void onNewIntent(Intent intent) {\n\n        handleIntent(intent);\n    }\n\n    private void handleIntent(Intent intent) {\n\n        if (Intent.ACTION_SEARCH.equals(intent.getAction())) {\n            String query = intent.getStringExtra(SearchManager.QUERY);\n            Intent i = new Intent(this, SearchResultsActivity.class);\n            i.putExtra(\"search_text\", query);\n            startActivity(i);\n            //use the query to search your data somehow\n        }\n    }\n\n\n\n\n    @Override\n    public void onAddProduct() {\n        cart_count++;\n        invalidateOptionsMenu();\n    }\n\n    @Override\n    public void onRemoveProduct() {\n        cart_count--;\n        invalidateOptionsMenu();\n    }\n}\n",
    "contains": [
        "app/src/main/res/layout/content_home.xml",
        "app/src/main/res/layout/bsp_grid_single.xml",
        "app/src/main/res/layout/toolbar.xml"
    ],
    "mock_data": {},
    "source": "GoGrocery",
    "time": 17.015974044799805,
    "result": {
        "harmony_component_code": "Column() {\n  AppBar() {\n    // 子组件\n  }\n  .width('100%')\n  .height('auto')\n  .backgroundColor($r('app.color.appBarOverlay'))\n\n  Include() {\n    // 子组件\n  }\n  .width('100%')\n  .height('100%')\n}\n.width('100%')\n.height('100%')"
    },
    "explanation": "1. 使用Column组件作为根容器，对应于安卓的CoordinatorLayout，宽度为100%，高度为100%。\n2. 在Column中嵌套AppBar组件，对应于安卓的AppBarLayout，宽度为100%，高度自适应，背景颜色引用资源$r('app.color.appBarOverlay')。\n3. 在AppBar中使用Include组件，对应于安卓的<include layout=\"@layout/toolbar\" />，表示包含另一个布局文件。\n4. 在Column中再次嵌套Include组件，对应于安卓的<include layout=\"@layout/content_home\" />，表示包含另一个布局文件。\n5. 所有组件的宽度和高度设置均严格按照安卓布局文件中的描述进行转译。"
}