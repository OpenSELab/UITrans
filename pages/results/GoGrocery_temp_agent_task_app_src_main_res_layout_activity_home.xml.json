{"android_layout": {"name": "app/src/main/res/layout/activity_home.xml", "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"app.infiniverse.grocery.HomeActivity\">\n\n    <android.support.design.widget.AppBarLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:theme=\"@style/MyTheme.AppBarOverlay\">\n\n        <include layout=\"@layout/toolbar\" />\n\n\n    </android.support.design.widget.AppBarLayout>\n\n    <include layout=\"@layout/content_home\" />\n\n\n</android.support.design.widget.CoordinatorLayout>\n", "java": "package app.infiniverse.grocery;\n\nimport android.annotation.SuppressLint;\nimport android.app.AlertDialog;\nimport android.app.SearchManager;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.support.design.widget.Snackbar;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.LinearLayoutManager;\nimport android.support.v7.widget.RecyclerView;\nimport android.support.v7.widget.SearchView;\nimport android.support.v7.widget.Toolbar;\nimport android.telephony.SmsManager;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.AdapterView;\nimport android.widget.GridView;\nimport android.widget.LinearLayout;\nimport android.widget.ProgressBar;\nimport android.widget.Toast;\n\nimport com.daimajia.slider.library.Indicators.PagerIndicator;\nimport com.daimajia.slider.library.SliderLayout;\nimport com.daimajia.slider.library.SliderTypes.BaseSliderView;\nimport com.daimajia.slider.library.SliderTypes.DefaultSliderView;\nimport com.mikepenz.itemanimators.AlphaCrossFadeAnimator;\nimport com.mikepenz.materialdrawer.AccountHeader;\nimport com.mikepenz.materialdrawer.AccountHeaderBuilder;\nimport com.mikepenz.materialdrawer.Drawer;\nimport com.mikepenz.materialdrawer.DrawerBuilder;\nimport com.mikepenz.materialdrawer.model.DividerDrawerItem;\nimport com.mikepenz.materialdrawer.model.ExpandableDrawerItem;\nimport com.mikepenz.materialdrawer.model.PrimaryDrawerItem;\nimport com.mikepenz.materialdrawer.model.ProfileDrawerItem;\nimport com.mikepenz.materialdrawer.model.ProfileSettingDrawerItem;\nimport com.mikepenz.materialdrawer.model.SecondaryDrawerItem;\nimport com.mikepenz.materialdrawer.model.interfaces.IDrawerItem;\nimport com.mikepenz.materialdrawer.model.interfaces.IProfile;\nimport com.mikepenz.materialdrawer.model.interfaces.Nameable;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class HomeActivity extends AppCompatActivity\n        implements BaseSliderView.OnSliderClickListener,AddorRemoveCallbacks {\n\n    SliderLayout sliderShow;\n    private static int cart_count=0;\n    HashMap<String, String> url_maps = new HashMap<>();\n\n        private GridView mGridView;\n    private ProgressBar mProgressBar;\n    List<String> bsp_id_list = new ArrayList<String>();\n    private Bsp_Grid mGridAdapter;\n    private ArrayList<GridItem> mGridData;\n    public static final String PREFS = \"PREFS\";\n    SharedPreferences sp;\n    LinearLayout l2;\n    SharedPreferences.Editor editor;\n\n    private Drawer result = null;\n    private AccountHeader headerResult = null;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_home);\n        Toolbar toolbar = findViewById(R.id.mytoolbar);\n        setSupportActionBar(toolbar);\n        sp = getApplicationContext().getSharedPreferences(PREFS, MODE_PRIVATE);\n        editor = sp.edit();\n        l2 = findViewById(R.id.ll_best_selling);\n        mProgressBar =findViewById(R.id.progressBar);\n\n\n        handleIntent(getIntent());\n        final IProfile profile;\n        if (sp.getString(\"loginid\", null) == null) {\n            profile = new ProfileDrawerItem().withName(\"RKS\").withEmail(\"profile@rks.com\").withIcon(R.drawable.icon).withTag(\"RKS\");\n\n        } else {\n            profile = new ProfileDrawerItem().withName(sp.getString(\"name\", null)).withEmail(sp.getString(\"mobile\", null)).withIcon(R.drawable.icon).withTag(\"CUSTOMER\");\n\n        }\n\n//        SecondaryDrawerItem item2 = new SecondaryDrawerItem().withIdentifier(0).withName(\"Adarsh\");\n\n        final Intent i = new Intent(this, ProfileActivity.class);\n        final Intent r = new Intent(this, RegisterActivity.class);\n\n        headerResult = new AccountHeaderBuilder()\n                .withActivity(this)\n                .withTranslucentStatusBar(true)\n                .withHeaderBackground(R.drawable.profile_bg)\n                .addProfiles(\n                        profile,\n                        //don't ask but google uses 14dp for the add account icon in gmail but 20dp for the normal icons (like manage account)\n                        new ProfileSettingDrawerItem().withName(\"Register Now\").withDescription(\"Add new RKS Account\").withTag(\"REGISTER\")\n\n                )\n                .withOnAccountHeaderListener(new AccountHeader.OnAccountHeaderListener() {\n\n\n                    @Override\n                    public boolean onProfileChanged(View view, IProfile profile, boolean current) {\n                        //sample usage of the onProfileChanged listener\n                        //if the clicked item has the identifier 1 add a new profile ;)\n                        if (profile instanceof IDrawerItem && ((IDrawerItem) profile).getTag().equals(\"CUSTOMER\")) {\n//                            headerResult.removeProfile(profile);\n                            startActivity(i);\n                        } else if (profile instanceof IDrawerItem && ((IDrawerItem) profile).getTag().equals(\"REGISTER\")) {\n                            startActivity(r);\n\n                        }\n                        //false if you have not consumed the event and it should close the drawer\n                        return false;\n                    }\n                })\n                .withSavedInstance(savedInstanceState)\n                .build();\n\n\n        new DrawerBuilder().withActivity(this).build();\n\n\n        result = new DrawerBuilder()\n                .withActivity(this)\n                .withToolbar(toolbar)\n                .withHasStableIds(true)\n                .withItemAnimator(new AlphaCrossFadeAnimator())\n                .withAccountHeader(headerResult) //set the AccountHeader we created earlier for the header\n                .addDrawerItems(\n                )\n                .withOnDrawerItemClickListener(new Drawer.OnDrawerItemClickListener() {\n                    @Override\n                    public boolean onItemClick(View view, int position, IDrawerItem drawerItem) {\n\n                        if (drawerItem != null) {\n                            if (drawerItem.getTag().toString().equals(\"LOGIN\")) {\n                                Intent i = new Intent(HomeActivity.this, LoginActivity.class);\n                                startActivity(i);\n                                finish();\n\n                            } else if (drawerItem.getTag().toString().equals(\"ORDER_HISTORY\")) {\n                                Intent i = new Intent(HomeActivity.this, OrderActivity.class);\n                                startActivity(i);\n\n                            } else if (drawerItem.getTag().toString().equals(\"MY_CART\")) {\n                                Intent i = new Intent(HomeActivity.this, MyCart.class);\n                                startActivity(i);\n\n                            } else if (drawerItem.getTag().toString().equals(\"LOG_OUT\")) {\n                                cart_count=0;\n                                invalidateOptionsMenu();\n                                editor.clear().apply();\n                                Intent i = new Intent(HomeActivity.this, StartActivity.class);\n                                startActivity(i);\n                                finish();\n\n                            } else if (drawerItem.getTag().toString().equals(\"CATEGORIES\")) {\n\n                            } else if (drawerItem.getTag().toString().equals(\"SUB_CATEGORIES\")) {\n                                Intent intent = new Intent(HomeActivity.this, Category_wise_products.class);\n                                intent.putExtra(\"sub_cat_id\", String.valueOf(drawerItem.getIdentifier()));\n                                intent.putExtra(\"cart_count\",\"\"+cart_count);\n                                intent.putExtra(\"sub_category\", ((Nameable)drawerItem).getName().toString());\n                                startActivity(intent);\n                            }\n                        }\n\n                        return false;\n                    }\n                })\n                .withSavedInstance(savedInstanceState)\n                .withShowDrawerOnFirstLaunch(true)\n//                .withShowDrawerUntilDraggedOpened(true)\n                .build();\n\n\n        if (sp.getString(\"loginid\", null) != null) {\n            PrimaryDrawerItem order_history = new PrimaryDrawerItem().withName(\"Order History\").withIcon(R.drawable.ic_history_black).withTag(\"ORDER_HISTORY\");\n            PrimaryDrawerItem my_cart = new PrimaryDrawerItem().withName(\"My Cart\").withIcon(R.drawable.ic_shopping_cart_black).withTag(\"MY_CART\");\n            result.addItem(order_history);\n            result.addItem(my_cart);\n            result.addStickyFooterItem(new PrimaryDrawerItem().withName(\"Log Out\").withIcon(R.drawable.ic_log_out).withTag(\"LOG_OUT\"));\n\n\n\n\n        } else {\n            result.addStickyFooterItem(new PrimaryDrawerItem().withName(\"Log In\").withIcon(R.drawable.ic_person_black).withTag(\"LOGIN\"));\n        }\n\n\n\n        result.addItem(new DividerDrawerItem());\n        result.addItem(new SecondaryDrawerItem().withName(\"Shop By Category\").withTag(\"CATEGORY_LABEL\").withSelectable(false).withSetSelected(false).withTextColor(getResources().getColor(R.color.material)));\n        result.addItem(new DividerDrawerItem());\n\n        class Categories extends AsyncTask<String, Void, String> {\n\n            @Override\n            protected String doInBackground(String... params) {\n                String productUrl = getResources().getString(R.string.base_url) + \"getCategoryAndSubCategory/\";\n\n                try {\n                    URL url = new URL(productUrl);\n\n                    HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();\n                    httpURLConnection.setRequestMethod(\"POST\");\n                    httpURLConnection.setDoInput(true);\n                    httpURLConnection.setDoOutput(true);\n\n                    InputStream inputStream = httpURLConnection.getInputStream();\n                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"));\n                    String result = \"\", line = \"\";\n                    while ((line = bufferedReader.readLine()) != null) {\n                        result += line;\n                    }\n                    return result;\n                } catch (Exception e) {\n                    return e.toString();\n                }\n            }\n\n            @Override\n            protected void onPostExecute(String s) {\n                super.onPostExecute(s);\n                AlertDialog.Builder builder = new AlertDialog.Builder(HomeActivity.this);\n                builder.setTitle(\"Received Message\");\n                try {\n\n                    JSONObject json_data = new JSONObject(s);\n                    Iterator<String> temp = json_data.keys();\n                    while (temp.hasNext()) {\n                        String key = temp.next();\n                        JSONArray sub_cat = json_data.getJSONArray(key);\n                        ExpandableDrawerItem item = new ExpandableDrawerItem().withName(key.replace(\"&amp;\",\"&\")).withIcon(R.drawable.ic_filter_list_black).withIdentifier(0).withSelectable(false).withTag(\"CATEGORIES\");\n                        JSONObject sub_cat_json_data = new JSONObject();\n                        for (int i = 0; i < sub_cat.length(); i++) {\n                            sub_cat_json_data = sub_cat.getJSONObject(i);\n//                            product_ids[i] = json_data.getString(\"id\");\n                            item.withSubItems(new SecondaryDrawerItem().withLevel(2).withName(sub_cat_json_data.getString(\"sub_category\").replace(\"&amp;\",\"&\")).withIcon(R.drawable.ic_minus_black).withIdentifier(Integer.parseInt(sub_cat_json_data.getString(\"id\"))).withTag(\"SUB_CATEGORIES\"));\n\n\n                        }\n                        result.addItem(item);\n                    }\n\n//                    Toast.makeText(HomeActivity.this, \"\"+json_data.length(), Toast.LENGTH_SHORT).show();\n                } catch (JSONException e) {\n                    builder.setCancelable(true);\n                    builder.setTitle(\"No Internet Connection\");\n//                    builder.setMessage(e.toString());\n                    builder.setNeutralButton(\"OK\", new DialogInterface.OnClickListener() {\n                        @Override\n                        public void onClick(DialogInterface dialogInterface, int i) {\n\n                        }\n                    });\n                    builder.show();\n                }\n            }\n\n            @Override\n            protected void onPreExecute() {\n                super.onPreExecute();\n            }\n\n        }\n        Categories categories = new Categories();\n        categories.execute();\n\n        getSupportActionBar().setDisplayHomeAsUpEnabled(false);\n        result.getActionBarDrawerToggle().setDrawerIndicatorEnabled(true);\n\n\n        @SuppressLint(\"StaticFieldLeak\")\n        class LoadSliderImages extends AsyncTask<Void, Void, String> {\n\n            @Override\n            protected void onPreExecute() {\n                super.onPreExecute();\n            }\n\n            @Override\n            protected void onPostExecute(String s) {\n                super.onPostExecute(s);\n                try {\n                    JSONArray jArray = new JSONArray(s);\n                    JSONObject json_data = new JSONObject();\n                    for (int i = 0; i < jArray.length(); i++) {\n                        json_data = jArray.getJSONObject(i);\n                        String str = getResources().getString(R.string.img_base_url) + \"slider_images/\" + json_data.getString(\"image\");\n                        url_maps.put(\"\", str);\n                        sliderShow = findViewById(R.id.slider);\n                        for (String name : url_maps.keySet()) {\n                            DefaultSliderView defaultSliderView = new DefaultSliderView(HomeActivity.this);\n                            // initialize a SliderLayout\n                            defaultSliderView\n                                    .image(url_maps.get(name))\n                                    .setOnSliderClickListener(HomeActivity.this);\n\n\n                            defaultSliderView.bundle(new Bundle());\n                            defaultSliderView.getBundle()\n                                    .putString(\"extra\",json_data.getString(\"product_id\"));\n\n\n                            sliderShow.addSlider(defaultSliderView);\n                        }\n                        sliderShow.setPresetIndicator(SliderLayout.PresetIndicators.Center_Bottom);\n                        sliderShow.setCustomIndicator((PagerIndicator) findViewById(R.id.custom_indicator));\n                    }\n\n                } catch (Exception e) {\n                    Toast.makeText(HomeActivity.this, \"No Internet Connection\", Toast.LENGTH_SHORT).show();\n                }\n//                Toast.makeText(getApplicationContext(), s, Toast.LENGTH_SHORT).show();\n            }\n\n            //in this method we are fetching the json string\n            @Override\n            protected String doInBackground(Void... voids) {\n                try {\n                    String urls = getResources().getString(R.string.base_url).concat(\"slider_images\");\n                    URL url = new URL(urls);\n\n                    //Opening the URL using HttpURLConnection\n                    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n\n                    //StringBuilder object to read the string from the service\n                    StringBuilder sb = new StringBuilder();\n\n                    //We will use a buffered reader to read the string from service\n                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n                    //A simple string to read values from each line\n                    String json;\n\n                    //reading until we don't find null\n                    while ((json = bufferedReader.readLine()) != null) {\n\n                        //appending it to string builder\n                        sb.append(json + \"\\n\");\n                    }\n\n                    //finally returning the read string\n                    return sb.toString().trim();\n                } catch (Exception e) {\n                    return null;\n                }\n\n            }\n        }\n        LoadSliderImages sliderImgLoaderObj = new LoadSliderImages();\n        sliderImgLoaderObj.execute();\n\n\n\n        /*  Grid View Best Selling Product  */\n\n        mGridView = findViewById(R.id.gridView);\n\n        mProgressBar = findViewById(R.id.progressBar);\n\n        //Initialize with empty data\n        mGridData = new ArrayList<>();\n        mGridAdapter = new Bsp_Grid(this, R.layout.bsp_grid_single, mGridData);\n        mGridView.setAdapter(mGridAdapter);\n\n        //Grid view click event\n        mGridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n            public void onItemClick(AdapterView<?> parent, View v, int position, long id) {\n\n                Product detail = new Product();\n                detail.startProductDetailActivity(bsp_id_list.get(position), HomeActivity.this);\n//                Toast.makeText(HomeActivity.this, bsp_id_list.get(position), Toast.LENGTH_SHORT).show();\n//        Get item at position\n//                GridItem item = (GridItem) parent.getItemAtPosition(position);\n//\n//                Intent intent = new Intent(GridViewActivity.this, DetailsActivity.class);\n//                ImageView imageView = (ImageView) v.findViewById(R.id.grid_item_image);\n//\n//                // Interesting data to pass across are the thumbnail size/location, the\n//                // resourceId of the source bitmap, the picture description, and the\n//                // orientation (to avoid returning back to an obsolete configuration if\n//                // the device rotates again in the meantime)\n//\n//                int[] screenLocation = new int[2];\n//                imageView.getLocationOnScreen(screenLocation);\n//\n//                //Pass the image title and url to DetailsActivity\n//                intent.putExtra(\"left\", screenLocation[0]).\n//                        putExtra(\"top\", screenLocation[1]).\n//                        putExtra(\"width\", imageView.getWidth()).\n//                        putExtra(\"height\", imageView.getHeight()).\n//                        putExtra(\"title\", item.getTitle()).\n//                        putExtra(\"image\", item.getImage());\n//\n//                //Start details activity\n////                startActivity(intent);\n            }\n        });\n\n        //Start download\n        new LoadGridImages().execute();\n\n        mProgressBar.setVisibility(View.VISIBLE);\n        class BestDeals extends AsyncTask<String, Void, String> {\n\n            @Override\n            protected String doInBackground(String... params) {\n                String productUrl = getResources().getString(R.string.base_url) + \"getBestSellingProducts/\";\n\n                try {\n                    URL url = new URL(productUrl);\n\n                    HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();\n                    httpURLConnection.setRequestMethod(\"POST\");\n                    httpURLConnection.setDoInput(true);\n                    httpURLConnection.setDoOutput(true);\n\n                    InputStream inputStream = httpURLConnection.getInputStream();\n                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"));\n                    String result = \"\", line = \"\";\n                    while ((line = bufferedReader.readLine()) != null) {\n                        result += line;\n                    }\n                    return result;\n                } catch (Exception e) {\n                    return e.toString();\n                }\n            }\n\n            @Override\n            protected void onPostExecute(String s) {\n                super.onPostExecute(s);\n                AlertDialog.Builder builder = new AlertDialog.Builder(HomeActivity.this);\n                builder.setTitle(\"Received Message\");\n\n                try {\n\n                    JSONArray productArray = new JSONArray(s);\n\n                    String[] product_ids = new String[productArray.length()];\n                    String[] product_names = new String[productArray.length()];\n                    String[] product_descs = new String[productArray.length()];\n                    String[] product_imgs = new String[productArray.length()];\n                    String[] product_prices = new String[productArray.length()];\n                    String[] product_brands = new String[productArray.length()];\n                    String[] product_sps = new String[productArray.length()];\n                    String[] product_dps = new String[productArray.length()];\n\n\n                    JSONObject json_data = new JSONObject();\n                    for (int i = 0; i < productArray.length(); i++) {\n                        json_data = productArray.getJSONObject(i);\n                        product_ids[i] = json_data.getString(\"id\");\n                        product_names[i] = json_data.getString(\"name\");\n                        product_descs[i] = json_data.getString(\"description\");\n                        product_imgs[i] = json_data.getString(\"image\");\n                        product_prices[i] = json_data.getString(\"mrp\") + \" /-\";\n                        product_brands[i] = json_data.getString(\"brand\");\n                        product_sps[i] = \"\\u20B9\" + json_data.getString(\"selling_price\") + \" /-\";\n                        double p_mrp = Double.parseDouble(json_data.getString(\"mrp\"));\n                        double p_sp = Double.parseDouble(json_data.getString(\"selling_price\"));\n                        double p_dp = (p_mrp - p_sp) / (p_mrp / 100);\n                        int p_dp_i = (int) p_dp;\n                        product_dps[i] = String.valueOf(p_dp_i);\n\n\n                    }\n\n                    l2.setVisibility(View.VISIBLE);\n                    mProgressBar.setVisibility(View.GONE);\n\n                    RecyclerView product_recyclerview = findViewById(R.id.recyclerview_best_deals);\n                    product_recyclerview.setNestedScrollingEnabled(false);\n                    product_recyclerview.setLayoutManager(new LinearLayoutManager(HomeActivity.this));\n                    product_recyclerview.setAdapter(new Recent_Products_Adapter(product_ids, product_names, product_descs, product_imgs, product_prices, product_brands, product_sps, product_dps, HomeActivity.this));\n                } catch (JSONException e) {\n                    builder.setCancelable(true);\n                    builder.setTitle(\"No Internet Connection\");\n//                    builder.setMessage(s);\n                    builder.setNeutralButton(\"OK\", new DialogInterface.OnClickListener() {\n                        @Override\n                        public void onClick(DialogInterface dialogInterface, int i) {\n\n                        }\n                    });\n                    builder.show();\n                }\n\n            }\n\n            @Override\n            protected void onPreExecute() {\n                super.onPreExecute();\n            }\n\n\n        }\n        BestDeals products = new BestDeals();\n        products.execute();\n\n//\n//        class RecentProducts extends AsyncTask<String, Void, String> {\n//\n//            @Override\n//            protected String doInBackground(String... params) {\n//                String productUrl = getResources().getString(R.string.base_url) + \"getRecentProducts/\";\n//\n//                try {\n//                    URL url = new URL(productUrl);\n//\n//                    HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();\n//                    httpURLConnection.setRequestMethod(\"POST\");\n//                    httpURLConnection.setDoInput(true);\n//                    httpURLConnection.setDoOutput(true);\n//\n//                    InputStream inputStream = httpURLConnection.getInputStream();\n//                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"));\n//                    String result = \"\", line = \"\";\n//                    while ((line = bufferedReader.readLine()) != null) {\n//                        result += line;\n//                    }\n//                    return result;\n//                } catch (Exception e) {\n//                    return e.toString();\n//                }\n//            }\n//\n//            @Override\n//            protected void onPostExecute(String s) {\n//                super.onPostExecute(s);\n//                AlertDialog.Builder builder = new AlertDialog.Builder(HomeActivity.this);\n//                builder.setTitle(\"Received Message\");\n//\n//                try {\n//\n//                    JSONArray productArray = new JSONArray(s);\n//\n//                    String[] product_ids = new String[productArray.length()];\n//                    String[] product_names = new String[productArray.length()];\n//                    String[] product_descs = new String[productArray.length()];\n//                    String[] product_imgs = new String[productArray.length()];\n//                    String[] product_prices = new String[productArray.length()];\n//                    String[] product_brands = new String[productArray.length()];\n//                    String[] product_sps = new String[productArray.length()];\n//                    String[] product_dps = new String[productArray.length()];\n//\n//\n//                    JSONObject json_data = new JSONObject();\n//                    for (int i = 0; i < productArray.length(); i++) {\n//                        json_data = productArray.getJSONObject(i);\n//                        product_ids[i] = json_data.getString(\"id\");\n//                        product_names[i] = json_data.getString(\"name\");\n//                        product_descs[i] = json_data.getString(\"description\");\n//                        product_imgs[i] = json_data.getString(\"image\");\n//                        product_prices[i] = json_data.getString(\"mrp\") + \" /-\";\n//                        product_brands[i] = json_data.getString(\"brand\");\n//                        product_sps[i] = \"\\u20B9\" + json_data.getString(\"selling_price\") + \" /-\";\n//                        double p_mrp = Double.parseDouble(json_data.getString(\"mrp\"));\n//                        double p_sp = Double.parseDouble(json_data.getString(\"selling_price\"));\n//                        double p_dp = (p_mrp - p_sp) / (p_mrp / 100);\n//                        int p_dp_i = (int) p_dp;\n//                        product_dps[i] = String.valueOf(p_dp_i);\n//\n//\n//                    }\n//                    RecyclerView product_recyclerview = findViewById(R.id.recyclerview_recent_products);\n//                    product_recyclerview.setNestedScrollingEnabled(false);\n//                    product_recyclerview.setLayoutManager(new LinearLayoutManager(HomeActivity.this));\n//                    product_recyclerview.setAdapter(new Recent_Products_Adapter(product_ids, product_names, product_descs, product_imgs, product_prices, product_brands, product_sps, product_dps, HomeActivity.this));\n//                } catch (JSONException e) {\n//                    builder.setCancelable(true);\n//                    builder.setTitle(\"No Internet Connection\");\n//                    builder.setMessage(s);\n//                    builder.setNeutralButton(\"OK\", new DialogInterface.OnClickListener() {\n//                        @Override\n//                        public void onClick(DialogInterface dialogInterface, int i) {\n//\n//                        }\n//                    });\n//                    builder.show();\n//                }\n//\n//            }\n//\n//            @Override\n//            protected void onPreExecute() {\n//                super.onPreExecute();\n//            }\n//\n//\n//        }\n//        RecentProducts recentProducts = new RecentProducts();\n//        recentProducts.execute();\n\n\n    }\n\n\n\n\n    class LoadGridImages extends AsyncTask<Void, Void, String> {\n\n        @Override\n        protected void onPreExecute() {\n            super.onPreExecute();\n        }\n\n        @Override\n        protected void onPostExecute(String s) {\n            super.onPostExecute(s);\n//                Toast.makeText(HomeActivity.this, s, Toast.LENGTH_SHORT).show();\n            try {\n                JSONArray jArray = new JSONArray(s);\n                JSONObject json_data = new JSONObject();\n                GridItem item;\n\n                for (int i = 0; i < jArray.length(); i++) {\n\n                    json_data = jArray.getJSONObject(i);\n                    String title=\"Nothing\";\n                    if(json_data.getString(\"name\").length()>20) {\n                        title = json_data.getString(\"name\").substring(0, 19);\n                    }else{\n                        title = json_data.getString(\"name\");\n                    }\n                    item = new GridItem();\n                    item.setTitle(title);\n\n                    item.setImage(getResources().getString(R.string.img_base_url) + \"product_images/\" + json_data.getString(\"image\"));\n                    bsp_id_list.add(json_data.getString(\"id\"));\n                    mGridData.add(item);\n                }\n\n                mGridAdapter.setGridData(mGridData);\n                mProgressBar.setVisibility(View.GONE);\n\n            } catch (Exception e) {\n                Toast.makeText(HomeActivity.this, \"No Internet Connection\", Toast.LENGTH_SHORT).show();\n            }\n//                Toast.makeText(getApplicationContext(), s, Toast.LENGTH_SHORT).show();\n        }\n\n        //in this method we are fetching the json string\n        @Override\n        protected String doInBackground(Void... voids) {\n            try {\n                String urls = getResources().getString(R.string.base_url).concat(\"getRecentProducts\");\n                URL url = new URL(urls);\n\n                //Opening the URL using HttpURLConnection\n                HttpURLConnection con = (HttpURLConnection) url.openConnection();\n\n                //StringBuilder object to read the string from the service\n                StringBuilder sb = new StringBuilder();\n\n                //We will use a buffered reader to read the string from service\n                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(con.getInputStream()));\n\n                //A simple string to read values from each line\n                String json;\n\n                //reading until we don't find null\n                while ((json = bufferedReader.readLine()) != null) {\n\n                    //appending it to string builder\n                    sb.append(json + \"\\n\");\n                }\n\n                //finally returning the read string\n                return sb.toString().trim();\n            } catch (Exception e) {\n                return null;\n            }\n\n        }\n    }\n\n\n    @Override\n    protected void onPostResume() {\n        super.onPostResume();\n        invalidateOptionsMenu();\n\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onBackPressed() {\n\n\n        if (result != null && result.isDrawerOpen()) {\n            result.closeDrawer();\n        } else {\n            super.onBackPressed();\n        }\n\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.home, menu);\n\n        final MenuItem menuItem = menu.findItem(R.id.cart);\n        menuItem.setIcon(Converter.convertLayoutToImage(HomeActivity.this,cart_count,R.drawable.ic_shopping_cart_white));\n\n\n        if(sp.getString(\"loginid\",null)!=null){\n            class GetCartItemCount extends AsyncTask<String, Void, String> {\n\n                @Override\n                protected void onPreExecute() {\n                    super.onPreExecute();\n                }\n\n                @Override\n                protected void onPostExecute(String s) {\n                    super.onPostExecute(s);\n                    cart_count = Integer.parseInt(s);\n                    menuItem.setIcon(Converter.convertLayoutToImage(HomeActivity.this,cart_count,R.drawable.ic_shopping_cart_white));\n                }\n\n                @Override\n                protected String doInBackground(String... params) {\n\n                    String urls = getResources().getString(R.string.base_url).concat(\"getItemCount/\");\n                    try {\n                        URL url = new URL(urls);\n                        HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();\n                        httpURLConnection.setRequestMethod(\"POST\");\n                        httpURLConnection.setDoInput(true);\n                        httpURLConnection.setDoOutput(true);\n                        OutputStream outputStream = httpURLConnection.getOutputStream();\n                        BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream, \"UTF-8\"));\n                        String post_Data = URLEncoder.encode(\"login_id\", \"UTF-8\") + \"=\" + URLEncoder.encode(params[0], \"UTF-8\");\n\n                        bufferedWriter.write(post_Data);\n                        bufferedWriter.flush();\n                        bufferedWriter.close();\n                        outputStream.close();\n                        InputStream inputStream = httpURLConnection.getInputStream();\n                        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"));\n                        String result = \"\", line = \"\";\n                        while ((line = bufferedReader.readLine()) != null) {\n                            result += line;\n                        }\n                        return result;\n                    } catch (Exception e) {\n                        return e.toString();\n                    }\n                }\n            }\n\n            //creating asynctask object and executing it\n            GetCartItemCount catItemObj = new GetCartItemCount();\n            catItemObj.execute(sp.getString(\"loginid\",null));\n        }\n\n        SearchManager searchManager =\n                (SearchManager) getSystemService(Context.SEARCH_SERVICE);\n        SearchView searchView = (SearchView) menu.findItem(R.id.action_search).getActionView();\n        searchView.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()));\n\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n\n        int id = item.getItemId();\n\n        if (id == R.id.cart) {\n\n\n\n            if(sp.getString(\"loginid\",null)!=null) {\n                Intent i = new Intent(this, MyCart.class);\n                startActivity(i);\n                return true;\n            }else{\n                AlertDialog.Builder builder = new AlertDialog.Builder(HomeActivity.this);\n                builder.setTitle(\"Heyy..\")\n                        .setMessage(\"To see your cart you have to login first. Do you want to login \")\n                        .setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\n                            @Override\n                            public void onClick(DialogInterface dialog, int which) {\n                                Intent intent=new Intent(HomeActivity.this,LoginActivity.class);\n                                startActivity(intent);\n                            }\n                        })\n                        .setNegativeButton(\"No Just Continue \", new DialogInterface.OnClickListener() {\n                            @Override\n                            public void onClick(DialogInterface dialog, int which) {\n                            }\n                        })\n                        .setCancelable(false);\n                builder.show();\n            }\n        }\n\n\n        return super.onOptionsItemSelected(item);\n    }\n\n\n    @Override\n    public void onSliderClick(BaseSliderView slider) {\n\n        String product_id=slider.getBundle().get(\"extra\").toString();\n        Product detail = new Product();\n        detail.startProductDetailActivity(product_id, HomeActivity.this);\n\n\n    }\n\n\n    @Override\n    protected void onNewIntent(Intent intent) {\n\n        handleIntent(intent);\n    }\n\n    private void handleIntent(Intent intent) {\n\n        if (Intent.ACTION_SEARCH.equals(intent.getAction())) {\n            String query = intent.getStringExtra(SearchManager.QUERY);\n            Intent i = new Intent(this, SearchResultsActivity.class);\n            i.putExtra(\"search_text\", query);\n            startActivity(i);\n            //use the query to search your data somehow\n        }\n    }\n\n\n\n\n    @Override\n    public void onAddProduct() {\n        cart_count++;\n        invalidateOptionsMenu();\n    }\n\n    @Override\n    public void onRemoveProduct() {\n        cart_count--;\n        invalidateOptionsMenu();\n    }\n}\n", "contains": ["app/src/main/res/layout/content_home.xml", "app/src/main/res/layout/bsp_grid_single.xml", "app/src/main/res/layout/toolbar.xml"], "mock_data": {}, "source": "GoGrocery"}, "breakdown_android_layout": {"tasks": [{"description": "实现安卓标题工具栏的转译，并保持布局和样式尽可能一致。", "done": false, "component": {"name": ["android.support.design.widget.AppBarLayout", "android.support.v7.widget.Toolbar"], "content": "<android.support.design.widget.AppBarLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:theme=\"@style/MyTheme.AppBarOverlay\">\n\n    <include layout=\"@layout/toolbar\" />\n\n</android.support.design.widget.AppBarLayout>"}}, {"description": "实现内容区域的转译，并保持布局和样式尽可能一致。", "done": false, "component": {"name": ["include"], "content": "<include layout=\"@layout/content_home\" />"}}]}, "translations": [{"description": "实现安卓标题工具栏的转译，并保持布局和样式尽可能一致。", "source_component": "android.support.design.widget.AppBarLayout", "source_component_code": "<android.support.design.widget.AppBarLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:theme=\"@style/MyTheme.AppBarOverlay\">\n\n    <include layout=\"@layout/toolbar\" />\n\n</android.support.design.widget.AppBarLayout>", "source_component_description": "垂直线性容器，宽度占满父容器，高度自适应，主题引用资源app.style.MyTheme.AppBarOverlay。包含一个工具栏，工具栏的布局引用资源app.layout.toolbar。", "target_component": ["Column"], "target_component_code": "Column() {\n  Toolbar()\n    .width('100%')\n    .height('auto')\n    .theme($r('app.style.MyTheme.AppBarOverlay'))\n    .include($r('app.layout.toolbar'))\n}\n.width('100%')\n.height('auto')", "target_component_description": "垂直线性容器，宽度占满父容器，高度自适应，主题引用资源app.style.MyTheme.AppBarOverlay。包含一个工具栏，工具栏的布局引用资源app.layout.toolbar。", "explanation": "1. 使用Column组件作为垂直线性容器，宽度设置为'100%'以占满父容器，高度设置为'auto'以自适应内容。\n2. 在Column中嵌套Toolbar组件，Toolbar的宽度和高度同样设置为'100%'和'auto'以自适应内容。\n3. 通过.theme($r('app.style.MyTheme.AppBarOverlay'))引用主题资源。\n4. 使用.include($r('app.layout.toolbar'))引用工具栏的布局资源。"}, {"description": "实现内容区域的转译，并保持布局和样式尽可能一致。", "source_component": "include", "source_component_code": "<include layout=\"@layout/content_home\" />", "source_component_description": "包含一个布局文件的引用，该布局文件路径为app.layout.content_home。", "target_component": ["RelativeContainer", "EmbeddedComponent"], "target_component_code": "RelativeContainer() {\n  EmbeddedComponent({\n    src: $r('app.layout.content_home')\n  })\n    .width('100%')\n    .height('100%')\n}", "target_component_description": "包含一个布局文件的引用，该布局文件路径为app.layout.content_home。", "explanation": "根据安卓组件描述，页面包含一个布局文件的引用，该布局文件路径为app.layout.content_home。在鸿蒙ArkUI中，使用RelativeContainer来处理布局约束，并使用EmbeddedComponent来加载和显示外部布局文件的内容。EmbeddedComponent的src属性引用布局文件，width和height设置为'100%'以确保布局文件内容占满整个父容器。"}], "translation_agent_task": {"id": "8vbUxEZFvdpAWWM6bKF3j9", "description": "转译安卓布局组件", "subtasks": [{"id": "VfEtxnWp8nXFLCBiuu4LW9", "description": "根据转译表转译组件v1", "subtasks": [{"id": "JicaheMb6hukK8Xe7fjjhs", "description": "生成组件描述", "subtasks": [], "details": {"prompt": "请根据以下安卓XML代码编写一个详细的通用描述和功能描述，供其他开发框架如iOS或鸿蒙的开发者实现同样的布局样式。描述应包含以下内容：\n\n布局属性：包括组件的宽度、高度、边距、填充、对齐方式等。\n组件样式和外观：包括颜色、字体、透明度、圆角等。\n组件排列和嵌套关系：例如垂直或水平布局、组件之间的对齐方式、父子关系。\n组件功能和交互：例如按钮的点击事件、输入框的输入验证逻辑等。\n引用的资源：如自定义的背景图片、颜色等，请指出资源路径或名称。\n请避免使用安卓特有的术语，而是使用通用的描述语言，确保其他框架的开发者可以理解并实现同样的布局和功能，例如：match_parent描述为占满父容器的宽度。同时，请确保描述涵盖每个组件的属性、样式和功能。\n\n你在编写通用描述和功能描述时，需要遵守以下规则：\n## 规则#1\n这条规则适用于所有组件的宽度、高度、外边距、内边距、字体大小等属性的单位。\n对于高度、宽度、外边距、内边距等等属性的单位应全部采用vp；\n对于字体大小等属性的单位应全部采用fp。\n\n## 规则#2\n这条规则适用于字体设置。\n若安卓组件中存在字体集的设置，应将其修改为'HarmonyOS Sans'字体集；\n若安卓组件中不存在字体集的设置，请保持不变。\n\n## 规则#3\n这条规则适用于资源引用。\n对于引用@drawable的资源，请将其修改为media;\n对于引用@color的资源，请将其修改为color;\n对于引用@strings的资源，请将其修改为string;\n对于引用@dimen的资源，请将其修改为float;\n对于引用@array的资源，如果资源是字符串数组，请将其修改为strarray，如果资源是整型数组，请将其修改为intarray。\n\n## 规则#4\n这条规则适用于通用描述的顺序。\n通用描述的顺序应该按照组件的逻辑顺序进行排列，确保描述的完整性和逻辑性。\n每个组件的描述应该包括布局属性、样式和外观、排列和嵌套关系、功能和交互、引用的资源等内容。\n\n## 规则#5\n这条规则适用于通用描述的内容。\n通用描述应该按照组件的嵌套关系进行描述，从外到内逐级描述每个组件的属性、样式和功能。\n请忽略有关主题的描述。\n\n## 规则6\n这条规则适用于功能效果描述。\n功能效果描述应该侧重于页面呈现的效果，包括组件的默认属性和默认行为，而不是具体的代码实现细节。\n例如：安卓复选框是包含文字的，而鸿蒙复选框是不包含文字的，因此在功能效果描述中应该添加复选框右侧文字的描述。\n安卓组件：\n<ChekBox\n    android:id=\"@+id/checkbox\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Check me\" />\n功能效果描述：一个复选框，右侧包含文字“Check me”，整体宽度和高度自适应。\n\n以下是一个可供参考的示例：\n安卓XML示例代码：\n```xml\n<LinearLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    android:padding=\"16dp\"\n    android:background=\"@drawable/custom_background\">\n\n    <TextView\n        android:id=\"@+id/title\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World\"\n        android:textColor=\"@color/primary_text\"\n        android:textSize=\"18sp\" />\n\n    <Button\n        android:id=\"@+id/submit_button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Submit\"\n        android:backgroundTint=\"#FF5722\" />\n</LinearLayout>\n```\n通用描述示例：\n- 垂直线性容器，宽度占满父容器，高度自适应，内边距为16vp，背景引用资源app.media.custom_background。\n    - 文本视图，宽度自适应，高度自适应，文本内容为“Hello World”，文本颜色引用资源app.color.primary_text，字体大小为18fp。\n    - 按钮，宽度自适应，高度自适应，文本内容为“Submit”，背景颜色为#FF5722。\n\n功能效果描述示例：\n实现了一个垂直线性容器，在容器中包含一个文本视图和一个按钮，其中文本视图，高度和宽度自适应，显示“Hello World”，字体颜色引用了 app.color.primary_text 资源，字体大小为18fp；在文本视图的正下方有一个按钮，按钮宽度和高度自适应，按钮显示“Submit”，背景颜色为 #FF5722。\n\n安卓XML代码如下：\n<android.support.design.widget.AppBarLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:theme=\"@style/MyTheme.AppBarOverlay\">\n\n    <include layout=\"@layout/toolbar\" />\n\n</android.support.design.widget.AppBarLayout>\n请根据以上安卓XML代码编写一个通用描述，然后编写这页面实现的功能效果描述。\n\n**重要**：请确保通用描述和功能效果描述的准确性和完整性，确保其他开发者可以根据描述实现相同的布局和功能。\n", "component_description": {"layout_description": "垂直线性容器，宽度占满父容器，高度自适应，主题引用资源app.style.MyTheme.AppBarOverlay。包含一个工具栏，工具栏的布局引用资源app.layout.toolbar。", "function_description": "实现了一个垂直线性容器，容器中包含一个工具栏，工具栏的布局引用了 app.layout.toolbar 资源，整体宽度和高度自适应。"}}}, {"id": "QiDMsRcu8HnRvc8eRTT6W3", "description": "查询组件文档", "subtasks": [{"id": "4yacTAbCsHFHZmEDob3QTi", "description": "生成组件查询", "subtasks": [], "details": {"prompt": "你在一家软件公司工作，你被指派去为将安卓组件转译为鸿蒙ArkUI代码。\n\n\n待转译的安卓组件如下：\n# ['android.support.design.widget.AppBarLayout', 'android.support.v7.widget.Toolbar']\n实现了一个垂直线性容器，容器中包含一个工具栏，工具栏的布局引用了 app.layout.toolbar 资源，整体宽度和高度自适应。\n<android.support.design.widget.AppBarLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:theme=\"@style/MyTheme.AppBarOverlay\">\n\n    <include layout=\"@layout/toolbar\" />\n\n</android.support.design.widget.AppBarLayout>\n\n实现这个需求可能会使用到某些ArkUI组件。\n以下是关于鸿蒙ArkUI API 12的组件基本文档：\n## AlphabetIndexer\n可以与容器组件联动用于按逻辑结构快速定位容器显示区域的组件。\n## Blank\n空白填充组件，在容器主轴方向上，空白填充组件具有自动填充容器空余部分的能力。仅当父组件为Row/Column/Flex时生效。\n## Button\n按钮组件，可快速创建不同样式的按钮。可以包含单个子组件。\n## CalendarPicker\n日历选择器组件，提供下拉日历弹窗，可以让用户选择日期。\n## Checkbox\n提供多选框组件，通常用于某选项的打开或关闭。可以包含Text组件。\n## CheckboxGroup\n多选框群组，用于控制多选框全选或者不全选状态。\n## Component3D\n3D渲染组件，可以加载3D模型资源并做自定义渲染，通常用于3D动效场景。\n## ContainerSpan\nText组件的子组件，用于统一管理多个Span、ImageSpan的背景色及圆角弧度。\n## DataPanel\n数据面板组件，用于将多个数据占比情况使用占比图进行展示。\n## DatePicker\n日期选择器组件，用于根据指定日期范围创建日期滑动选择器。\n## Divider\n提供分隔器组件，分隔不同内容块/内容元素。\n## Gauge\n数据量规图表组件，用于将数据展示为环形图表。\n## Image\n图片组件，常用于在应用中显示图片。Image支持加载PixelMap、ResourceStr和DrawableDescriptor类型的数据源，支持png、jpg、jpeg、bmp、svg、webp、gif和heif类型的图片格式。\n## ImageAnimator\n提供帧动画组件来实现逐帧播放图片的能力，可以配置需要播放的图片列表，每张图片可以配置时长。\n## ImageSpan\nText、ContainerSpan组件的子组件，用于显示行内图片。\n## LoadingProgress\n用于显示加载动效的组件。\n## Marquee\n跑马灯组件，用于滚动展示一段单行文本。仅当文本内容宽度超过跑马灯组件宽度时滚动，不超过时不滚动。\n## Menu\n以垂直列表形式显示的菜单。\n## MenuItem\n用来展示菜单Menu中具体的item菜单项。\n## MenuItemGroup\n该组件用来展示菜单MenuItem的分组。\n## Navigation\nNavigation组件是路由导航的根视图容器，一般作为Page页面的根容器使用，其内部默认包含了标题栏、内容区和工具栏，其中内容区默认首页显示导航内容（Navigation的子组件）或非首页显示（[NavDestination](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navdestination-V5)的子组件），首页和非首页通过路由进行切换。\n## NavRouter\n导航组件，默认提供点击响应处理，不需要开发者自定义点击事件逻辑。\n## NavDestination\n作为子页面的根容器，用于显示Navigation的内容区。\n## NodeContainer\n基础组件，不支持尾随添加子节点。组件接受一个NodeController的实例接口。需要NodeController组合使用。该组件下仅支持挂载自定义节点FrameNode或者是BuilderNode中获取的根节点FrameNode。不支持挂载查询获得的原生系统组件代理节点。\n## PatternLock\n图案密码锁组件，以九宫格图案的方式输入密码，用于密码验证场景。手指在PatternLock组件区域按下时开始进入输入状态，手指离开屏幕时结束输入状态完成密码输入。\n## Progress\n进度条组件，用于显示内容加载或操作处理等进度。\n## QRCode\n用于显示单个二维码的组件。\n## Radio\n单选框，提供相应的用户交互选择项。\n## Rating\n提供在给定范围内选择评分的组件。Rating组件的接口，用于设置评分值和是否作为指示器使用。\n## RichEditor\n支持图文混排和文本交互式编辑的组件。\n## RichText\n富文本组件，解析并显示HTML格式文本。\n## ScrollBar\n滚动条组件ScrollBar，用于配合可滚动组件使用，如List、Grid、Scroll。\n## Search\n搜索框组件，适用于浏览器的搜索内容输入框等应用场景。可以包含单个子组件。\n## Select\n提供下拉选择菜单，可以让用户在多个选项之间选择。可以包含单个子组件。\n## Slider\n滑动条组件，通常用于快速调节设置值，如音量调节、亮度调节等应用场景。\n## Span\n作为Text、ContainerSpan组件的子组件，用于显示行内文本的组件。\n## Stepper\n步骤导航器组件，适用于引导用户按照步骤完成任务的导航场景。\n## StepperItem\n用作Stepper组件的页面子组件。\n## SymbolSpan\n作为Text组件的子组件，用于显示图标小符号的组件。\n## SymbolGlyph\n显示图标小符号的组件。\n## Text\n显示一段文本的组件，可以包含Span、ImageSpan、SymbolSpan和ContainerSpan子组件。\n## TextArea\n多行文本输入框组件，当输入的文本内容超过组件宽度时会自动换行显示。\n## TextClock\nTextClock组件通过文本将当前系统时间显示在设备上。支持不同时区的时间显示，最高精度到秒级。\n## TextPicker\n根据range指定的选择范围创建文本选择器。\n## TextTimer\n通过文本显示计时信息并控制其计时器状态的组件。\n## TimePicker\n时间选择组件，根据指定参数创建选择器，支持选择小时及分钟。\n## Toggle\n组件提供勾选框样式、状态按钮样式及开关样式。\n## TextInput\n单行文本输入框组件。\n## XComponent\n可用于EGL/OpenGLES和媒体数据写入，并显示在XComponent组件。\n## Canvas\n提供画布组件，用于自定义绘制图形。\n## CanvasGradient\n渐变对象。\n## CanvasPattern\n一个Object对象，使用createPattern方法创建，通过指定图像和重复方式创建图片填充的模板。\n## DrawingRenderingContext\n使用DrawingRenderingContext在Canvas组件上进行绘制，绘制对象可以是矩形、文本、图片等。\n## ImageBitmap\nImageBitmap对象可以存储canvas渲染的像素数据。\n## ImageData\nImageData对象可以存储canvas渲染的像素数据。\n## Matrix2D\n矩阵对象，可以对矩阵进行缩放、旋转、平移等变换。\n## OffscreenCanvas\nOffscreenCanvas组件用于自定义绘制图形，可以在屏幕外渲染的画布，避免影响应用程序主线程性能。\n## OffscreenCanvasRenderingContext2D\n使用OffscreenCanvasRenderingContext2D在Canvas上进行离屏绘制，绘制对象可以是矩形、文本、图片等。离屏绘制是指将需要绘制的内容先绘制在缓存区，然后将其转换成图片，一次性绘制到canvas上，加快了绘制速度。\n## Path2D\n路径对象，支持通过对象的接口进行路径的描述，并通过Canvas的stroke接口或者fill接口进行绘制。\n## Badge\n可以附加在单个组件上用于信息标记的容器组件。\n## Column\n沿垂直方向布局的容器组件，可以包含子组件。\n## ColumnSplit\n将子组件纵向布局，并在每个子组件之间插入一根横向的分割线。\n## Counter\n计数器组件，提供相应的增加或者减少的计数操作。\n## EmbeddedComponent\n用于支持在当前页面嵌入本应用内其他EmbeddedUIExtensionAbility提供的UI。EmbeddedUIExtensionAbility在独立进程中运行，完成页面布局和渲染。通常用于有进程隔离诉求的模块化开发场景。\n## Flex\n以弹性方式布局子组件的容器组件。\n## GridCol\n栅格子组件，必须作为栅格容器组件(GridRow)的子组件使用。可以包含单个子组件。\n## GridRow\n栅格容器组件，仅可以和栅格子组件(GridCol)在栅格布局场景中使用。\n## Grid\n网格容器，由“行”和“列”分割的单元格所组成，通过指定“项目”所在的单元格做出各种各样的布局。\n## GridItem\n网格容器中单项内容容器，仅支持作为Grid组件的子组件使用。\n## List\n列表包含一系列相同宽度的列表项。适合连续、多行呈现同类数据，例如图片和文本。可以包含ListItem、ListItemGroup子组件，支持渲染控制类型（if/else、ForEach、LazyForEach和Repeat）。\n## ListItem\n用来展示列表具体item，必须配合List来使用。\n## ListItemGroup\n该组件用来展示列表item分组，宽度默认充满List组件，必须配合List组件来使用。\n## RelativeContainer\n相对布局组件，用于复杂场景中元素对齐的布局。\n## Row\n沿水平方向布局容器，可以包含子组件。\n## Scroll\n可滚动的容器组件，当子组件的布局尺寸超过父组件的尺寸时，内容可以滚动，支持单个子组件。\n## Stack\n堆叠容器，子组件按照顺序依次入栈，后一个子组件覆盖前一个子组件。可以包含多个子组件。\n## Tabs\n通过页签进行内容视图切换的容器组件，每个页签对应一个内容视图，不支持自定义组件作为子组件， 仅可包含子组件TabContent。\n## TabContent\n仅在Tabs中使用，对应一个切换页签的内容视图，支持单个子组件。\n## WaterFlow\n瀑布流容器，由“行”和“列”分割的单元格所组成，通过容器自身的排列规则，将不同大小的“项目”自上而下，如瀑布般紧密布局。\n## WithTheme\nWithTheme组件用于设置应用局部页面自定义主题风格，可设置子组件深浅色模式和自定义配色。\n## Circle\n用于绘制圆形的组件。\n## Ellipse\n椭圆绘制组件。\n## Line\n直线绘制组件。\n## Polyline\n折线绘制组件。\n## Polygon\n多边形绘制组件。\n## Path\n路径绘制组件，根据绘制路径生成封闭的自定义形状。\n## Rect\n绘制组件的父组件，实现类似SVG的效果。绘制组件单独使用，用于在页面上绘制指定的图形。\n## Shape\n矩形绘制组件。\n## AlertDialog\n显示警告弹窗组件，可设置文本内容与响应回调。\n## ActionSheet\n列表选择弹窗 (ActionSheet) 是一个全局UI方法，属于ArkTS组件，用于在ArkUI（方舟UI框架）中显示一个带有多个选项的弹窗。\n## CustomDialog\n通过CustomDialogController类显示自定义弹窗。使用弹窗组件时，可优先考虑自定义弹窗，便于自定义弹窗的样式与内容。\n## CalendarPickerDialog\n点击日期弹出日历选择器弹窗，可选择弹窗内任意日期。\n## DatePickerDialog\n日期滑动选择器弹窗，用于在弹窗上展示日期选择器。\n## TimePickerDialog\n时间滑动选择器弹窗 (TimePickerDialog) 是一个全局UI方法，用于以24小时的时间区间创建时间滑动选择器，并展示在弹窗上。\n## TextPickerDialog\n文本滑动选择器弹窗，用于在指定的选择范围内创建文本选择器并展示在弹窗上。\n## Video\n用于播放视频文件并控制其播放状态的组件。\n## LocationButton\n安全控件的位置控件，用户通过点击该位置按钮，可以临时获取精准定位权限，而不需要权限弹框授权确认。\n## PasteButton\n安全控件的粘贴按钮，用户通过点击该粘贴按钮，可以临时获取读取剪贴板权限。\n## SaveButton\n安全控件的保存控件，用户通过点击该保存按钮，可以临时获取存储权限，而不需要权限弹框授权确认。\n## ChipGroup\nChipGroup高级组件，提供操作块群组，用于对文件或者资源内容进行分类等场景。\n## Chip\n操作块组件，用于搜索框历史记录或者邮件发送列表等场景。\n## ToolBar\n工具栏用于展示针对当前界面内容的操作选项，在界面底部显示。底部最多显示5个入口，超过则收纳入“更多”子项中，在最右侧显示。\n## ComposeTitleBar\n一种普通标题栏，支持设置标题、头像（可选）和副标题（可选），可用于一级页面、二级及其以上界面配置返回键。\n\n\n\n在开始任务之前，你需要对待转译的安卓组件进行分析，以便选择合适的ArkUI组件来实现相同的功能。\n然后，你需要从上述ArkUI组件中选择一个或多个组件，使其能够实现上述安卓组件的功能，并保持布局和样式尽可能一致。\n对于无法直接转译的安卓组件，你可以通过组合多个ArkUI组件来实现，一定不能选择不存在的组件。\n在完成选择后，你需要编写一条或多条用于在知识库或RAG系统中检索的查询语句。每条查询应聚焦于不同的功能细节或组件的具体属性，帮助快速、精确地检索到相关的文档、代码示例或实现方法。\n**重要**：你只能从[AlphabetIndexer, Blank, Button, CalendarPicker, Checkbox, CheckboxGroup, Component3D, ContainerSpan, DataPanel, DatePicker, Divider, Gauge, Image, ImageAnimator, ImageSpan, LoadingProgress, Marquee, Menu, MenuItem, MenuItemGroup, Navigation, NavRouter, NavDestination, NodeContainer, PatternLock, Progress, QRCode, Radio, Rating, RichEditor, RichText, ScrollBar, Search, Select, Slider, Span, Stepper, StepperItem, SymbolSpan, SymbolGlyph, Text, TextArea, TextClock, TextPicker, TextTimer, TimePicker, Toggle, TextInput, XComponent, Canvas, CanvasGradient, CanvasPattern, DrawingRenderingContext, ImageBitmap, ImageData, Matrix2D, OffscreenCanvas, OffscreenCanvasRenderingContext2D, Path2D, Badge, Column, ColumnSplit, Counter, EmbeddedComponent, Flex, GridCol, GridRow, Grid, GridItem, List, ListItem, ListItemGroup, RelativeContainer, Row, Scroll, Stack, Tabs, TabContent, WaterFlow, WithTheme, Circle, Ellipse, Line, Polyline, Polygon, Path, Rect, Shape, AlertDialog, ActionSheet, CustomDialog, CalendarPickerDialog, DatePickerDialog, TimePickerDialog, TextPickerDialog, Video, LocationButton, PasteButton, SaveButton, ChipGroup, Chip, ToolBar, ComposeTitleBar]中选择ArkUI组件，请你认真检查，一定不可以选择不存在的ArkUI组件。\n**重要**：查询语句需要涵盖以下方面：布局属性（如宽度、高度、边距等）、组件的样式和外观（如颜色、字体、透明度等）、组件的排列和嵌套关系（如垂直或水平布局、对齐方式）、组件的功能和交互（如点击事件、输入验证），确保每条查询简洁明了且仅聚焦单一方面，突出关键信息，以便加快内容检索过程。\n\n## 以下是选择组件的额外规则：\n* 规则1：待转译的安卓布局文件中存在属性layout_constraintXXX_toXXXOf，其中XXX为Start、End、Top、Bottom等，你应该额外选择鸿蒙ArkUI的RelativeContainer组件。\n* 规则2：当使用com.google.android.material.appbar.AppBarLayout与androidx.appcompat.widget.Toolbar实现标题栏时，你应该选择Row、Text、Image等组件来实现标题栏，需要注意鸿蒙组件的Toolbar特指底部导航栏而非安卓中的标题栏。\n* 规则3：Scroll组件的子组件通常采用Column或Row组件，你应该根据滚动的方向来选择，当滚动方向为垂直时，应该选择Column组件，当滚动方向为水平时，应该选择Row组件。\n\n以下是一个示例：\n安卓组件：EditText\n<EditText\nandroid:id=\"@+id/et_1\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"50dp\"\nandroid:layout_marginBottom=\"15dp\"\nandroid:autofillHints=\"\"\nandroid:hint=\"请输入文字\"\nandroid:inputType=\"text\"\nandroid:paddingLeft=\"15dp\"\nandroid:paddingRight=\"15dp\"\nandroid:textColor=\"@color/black\"\nandroid:textSize=\"16sp\" />\n回答：\n```json\n{\n    \"components\": [\"TextInput\"],\n    \"queries\": [\n        {\n            \"queries\": [\"设置输入框的高度\", \"设置输入框的宽度\", \"设置输入框的底部边距\", \"设置输入框的提示文本\", \"设置输入框的输入类型\", \"设置输入框的左内边距\", \"设置输入框的右内边距\", \"设置输入框的文本颜色\", \"设置输入框的字体大小\"],\n            \"component\": \"TextInput\",\n        },\n    ],\n    \"idea\": \"可以选择TextInput组件来实现EditText组件的功能，设置TextInput组件的属性来实现EditText组件的样式和功能。\"\n}\n```", "component_query": {"components": ["Column", "Toolbar"], "queries": [{"component": "Column", "queries": ["设置容器的宽度为自适应", "设置容器的高度为自适应", "设置容器的垂直布局"]}, {"component": "Toolbar", "queries": ["设置工具栏的布局引用", "设置工具栏的样式和外观", "设置工具栏的排列和嵌套关系"]}], "idea": "使用Column组件作为垂直线性容器，Toolbar组件作为工具栏，通过设置Column的宽度和高度为自适应来实现整体布局的自适应。Toolbar组件用于引用和展示工具栏的布局和样式。"}}}, {"id": "PrzoDkVHpKM4ULWT3pSbDt", "description": "修正组件查询", "subtasks": [], "details": {"component_query": {"components": ["Column"], "queries": [{"component": "Column", "queries": ["设置容器的宽度为自适应", "设置容器的高度为自适应", "设置容器的垂直布局"]}], "idea": "使用Column组件作为垂直线性容器，Toolbar组件作为工具栏，通过设置Column的宽度和高度为自适应来实现整体布局的自适应。Toolbar组件用于引用和展示工具栏的布局和样式。"}, "corrected_component_query": {"components": ["Column"], "queries": [{"component": "Column", "queries": ["设置容器的宽度为自适应", "设置容器的高度为自适应", "设置容器的垂直布局"]}], "idea": "使用Column组件作为垂直线性容器，Toolbar组件作为工具栏，通过设置Column的宽度和高度为自适应来实现整体布局的自适应。Toolbar组件用于引用和展示工具栏的布局和样式。"}}}, {"id": "jB3vTm2gqmAEFYz3Ruiv5K", "description": "查询示例文档", "subtasks": [], "details": {"query": "实现了一个垂直线性容器，容器中包含一个工具栏，工具栏的布局引用了 app.layout.toolbar 资源，整体宽度和高度自适应。", "k": 3, "component_name": ["Column"], "score_threshold": 0.6, "example_knowledge_results": [], "component_examples": {}}}, {"id": "LmmqS73peSuZRsytounEwv", "description": "查询组件文档", "subtasks": [{"id": "ExYyTwDJKzRi3EUfsFN28j", "description": "依次从知识库中查询每个组件的相关属性、事件文档", "subtasks": [{"id": "7P2dZif7dme6saUhDBGSMR", "description": "查询组件Column的相关属性、事件文档", "subtasks": [], "details": {"query": ["设置容器的宽度为自适应", "设置容器的高度为自适应", "设置容器的垂直布局"], "n_results": 10, "query_results": {"ids": [["d9f81a84-dcc9-42e7-bf00-40f59725f621", "0312e8d6-efb1-4896-8129-462ef1bc3395", "4a6a9493-af1d-4b71-ac93-e005d4b79b23", "33ea25aa-cac4-4f85-b3b7-f1b9a5bac825", "f12a099d-8fd6-4be6-b7fd-85791b7fa4e3", "7af90bc2-8846-435b-a7d0-4afe96092763", "04d98ac5-e176-4e46-a0e0-7cf93182d0c7", "d82cc3ce-d0d6-419c-bf57-9ab4f36ea11d", "91a5fea0-4a01-4fa8-ad43-db72f51f3ed5", "157f1cf5-e965-4c6d-a3b0-dbb179036b13"], ["33ea25aa-cac4-4f85-b3b7-f1b9a5bac825", "0312e8d6-efb1-4896-8129-462ef1bc3395", "b28478cc-39e7-47f6-a8d5-1be66cd8fd1b", "04d98ac5-e176-4e46-a0e0-7cf93182d0c7", "f12a099d-8fd6-4be6-b7fd-85791b7fa4e3", "d9f81a84-dcc9-42e7-bf00-40f59725f621", "4a6a9493-af1d-4b71-ac93-e005d4b79b23", "7e3f294e-c5e5-4d5a-a48a-cf1975ee67ee", "91a5fea0-4a01-4fa8-ad43-db72f51f3ed5", "d82cc3ce-d0d6-419c-bf57-9ab4f36ea11d"], ["d82cc3ce-d0d6-419c-bf57-9ab4f36ea11d", "04d98ac5-e176-4e46-a0e0-7cf93182d0c7", "33ea25aa-cac4-4f85-b3b7-f1b9a5bac825", "09af9fd0-9440-4136-8bbf-9835ad3e65e8", "4a6a9493-af1d-4b71-ac93-e005d4b79b23", "d9f81a84-dcc9-42e7-bf00-40f59725f621", "b6443713-fdd1-4b76-b02a-276d24cc6f59", "91a5fea0-4a01-4fa8-ad43-db72f51f3ed5", "f12a099d-8fd6-4be6-b7fd-85791b7fa4e3", "0312e8d6-efb1-4896-8129-462ef1bc3395"]], "distances": [[0.36066311597824097, 0.3691401481628418, 0.3786763548851013, 0.38181406259536743, 0.38673436641693115, 0.39763838052749634, 0.4084858298301697, 0.4251049757003784, 0.43105393648147583, 0.4351094961166382], [0.38817793130874634, 0.3910749554634094, 0.39172089099884033, 0.3993312120437622, 0.4055737853050232, 0.4074512720108032, 0.410968542098999, 0.42269593477249146, 0.43384408950805664, 0.44051575660705566], [0.3229793906211853, 0.3506190776824951, 0.35431206226348877, 0.39744752645492554, 0.4012276530265808, 0.4035184383392334, 0.4036374092102051, 0.4051681160926819, 0.40780311822891235, 0.41530823707580566]], "metadatas": [[{"component_name": "Column", "name": "flexShrink", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexBasis", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexGrow", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "width", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "size", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "Column", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexBasis", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "height", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexShrink", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexGrow", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "lineHeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "Column", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "justifyContent", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexGrow", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexShrink", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexBasis", "source": "harmony-component-doc", "type": "attribute"}]], "embeddings": null, "documents": [["设置父容器压缩尺寸分配给此属性所在组件的比例。当父容器为Column、Row时，需设置主轴方向的尺寸。\n属性名称：flexShrink\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器压缩尺寸分配给此属性所在组件的比例。\",\"default\":0}}\n", "设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n", "设置组件在父容器的剩余空间所占比例。\n属性名称：flexGrow\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器在主轴方向上的剩余空间分配给此属性所在组件的比例。\",\"default\":0}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "设置组件自身的宽度，缺省时使用元素自身内容需要的宽度。若子组件的宽大于父组件的宽，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：width\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件宽度。单位：vp\",\"default\":null}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", "设置高宽尺寸。从API version 10开始，该接口支持calc计算特性。\n属性名称：size\n属性参数：{'value': {\"type\":\"SizeOptions\",\"required\":true,\"description\":\"要设置的高宽尺寸。\",\"default\":null}}\n"], ["指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n", "设置组件自身的高度，缺省时使用元素自身内容需要的高度。若子组件的高大于父组件的高，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：height\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件高度。单位：vp\",\"default\":null}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "设置父容器压缩尺寸分配给此属性所在组件的比例。当父容器为Column、Row时，需设置主轴方向的尺寸。\n属性名称：flexShrink\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器压缩尺寸分配给此属性所在组件的比例。\",\"default\":0}}\n", "设置组件在父容器的剩余空间所占比例。\n属性名称：flexGrow\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器在主轴方向上的剩余空间分配给此属性所在组件的比例。\",\"default\":0}}\n", "设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小。\n属性名称：lineHeight\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本行高，为number类型时单位为fp。\",\"default\":null}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n"], ["设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "设置子组件在垂直方向上的对齐格式。\n属性名称：justifyContent\n属性参数：{'value': {\"type\":\"FlexAlign\",\"required\":true,\"description\":\"子组件在垂直方向上的对齐格式。\",\"default\":\"FlexAlign.Start\"}}\n", "设置组件在父容器的剩余空间所占比例。\n属性名称：flexGrow\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器在主轴方向上的剩余空间分配给此属性所在组件的比例。\",\"default\":0}}\n", "设置父容器压缩尺寸分配给此属性所在组件的比例。当父容器为Column、Row时，需设置主轴方向的尺寸。\n属性名称：flexShrink\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器压缩尺寸分配给此属性所在组件的比例。\",\"default\":0}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n"]], "uris": null, "data": null, "included": ["metadatas", "documents", "distances"]}}}], "details": null}, {"id": "g25F7Ag4pbU3zTpGZhP2mU", "description": "过滤低于阈值的查询结果", "subtasks": [{"id": "BcVie29ZiiSmQVSBgp7CQg", "description": "过滤低于阈值的查询结果: 设置容器的宽度为自适应", "subtasks": [], "details": {"query": "设置容器的宽度为自适应", "result_ids": ["d9f81a84-dcc9-42e7-bf00-40f59725f621", "0312e8d6-efb1-4896-8129-462ef1bc3395", "4a6a9493-af1d-4b71-ac93-e005d4b79b23", "33ea25aa-cac4-4f85-b3b7-f1b9a5bac825", "f12a099d-8fd6-4be6-b7fd-85791b7fa4e3", "7af90bc2-8846-435b-a7d0-4afe96092763", "04d98ac5-e176-4e46-a0e0-7cf93182d0c7", "d82cc3ce-d0d6-419c-bf57-9ab4f36ea11d", "91a5fea0-4a01-4fa8-ad43-db72f51f3ed5", "157f1cf5-e965-4c6d-a3b0-dbb179036b13"], "result_documents": ["设置父容器压缩尺寸分配给此属性所在组件的比例。当父容器为Column、Row时，需设置主轴方向的尺寸。\n属性名称：flexShrink\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器压缩尺寸分配给此属性所在组件的比例。\",\"default\":0}}\n", "设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n", "设置组件在父容器的剩余空间所占比例。\n属性名称：flexGrow\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器在主轴方向上的剩余空间分配给此属性所在组件的比例。\",\"default\":0}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "设置组件自身的宽度，缺省时使用元素自身内容需要的宽度。若子组件的宽大于父组件的宽，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：width\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件宽度。单位：vp\",\"default\":null}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", "设置高宽尺寸。从API version 10开始，该接口支持calc计算特性。\n属性名称：size\n属性参数：{'value': {\"type\":\"SizeOptions\",\"required\":true,\"description\":\"要设置的高宽尺寸。\",\"default\":null}}\n"], "result_metadatas": [{"component_name": "Column", "name": "flexShrink", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexBasis", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexGrow", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "width", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "size", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.36066311597824097, 0.3691401481628418, 0.3786763548851013, 0.38181406259536743, 0.38673436641693115, 0.39763838052749634, 0.4084858298301697, 0.4251049757003784, 0.43105393648147583, 0.4351094961166382], "threshold": 0.6, "query_text_results": [["设置父容器压缩尺寸分配给此属性所在组件的比例。当父容器为Column、Row时，需设置主轴方向的尺寸。\n属性名称：flexShrink\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器压缩尺寸分配给此属性所在组件的比例。\",\"default\":0}}\n", {"component_name": "Column", "name": "flexShrink", "source": "harmony-component-doc", "type": "attribute"}, 0.639336884021759], ["设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n", {"component_name": "Column", "name": "flexBasis", "source": "harmony-component-doc", "type": "attribute"}, 0.6308598518371582], ["设置组件在父容器的剩余空间所占比例。\n属性名称：flexGrow\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器在主轴方向上的剩余空间分配给此属性所在组件的比例。\",\"default\":0}}\n", {"component_name": "Column", "name": "flexGrow", "source": "harmony-component-doc", "type": "attribute"}, 0.6213236451148987], ["指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", {"component_name": "Column", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, 0.6181859374046326], ["对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", {"component_name": "Column", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, 0.6132656335830688], ["设置组件自身的宽度，缺省时使用元素自身内容需要的宽度。若子组件的宽大于父组件的宽，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：width\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件宽度。单位：vp\",\"default\":null}}\n", {"component_name": "Column", "name": "width", "source": "harmony-component-doc", "type": "attribute"}, 0.6023616194725037]]}}, {"id": "kpDaiKZLwEW2ZGi8fUepW2", "description": "过滤低于阈值的查询结果: 设置容器的高度为自适应", "subtasks": [], "details": {"query": "设置容器的高度为自适应", "result_ids": ["33ea25aa-cac4-4f85-b3b7-f1b9a5bac825", "0312e8d6-efb1-4896-8129-462ef1bc3395", "b28478cc-39e7-47f6-a8d5-1be66cd8fd1b", "04d98ac5-e176-4e46-a0e0-7cf93182d0c7", "f12a099d-8fd6-4be6-b7fd-85791b7fa4e3", "d9f81a84-dcc9-42e7-bf00-40f59725f621", "4a6a9493-af1d-4b71-ac93-e005d4b79b23", "7e3f294e-c5e5-4d5a-a48a-cf1975ee67ee", "91a5fea0-4a01-4fa8-ad43-db72f51f3ed5", "d82cc3ce-d0d6-419c-bf57-9ab4f36ea11d"], "result_documents": ["指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n", "设置组件自身的高度，缺省时使用元素自身内容需要的高度。若子组件的高大于父组件的高，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：height\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件高度。单位：vp\",\"default\":null}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "设置父容器压缩尺寸分配给此属性所在组件的比例。当父容器为Column、Row时，需设置主轴方向的尺寸。\n属性名称：flexShrink\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器压缩尺寸分配给此属性所在组件的比例。\",\"default\":0}}\n", "设置组件在父容器的剩余空间所占比例。\n属性名称：flexGrow\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器在主轴方向上的剩余空间分配给此属性所在组件的比例。\",\"default\":0}}\n", "设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小。\n属性名称：lineHeight\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本行高，为number类型时单位为fp。\",\"default\":null}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n"], "result_metadatas": [{"component_name": "Column", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexBasis", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "height", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexShrink", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexGrow", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "lineHeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.38817793130874634, 0.3910749554634094, 0.39172089099884033, 0.3993312120437622, 0.4055737853050232, 0.4074512720108032, 0.410968542098999, 0.42269593477249146, 0.43384408950805664, 0.44051575660705566], "threshold": 0.6, "query_text_results": [["设置组件自身的高度，缺省时使用元素自身内容需要的高度。若子组件的高大于父组件的高，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：height\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件高度。单位：vp\",\"default\":null}}\n", {"component_name": "Column", "name": "height", "source": "harmony-component-doc", "type": "attribute"}, 0.6082791090011597], ["设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", {"component_name": "Column", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, 0.6006687879562378]]}}, {"id": "RJNDdkZeSqXGQ6wdq3icUo", "description": "过滤低于阈值的查询结果: 设置容器的垂直布局", "subtasks": [], "details": {"query": "设置容器的垂直布局", "result_ids": ["d82cc3ce-d0d6-419c-bf57-9ab4f36ea11d", "04d98ac5-e176-4e46-a0e0-7cf93182d0c7", "33ea25aa-cac4-4f85-b3b7-f1b9a5bac825", "09af9fd0-9440-4136-8bbf-9835ad3e65e8", "4a6a9493-af1d-4b71-ac93-e005d4b79b23", "d9f81a84-dcc9-42e7-bf00-40f59725f621", "b6443713-fdd1-4b76-b02a-276d24cc6f59", "91a5fea0-4a01-4fa8-ad43-db72f51f3ed5", "f12a099d-8fd6-4be6-b7fd-85791b7fa4e3", "0312e8d6-efb1-4896-8129-462ef1bc3395"], "result_documents": ["设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "设置子组件在垂直方向上的对齐格式。\n属性名称：justifyContent\n属性参数：{'value': {\"type\":\"FlexAlign\",\"required\":true,\"description\":\"子组件在垂直方向上的对齐格式。\",\"default\":\"FlexAlign.Start\"}}\n", "设置组件在父容器的剩余空间所占比例。\n属性名称：flexGrow\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器在主轴方向上的剩余空间分配给此属性所在组件的比例。\",\"default\":0}}\n", "设置父容器压缩尺寸分配给此属性所在组件的比例。当父容器为Column、Row时，需设置主轴方向的尺寸。\n属性名称：flexShrink\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器压缩尺寸分配给此属性所在组件的比例。\",\"default\":0}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n"], "result_metadatas": [{"component_name": "Column", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "justifyContent", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexGrow", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexShrink", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexBasis", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.3229793906211853, 0.3506190776824951, 0.35431206226348877, 0.39744752645492554, 0.4012276530265808, 0.4035184383392334, 0.4036374092102051, 0.4051681160926819, 0.40780311822891235, 0.41530823707580566], "threshold": 0.6, "query_text_results": [["设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", {"component_name": "Column", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, 0.6770206093788147], ["设置子组件在垂直方向上的对齐格式。\n属性名称：justifyContent\n属性参数：{'value': {\"type\":\"FlexAlign\",\"required\":true,\"description\":\"子组件在垂直方向上的对齐格式。\",\"default\":\"FlexAlign.Start\"}}\n", {"component_name": "Column", "name": "justifyContent", "source": "harmony-component-doc", "type": "attribute"}, 0.6025524735450745]]}}], "details": null}], "details": null}, {"id": "BsqVsH4LooDnNb6bptcL9a", "description": "生成组件文档", "subtasks": [], "details": {"component_documents": ["# Column\n接口描述：Column(value?: {space?: string | number})\n接口参数：{'space': {\"type\":[\"string\",\"number\"],\"required\":false,\"description\":\"纵向布局元素垂直方向间距。从API version 9开始，space为负数或者justifyContent设置为FlexAlign.SpaceBetween、FlexAlign.SpaceAround、FlexAlign.SpaceEvenly时不生效。\",\"default\":0}}\n设置父容器压缩尺寸分配给此属性所在组件的比例。当父容器为Column、Row时，需设置主轴方向的尺寸。\n属性名称：flexShrink\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器压缩尺寸分配给此属性所在组件的比例。\",\"default\":0}}\n设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n设置组件在父容器的剩余空间所占比例。\n属性名称：flexGrow\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器在主轴方向上的剩余空间分配给此属性所在组件的比例。\",\"default\":0}}\n指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n设置组件自身的宽度，缺省时使用元素自身内容需要的宽度。若子组件的宽大于父组件的宽，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：width\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件宽度。单位：vp\",\"default\":null}}\n设置组件自身的高度，缺省时使用元素自身内容需要的高度。若子组件的高大于父组件的高，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：height\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件高度。单位：vp\",\"default\":null}}\n设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n设置子组件在垂直方向上的对齐格式。\n属性名称：justifyContent\n属性参数：{'value': {\"type\":\"FlexAlign\",\"required\":true,\"description\":\"子组件在垂直方向上的对齐格式。\",\"default\":\"FlexAlign.Start\"}}\n"], "related_types": {"Direction": {"description": "布局方向。", "type": "enum", "enum": ["Ltr", "Rtl", "Auto"], "enumDescriptions": {"Ltr": "元素从左到右布局。", "Rtl": "元素从右到左布局。", "Auto": "使用系统默认布局方向。"}, "examples": null}, "Length": {"description": "长度类型，用于描述尺寸单位。\n* string：需要显式指定像素单位，如'10px'，或百分比字符串，如'100%'。\n* number：默认单位为vp。\n* Resource：资源引用类型，引入系统或应用资源中的尺寸。", "type": ["string", "number", "Resource"], "enum": null, "enumDescriptions": null, "examples": null}, "Resource": {"description": "资源引用类型，用于设置组件属性的值。可以通过$r或者$rawfile创建Resource类型对象，不可以修改Resource中的各属性的值。", "type": "Resource", "enum": null, "enumDescriptions": null, "examples": ["```ets\n// belonging：系统资源或者应用资源，相应的取值为'sys'和'app'；\n// type：资源类型，支持'boolean'、'color'、'float'、'intarray'、'integer'、'pattern'、'plural'、'strarray'、'string'、'media'；\n// name：资源名称，在资源定义时确定。\n$r('belonging.type.name')\n```", "```ets\n// filename：工程中resources/rawfile目录下的文件名称。\n$rawfile('filename')\n```"]}}}}, {"id": "FewNohfXdo64HA9XUVVUvp", "description": "生成类型文档", "subtasks": [], "details": {"type_documents": ["枚举类型名：Direction\n枚举类型描述：布局方向。\n枚举值：['Ltr', 'Rtl', 'Auto']\n枚举值描述：\n* Ltr: 元素从左到右布局。\n* Rtl: 元素从右到左布局。\n* Auto: 使用系统默认布局方向。\n\n", "类型名：Length\n类型描述：长度类型，用于描述尺寸单位。\n* string：需要显式指定像素单位，如'10px'，或百分比字符串，如'100%'。\n* number：默认单位为vp。\n* Resource：资源引用类型，引入系统或应用资源中的尺寸。\n类型：['string', 'number', 'Resource']\n", "类型名：Resource\n类型描述：资源引用类型，用于设置组件属性的值。可以通过$r或者$rawfile创建Resource类型对象，不可以修改Resource中的各属性的值。\n类型：Resource\n类型Resource示例：\n```ets\n// belonging：系统资源或者应用资源，相应的取值为'sys'和'app'；\n// type：资源类型，支持'boolean'、'color'、'float'、'intarray'、'integer'、'pattern'、'plural'、'strarray'、'string'、'media'；\n// name：资源名称，在资源定义时确定。\n$r('belonging.type.name')\n```\n类型Resource示例：\n```ets\n// filename：工程中resources/rawfile目录下的文件名称。\n$rawfile('filename')\n```\n"]}}], "details": {"android_component": {"name": ["android.support.design.widget.AppBarLayout", "android.support.v7.widget.Toolbar"], "content": "<android.support.design.widget.AppBarLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:theme=\"@style/MyTheme.AppBarOverlay\">\n\n    <include layout=\"@layout/toolbar\" />\n\n</android.support.design.widget.AppBarLayout>", "layout_description": "垂直线性容器，宽度占满父容器，高度自适应，主题引用资源app.style.MyTheme.AppBarOverlay。包含一个工具栏，工具栏的布局引用资源app.layout.toolbar。", "function_description": "实现了一个垂直线性容器，容器中包含一个工具栏，工具栏的布局引用了 app.layout.toolbar 资源，整体宽度和高度自适应。"}}}, {"id": "3qpMLGcXkpHRFTRrBQ4CxX", "description": "后处理鸿蒙组件代码", "subtasks": [], "details": {"harmony_component_code": "Column() {\n  Toolbar()\n    .width('100%')\n    .height('auto')\n    .theme($r('app.style.MyTheme.AppBarOverlay'))\n    .include($r('app.layout.toolbar'))\n}\n.width('100%')\n.height('auto')"}}], "details": null}, {"id": "h5NhuSaDKPLZhck92vrBsd", "description": "根据转译表转译组件v1", "subtasks": [{"id": "CwBgAhtjj9fgJ58pGmR59R", "description": "生成组件描述", "subtasks": [], "details": {"prompt": "请根据以下安卓XML代码编写一个详细的通用描述和功能描述，供其他开发框架如iOS或鸿蒙的开发者实现同样的布局样式。描述应包含以下内容：\n\n布局属性：包括组件的宽度、高度、边距、填充、对齐方式等。\n组件样式和外观：包括颜色、字体、透明度、圆角等。\n组件排列和嵌套关系：例如垂直或水平布局、组件之间的对齐方式、父子关系。\n组件功能和交互：例如按钮的点击事件、输入框的输入验证逻辑等。\n引用的资源：如自定义的背景图片、颜色等，请指出资源路径或名称。\n请避免使用安卓特有的术语，而是使用通用的描述语言，确保其他框架的开发者可以理解并实现同样的布局和功能，例如：match_parent描述为占满父容器的宽度。同时，请确保描述涵盖每个组件的属性、样式和功能。\n\n你在编写通用描述和功能描述时，需要遵守以下规则：\n## 规则#1\n这条规则适用于所有组件的宽度、高度、外边距、内边距、字体大小等属性的单位。\n对于高度、宽度、外边距、内边距等等属性的单位应全部采用vp；\n对于字体大小等属性的单位应全部采用fp。\n\n## 规则#2\n这条规则适用于字体设置。\n若安卓组件中存在字体集的设置，应将其修改为'HarmonyOS Sans'字体集；\n若安卓组件中不存在字体集的设置，请保持不变。\n\n## 规则#3\n这条规则适用于资源引用。\n对于引用@drawable的资源，请将其修改为media;\n对于引用@color的资源，请将其修改为color;\n对于引用@strings的资源，请将其修改为string;\n对于引用@dimen的资源，请将其修改为float;\n对于引用@array的资源，如果资源是字符串数组，请将其修改为strarray，如果资源是整型数组，请将其修改为intarray。\n\n## 规则#4\n这条规则适用于通用描述的顺序。\n通用描述的顺序应该按照组件的逻辑顺序进行排列，确保描述的完整性和逻辑性。\n每个组件的描述应该包括布局属性、样式和外观、排列和嵌套关系、功能和交互、引用的资源等内容。\n\n## 规则#5\n这条规则适用于通用描述的内容。\n通用描述应该按照组件的嵌套关系进行描述，从外到内逐级描述每个组件的属性、样式和功能。\n请忽略有关主题的描述。\n\n## 规则6\n这条规则适用于功能效果描述。\n功能效果描述应该侧重于页面呈现的效果，包括组件的默认属性和默认行为，而不是具体的代码实现细节。\n例如：安卓复选框是包含文字的，而鸿蒙复选框是不包含文字的，因此在功能效果描述中应该添加复选框右侧文字的描述。\n安卓组件：\n<ChekBox\n    android:id=\"@+id/checkbox\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Check me\" />\n功能效果描述：一个复选框，右侧包含文字“Check me”，整体宽度和高度自适应。\n\n以下是一个可供参考的示例：\n安卓XML示例代码：\n```xml\n<LinearLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    android:padding=\"16dp\"\n    android:background=\"@drawable/custom_background\">\n\n    <TextView\n        android:id=\"@+id/title\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World\"\n        android:textColor=\"@color/primary_text\"\n        android:textSize=\"18sp\" />\n\n    <Button\n        android:id=\"@+id/submit_button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Submit\"\n        android:backgroundTint=\"#FF5722\" />\n</LinearLayout>\n```\n通用描述示例：\n- 垂直线性容器，宽度占满父容器，高度自适应，内边距为16vp，背景引用资源app.media.custom_background。\n    - 文本视图，宽度自适应，高度自适应，文本内容为“Hello World”，文本颜色引用资源app.color.primary_text，字体大小为18fp。\n    - 按钮，宽度自适应，高度自适应，文本内容为“Submit”，背景颜色为#FF5722。\n\n功能效果描述示例：\n实现了一个垂直线性容器，在容器中包含一个文本视图和一个按钮，其中文本视图，高度和宽度自适应，显示“Hello World”，字体颜色引用了 app.color.primary_text 资源，字体大小为18fp；在文本视图的正下方有一个按钮，按钮宽度和高度自适应，按钮显示“Submit”，背景颜色为 #FF5722。\n\n安卓XML代码如下：\n<include layout=\"@layout/content_home\" />\n请根据以上安卓XML代码编写一个通用描述，然后编写这页面实现的功能效果描述。\n\n**重要**：请确保通用描述和功能效果描述的准确性和完整性，确保其他开发者可以根据描述实现相同的布局和功能。\n", "component_description": {"layout_description": "包含一个布局文件的引用，该布局文件路径为app.layout.content_home。", "function_description": "页面包含一个布局文件的引用，该布局文件路径为app.layout.content_home，具体内容和功能由该布局文件定义。"}}}, {"id": "msWwGWxag4eyobGZWifzZx", "description": "查询组件文档", "subtasks": [{"id": "dM6HqkyKSjtf52p5ypBE54", "description": "生成组件查询", "subtasks": [], "details": {"prompt": "你在一家软件公司工作，你被指派去为将安卓组件转译为鸿蒙ArkUI代码。\n\n\n待转译的安卓组件如下：\n# ['include']\n页面包含一个布局文件的引用，该布局文件路径为app.layout.content_home，具体内容和功能由该布局文件定义。\n<include layout=\"@layout/content_home\" />\n\n实现这个需求可能会使用到某些ArkUI组件。\n以下是关于鸿蒙ArkUI API 12的组件基本文档：\n## AlphabetIndexer\n可以与容器组件联动用于按逻辑结构快速定位容器显示区域的组件。\n## Blank\n空白填充组件，在容器主轴方向上，空白填充组件具有自动填充容器空余部分的能力。仅当父组件为Row/Column/Flex时生效。\n## Button\n按钮组件，可快速创建不同样式的按钮。可以包含单个子组件。\n## CalendarPicker\n日历选择器组件，提供下拉日历弹窗，可以让用户选择日期。\n## Checkbox\n提供多选框组件，通常用于某选项的打开或关闭。可以包含Text组件。\n## CheckboxGroup\n多选框群组，用于控制多选框全选或者不全选状态。\n## Component3D\n3D渲染组件，可以加载3D模型资源并做自定义渲染，通常用于3D动效场景。\n## ContainerSpan\nText组件的子组件，用于统一管理多个Span、ImageSpan的背景色及圆角弧度。\n## DataPanel\n数据面板组件，用于将多个数据占比情况使用占比图进行展示。\n## DatePicker\n日期选择器组件，用于根据指定日期范围创建日期滑动选择器。\n## Divider\n提供分隔器组件，分隔不同内容块/内容元素。\n## Gauge\n数据量规图表组件，用于将数据展示为环形图表。\n## Image\n图片组件，常用于在应用中显示图片。Image支持加载PixelMap、ResourceStr和DrawableDescriptor类型的数据源，支持png、jpg、jpeg、bmp、svg、webp、gif和heif类型的图片格式。\n## ImageAnimator\n提供帧动画组件来实现逐帧播放图片的能力，可以配置需要播放的图片列表，每张图片可以配置时长。\n## ImageSpan\nText、ContainerSpan组件的子组件，用于显示行内图片。\n## LoadingProgress\n用于显示加载动效的组件。\n## Marquee\n跑马灯组件，用于滚动展示一段单行文本。仅当文本内容宽度超过跑马灯组件宽度时滚动，不超过时不滚动。\n## Menu\n以垂直列表形式显示的菜单。\n## MenuItem\n用来展示菜单Menu中具体的item菜单项。\n## MenuItemGroup\n该组件用来展示菜单MenuItem的分组。\n## Navigation\nNavigation组件是路由导航的根视图容器，一般作为Page页面的根容器使用，其内部默认包含了标题栏、内容区和工具栏，其中内容区默认首页显示导航内容（Navigation的子组件）或非首页显示（[NavDestination](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navdestination-V5)的子组件），首页和非首页通过路由进行切换。\n## NavRouter\n导航组件，默认提供点击响应处理，不需要开发者自定义点击事件逻辑。\n## NavDestination\n作为子页面的根容器，用于显示Navigation的内容区。\n## NodeContainer\n基础组件，不支持尾随添加子节点。组件接受一个NodeController的实例接口。需要NodeController组合使用。该组件下仅支持挂载自定义节点FrameNode或者是BuilderNode中获取的根节点FrameNode。不支持挂载查询获得的原生系统组件代理节点。\n## PatternLock\n图案密码锁组件，以九宫格图案的方式输入密码，用于密码验证场景。手指在PatternLock组件区域按下时开始进入输入状态，手指离开屏幕时结束输入状态完成密码输入。\n## Progress\n进度条组件，用于显示内容加载或操作处理等进度。\n## QRCode\n用于显示单个二维码的组件。\n## Radio\n单选框，提供相应的用户交互选择项。\n## Rating\n提供在给定范围内选择评分的组件。Rating组件的接口，用于设置评分值和是否作为指示器使用。\n## RichEditor\n支持图文混排和文本交互式编辑的组件。\n## RichText\n富文本组件，解析并显示HTML格式文本。\n## ScrollBar\n滚动条组件ScrollBar，用于配合可滚动组件使用，如List、Grid、Scroll。\n## Search\n搜索框组件，适用于浏览器的搜索内容输入框等应用场景。可以包含单个子组件。\n## Select\n提供下拉选择菜单，可以让用户在多个选项之间选择。可以包含单个子组件。\n## Slider\n滑动条组件，通常用于快速调节设置值，如音量调节、亮度调节等应用场景。\n## Span\n作为Text、ContainerSpan组件的子组件，用于显示行内文本的组件。\n## Stepper\n步骤导航器组件，适用于引导用户按照步骤完成任务的导航场景。\n## StepperItem\n用作Stepper组件的页面子组件。\n## SymbolSpan\n作为Text组件的子组件，用于显示图标小符号的组件。\n## SymbolGlyph\n显示图标小符号的组件。\n## Text\n显示一段文本的组件，可以包含Span、ImageSpan、SymbolSpan和ContainerSpan子组件。\n## TextArea\n多行文本输入框组件，当输入的文本内容超过组件宽度时会自动换行显示。\n## TextClock\nTextClock组件通过文本将当前系统时间显示在设备上。支持不同时区的时间显示，最高精度到秒级。\n## TextPicker\n根据range指定的选择范围创建文本选择器。\n## TextTimer\n通过文本显示计时信息并控制其计时器状态的组件。\n## TimePicker\n时间选择组件，根据指定参数创建选择器，支持选择小时及分钟。\n## Toggle\n组件提供勾选框样式、状态按钮样式及开关样式。\n## TextInput\n单行文本输入框组件。\n## XComponent\n可用于EGL/OpenGLES和媒体数据写入，并显示在XComponent组件。\n## Canvas\n提供画布组件，用于自定义绘制图形。\n## CanvasGradient\n渐变对象。\n## CanvasPattern\n一个Object对象，使用createPattern方法创建，通过指定图像和重复方式创建图片填充的模板。\n## DrawingRenderingContext\n使用DrawingRenderingContext在Canvas组件上进行绘制，绘制对象可以是矩形、文本、图片等。\n## ImageBitmap\nImageBitmap对象可以存储canvas渲染的像素数据。\n## ImageData\nImageData对象可以存储canvas渲染的像素数据。\n## Matrix2D\n矩阵对象，可以对矩阵进行缩放、旋转、平移等变换。\n## OffscreenCanvas\nOffscreenCanvas组件用于自定义绘制图形，可以在屏幕外渲染的画布，避免影响应用程序主线程性能。\n## OffscreenCanvasRenderingContext2D\n使用OffscreenCanvasRenderingContext2D在Canvas上进行离屏绘制，绘制对象可以是矩形、文本、图片等。离屏绘制是指将需要绘制的内容先绘制在缓存区，然后将其转换成图片，一次性绘制到canvas上，加快了绘制速度。\n## Path2D\n路径对象，支持通过对象的接口进行路径的描述，并通过Canvas的stroke接口或者fill接口进行绘制。\n## Badge\n可以附加在单个组件上用于信息标记的容器组件。\n## Column\n沿垂直方向布局的容器组件，可以包含子组件。\n## ColumnSplit\n将子组件纵向布局，并在每个子组件之间插入一根横向的分割线。\n## Counter\n计数器组件，提供相应的增加或者减少的计数操作。\n## EmbeddedComponent\n用于支持在当前页面嵌入本应用内其他EmbeddedUIExtensionAbility提供的UI。EmbeddedUIExtensionAbility在独立进程中运行，完成页面布局和渲染。通常用于有进程隔离诉求的模块化开发场景。\n## Flex\n以弹性方式布局子组件的容器组件。\n## GridCol\n栅格子组件，必须作为栅格容器组件(GridRow)的子组件使用。可以包含单个子组件。\n## GridRow\n栅格容器组件，仅可以和栅格子组件(GridCol)在栅格布局场景中使用。\n## Grid\n网格容器，由“行”和“列”分割的单元格所组成，通过指定“项目”所在的单元格做出各种各样的布局。\n## GridItem\n网格容器中单项内容容器，仅支持作为Grid组件的子组件使用。\n## List\n列表包含一系列相同宽度的列表项。适合连续、多行呈现同类数据，例如图片和文本。可以包含ListItem、ListItemGroup子组件，支持渲染控制类型（if/else、ForEach、LazyForEach和Repeat）。\n## ListItem\n用来展示列表具体item，必须配合List来使用。\n## ListItemGroup\n该组件用来展示列表item分组，宽度默认充满List组件，必须配合List组件来使用。\n## RelativeContainer\n相对布局组件，用于复杂场景中元素对齐的布局。\n## Row\n沿水平方向布局容器，可以包含子组件。\n## Scroll\n可滚动的容器组件，当子组件的布局尺寸超过父组件的尺寸时，内容可以滚动，支持单个子组件。\n## Stack\n堆叠容器，子组件按照顺序依次入栈，后一个子组件覆盖前一个子组件。可以包含多个子组件。\n## Tabs\n通过页签进行内容视图切换的容器组件，每个页签对应一个内容视图，不支持自定义组件作为子组件， 仅可包含子组件TabContent。\n## TabContent\n仅在Tabs中使用，对应一个切换页签的内容视图，支持单个子组件。\n## WaterFlow\n瀑布流容器，由“行”和“列”分割的单元格所组成，通过容器自身的排列规则，将不同大小的“项目”自上而下，如瀑布般紧密布局。\n## WithTheme\nWithTheme组件用于设置应用局部页面自定义主题风格，可设置子组件深浅色模式和自定义配色。\n## Circle\n用于绘制圆形的组件。\n## Ellipse\n椭圆绘制组件。\n## Line\n直线绘制组件。\n## Polyline\n折线绘制组件。\n## Polygon\n多边形绘制组件。\n## Path\n路径绘制组件，根据绘制路径生成封闭的自定义形状。\n## Rect\n绘制组件的父组件，实现类似SVG的效果。绘制组件单独使用，用于在页面上绘制指定的图形。\n## Shape\n矩形绘制组件。\n## AlertDialog\n显示警告弹窗组件，可设置文本内容与响应回调。\n## ActionSheet\n列表选择弹窗 (ActionSheet) 是一个全局UI方法，属于ArkTS组件，用于在ArkUI（方舟UI框架）中显示一个带有多个选项的弹窗。\n## CustomDialog\n通过CustomDialogController类显示自定义弹窗。使用弹窗组件时，可优先考虑自定义弹窗，便于自定义弹窗的样式与内容。\n## CalendarPickerDialog\n点击日期弹出日历选择器弹窗，可选择弹窗内任意日期。\n## DatePickerDialog\n日期滑动选择器弹窗，用于在弹窗上展示日期选择器。\n## TimePickerDialog\n时间滑动选择器弹窗 (TimePickerDialog) 是一个全局UI方法，用于以24小时的时间区间创建时间滑动选择器，并展示在弹窗上。\n## TextPickerDialog\n文本滑动选择器弹窗，用于在指定的选择范围内创建文本选择器并展示在弹窗上。\n## Video\n用于播放视频文件并控制其播放状态的组件。\n## LocationButton\n安全控件的位置控件，用户通过点击该位置按钮，可以临时获取精准定位权限，而不需要权限弹框授权确认。\n## PasteButton\n安全控件的粘贴按钮，用户通过点击该粘贴按钮，可以临时获取读取剪贴板权限。\n## SaveButton\n安全控件的保存控件，用户通过点击该保存按钮，可以临时获取存储权限，而不需要权限弹框授权确认。\n## ChipGroup\nChipGroup高级组件，提供操作块群组，用于对文件或者资源内容进行分类等场景。\n## Chip\n操作块组件，用于搜索框历史记录或者邮件发送列表等场景。\n## ToolBar\n工具栏用于展示针对当前界面内容的操作选项，在界面底部显示。底部最多显示5个入口，超过则收纳入“更多”子项中，在最右侧显示。\n## ComposeTitleBar\n一种普通标题栏，支持设置标题、头像（可选）和副标题（可选），可用于一级页面、二级及其以上界面配置返回键。\n\n\n\n在开始任务之前，你需要对待转译的安卓组件进行分析，以便选择合适的ArkUI组件来实现相同的功能。\n然后，你需要从上述ArkUI组件中选择一个或多个组件，使其能够实现上述安卓组件的功能，并保持布局和样式尽可能一致。\n对于无法直接转译的安卓组件，你可以通过组合多个ArkUI组件来实现，一定不能选择不存在的组件。\n在完成选择后，你需要编写一条或多条用于在知识库或RAG系统中检索的查询语句。每条查询应聚焦于不同的功能细节或组件的具体属性，帮助快速、精确地检索到相关的文档、代码示例或实现方法。\n**重要**：你只能从[AlphabetIndexer, Blank, Button, CalendarPicker, Checkbox, CheckboxGroup, Component3D, ContainerSpan, DataPanel, DatePicker, Divider, Gauge, Image, ImageAnimator, ImageSpan, LoadingProgress, Marquee, Menu, MenuItem, MenuItemGroup, Navigation, NavRouter, NavDestination, NodeContainer, PatternLock, Progress, QRCode, Radio, Rating, RichEditor, RichText, ScrollBar, Search, Select, Slider, Span, Stepper, StepperItem, SymbolSpan, SymbolGlyph, Text, TextArea, TextClock, TextPicker, TextTimer, TimePicker, Toggle, TextInput, XComponent, Canvas, CanvasGradient, CanvasPattern, DrawingRenderingContext, ImageBitmap, ImageData, Matrix2D, OffscreenCanvas, OffscreenCanvasRenderingContext2D, Path2D, Badge, Column, ColumnSplit, Counter, EmbeddedComponent, Flex, GridCol, GridRow, Grid, GridItem, List, ListItem, ListItemGroup, RelativeContainer, Row, Scroll, Stack, Tabs, TabContent, WaterFlow, WithTheme, Circle, Ellipse, Line, Polyline, Polygon, Path, Rect, Shape, AlertDialog, ActionSheet, CustomDialog, CalendarPickerDialog, DatePickerDialog, TimePickerDialog, TextPickerDialog, Video, LocationButton, PasteButton, SaveButton, ChipGroup, Chip, ToolBar, ComposeTitleBar]中选择ArkUI组件，请你认真检查，一定不可以选择不存在的ArkUI组件。\n**重要**：查询语句需要涵盖以下方面：布局属性（如宽度、高度、边距等）、组件的样式和外观（如颜色、字体、透明度等）、组件的排列和嵌套关系（如垂直或水平布局、对齐方式）、组件的功能和交互（如点击事件、输入验证），确保每条查询简洁明了且仅聚焦单一方面，突出关键信息，以便加快内容检索过程。\n\n## 以下是选择组件的额外规则：\n* 规则1：待转译的安卓布局文件中存在属性layout_constraintXXX_toXXXOf，其中XXX为Start、End、Top、Bottom等，你应该额外选择鸿蒙ArkUI的RelativeContainer组件。\n* 规则2：当使用com.google.android.material.appbar.AppBarLayout与androidx.appcompat.widget.Toolbar实现标题栏时，你应该选择Row、Text、Image等组件来实现标题栏，需要注意鸿蒙组件的Toolbar特指底部导航栏而非安卓中的标题栏。\n* 规则3：Scroll组件的子组件通常采用Column或Row组件，你应该根据滚动的方向来选择，当滚动方向为垂直时，应该选择Column组件，当滚动方向为水平时，应该选择Row组件。\n\n以下是一个示例：\n安卓组件：EditText\n<EditText\nandroid:id=\"@+id/et_1\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"50dp\"\nandroid:layout_marginBottom=\"15dp\"\nandroid:autofillHints=\"\"\nandroid:hint=\"请输入文字\"\nandroid:inputType=\"text\"\nandroid:paddingLeft=\"15dp\"\nandroid:paddingRight=\"15dp\"\nandroid:textColor=\"@color/black\"\nandroid:textSize=\"16sp\" />\n回答：\n```json\n{\n    \"components\": [\"TextInput\"],\n    \"queries\": [\n        {\n            \"queries\": [\"设置输入框的高度\", \"设置输入框的宽度\", \"设置输入框的底部边距\", \"设置输入框的提示文本\", \"设置输入框的输入类型\", \"设置输入框的左内边距\", \"设置输入框的右内边距\", \"设置输入框的文本颜色\", \"设置输入框的字体大小\"],\n            \"component\": \"TextInput\",\n        },\n    ],\n    \"idea\": \"可以选择TextInput组件来实现EditText组件的功能，设置TextInput组件的属性来实现EditText组件的样式和功能。\"\n}\n```", "component_query": {"components": ["RelativeContainer", "EmbeddedComponent"], "queries": [{"component": "RelativeContainer", "queries": ["如何使用RelativeContainer实现布局约束", "RelativeContainer的子组件如何设置对齐方式", "RelativeContainer如何处理子组件的相对位置"]}, {"component": "EmbeddedComponent", "queries": ["如何引用外部布局文件", "EmbeddedComponent如何加载和显示外部布局内容", "EmbeddedComponent的布局和样式如何与外部布局文件保持一致"]}], "idea": "由于安卓组件使用了布局文件的引用，且存在布局约束属性，因此选择RelativeContainer来处理布局约束。同时，使用EmbeddedComponent来加载和显示外部布局文件的内容，以保持布局和样式的一致性。"}}}, {"id": "KeBDY2zzYZs7FYFSR4hSE3", "description": "修正组件查询", "subtasks": [], "details": {"component_query": {"components": ["RelativeContainer", "EmbeddedComponent"], "queries": [{"component": "RelativeContainer", "queries": ["如何使用RelativeContainer实现布局约束", "RelativeContainer的子组件如何设置对齐方式", "RelativeContainer如何处理子组件的相对位置"]}, {"component": "EmbeddedComponent", "queries": ["如何引用外部布局文件", "EmbeddedComponent如何加载和显示外部布局内容", "EmbeddedComponent的布局和样式如何与外部布局文件保持一致"]}], "idea": "由于安卓组件使用了布局文件的引用，且存在布局约束属性，因此选择RelativeContainer来处理布局约束。同时，使用EmbeddedComponent来加载和显示外部布局文件的内容，以保持布局和样式的一致性。"}, "corrected_component_query": {"components": ["RelativeContainer", "EmbeddedComponent"], "queries": [{"component": "RelativeContainer", "queries": ["如何使用RelativeContainer实现布局约束", "RelativeContainer的子组件如何设置对齐方式", "RelativeContainer如何处理子组件的相对位置"]}, {"component": "EmbeddedComponent", "queries": ["如何引用外部布局文件", "EmbeddedComponent如何加载和显示外部布局内容", "EmbeddedComponent的布局和样式如何与外部布局文件保持一致"]}], "idea": "由于安卓组件使用了布局文件的引用，且存在布局约束属性，因此选择RelativeContainer来处理布局约束。同时，使用EmbeddedComponent来加载和显示外部布局文件的内容，以保持布局和样式的一致性。"}}}, {"id": "SfRP2kXy44DhJjPWbYLvN7", "description": "查询示例文档", "subtasks": [], "details": {"query": "页面包含一个布局文件的引用，该布局文件路径为app.layout.content_home，具体内容和功能由该布局文件定义。", "k": 3, "component_name": ["RelativeContainer", "EmbeddedComponent"], "score_threshold": 0.6, "example_knowledge_results": [], "component_examples": {}}}, {"id": "43qrEyocuktERwudwjofXE", "description": "查询组件文档", "subtasks": [{"id": "PfrPxixr5MnECzxFqCFf73", "description": "依次从知识库中查询每个组件的相关属性、事件文档", "subtasks": [{"id": "T37XT8pFVi8myACdBN25qy", "description": "查询组件RelativeContainer的相关属性、事件文档", "subtasks": [], "details": {"query": ["如何使用RelativeContainer实现布局约束", "RelativeContainer的子组件如何设置对齐方式", "RelativeContainer如何处理子组件的相对位置"], "n_results": 10, "query_results": {"ids": [["3538d425-0382-47f9-8a9c-2f6a4a6dec6d", "f808797e-8ece-4205-900e-3df29812f76d", "211e6dd1-0565-438a-9215-164b822d7a98", "3e0bb5dc-016a-40bb-9b56-0e7147e2d87d", "baa9ce58-b17e-4a09-85ae-673225581f71", "f341d5bd-33e3-49ec-8b13-33435bb8e9d4", "3b346f3c-3633-48c0-8818-19298f847010", "9386d542-c0ad-4e13-a29f-41258bffff79", "17168701-4515-4bd1-adab-7c82d6e2594c", "83d130bd-f5c0-4367-837b-4f78d745876c"], ["3538d425-0382-47f9-8a9c-2f6a4a6dec6d", "3e0bb5dc-016a-40bb-9b56-0e7147e2d87d", "83d130bd-f5c0-4367-837b-4f78d745876c", "f808797e-8ece-4205-900e-3df29812f76d", "211e6dd1-0565-438a-9215-164b822d7a98", "3b346f3c-3633-48c0-8818-19298f847010", "f341d5bd-33e3-49ec-8b13-33435bb8e9d4", "1e71e552-71d5-4a32-9d22-ad916a0cbedd", "baa9ce58-b17e-4a09-85ae-673225581f71", "17168701-4515-4bd1-adab-7c82d6e2594c"], ["3538d425-0382-47f9-8a9c-2f6a4a6dec6d", "f341d5bd-33e3-49ec-8b13-33435bb8e9d4", "eabbcd32-6024-4b2a-a490-c82454d6def9", "f808797e-8ece-4205-900e-3df29812f76d", "83d130bd-f5c0-4367-837b-4f78d745876c", "3e0bb5dc-016a-40bb-9b56-0e7147e2d87d", "3b346f3c-3633-48c0-8818-19298f847010", "211e6dd1-0565-438a-9215-164b822d7a98", "1e71e552-71d5-4a32-9d22-ad916a0cbedd", "baa9ce58-b17e-4a09-85ae-673225581f71"]], "distances": [[0.3519536852836609, 0.3746289610862732, 0.37481653690338135, 0.42581820487976074, 0.4329667091369629, 0.4428357481956482, 0.4428982734680176, 0.4507068395614624, 0.45598912239074707, 0.464888334274292], [0.2595025897026062, 0.3245025873184204, 0.33972448110580444, 0.37153172492980957, 0.378670871257782, 0.39433854818344116, 0.4032379984855652, 0.40669912099838257, 0.41003531217575073, 0.4302193522453308], [0.32428252696990967, 0.3577954173088074, 0.3878225088119507, 0.42418718338012695, 0.42993927001953125, 0.43448543548583984, 0.43876534700393677, 0.44514137506484985, 0.44719040393829346, 0.45662152767181396]], "metadatas": [[{"component_name": "RelativeContainer", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "barrier", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "guideLine", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "chainMode", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "position", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "constraintSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "RelativeContainer", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "barrier", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "guideLine", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "position", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "chainMode", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "RelativeContainer", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "position", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "offset", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "barrier", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "guideLine", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "chainMode", "source": "harmony-component-doc", "type": "attribute"}]], "embeddings": null, "documents": [["指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "设置RelativeContainer容器内的屏障。\n属性名称：barrier\n属性参数：{'value': {\"type\":\"Array<BarrierStyle>\",\"required\":true,\"description\":\"Array中每个项目即为一条barrier。\",\"default\":null}}\n", "设置RelativeContainer容器内的辅助线。\n属性名称：guideLine\n属性参数：{'value': {\"type\":\"Array<GuideLineStyle>\",\"required\":true,\"description\":\"Array中每个项目即为一条guideline。\",\"default\":null}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "指定以该组件为链头所构成的链的参数，仅当父容器为RelativeContainer时生效。\n属性名称：chainMode\n属性参数：{'direction': {\"type\":\"Axis\",\"required\":true,\"description\":\"链的方向。\",\"default\":null}, 'style': {\"type\":\"ChainStyle\",\"required\":true,\"description\":\"链的样式。\",\"default\":null}}\n", "绝对定位，确定子组件相对父组件的位置。\n属性名称：position\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"绝对定位，确定子组件相对父组件的位置。当父容器为Row/Column/Flex时，设置position的子组件不占位。Position类型基于父组件左上角确定位置;Edges类型基于父组件四边确定位置，top/left/right/bottom分别为组件各边距离父组件相应边的边距，通过边距来确定组件相对于父组件的位置;LocalizedEdges类型基于父组件四边确定位置，支持镜像模式。适用于置顶显示、悬浮按钮等组件在父容器中位置固定的场景。不支持在宽高为零的布局容器上设置。当父容器为RelativeContainer, 且子组件设置了alignRules属性, 则子组件的position属性不生效。\",\"default\":null}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "设置约束尺寸，组件布局时，进行尺寸范围限制。从API version 10开始，该接口支持calc计算特性。\n属性名称：constraintSize\n属性参数：{'value': {\"type\":\"ConstraintSizeOptions\",\"required\":true,\"description\":\"设置约束尺寸。constraintSize的优先级高于Width和Height。取值结果参考constraintSize取值对width/height影响。默认值：{ minWidth: 0, maxWidth: Infinity, minHeight: 0, maxHeight: Infinity }。单位：vp\",\"default\":null}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n"], ["指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", "设置RelativeContainer容器内的屏障。\n属性名称：barrier\n属性参数：{'value': {\"type\":\"Array<BarrierStyle>\",\"required\":true,\"description\":\"Array中每个项目即为一条barrier。\",\"default\":null}}\n", "设置RelativeContainer容器内的辅助线。\n属性名称：guideLine\n属性参数：{'value': {\"type\":\"Array<GuideLineStyle>\",\"required\":true,\"description\":\"Array中每个项目即为一条guideline。\",\"default\":null}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "绝对定位，确定子组件相对父组件的位置。\n属性名称：position\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"绝对定位，确定子组件相对父组件的位置。当父容器为Row/Column/Flex时，设置position的子组件不占位。Position类型基于父组件左上角确定位置;Edges类型基于父组件四边确定位置，top/left/right/bottom分别为组件各边距离父组件相应边的边距，通过边距来确定组件相对于父组件的位置;LocalizedEdges类型基于父组件四边确定位置，支持镜像模式。适用于置顶显示、悬浮按钮等组件在父容器中位置固定的场景。不支持在宽高为零的布局容器上设置。当父容器为RelativeContainer, 且子组件设置了alignRules属性, 则子组件的position属性不生效。\",\"default\":null}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "指定以该组件为链头所构成的链的参数，仅当父容器为RelativeContainer时生效。\n属性名称：chainMode\n属性参数：{'direction': {\"type\":\"Axis\",\"required\":true,\"description\":\"链的方向。\",\"default\":null}, 'style': {\"type\":\"ChainStyle\",\"required\":true,\"description\":\"链的样式。\",\"default\":null}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n"], ["指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "绝对定位，确定子组件相对父组件的位置。\n属性名称：position\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"绝对定位，确定子组件相对父组件的位置。当父容器为Row/Column/Flex时，设置position的子组件不占位。Position类型基于父组件左上角确定位置;Edges类型基于父组件四边确定位置，top/left/right/bottom分别为组件各边距离父组件相应边的边距，通过边距来确定组件相对于父组件的位置;LocalizedEdges类型基于父组件四边确定位置，支持镜像模式。适用于置顶显示、悬浮按钮等组件在父容器中位置固定的场景。不支持在宽高为零的布局容器上设置。当父容器为RelativeContainer, 且子组件设置了alignRules属性, 则子组件的position属性不生效。\",\"default\":null}}\n", "相对偏移，组件相对原本的布局位置进行偏移。\n属性名称：offset\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"相对偏移，组件相对原本的布局位置进行偏移。offset属性不影响父容器布局，仅在绘制时调整位置。Position类型基于组件自身左上角偏移，Edges类型基于组件自身四边偏移。 offset属性设置 {x: x, y: y} 与设置 {left: x, top: y} 以及 {right: -x, bottom: -y} 效果相同, 类型LocalizedEdges支持镜像模式：LTR模式下start 等同于x，RTL模式下等同于-x\",\"default\":null}}\n", "设置RelativeContainer容器内的屏障。\n属性名称：barrier\n属性参数：{'value': {\"type\":\"Array<BarrierStyle>\",\"required\":true,\"description\":\"Array中每个项目即为一条barrier。\",\"default\":null}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "设置RelativeContainer容器内的辅助线。\n属性名称：guideLine\n属性参数：{'value': {\"type\":\"Array<GuideLineStyle>\",\"required\":true,\"description\":\"Array中每个项目即为一条guideline。\",\"default\":null}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "指定以该组件为链头所构成的链的参数，仅当父容器为RelativeContainer时生效。\n属性名称：chainMode\n属性参数：{'direction': {\"type\":\"Axis\",\"required\":true,\"description\":\"链的方向。\",\"default\":null}, 'style': {\"type\":\"ChainStyle\",\"required\":true,\"description\":\"链的样式。\",\"default\":null}}\n"]], "uris": null, "data": null, "included": ["metadatas", "documents", "distances"]}}}, {"id": "cWzrXbcVTAVEA3WvYTP5SQ", "description": "查询组件EmbeddedComponent的相关属性、事件文档", "subtasks": [], "details": {"query": ["如何引用外部布局文件", "EmbeddedComponent如何加载和显示外部布局内容", "EmbeddedComponent的布局和样式如何与外部布局文件保持一致"], "n_results": 10, "query_results": {"ids": [["e95ecba1-27a9-40e8-a3cb-fe81b62c5748", "51b91b6e-45c5-46e0-b8dd-af637e35d8c9", "c4e6323f-aaa0-4753-84bf-d4b944c2e8f7", "fbca8df5-3a00-4b18-a90c-182e2fbe8511", "31f4200c-c24c-4c80-b86f-cab5521ead15", "3772e408-5ca8-4086-969c-fa67491b8301", "399576ac-656d-4cfb-a3a1-e9f028ab3607", "602fcfa3-d59d-4961-9bf1-cded8fa6dc4f", "f1a7c42a-c932-4f93-8c3a-d8b9f80d65e0", "b9d44f49-67d2-451f-9e90-0ced5aab259e"], ["e95ecba1-27a9-40e8-a3cb-fe81b62c5748", "31f4200c-c24c-4c80-b86f-cab5521ead15", "4105be88-5e06-48b3-8ae5-da8994fa604e", "51b91b6e-45c5-46e0-b8dd-af637e35d8c9", "602fcfa3-d59d-4961-9bf1-cded8fa6dc4f", "c4e6323f-aaa0-4753-84bf-d4b944c2e8f7", "f5a933b1-e192-4e1a-86e0-2c951bcfd5cd", "3772e408-5ca8-4086-969c-fa67491b8301", "72e76f31-34e0-48f2-9f9c-2e464c7c70fb", "b9d44f49-67d2-451f-9e90-0ced5aab259e"], ["3772e408-5ca8-4086-969c-fa67491b8301", "e95ecba1-27a9-40e8-a3cb-fe81b62c5748", "399576ac-656d-4cfb-a3a1-e9f028ab3607", "c4e6323f-aaa0-4753-84bf-d4b944c2e8f7", "31f4200c-c24c-4c80-b86f-cab5521ead15", "f1a7c42a-c932-4f93-8c3a-d8b9f80d65e0", "c1c07b74-7ec8-4676-9719-ef41be44e836", "51b91b6e-45c5-46e0-b8dd-af637e35d8c9", "f5a933b1-e192-4e1a-86e0-2c951bcfd5cd", "602fcfa3-d59d-4961-9bf1-cded8fa6dc4f"]], "distances": [[0.4535294771194458, 0.4589463472366333, 0.4722719192504883, 0.49471771717071533, 0.4974477291107178, 0.49966078996658325, 0.5023905634880066, 0.5107951164245605, 0.5109947919845581, 0.5173215866088867], [0.44423776865005493, 0.45795226097106934, 0.45828062295913696, 0.462989866733551, 0.4652000069618225, 0.4754869341850281, 0.47876209020614624, 0.47962290048599243, 0.4858204126358032, 0.48967689275741577], [0.4430735111236572, 0.44600069522857666, 0.4688457250595093, 0.47475409507751465, 0.47565799951553345, 0.4773467183113098, 0.48079097270965576, 0.4840887784957886, 0.4958544373512268, 0.49927079677581787]], "metadatas": [[{"component_name": "EmbeddedComponent", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "margin", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "markAnchor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "padding", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "offset", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "height", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "flexGrow", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "EmbeddedComponent", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "padding", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "onError", "source": "harmony-component-doc", "type": "event"}, {"component_name": "EmbeddedComponent", "name": "margin", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "height", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "width", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "flexGrow", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "EmbeddedComponent", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "offset", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "padding", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "margin", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "height", "source": "harmony-component-doc", "type": "attribute"}]], "embeddings": null, "documents": [["对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "设置外边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：margin\n属性参数：{'value': {\"type\":[\"Margin\",\"Length\",\"LocalizedMargin\"],\"required\":true,\"description\":\"设置组件的外边距。参数为Length类型时，四个方向外边距同时生效。默认值：0。单位：vp。margin设置百分比时，上下左右外边距均以父容器的width作为基础值。\",\"default\":null}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "设置子元素在位置定位时的锚点。\n属性名称：markAnchor\n属性参数：{'value': {\"type\":[\"Position\",\"LocalizedPosition\"],\"required\":true,\"description\":\"设置子元素在位置定位时的锚点，从position或offset的位置上，进一步偏移。设置.position({x: value1, y: value2}).markAnchor({x: value3, y: value4})，效果等于设置.position({x: value1 - value3, y: value2 - value4})，offset同理。单独使用markAnchor，设置.markAnchor({x: value1, y: value2})，效果等于设置.offset({x: -value1, y: -value2})。\",\"default\":null}}\n", "设置内边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：padding\n属性参数：{'value': {\"type\":[\"Padding\",\"Length\",\"LocalizedPadding\"],\"required\":true,\"description\":\"设置组件的内边距。参数为Length类型时，四个方向内边距同时生效。默认值：0。单位：vp。padding设置百分比时，上下左右内边距均以父容器的width作为基础值。\",\"default\":null}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "相对偏移，组件相对原本的布局位置进行偏移。\n属性名称：offset\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"相对偏移，组件相对原本的布局位置进行偏移。offset属性不影响父容器布局，仅在绘制时调整位置。Position类型基于组件自身左上角偏移，Edges类型基于组件自身四边偏移。 offset属性设置 {x: x, y: y} 与设置 {left: x, top: y} 以及 {right: -x, bottom: -y} 效果相同, 类型LocalizedEdges支持镜像模式：LTR模式下start 等同于x，RTL模式下等同于-x\",\"default\":null}}\n", "设置组件自身的高度，缺省时使用元素自身内容需要的高度。若子组件的高大于父组件的高，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：height\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件高度。单位：vp\",\"default\":null}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "设置组件在父容器的剩余空间所占比例。\n属性名称：flexGrow\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器在主轴方向上的剩余空间分配给此属性所在组件的比例。\",\"default\":0}}\n"], ["对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "设置内边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：padding\n属性参数：{'value': {\"type\":[\"Padding\",\"Length\",\"LocalizedPadding\"],\"required\":true,\"description\":\"设置组件的内边距。参数为Length类型时，四个方向内边距同时生效。默认值：0。单位：vp。padding设置百分比时，上下左右内边距均以父容器的width作为基础值。\",\"default\":null}}\n", "被拉起的EmbeddedUIExtensionAbility在运行过程中发生异常时触发本回调。\n事件名称：onError\n事件参数：{'callback': {\"type\":\"ErrorCallback\",\"required\":true,\"description\":\"回调函数，携带错误信息。\",\"default\":null}}\n事件返回值：None\n", "设置外边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：margin\n属性参数：{'value': {\"type\":[\"Margin\",\"Length\",\"LocalizedMargin\"],\"required\":true,\"description\":\"设置组件的外边距。参数为Length类型时，四个方向外边距同时生效。默认值：0。单位：vp。margin设置百分比时，上下左右外边距均以父容器的width作为基础值。\",\"default\":null}}\n", "设置组件自身的高度，缺省时使用元素自身内容需要的高度。若子组件的高大于父组件的高，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：height\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件高度。单位：vp\",\"default\":null}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "设置组件自身的宽度，缺省时使用元素自身内容需要的宽度。若子组件的宽大于父组件的宽，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：width\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件宽度。单位：vp\",\"default\":null}}\n", "设置组件在父容器的剩余空间所占比例。\n属性名称：flexGrow\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器在主轴方向上的剩余空间分配给此属性所在组件的比例。\",\"default\":0}}\n"], ["设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "相对偏移，组件相对原本的布局位置进行偏移。\n属性名称：offset\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"相对偏移，组件相对原本的布局位置进行偏移。offset属性不影响父容器布局，仅在绘制时调整位置。Position类型基于组件自身左上角偏移，Edges类型基于组件自身四边偏移。 offset属性设置 {x: x, y: y} 与设置 {left: x, top: y} 以及 {right: -x, bottom: -y} 效果相同, 类型LocalizedEdges支持镜像模式：LTR模式下start 等同于x，RTL模式下等同于-x\",\"default\":null}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "设置内边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：padding\n属性参数：{'value': {\"type\":[\"Padding\",\"Length\",\"LocalizedPadding\"],\"required\":true,\"description\":\"设置组件的内边距。参数为Length类型时，四个方向内边距同时生效。默认值：0。单位：vp。padding设置百分比时，上下左右内边距均以父容器的width作为基础值。\",\"default\":null}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", "设置外边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：margin\n属性参数：{'value': {\"type\":[\"Margin\",\"Length\",\"LocalizedMargin\"],\"required\":true,\"description\":\"设置组件的外边距。参数为Length类型时，四个方向外边距同时生效。默认值：0。单位：vp。margin设置百分比时，上下左右外边距均以父容器的width作为基础值。\",\"default\":null}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "设置组件自身的高度，缺省时使用元素自身内容需要的高度。若子组件的高大于父组件的高，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：height\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件高度。单位：vp\",\"default\":null}}\n"]], "uris": null, "data": null, "included": ["metadatas", "documents", "distances"]}}}], "details": null}, {"id": "df5CHDiVoodxzgUzsC8iuN", "description": "过滤低于阈值的查询结果", "subtasks": [{"id": "UwHrHJ96chBaP4Svk2QS4H", "description": "过滤低于阈值的查询结果: 如何使用RelativeContainer实现布局约束", "subtasks": [], "details": {"query": "如何使用RelativeContainer实现布局约束", "result_ids": ["3538d425-0382-47f9-8a9c-2f6a4a6dec6d", "f808797e-8ece-4205-900e-3df29812f76d", "211e6dd1-0565-438a-9215-164b822d7a98", "3e0bb5dc-016a-40bb-9b56-0e7147e2d87d", "baa9ce58-b17e-4a09-85ae-673225581f71", "f341d5bd-33e3-49ec-8b13-33435bb8e9d4", "3b346f3c-3633-48c0-8818-19298f847010", "9386d542-c0ad-4e13-a29f-41258bffff79", "17168701-4515-4bd1-adab-7c82d6e2594c", "83d130bd-f5c0-4367-837b-4f78d745876c"], "result_documents": ["指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "设置RelativeContainer容器内的屏障。\n属性名称：barrier\n属性参数：{'value': {\"type\":\"Array<BarrierStyle>\",\"required\":true,\"description\":\"Array中每个项目即为一条barrier。\",\"default\":null}}\n", "设置RelativeContainer容器内的辅助线。\n属性名称：guideLine\n属性参数：{'value': {\"type\":\"Array<GuideLineStyle>\",\"required\":true,\"description\":\"Array中每个项目即为一条guideline。\",\"default\":null}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "指定以该组件为链头所构成的链的参数，仅当父容器为RelativeContainer时生效。\n属性名称：chainMode\n属性参数：{'direction': {\"type\":\"Axis\",\"required\":true,\"description\":\"链的方向。\",\"default\":null}, 'style': {\"type\":\"ChainStyle\",\"required\":true,\"description\":\"链的样式。\",\"default\":null}}\n", "绝对定位，确定子组件相对父组件的位置。\n属性名称：position\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"绝对定位，确定子组件相对父组件的位置。当父容器为Row/Column/Flex时，设置position的子组件不占位。Position类型基于父组件左上角确定位置;Edges类型基于父组件四边确定位置，top/left/right/bottom分别为组件各边距离父组件相应边的边距，通过边距来确定组件相对于父组件的位置;LocalizedEdges类型基于父组件四边确定位置，支持镜像模式。适用于置顶显示、悬浮按钮等组件在父容器中位置固定的场景。不支持在宽高为零的布局容器上设置。当父容器为RelativeContainer, 且子组件设置了alignRules属性, 则子组件的position属性不生效。\",\"default\":null}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "设置约束尺寸，组件布局时，进行尺寸范围限制。从API version 10开始，该接口支持calc计算特性。\n属性名称：constraintSize\n属性参数：{'value': {\"type\":\"ConstraintSizeOptions\",\"required\":true,\"description\":\"设置约束尺寸。constraintSize的优先级高于Width和Height。取值结果参考constraintSize取值对width/height影响。默认值：{ minWidth: 0, maxWidth: Infinity, minHeight: 0, maxHeight: Infinity }。单位：vp\",\"default\":null}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n"], "result_metadatas": [{"component_name": "RelativeContainer", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "barrier", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "guideLine", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "chainMode", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "position", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "constraintSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.3519536852836609, 0.3746289610862732, 0.37481653690338135, 0.42581820487976074, 0.4329667091369629, 0.4428357481956482, 0.4428982734680176, 0.4507068395614624, 0.45598912239074707, 0.464888334274292], "threshold": 0.6, "query_text_results": [["指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", {"component_name": "RelativeContainer", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, 0.6480463147163391], ["设置RelativeContainer容器内的屏障。\n属性名称：barrier\n属性参数：{'value': {\"type\":\"Array<BarrierStyle>\",\"required\":true,\"description\":\"Array中每个项目即为一条barrier。\",\"default\":null}}\n", {"component_name": "RelativeContainer", "name": "barrier", "source": "harmony-component-doc", "type": "attribute"}, 0.6253710389137268], ["设置RelativeContainer容器内的辅助线。\n属性名称：guideLine\n属性参数：{'value': {\"type\":\"Array<GuideLineStyle>\",\"required\":true,\"description\":\"Array中每个项目即为一条guideline。\",\"default\":null}}\n", {"component_name": "RelativeContainer", "name": "guideLine", "source": "harmony-component-doc", "type": "attribute"}, 0.6251834630966187]]}}, {"id": "EASiQwUxHB429rm6JNX6Hm", "description": "过滤低于阈值的查询结果: RelativeContainer的子组件如何设置对齐方式", "subtasks": [], "details": {"query": "RelativeContainer的子组件如何设置对齐方式", "result_ids": ["3538d425-0382-47f9-8a9c-2f6a4a6dec6d", "3e0bb5dc-016a-40bb-9b56-0e7147e2d87d", "83d130bd-f5c0-4367-837b-4f78d745876c", "f808797e-8ece-4205-900e-3df29812f76d", "211e6dd1-0565-438a-9215-164b822d7a98", "3b346f3c-3633-48c0-8818-19298f847010", "f341d5bd-33e3-49ec-8b13-33435bb8e9d4", "1e71e552-71d5-4a32-9d22-ad916a0cbedd", "baa9ce58-b17e-4a09-85ae-673225581f71", "17168701-4515-4bd1-adab-7c82d6e2594c"], "result_documents": ["指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", "设置RelativeContainer容器内的屏障。\n属性名称：barrier\n属性参数：{'value': {\"type\":\"Array<BarrierStyle>\",\"required\":true,\"description\":\"Array中每个项目即为一条barrier。\",\"default\":null}}\n", "设置RelativeContainer容器内的辅助线。\n属性名称：guideLine\n属性参数：{'value': {\"type\":\"Array<GuideLineStyle>\",\"required\":true,\"description\":\"Array中每个项目即为一条guideline。\",\"default\":null}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "绝对定位，确定子组件相对父组件的位置。\n属性名称：position\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"绝对定位，确定子组件相对父组件的位置。当父容器为Row/Column/Flex时，设置position的子组件不占位。Position类型基于父组件左上角确定位置;Edges类型基于父组件四边确定位置，top/left/right/bottom分别为组件各边距离父组件相应边的边距，通过边距来确定组件相对于父组件的位置;LocalizedEdges类型基于父组件四边确定位置，支持镜像模式。适用于置顶显示、悬浮按钮等组件在父容器中位置固定的场景。不支持在宽高为零的布局容器上设置。当父容器为RelativeContainer, 且子组件设置了alignRules属性, 则子组件的position属性不生效。\",\"default\":null}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "指定以该组件为链头所构成的链的参数，仅当父容器为RelativeContainer时生效。\n属性名称：chainMode\n属性参数：{'direction': {\"type\":\"Axis\",\"required\":true,\"description\":\"链的方向。\",\"default\":null}, 'style': {\"type\":\"ChainStyle\",\"required\":true,\"description\":\"链的样式。\",\"default\":null}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n"], "result_metadatas": [{"component_name": "RelativeContainer", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "barrier", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "guideLine", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "position", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "chainMode", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.2595025897026062, 0.3245025873184204, 0.33972448110580444, 0.37153172492980957, 0.378670871257782, 0.39433854818344116, 0.4032379984855652, 0.40669912099838257, 0.41003531217575073, 0.4302193522453308], "threshold": 0.6, "query_text_results": [["设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", {"component_name": "RelativeContainer", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, 0.6754974126815796], ["子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", {"component_name": "RelativeContainer", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, 0.6602755188941956], ["对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", {"component_name": "RelativeContainer", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, 0.6056614518165588]]}}, {"id": "ba8i8i95opHSAj2j6PVNhz", "description": "过滤低于阈值的查询结果: RelativeContainer如何处理子组件的相对位置", "subtasks": [], "details": {"query": "RelativeContainer如何处理子组件的相对位置", "result_ids": ["3538d425-0382-47f9-8a9c-2f6a4a6dec6d", "f341d5bd-33e3-49ec-8b13-33435bb8e9d4", "eabbcd32-6024-4b2a-a490-c82454d6def9", "f808797e-8ece-4205-900e-3df29812f76d", "83d130bd-f5c0-4367-837b-4f78d745876c", "3e0bb5dc-016a-40bb-9b56-0e7147e2d87d", "3b346f3c-3633-48c0-8818-19298f847010", "211e6dd1-0565-438a-9215-164b822d7a98", "1e71e552-71d5-4a32-9d22-ad916a0cbedd", "baa9ce58-b17e-4a09-85ae-673225581f71"], "result_documents": ["指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "绝对定位，确定子组件相对父组件的位置。\n属性名称：position\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"绝对定位，确定子组件相对父组件的位置。当父容器为Row/Column/Flex时，设置position的子组件不占位。Position类型基于父组件左上角确定位置;Edges类型基于父组件四边确定位置，top/left/right/bottom分别为组件各边距离父组件相应边的边距，通过边距来确定组件相对于父组件的位置;LocalizedEdges类型基于父组件四边确定位置，支持镜像模式。适用于置顶显示、悬浮按钮等组件在父容器中位置固定的场景。不支持在宽高为零的布局容器上设置。当父容器为RelativeContainer, 且子组件设置了alignRules属性, 则子组件的position属性不生效。\",\"default\":null}}\n", "相对偏移，组件相对原本的布局位置进行偏移。\n属性名称：offset\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"相对偏移，组件相对原本的布局位置进行偏移。offset属性不影响父容器布局，仅在绘制时调整位置。Position类型基于组件自身左上角偏移，Edges类型基于组件自身四边偏移。 offset属性设置 {x: x, y: y} 与设置 {left: x, top: y} 以及 {right: -x, bottom: -y} 效果相同, 类型LocalizedEdges支持镜像模式：LTR模式下start 等同于x，RTL模式下等同于-x\",\"default\":null}}\n", "设置RelativeContainer容器内的屏障。\n属性名称：barrier\n属性参数：{'value': {\"type\":\"Array<BarrierStyle>\",\"required\":true,\"description\":\"Array中每个项目即为一条barrier。\",\"default\":null}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "设置RelativeContainer容器内的辅助线。\n属性名称：guideLine\n属性参数：{'value': {\"type\":\"Array<GuideLineStyle>\",\"required\":true,\"description\":\"Array中每个项目即为一条guideline。\",\"default\":null}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "指定以该组件为链头所构成的链的参数，仅当父容器为RelativeContainer时生效。\n属性名称：chainMode\n属性参数：{'direction': {\"type\":\"Axis\",\"required\":true,\"description\":\"链的方向。\",\"default\":null}, 'style': {\"type\":\"ChainStyle\",\"required\":true,\"description\":\"链的样式。\",\"default\":null}}\n"], "result_metadatas": [{"component_name": "RelativeContainer", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "position", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "offset", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "barrier", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "guideLine", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "RelativeContainer", "name": "chainMode", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.32428252696990967, 0.3577954173088074, 0.3878225088119507, 0.42418718338012695, 0.42993927001953125, 0.43448543548583984, 0.43876534700393677, 0.44514137506484985, 0.44719040393829346, 0.45662152767181396], "threshold": 0.6, "query_text_results": [["绝对定位，确定子组件相对父组件的位置。\n属性名称：position\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"绝对定位，确定子组件相对父组件的位置。当父容器为Row/Column/Flex时，设置position的子组件不占位。Position类型基于父组件左上角确定位置;Edges类型基于父组件四边确定位置，top/left/right/bottom分别为组件各边距离父组件相应边的边距，通过边距来确定组件相对于父组件的位置;LocalizedEdges类型基于父组件四边确定位置，支持镜像模式。适用于置顶显示、悬浮按钮等组件在父容器中位置固定的场景。不支持在宽高为零的布局容器上设置。当父容器为RelativeContainer, 且子组件设置了alignRules属性, 则子组件的position属性不生效。\",\"default\":null}}\n", {"component_name": "RelativeContainer", "name": "position", "source": "harmony-component-doc", "type": "attribute"}, 0.6422045826911926], ["相对偏移，组件相对原本的布局位置进行偏移。\n属性名称：offset\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"相对偏移，组件相对原本的布局位置进行偏移。offset属性不影响父容器布局，仅在绘制时调整位置。Position类型基于组件自身左上角偏移，Edges类型基于组件自身四边偏移。 offset属性设置 {x: x, y: y} 与设置 {left: x, top: y} 以及 {right: -x, bottom: -y} 效果相同, 类型LocalizedEdges支持镜像模式：LTR模式下start 等同于x，RTL模式下等同于-x\",\"default\":null}}\n", {"component_name": "RelativeContainer", "name": "offset", "source": "harmony-component-doc", "type": "attribute"}, 0.6121774911880493]]}}], "details": null}, {"id": "TWNFw2jUoBFhRX54HwmGR2", "description": "过滤低于阈值的查询结果", "subtasks": [{"id": "DEhhivyssisuRUFKjr77iy", "description": "过滤低于阈值的查询结果: 如何引用外部布局文件", "subtasks": [], "details": {"query": "如何引用外部布局文件", "result_ids": ["e95ecba1-27a9-40e8-a3cb-fe81b62c5748", "51b91b6e-45c5-46e0-b8dd-af637e35d8c9", "c4e6323f-aaa0-4753-84bf-d4b944c2e8f7", "fbca8df5-3a00-4b18-a90c-182e2fbe8511", "31f4200c-c24c-4c80-b86f-cab5521ead15", "3772e408-5ca8-4086-969c-fa67491b8301", "399576ac-656d-4cfb-a3a1-e9f028ab3607", "602fcfa3-d59d-4961-9bf1-cded8fa6dc4f", "f1a7c42a-c932-4f93-8c3a-d8b9f80d65e0", "b9d44f49-67d2-451f-9e90-0ced5aab259e"], "result_documents": ["对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "设置外边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：margin\n属性参数：{'value': {\"type\":[\"Margin\",\"Length\",\"LocalizedMargin\"],\"required\":true,\"description\":\"设置组件的外边距。参数为Length类型时，四个方向外边距同时生效。默认值：0。单位：vp。margin设置百分比时，上下左右外边距均以父容器的width作为基础值。\",\"default\":null}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "设置子元素在位置定位时的锚点。\n属性名称：markAnchor\n属性参数：{'value': {\"type\":[\"Position\",\"LocalizedPosition\"],\"required\":true,\"description\":\"设置子元素在位置定位时的锚点，从position或offset的位置上，进一步偏移。设置.position({x: value1, y: value2}).markAnchor({x: value3, y: value4})，效果等于设置.position({x: value1 - value3, y: value2 - value4})，offset同理。单独使用markAnchor，设置.markAnchor({x: value1, y: value2})，效果等于设置.offset({x: -value1, y: -value2})。\",\"default\":null}}\n", "设置内边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：padding\n属性参数：{'value': {\"type\":[\"Padding\",\"Length\",\"LocalizedPadding\"],\"required\":true,\"description\":\"设置组件的内边距。参数为Length类型时，四个方向内边距同时生效。默认值：0。单位：vp。padding设置百分比时，上下左右内边距均以父容器的width作为基础值。\",\"default\":null}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "相对偏移，组件相对原本的布局位置进行偏移。\n属性名称：offset\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"相对偏移，组件相对原本的布局位置进行偏移。offset属性不影响父容器布局，仅在绘制时调整位置。Position类型基于组件自身左上角偏移，Edges类型基于组件自身四边偏移。 offset属性设置 {x: x, y: y} 与设置 {left: x, top: y} 以及 {right: -x, bottom: -y} 效果相同, 类型LocalizedEdges支持镜像模式：LTR模式下start 等同于x，RTL模式下等同于-x\",\"default\":null}}\n", "设置组件自身的高度，缺省时使用元素自身内容需要的高度。若子组件的高大于父组件的高，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：height\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件高度。单位：vp\",\"default\":null}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "设置组件在父容器的剩余空间所占比例。\n属性名称：flexGrow\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器在主轴方向上的剩余空间分配给此属性所在组件的比例。\",\"default\":0}}\n"], "result_metadatas": [{"component_name": "EmbeddedComponent", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "margin", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "markAnchor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "padding", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "offset", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "height", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "flexGrow", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.4535294771194458, 0.4589463472366333, 0.4722719192504883, 0.49471771717071533, 0.4974477291107178, 0.49966078996658325, 0.5023905634880066, 0.5107951164245605, 0.5109947919845581, 0.5173215866088867], "threshold": 0.6, "query_text_results": []}}, {"id": "mhaJigbaeVSMSaHg8whHPM", "description": "过滤低于阈值的查询结果: EmbeddedComponent如何加载和显示外部布局内容", "subtasks": [], "details": {"query": "EmbeddedComponent如何加载和显示外部布局内容", "result_ids": ["e95ecba1-27a9-40e8-a3cb-fe81b62c5748", "31f4200c-c24c-4c80-b86f-cab5521ead15", "4105be88-5e06-48b3-8ae5-da8994fa604e", "51b91b6e-45c5-46e0-b8dd-af637e35d8c9", "602fcfa3-d59d-4961-9bf1-cded8fa6dc4f", "c4e6323f-aaa0-4753-84bf-d4b944c2e8f7", "f5a933b1-e192-4e1a-86e0-2c951bcfd5cd", "3772e408-5ca8-4086-969c-fa67491b8301", "72e76f31-34e0-48f2-9f9c-2e464c7c70fb", "b9d44f49-67d2-451f-9e90-0ced5aab259e"], "result_documents": ["对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "设置内边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：padding\n属性参数：{'value': {\"type\":[\"Padding\",\"Length\",\"LocalizedPadding\"],\"required\":true,\"description\":\"设置组件的内边距。参数为Length类型时，四个方向内边距同时生效。默认值：0。单位：vp。padding设置百分比时，上下左右内边距均以父容器的width作为基础值。\",\"default\":null}}\n", "被拉起的EmbeddedUIExtensionAbility在运行过程中发生异常时触发本回调。\n事件名称：onError\n事件参数：{'callback': {\"type\":\"ErrorCallback\",\"required\":true,\"description\":\"回调函数，携带错误信息。\",\"default\":null}}\n事件返回值：None\n", "设置外边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：margin\n属性参数：{'value': {\"type\":[\"Margin\",\"Length\",\"LocalizedMargin\"],\"required\":true,\"description\":\"设置组件的外边距。参数为Length类型时，四个方向外边距同时生效。默认值：0。单位：vp。margin设置百分比时，上下左右外边距均以父容器的width作为基础值。\",\"default\":null}}\n", "设置组件自身的高度，缺省时使用元素自身内容需要的高度。若子组件的高大于父组件的高，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：height\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件高度。单位：vp\",\"default\":null}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "设置组件自身的宽度，缺省时使用元素自身内容需要的宽度。若子组件的宽大于父组件的宽，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：width\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件宽度。单位：vp\",\"default\":null}}\n", "设置组件在父容器的剩余空间所占比例。\n属性名称：flexGrow\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器在主轴方向上的剩余空间分配给此属性所在组件的比例。\",\"default\":0}}\n"], "result_metadatas": [{"component_name": "EmbeddedComponent", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "padding", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "onError", "source": "harmony-component-doc", "type": "event"}, {"component_name": "EmbeddedComponent", "name": "margin", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "height", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "width", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "flexGrow", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.44423776865005493, 0.45795226097106934, 0.45828062295913696, 0.462989866733551, 0.4652000069618225, 0.4754869341850281, 0.47876209020614624, 0.47962290048599243, 0.4858204126358032, 0.48967689275741577], "threshold": 0.6, "query_text_results": []}}, {"id": "ALjniRUWENts9fesN2YiXs", "description": "过滤低于阈值的查询结果: EmbeddedComponent的布局和样式如何与外部布局文件保持一致", "subtasks": [], "details": {"query": "EmbeddedComponent的布局和样式如何与外部布局文件保持一致", "result_ids": ["3772e408-5ca8-4086-969c-fa67491b8301", "e95ecba1-27a9-40e8-a3cb-fe81b62c5748", "399576ac-656d-4cfb-a3a1-e9f028ab3607", "c4e6323f-aaa0-4753-84bf-d4b944c2e8f7", "31f4200c-c24c-4c80-b86f-cab5521ead15", "f1a7c42a-c932-4f93-8c3a-d8b9f80d65e0", "c1c07b74-7ec8-4676-9719-ef41be44e836", "51b91b6e-45c5-46e0-b8dd-af637e35d8c9", "f5a933b1-e192-4e1a-86e0-2c951bcfd5cd", "602fcfa3-d59d-4961-9bf1-cded8fa6dc4f"], "result_documents": ["设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "相对偏移，组件相对原本的布局位置进行偏移。\n属性名称：offset\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"相对偏移，组件相对原本的布局位置进行偏移。offset属性不影响父容器布局，仅在绘制时调整位置。Position类型基于组件自身左上角偏移，Edges类型基于组件自身四边偏移。 offset属性设置 {x: x, y: y} 与设置 {left: x, top: y} 以及 {right: -x, bottom: -y} 效果相同, 类型LocalizedEdges支持镜像模式：LTR模式下start 等同于x，RTL模式下等同于-x\",\"default\":null}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "设置内边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：padding\n属性参数：{'value': {\"type\":[\"Padding\",\"Length\",\"LocalizedPadding\"],\"required\":true,\"description\":\"设置组件的内边距。参数为Length类型时，四个方向内边距同时生效。默认值：0。单位：vp。padding设置百分比时，上下左右内边距均以父容器的width作为基础值。\",\"default\":null}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", "设置外边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：margin\n属性参数：{'value': {\"type\":[\"Margin\",\"Length\",\"LocalizedMargin\"],\"required\":true,\"description\":\"设置组件的外边距。参数为Length类型时，四个方向外边距同时生效。默认值：0。单位：vp。margin设置百分比时，上下左右外边距均以父容器的width作为基础值。\",\"default\":null}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "设置组件自身的高度，缺省时使用元素自身内容需要的高度。若子组件的高大于父组件的高，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：height\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件高度。单位：vp\",\"default\":null}}\n"], "result_metadatas": [{"component_name": "EmbeddedComponent", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "offset", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "padding", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "margin", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "EmbeddedComponent", "name": "height", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.4430735111236572, 0.44600069522857666, 0.4688457250595093, 0.47475409507751465, 0.47565799951553345, 0.4773467183113098, 0.48079097270965576, 0.4840887784957886, 0.4958544373512268, 0.49927079677581787], "threshold": 0.6, "query_text_results": []}}], "details": null}], "details": null}, {"id": "kjcLL3hNGipDrXeW3YLNcZ", "description": "生成组件文档", "subtasks": [], "details": {"component_documents": ["# RelativeContainer\n接口描述：RelativeContainer()\n接口参数：{}\n指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n设置RelativeContainer容器内的屏障。\n属性名称：barrier\n属性参数：{'value': {\"type\":\"Array<BarrierStyle>\",\"required\":true,\"description\":\"Array中每个项目即为一条barrier。\",\"default\":null}}\n设置RelativeContainer容器内的辅助线。\n属性名称：guideLine\n属性参数：{'value': {\"type\":\"Array<GuideLineStyle>\",\"required\":true,\"description\":\"Array中每个项目即为一条guideline。\",\"default\":null}}\n设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n绝对定位，确定子组件相对父组件的位置。\n属性名称：position\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"绝对定位，确定子组件相对父组件的位置。当父容器为Row/Column/Flex时，设置position的子组件不占位。Position类型基于父组件左上角确定位置;Edges类型基于父组件四边确定位置，top/left/right/bottom分别为组件各边距离父组件相应边的边距，通过边距来确定组件相对于父组件的位置;LocalizedEdges类型基于父组件四边确定位置，支持镜像模式。适用于置顶显示、悬浮按钮等组件在父容器中位置固定的场景。不支持在宽高为零的布局容器上设置。当父容器为RelativeContainer, 且子组件设置了alignRules属性, 则子组件的position属性不生效。\",\"default\":null}}\n相对偏移，组件相对原本的布局位置进行偏移。\n属性名称：offset\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"相对偏移，组件相对原本的布局位置进行偏移。offset属性不影响父容器布局，仅在绘制时调整位置。Position类型基于组件自身左上角偏移，Edges类型基于组件自身四边偏移。 offset属性设置 {x: x, y: y} 与设置 {left: x, top: y} 以及 {right: -x, bottom: -y} 效果相同, 类型LocalizedEdges支持镜像模式：LTR模式下start 等同于x，RTL模式下等同于-x\",\"default\":null}}\n"], "related_types": {"Position": {"description": "位置类型，用于表示一个坐标点。", "type": "object", "properties": {"x": {"type": "Length", "required": false, "description": "x轴坐标，作为返回值时，类型为number，单位vp。", "enum": null, "enumDescriptions": null, "default": null}, "y": {"type": "Length", "required": false, "description": "y轴坐标，作为返回值时，类型为number，单位vp。", "enum": null, "enumDescriptions": null, "default": null}}, "examples": null}, "Length": {"description": "长度类型，用于描述尺寸单位。\n* string：需要显式指定像素单位，如'10px'，或百分比字符串，如'100%'。\n* number：默认单位为vp。\n* Resource：资源引用类型，引入系统或应用资源中的尺寸。", "type": ["string", "number", "Resource"], "enum": null, "enumDescriptions": null, "examples": null}, "Resource": {"description": "资源引用类型，用于设置组件属性的值。可以通过$r或者$rawfile创建Resource类型对象，不可以修改Resource中的各属性的值。", "type": "Resource", "enum": null, "enumDescriptions": null, "examples": ["```ets\n// belonging：系统资源或者应用资源，相应的取值为'sys'和'app'；\n// type：资源类型，支持'boolean'、'color'、'float'、'intarray'、'integer'、'pattern'、'plural'、'strarray'、'string'、'media'；\n// name：资源名称，在资源定义时确定。\n$r('belonging.type.name')\n```", "```ets\n// filename：工程中resources/rawfile目录下的文件名称。\n$rawfile('filename')\n```"]}, "LocalizedEdges": {"description": "位置类型，表示相对四边的偏移量。同时设置top和bottom，仅top生效；同时设置start和end，仅start生效。", "type": "object", "properties": {"top": {"type": "LengthMetrics", "required": false, "description": "相对顶边的偏移量。", "enum": null, "enumDescriptions": null, "default": null}, "bottom": {"type": "LengthMetrics", "required": false, "description": "相对底边的偏移量。", "enum": null, "enumDescriptions": null, "default": null}, "start": {"type": "LengthMetrics", "required": false, "description": "LTR模式时相对左边的偏移量，RTL模式时相对右边的偏移量。", "enum": null, "enumDescriptions": null, "default": null}, "end": {"type": "LengthMetrics", "required": false, "description": "LTR模式时相对右边的偏移量，RTL模式时相对左边的偏移量。", "enum": null, "enumDescriptions": null, "default": null}}, "examples": null}, "LengthMetrics": {"description": "用于设置长度属性，当长度单位为PERCENT时，值为1表示100%。", "type": "object", "properties": {"value": {"type": "number", "required": false, "description": "长度属性的值。", "enum": null, "enumDescriptions": null, "default": null}, "unit": {"type": "LengthUnit", "required": false, "description": "长度属性的单位，默认为vp。", "enum": null, "enumDescriptions": null, "default": null}}, "examples": null}, "LengthUnit": {"description": "长度属性单位枚举。", "type": "enum", "enum": ["PX", "VP", "FP", "PERCENT", "LPX"], "enumDescriptions": {"PX": "长度类型，用于描述以px像素单位为单位的长度。", "VP": "长度类型，用于描述以vp逻辑像素为单位的长度。", "FP": "长度类型，用于描述以fp字体像素为单位的长度。", "PERCENT": "长度类型，用于描述百分比长度。", "LPX": "长度类型，用于描述以lpx逻辑像素为单位的长度。"}, "examples": null}, "Edges": {"description": "位置类型，表示相对四边的偏移量。同时设置top和bottom，仅top生效；同时设置left和right，仅left生效。", "type": "object", "properties": {"top": {"type": "Dimension", "required": false, "description": "相对顶边的偏移量", "enum": null, "enumDescriptions": null, "default": null}, "left": {"type": "Dimension", "required": false, "description": "相对左边的偏移量", "enum": null, "enumDescriptions": null, "default": null}, "right": {"type": "Dimension", "required": false, "description": "相对右边的偏移量", "enum": null, "enumDescriptions": null, "default": null}, "bottom": {"type": "Dimension", "required": false, "description": "相对底边的偏移量", "enum": null, "enumDescriptions": null, "default": null}}, "examples": null}, "Dimension": {"description": "长度类型，用于描述尺寸单位。", "type": "enum", "enum": ["PX", "VP", "FP", "LPX", "PERCENT", "Resource"], "enumDescriptions": {"PX": "需要指定以px像素单位，如'10px'。", "VP": "需要指定数字或vp像素单位，如10或'10vp'。", "FP": "需要指定以fp像素单位，如'10fp'。", "LPX": "需要指定以lpx像素单位，如'10lpx'。", "PERCENT": "需要指定以%像素单位，如'10%'。", "Resource": "资源引用类型，引入系统资源或者应用资源中的尺寸。"}, "examples": null}}}}, {"id": "apghQqZpkhpfKbDPdXB34g", "description": "生成类型文档", "subtasks": [], "details": {"type_documents": ["类型名：Position\n类型描述：位置类型，用于表示一个坐标点。\n参数：{'x': {\"type\":\"Length\",\"required\":false,\"description\":\"x轴坐标，作为返回值时，类型为number，单位vp。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'y': {\"type\":\"Length\",\"required\":false,\"description\":\"y轴坐标，作为返回值时，类型为number，单位vp。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}}\n", "类型名：Length\n类型描述：长度类型，用于描述尺寸单位。\n* string：需要显式指定像素单位，如'10px'，或百分比字符串，如'100%'。\n* number：默认单位为vp。\n* Resource：资源引用类型，引入系统或应用资源中的尺寸。\n类型：['string', 'number', 'Resource']\n", "类型名：Resource\n类型描述：资源引用类型，用于设置组件属性的值。可以通过$r或者$rawfile创建Resource类型对象，不可以修改Resource中的各属性的值。\n类型：Resource\n类型Resource示例：\n```ets\n// belonging：系统资源或者应用资源，相应的取值为'sys'和'app'；\n// type：资源类型，支持'boolean'、'color'、'float'、'intarray'、'integer'、'pattern'、'plural'、'strarray'、'string'、'media'；\n// name：资源名称，在资源定义时确定。\n$r('belonging.type.name')\n```\n类型Resource示例：\n```ets\n// filename：工程中resources/rawfile目录下的文件名称。\n$rawfile('filename')\n```\n", "类型名：LocalizedEdges\n类型描述：位置类型，表示相对四边的偏移量。同时设置top和bottom，仅top生效；同时设置start和end，仅start生效。\n参数：{'top': {\"type\":\"LengthMetrics\",\"required\":false,\"description\":\"相对顶边的偏移量。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'bottom': {\"type\":\"LengthMetrics\",\"required\":false,\"description\":\"相对底边的偏移量。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'start': {\"type\":\"LengthMetrics\",\"required\":false,\"description\":\"LTR模式时相对左边的偏移量，RTL模式时相对右边的偏移量。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'end': {\"type\":\"LengthMetrics\",\"required\":false,\"description\":\"LTR模式时相对右边的偏移量，RTL模式时相对左边的偏移量。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}}\n", "类型名：LengthMetrics\n类型描述：用于设置长度属性，当长度单位为PERCENT时，值为1表示100%。\n参数：{'value': {\"type\":\"number\",\"required\":false,\"description\":\"长度属性的值。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'unit': {\"type\":\"LengthUnit\",\"required\":false,\"description\":\"长度属性的单位，默认为vp。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}}\n", "枚举类型名：LengthUnit\n枚举类型描述：长度属性单位枚举。\n枚举值：['PX', 'VP', 'FP', 'PERCENT', 'LPX']\n枚举值描述：\n* PX: 长度类型，用于描述以px像素单位为单位的长度。\n* VP: 长度类型，用于描述以vp逻辑像素为单位的长度。\n* FP: 长度类型，用于描述以fp字体像素为单位的长度。\n* PERCENT: 长度类型，用于描述百分比长度。\n* LPX: 长度类型，用于描述以lpx逻辑像素为单位的长度。\n\n", "类型名：Edges\n类型描述：位置类型，表示相对四边的偏移量。同时设置top和bottom，仅top生效；同时设置left和right，仅left生效。\n参数：{'top': {\"type\":\"Dimension\",\"required\":false,\"description\":\"相对顶边的偏移量\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'left': {\"type\":\"Dimension\",\"required\":false,\"description\":\"相对左边的偏移量\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'right': {\"type\":\"Dimension\",\"required\":false,\"description\":\"相对右边的偏移量\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'bottom': {\"type\":\"Dimension\",\"required\":false,\"description\":\"相对底边的偏移量\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}}\n", "枚举类型名：Dimension\n枚举类型描述：长度类型，用于描述尺寸单位。\n枚举值：['PX', 'VP', 'FP', 'LPX', 'PERCENT', 'Resource']\n枚举值描述：\n* PX: 需要指定以px像素单位，如'10px'。\n* VP: 需要指定数字或vp像素单位，如10或'10vp'。\n* FP: 需要指定以fp像素单位，如'10fp'。\n* LPX: 需要指定以lpx像素单位，如'10lpx'。\n* PERCENT: 需要指定以%像素单位，如'10%'。\n* Resource: 资源引用类型，引入系统资源或者应用资源中的尺寸。\n\n"]}}], "details": {"android_component": {"name": ["include"], "content": "<include layout=\"@layout/content_home\" />", "layout_description": "包含一个布局文件的引用，该布局文件路径为app.layout.content_home。", "function_description": "页面包含一个布局文件的引用，该布局文件路径为app.layout.content_home，具体内容和功能由该布局文件定义。"}}}, {"id": "XiXnGwF3HUbBvKY9TXDBk4", "description": "后处理鸿蒙组件代码", "subtasks": [], "details": {"harmony_component_code": "RelativeContainer() {\n  EmbeddedComponent({\n    src: $r('app.layout.content_home')\n  })\n    .width('100%')\n    .height('100%')\n}"}}], "details": null}], "details": {"breakdown_android_layout": {"tasks": [{"description": "实现安卓标题工具栏的转译，并保持布局和样式尽可能一致。", "done": false, "component": {"name": ["android.support.design.widget.AppBarLayout", "android.support.v7.widget.Toolbar"], "content": "<android.support.design.widget.AppBarLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:theme=\"@style/MyTheme.AppBarOverlay\">\n\n    <include layout=\"@layout/toolbar\" />\n\n</android.support.design.widget.AppBarLayout>"}}, {"description": "实现内容区域的转译，并保持布局和样式尽可能一致。", "done": false, "component": {"name": ["include"], "content": "<include layout=\"@layout/content_home\" />"}}]}, "translated_android_components": [{"description": "实现安卓标题工具栏的转译，并保持布局和样式尽可能一致。", "source_component": "android.support.design.widget.AppBarLayout", "source_component_code": "<android.support.design.widget.AppBarLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:theme=\"@style/MyTheme.AppBarOverlay\">\n\n    <include layout=\"@layout/toolbar\" />\n\n</android.support.design.widget.AppBarLayout>", "source_component_description": "垂直线性容器，宽度占满父容器，高度自适应，主题引用资源app.style.MyTheme.AppBarOverlay。包含一个工具栏，工具栏的布局引用资源app.layout.toolbar。", "target_component": ["Column"], "target_component_code": "Column() {\n  Toolbar()\n    .width('100%')\n    .height('auto')\n    .theme($r('app.style.MyTheme.AppBarOverlay'))\n    .include($r('app.layout.toolbar'))\n}\n.width('100%')\n.height('auto')", "target_component_description": "垂直线性容器，宽度占满父容器，高度自适应，主题引用资源app.style.MyTheme.AppBarOverlay。包含一个工具栏，工具栏的布局引用资源app.layout.toolbar。", "explanation": "1. 使用Column组件作为垂直线性容器，宽度设置为'100%'以占满父容器，高度设置为'auto'以自适应内容。\n2. 在Column中嵌套Toolbar组件，Toolbar的宽度和高度同样设置为'100%'和'auto'以自适应内容。\n3. 通过.theme($r('app.style.MyTheme.AppBarOverlay'))引用主题资源。\n4. 使用.include($r('app.layout.toolbar'))引用工具栏的布局资源。"}, {"description": "实现内容区域的转译，并保持布局和样式尽可能一致。", "source_component": "include", "source_component_code": "<include layout=\"@layout/content_home\" />", "source_component_description": "包含一个布局文件的引用，该布局文件路径为app.layout.content_home。", "target_component": ["RelativeContainer", "EmbeddedComponent"], "target_component_code": "RelativeContainer() {\n  EmbeddedComponent({\n    src: $r('app.layout.content_home')\n  })\n    .width('100%')\n    .height('100%')\n}", "target_component_description": "包含一个布局文件的引用，该布局文件路径为app.layout.content_home。", "explanation": "根据安卓组件描述，页面包含一个布局文件的引用，该布局文件路径为app.layout.content_home。在鸿蒙ArkUI中，使用RelativeContainer来处理布局约束，并使用EmbeddedComponent来加载和显示外部布局文件的内容。EmbeddedComponent的src属性引用布局文件，width和height设置为'100%'以确保布局文件内容占满整个父容器。"}]}}, "assemble_harmony_layout": "为了将已经完成的安卓布局转译结果合并为一个整体的鸿蒙ArkUI布局文件，我们需要确保所有组件的层次结构和布局关系正确，并且保持原始安卓页面的语义和结构一致性。以下是合并后的整体ArkUI布局文件：\n\n```ets\n@Entry\n@Component\nstruct MainLayout {\n  build() {\n    Column() {\n      // 标题工具栏\n      Column() {\n        Toolbar()\n          .width('100%')\n          .height('auto')\n          .theme($r('app.style.MyTheme.AppBarOverlay'))\n          .include($r('app.layout.toolbar'))\n      }\n      .width('100%')\n      .height('auto')\n\n      // 内容区域\n      RelativeContainer() {\n        EmbeddedComponent({\n          src: $r('app.layout.content_home')\n        })\n        .width('100%')\n        .height('100%')\n      }\n    }\n    .width('100%')\n    .height('100%')\n  }\n}\n```\n\n### 解释：\n1. **整体结构**：\n   - 使用`Column`作为最外层的容器，确保整个布局是垂直排列的。\n   - 内部包含两个主要部分：标题工具栏和内容区域。\n\n2. **标题工具栏**：\n   - 使用`Column`包裹`Toolbar`组件，确保工具栏的宽度和高度正确。\n   - 使用`.theme($r('app.style.MyTheme.AppBarOverlay'))`引用主题资源，保持样式一致。\n   - 使用`.include($r('app.layout.toolbar'))`引用工具栏的布局资源。\n\n3. **内容区域**：\n   - 使用`RelativeContainer`作为内容区域的容器，确保内容的布局是相对的。\n   - 使用`EmbeddedComponent`组件引用内容布局文件`app.layout.content_home`，并设置宽度和高度为100%，以确保内容区域占满剩余空间。\n\n### 注意事项：\n- **层次结构**：确保所有组件的层次结构正确，`Column`作为最外层容器，内部包含标题工具栏和内容区域。\n- **样式和布局**：确保所有组件的样式和布局属性正确，保持与原始安卓页面一致。\n- **资源引用**：确保所有资源（如主题、布局文件等）正确引用，避免遗漏。\n\n通过以上步骤，我们成功将安卓布局转译结果合并为一个整体的鸿蒙ArkUI布局文件，确保了布局和样式的完整性和一致性。", "time": 72.64521861076355}