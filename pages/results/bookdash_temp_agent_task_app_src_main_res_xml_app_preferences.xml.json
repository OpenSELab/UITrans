{"android_layout": {"name": "app/src/main/res/xml/app_preferences.xml", "content": "<androidx.preference.PreferenceScreen\n    xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <androidx.preference.Preference\n        android:key=\"tutorial_display_key\"\n        android:summary=\"@string/show_tutorial_settings_summary\"\n        android:title=\"@string/show_tutorial_settings_title\" />\n\n    <androidx.preference.SwitchPreferenceCompat\n        android:defaultValue=\"true\"\n        android:key=\"pref_new_book_notification\"\n        android:summary=\"@string/settings_new_book_notifications_summary\"\n        android:title=\"@string/settings_new_book_notifications\"\n        />\n</androidx.preference.PreferenceScreen>", "java": "", "contains": [], "mock_data": {}, "source": "bookdash"}, "breakdown_android_layout": {"tasks": [{"description": "转译Preference组件，包括其标题和摘要，并保持布局和样式尽可能一致。", "done": false, "component": {"name": ["androidx.preference.Preference"], "content": "<androidx.preference.Preference\n    android:key=\"tutorial_display_key\"\n    android:summary=\"@string/show_tutorial_settings_summary\"\n    android:title=\"@string/show_tutorial_settings_title\" />"}}, {"description": "转译SwitchPreferenceCompat组件，包括其默认值、标题和摘要，并保持布局和样式尽可能一致。", "done": false, "component": {"name": ["androidx.preference.SwitchPreferenceCompat"], "content": "<androidx.preference.SwitchPreferenceCompat\n    android:defaultValue=\"true\"\n    android:key=\"pref_new_book_notification\"\n    android:summary=\"@string/settings_new_book_notifications_summary\"\n    android:title=\"@string/settings_new_book_notifications\" />"}}, {"description": "将PreferenceScreen容器与其内部的所有Preference组件一起转译，确保布局和功能的一致性。", "done": false, "component": {"name": ["androidx.preference.PreferenceScreen", "androidx.preference.Preference", "androidx.preference.SwitchPreferenceCompat"], "content": "<androidx.preference.PreferenceScreen\n    xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <androidx.preference.Preference\n        android:key=\"tutorial_display_key\"\n        android:summary=\"@string/show_tutorial_settings_summary\"\n        android:title=\"@string/show_tutorial_settings_title\" />\n\n    <androidx.preference.SwitchPreferenceCompat\n        android:defaultValue=\"true\"\n        android:key=\"pref_new_book_notification\"\n        android:summary=\"@string/settings_new_book_notifications_summary\"\n        android:title=\"@string/settings_new_book_notifications\" />\n</androidx.preference.PreferenceScreen>"}}]}, "translations": [{"description": "转译Preference组件，包括其标题和摘要，并保持布局和样式尽可能一致。", "source_component": "androidx.preference.Preference", "source_component_code": "<androidx.preference.Preference\n    android:key=\"tutorial_display_key\"\n    android:summary=\"@string/show_tutorial_settings_summary\"\n    android:title=\"@string/show_tutorial_settings_title\" />", "source_component_description": "偏好设置项，宽度占满父容器，高度自适应，标题引用资源app.string.show_tutorial_settings_title，摘要引用资源app.string.show_tutorial_settings_summary。", "target_component": ["Text"], "target_component_code": "Column() {\n  Text($r('app.string.show_tutorial_settings_title'))\n    .fontSize(20)\n    .fontWeight(FontWeight.Bold)\n    .width('100%')\n    .height('auto')\n  Text($r('app.string.show_tutorial_settings_summary'))\n    .fontSize(16)\n    .width('100%')\n    .height('auto')\n}", "target_component_description": "偏好设置项，宽度占满父容器，高度自适应，标题引用资源app.string.show_tutorial_settings_title，摘要引用资源app.string.show_tutorial_settings_summary。", "explanation": "根据安卓组件描述，Preference组件需要显示标题和摘要。在鸿蒙ArkUI中，使用Column组件作为容器，包含两个Text组件分别用于显示标题和摘要。标题和摘要的宽度设置为'100%'以占满父容器，高度设置为'auto'以自适应内容。标题的文本通过$r('app.string.show_tutorial_settings_title')引用资源，摘要的文本通过$r('app.string.show_tutorial_settings_summary')引用资源。标题的文本大小设置为20，字体加粗；摘要的文本大小设置为16。"}, {"description": "转译SwitchPreferenceCompat组件，包括其默认值、标题和摘要，并保持布局和样式尽可能一致。", "source_component": "androidx.preference.SwitchPreferenceCompat", "source_component_code": "<androidx.preference.SwitchPreferenceCompat\n    android:defaultValue=\"true\"\n    android:key=\"pref_new_book_notification\"\n    android:summary=\"@string/settings_new_book_notifications_summary\"\n    android:title=\"@string/settings_new_book_notifications\" />", "source_component_description": "开关偏好设置组件，默认值为true，键为pref_new_book_notification，摘要引用资源app.string.settings_new_book_notifications_summary，标题引用资源app.string.settings_new_book_notifications。", "target_component": ["Toggle", "Text"], "target_component_code": "Column() {\n  Toggle()\n    .selectedColor($r('app.color.colorAccent'))\n    .onChange((isOn: boolean) => {\n      this.isNotificationOn = isOn;\n    })\n  Text($r('app.string.settings_new_book_notifications'))\n    .fontSize(18)\n    .margin({ top: 8 })\n  Text($r('app.string.settings_new_book_notifications_summary'))\n    .fontSize(14)\n    .margin({ top: 8 })\n}\n.width('100%')", "target_component_description": "开关偏好设置组件，默认值为true，键为pref_new_book_notification，摘要引用资源app.string.settings_new_book_notifications_summary，标题引用资源app.string.settings_new_book_notifications。", "explanation": "1. 使用Toggle组件来实现开关功能，通过selectedColor属性设置开关的颜色。\n2. 使用Text组件来显示标题和摘要文本，分别引用资源app.string.settings_new_book_notifications和app.string.settings_new_book_notifications_summary。\n3. 通过设置Toggle和Text的属性来实现与安卓组件相同的功能和样式，例如使用fontSize设置字体大小，使用margin设置间距。\n4. 使用Column组件来包裹Toggle和Text组件，确保布局和样式的一致性。\n5. 通过width('100%')设置Column组件的宽度为父组件的宽度，确保布局的完整性。"}, {"description": "将PreferenceScreen容器与其内部的所有Preference组件一起转译，确保布局和功能的一致性。", "source_component": "androidx.preference.PreferenceScreen", "source_component_code": "<androidx.preference.PreferenceScreen\n    xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <androidx.preference.Preference\n        android:key=\"tutorial_display_key\"\n        android:summary=\"@string/show_tutorial_settings_summary\"\n        android:title=\"@string/show_tutorial_settings_title\" />\n\n    <androidx.preference.SwitchPreferenceCompat\n        android:defaultValue=\"true\"\n        android:key=\"pref_new_book_notification\"\n        android:summary=\"@string/settings_new_book_notifications_summary\"\n        android:title=\"@string/settings_new_book_notifications\" />\n</androidx.preference.PreferenceScreen>", "source_component_description": "一个偏好设置屏幕容器，宽度占满父容器，高度自适应。\n- 偏好设置项，宽度占满父容器，高度自适应，标题引用资源app.string.show_tutorial_settings_title，摘要引用资源app.string.show_tutorial_settings_summary。\n- 切换偏好设置项，宽度占满父容器，高度自适应，默认值为true，标题引用资源app.string.settings_new_book_notifications，摘要引用资源app.string.settings_new_book_notifications_summary。", "target_component": ["Column", "Text", "Toggle"], "target_component_code": "Column() {\n  Text($r('app.string.show_tutorial_settings_title'))\n    .width('100%')\n    .height('auto')\n    .fontSize(20)\n    .margin({ bottom: '8vp' })\n  Text($r('app.string.show_tutorial_settings_summary'))\n    .width('100%')\n    .height('auto')\n    .fontSize(16)\n    .margin({ bottom: '8vp' })\n  Toggle()\n    .width('100%')\n    .height('auto')\n    .selected(true)\n    .onChange((isOn: boolean) => {\n      console.info(`Toggle is ${isOn ? 'on' : 'off'}`);\n    })\n  Text($r('app.string.settings_new_book_notifications'))\n    .width('100%')\n    .height('auto')\n    .fontSize(20)\n    .margin({ bottom: '8vp' })\n  Text($r('app.string.settings_new_book_notifications_summary'))\n    .width('100%')\n    .height('auto')\n    .fontSize(16)\n}\n.width('100%')\n.height('auto')", "target_component_description": "一个偏好设置屏幕容器，宽度占满父容器，高度自适应。\n- 偏好设置项，宽度占满父容器，高度自适应，标题引用资源app.string.show_tutorial_settings_title，摘要引用资源app.string.show_tutorial_settings_summary。\n- 切换偏好设置项，宽度占满父容器，高度自适应，默认值为true，标题引用资源app.string.settings_new_book_notifications，摘要引用资源app.string.settings_new_book_notifications_summary。", "explanation": "1. 使用Column组件作为容器，实现垂直布局。\n2. 第一个Preference组件使用两个Text组件分别显示标题和摘要，宽度占满父容器，高度自适应。\n3. 第二个SwitchPreferenceCompat组件使用Toggle组件实现切换开关功能，默认状态为开启，宽度占满父容器，高度自适应。\n4. 为每个Text组件设置合适的字体大小和间距，确保布局和样式与安卓组件一致。\n5. 使用$r('app.string.xxx')引用资源，确保字符串内容正确。\n6. 为Toggle组件添加onChange事件，模拟切换开关的行为。"}], "translation_agent_task": {"id": "WWqarEmRY74DaeJf5ueKx8", "description": "转译安卓布局组件", "subtasks": [{"id": "E6ZGV67YbJeSX5AXGwPzQn", "description": "根据转译表转译组件v1", "subtasks": [{"id": "KrxMmy6Mzo9yyRPPVDkAPD", "description": "生成组件描述", "subtasks": [], "details": {"prompt": "请根据以下安卓XML代码编写一个详细的通用描述和功能描述，供其他开发框架如iOS或鸿蒙的开发者实现同样的布局样式。描述应包含以下内容：\n\n布局属性：包括组件的宽度、高度、边距、填充、对齐方式等。\n组件样式和外观：包括颜色、字体、透明度、圆角等。\n组件排列和嵌套关系：例如垂直或水平布局、组件之间的对齐方式、父子关系。\n组件功能和交互：例如按钮的点击事件、输入框的输入验证逻辑等。\n引用的资源：如自定义的背景图片、颜色等，请指出资源路径或名称。\n请避免使用安卓特有的术语，而是使用通用的描述语言，确保其他框架的开发者可以理解并实现同样的布局和功能，例如：match_parent描述为占满父容器的宽度。同时，请确保描述涵盖每个组件的属性、样式和功能。\n\n你在编写通用描述和功能描述时，需要遵守以下规则：\n## 规则#1\n这条规则适用于所有组件的宽度、高度、外边距、内边距、字体大小等属性的单位。\n对于高度、宽度、外边距、内边距等等属性的单位应全部采用vp；\n对于字体大小等属性的单位应全部采用fp。\n\n## 规则#2\n这条规则适用于字体设置。\n若安卓组件中存在字体集的设置，应将其修改为'HarmonyOS Sans'字体集；\n若安卓组件中不存在字体集的设置，请保持不变。\n\n## 规则#3\n这条规则适用于资源引用。\n对于引用@drawable的资源，请将其修改为media;\n对于引用@color的资源，请将其修改为color;\n对于引用@strings的资源，请将其修改为string;\n对于引用@dimen的资源，请将其修改为float;\n对于引用@array的资源，如果资源是字符串数组，请将其修改为strarray，如果资源是整型数组，请将其修改为intarray。\n\n## 规则#4\n这条规则适用于通用描述的顺序。\n通用描述的顺序应该按照组件的逻辑顺序进行排列，确保描述的完整性和逻辑性。\n每个组件的描述应该包括布局属性、样式和外观、排列和嵌套关系、功能和交互、引用的资源等内容。\n\n## 规则#5\n这条规则适用于通用描述的内容。\n通用描述应该按照组件的嵌套关系进行描述，从外到内逐级描述每个组件的属性、样式和功能。\n请忽略有关主题的描述。\n\n## 规则6\n这条规则适用于功能效果描述。\n功能效果描述应该侧重于页面呈现的效果，包括组件的默认属性和默认行为，而不是具体的代码实现细节。\n例如：安卓复选框是包含文字的，而鸿蒙复选框是不包含文字的，因此在功能效果描述中应该添加复选框右侧文字的描述。\n安卓组件：\n<ChekBox\n    android:id=\"@+id/checkbox\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Check me\" />\n功能效果描述：一个复选框，右侧包含文字“Check me”，整体宽度和高度自适应。\n\n以下是一个可供参考的示例：\n安卓XML示例代码：\n```xml\n<LinearLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    android:padding=\"16dp\"\n    android:background=\"@drawable/custom_background\">\n\n    <TextView\n        android:id=\"@+id/title\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World\"\n        android:textColor=\"@color/primary_text\"\n        android:textSize=\"18sp\" />\n\n    <Button\n        android:id=\"@+id/submit_button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Submit\"\n        android:backgroundTint=\"#FF5722\" />\n</LinearLayout>\n```\n通用描述示例：\n- 垂直线性容器，宽度占满父容器，高度自适应，内边距为16vp，背景引用资源app.media.custom_background。\n    - 文本视图，宽度自适应，高度自适应，文本内容为“Hello World”，文本颜色引用资源app.color.primary_text，字体大小为18fp。\n    - 按钮，宽度自适应，高度自适应，文本内容为“Submit”，背景颜色为#FF5722。\n\n功能效果描述示例：\n实现了一个垂直线性容器，在容器中包含一个文本视图和一个按钮，其中文本视图，高度和宽度自适应，显示“Hello World”，字体颜色引用了 app.color.primary_text 资源，字体大小为18fp；在文本视图的正下方有一个按钮，按钮宽度和高度自适应，按钮显示“Submit”，背景颜色为 #FF5722。\n\n安卓XML代码如下：\n<androidx.preference.Preference\n    android:key=\"tutorial_display_key\"\n    android:summary=\"@string/show_tutorial_settings_summary\"\n    android:title=\"@string/show_tutorial_settings_title\" />\n请根据以上安卓XML代码编写一个通用描述，然后编写这页面实现的功能效果描述。\n\n**重要**：请确保通用描述和功能效果描述的准确性和完整性，确保其他开发者可以根据描述实现相同的布局和功能。\n", "component_description": {"layout_description": "偏好设置项，宽度占满父容器，高度自适应，标题引用资源app.string.show_tutorial_settings_title，摘要引用资源app.string.show_tutorial_settings_summary。", "function_description": "实现了一个偏好设置项，显示标题为 app.string.show_tutorial_settings_title 的内容，下方显示摘要为 app.string.show_tutorial_settings_summary 的内容。"}}}, {"id": "6hPtEKiMki3PXMxM7bijRy", "description": "查询组件文档", "subtasks": [{"id": "QZKVJqnNg2gqCyq9yi54EJ", "description": "生成组件查询", "subtasks": [], "details": {"prompt": "你在一家软件公司工作，你被指派去为将安卓组件转译为鸿蒙ArkUI代码。\n\n\n待转译的安卓组件如下：\n# ['androidx.preference.Preference']\n实现了一个偏好设置项，显示标题为 app.string.show_tutorial_settings_title 的内容，下方显示摘要为 app.string.show_tutorial_settings_summary 的内容。\n<androidx.preference.Preference\n    android:key=\"tutorial_display_key\"\n    android:summary=\"@string/show_tutorial_settings_summary\"\n    android:title=\"@string/show_tutorial_settings_title\" />\n\n实现这个需求可能会使用到某些ArkUI组件。\n以下是关于鸿蒙ArkUI API 12的组件基本文档：\n## AlphabetIndexer\n可以与容器组件联动用于按逻辑结构快速定位容器显示区域的组件。\n## Blank\n空白填充组件，在容器主轴方向上，空白填充组件具有自动填充容器空余部分的能力。仅当父组件为Row/Column/Flex时生效。\n## Button\n按钮组件，可快速创建不同样式的按钮。可以包含单个子组件。\n## CalendarPicker\n日历选择器组件，提供下拉日历弹窗，可以让用户选择日期。\n## Checkbox\n提供多选框组件，通常用于某选项的打开或关闭。可以包含Text组件。\n## CheckboxGroup\n多选框群组，用于控制多选框全选或者不全选状态。\n## Component3D\n3D渲染组件，可以加载3D模型资源并做自定义渲染，通常用于3D动效场景。\n## ContainerSpan\nText组件的子组件，用于统一管理多个Span、ImageSpan的背景色及圆角弧度。\n## DataPanel\n数据面板组件，用于将多个数据占比情况使用占比图进行展示。\n## DatePicker\n日期选择器组件，用于根据指定日期范围创建日期滑动选择器。\n## Divider\n提供分隔器组件，分隔不同内容块/内容元素。\n## Gauge\n数据量规图表组件，用于将数据展示为环形图表。\n## Image\n图片组件，常用于在应用中显示图片。Image支持加载PixelMap、ResourceStr和DrawableDescriptor类型的数据源，支持png、jpg、jpeg、bmp、svg、webp、gif和heif类型的图片格式。\n## ImageAnimator\n提供帧动画组件来实现逐帧播放图片的能力，可以配置需要播放的图片列表，每张图片可以配置时长。\n## ImageSpan\nText、ContainerSpan组件的子组件，用于显示行内图片。\n## LoadingProgress\n用于显示加载动效的组件。\n## Marquee\n跑马灯组件，用于滚动展示一段单行文本。仅当文本内容宽度超过跑马灯组件宽度时滚动，不超过时不滚动。\n## Menu\n以垂直列表形式显示的菜单。\n## MenuItem\n用来展示菜单Menu中具体的item菜单项。\n## MenuItemGroup\n该组件用来展示菜单MenuItem的分组。\n## Navigation\nNavigation组件是路由导航的根视图容器，一般作为Page页面的根容器使用，其内部默认包含了标题栏、内容区和工具栏，其中内容区默认首页显示导航内容（Navigation的子组件）或非首页显示（[NavDestination](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navdestination-V5)的子组件），首页和非首页通过路由进行切换。\n## NavRouter\n导航组件，默认提供点击响应处理，不需要开发者自定义点击事件逻辑。\n## NavDestination\n作为子页面的根容器，用于显示Navigation的内容区。\n## NodeContainer\n基础组件，不支持尾随添加子节点。组件接受一个NodeController的实例接口。需要NodeController组合使用。该组件下仅支持挂载自定义节点FrameNode或者是BuilderNode中获取的根节点FrameNode。不支持挂载查询获得的原生系统组件代理节点。\n## PatternLock\n图案密码锁组件，以九宫格图案的方式输入密码，用于密码验证场景。手指在PatternLock组件区域按下时开始进入输入状态，手指离开屏幕时结束输入状态完成密码输入。\n## Progress\n进度条组件，用于显示内容加载或操作处理等进度。\n## QRCode\n用于显示单个二维码的组件。\n## Radio\n单选框，提供相应的用户交互选择项。\n## Rating\n提供在给定范围内选择评分的组件。Rating组件的接口，用于设置评分值和是否作为指示器使用。\n## RichEditor\n支持图文混排和文本交互式编辑的组件。\n## RichText\n富文本组件，解析并显示HTML格式文本。\n## ScrollBar\n滚动条组件ScrollBar，用于配合可滚动组件使用，如List、Grid、Scroll。\n## Search\n搜索框组件，适用于浏览器的搜索内容输入框等应用场景。可以包含单个子组件。\n## Select\n提供下拉选择菜单，可以让用户在多个选项之间选择。可以包含单个子组件。\n## Slider\n滑动条组件，通常用于快速调节设置值，如音量调节、亮度调节等应用场景。\n## Span\n作为Text、ContainerSpan组件的子组件，用于显示行内文本的组件。\n## Stepper\n步骤导航器组件，适用于引导用户按照步骤完成任务的导航场景。\n## StepperItem\n用作Stepper组件的页面子组件。\n## SymbolSpan\n作为Text组件的子组件，用于显示图标小符号的组件。\n## SymbolGlyph\n显示图标小符号的组件。\n## Text\n显示一段文本的组件，可以包含Span、ImageSpan、SymbolSpan和ContainerSpan子组件。\n## TextArea\n多行文本输入框组件，当输入的文本内容超过组件宽度时会自动换行显示。\n## TextClock\nTextClock组件通过文本将当前系统时间显示在设备上。支持不同时区的时间显示，最高精度到秒级。\n## TextPicker\n根据range指定的选择范围创建文本选择器。\n## TextTimer\n通过文本显示计时信息并控制其计时器状态的组件。\n## TimePicker\n时间选择组件，根据指定参数创建选择器，支持选择小时及分钟。\n## Toggle\n组件提供勾选框样式、状态按钮样式及开关样式。\n## TextInput\n单行文本输入框组件。\n## XComponent\n可用于EGL/OpenGLES和媒体数据写入，并显示在XComponent组件。\n## Canvas\n提供画布组件，用于自定义绘制图形。\n## CanvasGradient\n渐变对象。\n## CanvasPattern\n一个Object对象，使用createPattern方法创建，通过指定图像和重复方式创建图片填充的模板。\n## DrawingRenderingContext\n使用DrawingRenderingContext在Canvas组件上进行绘制，绘制对象可以是矩形、文本、图片等。\n## ImageBitmap\nImageBitmap对象可以存储canvas渲染的像素数据。\n## ImageData\nImageData对象可以存储canvas渲染的像素数据。\n## Matrix2D\n矩阵对象，可以对矩阵进行缩放、旋转、平移等变换。\n## OffscreenCanvas\nOffscreenCanvas组件用于自定义绘制图形，可以在屏幕外渲染的画布，避免影响应用程序主线程性能。\n## OffscreenCanvasRenderingContext2D\n使用OffscreenCanvasRenderingContext2D在Canvas上进行离屏绘制，绘制对象可以是矩形、文本、图片等。离屏绘制是指将需要绘制的内容先绘制在缓存区，然后将其转换成图片，一次性绘制到canvas上，加快了绘制速度。\n## Path2D\n路径对象，支持通过对象的接口进行路径的描述，并通过Canvas的stroke接口或者fill接口进行绘制。\n## Badge\n可以附加在单个组件上用于信息标记的容器组件。\n## Column\n沿垂直方向布局的容器组件，可以包含子组件。\n## ColumnSplit\n将子组件纵向布局，并在每个子组件之间插入一根横向的分割线。\n## Counter\n计数器组件，提供相应的增加或者减少的计数操作。\n## EmbeddedComponent\n用于支持在当前页面嵌入本应用内其他EmbeddedUIExtensionAbility提供的UI。EmbeddedUIExtensionAbility在独立进程中运行，完成页面布局和渲染。通常用于有进程隔离诉求的模块化开发场景。\n## Flex\n以弹性方式布局子组件的容器组件。\n## GridCol\n栅格子组件，必须作为栅格容器组件(GridRow)的子组件使用。可以包含单个子组件。\n## GridRow\n栅格容器组件，仅可以和栅格子组件(GridCol)在栅格布局场景中使用。\n## Grid\n网格容器，由“行”和“列”分割的单元格所组成，通过指定“项目”所在的单元格做出各种各样的布局。\n## GridItem\n网格容器中单项内容容器，仅支持作为Grid组件的子组件使用。\n## List\n列表包含一系列相同宽度的列表项。适合连续、多行呈现同类数据，例如图片和文本。可以包含ListItem、ListItemGroup子组件，支持渲染控制类型（if/else、ForEach、LazyForEach和Repeat）。\n## ListItem\n用来展示列表具体item，必须配合List来使用。\n## ListItemGroup\n该组件用来展示列表item分组，宽度默认充满List组件，必须配合List组件来使用。\n## RelativeContainer\n相对布局组件，用于复杂场景中元素对齐的布局。\n## Row\n沿水平方向布局容器，可以包含子组件。\n## Scroll\n可滚动的容器组件，当子组件的布局尺寸超过父组件的尺寸时，内容可以滚动，支持单个子组件。\n## Stack\n堆叠容器，子组件按照顺序依次入栈，后一个子组件覆盖前一个子组件。可以包含多个子组件。\n## Tabs\n通过页签进行内容视图切换的容器组件，每个页签对应一个内容视图，不支持自定义组件作为子组件， 仅可包含子组件TabContent。\n## TabContent\n仅在Tabs中使用，对应一个切换页签的内容视图，支持单个子组件。\n## WaterFlow\n瀑布流容器，由“行”和“列”分割的单元格所组成，通过容器自身的排列规则，将不同大小的“项目”自上而下，如瀑布般紧密布局。\n## WithTheme\nWithTheme组件用于设置应用局部页面自定义主题风格，可设置子组件深浅色模式和自定义配色。\n## Circle\n用于绘制圆形的组件。\n## Ellipse\n椭圆绘制组件。\n## Line\n直线绘制组件。\n## Polyline\n折线绘制组件。\n## Polygon\n多边形绘制组件。\n## Path\n路径绘制组件，根据绘制路径生成封闭的自定义形状。\n## Rect\n绘制组件的父组件，实现类似SVG的效果。绘制组件单独使用，用于在页面上绘制指定的图形。\n## Shape\n矩形绘制组件。\n## AlertDialog\n显示警告弹窗组件，可设置文本内容与响应回调。\n## ActionSheet\n列表选择弹窗 (ActionSheet) 是一个全局UI方法，属于ArkTS组件，用于在ArkUI（方舟UI框架）中显示一个带有多个选项的弹窗。\n## CustomDialog\n通过CustomDialogController类显示自定义弹窗。使用弹窗组件时，可优先考虑自定义弹窗，便于自定义弹窗的样式与内容。\n## CalendarPickerDialog\n点击日期弹出日历选择器弹窗，可选择弹窗内任意日期。\n## DatePickerDialog\n日期滑动选择器弹窗，用于在弹窗上展示日期选择器。\n## TimePickerDialog\n时间滑动选择器弹窗 (TimePickerDialog) 是一个全局UI方法，用于以24小时的时间区间创建时间滑动选择器，并展示在弹窗上。\n## TextPickerDialog\n文本滑动选择器弹窗，用于在指定的选择范围内创建文本选择器并展示在弹窗上。\n## Video\n用于播放视频文件并控制其播放状态的组件。\n## LocationButton\n安全控件的位置控件，用户通过点击该位置按钮，可以临时获取精准定位权限，而不需要权限弹框授权确认。\n## PasteButton\n安全控件的粘贴按钮，用户通过点击该粘贴按钮，可以临时获取读取剪贴板权限。\n## SaveButton\n安全控件的保存控件，用户通过点击该保存按钮，可以临时获取存储权限，而不需要权限弹框授权确认。\n## ChipGroup\nChipGroup高级组件，提供操作块群组，用于对文件或者资源内容进行分类等场景。\n## Chip\n操作块组件，用于搜索框历史记录或者邮件发送列表等场景。\n## ToolBar\n工具栏用于展示针对当前界面内容的操作选项，在界面底部显示。底部最多显示5个入口，超过则收纳入“更多”子项中，在最右侧显示。\n## ComposeTitleBar\n一种普通标题栏，支持设置标题、头像（可选）和副标题（可选），可用于一级页面、二级及其以上界面配置返回键。\n\n\n\n在开始任务之前，你需要对待转译的安卓组件进行分析，以便选择合适的ArkUI组件来实现相同的功能。\n然后，你需要从上述ArkUI组件中选择一个或多个组件，使其能够实现上述安卓组件的功能，并保持布局和样式尽可能一致。\n对于无法直接转译的安卓组件，你可以通过组合多个ArkUI组件来实现，一定不能选择不存在的组件。\n在完成选择后，你需要编写一条或多条用于在知识库或RAG系统中检索的查询语句。每条查询应聚焦于不同的功能细节或组件的具体属性，帮助快速、精确地检索到相关的文档、代码示例或实现方法。\n**重要**：你只能从[AlphabetIndexer, Blank, Button, CalendarPicker, Checkbox, CheckboxGroup, Component3D, ContainerSpan, DataPanel, DatePicker, Divider, Gauge, Image, ImageAnimator, ImageSpan, LoadingProgress, Marquee, Menu, MenuItem, MenuItemGroup, Navigation, NavRouter, NavDestination, NodeContainer, PatternLock, Progress, QRCode, Radio, Rating, RichEditor, RichText, ScrollBar, Search, Select, Slider, Span, Stepper, StepperItem, SymbolSpan, SymbolGlyph, Text, TextArea, TextClock, TextPicker, TextTimer, TimePicker, Toggle, TextInput, XComponent, Canvas, CanvasGradient, CanvasPattern, DrawingRenderingContext, ImageBitmap, ImageData, Matrix2D, OffscreenCanvas, OffscreenCanvasRenderingContext2D, Path2D, Badge, Column, ColumnSplit, Counter, EmbeddedComponent, Flex, GridCol, GridRow, Grid, GridItem, List, ListItem, ListItemGroup, RelativeContainer, Row, Scroll, Stack, Tabs, TabContent, WaterFlow, WithTheme, Circle, Ellipse, Line, Polyline, Polygon, Path, Rect, Shape, AlertDialog, ActionSheet, CustomDialog, CalendarPickerDialog, DatePickerDialog, TimePickerDialog, TextPickerDialog, Video, LocationButton, PasteButton, SaveButton, ChipGroup, Chip, ToolBar, ComposeTitleBar]中选择ArkUI组件，请你认真检查，一定不可以选择不存在的ArkUI组件。\n**重要**：查询语句需要涵盖以下方面：布局属性（如宽度、高度、边距等）、组件的样式和外观（如颜色、字体、透明度等）、组件的排列和嵌套关系（如垂直或水平布局、对齐方式）、组件的功能和交互（如点击事件、输入验证），确保每条查询简洁明了且仅聚焦单一方面，突出关键信息，以便加快内容检索过程。\n\n## 以下是选择组件的额外规则：\n* 规则1：待转译的安卓布局文件中存在属性layout_constraintXXX_toXXXOf，其中XXX为Start、End、Top、Bottom等，你应该额外选择鸿蒙ArkUI的RelativeContainer组件。\n* 规则2：当使用com.google.android.material.appbar.AppBarLayout与androidx.appcompat.widget.Toolbar实现标题栏时，你应该选择Row、Text、Image等组件来实现标题栏，需要注意鸿蒙组件的Toolbar特指底部导航栏而非安卓中的标题栏。\n* 规则3：Scroll组件的子组件通常采用Column或Row组件，你应该根据滚动的方向来选择，当滚动方向为垂直时，应该选择Column组件，当滚动方向为水平时，应该选择Row组件。\n\n以下是一个示例：\n安卓组件：EditText\n<EditText\nandroid:id=\"@+id/et_1\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"50dp\"\nandroid:layout_marginBottom=\"15dp\"\nandroid:autofillHints=\"\"\nandroid:hint=\"请输入文字\"\nandroid:inputType=\"text\"\nandroid:paddingLeft=\"15dp\"\nandroid:paddingRight=\"15dp\"\nandroid:textColor=\"@color/black\"\nandroid:textSize=\"16sp\" />\n回答：\n```json\n{\n    \"components\": [\"TextInput\"],\n    \"queries\": [\n        {\n            \"queries\": [\"设置输入框的高度\", \"设置输入框的宽度\", \"设置输入框的底部边距\", \"设置输入框的提示文本\", \"设置输入框的输入类型\", \"设置输入框的左内边距\", \"设置输入框的右内边距\", \"设置输入框的文本颜色\", \"设置输入框的字体大小\"],\n            \"component\": \"TextInput\",\n        },\n    ],\n    \"idea\": \"可以选择TextInput组件来实现EditText组件的功能，设置TextInput组件的属性来实现EditText组件的样式和功能。\"\n}\n```", "component_query": {"components": ["Text"], "queries": [{"component": "Text", "queries": ["设置文本组件的标题", "设置文本组件的摘要", "设置文本组件的布局属性"]}], "idea": "选择Text组件来实现偏好设置项的标题和摘要显示功能，通过设置Text组件的属性来实现标题和摘要的显示效果。"}}}, {"id": "iP3K9ur4LYdht4VRgbp88d", "description": "修正组件查询", "subtasks": [], "details": {"component_query": {"components": ["Text"], "queries": [{"component": "Text", "queries": ["设置文本组件的标题", "设置文本组件的摘要", "设置文本组件的布局属性"]}], "idea": "选择Text组件来实现偏好设置项的标题和摘要显示功能，通过设置Text组件的属性来实现标题和摘要的显示效果。"}, "corrected_component_query": {"components": ["Text"], "queries": [{"component": "Text", "queries": ["设置文本组件的标题", "设置文本组件的摘要", "设置文本组件的布局属性"]}], "idea": "选择Text组件来实现偏好设置项的标题和摘要显示功能，通过设置Text组件的属性来实现标题和摘要的显示效果。"}}}, {"id": "oNMzqYiVyrvYKqy57DvEEB", "description": "查询示例文档", "subtasks": [], "details": {"query": "实现了一个偏好设置项，显示标题为 app.string.show_tutorial_settings_title 的内容，下方显示摘要为 app.string.show_tutorial_settings_summary 的内容。", "k": 3, "component_name": ["Text"], "score_threshold": 0.6, "example_knowledge_results": [[{"id": null, "metadata": {"component_name": "Text", "source": "harmony-component-example-doc", "table_id": 147}, "page_content": "该组件展示了如何配置隐私敏感信息的隐藏功能。组件通过 Column 布局实现了一个简单的界面，其中包含一个 Text 组件，用于显示隐私敏感信息。布局宽度占据整个屏幕，高度由内容自动调整。组件的垂直方向上仅包含一个 Text 组件，对齐方式为居中对齐。\n\nText 组件的样式包括字体、颜色等属性，支持隐私敏感信息的显示和隐藏。通过设置 `privacySensitive(true)`，Text 组件的内容在需要时会被隐藏，以保护用户隐私。组件的功能主要是展示隐私敏感信息的隐藏效果，用户无法直接看到被隐藏的内容。\n\n整个布局通过 Column 布局保证 Text 组件在垂直方向上居中显示，确保界面简洁明了。", "type": "Document"}, 0.6234858632087708], [{"id": null, "metadata": {"component_name": "Text", "source": "harmony-component-example-doc", "table_id": 154}, "page_content": "该组件展示了一个文本组件（Text）及其相关信息的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组文本或按钮。每个部分的文本以垂直布局方式排列，文本之间的间距均匀分布，且对齐方式为居中对齐。\n\n文本组件的样式包括字体大小、颜色、边框宽度等属性，支持不同的样式展示。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n\n整个布局通过 Column 布局保证文本和按钮在垂直方向上有序排列，确保界面整洁美观。", "type": "Document"}, 0.6195732951164246], [{"id": null, "metadata": {"component_name": "Text", "source": "harmony-component-example-doc", "table_id": 155}, "page_content": "该组件通过Column布局实现了一个展示文本处理效果的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个文本展示区域和一组按钮。每个文本展示区域的文本以不同的省略号模式和断词模式进行展示，按钮用于切换这些模式。\n\n文本展示区域的样式包括字体大小、边框、行高、最大行数、宽度等属性，支持不同的样式展示。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Row组件进行分隔。\n\n按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。整个布局通过Column布局保证文本展示区域和按钮在垂直方向上有序排列，确保界面整洁美观。", "type": "Document"}, 0.6110727190971375]], "component_examples": {"Text": [{"description": "该组件展示了如何配置隐私敏感信息的隐藏功能。组件通过 Column 布局实现了一个简单的界面，其中包含一个 Text 组件，用于显示隐私敏感信息。布局宽度占据整个屏幕，高度由内容自动调整。组件的垂直方向上仅包含一个 Text 组件，对齐方式为居中对齐。\n\nText 组件的样式包括字体、颜色等属性，支持隐私敏感信息的显示和隐藏。通过设置 `privacySensitive(true)`，Text 组件的内容在需要时会被隐藏，以保护用户隐私。组件的功能主要是展示隐私敏感信息的隐藏效果，用户无法直接看到被隐藏的内容。\n\n整个布局通过 Column 布局保证 Text 组件在垂直方向上居中显示，确保界面简洁明了。", "code": "@Entry\n@Component\nstruct ImageExample {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局的 Column 组件，子组件之间的间距为 10vp\n      Text(\"privacySensitive\") // 创建一个 Text 组件，显示文本 \"privacySensitive\"\n        .privacySensitive(true) // 设置 Text 组件为隐私敏感，内容在需要时会被隐藏\n        .margin({top :30}) // 设置 Text 组件的上边距为 30vp\n    }\n    .alignItems(HorizontalAlign.Center) // 设置 Column 组件的子组件在水平方向上居中对齐\n    .width(\"100%\") // 设置 Column 组件的宽度为 100%，占据整个屏幕宽度\n  }\n}"}, {"description": "该组件展示了一个文本组件（Text）及其相关信息的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组文本或按钮。每个部分的文本以垂直布局方式排列，文本之间的间距均匀分布，且对齐方式为居中对齐。\n\n文本组件的样式包括字体大小、颜色、边框宽度等属性，支持不同的样式展示。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n\n整个布局通过 Column 布局保证文本和按钮在垂直方向上有序排列，确保界面整洁美观。", "code": "@Entry\n@Component\nstruct TextExample9 {\n  // 定义状态变量，用于存储文本组件的行数、字形位置信息和行度量信息\n  @State lineCount: string = \"\"\n  @State glyphPositionAtCoordinate: string = \"\"\n  @State lineMetrics: string = \"\"\n\n  // 创建一个 TextController 实例，用于控制文本组件\n  controller: TextController = new TextController()\n\n  // 定义文本内容\n  @State textStr: string = 'Hello World! 您好，世界！'\n\n  build() {\n    Scroll() {\n      Column() {\n        // 显示标题文本，字体大小为9，颜色为浅灰色，宽度为90%，内边距为10\n        Text('Text组件getLayoutManager接口获取段落相对组件的信息')\n          .fontSize(9)\n          .fontColor(0xCCCCCC)\n          .width('90%')\n          .padding(10)\n\n        // 显示文本内容，字体大小为25，边框宽度为1，当文本区域发生变化时获取行数\n        Text(this.textStr, { controller: this.controller })\n          .fontSize(25)\n          .borderWidth(1)\n          .onAreaChange(() => {\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            this.lineCount = \"LineCount: \" + layoutManager.getLineCount()\n          })\n\n        // 显示行数标题，字体大小为9，颜色为浅灰色，宽度为90%，内边距为10\n        Text('LineCount').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 显示行数信息\n        Text(this.lineCount)\n\n        // 显示字形位置标题，字体大小为9，颜色为浅灰色，宽度为90%，内边距为10\n        Text('GlyphPositionAtCoordinate').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 显示按钮，点击按钮时获取相对组件坐标[150,50]的字形信息\n        Button(\"相对组件坐标[150,50]字形信息\")\n          .onClick(() => {\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            let position: PositionWithAffinity = layoutManager.getGlyphPositionAtCoordinate(150, 50)\n            this.glyphPositionAtCoordinate =\n              \"相对组件坐标[150,50] glyphPositionAtCoordinate position: \" + position.position + \" affinity: \" +\n              position.affinity\n          })\n          .margin({ bottom: 20, top: 10 })\n\n        // 显示字形位置信息\n        Text(this.glyphPositionAtCoordinate)\n\n        // 显示行度量标题，字体大小为9，颜色为浅灰色，宽度为90%，内边距为10\n        Text('LineMetrics').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 显示按钮，点击按钮时获取首行行信息、文本样式信息、以及字体属性信息\n        Button(\"首行行信息、文本样式信息、以及字体属性信息\")\n          .onClick(() => {\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            let lineMetrics: LineMetrics = layoutManager.getLineMetrics(0)\n            this.lineMetrics = \"lineMetrics is \" + JSON.stringify(lineMetrics) + '\\\\n\\\\n'\n            let runMetrics = lineMetrics.runMetrics\n            runMetrics.forEach((value, key) => {\n              this.lineMetrics += \"runMetrics key is \" + key + \" \" + JSON.stringify(value) + \"\\\\n\\\\n\"\n            });\n          })\n          .margin({ bottom: 20, top: 10 })\n\n        // 显示行度量信息\n        Text(this.lineMetrics)\n      }\n      .margin({ top: 100, left: 8, right: 8 })\n    }\n  }\n}"}, {"description": "该组件通过Column布局实现了一个展示文本处理效果的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个文本展示区域和一组按钮。每个文本展示区域的文本以不同的省略号模式和断词模式进行展示，按钮用于切换这些模式。\n\n文本展示区域的样式包括字体大小、边框、行高、最大行数、宽度等属性，支持不同的样式展示。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Row组件进行分隔。\n\n按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。整个布局通过Column布局保证文本展示区域和按钮在垂直方向上有序排列，确保界面整洁美观。", "code": "@Entry\n@Component\nstruct TextExample4 {\n  @State text: string =\n    'The text component is used to display a piece of textual information.Support universal attributes and universal text attributes.'\n  @State ellipsisModeIndex: number = 0;\n  @State ellipsisMode: EllipsisMode[] = [EllipsisMode.START, EllipsisMode.CENTER, EllipsisMode.END]\n  @State ellipsisModeStr: string[] = ['START', 'CENTER', 'END']\n  @State wordBreakIndex: number = 0;\n  @State wordBreak: WordBreak[] = [WordBreak.NORMAL, WordBreak.BREAK_ALL, WordBreak.BREAK_WORD]\n  @State wordBreakStr: string[] = ['NORMAL', 'BREAK_ALL', 'BREAK_WORD']\n  @State textClip: boolean = false\n\n  build() {\n    Column({ space: 10 }) {\n      // 第一个文本展示区域，展示省略号模式的效果\n      Text(this.text)\n        .fontSize(16) // 设置字体大小为16\n        .border({ width: 1 }) // 设置边框宽度为1\n        .lineHeight(20) // 设置行高为20\n        .maxLines(1) // 设置最大行数为1\n        .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n        .ellipsisMode(this.ellipsisMode[this.ellipsisModeIndex]) // 设置省略号模式\n        .width(300) // 设置宽度为300\n        .margin({ left: 20, top: 20 }) // 设置左边距和上边距为20\n\n      // 按钮区域，用于切换省略号模式\n      Row() {\n        Button('更改省略号位置：' + this.ellipsisModeStr[this.ellipsisModeIndex]).onClick(() => {\n          this.ellipsisModeIndex++\n          if (this.ellipsisModeIndex > (this.ellipsisModeStr.length - 1)) {\n            this.ellipsisModeIndex = 0\n          }\n        })\n      }\n\n      // 第二个文本展示区域，展示断词模式的效果\n      Text('This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.')\n        .fontSize(12) // 设置字体大小为12\n        .border({ width: 1 }) // 设置边框宽度为1\n        .wordBreak(WordBreak.NORMAL) // 设置断词模式为NORMAL\n        .lineHeight(20) // 设置行高为20\n        .maxLines(2) // 设置最大行数为2\n        .clip(this.textClip) // 设置是否裁剪文本\n        .width(260) // 设置宽度为260\n\n      // 按钮区域，用于切换裁剪模式\n      Row() {\n        Button('切换clip：' + this.textClip).onClick(() => {\n          this.textClip = !this.textClip\n        })\n      }\n\n      // 第三个文本展示区域，展示断词模式的效果\n      Text(this.text)\n        .fontSize(12) // 设置字体大小为12\n        .border({ width: 1 }) // 设置边框宽度为1\n        .maxLines(2) // 设置最大行数为2\n        .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n        .wordBreak(this.wordBreak[this.wordBreakIndex]) // 设置断词模式\n        .lineHeight(20) // 设置行高为20\n        .width(260) // 设置宽度为260\n\n      // 按钮区域，用于切换断词模式\n      Row() {\n        Button('更改wordBreak模式：' + this.wordBreakStr[this.wordBreakIndex]).onClick(() => {\n          this.wordBreakIndex++\n          if (this.wordBreakIndex > (this.wordBreakStr.length - 1)) {\n            this.wordBreakIndex = 0\n          }\n        })\n      }\n    }\n  }\n}"}]}}}, {"id": "8hx4Wuok98XmLLsiLnc5og", "description": "查询组件文档", "subtasks": [{"id": "4rNE8Q9nDohSwAUhLmHd8z", "description": "依次从知识库中查询每个组件的相关属性、事件文档", "subtasks": [{"id": "Jgbv7PTUgMMBRc4M3r7n2S", "description": "查询组件Text的相关属性、事件文档", "subtasks": [], "details": {"query": ["设置文本组件的标题", "设置文本组件的摘要", "设置文本组件的布局属性"], "n_results": 10, "query_results": {"ids": [["6f72f2b5-8af2-4583-9413-44e7d271080c", "5c4c808a-59df-40bd-aa6e-4830f51b5fe4", "08f20e06-6d11-42e4-8ba9-01faac89ff08", "4f7dd024-b71b-4c3d-88a7-e2a6339c8e5c", "9fb81972-af49-45a6-b163-3f019a5c4c58", "8fa42d3a-996d-4735-93af-846bf32dd907", "83aa933b-cac2-47db-b828-510d20ee52b7", "04f8490a-5298-4442-92e6-8e46cc0f17ca", "2118e3cb-ff25-44e4-8f0b-e51f59a2c412", "6be53b16-d33e-4360-a82a-69054e0ff19a"], ["08f20e06-6d11-42e4-8ba9-01faac89ff08", "6f72f2b5-8af2-4583-9413-44e7d271080c", "5c4c808a-59df-40bd-aa6e-4830f51b5fe4", "95d6034b-0f1e-4b0c-9cde-a1202e601b71", "83aa933b-cac2-47db-b828-510d20ee52b7", "4b0a480c-d137-4596-a2b4-457b1f4fb17a", "9fb81972-af49-45a6-b163-3f019a5c4c58", "04f8490a-5298-4442-92e6-8e46cc0f17ca", "e6b91b12-1b67-439a-aa91-85c9ceb56095", "4f7dd024-b71b-4c3d-88a7-e2a6339c8e5c"], ["ce0d9d0f-bf44-49f2-96b8-a642cf6e18c0", "9fb81972-af49-45a6-b163-3f019a5c4c58", "11431e7a-21f1-4be2-9d63-6ecd919e4dfa", "6f72f2b5-8af2-4583-9413-44e7d271080c", "588549ec-b8a6-496b-8795-3be82ca87021", "5c4c808a-59df-40bd-aa6e-4830f51b5fe4", "5b01f32f-e789-47af-86a4-df5a864c92c4", "83aa933b-cac2-47db-b828-510d20ee52b7", "0269575f-3c3c-4c82-8b9f-643a793563d8", "6be53b16-d33e-4360-a82a-69054e0ff19a"]], "distances": [[0.415540874004364, 0.4189738631248474, 0.439860463142395, 0.4460945725440979, 0.4468193054199219, 0.4523846507072449, 0.45390164852142334, 0.45753270387649536, 0.4575430154800415, 0.4576863646507263], [0.4125710725784302, 0.43129652738571167, 0.4473947286605835, 0.45407164096832275, 0.45513445138931274, 0.45655637979507446, 0.4570995569229126, 0.45901548862457275, 0.46015501022338867, 0.4650944471359253], [0.30333149433135986, 0.31369543075561523, 0.3285360336303711, 0.33806729316711426, 0.3537191152572632, 0.36343032121658325, 0.3821784257888794, 0.3834928274154663, 0.3855093717575073, 0.3859359622001648]], "metadatas": [[{"component_name": "Text", "name": "textAlign", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "selection", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "copyOption", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "enableDataDetector", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "dataDetectorConfig", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textIndent", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "letterSpacing", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "lineSpacing", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "Text", "name": "copyOption", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textAlign", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "selection", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "fontWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textOverflow", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textIndent", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "ellipsisMode", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "enableDataDetector", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "Text", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textAlign", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "selection", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "decoration", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "flexBasis", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "lineSpacing", "source": "harmony-component-doc", "type": "attribute"}]], "embeddings": null, "documents": [["设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n", "设置选中区域。选中区域高亮且显示手柄和文本选择菜单。\n属性名称：selection\n属性参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":-1}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":-1}}\n", "设置组件是否支持文本可复制粘贴。\n属性名称：copyOption\n属性参数：{'value': {\"type\":\"CopyOptions\",\"required\":true,\"description\":\"组件是否支持文本可复制粘贴。\",\"default\":\"CopyOptions.None\"}}\n", "设置使能文本识别。\n属性名称：enableDataDetector\n属性参数：{'enable': {\"type\":\"boolean\",\"required\":true,\"description\":\"使能文本识别。\",\"default\":false}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "设置文本识别配置。\n属性名称：dataDetectorConfig\n属性参数：{'config': {\"type\":\"TextDataDetectorConfig\",\"required\":true,\"description\":\"文本识别配置。\",\"default\":null}}\n", "设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", "设置首行文本缩进。\n属性名称：textIndent\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"首行文本缩进。\",\"default\":0}}\n", "设置文本字符间距。设置该值为百分比时，按默认值显示。设置该值为0时，按默认值显示。\n属性名称：letterSpacing\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"文本字符间距。\",\"default\":null}}\n", "设置文本的行间距，设置值不大于0时，取默认值0。\n属性名称：lineSpacing\n属性参数：{'value': {\"type\":\"LengthMetrics\",\"required\":true,\"description\":\"文本的行间距。\",\"default\":null}}\n"], ["设置组件是否支持文本可复制粘贴。\n属性名称：copyOption\n属性参数：{'value': {\"type\":\"CopyOptions\",\"required\":true,\"description\":\"组件是否支持文本可复制粘贴。\",\"default\":\"CopyOptions.None\"}}\n", "设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n", "设置选中区域。选中区域高亮且显示手柄和文本选择菜单。\n属性名称：selection\n属性参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":-1}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":-1}}\n", "设置文本的字体粗细，设置过大可能会在不同字体下有截断。\n属性名称：fontWeight\n属性参数：{'value': {\"type\":[\"number\",\"FontWeight\",\"string\"],\"required\":true,\"description\":\"文本的字体粗细，number类型取值[100, 900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如\\\"400\\\"，以及\\\"bold\\\"、\\\"bolder\\\"、\\\"lighter\\\"、\\\"regular\\\"、\\\"medium\\\"，分别对应FontWeight中相应的枚举值。默认值：FontWeight.Normal\",\"default\":\"FontWeight.Normal\"}}\n", "设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", "设置文本超长时的显示方式。\n属性名称：textOverflow\n属性参数：{'value': {\"type\":{\"overflow\":\"TextOverflow\"},\"required\":true,\"description\":\"文本超长时的显示方式。\",\"default\":{\"overflow\":\"TextOverflow.Clip\"}}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "设置首行文本缩进。\n属性名称：textIndent\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"首行文本缩进。\",\"default\":0}}\n", "设置省略位置。\n属性名称：ellipsisMode\n属性参数：{'value': {\"type\":\"EllipsisMode\",\"required\":true,\"description\":\"省略位置。\",\"default\":\"EllipsisMode.END\"}}\n", "设置使能文本识别。\n属性名称：enableDataDetector\n属性参数：{'enable': {\"type\":\"boolean\",\"required\":true,\"description\":\"使能文本识别。\",\"default\":false}}\n"], ["设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "设置选中区域。选中区域高亮且显示手柄和文本选择菜单。\n属性名称：selection\n属性参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":-1}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":-1}}\n", "设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n", "设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", "设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n", "设置文本的行间距，设置值不大于0时，取默认值0。\n属性名称：lineSpacing\n属性参数：{'value': {\"type\":\"LengthMetrics\",\"required\":true,\"description\":\"文本的行间距。\",\"default\":null}}\n"]], "uris": null, "data": null, "included": ["metadatas", "documents", "distances"]}}}], "details": null}, {"id": "fxc7DUSUBPsNqBNdNABnrJ", "description": "过滤低于阈值的查询结果", "subtasks": [{"id": "4rP62k3X7gckQktCKVsXTd", "description": "过滤低于阈值的查询结果: 设置文本组件的标题", "subtasks": [], "details": {"query": "设置文本组件的标题", "result_ids": ["6f72f2b5-8af2-4583-9413-44e7d271080c", "5c4c808a-59df-40bd-aa6e-4830f51b5fe4", "08f20e06-6d11-42e4-8ba9-01faac89ff08", "4f7dd024-b71b-4c3d-88a7-e2a6339c8e5c", "9fb81972-af49-45a6-b163-3f019a5c4c58", "8fa42d3a-996d-4735-93af-846bf32dd907", "83aa933b-cac2-47db-b828-510d20ee52b7", "04f8490a-5298-4442-92e6-8e46cc0f17ca", "2118e3cb-ff25-44e4-8f0b-e51f59a2c412", "6be53b16-d33e-4360-a82a-69054e0ff19a"], "result_documents": ["设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n", "设置选中区域。选中区域高亮且显示手柄和文本选择菜单。\n属性名称：selection\n属性参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":-1}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":-1}}\n", "设置组件是否支持文本可复制粘贴。\n属性名称：copyOption\n属性参数：{'value': {\"type\":\"CopyOptions\",\"required\":true,\"description\":\"组件是否支持文本可复制粘贴。\",\"default\":\"CopyOptions.None\"}}\n", "设置使能文本识别。\n属性名称：enableDataDetector\n属性参数：{'enable': {\"type\":\"boolean\",\"required\":true,\"description\":\"使能文本识别。\",\"default\":false}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "设置文本识别配置。\n属性名称：dataDetectorConfig\n属性参数：{'config': {\"type\":\"TextDataDetectorConfig\",\"required\":true,\"description\":\"文本识别配置。\",\"default\":null}}\n", "设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", "设置首行文本缩进。\n属性名称：textIndent\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"首行文本缩进。\",\"default\":0}}\n", "设置文本字符间距。设置该值为百分比时，按默认值显示。设置该值为0时，按默认值显示。\n属性名称：letterSpacing\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"文本字符间距。\",\"default\":null}}\n", "设置文本的行间距，设置值不大于0时，取默认值0。\n属性名称：lineSpacing\n属性参数：{'value': {\"type\":\"LengthMetrics\",\"required\":true,\"description\":\"文本的行间距。\",\"default\":null}}\n"], "result_metadatas": [{"component_name": "Text", "name": "textAlign", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "selection", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "copyOption", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "enableDataDetector", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "dataDetectorConfig", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textIndent", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "letterSpacing", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "lineSpacing", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.415540874004364, 0.4189738631248474, 0.439860463142395, 0.4460945725440979, 0.4468193054199219, 0.4523846507072449, 0.45390164852142334, 0.45753270387649536, 0.4575430154800415, 0.4576863646507263], "threshold": 0.6, "query_text_results": []}}, {"id": "Rpj47R6Qb5R6QnFXTYJbKM", "description": "过滤低于阈值的查询结果: 设置文本组件的摘要", "subtasks": [], "details": {"query": "设置文本组件的摘要", "result_ids": ["08f20e06-6d11-42e4-8ba9-01faac89ff08", "6f72f2b5-8af2-4583-9413-44e7d271080c", "5c4c808a-59df-40bd-aa6e-4830f51b5fe4", "95d6034b-0f1e-4b0c-9cde-a1202e601b71", "83aa933b-cac2-47db-b828-510d20ee52b7", "4b0a480c-d137-4596-a2b4-457b1f4fb17a", "9fb81972-af49-45a6-b163-3f019a5c4c58", "04f8490a-5298-4442-92e6-8e46cc0f17ca", "e6b91b12-1b67-439a-aa91-85c9ceb56095", "4f7dd024-b71b-4c3d-88a7-e2a6339c8e5c"], "result_documents": ["设置组件是否支持文本可复制粘贴。\n属性名称：copyOption\n属性参数：{'value': {\"type\":\"CopyOptions\",\"required\":true,\"description\":\"组件是否支持文本可复制粘贴。\",\"default\":\"CopyOptions.None\"}}\n", "设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n", "设置选中区域。选中区域高亮且显示手柄和文本选择菜单。\n属性名称：selection\n属性参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":-1}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":-1}}\n", "设置文本的字体粗细，设置过大可能会在不同字体下有截断。\n属性名称：fontWeight\n属性参数：{'value': {\"type\":[\"number\",\"FontWeight\",\"string\"],\"required\":true,\"description\":\"文本的字体粗细，number类型取值[100, 900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如\\\"400\\\"，以及\\\"bold\\\"、\\\"bolder\\\"、\\\"lighter\\\"、\\\"regular\\\"、\\\"medium\\\"，分别对应FontWeight中相应的枚举值。默认值：FontWeight.Normal\",\"default\":\"FontWeight.Normal\"}}\n", "设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", "设置文本超长时的显示方式。\n属性名称：textOverflow\n属性参数：{'value': {\"type\":{\"overflow\":\"TextOverflow\"},\"required\":true,\"description\":\"文本超长时的显示方式。\",\"default\":{\"overflow\":\"TextOverflow.Clip\"}}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "设置首行文本缩进。\n属性名称：textIndent\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"首行文本缩进。\",\"default\":0}}\n", "设置省略位置。\n属性名称：ellipsisMode\n属性参数：{'value': {\"type\":\"EllipsisMode\",\"required\":true,\"description\":\"省略位置。\",\"default\":\"EllipsisMode.END\"}}\n", "设置使能文本识别。\n属性名称：enableDataDetector\n属性参数：{'enable': {\"type\":\"boolean\",\"required\":true,\"description\":\"使能文本识别。\",\"default\":false}}\n"], "result_metadatas": [{"component_name": "Text", "name": "copyOption", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textAlign", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "selection", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "fontWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textOverflow", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textIndent", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "ellipsisMode", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "enableDataDetector", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.4125710725784302, 0.43129652738571167, 0.4473947286605835, 0.45407164096832275, 0.45513445138931274, 0.45655637979507446, 0.4570995569229126, 0.45901548862457275, 0.46015501022338867, 0.4650944471359253], "threshold": 0.6, "query_text_results": []}}, {"id": "PEHxyQyR5azwX3qCGWnxXz", "description": "过滤低于阈值的查询结果: 设置文本组件的布局属性", "subtasks": [], "details": {"query": "设置文本组件的布局属性", "result_ids": ["ce0d9d0f-bf44-49f2-96b8-a642cf6e18c0", "9fb81972-af49-45a6-b163-3f019a5c4c58", "11431e7a-21f1-4be2-9d63-6ecd919e4dfa", "6f72f2b5-8af2-4583-9413-44e7d271080c", "588549ec-b8a6-496b-8795-3be82ca87021", "5c4c808a-59df-40bd-aa6e-4830f51b5fe4", "5b01f32f-e789-47af-86a4-df5a864c92c4", "83aa933b-cac2-47db-b828-510d20ee52b7", "0269575f-3c3c-4c82-8b9f-643a793563d8", "6be53b16-d33e-4360-a82a-69054e0ff19a"], "result_documents": ["设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "设置选中区域。选中区域高亮且显示手柄和文本选择菜单。\n属性名称：selection\n属性参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":-1}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":-1}}\n", "设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n", "设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", "设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n", "设置文本的行间距，设置值不大于0时，取默认值0。\n属性名称：lineSpacing\n属性参数：{'value': {\"type\":\"LengthMetrics\",\"required\":true,\"description\":\"文本的行间距。\",\"default\":null}}\n"], "result_metadatas": [{"component_name": "Text", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textAlign", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "selection", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "decoration", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "flexBasis", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "lineSpacing", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.30333149433135986, 0.31369543075561523, 0.3285360336303711, 0.33806729316711426, 0.3537191152572632, 0.36343032121658325, 0.3821784257888794, 0.3834928274154663, 0.3855093717575073, 0.3859359622001648], "threshold": 0.6, "query_text_results": [["设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", {"component_name": "Text", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, 0.6966685056686401], ["设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", {"component_name": "Text", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, 0.6863045692443848], ["对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", {"component_name": "Text", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, 0.6714639663696289], ["设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n", {"component_name": "Text", "name": "textAlign", "source": "harmony-component-doc", "type": "attribute"}, 0.6619327068328857], ["设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", {"component_name": "Text", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, 0.6462808847427368], ["设置选中区域。选中区域高亮且显示手柄和文本选择菜单。\n属性名称：selection\n属性参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":-1}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":-1}}\n", {"component_name": "Text", "name": "selection", "source": "harmony-component-doc", "type": "attribute"}, 0.6365696787834167], ["设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n", {"component_name": "Text", "name": "decoration", "source": "harmony-component-doc", "type": "attribute"}, 0.6178215742111206], ["设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", {"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, 0.6165071725845337], ["设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n", {"component_name": "Text", "name": "flexBasis", "source": "harmony-component-doc", "type": "attribute"}, 0.6144906282424927], ["设置文本的行间距，设置值不大于0时，取默认值0。\n属性名称：lineSpacing\n属性参数：{'value': {\"type\":\"LengthMetrics\",\"required\":true,\"description\":\"文本的行间距。\",\"default\":null}}\n", {"component_name": "Text", "name": "lineSpacing", "source": "harmony-component-doc", "type": "attribute"}, 0.6140640377998352]]}}], "details": null}], "details": null}, {"id": "VxyMVgAaNtd8PKWrVu8JQm", "description": "生成组件文档", "subtasks": [], "details": {"component_documents": ["# Text\n接口描述：Text组件的接口定义。\n接口参数：{'Text': {\"type\":[\"string\",\"Resource\"],\"required\":false,\"description\":\"文本内容。包含子组件Span且未设置属性字符串时不生效，显示Span内容，并且此时text组件的样式不生效。\",\"default\":\" \"}, 'value': {\"type\":\"TextOptions\",\"required\":false,\"description\":\"文本组件初始化选项。\",\"default\":null}}\n设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n设置选中区域。选中区域高亮且显示手柄和文本选择菜单。\n属性名称：selection\n属性参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":-1}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":-1}}\n设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n设置文本的行间距，设置值不大于0时，取默认值0。\n属性名称：lineSpacing\n属性参数：{'value': {\"type\":\"LengthMetrics\",\"required\":true,\"description\":\"文本的行间距。\",\"default\":null}}\n示例：该组件展示了如何配置隐私敏感信息的隐藏功能。组件通过 Column 布局实现了一个简单的界面，其中包含一个 Text 组件，用于显示隐私敏感信息。布局宽度占据整个屏幕，高度由内容自动调整。组件的垂直方向上仅包含一个 Text 组件，对齐方式为居中对齐。\n\nText 组件的样式包括字体、颜色等属性，支持隐私敏感信息的显示和隐藏。通过设置 `privacySensitive(true)`，Text 组件的内容在需要时会被隐藏，以保护用户隐私。组件的功能主要是展示隐私敏感信息的隐藏效果，用户无法直接看到被隐藏的内容。\n\n整个布局通过 Column 布局保证 Text 组件在垂直方向上居中显示，确保界面简洁明了。\n@Entry\n@Component\nstruct ImageExample {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局的 Column 组件，子组件之间的间距为 10vp\n      Text(\"privacySensitive\") // 创建一个 Text 组件，显示文本 \"privacySensitive\"\n        .privacySensitive(true) // 设置 Text 组件为隐私敏感，内容在需要时会被隐藏\n        .margin({top :30}) // 设置 Text 组件的上边距为 30vp\n    }\n    .alignItems(HorizontalAlign.Center) // 设置 Column 组件的子组件在水平方向上居中对齐\n    .width(\"100%\") // 设置 Column 组件的宽度为 100%，占据整个屏幕宽度\n  }\n}\n\n示例：该组件展示了一个文本组件（Text）及其相关信息的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组文本或按钮。每个部分的文本以垂直布局方式排列，文本之间的间距均匀分布，且对齐方式为居中对齐。\n\n文本组件的样式包括字体大小、颜色、边框宽度等属性，支持不同的样式展示。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n\n整个布局通过 Column 布局保证文本和按钮在垂直方向上有序排列，确保界面整洁美观。\n@Entry\n@Component\nstruct TextExample9 {\n  // 定义状态变量，用于存储文本组件的行数、字形位置信息和行度量信息\n  @State lineCount: string = \"\"\n  @State glyphPositionAtCoordinate: string = \"\"\n  @State lineMetrics: string = \"\"\n\n  // 创建一个 TextController 实例，用于控制文本组件\n  controller: TextController = new TextController()\n\n  // 定义文本内容\n  @State textStr: string = 'Hello World! 您好，世界！'\n\n  build() {\n    Scroll() {\n      Column() {\n        // 显示标题文本，字体大小为9，颜色为浅灰色，宽度为90%，内边距为10\n        Text('Text组件getLayoutManager接口获取段落相对组件的信息')\n          .fontSize(9)\n          .fontColor(0xCCCCCC)\n          .width('90%')\n          .padding(10)\n\n        // 显示文本内容，字体大小为25，边框宽度为1，当文本区域发生变化时获取行数\n        Text(this.textStr, { controller: this.controller })\n          .fontSize(25)\n          .borderWidth(1)\n          .onAreaChange(() => {\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            this.lineCount = \"LineCount: \" + layoutManager.getLineCount()\n          })\n\n        // 显示行数标题，字体大小为9，颜色为浅灰色，宽度为90%，内边距为10\n        Text('LineCount').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 显示行数信息\n        Text(this.lineCount)\n\n        // 显示字形位置标题，字体大小为9，颜色为浅灰色，宽度为90%，内边距为10\n        Text('GlyphPositionAtCoordinate').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 显示按钮，点击按钮时获取相对组件坐标[150,50]的字形信息\n        Button(\"相对组件坐标[150,50]字形信息\")\n          .onClick(() => {\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            let position: PositionWithAffinity = layoutManager.getGlyphPositionAtCoordinate(150, 50)\n            this.glyphPositionAtCoordinate =\n              \"相对组件坐标[150,50] glyphPositionAtCoordinate position: \" + position.position + \" affinity: \" +\n              position.affinity\n          })\n          .margin({ bottom: 20, top: 10 })\n\n        // 显示字形位置信息\n        Text(this.glyphPositionAtCoordinate)\n\n        // 显示行度量标题，字体大小为9，颜色为浅灰色，宽度为90%，内边距为10\n        Text('LineMetrics').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 显示按钮，点击按钮时获取首行行信息、文本样式信息、以及字体属性信息\n        Button(\"首行行信息、文本样式信息、以及字体属性信息\")\n          .onClick(() => {\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            let lineMetrics: LineMetrics = layoutManager.getLineMetrics(0)\n            this.lineMetrics = \"lineMetrics is \" + JSON.stringify(lineMetrics) + '\\\\n\\\\n'\n            let runMetrics = lineMetrics.runMetrics\n            runMetrics.forEach((value, key) => {\n              this.lineMetrics += \"runMetrics key is \" + key + \" \" + JSON.stringify(value) + \"\\\\n\\\\n\"\n            });\n          })\n          .margin({ bottom: 20, top: 10 })\n\n        // 显示行度量信息\n        Text(this.lineMetrics)\n      }\n      .margin({ top: 100, left: 8, right: 8 })\n    }\n  }\n}\n\n示例：该组件通过Column布局实现了一个展示文本处理效果的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个文本展示区域和一组按钮。每个文本展示区域的文本以不同的省略号模式和断词模式进行展示，按钮用于切换这些模式。\n\n文本展示区域的样式包括字体大小、边框、行高、最大行数、宽度等属性，支持不同的样式展示。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Row组件进行分隔。\n\n按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。整个布局通过Column布局保证文本展示区域和按钮在垂直方向上有序排列，确保界面整洁美观。\n@Entry\n@Component\nstruct TextExample4 {\n  @State text: string =\n    'The text component is used to display a piece of textual information.Support universal attributes and universal text attributes.'\n  @State ellipsisModeIndex: number = 0;\n  @State ellipsisMode: EllipsisMode[] = [EllipsisMode.START, EllipsisMode.CENTER, EllipsisMode.END]\n  @State ellipsisModeStr: string[] = ['START', 'CENTER', 'END']\n  @State wordBreakIndex: number = 0;\n  @State wordBreak: WordBreak[] = [WordBreak.NORMAL, WordBreak.BREAK_ALL, WordBreak.BREAK_WORD]\n  @State wordBreakStr: string[] = ['NORMAL', 'BREAK_ALL', 'BREAK_WORD']\n  @State textClip: boolean = false\n\n  build() {\n    Column({ space: 10 }) {\n      // 第一个文本展示区域，展示省略号模式的效果\n      Text(this.text)\n        .fontSize(16) // 设置字体大小为16\n        .border({ width: 1 }) // 设置边框宽度为1\n        .lineHeight(20) // 设置行高为20\n        .maxLines(1) // 设置最大行数为1\n        .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n        .ellipsisMode(this.ellipsisMode[this.ellipsisModeIndex]) // 设置省略号模式\n        .width(300) // 设置宽度为300\n        .margin({ left: 20, top: 20 }) // 设置左边距和上边距为20\n\n      // 按钮区域，用于切换省略号模式\n      Row() {\n        Button('更改省略号位置：' + this.ellipsisModeStr[this.ellipsisModeIndex]).onClick(() => {\n          this.ellipsisModeIndex++\n          if (this.ellipsisModeIndex > (this.ellipsisModeStr.length - 1)) {\n            this.ellipsisModeIndex = 0\n          }\n        })\n      }\n\n      // 第二个文本展示区域，展示断词模式的效果\n      Text('This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.')\n        .fontSize(12) // 设置字体大小为12\n        .border({ width: 1 }) // 设置边框宽度为1\n        .wordBreak(WordBreak.NORMAL) // 设置断词模式为NORMAL\n        .lineHeight(20) // 设置行高为20\n        .maxLines(2) // 设置最大行数为2\n        .clip(this.textClip) // 设置是否裁剪文本\n        .width(260) // 设置宽度为260\n\n      // 按钮区域，用于切换裁剪模式\n      Row() {\n        Button('切换clip：' + this.textClip).onClick(() => {\n          this.textClip = !this.textClip\n        })\n      }\n\n      // 第三个文本展示区域，展示断词模式的效果\n      Text(this.text)\n        .fontSize(12) // 设置字体大小为12\n        .border({ width: 1 }) // 设置边框宽度为1\n        .maxLines(2) // 设置最大行数为2\n        .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n        .wordBreak(this.wordBreak[this.wordBreakIndex]) // 设置断词模式\n        .lineHeight(20) // 设置行高为20\n        .width(260) // 设置宽度为260\n\n      // 按钮区域，用于切换断词模式\n      Row() {\n        Button('更改wordBreak模式：' + this.wordBreakStr[this.wordBreakIndex]).onClick(() => {\n          this.wordBreakIndex++\n          if (this.wordBreakIndex > (this.wordBreakStr.length - 1)) {\n            this.wordBreakIndex = 0\n          }\n        })\n      }\n    }\n  }\n}\n\n"], "related_types": {"TextOptions": {"description": "Text初始化参数。", "type": "object", "properties": {"controller": {"type": "TextController", "required": true, "description": "文本控制器。", "enum": null, "enumDescriptions": null, "default": null}}, "examples": null}, "TextController": {"description": "Text组件的控制器。", "type": "object", "properties": {"controller": {"type": "TextController", "required": true, "description": "导入对象", "enum": null, "enumDescriptions": null, "default": null}}, "examples": null}, "Font": {"description": "设置文本样式。", "type": "object", "properties": {"size": {"type": "Length", "required": false, "description": "设置文本尺寸，Length为number类型时，使用fp单位。不支持设置百分比字符串。", "enum": null, "enumDescriptions": null, "default": 16.0}, "weight": {"type": ["FontWeight", "number", "string"], "required": false, "description": "设置文本的字体粗细，number类型取值[100, 900]，取值间隔为100，取值越大，字体越粗。", "enum": null, "enumDescriptions": null, "default": "400 | FontWeight.Normal"}, "family": {"type": ["string", "Resource"], "required": false, "description": "设置文本的字体列表。使用多个字体，使用','进行分割，优先级按顺序生效。例如：'Arial, HarmonyOS Sans'。", "enum": null, "enumDescriptions": null, "default": null}, "style": {"type": "FontStyle", "required": false, "description": "设置文本的字体样式。", "enum": null, "enumDescriptions": null, "default": "FontStyle.Normal"}}, "examples": null}, "Resource": {"description": "资源引用类型，用于设置组件属性的值。可以通过$r或者$rawfile创建Resource类型对象，不可以修改Resource中的各属性的值。", "type": "Resource", "enum": null, "enumDescriptions": null, "examples": ["```ets\n// belonging：系统资源或者应用资源，相应的取值为'sys'和'app'；\n// type：资源类型，支持'boolean'、'color'、'float'、'intarray'、'integer'、'pattern'、'plural'、'strarray'、'string'、'media'；\n// name：资源名称，在资源定义时确定。\n$r('belonging.type.name')\n```", "```ets\n// filename：工程中resources/rawfile目录下的文件名称。\n$rawfile('filename')\n```"]}, "Length": {"description": "长度类型，用于描述尺寸单位。\n* string：需要显式指定像素单位，如'10px'，或百分比字符串，如'100%'。\n* number：默认单位为vp。\n* Resource：资源引用类型，引入系统或应用资源中的尺寸。", "type": ["string", "number", "Resource"], "enum": null, "enumDescriptions": null, "examples": null}, "Direction": {"description": "布局方向。", "type": "enum", "enum": ["Ltr", "Rtl", "Auto"], "enumDescriptions": {"Ltr": "元素从左到右布局。", "Rtl": "元素从右到左布局。", "Auto": "使用系统默认布局方向。"}, "examples": null}, "LengthMetrics": {"description": "用于设置长度属性，当长度单位为PERCENT时，值为1表示100%。", "type": "object", "properties": {"value": {"type": "number", "required": false, "description": "长度属性的值。", "enum": null, "enumDescriptions": null, "default": null}, "unit": {"type": "LengthUnit", "required": false, "description": "长度属性的单位，默认为vp。", "enum": null, "enumDescriptions": null, "default": null}}, "examples": null}, "LengthUnit": {"description": "长度属性单位枚举。", "type": "enum", "enum": ["PX", "VP", "FP", "PERCENT", "LPX"], "enumDescriptions": {"PX": "长度类型，用于描述以px像素单位为单位的长度。", "VP": "长度类型，用于描述以vp逻辑像素为单位的长度。", "FP": "长度类型，用于描述以fp字体像素为单位的长度。", "PERCENT": "长度类型，用于描述百分比长度。", "LPX": "长度类型，用于描述以lpx逻辑像素为单位的长度。"}, "examples": null}}}}, {"id": "FawV6Nwz7ZytHXqx36cDb6", "description": "生成类型文档", "subtasks": [], "details": {"type_documents": ["类型名：TextOptions\n类型描述：Text初始化参数。\n参数：{'controller': {\"type\":\"TextController\",\"required\":true,\"description\":\"文本控制器。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}}\n", "类型名：TextController\n类型描述：Text组件的控制器。\n参数：{'controller': {\"type\":\"TextController\",\"required\":true,\"description\":\"导入对象\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}}\n", "类型名：Font\n类型描述：设置文本样式。\n参数：{'size': {\"type\":\"Length\",\"required\":false,\"description\":\"设置文本尺寸，Length为number类型时，使用fp单位。不支持设置百分比字符串。\",\"enum\":null,\"enumDescriptions\":null,\"default\":16.0}, 'weight': {\"type\":[\"FontWeight\",\"number\",\"string\"],\"required\":false,\"description\":\"设置文本的字体粗细，number类型取值[100, 900]，取值间隔为100，取值越大，字体越粗。\",\"enum\":null,\"enumDescriptions\":null,\"default\":\"400 | FontWeight.Normal\"}, 'family': {\"type\":[\"string\",\"Resource\"],\"required\":false,\"description\":\"设置文本的字体列表。使用多个字体，使用','进行分割，优先级按顺序生效。例如：'Arial, HarmonyOS Sans'。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'style': {\"type\":\"FontStyle\",\"required\":false,\"description\":\"设置文本的字体样式。\",\"enum\":null,\"enumDescriptions\":null,\"default\":\"FontStyle.Normal\"}}\n", "类型名：Resource\n类型描述：资源引用类型，用于设置组件属性的值。可以通过$r或者$rawfile创建Resource类型对象，不可以修改Resource中的各属性的值。\n类型：Resource\n类型Resource示例：\n```ets\n// belonging：系统资源或者应用资源，相应的取值为'sys'和'app'；\n// type：资源类型，支持'boolean'、'color'、'float'、'intarray'、'integer'、'pattern'、'plural'、'strarray'、'string'、'media'；\n// name：资源名称，在资源定义时确定。\n$r('belonging.type.name')\n```\n类型Resource示例：\n```ets\n// filename：工程中resources/rawfile目录下的文件名称。\n$rawfile('filename')\n```\n", "类型名：Length\n类型描述：长度类型，用于描述尺寸单位。\n* string：需要显式指定像素单位，如'10px'，或百分比字符串，如'100%'。\n* number：默认单位为vp。\n* Resource：资源引用类型，引入系统或应用资源中的尺寸。\n类型：['string', 'number', 'Resource']\n", "枚举类型名：Direction\n枚举类型描述：布局方向。\n枚举值：['Ltr', 'Rtl', 'Auto']\n枚举值描述：\n* Ltr: 元素从左到右布局。\n* Rtl: 元素从右到左布局。\n* Auto: 使用系统默认布局方向。\n\n", "类型名：LengthMetrics\n类型描述：用于设置长度属性，当长度单位为PERCENT时，值为1表示100%。\n参数：{'value': {\"type\":\"number\",\"required\":false,\"description\":\"长度属性的值。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'unit': {\"type\":\"LengthUnit\",\"required\":false,\"description\":\"长度属性的单位，默认为vp。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}}\n", "枚举类型名：LengthUnit\n枚举类型描述：长度属性单位枚举。\n枚举值：['PX', 'VP', 'FP', 'PERCENT', 'LPX']\n枚举值描述：\n* PX: 长度类型，用于描述以px像素单位为单位的长度。\n* VP: 长度类型，用于描述以vp逻辑像素为单位的长度。\n* FP: 长度类型，用于描述以fp字体像素为单位的长度。\n* PERCENT: 长度类型，用于描述百分比长度。\n* LPX: 长度类型，用于描述以lpx逻辑像素为单位的长度。\n\n"]}}], "details": {"android_component": {"name": ["androidx.preference.Preference"], "content": "<androidx.preference.Preference\n    android:key=\"tutorial_display_key\"\n    android:summary=\"@string/show_tutorial_settings_summary\"\n    android:title=\"@string/show_tutorial_settings_title\" />", "layout_description": "偏好设置项，宽度占满父容器，高度自适应，标题引用资源app.string.show_tutorial_settings_title，摘要引用资源app.string.show_tutorial_settings_summary。", "function_description": "实现了一个偏好设置项，显示标题为 app.string.show_tutorial_settings_title 的内容，下方显示摘要为 app.string.show_tutorial_settings_summary 的内容。"}}}, {"id": "kdmBiCk22cfsS3FxmqbjEX", "description": "后处理鸿蒙组件代码", "subtasks": [], "details": {"harmony_component_code": "Column() {\n  Text($r('app.string.show_tutorial_settings_title'))\n    .fontSize(20)\n    .fontWeight(FontWeight.Bold)\n    .width('100%')\n    .height('auto')\n  Text($r('app.string.show_tutorial_settings_summary'))\n    .fontSize(16)\n    .width('100%')\n    .height('auto')\n}"}}], "details": null}, {"id": "DA4arkqYW9z6qNxPFJTLSt", "description": "根据转译表转译组件v1", "subtasks": [{"id": "5cuqkoRxoft2WxWduF6kw4", "description": "生成组件描述", "subtasks": [], "details": {"prompt": "请根据以下安卓XML代码编写一个详细的通用描述和功能描述，供其他开发框架如iOS或鸿蒙的开发者实现同样的布局样式。描述应包含以下内容：\n\n布局属性：包括组件的宽度、高度、边距、填充、对齐方式等。\n组件样式和外观：包括颜色、字体、透明度、圆角等。\n组件排列和嵌套关系：例如垂直或水平布局、组件之间的对齐方式、父子关系。\n组件功能和交互：例如按钮的点击事件、输入框的输入验证逻辑等。\n引用的资源：如自定义的背景图片、颜色等，请指出资源路径或名称。\n请避免使用安卓特有的术语，而是使用通用的描述语言，确保其他框架的开发者可以理解并实现同样的布局和功能，例如：match_parent描述为占满父容器的宽度。同时，请确保描述涵盖每个组件的属性、样式和功能。\n\n你在编写通用描述和功能描述时，需要遵守以下规则：\n## 规则#1\n这条规则适用于所有组件的宽度、高度、外边距、内边距、字体大小等属性的单位。\n对于高度、宽度、外边距、内边距等等属性的单位应全部采用vp；\n对于字体大小等属性的单位应全部采用fp。\n\n## 规则#2\n这条规则适用于字体设置。\n若安卓组件中存在字体集的设置，应将其修改为'HarmonyOS Sans'字体集；\n若安卓组件中不存在字体集的设置，请保持不变。\n\n## 规则#3\n这条规则适用于资源引用。\n对于引用@drawable的资源，请将其修改为media;\n对于引用@color的资源，请将其修改为color;\n对于引用@strings的资源，请将其修改为string;\n对于引用@dimen的资源，请将其修改为float;\n对于引用@array的资源，如果资源是字符串数组，请将其修改为strarray，如果资源是整型数组，请将其修改为intarray。\n\n## 规则#4\n这条规则适用于通用描述的顺序。\n通用描述的顺序应该按照组件的逻辑顺序进行排列，确保描述的完整性和逻辑性。\n每个组件的描述应该包括布局属性、样式和外观、排列和嵌套关系、功能和交互、引用的资源等内容。\n\n## 规则#5\n这条规则适用于通用描述的内容。\n通用描述应该按照组件的嵌套关系进行描述，从外到内逐级描述每个组件的属性、样式和功能。\n请忽略有关主题的描述。\n\n## 规则6\n这条规则适用于功能效果描述。\n功能效果描述应该侧重于页面呈现的效果，包括组件的默认属性和默认行为，而不是具体的代码实现细节。\n例如：安卓复选框是包含文字的，而鸿蒙复选框是不包含文字的，因此在功能效果描述中应该添加复选框右侧文字的描述。\n安卓组件：\n<ChekBox\n    android:id=\"@+id/checkbox\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Check me\" />\n功能效果描述：一个复选框，右侧包含文字“Check me”，整体宽度和高度自适应。\n\n以下是一个可供参考的示例：\n安卓XML示例代码：\n```xml\n<LinearLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    android:padding=\"16dp\"\n    android:background=\"@drawable/custom_background\">\n\n    <TextView\n        android:id=\"@+id/title\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World\"\n        android:textColor=\"@color/primary_text\"\n        android:textSize=\"18sp\" />\n\n    <Button\n        android:id=\"@+id/submit_button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Submit\"\n        android:backgroundTint=\"#FF5722\" />\n</LinearLayout>\n```\n通用描述示例：\n- 垂直线性容器，宽度占满父容器，高度自适应，内边距为16vp，背景引用资源app.media.custom_background。\n    - 文本视图，宽度自适应，高度自适应，文本内容为“Hello World”，文本颜色引用资源app.color.primary_text，字体大小为18fp。\n    - 按钮，宽度自适应，高度自适应，文本内容为“Submit”，背景颜色为#FF5722。\n\n功能效果描述示例：\n实现了一个垂直线性容器，在容器中包含一个文本视图和一个按钮，其中文本视图，高度和宽度自适应，显示“Hello World”，字体颜色引用了 app.color.primary_text 资源，字体大小为18fp；在文本视图的正下方有一个按钮，按钮宽度和高度自适应，按钮显示“Submit”，背景颜色为 #FF5722。\n\n安卓XML代码如下：\n<androidx.preference.SwitchPreferenceCompat\n    android:defaultValue=\"true\"\n    android:key=\"pref_new_book_notification\"\n    android:summary=\"@string/settings_new_book_notifications_summary\"\n    android:title=\"@string/settings_new_book_notifications\" />\n请根据以上安卓XML代码编写一个通用描述，然后编写这页面实现的功能效果描述。\n\n**重要**：请确保通用描述和功能效果描述的准确性和完整性，确保其他开发者可以根据描述实现相同的布局和功能。\n", "component_description": {"layout_description": "开关偏好设置组件，默认值为true，键为pref_new_book_notification，摘要引用资源app.string.settings_new_book_notifications_summary，标题引用资源app.string.settings_new_book_notifications。", "function_description": "实现了一个开关偏好设置组件，默认状态为开启，组件的摘要显示引用资源app.string.settings_new_book_notifications_summary的内容，标题显示引用资源app.string.settings_new_book_notifications的内容。"}}}, {"id": "Cfh86xAnzZ5jMaQCkjasTH", "description": "查询组件文档", "subtasks": [{"id": "iryofEF5RScBHF7F9uUpvE", "description": "生成组件查询", "subtasks": [], "details": {"prompt": "你在一家软件公司工作，你被指派去为将安卓组件转译为鸿蒙ArkUI代码。\n\n\n待转译的安卓组件如下：\n# ['androidx.preference.SwitchPreferenceCompat']\n实现了一个开关偏好设置组件，默认状态为开启，组件的摘要显示引用资源app.string.settings_new_book_notifications_summary的内容，标题显示引用资源app.string.settings_new_book_notifications的内容。\n<androidx.preference.SwitchPreferenceCompat\n    android:defaultValue=\"true\"\n    android:key=\"pref_new_book_notification\"\n    android:summary=\"@string/settings_new_book_notifications_summary\"\n    android:title=\"@string/settings_new_book_notifications\" />\n\n实现这个需求可能会使用到某些ArkUI组件。\n以下是关于鸿蒙ArkUI API 12的组件基本文档：\n## AlphabetIndexer\n可以与容器组件联动用于按逻辑结构快速定位容器显示区域的组件。\n## Blank\n空白填充组件，在容器主轴方向上，空白填充组件具有自动填充容器空余部分的能力。仅当父组件为Row/Column/Flex时生效。\n## Button\n按钮组件，可快速创建不同样式的按钮。可以包含单个子组件。\n## CalendarPicker\n日历选择器组件，提供下拉日历弹窗，可以让用户选择日期。\n## Checkbox\n提供多选框组件，通常用于某选项的打开或关闭。可以包含Text组件。\n## CheckboxGroup\n多选框群组，用于控制多选框全选或者不全选状态。\n## Component3D\n3D渲染组件，可以加载3D模型资源并做自定义渲染，通常用于3D动效场景。\n## ContainerSpan\nText组件的子组件，用于统一管理多个Span、ImageSpan的背景色及圆角弧度。\n## DataPanel\n数据面板组件，用于将多个数据占比情况使用占比图进行展示。\n## DatePicker\n日期选择器组件，用于根据指定日期范围创建日期滑动选择器。\n## Divider\n提供分隔器组件，分隔不同内容块/内容元素。\n## Gauge\n数据量规图表组件，用于将数据展示为环形图表。\n## Image\n图片组件，常用于在应用中显示图片。Image支持加载PixelMap、ResourceStr和DrawableDescriptor类型的数据源，支持png、jpg、jpeg、bmp、svg、webp、gif和heif类型的图片格式。\n## ImageAnimator\n提供帧动画组件来实现逐帧播放图片的能力，可以配置需要播放的图片列表，每张图片可以配置时长。\n## ImageSpan\nText、ContainerSpan组件的子组件，用于显示行内图片。\n## LoadingProgress\n用于显示加载动效的组件。\n## Marquee\n跑马灯组件，用于滚动展示一段单行文本。仅当文本内容宽度超过跑马灯组件宽度时滚动，不超过时不滚动。\n## Menu\n以垂直列表形式显示的菜单。\n## MenuItem\n用来展示菜单Menu中具体的item菜单项。\n## MenuItemGroup\n该组件用来展示菜单MenuItem的分组。\n## Navigation\nNavigation组件是路由导航的根视图容器，一般作为Page页面的根容器使用，其内部默认包含了标题栏、内容区和工具栏，其中内容区默认首页显示导航内容（Navigation的子组件）或非首页显示（[NavDestination](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navdestination-V5)的子组件），首页和非首页通过路由进行切换。\n## NavRouter\n导航组件，默认提供点击响应处理，不需要开发者自定义点击事件逻辑。\n## NavDestination\n作为子页面的根容器，用于显示Navigation的内容区。\n## NodeContainer\n基础组件，不支持尾随添加子节点。组件接受一个NodeController的实例接口。需要NodeController组合使用。该组件下仅支持挂载自定义节点FrameNode或者是BuilderNode中获取的根节点FrameNode。不支持挂载查询获得的原生系统组件代理节点。\n## PatternLock\n图案密码锁组件，以九宫格图案的方式输入密码，用于密码验证场景。手指在PatternLock组件区域按下时开始进入输入状态，手指离开屏幕时结束输入状态完成密码输入。\n## Progress\n进度条组件，用于显示内容加载或操作处理等进度。\n## QRCode\n用于显示单个二维码的组件。\n## Radio\n单选框，提供相应的用户交互选择项。\n## Rating\n提供在给定范围内选择评分的组件。Rating组件的接口，用于设置评分值和是否作为指示器使用。\n## RichEditor\n支持图文混排和文本交互式编辑的组件。\n## RichText\n富文本组件，解析并显示HTML格式文本。\n## ScrollBar\n滚动条组件ScrollBar，用于配合可滚动组件使用，如List、Grid、Scroll。\n## Search\n搜索框组件，适用于浏览器的搜索内容输入框等应用场景。可以包含单个子组件。\n## Select\n提供下拉选择菜单，可以让用户在多个选项之间选择。可以包含单个子组件。\n## Slider\n滑动条组件，通常用于快速调节设置值，如音量调节、亮度调节等应用场景。\n## Span\n作为Text、ContainerSpan组件的子组件，用于显示行内文本的组件。\n## Stepper\n步骤导航器组件，适用于引导用户按照步骤完成任务的导航场景。\n## StepperItem\n用作Stepper组件的页面子组件。\n## SymbolSpan\n作为Text组件的子组件，用于显示图标小符号的组件。\n## SymbolGlyph\n显示图标小符号的组件。\n## Text\n显示一段文本的组件，可以包含Span、ImageSpan、SymbolSpan和ContainerSpan子组件。\n## TextArea\n多行文本输入框组件，当输入的文本内容超过组件宽度时会自动换行显示。\n## TextClock\nTextClock组件通过文本将当前系统时间显示在设备上。支持不同时区的时间显示，最高精度到秒级。\n## TextPicker\n根据range指定的选择范围创建文本选择器。\n## TextTimer\n通过文本显示计时信息并控制其计时器状态的组件。\n## TimePicker\n时间选择组件，根据指定参数创建选择器，支持选择小时及分钟。\n## Toggle\n组件提供勾选框样式、状态按钮样式及开关样式。\n## TextInput\n单行文本输入框组件。\n## XComponent\n可用于EGL/OpenGLES和媒体数据写入，并显示在XComponent组件。\n## Canvas\n提供画布组件，用于自定义绘制图形。\n## CanvasGradient\n渐变对象。\n## CanvasPattern\n一个Object对象，使用createPattern方法创建，通过指定图像和重复方式创建图片填充的模板。\n## DrawingRenderingContext\n使用DrawingRenderingContext在Canvas组件上进行绘制，绘制对象可以是矩形、文本、图片等。\n## ImageBitmap\nImageBitmap对象可以存储canvas渲染的像素数据。\n## ImageData\nImageData对象可以存储canvas渲染的像素数据。\n## Matrix2D\n矩阵对象，可以对矩阵进行缩放、旋转、平移等变换。\n## OffscreenCanvas\nOffscreenCanvas组件用于自定义绘制图形，可以在屏幕外渲染的画布，避免影响应用程序主线程性能。\n## OffscreenCanvasRenderingContext2D\n使用OffscreenCanvasRenderingContext2D在Canvas上进行离屏绘制，绘制对象可以是矩形、文本、图片等。离屏绘制是指将需要绘制的内容先绘制在缓存区，然后将其转换成图片，一次性绘制到canvas上，加快了绘制速度。\n## Path2D\n路径对象，支持通过对象的接口进行路径的描述，并通过Canvas的stroke接口或者fill接口进行绘制。\n## Badge\n可以附加在单个组件上用于信息标记的容器组件。\n## Column\n沿垂直方向布局的容器组件，可以包含子组件。\n## ColumnSplit\n将子组件纵向布局，并在每个子组件之间插入一根横向的分割线。\n## Counter\n计数器组件，提供相应的增加或者减少的计数操作。\n## EmbeddedComponent\n用于支持在当前页面嵌入本应用内其他EmbeddedUIExtensionAbility提供的UI。EmbeddedUIExtensionAbility在独立进程中运行，完成页面布局和渲染。通常用于有进程隔离诉求的模块化开发场景。\n## Flex\n以弹性方式布局子组件的容器组件。\n## GridCol\n栅格子组件，必须作为栅格容器组件(GridRow)的子组件使用。可以包含单个子组件。\n## GridRow\n栅格容器组件，仅可以和栅格子组件(GridCol)在栅格布局场景中使用。\n## Grid\n网格容器，由“行”和“列”分割的单元格所组成，通过指定“项目”所在的单元格做出各种各样的布局。\n## GridItem\n网格容器中单项内容容器，仅支持作为Grid组件的子组件使用。\n## List\n列表包含一系列相同宽度的列表项。适合连续、多行呈现同类数据，例如图片和文本。可以包含ListItem、ListItemGroup子组件，支持渲染控制类型（if/else、ForEach、LazyForEach和Repeat）。\n## ListItem\n用来展示列表具体item，必须配合List来使用。\n## ListItemGroup\n该组件用来展示列表item分组，宽度默认充满List组件，必须配合List组件来使用。\n## RelativeContainer\n相对布局组件，用于复杂场景中元素对齐的布局。\n## Row\n沿水平方向布局容器，可以包含子组件。\n## Scroll\n可滚动的容器组件，当子组件的布局尺寸超过父组件的尺寸时，内容可以滚动，支持单个子组件。\n## Stack\n堆叠容器，子组件按照顺序依次入栈，后一个子组件覆盖前一个子组件。可以包含多个子组件。\n## Tabs\n通过页签进行内容视图切换的容器组件，每个页签对应一个内容视图，不支持自定义组件作为子组件， 仅可包含子组件TabContent。\n## TabContent\n仅在Tabs中使用，对应一个切换页签的内容视图，支持单个子组件。\n## WaterFlow\n瀑布流容器，由“行”和“列”分割的单元格所组成，通过容器自身的排列规则，将不同大小的“项目”自上而下，如瀑布般紧密布局。\n## WithTheme\nWithTheme组件用于设置应用局部页面自定义主题风格，可设置子组件深浅色模式和自定义配色。\n## Circle\n用于绘制圆形的组件。\n## Ellipse\n椭圆绘制组件。\n## Line\n直线绘制组件。\n## Polyline\n折线绘制组件。\n## Polygon\n多边形绘制组件。\n## Path\n路径绘制组件，根据绘制路径生成封闭的自定义形状。\n## Rect\n绘制组件的父组件，实现类似SVG的效果。绘制组件单独使用，用于在页面上绘制指定的图形。\n## Shape\n矩形绘制组件。\n## AlertDialog\n显示警告弹窗组件，可设置文本内容与响应回调。\n## ActionSheet\n列表选择弹窗 (ActionSheet) 是一个全局UI方法，属于ArkTS组件，用于在ArkUI（方舟UI框架）中显示一个带有多个选项的弹窗。\n## CustomDialog\n通过CustomDialogController类显示自定义弹窗。使用弹窗组件时，可优先考虑自定义弹窗，便于自定义弹窗的样式与内容。\n## CalendarPickerDialog\n点击日期弹出日历选择器弹窗，可选择弹窗内任意日期。\n## DatePickerDialog\n日期滑动选择器弹窗，用于在弹窗上展示日期选择器。\n## TimePickerDialog\n时间滑动选择器弹窗 (TimePickerDialog) 是一个全局UI方法，用于以24小时的时间区间创建时间滑动选择器，并展示在弹窗上。\n## TextPickerDialog\n文本滑动选择器弹窗，用于在指定的选择范围内创建文本选择器并展示在弹窗上。\n## Video\n用于播放视频文件并控制其播放状态的组件。\n## LocationButton\n安全控件的位置控件，用户通过点击该位置按钮，可以临时获取精准定位权限，而不需要权限弹框授权确认。\n## PasteButton\n安全控件的粘贴按钮，用户通过点击该粘贴按钮，可以临时获取读取剪贴板权限。\n## SaveButton\n安全控件的保存控件，用户通过点击该保存按钮，可以临时获取存储权限，而不需要权限弹框授权确认。\n## ChipGroup\nChipGroup高级组件，提供操作块群组，用于对文件或者资源内容进行分类等场景。\n## Chip\n操作块组件，用于搜索框历史记录或者邮件发送列表等场景。\n## ToolBar\n工具栏用于展示针对当前界面内容的操作选项，在界面底部显示。底部最多显示5个入口，超过则收纳入“更多”子项中，在最右侧显示。\n## ComposeTitleBar\n一种普通标题栏，支持设置标题、头像（可选）和副标题（可选），可用于一级页面、二级及其以上界面配置返回键。\n\n\n\n在开始任务之前，你需要对待转译的安卓组件进行分析，以便选择合适的ArkUI组件来实现相同的功能。\n然后，你需要从上述ArkUI组件中选择一个或多个组件，使其能够实现上述安卓组件的功能，并保持布局和样式尽可能一致。\n对于无法直接转译的安卓组件，你可以通过组合多个ArkUI组件来实现，一定不能选择不存在的组件。\n在完成选择后，你需要编写一条或多条用于在知识库或RAG系统中检索的查询语句。每条查询应聚焦于不同的功能细节或组件的具体属性，帮助快速、精确地检索到相关的文档、代码示例或实现方法。\n**重要**：你只能从[AlphabetIndexer, Blank, Button, CalendarPicker, Checkbox, CheckboxGroup, Component3D, ContainerSpan, DataPanel, DatePicker, Divider, Gauge, Image, ImageAnimator, ImageSpan, LoadingProgress, Marquee, Menu, MenuItem, MenuItemGroup, Navigation, NavRouter, NavDestination, NodeContainer, PatternLock, Progress, QRCode, Radio, Rating, RichEditor, RichText, ScrollBar, Search, Select, Slider, Span, Stepper, StepperItem, SymbolSpan, SymbolGlyph, Text, TextArea, TextClock, TextPicker, TextTimer, TimePicker, Toggle, TextInput, XComponent, Canvas, CanvasGradient, CanvasPattern, DrawingRenderingContext, ImageBitmap, ImageData, Matrix2D, OffscreenCanvas, OffscreenCanvasRenderingContext2D, Path2D, Badge, Column, ColumnSplit, Counter, EmbeddedComponent, Flex, GridCol, GridRow, Grid, GridItem, List, ListItem, ListItemGroup, RelativeContainer, Row, Scroll, Stack, Tabs, TabContent, WaterFlow, WithTheme, Circle, Ellipse, Line, Polyline, Polygon, Path, Rect, Shape, AlertDialog, ActionSheet, CustomDialog, CalendarPickerDialog, DatePickerDialog, TimePickerDialog, TextPickerDialog, Video, LocationButton, PasteButton, SaveButton, ChipGroup, Chip, ToolBar, ComposeTitleBar]中选择ArkUI组件，请你认真检查，一定不可以选择不存在的ArkUI组件。\n**重要**：查询语句需要涵盖以下方面：布局属性（如宽度、高度、边距等）、组件的样式和外观（如颜色、字体、透明度等）、组件的排列和嵌套关系（如垂直或水平布局、对齐方式）、组件的功能和交互（如点击事件、输入验证），确保每条查询简洁明了且仅聚焦单一方面，突出关键信息，以便加快内容检索过程。\n\n## 以下是选择组件的额外规则：\n* 规则1：待转译的安卓布局文件中存在属性layout_constraintXXX_toXXXOf，其中XXX为Start、End、Top、Bottom等，你应该额外选择鸿蒙ArkUI的RelativeContainer组件。\n* 规则2：当使用com.google.android.material.appbar.AppBarLayout与androidx.appcompat.widget.Toolbar实现标题栏时，你应该选择Row、Text、Image等组件来实现标题栏，需要注意鸿蒙组件的Toolbar特指底部导航栏而非安卓中的标题栏。\n* 规则3：Scroll组件的子组件通常采用Column或Row组件，你应该根据滚动的方向来选择，当滚动方向为垂直时，应该选择Column组件，当滚动方向为水平时，应该选择Row组件。\n\n以下是一个示例：\n安卓组件：EditText\n<EditText\nandroid:id=\"@+id/et_1\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"50dp\"\nandroid:layout_marginBottom=\"15dp\"\nandroid:autofillHints=\"\"\nandroid:hint=\"请输入文字\"\nandroid:inputType=\"text\"\nandroid:paddingLeft=\"15dp\"\nandroid:paddingRight=\"15dp\"\nandroid:textColor=\"@color/black\"\nandroid:textSize=\"16sp\" />\n回答：\n```json\n{\n    \"components\": [\"TextInput\"],\n    \"queries\": [\n        {\n            \"queries\": [\"设置输入框的高度\", \"设置输入框的宽度\", \"设置输入框的底部边距\", \"设置输入框的提示文本\", \"设置输入框的输入类型\", \"设置输入框的左内边距\", \"设置输入框的右内边距\", \"设置输入框的文本颜色\", \"设置输入框的字体大小\"],\n            \"component\": \"TextInput\",\n        },\n    ],\n    \"idea\": \"可以选择TextInput组件来实现EditText组件的功能，设置TextInput组件的属性来实现EditText组件的样式和功能。\"\n}\n```", "component_query": {"components": ["Toggle", "Text"], "queries": [{"component": "Toggle", "queries": ["设置开关的默认状态为开启", "设置开关的键值", "设置开关的摘要文本", "设置开关的标题文本"]}, {"component": "Text", "queries": ["设置文本的引用资源内容", "设置文本的显示样式"]}], "idea": "选择Toggle组件来实现SwitchPreferenceCompat组件的开关功能，使用Text组件来显示标题和摘要文本，通过设置Toggle和Text的属性来实现与安卓组件相同的功能和样式。"}}}, {"id": "Db5jgv9sNwX5atGQePCFrQ", "description": "修正组件查询", "subtasks": [], "details": {"component_query": {"components": ["Toggle", "Text"], "queries": [{"component": "Toggle", "queries": ["设置开关的默认状态为开启", "设置开关的键值", "设置开关的摘要文本", "设置开关的标题文本"]}, {"component": "Text", "queries": ["设置文本的引用资源内容", "设置文本的显示样式"]}], "idea": "选择Toggle组件来实现SwitchPreferenceCompat组件的开关功能，使用Text组件来显示标题和摘要文本，通过设置Toggle和Text的属性来实现与安卓组件相同的功能和样式。"}, "corrected_component_query": {"components": ["Toggle", "Text"], "queries": [{"component": "Toggle", "queries": ["设置开关的默认状态为开启", "设置开关的键值", "设置开关的摘要文本", "设置开关的标题文本"]}, {"component": "Text", "queries": ["设置文本的引用资源内容", "设置文本的显示样式"]}], "idea": "选择Toggle组件来实现SwitchPreferenceCompat组件的开关功能，使用Text组件来显示标题和摘要文本，通过设置Toggle和Text的属性来实现与安卓组件相同的功能和样式。"}}}, {"id": "QX2giBaYQgLJ6VqPDWRn4F", "description": "查询示例文档", "subtasks": [], "details": {"query": "实现了一个开关偏好设置组件，默认状态为开启，组件的摘要显示引用资源app.string.settings_new_book_notifications_summary的内容，标题显示引用资源app.string.settings_new_book_notifications的内容。", "k": 3, "component_name": ["Toggle", "Text"], "score_threshold": 0.6, "example_knowledge_results": [[{"id": null, "metadata": {"component_name": "Text", "source": "harmony-component-example-doc", "table_id": 147}, "page_content": "该组件展示了如何配置隐私敏感信息的隐藏功能。组件通过 Column 布局实现了一个简单的界面，其中包含一个 Text 组件，用于显示隐私敏感信息。布局宽度占据整个屏幕，高度由内容自动调整。组件的垂直方向上仅包含一个 Text 组件，对齐方式为居中对齐。\n\nText 组件的样式包括字体、颜色等属性，支持隐私敏感信息的显示和隐藏。通过设置 `privacySensitive(true)`，Text 组件的内容在需要时会被隐藏，以保护用户隐私。组件的功能主要是展示隐私敏感信息的隐藏效果，用户无法直接看到被隐藏的内容。\n\n整个布局通过 Column 布局保证 Text 组件在垂直方向上居中显示，确保界面简洁明了。", "type": "Document"}, 0.6037293076515198], [{"id": null, "metadata": {"component_name": "Text", "source": "harmony-component-example-doc", "table_id": 155}, "page_content": "该组件通过Column布局实现了一个展示文本处理效果的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个文本展示区域和一组按钮。每个文本展示区域的文本以不同的省略号模式和断词模式进行展示，按钮用于切换这些模式。\n\n文本展示区域的样式包括字体大小、边框、行高、最大行数、宽度等属性，支持不同的样式展示。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Row组件进行分隔。\n\n按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。整个布局通过Column布局保证文本展示区域和按钮在垂直方向上有序排列，确保界面整洁美观。", "type": "Document"}, 0.6017636656761169], [{"id": null, "metadata": {"component_name": "Toggle", "source": "harmony-component-example-doc", "table_id": 115}, "page_content": "该组件通过 Column 布局实现了一个展示多种类型切换组件（如开关、复选框、按钮）及其状态效果的界面。布局宽度占据整个屏幕，内边距为左右 24vp、顶部 24vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组切换组件。每个切换组件组的组件以水平布局方式排列，组件之间的间距均匀分布，且对齐方式为居中对齐。\n切换组件的样式包括背景颜色、选中颜色、大小等属性，支持不同的样式展示。切换组件组之间通过 Column 组件进行分隔。切换组件的功能包括状态变化事件，用户可以通过操作切换组件触发相应操作，切换组件也可以在启用或禁用状态下进行展示。\n整个布局通过 Column 布局保证切换组件在垂直方向上有序排列，确保界面整洁美观。", "type": "Document"}, 0.6016100645065308]], "component_examples": {"Text": [{"description": "该组件展示了如何配置隐私敏感信息的隐藏功能。组件通过 Column 布局实现了一个简单的界面，其中包含一个 Text 组件，用于显示隐私敏感信息。布局宽度占据整个屏幕，高度由内容自动调整。组件的垂直方向上仅包含一个 Text 组件，对齐方式为居中对齐。\n\nText 组件的样式包括字体、颜色等属性，支持隐私敏感信息的显示和隐藏。通过设置 `privacySensitive(true)`，Text 组件的内容在需要时会被隐藏，以保护用户隐私。组件的功能主要是展示隐私敏感信息的隐藏效果，用户无法直接看到被隐藏的内容。\n\n整个布局通过 Column 布局保证 Text 组件在垂直方向上居中显示，确保界面简洁明了。", "code": "@Entry\n@Component\nstruct ImageExample {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局的 Column 组件，子组件之间的间距为 10vp\n      Text(\"privacySensitive\") // 创建一个 Text 组件，显示文本 \"privacySensitive\"\n        .privacySensitive(true) // 设置 Text 组件为隐私敏感，内容在需要时会被隐藏\n        .margin({top :30}) // 设置 Text 组件的上边距为 30vp\n    }\n    .alignItems(HorizontalAlign.Center) // 设置 Column 组件的子组件在水平方向上居中对齐\n    .width(\"100%\") // 设置 Column 组件的宽度为 100%，占据整个屏幕宽度\n  }\n}"}, {"description": "该组件通过Column布局实现了一个展示文本处理效果的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个文本展示区域和一组按钮。每个文本展示区域的文本以不同的省略号模式和断词模式进行展示，按钮用于切换这些模式。\n\n文本展示区域的样式包括字体大小、边框、行高、最大行数、宽度等属性，支持不同的样式展示。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Row组件进行分隔。\n\n按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。整个布局通过Column布局保证文本展示区域和按钮在垂直方向上有序排列，确保界面整洁美观。", "code": "@Entry\n@Component\nstruct TextExample4 {\n  @State text: string =\n    'The text component is used to display a piece of textual information.Support universal attributes and universal text attributes.'\n  @State ellipsisModeIndex: number = 0;\n  @State ellipsisMode: EllipsisMode[] = [EllipsisMode.START, EllipsisMode.CENTER, EllipsisMode.END]\n  @State ellipsisModeStr: string[] = ['START', 'CENTER', 'END']\n  @State wordBreakIndex: number = 0;\n  @State wordBreak: WordBreak[] = [WordBreak.NORMAL, WordBreak.BREAK_ALL, WordBreak.BREAK_WORD]\n  @State wordBreakStr: string[] = ['NORMAL', 'BREAK_ALL', 'BREAK_WORD']\n  @State textClip: boolean = false\n\n  build() {\n    Column({ space: 10 }) {\n      // 第一个文本展示区域，展示省略号模式的效果\n      Text(this.text)\n        .fontSize(16) // 设置字体大小为16\n        .border({ width: 1 }) // 设置边框宽度为1\n        .lineHeight(20) // 设置行高为20\n        .maxLines(1) // 设置最大行数为1\n        .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n        .ellipsisMode(this.ellipsisMode[this.ellipsisModeIndex]) // 设置省略号模式\n        .width(300) // 设置宽度为300\n        .margin({ left: 20, top: 20 }) // 设置左边距和上边距为20\n\n      // 按钮区域，用于切换省略号模式\n      Row() {\n        Button('更改省略号位置：' + this.ellipsisModeStr[this.ellipsisModeIndex]).onClick(() => {\n          this.ellipsisModeIndex++\n          if (this.ellipsisModeIndex > (this.ellipsisModeStr.length - 1)) {\n            this.ellipsisModeIndex = 0\n          }\n        })\n      }\n\n      // 第二个文本展示区域，展示断词模式的效果\n      Text('This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.')\n        .fontSize(12) // 设置字体大小为12\n        .border({ width: 1 }) // 设置边框宽度为1\n        .wordBreak(WordBreak.NORMAL) // 设置断词模式为NORMAL\n        .lineHeight(20) // 设置行高为20\n        .maxLines(2) // 设置最大行数为2\n        .clip(this.textClip) // 设置是否裁剪文本\n        .width(260) // 设置宽度为260\n\n      // 按钮区域，用于切换裁剪模式\n      Row() {\n        Button('切换clip：' + this.textClip).onClick(() => {\n          this.textClip = !this.textClip\n        })\n      }\n\n      // 第三个文本展示区域，展示断词模式的效果\n      Text(this.text)\n        .fontSize(12) // 设置字体大小为12\n        .border({ width: 1 }) // 设置边框宽度为1\n        .maxLines(2) // 设置最大行数为2\n        .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n        .wordBreak(this.wordBreak[this.wordBreakIndex]) // 设置断词模式\n        .lineHeight(20) // 设置行高为20\n        .width(260) // 设置宽度为260\n\n      // 按钮区域，用于切换断词模式\n      Row() {\n        Button('更改wordBreak模式：' + this.wordBreakStr[this.wordBreakIndex]).onClick(() => {\n          this.wordBreakIndex++\n          if (this.wordBreakIndex > (this.wordBreakStr.length - 1)) {\n            this.wordBreakIndex = 0\n          }\n        })\n      }\n    }\n  }\n}"}], "Toggle": [{"description": "该组件通过 Column 布局实现了一个展示多种类型切换组件（如开关、复选框、按钮）及其状态效果的界面。布局宽度占据整个屏幕，内边距为左右 24vp、顶部 24vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组切换组件。每个切换组件组的组件以水平布局方式排列，组件之间的间距均匀分布，且对齐方式为居中对齐。\n切换组件的样式包括背景颜色、选中颜色、大小等属性，支持不同的样式展示。切换组件组之间通过 Column 组件进行分隔。切换组件的功能包括状态变化事件，用户可以通过操作切换组件触发相应操作，切换组件也可以在启用或禁用状态下进行展示。\n整个布局通过 Column 布局保证切换组件在垂直方向上有序排列，确保界面整洁美观。", "code": "@Entry\n@Component\nstruct ToggleExample {\n  build() {\n    Column({ space: 10 }) { // 使用 Column 布局，设置组件之间的间距为 10vp\n      Text('type: Switch').fontSize(12).fontColor(0xcccccc).width('90%') // 显示标题文本，字体大小为 12vp，颜色为灰色，宽度为 90%\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) { // 使用 Flex 布局，水平方向上均匀分布组件，垂直方向上居中对齐\n        Toggle({ type: ToggleType.Switch, isOn: false }) // 创建一个开关类型的切换组件，初始状态为关闭\n          .selectedColor('#007DFF') // 设置选中状态的颜色为蓝色\n          .switchPointColor('#FFFFFF') // 设置开关滑块的颜色为白色\n          .onChange((isOn: boolean) => { // 监听状态变化事件\n            console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n          })\n\n        Toggle({ type: ToggleType.Switch, isOn: true }) // 创建一个开关类型的切换组件，初始状态为开启\n          .selectedColor('#007DFF') // 设置选中状态的颜色为蓝色\n          .switchPointColor('#FFFFFF') // 设置开关滑块的颜色为白色\n          .onChange((isOn: boolean) => { // 监听状态变化事件\n            console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n          })\n      }\n\n      Text('type: Checkbox').fontSize(12).fontColor(0xcccccc).width('90%') // 显示标题文本，字体大小为 12vp，颜色为灰色，宽度为 90%\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) { // 使用 Flex 布局，水平方向上均匀分布组件，垂直方向上居中对齐\n        Toggle({ type: ToggleType.Checkbox, isOn: false }) // 创建一个复选框类型的切换组件，初始状态为关闭\n          .size({ width: 20, height: 20 }) // 设置复选框的大小为 20vp x 20vp\n          .selectedColor('#007DFF') // 设置选中状态的颜色为蓝色\n          .onChange((isOn: boolean) => { // 监听状态变化事件\n            console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n          })\n\n        Toggle({ type: ToggleType.Checkbox, isOn: true }) // 创建一个复选框类型的切换组件，初始状态为开启\n          .size({ width: 20, height: 20 }) // 设置复选框的大小为 20vp x 20vp\n          .selectedColor('#007DFF') // 设置选中状态的颜色为蓝色\n          .onChange((isOn: boolean) => { // 监听状态变化事件\n            console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n          })\n      }\n\n      Text('type: Button').fontSize(12).fontColor(0xcccccc).width('90%') // 显示标题文本，字体大小为 12vp，颜色为灰色，宽度为 90%\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) { // 使用 Flex 布局，水平方向上均匀分布组件，垂直方向上居中对齐\n        Toggle({ type: ToggleType.Button, isOn: false }) { // 创建一个按钮类型的切换组件，初始状态为关闭\n          Text('status button').fontColor('#182431').fontSize(12) // 按钮内的文本，字体颜色为深色，字体大小为 12vp\n        }.width(106) // 设置按钮的宽度为 106vp\n        .selectedColor('rgba(0,125,255,0.20)') // 设置选中状态的颜色为半透明蓝色\n        .onChange((isOn: boolean) => { // 监听状态变化事件\n          console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n        })\n\n        Toggle({ type: ToggleType.Button, isOn: true }) { // 创建一个按钮类型的切换组件，初始状态为开启\n          Text('status button').fontColor('#182431').fontSize(12) // 按钮内的文本，字体颜色为深色，字体大小为 12vp\n        }.width(106) // 设置按钮的宽度为 106vp\n        .selectedColor('rgba(0,125,255,0.20)') // 设置选中状态的颜色为半透明蓝色\n        .onChange((isOn: boolean) => { // 监听状态变化事件\n          console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n        })\n      }\n    }.width('100%').padding(24) // 设置 Column 的宽度为 100%，内边距为 24vp\n  }\n}"}]}}}, {"id": "jZm2qcjCSYZXEFjP4sYnej", "description": "查询组件文档", "subtasks": [{"id": "7ACJwRnVAznaT59LpKsts2", "description": "依次从知识库中查询每个组件的相关属性、事件文档", "subtasks": [{"id": "SDvCeqDmn8irAco3kFjxkW", "description": "查询组件Toggle的相关属性、事件文档", "subtasks": [], "details": {"query": ["设置开关的默认状态为开启", "设置开关的键值", "设置开关的摘要文本", "设置开关的标题文本"], "n_results": 10, "query_results": {"ids": [["7ad882d8-2c7f-4099-9aa1-8e7f991c7b12", "a4f6c35e-d771-4737-ad38-30b603bf500a", "e6ae83b2-3ab4-4805-bac6-9108b858fd2d", "36c201d0-8da5-4728-ac7f-87e9008b0807", "4b5a7105-3bb5-45f4-a069-ff2125441923", "21225eba-5d30-401a-a73e-7dd13ed72200", "086fcc37-1338-44fa-8606-1768a37bc243", "6932be74-e77d-48c3-9ffd-198b12860300", "d25287a6-57e2-4f9b-baf9-a4bf9302afcd", "71cdcde6-ef46-4a00-8017-47a19f6d534c"], ["7ad882d8-2c7f-4099-9aa1-8e7f991c7b12", "20130348-957f-430d-8e9d-08970dbbe99d", "71cdcde6-ef46-4a00-8017-47a19f6d534c", "21225eba-5d30-401a-a73e-7dd13ed72200", "086fcc37-1338-44fa-8606-1768a37bc243", "23b4992c-8360-4f3a-adb9-55a65859786e", "c7150ed5-d990-4553-9795-cd5e694ce7c8", "36c201d0-8da5-4728-ac7f-87e9008b0807", "68b84662-f883-4c55-8e02-a928e5758b5e", "e6ae83b2-3ab4-4805-bac6-9108b858fd2d"], ["7ad882d8-2c7f-4099-9aa1-8e7f991c7b12", "fc2bbfe8-4704-41e2-870e-89873c88ef92", "15b23864-f61f-42f8-8725-fcda61ff859d", "e6b32d76-9a38-4e8e-9ca9-e908dfde8283", "71cdcde6-ef46-4a00-8017-47a19f6d534c", "a4f6c35e-d771-4737-ad38-30b603bf500a", "e76c57a2-a711-4403-ba5c-a63facee8317", "22a35973-3a2c-4db3-a835-86bcea94c4a1", "c0ecabd4-8894-46c9-a1cd-14979dc57d2b", "d25287a6-57e2-4f9b-baf9-a4bf9302afcd"], ["7ad882d8-2c7f-4099-9aa1-8e7f991c7b12", "15b23864-f61f-42f8-8725-fcda61ff859d", "a4f6c35e-d771-4737-ad38-30b603bf500a", "fc2bbfe8-4704-41e2-870e-89873c88ef92", "e6b32d76-9a38-4e8e-9ca9-e908dfde8283", "71cdcde6-ef46-4a00-8017-47a19f6d534c", "e6ae83b2-3ab4-4805-bac6-9108b858fd2d", "22a35973-3a2c-4db3-a835-86bcea94c4a1", "55c63c10-be2d-41f5-a2e1-3517d66a03fa", "c0ecabd4-8894-46c9-a1cd-14979dc57d2b"]], "distances": [[0.3438742160797119, 0.3744642734527588, 0.46364450454711914, 0.46480095386505127, 0.4839552044868469, 0.49540287256240845, 0.49867284297943115, 0.5017316341400146, 0.5020901560783386, 0.5051044821739197], [0.39740943908691406, 0.4391665458679199, 0.4402271509170532, 0.45968544483184814, 0.463225781917572, 0.46829283237457275, 0.47138237953186035, 0.4769846200942993, 0.4773625135421753, 0.4777451157569885], [0.47650766372680664, 0.4785626530647278, 0.5097521543502808, 0.5136072635650635, 0.5146421194076538, 0.5168817639350891, 0.5236607789993286, 0.5290845632553101, 0.5307989716529846, 0.5337011218070984], [0.4448091387748718, 0.4829059839248657, 0.4877621531486511, 0.48850345611572266, 0.4907459616661072, 0.5017365217208862, 0.5044945478439331, 0.5185604691505432, 0.5199569463729858, 0.5226194858551025]], "metadatas": [[{"component_name": "Toggle", "name": "onChange", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Toggle", "name": "selectedColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "switchStyle", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "fontStyle", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "size", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "padding", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "switchPointColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "chainMode", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "markAnchor", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "Toggle", "name": "onChange", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Toggle", "name": "flexBasis", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "markAnchor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "size", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "padding", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "height", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "margin", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "constraintSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "switchStyle", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "Toggle", "name": "onChange", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Toggle", "name": "contentModifier", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "lineHeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "decoration", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "markAnchor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "selectedColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "fontWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "chainMode", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "Toggle", "name": "onChange", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Toggle", "name": "lineHeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "selectedColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "contentModifier", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "decoration", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "markAnchor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "switchStyle", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "fontColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}]], "embeddings": null, "documents": [["开关状态切换时触发该事件。\n事件名称：onChange\n事件参数：{'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"为true时，代表状态从关切换为开。false时，代表状态从开切换为关。\",\"default\":null}}\n事件返回值：None\n", "设置组件打开状态的背景颜色。\n属性名称：selectedColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"组件打开状态的背景颜色。\",\"default\":null}}\n", "设置Switch类型的样式。仅对type为ToggleType.Switch生效。\n属性名称：switchStyle\n属性参数：{'value': {\"type\":\"SwitchStyle\",\"required\":false,\"description\":\"Switch类型的样式配置。\",\"default\":null}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "设置字体样式。\n属性名称：fontStyle\n属性参数：{'value': {\"type\":\"FontStyle\",\"required\":true,\"description\":\"字体样式。默认值：FontStyle.Normal\",\"default\":\"FontStyle.Normal\"}}\n", "设置高宽尺寸。从API version 10开始，该接口支持calc计算特性。\n属性名称：size\n属性参数：{'value': {\"type\":\"SizeOptions\",\"required\":true,\"description\":\"要设置的高宽尺寸。\",\"default\":null}}\n", "设置内边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：padding\n属性参数：{'value': {\"type\":[\"Padding\",\"Length\",\"LocalizedPadding\"],\"required\":true,\"description\":\"设置组件的内边距。参数为Length类型时，四个方向内边距同时生效。默认值：0。单位：vp。padding设置百分比时，上下左右内边距均以父容器的width作为基础值。\",\"default\":null}}\n", "设置Switch类型的圆形滑块颜色。仅对type为ToggleType.Switch生效。\n属性名称：switchPointColor\n属性参数：{'color': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"Switch类型的圆形滑块颜色。\",\"default\":\"#ffffffff\"}}\n", "指定以该组件为链头所构成的链的参数，仅当父容器为RelativeContainer时生效。\n属性名称：chainMode\n属性参数：{'direction': {\"type\":\"Axis\",\"required\":true,\"description\":\"链的方向。\",\"default\":null}, 'style': {\"type\":\"ChainStyle\",\"required\":true,\"description\":\"链的样式。\",\"default\":null}}\n", "设置子元素在位置定位时的锚点。\n属性名称：markAnchor\n属性参数：{'value': {\"type\":[\"Position\",\"LocalizedPosition\"],\"required\":true,\"description\":\"设置子元素在位置定位时的锚点，从position或offset的位置上，进一步偏移。设置.position({x: value1, y: value2}).markAnchor({x: value3, y: value4})，效果等于设置.position({x: value1 - value3, y: value2 - value4})，offset同理。单独使用markAnchor，设置.markAnchor({x: value1, y: value2})，效果等于设置.offset({x: -value1, y: -value2})。\",\"default\":null}}\n"], ["开关状态切换时触发该事件。\n事件名称：onChange\n事件参数：{'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"为true时，代表状态从关切换为开。false时，代表状态从开切换为关。\",\"default\":null}}\n事件返回值：None\n", "设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n", "设置子元素在位置定位时的锚点。\n属性名称：markAnchor\n属性参数：{'value': {\"type\":[\"Position\",\"LocalizedPosition\"],\"required\":true,\"description\":\"设置子元素在位置定位时的锚点，从position或offset的位置上，进一步偏移。设置.position({x: value1, y: value2}).markAnchor({x: value3, y: value4})，效果等于设置.position({x: value1 - value3, y: value2 - value4})，offset同理。单独使用markAnchor，设置.markAnchor({x: value1, y: value2})，效果等于设置.offset({x: -value1, y: -value2})。\",\"default\":null}}\n", "设置高宽尺寸。从API version 10开始，该接口支持calc计算特性。\n属性名称：size\n属性参数：{'value': {\"type\":\"SizeOptions\",\"required\":true,\"description\":\"要设置的高宽尺寸。\",\"default\":null}}\n", "设置内边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：padding\n属性参数：{'value': {\"type\":[\"Padding\",\"Length\",\"LocalizedPadding\"],\"required\":true,\"description\":\"设置组件的内边距。参数为Length类型时，四个方向内边距同时生效。默认值：0。单位：vp。padding设置百分比时，上下左右内边距均以父容器的width作为基础值。\",\"default\":null}}\n", "设置组件自身的高度，缺省时使用元素自身内容需要的高度。若子组件的高大于父组件的高，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：height\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件高度。单位：vp\",\"default\":null}}\n", "设置外边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：margin\n属性参数：{'value': {\"type\":[\"Margin\",\"Length\",\"LocalizedMargin\"],\"required\":true,\"description\":\"设置组件的外边距。参数为Length类型时，四个方向外边距同时生效。默认值：0。单位：vp。margin设置百分比时，上下左右外边距均以父容器的width作为基础值。\",\"default\":null}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "设置约束尺寸，组件布局时，进行尺寸范围限制。从API version 10开始，该接口支持calc计算特性。\n属性名称：constraintSize\n属性参数：{'value': {\"type\":\"ConstraintSizeOptions\",\"required\":true,\"description\":\"设置约束尺寸。constraintSize的优先级高于Width和Height。取值结果参考constraintSize取值对width/height影响。默认值：{ minWidth: 0, maxWidth: Infinity, minHeight: 0, maxHeight: Infinity }。单位：vp\",\"default\":null}}\n", "设置Switch类型的样式。仅对type为ToggleType.Switch生效。\n属性名称：switchStyle\n属性参数：{'value': {\"type\":\"SwitchStyle\",\"required\":false,\"description\":\"Switch类型的样式配置。\",\"default\":null}}\n"], ["开关状态切换时触发该事件。\n事件名称：onChange\n事件参数：{'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"为true时，代表状态从关切换为开。false时，代表状态从开切换为关。\",\"default\":null}}\n事件返回值：None\n", "定制Toggle内容区的方法。\n属性名称：contentModifier\n属性参数：{'modifier': {\"type\":\"ContentModifier<ToggleConfiguration>\",\"required\":false,\"description\":\"定制Toggle内容区的方法。\",\"default\":null}}\n", "设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小。\n属性名称：lineHeight\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本行高，为number类型时单位为fp。\",\"default\":null}}\n", "设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n", "设置子元素在位置定位时的锚点。\n属性名称：markAnchor\n属性参数：{'value': {\"type\":[\"Position\",\"LocalizedPosition\"],\"required\":true,\"description\":\"设置子元素在位置定位时的锚点，从position或offset的位置上，进一步偏移。设置.position({x: value1, y: value2}).markAnchor({x: value3, y: value4})，效果等于设置.position({x: value1 - value3, y: value2 - value4})，offset同理。单独使用markAnchor，设置.markAnchor({x: value1, y: value2})，效果等于设置.offset({x: -value1, y: -value2})。\",\"default\":null}}\n", "设置组件打开状态的背景颜色。\n属性名称：selectedColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"组件打开状态的背景颜色。\",\"default\":null}}\n", "设置文本的字体粗细，设置过大可能会在不同字体下有截断。\n属性名称：fontWeight\n属性参数：{'value': {\"type\":[\"number\",\"FontWeight\",\"string\"],\"required\":true,\"description\":\"文本的字体粗细，number类型取值[100, 900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如\\\"400\\\"，以及\\\"bold\\\"、\\\"bolder\\\"、\\\"lighter\\\"、\\\"regular\\\"、\\\"medium\\\"，分别对应FontWeight中相应的枚举值。默认值：FontWeight.Normal\",\"default\":\"FontWeight.Normal\"}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "指定以该组件为链头所构成的链的参数，仅当父容器为RelativeContainer时生效。\n属性名称：chainMode\n属性参数：{'direction': {\"type\":\"Axis\",\"required\":true,\"description\":\"链的方向。\",\"default\":null}, 'style': {\"type\":\"ChainStyle\",\"required\":true,\"description\":\"链的样式。\",\"default\":null}}\n"], ["开关状态切换时触发该事件。\n事件名称：onChange\n事件参数：{'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"为true时，代表状态从关切换为开。false时，代表状态从开切换为关。\",\"default\":null}}\n事件返回值：None\n", "设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小。\n属性名称：lineHeight\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本行高，为number类型时单位为fp。\",\"default\":null}}\n", "设置组件打开状态的背景颜色。\n属性名称：selectedColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"组件打开状态的背景颜色。\",\"default\":null}}\n", "定制Toggle内容区的方法。\n属性名称：contentModifier\n属性参数：{'modifier': {\"type\":\"ContentModifier<ToggleConfiguration>\",\"required\":false,\"description\":\"定制Toggle内容区的方法。\",\"default\":null}}\n", "设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n", "设置子元素在位置定位时的锚点。\n属性名称：markAnchor\n属性参数：{'value': {\"type\":[\"Position\",\"LocalizedPosition\"],\"required\":true,\"description\":\"设置子元素在位置定位时的锚点，从position或offset的位置上，进一步偏移。设置.position({x: value1, y: value2}).markAnchor({x: value3, y: value4})，效果等于设置.position({x: value1 - value3, y: value2 - value4})，offset同理。单独使用markAnchor，设置.markAnchor({x: value1, y: value2})，效果等于设置.offset({x: -value1, y: -value2})。\",\"default\":null}}\n", "设置Switch类型的样式。仅对type为ToggleType.Switch生效。\n属性名称：switchStyle\n属性参数：{'value': {\"type\":\"SwitchStyle\",\"required\":false,\"description\":\"Switch类型的样式配置。\",\"default\":null}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "设置字体颜色。\n属性名称：fontColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":true,\"description\":\"字体颜色。\",\"default\":null}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n"]], "uris": null, "data": null, "included": ["metadatas", "documents", "distances"]}}}, {"id": "i2ESZsjDvMbpPpwd7i6fVS", "description": "查询组件Text的相关属性、事件文档", "subtasks": [], "details": {"query": ["设置文本的引用资源内容", "设置文本的显示样式"], "n_results": 10, "query_results": {"ids": [["a319a79d-bc52-4839-b6ae-cded4e3702e9", "5c4c808a-59df-40bd-aa6e-4830f51b5fe4", "08f20e06-6d11-42e4-8ba9-01faac89ff08", "04f8490a-5298-4442-92e6-8e46cc0f17ca", "6f72f2b5-8af2-4583-9413-44e7d271080c", "6be53b16-d33e-4360-a82a-69054e0ff19a", "83aa933b-cac2-47db-b828-510d20ee52b7", "330f26b8-a1ad-4746-8edf-b58e2c4f8653", "e6b91b12-1b67-439a-aa91-85c9ceb56095", "9fb81972-af49-45a6-b163-3f019a5c4c58"], ["83aa933b-cac2-47db-b828-510d20ee52b7", "5b01f32f-e789-47af-86a4-df5a864c92c4", "8ad449dc-70c4-4376-976c-a2ca44f8d20a", "4b0a480c-d137-4596-a2b4-457b1f4fb17a", "4f7dd024-b71b-4c3d-88a7-e2a6339c8e5c", "6f72f2b5-8af2-4583-9413-44e7d271080c", "ef12c73a-8411-4320-a5ea-0d39e643de12", "d16166ab-76f1-41d1-8747-acff1641b70e", "ff90f708-e4a0-4ddd-9766-66cebd6d085b", "8fa42d3a-996d-4735-93af-846bf32dd907"]], "distances": [[0.4152723550796509, 0.4229968786239624, 0.4231342673301697, 0.4350879192352295, 0.43531036376953125, 0.4369462728500366, 0.43707990646362305, 0.43847811222076416, 0.4416259527206421, 0.44391006231307983], [0.2907733917236328, 0.30575209856033325, 0.3257884979248047, 0.3267728090286255, 0.32932019233703613, 0.3406078815460205, 0.34735870361328125, 0.3513481616973877, 0.3577476739883423, 0.36183661222457886]], "metadatas": [[{"component_name": "Text", "name": "onTextSelectionChange", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Text", "name": "selection", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "copyOption", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textIndent", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textAlign", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "lineSpacing", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "ellipsisMode", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "align", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "decoration", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "fontStyle", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textOverflow", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "enableDataDetector", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textAlign", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textCase", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "maxFontSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "heightAdaptivePolicy", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "dataDetectorConfig", "source": "harmony-component-doc", "type": "attribute"}]], "embeddings": null, "documents": [["文本选择的位置发生变化时，触发该回调。\n事件名称：onTextSelectionChange\n事件参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":null}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":null}}\n事件返回值：None\n", "设置选中区域。选中区域高亮且显示手柄和文本选择菜单。\n属性名称：selection\n属性参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":-1}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":-1}}\n", "设置组件是否支持文本可复制粘贴。\n属性名称：copyOption\n属性参数：{'value': {\"type\":\"CopyOptions\",\"required\":true,\"description\":\"组件是否支持文本可复制粘贴。\",\"default\":\"CopyOptions.None\"}}\n", "设置首行文本缩进。\n属性名称：textIndent\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"首行文本缩进。\",\"default\":0}}\n", "设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n", "设置文本的行间距，设置值不大于0时，取默认值0。\n属性名称：lineSpacing\n属性参数：{'value': {\"type\":\"LengthMetrics\",\"required\":true,\"description\":\"文本的行间距。\",\"default\":null}}\n", "设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "设置省略位置。\n属性名称：ellipsisMode\n属性参数：{'value': {\"type\":\"EllipsisMode\",\"required\":true,\"description\":\"省略位置。\",\"default\":\"EllipsisMode.END\"}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n"], ["设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", "设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n", "设置字体样式。\n属性名称：fontStyle\n属性参数：{'value': {\"type\":\"FontStyle\",\"required\":true,\"description\":\"字体样式。默认值：FontStyle.Normal\",\"default\":\"FontStyle.Normal\"}}\n", "设置文本超长时的显示方式。\n属性名称：textOverflow\n属性参数：{'value': {\"type\":{\"overflow\":\"TextOverflow\"},\"required\":true,\"description\":\"文本超长时的显示方式。\",\"default\":{\"overflow\":\"TextOverflow.Clip\"}}}\n", "设置使能文本识别。\n属性名称：enableDataDetector\n属性参数：{'enable': {\"type\":\"boolean\",\"required\":true,\"description\":\"使能文本识别。\",\"default\":false}}\n", "设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n", "设置文本大小写。\n属性名称：textCase\n属性参数：{'value': {\"type\":\"TextCase\",\"required\":true,\"description\":\"文本大小写。\",\"default\":\"TextCase.Normal\"}}\n", "设置文本最大显示字号。\n属性名称：maxFontSize\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本最大显示字号。\",\"default\":null}}\n", "设置文本自适应高度的方式。\n属性名称：heightAdaptivePolicy\n属性参数：{'value': {\"type\":\"TextHeightAdaptivePolicy\",\"required\":true,\"description\":\"文本自适应高度的方式。\",\"default\":null}}\n", "设置文本识别配置。\n属性名称：dataDetectorConfig\n属性参数：{'config': {\"type\":\"TextDataDetectorConfig\",\"required\":true,\"description\":\"文本识别配置。\",\"default\":null}}\n"]], "uris": null, "data": null, "included": ["metadatas", "documents", "distances"]}}}], "details": null}, {"id": "f5tbuFx2avibNxQFzwkhZd", "description": "过滤低于阈值的查询结果", "subtasks": [{"id": "axm9TS5KMfAUjPMMDcsYMS", "description": "过滤低于阈值的查询结果: 设置开关的默认状态为开启", "subtasks": [], "details": {"query": "设置开关的默认状态为开启", "result_ids": ["7ad882d8-2c7f-4099-9aa1-8e7f991c7b12", "a4f6c35e-d771-4737-ad38-30b603bf500a", "e6ae83b2-3ab4-4805-bac6-9108b858fd2d", "36c201d0-8da5-4728-ac7f-87e9008b0807", "4b5a7105-3bb5-45f4-a069-ff2125441923", "21225eba-5d30-401a-a73e-7dd13ed72200", "086fcc37-1338-44fa-8606-1768a37bc243", "6932be74-e77d-48c3-9ffd-198b12860300", "d25287a6-57e2-4f9b-baf9-a4bf9302afcd", "71cdcde6-ef46-4a00-8017-47a19f6d534c"], "result_documents": ["开关状态切换时触发该事件。\n事件名称：onChange\n事件参数：{'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"为true时，代表状态从关切换为开。false时，代表状态从开切换为关。\",\"default\":null}}\n事件返回值：None\n", "设置组件打开状态的背景颜色。\n属性名称：selectedColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"组件打开状态的背景颜色。\",\"default\":null}}\n", "设置Switch类型的样式。仅对type为ToggleType.Switch生效。\n属性名称：switchStyle\n属性参数：{'value': {\"type\":\"SwitchStyle\",\"required\":false,\"description\":\"Switch类型的样式配置。\",\"default\":null}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "设置字体样式。\n属性名称：fontStyle\n属性参数：{'value': {\"type\":\"FontStyle\",\"required\":true,\"description\":\"字体样式。默认值：FontStyle.Normal\",\"default\":\"FontStyle.Normal\"}}\n", "设置高宽尺寸。从API version 10开始，该接口支持calc计算特性。\n属性名称：size\n属性参数：{'value': {\"type\":\"SizeOptions\",\"required\":true,\"description\":\"要设置的高宽尺寸。\",\"default\":null}}\n", "设置内边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：padding\n属性参数：{'value': {\"type\":[\"Padding\",\"Length\",\"LocalizedPadding\"],\"required\":true,\"description\":\"设置组件的内边距。参数为Length类型时，四个方向内边距同时生效。默认值：0。单位：vp。padding设置百分比时，上下左右内边距均以父容器的width作为基础值。\",\"default\":null}}\n", "设置Switch类型的圆形滑块颜色。仅对type为ToggleType.Switch生效。\n属性名称：switchPointColor\n属性参数：{'color': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"Switch类型的圆形滑块颜色。\",\"default\":\"#ffffffff\"}}\n", "指定以该组件为链头所构成的链的参数，仅当父容器为RelativeContainer时生效。\n属性名称：chainMode\n属性参数：{'direction': {\"type\":\"Axis\",\"required\":true,\"description\":\"链的方向。\",\"default\":null}, 'style': {\"type\":\"ChainStyle\",\"required\":true,\"description\":\"链的样式。\",\"default\":null}}\n", "设置子元素在位置定位时的锚点。\n属性名称：markAnchor\n属性参数：{'value': {\"type\":[\"Position\",\"LocalizedPosition\"],\"required\":true,\"description\":\"设置子元素在位置定位时的锚点，从position或offset的位置上，进一步偏移。设置.position({x: value1, y: value2}).markAnchor({x: value3, y: value4})，效果等于设置.position({x: value1 - value3, y: value2 - value4})，offset同理。单独使用markAnchor，设置.markAnchor({x: value1, y: value2})，效果等于设置.offset({x: -value1, y: -value2})。\",\"default\":null}}\n"], "result_metadatas": [{"component_name": "Toggle", "name": "onChange", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Toggle", "name": "selectedColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "switchStyle", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "fontStyle", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "size", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "padding", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "switchPointColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "chainMode", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "markAnchor", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.3438742160797119, 0.3744642734527588, 0.46364450454711914, 0.46480095386505127, 0.4839552044868469, 0.49540287256240845, 0.49867284297943115, 0.5017316341400146, 0.5020901560783386, 0.5051044821739197], "threshold": 0.6, "query_text_results": [["开关状态切换时触发该事件。\n事件名称：onChange\n事件参数：{'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"为true时，代表状态从关切换为开。false时，代表状态从开切换为关。\",\"default\":null}}\n事件返回值：None\n", {"component_name": "Toggle", "name": "onChange", "source": "harmony-component-doc", "type": "event"}, 0.6561257839202881], ["设置组件打开状态的背景颜色。\n属性名称：selectedColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"组件打开状态的背景颜色。\",\"default\":null}}\n", {"component_name": "Toggle", "name": "selectedColor", "source": "harmony-component-doc", "type": "attribute"}, 0.6255357265472412]]}}, {"id": "DP6ZdHrdEZpmK8ugwo9s8c", "description": "过滤低于阈值的查询结果: 设置开关的键值", "subtasks": [], "details": {"query": "设置开关的键值", "result_ids": ["7ad882d8-2c7f-4099-9aa1-8e7f991c7b12", "20130348-957f-430d-8e9d-08970dbbe99d", "71cdcde6-ef46-4a00-8017-47a19f6d534c", "21225eba-5d30-401a-a73e-7dd13ed72200", "086fcc37-1338-44fa-8606-1768a37bc243", "23b4992c-8360-4f3a-adb9-55a65859786e", "c7150ed5-d990-4553-9795-cd5e694ce7c8", "36c201d0-8da5-4728-ac7f-87e9008b0807", "68b84662-f883-4c55-8e02-a928e5758b5e", "e6ae83b2-3ab4-4805-bac6-9108b858fd2d"], "result_documents": ["开关状态切换时触发该事件。\n事件名称：onChange\n事件参数：{'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"为true时，代表状态从关切换为开。false时，代表状态从开切换为关。\",\"default\":null}}\n事件返回值：None\n", "设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n", "设置子元素在位置定位时的锚点。\n属性名称：markAnchor\n属性参数：{'value': {\"type\":[\"Position\",\"LocalizedPosition\"],\"required\":true,\"description\":\"设置子元素在位置定位时的锚点，从position或offset的位置上，进一步偏移。设置.position({x: value1, y: value2}).markAnchor({x: value3, y: value4})，效果等于设置.position({x: value1 - value3, y: value2 - value4})，offset同理。单独使用markAnchor，设置.markAnchor({x: value1, y: value2})，效果等于设置.offset({x: -value1, y: -value2})。\",\"default\":null}}\n", "设置高宽尺寸。从API version 10开始，该接口支持calc计算特性。\n属性名称：size\n属性参数：{'value': {\"type\":\"SizeOptions\",\"required\":true,\"description\":\"要设置的高宽尺寸。\",\"default\":null}}\n", "设置内边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：padding\n属性参数：{'value': {\"type\":[\"Padding\",\"Length\",\"LocalizedPadding\"],\"required\":true,\"description\":\"设置组件的内边距。参数为Length类型时，四个方向内边距同时生效。默认值：0。单位：vp。padding设置百分比时，上下左右内边距均以父容器的width作为基础值。\",\"default\":null}}\n", "设置组件自身的高度，缺省时使用元素自身内容需要的高度。若子组件的高大于父组件的高，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：height\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件高度。单位：vp\",\"default\":null}}\n", "设置外边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：margin\n属性参数：{'value': {\"type\":[\"Margin\",\"Length\",\"LocalizedMargin\"],\"required\":true,\"description\":\"设置组件的外边距。参数为Length类型时，四个方向外边距同时生效。默认值：0。单位：vp。margin设置百分比时，上下左右外边距均以父容器的width作为基础值。\",\"default\":null}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "设置约束尺寸，组件布局时，进行尺寸范围限制。从API version 10开始，该接口支持calc计算特性。\n属性名称：constraintSize\n属性参数：{'value': {\"type\":\"ConstraintSizeOptions\",\"required\":true,\"description\":\"设置约束尺寸。constraintSize的优先级高于Width和Height。取值结果参考constraintSize取值对width/height影响。默认值：{ minWidth: 0, maxWidth: Infinity, minHeight: 0, maxHeight: Infinity }。单位：vp\",\"default\":null}}\n", "设置Switch类型的样式。仅对type为ToggleType.Switch生效。\n属性名称：switchStyle\n属性参数：{'value': {\"type\":\"SwitchStyle\",\"required\":false,\"description\":\"Switch类型的样式配置。\",\"default\":null}}\n"], "result_metadatas": [{"component_name": "Toggle", "name": "onChange", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Toggle", "name": "flexBasis", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "markAnchor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "size", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "padding", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "height", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "margin", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "constraintSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "switchStyle", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.39740943908691406, 0.4391665458679199, 0.4402271509170532, 0.45968544483184814, 0.463225781917572, 0.46829283237457275, 0.47138237953186035, 0.4769846200942993, 0.4773625135421753, 0.4777451157569885], "threshold": 0.6, "query_text_results": []}}, {"id": "9z7mq7k4DNkxijXuByXpGg", "description": "过滤低于阈值的查询结果: 设置开关的摘要文本", "subtasks": [], "details": {"query": "设置开关的摘要文本", "result_ids": ["7ad882d8-2c7f-4099-9aa1-8e7f991c7b12", "fc2bbfe8-4704-41e2-870e-89873c88ef92", "15b23864-f61f-42f8-8725-fcda61ff859d", "e6b32d76-9a38-4e8e-9ca9-e908dfde8283", "71cdcde6-ef46-4a00-8017-47a19f6d534c", "a4f6c35e-d771-4737-ad38-30b603bf500a", "e76c57a2-a711-4403-ba5c-a63facee8317", "22a35973-3a2c-4db3-a835-86bcea94c4a1", "c0ecabd4-8894-46c9-a1cd-14979dc57d2b", "d25287a6-57e2-4f9b-baf9-a4bf9302afcd"], "result_documents": ["开关状态切换时触发该事件。\n事件名称：onChange\n事件参数：{'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"为true时，代表状态从关切换为开。false时，代表状态从开切换为关。\",\"default\":null}}\n事件返回值：None\n", "定制Toggle内容区的方法。\n属性名称：contentModifier\n属性参数：{'modifier': {\"type\":\"ContentModifier<ToggleConfiguration>\",\"required\":false,\"description\":\"定制Toggle内容区的方法。\",\"default\":null}}\n", "设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小。\n属性名称：lineHeight\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本行高，为number类型时单位为fp。\",\"default\":null}}\n", "设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n", "设置子元素在位置定位时的锚点。\n属性名称：markAnchor\n属性参数：{'value': {\"type\":[\"Position\",\"LocalizedPosition\"],\"required\":true,\"description\":\"设置子元素在位置定位时的锚点，从position或offset的位置上，进一步偏移。设置.position({x: value1, y: value2}).markAnchor({x: value3, y: value4})，效果等于设置.position({x: value1 - value3, y: value2 - value4})，offset同理。单独使用markAnchor，设置.markAnchor({x: value1, y: value2})，效果等于设置.offset({x: -value1, y: -value2})。\",\"default\":null}}\n", "设置组件打开状态的背景颜色。\n属性名称：selectedColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"组件打开状态的背景颜色。\",\"default\":null}}\n", "设置文本的字体粗细，设置过大可能会在不同字体下有截断。\n属性名称：fontWeight\n属性参数：{'value': {\"type\":[\"number\",\"FontWeight\",\"string\"],\"required\":true,\"description\":\"文本的字体粗细，number类型取值[100, 900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如\\\"400\\\"，以及\\\"bold\\\"、\\\"bolder\\\"、\\\"lighter\\\"、\\\"regular\\\"、\\\"medium\\\"，分别对应FontWeight中相应的枚举值。默认值：FontWeight.Normal\",\"default\":\"FontWeight.Normal\"}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "指定以该组件为链头所构成的链的参数，仅当父容器为RelativeContainer时生效。\n属性名称：chainMode\n属性参数：{'direction': {\"type\":\"Axis\",\"required\":true,\"description\":\"链的方向。\",\"default\":null}, 'style': {\"type\":\"ChainStyle\",\"required\":true,\"description\":\"链的样式。\",\"default\":null}}\n"], "result_metadatas": [{"component_name": "Toggle", "name": "onChange", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Toggle", "name": "contentModifier", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "lineHeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "decoration", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "markAnchor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "selectedColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "fontWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "chainMode", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.47650766372680664, 0.4785626530647278, 0.5097521543502808, 0.5136072635650635, 0.5146421194076538, 0.5168817639350891, 0.5236607789993286, 0.5290845632553101, 0.5307989716529846, 0.5337011218070984], "threshold": 0.6, "query_text_results": []}}, {"id": "icLqPozbEjJCekLsmQj9oD", "description": "过滤低于阈值的查询结果: 设置开关的标题文本", "subtasks": [], "details": {"query": "设置开关的标题文本", "result_ids": ["7ad882d8-2c7f-4099-9aa1-8e7f991c7b12", "15b23864-f61f-42f8-8725-fcda61ff859d", "a4f6c35e-d771-4737-ad38-30b603bf500a", "fc2bbfe8-4704-41e2-870e-89873c88ef92", "e6b32d76-9a38-4e8e-9ca9-e908dfde8283", "71cdcde6-ef46-4a00-8017-47a19f6d534c", "e6ae83b2-3ab4-4805-bac6-9108b858fd2d", "22a35973-3a2c-4db3-a835-86bcea94c4a1", "55c63c10-be2d-41f5-a2e1-3517d66a03fa", "c0ecabd4-8894-46c9-a1cd-14979dc57d2b"], "result_documents": ["开关状态切换时触发该事件。\n事件名称：onChange\n事件参数：{'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"为true时，代表状态从关切换为开。false时，代表状态从开切换为关。\",\"default\":null}}\n事件返回值：None\n", "设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小。\n属性名称：lineHeight\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本行高，为number类型时单位为fp。\",\"default\":null}}\n", "设置组件打开状态的背景颜色。\n属性名称：selectedColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"组件打开状态的背景颜色。\",\"default\":null}}\n", "定制Toggle内容区的方法。\n属性名称：contentModifier\n属性参数：{'modifier': {\"type\":\"ContentModifier<ToggleConfiguration>\",\"required\":false,\"description\":\"定制Toggle内容区的方法。\",\"default\":null}}\n", "设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n", "设置子元素在位置定位时的锚点。\n属性名称：markAnchor\n属性参数：{'value': {\"type\":[\"Position\",\"LocalizedPosition\"],\"required\":true,\"description\":\"设置子元素在位置定位时的锚点，从position或offset的位置上，进一步偏移。设置.position({x: value1, y: value2}).markAnchor({x: value3, y: value4})，效果等于设置.position({x: value1 - value3, y: value2 - value4})，offset同理。单独使用markAnchor，设置.markAnchor({x: value1, y: value2})，效果等于设置.offset({x: -value1, y: -value2})。\",\"default\":null}}\n", "设置Switch类型的样式。仅对type为ToggleType.Switch生效。\n属性名称：switchStyle\n属性参数：{'value': {\"type\":\"SwitchStyle\",\"required\":false,\"description\":\"Switch类型的样式配置。\",\"default\":null}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "设置字体颜色。\n属性名称：fontColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":true,\"description\":\"字体颜色。\",\"default\":null}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n"], "result_metadatas": [{"component_name": "Toggle", "name": "onChange", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Toggle", "name": "lineHeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "selectedColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "contentModifier", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "decoration", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "markAnchor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "switchStyle", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "fontColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.4448091387748718, 0.4829059839248657, 0.4877621531486511, 0.48850345611572266, 0.4907459616661072, 0.5017365217208862, 0.5044945478439331, 0.5185604691505432, 0.5199569463729858, 0.5226194858551025], "threshold": 0.6, "query_text_results": []}}], "details": null}, {"id": "WqSSSyNEoyhudd9v7WVjRF", "description": "过滤低于阈值的查询结果", "subtasks": [{"id": "dncMebigQJW9dgd4e3ATbp", "description": "过滤低于阈值的查询结果: 设置文本的引用资源内容", "subtasks": [], "details": {"query": "设置文本的引用资源内容", "result_ids": ["a319a79d-bc52-4839-b6ae-cded4e3702e9", "5c4c808a-59df-40bd-aa6e-4830f51b5fe4", "08f20e06-6d11-42e4-8ba9-01faac89ff08", "04f8490a-5298-4442-92e6-8e46cc0f17ca", "6f72f2b5-8af2-4583-9413-44e7d271080c", "6be53b16-d33e-4360-a82a-69054e0ff19a", "83aa933b-cac2-47db-b828-510d20ee52b7", "330f26b8-a1ad-4746-8edf-b58e2c4f8653", "e6b91b12-1b67-439a-aa91-85c9ceb56095", "9fb81972-af49-45a6-b163-3f019a5c4c58"], "result_documents": ["文本选择的位置发生变化时，触发该回调。\n事件名称：onTextSelectionChange\n事件参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":null}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":null}}\n事件返回值：None\n", "设置选中区域。选中区域高亮且显示手柄和文本选择菜单。\n属性名称：selection\n属性参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":-1}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":-1}}\n", "设置组件是否支持文本可复制粘贴。\n属性名称：copyOption\n属性参数：{'value': {\"type\":\"CopyOptions\",\"required\":true,\"description\":\"组件是否支持文本可复制粘贴。\",\"default\":\"CopyOptions.None\"}}\n", "设置首行文本缩进。\n属性名称：textIndent\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"首行文本缩进。\",\"default\":0}}\n", "设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n", "设置文本的行间距，设置值不大于0时，取默认值0。\n属性名称：lineSpacing\n属性参数：{'value': {\"type\":\"LengthMetrics\",\"required\":true,\"description\":\"文本的行间距。\",\"default\":null}}\n", "设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "设置省略位置。\n属性名称：ellipsisMode\n属性参数：{'value': {\"type\":\"EllipsisMode\",\"required\":true,\"description\":\"省略位置。\",\"default\":\"EllipsisMode.END\"}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n"], "result_metadatas": [{"component_name": "Text", "name": "onTextSelectionChange", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Text", "name": "selection", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "copyOption", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textIndent", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textAlign", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "lineSpacing", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "ellipsisMode", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "align", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.4152723550796509, 0.4229968786239624, 0.4231342673301697, 0.4350879192352295, 0.43531036376953125, 0.4369462728500366, 0.43707990646362305, 0.43847811222076416, 0.4416259527206421, 0.44391006231307983], "threshold": 0.6, "query_text_results": []}}, {"id": "J8kZc8FTy2AQo5uXQUiag5", "description": "过滤低于阈值的查询结果: 设置文本的显示样式", "subtasks": [], "details": {"query": "设置文本的显示样式", "result_ids": ["83aa933b-cac2-47db-b828-510d20ee52b7", "5b01f32f-e789-47af-86a4-df5a864c92c4", "8ad449dc-70c4-4376-976c-a2ca44f8d20a", "4b0a480c-d137-4596-a2b4-457b1f4fb17a", "4f7dd024-b71b-4c3d-88a7-e2a6339c8e5c", "6f72f2b5-8af2-4583-9413-44e7d271080c", "ef12c73a-8411-4320-a5ea-0d39e643de12", "d16166ab-76f1-41d1-8747-acff1641b70e", "ff90f708-e4a0-4ddd-9766-66cebd6d085b", "8fa42d3a-996d-4735-93af-846bf32dd907"], "result_documents": ["设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", "设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n", "设置字体样式。\n属性名称：fontStyle\n属性参数：{'value': {\"type\":\"FontStyle\",\"required\":true,\"description\":\"字体样式。默认值：FontStyle.Normal\",\"default\":\"FontStyle.Normal\"}}\n", "设置文本超长时的显示方式。\n属性名称：textOverflow\n属性参数：{'value': {\"type\":{\"overflow\":\"TextOverflow\"},\"required\":true,\"description\":\"文本超长时的显示方式。\",\"default\":{\"overflow\":\"TextOverflow.Clip\"}}}\n", "设置使能文本识别。\n属性名称：enableDataDetector\n属性参数：{'enable': {\"type\":\"boolean\",\"required\":true,\"description\":\"使能文本识别。\",\"default\":false}}\n", "设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n", "设置文本大小写。\n属性名称：textCase\n属性参数：{'value': {\"type\":\"TextCase\",\"required\":true,\"description\":\"文本大小写。\",\"default\":\"TextCase.Normal\"}}\n", "设置文本最大显示字号。\n属性名称：maxFontSize\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本最大显示字号。\",\"default\":null}}\n", "设置文本自适应高度的方式。\n属性名称：heightAdaptivePolicy\n属性参数：{'value': {\"type\":\"TextHeightAdaptivePolicy\",\"required\":true,\"description\":\"文本自适应高度的方式。\",\"default\":null}}\n", "设置文本识别配置。\n属性名称：dataDetectorConfig\n属性参数：{'config': {\"type\":\"TextDataDetectorConfig\",\"required\":true,\"description\":\"文本识别配置。\",\"default\":null}}\n"], "result_metadatas": [{"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "decoration", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "fontStyle", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textOverflow", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "enableDataDetector", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textAlign", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textCase", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "maxFontSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "heightAdaptivePolicy", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "dataDetectorConfig", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.2907733917236328, 0.30575209856033325, 0.3257884979248047, 0.3267728090286255, 0.32932019233703613, 0.3406078815460205, 0.34735870361328125, 0.3513481616973877, 0.3577476739883423, 0.36183661222457886], "threshold": 0.6, "query_text_results": [["设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", {"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, 0.7092266082763672], ["设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n", {"component_name": "Text", "name": "decoration", "source": "harmony-component-doc", "type": "attribute"}, 0.6942479014396667], ["设置字体样式。\n属性名称：fontStyle\n属性参数：{'value': {\"type\":\"FontStyle\",\"required\":true,\"description\":\"字体样式。默认值：FontStyle.Normal\",\"default\":\"FontStyle.Normal\"}}\n", {"component_name": "Text", "name": "fontStyle", "source": "harmony-component-doc", "type": "attribute"}, 0.6742115020751953], ["设置文本超长时的显示方式。\n属性名称：textOverflow\n属性参数：{'value': {\"type\":{\"overflow\":\"TextOverflow\"},\"required\":true,\"description\":\"文本超长时的显示方式。\",\"default\":{\"overflow\":\"TextOverflow.Clip\"}}}\n", {"component_name": "Text", "name": "textOverflow", "source": "harmony-component-doc", "type": "attribute"}, 0.6732271909713745], ["设置使能文本识别。\n属性名称：enableDataDetector\n属性参数：{'enable': {\"type\":\"boolean\",\"required\":true,\"description\":\"使能文本识别。\",\"default\":false}}\n", {"component_name": "Text", "name": "enableDataDetector", "source": "harmony-component-doc", "type": "attribute"}, 0.6706798076629639], ["设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n", {"component_name": "Text", "name": "textAlign", "source": "harmony-component-doc", "type": "attribute"}, 0.6593921184539795], ["设置文本大小写。\n属性名称：textCase\n属性参数：{'value': {\"type\":\"TextCase\",\"required\":true,\"description\":\"文本大小写。\",\"default\":\"TextCase.Normal\"}}\n", {"component_name": "Text", "name": "textCase", "source": "harmony-component-doc", "type": "attribute"}, 0.6526412963867188], ["设置文本最大显示字号。\n属性名称：maxFontSize\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本最大显示字号。\",\"default\":null}}\n", {"component_name": "Text", "name": "maxFontSize", "source": "harmony-component-doc", "type": "attribute"}, 0.6486518383026123], ["设置文本自适应高度的方式。\n属性名称：heightAdaptivePolicy\n属性参数：{'value': {\"type\":\"TextHeightAdaptivePolicy\",\"required\":true,\"description\":\"文本自适应高度的方式。\",\"default\":null}}\n", {"component_name": "Text", "name": "heightAdaptivePolicy", "source": "harmony-component-doc", "type": "attribute"}, 0.6422523260116577], ["设置文本识别配置。\n属性名称：dataDetectorConfig\n属性参数：{'config': {\"type\":\"TextDataDetectorConfig\",\"required\":true,\"description\":\"文本识别配置。\",\"default\":null}}\n", {"component_name": "Text", "name": "dataDetectorConfig", "source": "harmony-component-doc", "type": "attribute"}, 0.6381633877754211]]}}], "details": null}], "details": null}, {"id": "eBoxiihUhqPtpLMNKMQq8e", "description": "生成组件文档", "subtasks": [], "details": {"component_documents": ["# Toggle\n接口描述：Toggle(options: { type: ToggleType, isOn?: boolean })\n接口参数：{'type': {\"type\":\"ToggleType\",\"required\":false,\"description\":\"开关的样式。\",\"default\":null}, 'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"开关是否打开，true：打开，false：关闭。\",\"default\":false}}\n开关状态切换时触发该事件。\n事件名称：onChange\n事件参数：{'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"为true时，代表状态从关切换为开。false时，代表状态从开切换为关。\",\"default\":null}}\n事件返回值：None\n设置组件打开状态的背景颜色。\n属性名称：selectedColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"组件打开状态的背景颜色。\",\"default\":null}}\n示例：该组件通过 Column 布局实现了一个展示多种类型切换组件（如开关、复选框、按钮）及其状态效果的界面。布局宽度占据整个屏幕，内边距为左右 24vp、顶部 24vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组切换组件。每个切换组件组的组件以水平布局方式排列，组件之间的间距均匀分布，且对齐方式为居中对齐。\n切换组件的样式包括背景颜色、选中颜色、大小等属性，支持不同的样式展示。切换组件组之间通过 Column 组件进行分隔。切换组件的功能包括状态变化事件，用户可以通过操作切换组件触发相应操作，切换组件也可以在启用或禁用状态下进行展示。\n整个布局通过 Column 布局保证切换组件在垂直方向上有序排列，确保界面整洁美观。\n@Entry\n@Component\nstruct ToggleExample {\n  build() {\n    Column({ space: 10 }) { // 使用 Column 布局，设置组件之间的间距为 10vp\n      Text('type: Switch').fontSize(12).fontColor(0xcccccc).width('90%') // 显示标题文本，字体大小为 12vp，颜色为灰色，宽度为 90%\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) { // 使用 Flex 布局，水平方向上均匀分布组件，垂直方向上居中对齐\n        Toggle({ type: ToggleType.Switch, isOn: false }) // 创建一个开关类型的切换组件，初始状态为关闭\n          .selectedColor('#007DFF') // 设置选中状态的颜色为蓝色\n          .switchPointColor('#FFFFFF') // 设置开关滑块的颜色为白色\n          .onChange((isOn: boolean) => { // 监听状态变化事件\n            console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n          })\n\n        Toggle({ type: ToggleType.Switch, isOn: true }) // 创建一个开关类型的切换组件，初始状态为开启\n          .selectedColor('#007DFF') // 设置选中状态的颜色为蓝色\n          .switchPointColor('#FFFFFF') // 设置开关滑块的颜色为白色\n          .onChange((isOn: boolean) => { // 监听状态变化事件\n            console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n          })\n      }\n\n      Text('type: Checkbox').fontSize(12).fontColor(0xcccccc).width('90%') // 显示标题文本，字体大小为 12vp，颜色为灰色，宽度为 90%\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) { // 使用 Flex 布局，水平方向上均匀分布组件，垂直方向上居中对齐\n        Toggle({ type: ToggleType.Checkbox, isOn: false }) // 创建一个复选框类型的切换组件，初始状态为关闭\n          .size({ width: 20, height: 20 }) // 设置复选框的大小为 20vp x 20vp\n          .selectedColor('#007DFF') // 设置选中状态的颜色为蓝色\n          .onChange((isOn: boolean) => { // 监听状态变化事件\n            console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n          })\n\n        Toggle({ type: ToggleType.Checkbox, isOn: true }) // 创建一个复选框类型的切换组件，初始状态为开启\n          .size({ width: 20, height: 20 }) // 设置复选框的大小为 20vp x 20vp\n          .selectedColor('#007DFF') // 设置选中状态的颜色为蓝色\n          .onChange((isOn: boolean) => { // 监听状态变化事件\n            console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n          })\n      }\n\n      Text('type: Button').fontSize(12).fontColor(0xcccccc).width('90%') // 显示标题文本，字体大小为 12vp，颜色为灰色，宽度为 90%\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) { // 使用 Flex 布局，水平方向上均匀分布组件，垂直方向上居中对齐\n        Toggle({ type: ToggleType.Button, isOn: false }) { // 创建一个按钮类型的切换组件，初始状态为关闭\n          Text('status button').fontColor('#182431').fontSize(12) // 按钮内的文本，字体颜色为深色，字体大小为 12vp\n        }.width(106) // 设置按钮的宽度为 106vp\n        .selectedColor('rgba(0,125,255,0.20)') // 设置选中状态的颜色为半透明蓝色\n        .onChange((isOn: boolean) => { // 监听状态变化事件\n          console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n        })\n\n        Toggle({ type: ToggleType.Button, isOn: true }) { // 创建一个按钮类型的切换组件，初始状态为开启\n          Text('status button').fontColor('#182431').fontSize(12) // 按钮内的文本，字体颜色为深色，字体大小为 12vp\n        }.width(106) // 设置按钮的宽度为 106vp\n        .selectedColor('rgba(0,125,255,0.20)') // 设置选中状态的颜色为半透明蓝色\n        .onChange((isOn: boolean) => { // 监听状态变化事件\n          console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n        })\n      }\n    }.width('100%').padding(24) // 设置 Column 的宽度为 100%，内边距为 24vp\n  }\n}\n\n", "# Text\n接口描述：Text组件的接口定义。\n接口参数：{'Text': {\"type\":[\"string\",\"Resource\"],\"required\":false,\"description\":\"文本内容。包含子组件Span且未设置属性字符串时不生效，显示Span内容，并且此时text组件的样式不生效。\",\"default\":\" \"}, 'value': {\"type\":\"TextOptions\",\"required\":false,\"description\":\"文本组件初始化选项。\",\"default\":null}}\n设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n设置字体样式。\n属性名称：fontStyle\n属性参数：{'value': {\"type\":\"FontStyle\",\"required\":true,\"description\":\"字体样式。默认值：FontStyle.Normal\",\"default\":\"FontStyle.Normal\"}}\n设置文本超长时的显示方式。\n属性名称：textOverflow\n属性参数：{'value': {\"type\":{\"overflow\":\"TextOverflow\"},\"required\":true,\"description\":\"文本超长时的显示方式。\",\"default\":{\"overflow\":\"TextOverflow.Clip\"}}}\n设置使能文本识别。\n属性名称：enableDataDetector\n属性参数：{'enable': {\"type\":\"boolean\",\"required\":true,\"description\":\"使能文本识别。\",\"default\":false}}\n设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n设置文本大小写。\n属性名称：textCase\n属性参数：{'value': {\"type\":\"TextCase\",\"required\":true,\"description\":\"文本大小写。\",\"default\":\"TextCase.Normal\"}}\n设置文本最大显示字号。\n属性名称：maxFontSize\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本最大显示字号。\",\"default\":null}}\n设置文本自适应高度的方式。\n属性名称：heightAdaptivePolicy\n属性参数：{'value': {\"type\":\"TextHeightAdaptivePolicy\",\"required\":true,\"description\":\"文本自适应高度的方式。\",\"default\":null}}\n设置文本识别配置。\n属性名称：dataDetectorConfig\n属性参数：{'config': {\"type\":\"TextDataDetectorConfig\",\"required\":true,\"description\":\"文本识别配置。\",\"default\":null}}\n示例：该组件展示了如何配置隐私敏感信息的隐藏功能。组件通过 Column 布局实现了一个简单的界面，其中包含一个 Text 组件，用于显示隐私敏感信息。布局宽度占据整个屏幕，高度由内容自动调整。组件的垂直方向上仅包含一个 Text 组件，对齐方式为居中对齐。\n\nText 组件的样式包括字体、颜色等属性，支持隐私敏感信息的显示和隐藏。通过设置 `privacySensitive(true)`，Text 组件的内容在需要时会被隐藏，以保护用户隐私。组件的功能主要是展示隐私敏感信息的隐藏效果，用户无法直接看到被隐藏的内容。\n\n整个布局通过 Column 布局保证 Text 组件在垂直方向上居中显示，确保界面简洁明了。\n@Entry\n@Component\nstruct ImageExample {\n  build() {\n    Column({ space: 10 }) { // 创建一个垂直布局的 Column 组件，子组件之间的间距为 10vp\n      Text(\"privacySensitive\") // 创建一个 Text 组件，显示文本 \"privacySensitive\"\n        .privacySensitive(true) // 设置 Text 组件为隐私敏感，内容在需要时会被隐藏\n        .margin({top :30}) // 设置 Text 组件的上边距为 30vp\n    }\n    .alignItems(HorizontalAlign.Center) // 设置 Column 组件的子组件在水平方向上居中对齐\n    .width(\"100%\") // 设置 Column 组件的宽度为 100%，占据整个屏幕宽度\n  }\n}\n\n示例：该组件通过Column布局实现了一个展示文本处理效果的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个文本展示区域和一组按钮。每个文本展示区域的文本以不同的省略号模式和断词模式进行展示，按钮用于切换这些模式。\n\n文本展示区域的样式包括字体大小、边框、行高、最大行数、宽度等属性，支持不同的样式展示。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Row组件进行分隔。\n\n按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。整个布局通过Column布局保证文本展示区域和按钮在垂直方向上有序排列，确保界面整洁美观。\n@Entry\n@Component\nstruct TextExample4 {\n  @State text: string =\n    'The text component is used to display a piece of textual information.Support universal attributes and universal text attributes.'\n  @State ellipsisModeIndex: number = 0;\n  @State ellipsisMode: EllipsisMode[] = [EllipsisMode.START, EllipsisMode.CENTER, EllipsisMode.END]\n  @State ellipsisModeStr: string[] = ['START', 'CENTER', 'END']\n  @State wordBreakIndex: number = 0;\n  @State wordBreak: WordBreak[] = [WordBreak.NORMAL, WordBreak.BREAK_ALL, WordBreak.BREAK_WORD]\n  @State wordBreakStr: string[] = ['NORMAL', 'BREAK_ALL', 'BREAK_WORD']\n  @State textClip: boolean = false\n\n  build() {\n    Column({ space: 10 }) {\n      // 第一个文本展示区域，展示省略号模式的效果\n      Text(this.text)\n        .fontSize(16) // 设置字体大小为16\n        .border({ width: 1 }) // 设置边框宽度为1\n        .lineHeight(20) // 设置行高为20\n        .maxLines(1) // 设置最大行数为1\n        .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n        .ellipsisMode(this.ellipsisMode[this.ellipsisModeIndex]) // 设置省略号模式\n        .width(300) // 设置宽度为300\n        .margin({ left: 20, top: 20 }) // 设置左边距和上边距为20\n\n      // 按钮区域，用于切换省略号模式\n      Row() {\n        Button('更改省略号位置：' + this.ellipsisModeStr[this.ellipsisModeIndex]).onClick(() => {\n          this.ellipsisModeIndex++\n          if (this.ellipsisModeIndex > (this.ellipsisModeStr.length - 1)) {\n            this.ellipsisModeIndex = 0\n          }\n        })\n      }\n\n      // 第二个文本展示区域，展示断词模式的效果\n      Text('This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.')\n        .fontSize(12) // 设置字体大小为12\n        .border({ width: 1 }) // 设置边框宽度为1\n        .wordBreak(WordBreak.NORMAL) // 设置断词模式为NORMAL\n        .lineHeight(20) // 设置行高为20\n        .maxLines(2) // 设置最大行数为2\n        .clip(this.textClip) // 设置是否裁剪文本\n        .width(260) // 设置宽度为260\n\n      // 按钮区域，用于切换裁剪模式\n      Row() {\n        Button('切换clip：' + this.textClip).onClick(() => {\n          this.textClip = !this.textClip\n        })\n      }\n\n      // 第三个文本展示区域，展示断词模式的效果\n      Text(this.text)\n        .fontSize(12) // 设置字体大小为12\n        .border({ width: 1 }) // 设置边框宽度为1\n        .maxLines(2) // 设置最大行数为2\n        .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n        .wordBreak(this.wordBreak[this.wordBreakIndex]) // 设置断词模式\n        .lineHeight(20) // 设置行高为20\n        .width(260) // 设置宽度为260\n\n      // 按钮区域，用于切换断词模式\n      Row() {\n        Button('更改wordBreak模式：' + this.wordBreakStr[this.wordBreakIndex]).onClick(() => {\n          this.wordBreakIndex++\n          if (this.wordBreakIndex > (this.wordBreakStr.length - 1)) {\n            this.wordBreakIndex = 0\n          }\n        })\n      }\n    }\n  }\n}\n\n"], "related_types": {"ResourceColor": {"description": "颜色类型，用于描述资源颜色类型。\n* string：rgb或者argb格式颜色。示例：'#ffffff', '#ff000000', 'rgb(255, 100, 255)', 'rgba(255, 100, 255, 0.5)'。\n* Resource：资源引用类型，引入系统资源或者应用资源中的颜色。\n* Color: 颜色枚举值。\n* number: HEX格式颜色，支持rgb或者argb。示例：0xffffff，0xffff0000。number无法识别传入位数，格式选择依据值的大小，例如0x00ffffff作rgb格式解析", "type": ["string", "Resource", "Color", "number"], "enum": null, "enumDescriptions": null, "examples": null}, "Resource": {"description": "资源引用类型，用于设置组件属性的值。可以通过$r或者$rawfile创建Resource类型对象，不可以修改Resource中的各属性的值。", "type": "Resource", "enum": null, "enumDescriptions": null, "examples": ["```ets\n// belonging：系统资源或者应用资源，相应的取值为'sys'和'app'；\n// type：资源类型，支持'boolean'、'color'、'float'、'intarray'、'integer'、'pattern'、'plural'、'strarray'、'string'、'media'；\n// name：资源名称，在资源定义时确定。\n$r('belonging.type.name')\n```", "```ets\n// filename：工程中resources/rawfile目录下的文件名称。\n$rawfile('filename')\n```"]}, "ToggleType": {"description": "该枚举类定义了不同类型的切换控件样式。", "type": "enum", "enum": ["Checkbox", "Button", "Switch"], "enumDescriptions": {"Checkbox": "提供单选框样式。从API version 11开始，Checkbox默认样式由圆角方形变为圆形。通用属性margin的默认值为：{top: '14px', right: '14px', bottom: '14px', left: '14px'}。默认尺寸为:{width:'20vp', height:'20vp'}。", "Button": "提供状态按钮样式，如果子组件有文本设置，则相应的文本内容会显示在按钮内部。默认尺寸为:高为28vp，宽无默认值。", "Switch": "提供开关样式。通用属性margin默认值为：{top: '6px', right: '14px', bottom: '6px', left: '14px'}。默认尺寸为:{width:'36vp', height:'20vp'}。"}, "examples": null}, "TextOptions": {"description": "Text初始化参数。", "type": "object", "properties": {"controller": {"type": "TextController", "required": true, "description": "文本控制器。", "enum": null, "enumDescriptions": null, "default": null}}, "examples": null}, "TextController": {"description": "Text组件的控制器。", "type": "object", "properties": {"controller": {"type": "TextController", "required": true, "description": "导入对象", "enum": null, "enumDescriptions": null, "default": null}}, "examples": null}, "Font": {"description": "设置文本样式。", "type": "object", "properties": {"size": {"type": "Length", "required": false, "description": "设置文本尺寸，Length为number类型时，使用fp单位。不支持设置百分比字符串。", "enum": null, "enumDescriptions": null, "default": 16.0}, "weight": {"type": ["FontWeight", "number", "string"], "required": false, "description": "设置文本的字体粗细，number类型取值[100, 900]，取值间隔为100，取值越大，字体越粗。", "enum": null, "enumDescriptions": null, "default": "400 | FontWeight.Normal"}, "family": {"type": ["string", "Resource"], "required": false, "description": "设置文本的字体列表。使用多个字体，使用','进行分割，优先级按顺序生效。例如：'Arial, HarmonyOS Sans'。", "enum": null, "enumDescriptions": null, "default": null}, "style": {"type": "FontStyle", "required": false, "description": "设置文本的字体样式。", "enum": null, "enumDescriptions": null, "default": "FontStyle.Normal"}}, "examples": null}, "Length": {"description": "长度类型，用于描述尺寸单位。\n* string：需要显式指定像素单位，如'10px'，或百分比字符串，如'100%'。\n* number：默认单位为vp。\n* Resource：资源引用类型，引入系统或应用资源中的尺寸。", "type": ["string", "number", "Resource"], "enum": null, "enumDescriptions": null, "examples": null}, "TextDataDetectorConfig": {"description": "文本识别配置参数。", "type": "object", "properties": {"types": {"type": "TextDataDetectorType[]", "required": true, "description": "文本识别的实体类型。设置types为null或者[]时，识别所有类型的实体，否则只识别指定类型的实体。", "enum": null, "enumDescriptions": null, "default": null}, "onDetectResultUpdate": {"type": "(result: string) => void", "required": false, "description": "文本识别成功后，触发onDetectResultUpdate回调。result：文本识别的结果，Json格式。", "enum": null, "enumDescriptions": null, "default": null}}, "examples": null}}}}, {"id": "SnbNjP2G8hN4k5v4EjG5zV", "description": "生成类型文档", "subtasks": [], "details": {"type_documents": ["类型名：ResourceColor\n类型描述：颜色类型，用于描述资源颜色类型。\n* string：rgb或者argb格式颜色。示例：'#ffffff', '#ff000000', 'rgb(255, 100, 255)', 'rgba(255, 100, 255, 0.5)'。\n* Resource：资源引用类型，引入系统资源或者应用资源中的颜色。\n* Color: 颜色枚举值。\n* number: HEX格式颜色，支持rgb或者argb。示例：0xffffff，0xffff0000。number无法识别传入位数，格式选择依据值的大小，例如0x00ffffff作rgb格式解析\n类型：['string', 'Resource', 'Color', 'number']\n", "类型名：Resource\n类型描述：资源引用类型，用于设置组件属性的值。可以通过$r或者$rawfile创建Resource类型对象，不可以修改Resource中的各属性的值。\n类型：Resource\n类型Resource示例：\n```ets\n// belonging：系统资源或者应用资源，相应的取值为'sys'和'app'；\n// type：资源类型，支持'boolean'、'color'、'float'、'intarray'、'integer'、'pattern'、'plural'、'strarray'、'string'、'media'；\n// name：资源名称，在资源定义时确定。\n$r('belonging.type.name')\n```\n类型Resource示例：\n```ets\n// filename：工程中resources/rawfile目录下的文件名称。\n$rawfile('filename')\n```\n", "枚举类型名：ToggleType\n枚举类型描述：该枚举类定义了不同类型的切换控件样式。\n枚举值：['Checkbox', 'Button', 'Switch']\n枚举值描述：\n* Checkbox: 提供单选框样式。从API version 11开始，Checkbox默认样式由圆角方形变为圆形。通用属性margin的默认值为：{top: '14px', right: '14px', bottom: '14px', left: '14px'}。默认尺寸为:{width:'20vp', height:'20vp'}。\n* Button: 提供状态按钮样式，如果子组件有文本设置，则相应的文本内容会显示在按钮内部。默认尺寸为:高为28vp，宽无默认值。\n* Switch: 提供开关样式。通用属性margin默认值为：{top: '6px', right: '14px', bottom: '6px', left: '14px'}。默认尺寸为:{width:'36vp', height:'20vp'}。\n\n", "类型名：TextOptions\n类型描述：Text初始化参数。\n参数：{'controller': {\"type\":\"TextController\",\"required\":true,\"description\":\"文本控制器。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}}\n", "类型名：TextController\n类型描述：Text组件的控制器。\n参数：{'controller': {\"type\":\"TextController\",\"required\":true,\"description\":\"导入对象\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}}\n", "类型名：Font\n类型描述：设置文本样式。\n参数：{'size': {\"type\":\"Length\",\"required\":false,\"description\":\"设置文本尺寸，Length为number类型时，使用fp单位。不支持设置百分比字符串。\",\"enum\":null,\"enumDescriptions\":null,\"default\":16.0}, 'weight': {\"type\":[\"FontWeight\",\"number\",\"string\"],\"required\":false,\"description\":\"设置文本的字体粗细，number类型取值[100, 900]，取值间隔为100，取值越大，字体越粗。\",\"enum\":null,\"enumDescriptions\":null,\"default\":\"400 | FontWeight.Normal\"}, 'family': {\"type\":[\"string\",\"Resource\"],\"required\":false,\"description\":\"设置文本的字体列表。使用多个字体，使用','进行分割，优先级按顺序生效。例如：'Arial, HarmonyOS Sans'。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'style': {\"type\":\"FontStyle\",\"required\":false,\"description\":\"设置文本的字体样式。\",\"enum\":null,\"enumDescriptions\":null,\"default\":\"FontStyle.Normal\"}}\n", "类型名：Length\n类型描述：长度类型，用于描述尺寸单位。\n* string：需要显式指定像素单位，如'10px'，或百分比字符串，如'100%'。\n* number：默认单位为vp。\n* Resource：资源引用类型，引入系统或应用资源中的尺寸。\n类型：['string', 'number', 'Resource']\n", "类型名：TextDataDetectorConfig\n类型描述：文本识别配置参数。\n参数：{'types': {\"type\":\"TextDataDetectorType[]\",\"required\":true,\"description\":\"文本识别的实体类型。设置types为null或者[]时，识别所有类型的实体，否则只识别指定类型的实体。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'onDetectResultUpdate': {\"type\":\"(result: string) => void\",\"required\":false,\"description\":\"文本识别成功后，触发onDetectResultUpdate回调。result：文本识别的结果，Json格式。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}}\n"]}}], "details": {"android_component": {"name": ["androidx.preference.SwitchPreferenceCompat"], "content": "<androidx.preference.SwitchPreferenceCompat\n    android:defaultValue=\"true\"\n    android:key=\"pref_new_book_notification\"\n    android:summary=\"@string/settings_new_book_notifications_summary\"\n    android:title=\"@string/settings_new_book_notifications\" />", "layout_description": "开关偏好设置组件，默认值为true，键为pref_new_book_notification，摘要引用资源app.string.settings_new_book_notifications_summary，标题引用资源app.string.settings_new_book_notifications。", "function_description": "实现了一个开关偏好设置组件，默认状态为开启，组件的摘要显示引用资源app.string.settings_new_book_notifications_summary的内容，标题显示引用资源app.string.settings_new_book_notifications的内容。"}}}, {"id": "4LzMUWt6q7gATjP9juV2HW", "description": "后处理鸿蒙组件代码", "subtasks": [], "details": {"harmony_component_code": "Column() {\n  Toggle()\n    .selectedColor($r('app.color.colorAccent'))\n    .onChange((isOn: boolean) => {\n      this.isNotificationOn = isOn;\n    })\n  Text($r('app.string.settings_new_book_notifications'))\n    .fontSize(18)\n    .margin({ top: 8 })\n  Text($r('app.string.settings_new_book_notifications_summary'))\n    .fontSize(14)\n    .margin({ top: 8 })\n}\n.width('100%')"}}], "details": null}, {"id": "QNzCqpZT9gHVu3NZhZvcuJ", "description": "根据转译表转译组件v1", "subtasks": [{"id": "chsGDQZj4FJb49FqkdMcZP", "description": "生成组件描述", "subtasks": [], "details": {"prompt": "请根据以下安卓XML代码编写一个详细的通用描述和功能描述，供其他开发框架如iOS或鸿蒙的开发者实现同样的布局样式。描述应包含以下内容：\n\n布局属性：包括组件的宽度、高度、边距、填充、对齐方式等。\n组件样式和外观：包括颜色、字体、透明度、圆角等。\n组件排列和嵌套关系：例如垂直或水平布局、组件之间的对齐方式、父子关系。\n组件功能和交互：例如按钮的点击事件、输入框的输入验证逻辑等。\n引用的资源：如自定义的背景图片、颜色等，请指出资源路径或名称。\n请避免使用安卓特有的术语，而是使用通用的描述语言，确保其他框架的开发者可以理解并实现同样的布局和功能，例如：match_parent描述为占满父容器的宽度。同时，请确保描述涵盖每个组件的属性、样式和功能。\n\n你在编写通用描述和功能描述时，需要遵守以下规则：\n## 规则#1\n这条规则适用于所有组件的宽度、高度、外边距、内边距、字体大小等属性的单位。\n对于高度、宽度、外边距、内边距等等属性的单位应全部采用vp；\n对于字体大小等属性的单位应全部采用fp。\n\n## 规则#2\n这条规则适用于字体设置。\n若安卓组件中存在字体集的设置，应将其修改为'HarmonyOS Sans'字体集；\n若安卓组件中不存在字体集的设置，请保持不变。\n\n## 规则#3\n这条规则适用于资源引用。\n对于引用@drawable的资源，请将其修改为media;\n对于引用@color的资源，请将其修改为color;\n对于引用@strings的资源，请将其修改为string;\n对于引用@dimen的资源，请将其修改为float;\n对于引用@array的资源，如果资源是字符串数组，请将其修改为strarray，如果资源是整型数组，请将其修改为intarray。\n\n## 规则#4\n这条规则适用于通用描述的顺序。\n通用描述的顺序应该按照组件的逻辑顺序进行排列，确保描述的完整性和逻辑性。\n每个组件的描述应该包括布局属性、样式和外观、排列和嵌套关系、功能和交互、引用的资源等内容。\n\n## 规则#5\n这条规则适用于通用描述的内容。\n通用描述应该按照组件的嵌套关系进行描述，从外到内逐级描述每个组件的属性、样式和功能。\n请忽略有关主题的描述。\n\n## 规则6\n这条规则适用于功能效果描述。\n功能效果描述应该侧重于页面呈现的效果，包括组件的默认属性和默认行为，而不是具体的代码实现细节。\n例如：安卓复选框是包含文字的，而鸿蒙复选框是不包含文字的，因此在功能效果描述中应该添加复选框右侧文字的描述。\n安卓组件：\n<ChekBox\n    android:id=\"@+id/checkbox\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Check me\" />\n功能效果描述：一个复选框，右侧包含文字“Check me”，整体宽度和高度自适应。\n\n以下是一个可供参考的示例：\n安卓XML示例代码：\n```xml\n<LinearLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    android:padding=\"16dp\"\n    android:background=\"@drawable/custom_background\">\n\n    <TextView\n        android:id=\"@+id/title\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World\"\n        android:textColor=\"@color/primary_text\"\n        android:textSize=\"18sp\" />\n\n    <Button\n        android:id=\"@+id/submit_button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Submit\"\n        android:backgroundTint=\"#FF5722\" />\n</LinearLayout>\n```\n通用描述示例：\n- 垂直线性容器，宽度占满父容器，高度自适应，内边距为16vp，背景引用资源app.media.custom_background。\n    - 文本视图，宽度自适应，高度自适应，文本内容为“Hello World”，文本颜色引用资源app.color.primary_text，字体大小为18fp。\n    - 按钮，宽度自适应，高度自适应，文本内容为“Submit”，背景颜色为#FF5722。\n\n功能效果描述示例：\n实现了一个垂直线性容器，在容器中包含一个文本视图和一个按钮，其中文本视图，高度和宽度自适应，显示“Hello World”，字体颜色引用了 app.color.primary_text 资源，字体大小为18fp；在文本视图的正下方有一个按钮，按钮宽度和高度自适应，按钮显示“Submit”，背景颜色为 #FF5722。\n\n安卓XML代码如下：\n<androidx.preference.PreferenceScreen\n    xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <androidx.preference.Preference\n        android:key=\"tutorial_display_key\"\n        android:summary=\"@string/show_tutorial_settings_summary\"\n        android:title=\"@string/show_tutorial_settings_title\" />\n\n    <androidx.preference.SwitchPreferenceCompat\n        android:defaultValue=\"true\"\n        android:key=\"pref_new_book_notification\"\n        android:summary=\"@string/settings_new_book_notifications_summary\"\n        android:title=\"@string/settings_new_book_notifications\" />\n</androidx.preference.PreferenceScreen>\n请根据以上安卓XML代码编写一个通用描述，然后编写这页面实现的功能效果描述。\n\n**重要**：请确保通用描述和功能效果描述的准确性和完整性，确保其他开发者可以根据描述实现相同的布局和功能。\n", "component_description": {"layout_description": "一个偏好设置屏幕容器，宽度占满父容器，高度自适应。\n- 偏好设置项，宽度占满父容器，高度自适应，标题引用资源app.string.show_tutorial_settings_title，摘要引用资源app.string.show_tutorial_settings_summary。\n- 切换偏好设置项，宽度占满父容器，高度自适应，默认值为true，标题引用资源app.string.settings_new_book_notifications，摘要引用资源app.string.settings_new_book_notifications_summary。", "function_description": "实现了一个偏好设置屏幕，包含两个偏好设置项。第一个偏好设置项显示标题为app.string.show_tutorial_settings_title，摘要为app.string.show_tutorial_settings_summary。第二个偏好设置项是一个切换开关，默认状态为开启，显示标题为app.string.settings_new_book_notifications，摘要为app.string.settings_new_book_notifications_summary。"}}}, {"id": "Ko3JYCVjUDqafZxacwJLQm", "description": "查询组件文档", "subtasks": [{"id": "H9kKEyky6GxGvH9Yb2GCfY", "description": "生成组件查询", "subtasks": [], "details": {"prompt": "你在一家软件公司工作，你被指派去为将安卓组件转译为鸿蒙ArkUI代码。\n\n\n待转译的安卓组件如下：\n# ['androidx.preference.PreferenceScreen', 'androidx.preference.Preference', 'androidx.preference.SwitchPreferenceCompat']\n实现了一个偏好设置屏幕，包含两个偏好设置项。第一个偏好设置项显示标题为app.string.show_tutorial_settings_title，摘要为app.string.show_tutorial_settings_summary。第二个偏好设置项是一个切换开关，默认状态为开启，显示标题为app.string.settings_new_book_notifications，摘要为app.string.settings_new_book_notifications_summary。\n<androidx.preference.PreferenceScreen\n    xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <androidx.preference.Preference\n        android:key=\"tutorial_display_key\"\n        android:summary=\"@string/show_tutorial_settings_summary\"\n        android:title=\"@string/show_tutorial_settings_title\" />\n\n    <androidx.preference.SwitchPreferenceCompat\n        android:defaultValue=\"true\"\n        android:key=\"pref_new_book_notification\"\n        android:summary=\"@string/settings_new_book_notifications_summary\"\n        android:title=\"@string/settings_new_book_notifications\" />\n</androidx.preference.PreferenceScreen>\n\n实现这个需求可能会使用到某些ArkUI组件。\n以下是关于鸿蒙ArkUI API 12的组件基本文档：\n## AlphabetIndexer\n可以与容器组件联动用于按逻辑结构快速定位容器显示区域的组件。\n## Blank\n空白填充组件，在容器主轴方向上，空白填充组件具有自动填充容器空余部分的能力。仅当父组件为Row/Column/Flex时生效。\n## Button\n按钮组件，可快速创建不同样式的按钮。可以包含单个子组件。\n## CalendarPicker\n日历选择器组件，提供下拉日历弹窗，可以让用户选择日期。\n## Checkbox\n提供多选框组件，通常用于某选项的打开或关闭。可以包含Text组件。\n## CheckboxGroup\n多选框群组，用于控制多选框全选或者不全选状态。\n## Component3D\n3D渲染组件，可以加载3D模型资源并做自定义渲染，通常用于3D动效场景。\n## ContainerSpan\nText组件的子组件，用于统一管理多个Span、ImageSpan的背景色及圆角弧度。\n## DataPanel\n数据面板组件，用于将多个数据占比情况使用占比图进行展示。\n## DatePicker\n日期选择器组件，用于根据指定日期范围创建日期滑动选择器。\n## Divider\n提供分隔器组件，分隔不同内容块/内容元素。\n## Gauge\n数据量规图表组件，用于将数据展示为环形图表。\n## Image\n图片组件，常用于在应用中显示图片。Image支持加载PixelMap、ResourceStr和DrawableDescriptor类型的数据源，支持png、jpg、jpeg、bmp、svg、webp、gif和heif类型的图片格式。\n## ImageAnimator\n提供帧动画组件来实现逐帧播放图片的能力，可以配置需要播放的图片列表，每张图片可以配置时长。\n## ImageSpan\nText、ContainerSpan组件的子组件，用于显示行内图片。\n## LoadingProgress\n用于显示加载动效的组件。\n## Marquee\n跑马灯组件，用于滚动展示一段单行文本。仅当文本内容宽度超过跑马灯组件宽度时滚动，不超过时不滚动。\n## Menu\n以垂直列表形式显示的菜单。\n## MenuItem\n用来展示菜单Menu中具体的item菜单项。\n## MenuItemGroup\n该组件用来展示菜单MenuItem的分组。\n## Navigation\nNavigation组件是路由导航的根视图容器，一般作为Page页面的根容器使用，其内部默认包含了标题栏、内容区和工具栏，其中内容区默认首页显示导航内容（Navigation的子组件）或非首页显示（[NavDestination](https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navdestination-V5)的子组件），首页和非首页通过路由进行切换。\n## NavRouter\n导航组件，默认提供点击响应处理，不需要开发者自定义点击事件逻辑。\n## NavDestination\n作为子页面的根容器，用于显示Navigation的内容区。\n## NodeContainer\n基础组件，不支持尾随添加子节点。组件接受一个NodeController的实例接口。需要NodeController组合使用。该组件下仅支持挂载自定义节点FrameNode或者是BuilderNode中获取的根节点FrameNode。不支持挂载查询获得的原生系统组件代理节点。\n## PatternLock\n图案密码锁组件，以九宫格图案的方式输入密码，用于密码验证场景。手指在PatternLock组件区域按下时开始进入输入状态，手指离开屏幕时结束输入状态完成密码输入。\n## Progress\n进度条组件，用于显示内容加载或操作处理等进度。\n## QRCode\n用于显示单个二维码的组件。\n## Radio\n单选框，提供相应的用户交互选择项。\n## Rating\n提供在给定范围内选择评分的组件。Rating组件的接口，用于设置评分值和是否作为指示器使用。\n## RichEditor\n支持图文混排和文本交互式编辑的组件。\n## RichText\n富文本组件，解析并显示HTML格式文本。\n## ScrollBar\n滚动条组件ScrollBar，用于配合可滚动组件使用，如List、Grid、Scroll。\n## Search\n搜索框组件，适用于浏览器的搜索内容输入框等应用场景。可以包含单个子组件。\n## Select\n提供下拉选择菜单，可以让用户在多个选项之间选择。可以包含单个子组件。\n## Slider\n滑动条组件，通常用于快速调节设置值，如音量调节、亮度调节等应用场景。\n## Span\n作为Text、ContainerSpan组件的子组件，用于显示行内文本的组件。\n## Stepper\n步骤导航器组件，适用于引导用户按照步骤完成任务的导航场景。\n## StepperItem\n用作Stepper组件的页面子组件。\n## SymbolSpan\n作为Text组件的子组件，用于显示图标小符号的组件。\n## SymbolGlyph\n显示图标小符号的组件。\n## Text\n显示一段文本的组件，可以包含Span、ImageSpan、SymbolSpan和ContainerSpan子组件。\n## TextArea\n多行文本输入框组件，当输入的文本内容超过组件宽度时会自动换行显示。\n## TextClock\nTextClock组件通过文本将当前系统时间显示在设备上。支持不同时区的时间显示，最高精度到秒级。\n## TextPicker\n根据range指定的选择范围创建文本选择器。\n## TextTimer\n通过文本显示计时信息并控制其计时器状态的组件。\n## TimePicker\n时间选择组件，根据指定参数创建选择器，支持选择小时及分钟。\n## Toggle\n组件提供勾选框样式、状态按钮样式及开关样式。\n## TextInput\n单行文本输入框组件。\n## XComponent\n可用于EGL/OpenGLES和媒体数据写入，并显示在XComponent组件。\n## Canvas\n提供画布组件，用于自定义绘制图形。\n## CanvasGradient\n渐变对象。\n## CanvasPattern\n一个Object对象，使用createPattern方法创建，通过指定图像和重复方式创建图片填充的模板。\n## DrawingRenderingContext\n使用DrawingRenderingContext在Canvas组件上进行绘制，绘制对象可以是矩形、文本、图片等。\n## ImageBitmap\nImageBitmap对象可以存储canvas渲染的像素数据。\n## ImageData\nImageData对象可以存储canvas渲染的像素数据。\n## Matrix2D\n矩阵对象，可以对矩阵进行缩放、旋转、平移等变换。\n## OffscreenCanvas\nOffscreenCanvas组件用于自定义绘制图形，可以在屏幕外渲染的画布，避免影响应用程序主线程性能。\n## OffscreenCanvasRenderingContext2D\n使用OffscreenCanvasRenderingContext2D在Canvas上进行离屏绘制，绘制对象可以是矩形、文本、图片等。离屏绘制是指将需要绘制的内容先绘制在缓存区，然后将其转换成图片，一次性绘制到canvas上，加快了绘制速度。\n## Path2D\n路径对象，支持通过对象的接口进行路径的描述，并通过Canvas的stroke接口或者fill接口进行绘制。\n## Badge\n可以附加在单个组件上用于信息标记的容器组件。\n## Column\n沿垂直方向布局的容器组件，可以包含子组件。\n## ColumnSplit\n将子组件纵向布局，并在每个子组件之间插入一根横向的分割线。\n## Counter\n计数器组件，提供相应的增加或者减少的计数操作。\n## EmbeddedComponent\n用于支持在当前页面嵌入本应用内其他EmbeddedUIExtensionAbility提供的UI。EmbeddedUIExtensionAbility在独立进程中运行，完成页面布局和渲染。通常用于有进程隔离诉求的模块化开发场景。\n## Flex\n以弹性方式布局子组件的容器组件。\n## GridCol\n栅格子组件，必须作为栅格容器组件(GridRow)的子组件使用。可以包含单个子组件。\n## GridRow\n栅格容器组件，仅可以和栅格子组件(GridCol)在栅格布局场景中使用。\n## Grid\n网格容器，由“行”和“列”分割的单元格所组成，通过指定“项目”所在的单元格做出各种各样的布局。\n## GridItem\n网格容器中单项内容容器，仅支持作为Grid组件的子组件使用。\n## List\n列表包含一系列相同宽度的列表项。适合连续、多行呈现同类数据，例如图片和文本。可以包含ListItem、ListItemGroup子组件，支持渲染控制类型（if/else、ForEach、LazyForEach和Repeat）。\n## ListItem\n用来展示列表具体item，必须配合List来使用。\n## ListItemGroup\n该组件用来展示列表item分组，宽度默认充满List组件，必须配合List组件来使用。\n## RelativeContainer\n相对布局组件，用于复杂场景中元素对齐的布局。\n## Row\n沿水平方向布局容器，可以包含子组件。\n## Scroll\n可滚动的容器组件，当子组件的布局尺寸超过父组件的尺寸时，内容可以滚动，支持单个子组件。\n## Stack\n堆叠容器，子组件按照顺序依次入栈，后一个子组件覆盖前一个子组件。可以包含多个子组件。\n## Tabs\n通过页签进行内容视图切换的容器组件，每个页签对应一个内容视图，不支持自定义组件作为子组件， 仅可包含子组件TabContent。\n## TabContent\n仅在Tabs中使用，对应一个切换页签的内容视图，支持单个子组件。\n## WaterFlow\n瀑布流容器，由“行”和“列”分割的单元格所组成，通过容器自身的排列规则，将不同大小的“项目”自上而下，如瀑布般紧密布局。\n## WithTheme\nWithTheme组件用于设置应用局部页面自定义主题风格，可设置子组件深浅色模式和自定义配色。\n## Circle\n用于绘制圆形的组件。\n## Ellipse\n椭圆绘制组件。\n## Line\n直线绘制组件。\n## Polyline\n折线绘制组件。\n## Polygon\n多边形绘制组件。\n## Path\n路径绘制组件，根据绘制路径生成封闭的自定义形状。\n## Rect\n绘制组件的父组件，实现类似SVG的效果。绘制组件单独使用，用于在页面上绘制指定的图形。\n## Shape\n矩形绘制组件。\n## AlertDialog\n显示警告弹窗组件，可设置文本内容与响应回调。\n## ActionSheet\n列表选择弹窗 (ActionSheet) 是一个全局UI方法，属于ArkTS组件，用于在ArkUI（方舟UI框架）中显示一个带有多个选项的弹窗。\n## CustomDialog\n通过CustomDialogController类显示自定义弹窗。使用弹窗组件时，可优先考虑自定义弹窗，便于自定义弹窗的样式与内容。\n## CalendarPickerDialog\n点击日期弹出日历选择器弹窗，可选择弹窗内任意日期。\n## DatePickerDialog\n日期滑动选择器弹窗，用于在弹窗上展示日期选择器。\n## TimePickerDialog\n时间滑动选择器弹窗 (TimePickerDialog) 是一个全局UI方法，用于以24小时的时间区间创建时间滑动选择器，并展示在弹窗上。\n## TextPickerDialog\n文本滑动选择器弹窗，用于在指定的选择范围内创建文本选择器并展示在弹窗上。\n## Video\n用于播放视频文件并控制其播放状态的组件。\n## LocationButton\n安全控件的位置控件，用户通过点击该位置按钮，可以临时获取精准定位权限，而不需要权限弹框授权确认。\n## PasteButton\n安全控件的粘贴按钮，用户通过点击该粘贴按钮，可以临时获取读取剪贴板权限。\n## SaveButton\n安全控件的保存控件，用户通过点击该保存按钮，可以临时获取存储权限，而不需要权限弹框授权确认。\n## ChipGroup\nChipGroup高级组件，提供操作块群组，用于对文件或者资源内容进行分类等场景。\n## Chip\n操作块组件，用于搜索框历史记录或者邮件发送列表等场景。\n## ToolBar\n工具栏用于展示针对当前界面内容的操作选项，在界面底部显示。底部最多显示5个入口，超过则收纳入“更多”子项中，在最右侧显示。\n## ComposeTitleBar\n一种普通标题栏，支持设置标题、头像（可选）和副标题（可选），可用于一级页面、二级及其以上界面配置返回键。\n\n\n\n在开始任务之前，你需要对待转译的安卓组件进行分析，以便选择合适的ArkUI组件来实现相同的功能。\n然后，你需要从上述ArkUI组件中选择一个或多个组件，使其能够实现上述安卓组件的功能，并保持布局和样式尽可能一致。\n对于无法直接转译的安卓组件，你可以通过组合多个ArkUI组件来实现，一定不能选择不存在的组件。\n在完成选择后，你需要编写一条或多条用于在知识库或RAG系统中检索的查询语句。每条查询应聚焦于不同的功能细节或组件的具体属性，帮助快速、精确地检索到相关的文档、代码示例或实现方法。\n**重要**：你只能从[AlphabetIndexer, Blank, Button, CalendarPicker, Checkbox, CheckboxGroup, Component3D, ContainerSpan, DataPanel, DatePicker, Divider, Gauge, Image, ImageAnimator, ImageSpan, LoadingProgress, Marquee, Menu, MenuItem, MenuItemGroup, Navigation, NavRouter, NavDestination, NodeContainer, PatternLock, Progress, QRCode, Radio, Rating, RichEditor, RichText, ScrollBar, Search, Select, Slider, Span, Stepper, StepperItem, SymbolSpan, SymbolGlyph, Text, TextArea, TextClock, TextPicker, TextTimer, TimePicker, Toggle, TextInput, XComponent, Canvas, CanvasGradient, CanvasPattern, DrawingRenderingContext, ImageBitmap, ImageData, Matrix2D, OffscreenCanvas, OffscreenCanvasRenderingContext2D, Path2D, Badge, Column, ColumnSplit, Counter, EmbeddedComponent, Flex, GridCol, GridRow, Grid, GridItem, List, ListItem, ListItemGroup, RelativeContainer, Row, Scroll, Stack, Tabs, TabContent, WaterFlow, WithTheme, Circle, Ellipse, Line, Polyline, Polygon, Path, Rect, Shape, AlertDialog, ActionSheet, CustomDialog, CalendarPickerDialog, DatePickerDialog, TimePickerDialog, TextPickerDialog, Video, LocationButton, PasteButton, SaveButton, ChipGroup, Chip, ToolBar, ComposeTitleBar]中选择ArkUI组件，请你认真检查，一定不可以选择不存在的ArkUI组件。\n**重要**：查询语句需要涵盖以下方面：布局属性（如宽度、高度、边距等）、组件的样式和外观（如颜色、字体、透明度等）、组件的排列和嵌套关系（如垂直或水平布局、对齐方式）、组件的功能和交互（如点击事件、输入验证），确保每条查询简洁明了且仅聚焦单一方面，突出关键信息，以便加快内容检索过程。\n\n## 以下是选择组件的额外规则：\n* 规则1：待转译的安卓布局文件中存在属性layout_constraintXXX_toXXXOf，其中XXX为Start、End、Top、Bottom等，你应该额外选择鸿蒙ArkUI的RelativeContainer组件。\n* 规则2：当使用com.google.android.material.appbar.AppBarLayout与androidx.appcompat.widget.Toolbar实现标题栏时，你应该选择Row、Text、Image等组件来实现标题栏，需要注意鸿蒙组件的Toolbar特指底部导航栏而非安卓中的标题栏。\n* 规则3：Scroll组件的子组件通常采用Column或Row组件，你应该根据滚动的方向来选择，当滚动方向为垂直时，应该选择Column组件，当滚动方向为水平时，应该选择Row组件。\n\n以下是一个示例：\n安卓组件：EditText\n<EditText\nandroid:id=\"@+id/et_1\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"50dp\"\nandroid:layout_marginBottom=\"15dp\"\nandroid:autofillHints=\"\"\nandroid:hint=\"请输入文字\"\nandroid:inputType=\"text\"\nandroid:paddingLeft=\"15dp\"\nandroid:paddingRight=\"15dp\"\nandroid:textColor=\"@color/black\"\nandroid:textSize=\"16sp\" />\n回答：\n```json\n{\n    \"components\": [\"TextInput\"],\n    \"queries\": [\n        {\n            \"queries\": [\"设置输入框的高度\", \"设置输入框的宽度\", \"设置输入框的底部边距\", \"设置输入框的提示文本\", \"设置输入框的输入类型\", \"设置输入框的左内边距\", \"设置输入框的右内边距\", \"设置输入框的文本颜色\", \"设置输入框的字体大小\"],\n            \"component\": \"TextInput\",\n        },\n    ],\n    \"idea\": \"可以选择TextInput组件来实现EditText组件的功能，设置TextInput组件的属性来实现EditText组件的样式和功能。\"\n}\n```", "component_query": {"components": ["Column", "Text", "Toggle"], "queries": [{"component": "Column", "queries": ["设置容器的垂直布局", "设置子组件的垂直排列"]}, {"component": "Text", "queries": ["设置文本的标题", "设置文本的摘要", "设置文本的颜色", "设置文本的字体大小"]}, {"component": "Toggle", "queries": ["设置切换开关的默认状态", "设置切换开关的标题", "设置切换开关的摘要", "设置切换开关的样式"]}], "idea": "使用Column组件来实现垂直布局，Text组件来显示标题和摘要，Toggle组件来实现切换开关功能。通过这些组件的组合，可以实现与安卓PreferenceScreen和Preference组件相似的功能和布局。"}}}, {"id": "kbbMvDJVkYCXdVSANXjKR6", "description": "修正组件查询", "subtasks": [], "details": {"component_query": {"components": ["Column", "Text", "Toggle"], "queries": [{"component": "Column", "queries": ["设置容器的垂直布局", "设置子组件的垂直排列"]}, {"component": "Text", "queries": ["设置文本的标题", "设置文本的摘要", "设置文本的颜色", "设置文本的字体大小"]}, {"component": "Toggle", "queries": ["设置切换开关的默认状态", "设置切换开关的标题", "设置切换开关的摘要", "设置切换开关的样式"]}], "idea": "使用Column组件来实现垂直布局，Text组件来显示标题和摘要，Toggle组件来实现切换开关功能。通过这些组件的组合，可以实现与安卓PreferenceScreen和Preference组件相似的功能和布局。"}, "corrected_component_query": {"components": ["Column", "Text", "Toggle"], "queries": [{"component": "Column", "queries": ["设置容器的垂直布局", "设置子组件的垂直排列"]}, {"component": "Text", "queries": ["设置文本的标题", "设置文本的摘要", "设置文本的颜色", "设置文本的字体大小"]}, {"component": "Toggle", "queries": ["设置切换开关的默认状态", "设置切换开关的标题", "设置切换开关的摘要", "设置切换开关的样式"]}], "idea": "使用Column组件来实现垂直布局，Text组件来显示标题和摘要，Toggle组件来实现切换开关功能。通过这些组件的组合，可以实现与安卓PreferenceScreen和Preference组件相似的功能和布局。"}}}, {"id": "M3yG6mcb9hfhZbgYR4UNXi", "description": "查询示例文档", "subtasks": [], "details": {"query": "实现了一个偏好设置屏幕，包含两个偏好设置项。第一个偏好设置项显示标题为app.string.show_tutorial_settings_title，摘要为app.string.show_tutorial_settings_summary。第二个偏好设置项是一个切换开关，默认状态为开启，显示标题为app.string.settings_new_book_notifications，摘要为app.string.settings_new_book_notifications_summary。", "k": 3, "component_name": ["Column", "Text", "Toggle"], "score_threshold": 0.6, "example_knowledge_results": [[{"id": null, "metadata": {"component_name": "Text", "source": "harmony-component-example-doc", "table_id": 155}, "page_content": "该组件通过Column布局实现了一个展示文本处理效果的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个文本展示区域和一组按钮。每个文本展示区域的文本以不同的省略号模式和断词模式进行展示，按钮用于切换这些模式。\n\n文本展示区域的样式包括字体大小、边框、行高、最大行数、宽度等属性，支持不同的样式展示。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Row组件进行分隔。\n\n按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。整个布局通过Column布局保证文本展示区域和按钮在垂直方向上有序排列，确保界面整洁美观。", "type": "Document"}, 0.6551032066345215], [{"id": null, "metadata": {"component_name": "Text", "source": "harmony-component-example-doc", "table_id": 154}, "page_content": "该组件展示了一个文本组件（Text）及其相关信息的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组文本或按钮。每个部分的文本以垂直布局方式排列，文本之间的间距均匀分布，且对齐方式为居中对齐。\n\n文本组件的样式包括字体大小、颜色、边框宽度等属性，支持不同的样式展示。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n\n整个布局通过 Column 布局保证文本和按钮在垂直方向上有序排列，确保界面整洁美观。", "type": "Document"}, 0.6384140253067017], [{"id": null, "metadata": {"component_name": "Toggle", "source": "harmony-component-example-doc", "table_id": 115}, "page_content": "该组件通过 Column 布局实现了一个展示多种类型切换组件（如开关、复选框、按钮）及其状态效果的界面。布局宽度占据整个屏幕，内边距为左右 24vp、顶部 24vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组切换组件。每个切换组件组的组件以水平布局方式排列，组件之间的间距均匀分布，且对齐方式为居中对齐。\n切换组件的样式包括背景颜色、选中颜色、大小等属性，支持不同的样式展示。切换组件组之间通过 Column 组件进行分隔。切换组件的功能包括状态变化事件，用户可以通过操作切换组件触发相应操作，切换组件也可以在启用或禁用状态下进行展示。\n整个布局通过 Column 布局保证切换组件在垂直方向上有序排列，确保界面整洁美观。", "type": "Document"}, 0.6297184824943542]], "component_examples": {"Text": [{"description": "该组件通过Column布局实现了一个展示文本处理效果的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个文本展示区域和一组按钮。每个文本展示区域的文本以不同的省略号模式和断词模式进行展示，按钮用于切换这些模式。\n\n文本展示区域的样式包括字体大小、边框、行高、最大行数、宽度等属性，支持不同的样式展示。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Row组件进行分隔。\n\n按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。整个布局通过Column布局保证文本展示区域和按钮在垂直方向上有序排列，确保界面整洁美观。", "code": "@Entry\n@Component\nstruct TextExample4 {\n  @State text: string =\n    'The text component is used to display a piece of textual information.Support universal attributes and universal text attributes.'\n  @State ellipsisModeIndex: number = 0;\n  @State ellipsisMode: EllipsisMode[] = [EllipsisMode.START, EllipsisMode.CENTER, EllipsisMode.END]\n  @State ellipsisModeStr: string[] = ['START', 'CENTER', 'END']\n  @State wordBreakIndex: number = 0;\n  @State wordBreak: WordBreak[] = [WordBreak.NORMAL, WordBreak.BREAK_ALL, WordBreak.BREAK_WORD]\n  @State wordBreakStr: string[] = ['NORMAL', 'BREAK_ALL', 'BREAK_WORD']\n  @State textClip: boolean = false\n\n  build() {\n    Column({ space: 10 }) {\n      // 第一个文本展示区域，展示省略号模式的效果\n      Text(this.text)\n        .fontSize(16) // 设置字体大小为16\n        .border({ width: 1 }) // 设置边框宽度为1\n        .lineHeight(20) // 设置行高为20\n        .maxLines(1) // 设置最大行数为1\n        .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n        .ellipsisMode(this.ellipsisMode[this.ellipsisModeIndex]) // 设置省略号模式\n        .width(300) // 设置宽度为300\n        .margin({ left: 20, top: 20 }) // 设置左边距和上边距为20\n\n      // 按钮区域，用于切换省略号模式\n      Row() {\n        Button('更改省略号位置：' + this.ellipsisModeStr[this.ellipsisModeIndex]).onClick(() => {\n          this.ellipsisModeIndex++\n          if (this.ellipsisModeIndex > (this.ellipsisModeStr.length - 1)) {\n            this.ellipsisModeIndex = 0\n          }\n        })\n      }\n\n      // 第二个文本展示区域，展示断词模式的效果\n      Text('This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.')\n        .fontSize(12) // 设置字体大小为12\n        .border({ width: 1 }) // 设置边框宽度为1\n        .wordBreak(WordBreak.NORMAL) // 设置断词模式为NORMAL\n        .lineHeight(20) // 设置行高为20\n        .maxLines(2) // 设置最大行数为2\n        .clip(this.textClip) // 设置是否裁剪文本\n        .width(260) // 设置宽度为260\n\n      // 按钮区域，用于切换裁剪模式\n      Row() {\n        Button('切换clip：' + this.textClip).onClick(() => {\n          this.textClip = !this.textClip\n        })\n      }\n\n      // 第三个文本展示区域，展示断词模式的效果\n      Text(this.text)\n        .fontSize(12) // 设置字体大小为12\n        .border({ width: 1 }) // 设置边框宽度为1\n        .maxLines(2) // 设置最大行数为2\n        .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n        .wordBreak(this.wordBreak[this.wordBreakIndex]) // 设置断词模式\n        .lineHeight(20) // 设置行高为20\n        .width(260) // 设置宽度为260\n\n      // 按钮区域，用于切换断词模式\n      Row() {\n        Button('更改wordBreak模式：' + this.wordBreakStr[this.wordBreakIndex]).onClick(() => {\n          this.wordBreakIndex++\n          if (this.wordBreakIndex > (this.wordBreakStr.length - 1)) {\n            this.wordBreakIndex = 0\n          }\n        })\n      }\n    }\n  }\n}"}, {"description": "该组件展示了一个文本组件（Text）及其相关信息的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组文本或按钮。每个部分的文本以垂直布局方式排列，文本之间的间距均匀分布，且对齐方式为居中对齐。\n\n文本组件的样式包括字体大小、颜色、边框宽度等属性，支持不同的样式展示。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n\n整个布局通过 Column 布局保证文本和按钮在垂直方向上有序排列，确保界面整洁美观。", "code": "@Entry\n@Component\nstruct TextExample9 {\n  // 定义状态变量，用于存储文本组件的行数、字形位置信息和行度量信息\n  @State lineCount: string = \"\"\n  @State glyphPositionAtCoordinate: string = \"\"\n  @State lineMetrics: string = \"\"\n\n  // 创建一个 TextController 实例，用于控制文本组件\n  controller: TextController = new TextController()\n\n  // 定义文本内容\n  @State textStr: string = 'Hello World! 您好，世界！'\n\n  build() {\n    Scroll() {\n      Column() {\n        // 显示标题文本，字体大小为9，颜色为浅灰色，宽度为90%，内边距为10\n        Text('Text组件getLayoutManager接口获取段落相对组件的信息')\n          .fontSize(9)\n          .fontColor(0xCCCCCC)\n          .width('90%')\n          .padding(10)\n\n        // 显示文本内容，字体大小为25，边框宽度为1，当文本区域发生变化时获取行数\n        Text(this.textStr, { controller: this.controller })\n          .fontSize(25)\n          .borderWidth(1)\n          .onAreaChange(() => {\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            this.lineCount = \"LineCount: \" + layoutManager.getLineCount()\n          })\n\n        // 显示行数标题，字体大小为9，颜色为浅灰色，宽度为90%，内边距为10\n        Text('LineCount').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 显示行数信息\n        Text(this.lineCount)\n\n        // 显示字形位置标题，字体大小为9，颜色为浅灰色，宽度为90%，内边距为10\n        Text('GlyphPositionAtCoordinate').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 显示按钮，点击按钮时获取相对组件坐标[150,50]的字形信息\n        Button(\"相对组件坐标[150,50]字形信息\")\n          .onClick(() => {\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            let position: PositionWithAffinity = layoutManager.getGlyphPositionAtCoordinate(150, 50)\n            this.glyphPositionAtCoordinate =\n              \"相对组件坐标[150,50] glyphPositionAtCoordinate position: \" + position.position + \" affinity: \" +\n              position.affinity\n          })\n          .margin({ bottom: 20, top: 10 })\n\n        // 显示字形位置信息\n        Text(this.glyphPositionAtCoordinate)\n\n        // 显示行度量标题，字体大小为9，颜色为浅灰色，宽度为90%，内边距为10\n        Text('LineMetrics').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 显示按钮，点击按钮时获取首行行信息、文本样式信息、以及字体属性信息\n        Button(\"首行行信息、文本样式信息、以及字体属性信息\")\n          .onClick(() => {\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            let lineMetrics: LineMetrics = layoutManager.getLineMetrics(0)\n            this.lineMetrics = \"lineMetrics is \" + JSON.stringify(lineMetrics) + '\\\\n\\\\n'\n            let runMetrics = lineMetrics.runMetrics\n            runMetrics.forEach((value, key) => {\n              this.lineMetrics += \"runMetrics key is \" + key + \" \" + JSON.stringify(value) + \"\\\\n\\\\n\"\n            });\n          })\n          .margin({ bottom: 20, top: 10 })\n\n        // 显示行度量信息\n        Text(this.lineMetrics)\n      }\n      .margin({ top: 100, left: 8, right: 8 })\n    }\n  }\n}"}], "Toggle": [{"description": "该组件通过 Column 布局实现了一个展示多种类型切换组件（如开关、复选框、按钮）及其状态效果的界面。布局宽度占据整个屏幕，内边距为左右 24vp、顶部 24vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组切换组件。每个切换组件组的组件以水平布局方式排列，组件之间的间距均匀分布，且对齐方式为居中对齐。\n切换组件的样式包括背景颜色、选中颜色、大小等属性，支持不同的样式展示。切换组件组之间通过 Column 组件进行分隔。切换组件的功能包括状态变化事件，用户可以通过操作切换组件触发相应操作，切换组件也可以在启用或禁用状态下进行展示。\n整个布局通过 Column 布局保证切换组件在垂直方向上有序排列，确保界面整洁美观。", "code": "@Entry\n@Component\nstruct ToggleExample {\n  build() {\n    Column({ space: 10 }) { // 使用 Column 布局，设置组件之间的间距为 10vp\n      Text('type: Switch').fontSize(12).fontColor(0xcccccc).width('90%') // 显示标题文本，字体大小为 12vp，颜色为灰色，宽度为 90%\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) { // 使用 Flex 布局，水平方向上均匀分布组件，垂直方向上居中对齐\n        Toggle({ type: ToggleType.Switch, isOn: false }) // 创建一个开关类型的切换组件，初始状态为关闭\n          .selectedColor('#007DFF') // 设置选中状态的颜色为蓝色\n          .switchPointColor('#FFFFFF') // 设置开关滑块的颜色为白色\n          .onChange((isOn: boolean) => { // 监听状态变化事件\n            console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n          })\n\n        Toggle({ type: ToggleType.Switch, isOn: true }) // 创建一个开关类型的切换组件，初始状态为开启\n          .selectedColor('#007DFF') // 设置选中状态的颜色为蓝色\n          .switchPointColor('#FFFFFF') // 设置开关滑块的颜色为白色\n          .onChange((isOn: boolean) => { // 监听状态变化事件\n            console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n          })\n      }\n\n      Text('type: Checkbox').fontSize(12).fontColor(0xcccccc).width('90%') // 显示标题文本，字体大小为 12vp，颜色为灰色，宽度为 90%\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) { // 使用 Flex 布局，水平方向上均匀分布组件，垂直方向上居中对齐\n        Toggle({ type: ToggleType.Checkbox, isOn: false }) // 创建一个复选框类型的切换组件，初始状态为关闭\n          .size({ width: 20, height: 20 }) // 设置复选框的大小为 20vp x 20vp\n          .selectedColor('#007DFF') // 设置选中状态的颜色为蓝色\n          .onChange((isOn: boolean) => { // 监听状态变化事件\n            console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n          })\n\n        Toggle({ type: ToggleType.Checkbox, isOn: true }) // 创建一个复选框类型的切换组件，初始状态为开启\n          .size({ width: 20, height: 20 }) // 设置复选框的大小为 20vp x 20vp\n          .selectedColor('#007DFF') // 设置选中状态的颜色为蓝色\n          .onChange((isOn: boolean) => { // 监听状态变化事件\n            console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n          })\n      }\n\n      Text('type: Button').fontSize(12).fontColor(0xcccccc).width('90%') // 显示标题文本，字体大小为 12vp，颜色为灰色，宽度为 90%\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) { // 使用 Flex 布局，水平方向上均匀分布组件，垂直方向上居中对齐\n        Toggle({ type: ToggleType.Button, isOn: false }) { // 创建一个按钮类型的切换组件，初始状态为关闭\n          Text('status button').fontColor('#182431').fontSize(12) // 按钮内的文本，字体颜色为深色，字体大小为 12vp\n        }.width(106) // 设置按钮的宽度为 106vp\n        .selectedColor('rgba(0,125,255,0.20)') // 设置选中状态的颜色为半透明蓝色\n        .onChange((isOn: boolean) => { // 监听状态变化事件\n          console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n        })\n\n        Toggle({ type: ToggleType.Button, isOn: true }) { // 创建一个按钮类型的切换组件，初始状态为开启\n          Text('status button').fontColor('#182431').fontSize(12) // 按钮内的文本，字体颜色为深色，字体大小为 12vp\n        }.width(106) // 设置按钮的宽度为 106vp\n        .selectedColor('rgba(0,125,255,0.20)') // 设置选中状态的颜色为半透明蓝色\n        .onChange((isOn: boolean) => { // 监听状态变化事件\n          console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n        })\n      }\n    }.width('100%').padding(24) // 设置 Column 的宽度为 100%，内边距为 24vp\n  }\n}"}]}}}, {"id": "9U3CFDkcW2rEGQBs56WRsi", "description": "查询组件文档", "subtasks": [{"id": "XJH8sfmQ43vAU3AEEdeL8M", "description": "依次从知识库中查询每个组件的相关属性、事件文档", "subtasks": [{"id": "ZMmLNpFYJsTeetVMJiWmvz", "description": "查询组件Column的相关属性、事件文档", "subtasks": [], "details": {"query": ["设置容器的垂直布局", "设置子组件的垂直排列"], "n_results": 10, "query_results": {"ids": [["d82cc3ce-d0d6-419c-bf57-9ab4f36ea11d", "04d98ac5-e176-4e46-a0e0-7cf93182d0c7", "33ea25aa-cac4-4f85-b3b7-f1b9a5bac825", "09af9fd0-9440-4136-8bbf-9835ad3e65e8", "4a6a9493-af1d-4b71-ac93-e005d4b79b23", "d9f81a84-dcc9-42e7-bf00-40f59725f621", "b6443713-fdd1-4b76-b02a-276d24cc6f59", "91a5fea0-4a01-4fa8-ad43-db72f51f3ed5", "f12a099d-8fd6-4be6-b7fd-85791b7fa4e3", "0312e8d6-efb1-4896-8129-462ef1bc3395"], ["a44c0ffe-dffc-4cb3-a6c5-17b220f6ad0c", "09af9fd0-9440-4136-8bbf-9835ad3e65e8", "04d98ac5-e176-4e46-a0e0-7cf93182d0c7", "b6443713-fdd1-4b76-b02a-276d24cc6f59", "33ea25aa-cac4-4f85-b3b7-f1b9a5bac825", "91a5fea0-4a01-4fa8-ad43-db72f51f3ed5", "d82cc3ce-d0d6-419c-bf57-9ab4f36ea11d", "872aac8e-8101-46e9-90b6-fbd034359d5d", "0312e8d6-efb1-4896-8129-462ef1bc3395", "f12a099d-8fd6-4be6-b7fd-85791b7fa4e3"]], "distances": [[0.3229793906211853, 0.3506191372871399, 0.3543122410774231, 0.39744752645492554, 0.4012277126312256, 0.4035184383392334, 0.40363746881484985, 0.4051682949066162, 0.4078032970428467, 0.41530823707580566], [0.2751392126083374, 0.2793181538581848, 0.3582552671432495, 0.36125779151916504, 0.3644333481788635, 0.36688536405563354, 0.3722842335700989, 0.37816470861434937, 0.3807613253593445, 0.381248414516449]], "metadatas": [[{"component_name": "Column", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "justifyContent", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexGrow", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexShrink", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexBasis", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "Column", "name": "alignItems", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "justifyContent", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "position", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexBasis", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}]], "embeddings": null, "documents": [["设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "设置子组件在垂直方向上的对齐格式。\n属性名称：justifyContent\n属性参数：{'value': {\"type\":\"FlexAlign\",\"required\":true,\"description\":\"子组件在垂直方向上的对齐格式。\",\"default\":\"FlexAlign.Start\"}}\n", "设置组件在父容器的剩余空间所占比例。\n属性名称：flexGrow\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器在主轴方向上的剩余空间分配给此属性所在组件的比例。\",\"default\":0}}\n", "设置父容器压缩尺寸分配给此属性所在组件的比例。当父容器为Column、Row时，需设置主轴方向的尺寸。\n属性名称：flexShrink\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器压缩尺寸分配给此属性所在组件的比例。\",\"default\":0}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n"], ["设置子组件在水平方向上的对齐格式。\n属性名称：alignItems\n属性参数：{'value': {\"type\":\"HorizontalAlign\",\"required\":true,\"description\":\"子组件在水平方向上的对齐格式。\",\"default\":\"HorizontalAlign.Center\"}}\n", "设置子组件在垂直方向上的对齐格式。\n属性名称：justifyContent\n属性参数：{'value': {\"type\":\"FlexAlign\",\"required\":true,\"description\":\"子组件在垂直方向上的对齐格式。\",\"default\":\"FlexAlign.Start\"}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "绝对定位，确定子组件相对父组件的位置。\n属性名称：position\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"绝对定位，确定子组件相对父组件的位置。当父容器为Row/Column/Flex时，设置position的子组件不占位。Position类型基于父组件左上角确定位置;Edges类型基于父组件四边确定位置，top/left/right/bottom分别为组件各边距离父组件相应边的边距，通过边距来确定组件相对于父组件的位置;LocalizedEdges类型基于父组件四边确定位置，支持镜像模式。适用于置顶显示、悬浮按钮等组件在父容器中位置固定的场景。不支持在宽高为零的布局容器上设置。当父容器为RelativeContainer, 且子组件设置了alignRules属性, 则子组件的position属性不生效。\",\"default\":null}}\n", "设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n"]], "uris": null, "data": null, "included": ["metadatas", "documents", "distances"]}}}, {"id": "FjpXa8qbXWs76gHK8cusLC", "description": "查询组件Text的相关属性、事件文档", "subtasks": [], "details": {"query": ["设置文本的标题", "设置文本的摘要", "设置文本的颜色", "设置文本的字体大小"], "n_results": 10, "query_results": {"ids": [["6f72f2b5-8af2-4583-9413-44e7d271080c", "5c4c808a-59df-40bd-aa6e-4830f51b5fe4", "6be53b16-d33e-4360-a82a-69054e0ff19a", "2118e3cb-ff25-44e4-8f0b-e51f59a2c412", "31c5a7b7-60c3-4649-8644-b0a2fc095b6f", "ef12c73a-8411-4320-a5ea-0d39e643de12", "ff90f708-e4a0-4ddd-9766-66cebd6d085b", "a319a79d-bc52-4839-b6ae-cded4e3702e9", "83aa933b-cac2-47db-b828-510d20ee52b7", "4f7dd024-b71b-4c3d-88a7-e2a6339c8e5c"], ["6f72f2b5-8af2-4583-9413-44e7d271080c", "4b0a480c-d137-4596-a2b4-457b1f4fb17a", "95d6034b-0f1e-4b0c-9cde-a1202e601b71", "5c4c808a-59df-40bd-aa6e-4830f51b5fe4", "83aa933b-cac2-47db-b828-510d20ee52b7", "6be53b16-d33e-4360-a82a-69054e0ff19a", "31c5a7b7-60c3-4649-8644-b0a2fc095b6f", "08f20e06-6d11-42e4-8ba9-01faac89ff08", "e6b91b12-1b67-439a-aa91-85c9ceb56095", "94ed9170-77a3-4809-a47a-4d7dc3d72e1e"], ["5b01f32f-e789-47af-86a4-df5a864c92c4", "8f8332f1-4022-4fdd-8c82-0fe34be3bdf4", "5c4c808a-59df-40bd-aa6e-4830f51b5fe4", "83aa933b-cac2-47db-b828-510d20ee52b7", "6f72f2b5-8af2-4583-9413-44e7d271080c", "b4fe00f3-edcd-4a70-ae27-61c7a375df32", "ef12c73a-8411-4320-a5ea-0d39e643de12", "2118e3cb-ff25-44e4-8f0b-e51f59a2c412", "c0819d7b-8892-4469-9667-9b6b04a8ece6", "4f7dd024-b71b-4c3d-88a7-e2a6339c8e5c"], ["45373205-4066-4c33-9afc-35117484cdff", "95d6034b-0f1e-4b0c-9cde-a1202e601b71", "ef12c73a-8411-4320-a5ea-0d39e643de12", "d16166ab-76f1-41d1-8747-acff1641b70e", "31c5a7b7-60c3-4649-8644-b0a2fc095b6f", "83aa933b-cac2-47db-b828-510d20ee52b7", "7d244f16-d5b4-423b-bdc7-c31d40bd72b3", "2118e3cb-ff25-44e4-8f0b-e51f59a2c412", "94ed9170-77a3-4809-a47a-4d7dc3d72e1e", "6be53b16-d33e-4360-a82a-69054e0ff19a"]], "distances": [[0.39904022216796875, 0.41140037775039673, 0.4118152856826782, 0.41793322563171387, 0.4242016673088074, 0.43079787492752075, 0.4360361099243164, 0.43629932403564453, 0.4385308623313904, 0.4387114644050598], [0.4226257801055908, 0.4339914321899414, 0.4369875192642212, 0.44675999879837036, 0.45055055618286133, 0.4514079689979553, 0.45571303367614746, 0.4584107995033264, 0.46092283725738525, 0.4631319046020508], [0.28547990322113037, 0.2985798120498657, 0.36309266090393066, 0.3712409734725952, 0.38452833890914917, 0.38597506284713745, 0.38729697465896606, 0.3875335454940796, 0.38833117485046387, 0.3897336721420288], [0.25978827476501465, 0.2653372883796692, 0.27123844623565674, 0.28062164783477783, 0.2823374271392822, 0.30967462062835693, 0.31139373779296875, 0.31304144859313965, 0.3282283544540405, 0.3293919563293457]], "metadatas": [[{"component_name": "Text", "name": "textAlign", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "selection", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "lineSpacing", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "letterSpacing", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "lineHeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textCase", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "heightAdaptivePolicy", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "onTextSelectionChange", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "enableDataDetector", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "Text", "name": "textAlign", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textOverflow", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "fontWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "selection", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "lineSpacing", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "lineHeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "copyOption", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "ellipsisMode", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "maxLines", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "Text", "name": "decoration", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "fontColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "selection", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textAlign", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textShadow", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textCase", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "letterSpacing", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "fontFeature", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "enableDataDetector", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "Text", "name": "fontSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "fontWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textCase", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "maxFontSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "lineHeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "minFontSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "letterSpacing", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "maxLines", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "lineSpacing", "source": "harmony-component-doc", "type": "attribute"}]], "embeddings": null, "documents": [["设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n", "设置选中区域。选中区域高亮且显示手柄和文本选择菜单。\n属性名称：selection\n属性参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":-1}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":-1}}\n", "设置文本的行间距，设置值不大于0时，取默认值0。\n属性名称：lineSpacing\n属性参数：{'value': {\"type\":\"LengthMetrics\",\"required\":true,\"description\":\"文本的行间距。\",\"default\":null}}\n", "设置文本字符间距。设置该值为百分比时，按默认值显示。设置该值为0时，按默认值显示。\n属性名称：letterSpacing\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"文本字符间距。\",\"default\":null}}\n", "设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小。\n属性名称：lineHeight\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本行高，为number类型时单位为fp。\",\"default\":null}}\n", "设置文本大小写。\n属性名称：textCase\n属性参数：{'value': {\"type\":\"TextCase\",\"required\":true,\"description\":\"文本大小写。\",\"default\":\"TextCase.Normal\"}}\n", "设置文本自适应高度的方式。\n属性名称：heightAdaptivePolicy\n属性参数：{'value': {\"type\":\"TextHeightAdaptivePolicy\",\"required\":true,\"description\":\"文本自适应高度的方式。\",\"default\":null}}\n", "文本选择的位置发生变化时，触发该回调。\n事件名称：onTextSelectionChange\n事件参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":null}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":null}}\n事件返回值：None\n", "设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", "设置使能文本识别。\n属性名称：enableDataDetector\n属性参数：{'enable': {\"type\":\"boolean\",\"required\":true,\"description\":\"使能文本识别。\",\"default\":false}}\n"], ["设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n", "设置文本超长时的显示方式。\n属性名称：textOverflow\n属性参数：{'value': {\"type\":{\"overflow\":\"TextOverflow\"},\"required\":true,\"description\":\"文本超长时的显示方式。\",\"default\":{\"overflow\":\"TextOverflow.Clip\"}}}\n", "设置文本的字体粗细，设置过大可能会在不同字体下有截断。\n属性名称：fontWeight\n属性参数：{'value': {\"type\":[\"number\",\"FontWeight\",\"string\"],\"required\":true,\"description\":\"文本的字体粗细，number类型取值[100, 900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如\\\"400\\\"，以及\\\"bold\\\"、\\\"bolder\\\"、\\\"lighter\\\"、\\\"regular\\\"、\\\"medium\\\"，分别对应FontWeight中相应的枚举值。默认值：FontWeight.Normal\",\"default\":\"FontWeight.Normal\"}}\n", "设置选中区域。选中区域高亮且显示手柄和文本选择菜单。\n属性名称：selection\n属性参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":-1}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":-1}}\n", "设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", "设置文本的行间距，设置值不大于0时，取默认值0。\n属性名称：lineSpacing\n属性参数：{'value': {\"type\":\"LengthMetrics\",\"required\":true,\"description\":\"文本的行间距。\",\"default\":null}}\n", "设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小。\n属性名称：lineHeight\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本行高，为number类型时单位为fp。\",\"default\":null}}\n", "设置组件是否支持文本可复制粘贴。\n属性名称：copyOption\n属性参数：{'value': {\"type\":\"CopyOptions\",\"required\":true,\"description\":\"组件是否支持文本可复制粘贴。\",\"default\":\"CopyOptions.None\"}}\n", "设置省略位置。\n属性名称：ellipsisMode\n属性参数：{'value': {\"type\":\"EllipsisMode\",\"required\":true,\"description\":\"省略位置。\",\"default\":\"EllipsisMode.END\"}}\n", "设置文本的最大行数。\n属性名称：maxLines\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"文本的最大行数。\",\"default\":null}}\n"], ["设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n", "设置字体颜色。\n属性名称：fontColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":true,\"description\":\"字体颜色。\",\"default\":null}}\n", "设置选中区域。选中区域高亮且显示手柄和文本选择菜单。\n属性名称：selection\n属性参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":-1}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":-1}}\n", "设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", "设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n", "设置文字阴影效果。\n属性名称：textShadow\n属性参数：{'value': {\"type\":[\"ShadowOptions\",\"Array<ShadowOptions>\"],\"required\":true,\"description\":\"文字阴影效果。\",\"default\":null}}\n", "设置文本大小写。\n属性名称：textCase\n属性参数：{'value': {\"type\":\"TextCase\",\"required\":true,\"description\":\"文本大小写。\",\"default\":\"TextCase.Normal\"}}\n", "设置文本字符间距。设置该值为百分比时，按默认值显示。设置该值为0时，按默认值显示。\n属性名称：letterSpacing\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"文本字符间距。\",\"default\":null}}\n", "设置文字特性效果，比如数字等宽的特性。\n属性名称：fontFeature\n属性参数：{'value': {\"type\":\"string\",\"required\":true,\"description\":\"文字特性效果。\",\"default\":null}}\n", "设置使能文本识别。\n属性名称：enableDataDetector\n属性参数：{'enable': {\"type\":\"boolean\",\"required\":true,\"description\":\"使能文本识别。\",\"default\":false}}\n"], ["设置字体大小。\n属性名称：fontSize\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"字体大小。fontSize为number类型时，使用fp单位。字体默认大小16fp。不支持设置百分比字符串。\",\"default\":\"16fp\"}}\n", "设置文本的字体粗细，设置过大可能会在不同字体下有截断。\n属性名称：fontWeight\n属性参数：{'value': {\"type\":[\"number\",\"FontWeight\",\"string\"],\"required\":true,\"description\":\"文本的字体粗细，number类型取值[100, 900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如\\\"400\\\"，以及\\\"bold\\\"、\\\"bolder\\\"、\\\"lighter\\\"、\\\"regular\\\"、\\\"medium\\\"，分别对应FontWeight中相应的枚举值。默认值：FontWeight.Normal\",\"default\":\"FontWeight.Normal\"}}\n", "设置文本大小写。\n属性名称：textCase\n属性参数：{'value': {\"type\":\"TextCase\",\"required\":true,\"description\":\"文本大小写。\",\"default\":\"TextCase.Normal\"}}\n", "设置文本最大显示字号。\n属性名称：maxFontSize\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本最大显示字号。\",\"default\":null}}\n", "设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小。\n属性名称：lineHeight\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本行高，为number类型时单位为fp。\",\"default\":null}}\n", "设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", "设置文本最小显示字号。\n属性名称：minFontSize\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本最小显示字号。\",\"default\":null}}\n", "设置文本字符间距。设置该值为百分比时，按默认值显示。设置该值为0时，按默认值显示。\n属性名称：letterSpacing\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"文本字符间距。\",\"default\":null}}\n", "设置文本的最大行数。\n属性名称：maxLines\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"文本的最大行数。\",\"default\":null}}\n", "设置文本的行间距，设置值不大于0时，取默认值0。\n属性名称：lineSpacing\n属性参数：{'value': {\"type\":\"LengthMetrics\",\"required\":true,\"description\":\"文本的行间距。\",\"default\":null}}\n"]], "uris": null, "data": null, "included": ["metadatas", "documents", "distances"]}}}, {"id": "Zeu4UQZjo6SDKBG3qCPVKj", "description": "查询组件Toggle的相关属性、事件文档", "subtasks": [], "details": {"query": ["设置切换开关的默认状态", "设置切换开关的标题", "设置切换开关的摘要", "设置切换开关的样式"], "n_results": 10, "query_results": {"ids": [["7ad882d8-2c7f-4099-9aa1-8e7f991c7b12", "e6ae83b2-3ab4-4805-bac6-9108b858fd2d", "a4f6c35e-d771-4737-ad38-30b603bf500a", "6932be74-e77d-48c3-9ffd-198b12860300", "4b5a7105-3bb5-45f4-a069-ff2125441923", "36c201d0-8da5-4728-ac7f-87e9008b0807", "71cdcde6-ef46-4a00-8017-47a19f6d534c", "4d5e8c81-d97e-4edd-a18d-09752d142c6d", "086fcc37-1338-44fa-8606-1768a37bc243", "e6b32d76-9a38-4e8e-9ca9-e908dfde8283"], ["7ad882d8-2c7f-4099-9aa1-8e7f991c7b12", "e6ae83b2-3ab4-4805-bac6-9108b858fd2d", "fc2bbfe8-4704-41e2-870e-89873c88ef92", "71cdcde6-ef46-4a00-8017-47a19f6d534c", "6932be74-e77d-48c3-9ffd-198b12860300", "a4f6c35e-d771-4737-ad38-30b603bf500a", "21225eba-5d30-401a-a73e-7dd13ed72200", "c7150ed5-d990-4553-9795-cd5e694ce7c8", "e6b32d76-9a38-4e8e-9ca9-e908dfde8283", "55c63c10-be2d-41f5-a2e1-3517d66a03fa"], ["7ad882d8-2c7f-4099-9aa1-8e7f991c7b12", "e6ae83b2-3ab4-4805-bac6-9108b858fd2d", "fc2bbfe8-4704-41e2-870e-89873c88ef92", "6932be74-e77d-48c3-9ffd-198b12860300", "a4f6c35e-d771-4737-ad38-30b603bf500a", "71cdcde6-ef46-4a00-8017-47a19f6d534c", "21225eba-5d30-401a-a73e-7dd13ed72200", "c7150ed5-d990-4553-9795-cd5e694ce7c8", "e152ce17-1d10-4604-9ed6-2ba6e7190f9a", "20130348-957f-430d-8e9d-08970dbbe99d"], ["e6ae83b2-3ab4-4805-bac6-9108b858fd2d", "7ad882d8-2c7f-4099-9aa1-8e7f991c7b12", "6932be74-e77d-48c3-9ffd-198b12860300", "a4f6c35e-d771-4737-ad38-30b603bf500a", "e6b32d76-9a38-4e8e-9ca9-e908dfde8283", "4b5a7105-3bb5-45f4-a069-ff2125441923", "fc2bbfe8-4704-41e2-870e-89873c88ef92", "21225eba-5d30-401a-a73e-7dd13ed72200", "d25287a6-57e2-4f9b-baf9-a4bf9302afcd", "55c63c10-be2d-41f5-a2e1-3517d66a03fa"]], "distances": [[0.34575605392456055, 0.42625290155410767, 0.4443098306655884, 0.4546644687652588, 0.4893808364868164, 0.492093563079834, 0.506781816482544, 0.5111658573150635, 0.5145333409309387, 0.5169000625610352], [0.3826490640640259, 0.47321683168411255, 0.4856557250022888, 0.4949445128440857, 0.4994558095932007, 0.5128286480903625, 0.5268855690956116, 0.5346777439117432, 0.5366531610488892, 0.5393694639205933], [0.3768976330757141, 0.4735267758369446, 0.48655831813812256, 0.49741655588150024, 0.5167808532714844, 0.5172432065010071, 0.5332143306732178, 0.5421266555786133, 0.5476061105728149, 0.5490317940711975], [0.34324079751968384, 0.36976122856140137, 0.39382755756378174, 0.42250508069992065, 0.42551863193511963, 0.42708998918533325, 0.46040260791778564, 0.46214741468429565, 0.4625072479248047, 0.46743476390838623]], "metadatas": [[{"component_name": "Toggle", "name": "onChange", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Toggle", "name": "switchStyle", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "selectedColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "switchPointColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "fontStyle", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "markAnchor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "fontFamily", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "padding", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "decoration", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "Toggle", "name": "onChange", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Toggle", "name": "switchStyle", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "contentModifier", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "markAnchor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "switchPointColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "selectedColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "size", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "margin", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "decoration", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "fontColor", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "Toggle", "name": "onChange", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Toggle", "name": "switchStyle", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "contentModifier", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "switchPointColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "selectedColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "markAnchor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "size", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "margin", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "width", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "flexBasis", "source": "harmony-component-doc", "type": "attribute"}], [{"component_name": "Toggle", "name": "switchStyle", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "onChange", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Toggle", "name": "switchPointColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "selectedColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "decoration", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "fontStyle", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "contentModifier", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "size", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "chainMode", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "fontColor", "source": "harmony-component-doc", "type": "attribute"}]], "embeddings": null, "documents": [["开关状态切换时触发该事件。\n事件名称：onChange\n事件参数：{'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"为true时，代表状态从关切换为开。false时，代表状态从开切换为关。\",\"default\":null}}\n事件返回值：None\n", "设置Switch类型的样式。仅对type为ToggleType.Switch生效。\n属性名称：switchStyle\n属性参数：{'value': {\"type\":\"SwitchStyle\",\"required\":false,\"description\":\"Switch类型的样式配置。\",\"default\":null}}\n", "设置组件打开状态的背景颜色。\n属性名称：selectedColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"组件打开状态的背景颜色。\",\"default\":null}}\n", "设置Switch类型的圆形滑块颜色。仅对type为ToggleType.Switch生效。\n属性名称：switchPointColor\n属性参数：{'color': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"Switch类型的圆形滑块颜色。\",\"default\":\"#ffffffff\"}}\n", "设置字体样式。\n属性名称：fontStyle\n属性参数：{'value': {\"type\":\"FontStyle\",\"required\":true,\"description\":\"字体样式。默认值：FontStyle.Normal\",\"default\":\"FontStyle.Normal\"}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "设置子元素在位置定位时的锚点。\n属性名称：markAnchor\n属性参数：{'value': {\"type\":[\"Position\",\"LocalizedPosition\"],\"required\":true,\"description\":\"设置子元素在位置定位时的锚点，从position或offset的位置上，进一步偏移。设置.position({x: value1, y: value2}).markAnchor({x: value3, y: value4})，效果等于设置.position({x: value1 - value3, y: value2 - value4})，offset同理。单独使用markAnchor，设置.markAnchor({x: value1, y: value2})，效果等于设置.offset({x: -value1, y: -value2})。\",\"default\":null}}\n", "设置字体列表。\n属性名称：fontFamily\n属性参数：{'value': {\"type\":[\"string\",\"Resource\"],\"required\":true,\"description\":\"字体列表。默认字体'HarmonyOS Sans'。应用当前支持'HarmonyOS Sans'字体和注册自定义字体。卡片当前仅支持'HarmonyOS Sans'字体。\",\"default\":\"HarmonyOS Sans\"}}\n", "设置内边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：padding\n属性参数：{'value': {\"type\":[\"Padding\",\"Length\",\"LocalizedPadding\"],\"required\":true,\"description\":\"设置组件的内边距。参数为Length类型时，四个方向内边距同时生效。默认值：0。单位：vp。padding设置百分比时，上下左右内边距均以父容器的width作为基础值。\",\"default\":null}}\n", "设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n"], ["开关状态切换时触发该事件。\n事件名称：onChange\n事件参数：{'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"为true时，代表状态从关切换为开。false时，代表状态从开切换为关。\",\"default\":null}}\n事件返回值：None\n", "设置Switch类型的样式。仅对type为ToggleType.Switch生效。\n属性名称：switchStyle\n属性参数：{'value': {\"type\":\"SwitchStyle\",\"required\":false,\"description\":\"Switch类型的样式配置。\",\"default\":null}}\n", "定制Toggle内容区的方法。\n属性名称：contentModifier\n属性参数：{'modifier': {\"type\":\"ContentModifier<ToggleConfiguration>\",\"required\":false,\"description\":\"定制Toggle内容区的方法。\",\"default\":null}}\n", "设置子元素在位置定位时的锚点。\n属性名称：markAnchor\n属性参数：{'value': {\"type\":[\"Position\",\"LocalizedPosition\"],\"required\":true,\"description\":\"设置子元素在位置定位时的锚点，从position或offset的位置上，进一步偏移。设置.position({x: value1, y: value2}).markAnchor({x: value3, y: value4})，效果等于设置.position({x: value1 - value3, y: value2 - value4})，offset同理。单独使用markAnchor，设置.markAnchor({x: value1, y: value2})，效果等于设置.offset({x: -value1, y: -value2})。\",\"default\":null}}\n", "设置Switch类型的圆形滑块颜色。仅对type为ToggleType.Switch生效。\n属性名称：switchPointColor\n属性参数：{'color': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"Switch类型的圆形滑块颜色。\",\"default\":\"#ffffffff\"}}\n", "设置组件打开状态的背景颜色。\n属性名称：selectedColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"组件打开状态的背景颜色。\",\"default\":null}}\n", "设置高宽尺寸。从API version 10开始，该接口支持calc计算特性。\n属性名称：size\n属性参数：{'value': {\"type\":\"SizeOptions\",\"required\":true,\"description\":\"要设置的高宽尺寸。\",\"default\":null}}\n", "设置外边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：margin\n属性参数：{'value': {\"type\":[\"Margin\",\"Length\",\"LocalizedMargin\"],\"required\":true,\"description\":\"设置组件的外边距。参数为Length类型时，四个方向外边距同时生效。默认值：0。单位：vp。margin设置百分比时，上下左右外边距均以父容器的width作为基础值。\",\"default\":null}}\n", "设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n", "设置字体颜色。\n属性名称：fontColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":true,\"description\":\"字体颜色。\",\"default\":null}}\n"], ["开关状态切换时触发该事件。\n事件名称：onChange\n事件参数：{'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"为true时，代表状态从关切换为开。false时，代表状态从开切换为关。\",\"default\":null}}\n事件返回值：None\n", "设置Switch类型的样式。仅对type为ToggleType.Switch生效。\n属性名称：switchStyle\n属性参数：{'value': {\"type\":\"SwitchStyle\",\"required\":false,\"description\":\"Switch类型的样式配置。\",\"default\":null}}\n", "定制Toggle内容区的方法。\n属性名称：contentModifier\n属性参数：{'modifier': {\"type\":\"ContentModifier<ToggleConfiguration>\",\"required\":false,\"description\":\"定制Toggle内容区的方法。\",\"default\":null}}\n", "设置Switch类型的圆形滑块颜色。仅对type为ToggleType.Switch生效。\n属性名称：switchPointColor\n属性参数：{'color': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"Switch类型的圆形滑块颜色。\",\"default\":\"#ffffffff\"}}\n", "设置组件打开状态的背景颜色。\n属性名称：selectedColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"组件打开状态的背景颜色。\",\"default\":null}}\n", "设置子元素在位置定位时的锚点。\n属性名称：markAnchor\n属性参数：{'value': {\"type\":[\"Position\",\"LocalizedPosition\"],\"required\":true,\"description\":\"设置子元素在位置定位时的锚点，从position或offset的位置上，进一步偏移。设置.position({x: value1, y: value2}).markAnchor({x: value3, y: value4})，效果等于设置.position({x: value1 - value3, y: value2 - value4})，offset同理。单独使用markAnchor，设置.markAnchor({x: value1, y: value2})，效果等于设置.offset({x: -value1, y: -value2})。\",\"default\":null}}\n", "设置高宽尺寸。从API version 10开始，该接口支持calc计算特性。\n属性名称：size\n属性参数：{'value': {\"type\":\"SizeOptions\",\"required\":true,\"description\":\"要设置的高宽尺寸。\",\"default\":null}}\n", "设置外边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：margin\n属性参数：{'value': {\"type\":[\"Margin\",\"Length\",\"LocalizedMargin\"],\"required\":true,\"description\":\"设置组件的外边距。参数为Length类型时，四个方向外边距同时生效。默认值：0。单位：vp。margin设置百分比时，上下左右外边距均以父容器的width作为基础值。\",\"default\":null}}\n", "设置组件自身的宽度，缺省时使用元素自身内容需要的宽度。若子组件的宽大于父组件的宽，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：width\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件宽度。单位：vp\",\"default\":null}}\n", "设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n"], ["设置Switch类型的样式。仅对type为ToggleType.Switch生效。\n属性名称：switchStyle\n属性参数：{'value': {\"type\":\"SwitchStyle\",\"required\":false,\"description\":\"Switch类型的样式配置。\",\"default\":null}}\n", "开关状态切换时触发该事件。\n事件名称：onChange\n事件参数：{'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"为true时，代表状态从关切换为开。false时，代表状态从开切换为关。\",\"default\":null}}\n事件返回值：None\n", "设置Switch类型的圆形滑块颜色。仅对type为ToggleType.Switch生效。\n属性名称：switchPointColor\n属性参数：{'color': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"Switch类型的圆形滑块颜色。\",\"default\":\"#ffffffff\"}}\n", "设置组件打开状态的背景颜色。\n属性名称：selectedColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"组件打开状态的背景颜色。\",\"default\":null}}\n", "设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n", "设置字体样式。\n属性名称：fontStyle\n属性参数：{'value': {\"type\":\"FontStyle\",\"required\":true,\"description\":\"字体样式。默认值：FontStyle.Normal\",\"default\":\"FontStyle.Normal\"}}\n", "定制Toggle内容区的方法。\n属性名称：contentModifier\n属性参数：{'modifier': {\"type\":\"ContentModifier<ToggleConfiguration>\",\"required\":false,\"description\":\"定制Toggle内容区的方法。\",\"default\":null}}\n", "设置高宽尺寸。从API version 10开始，该接口支持calc计算特性。\n属性名称：size\n属性参数：{'value': {\"type\":\"SizeOptions\",\"required\":true,\"description\":\"要设置的高宽尺寸。\",\"default\":null}}\n", "指定以该组件为链头所构成的链的参数，仅当父容器为RelativeContainer时生效。\n属性名称：chainMode\n属性参数：{'direction': {\"type\":\"Axis\",\"required\":true,\"description\":\"链的方向。\",\"default\":null}, 'style': {\"type\":\"ChainStyle\",\"required\":true,\"description\":\"链的样式。\",\"default\":null}}\n", "设置字体颜色。\n属性名称：fontColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":true,\"description\":\"字体颜色。\",\"default\":null}}\n"]], "uris": null, "data": null, "included": ["metadatas", "documents", "distances"]}}}], "details": null}, {"id": "TMtfGQVWg5J6kqxNo28XBQ", "description": "过滤低于阈值的查询结果", "subtasks": [{"id": "9ov554PrhmBkJtX6GbGruT", "description": "过滤低于阈值的查询结果: 设置容器的垂直布局", "subtasks": [], "details": {"query": "设置容器的垂直布局", "result_ids": ["d82cc3ce-d0d6-419c-bf57-9ab4f36ea11d", "04d98ac5-e176-4e46-a0e0-7cf93182d0c7", "33ea25aa-cac4-4f85-b3b7-f1b9a5bac825", "09af9fd0-9440-4136-8bbf-9835ad3e65e8", "4a6a9493-af1d-4b71-ac93-e005d4b79b23", "d9f81a84-dcc9-42e7-bf00-40f59725f621", "b6443713-fdd1-4b76-b02a-276d24cc6f59", "91a5fea0-4a01-4fa8-ad43-db72f51f3ed5", "f12a099d-8fd6-4be6-b7fd-85791b7fa4e3", "0312e8d6-efb1-4896-8129-462ef1bc3395"], "result_documents": ["设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "设置子组件在垂直方向上的对齐格式。\n属性名称：justifyContent\n属性参数：{'value': {\"type\":\"FlexAlign\",\"required\":true,\"description\":\"子组件在垂直方向上的对齐格式。\",\"default\":\"FlexAlign.Start\"}}\n", "设置组件在父容器的剩余空间所占比例。\n属性名称：flexGrow\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器在主轴方向上的剩余空间分配给此属性所在组件的比例。\",\"default\":0}}\n", "设置父容器压缩尺寸分配给此属性所在组件的比例。当父容器为Column、Row时，需设置主轴方向的尺寸。\n属性名称：flexShrink\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置父容器压缩尺寸分配给此属性所在组件的比例。\",\"default\":0}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n"], "result_metadatas": [{"component_name": "Column", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "justifyContent", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexGrow", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexShrink", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexBasis", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.3229793906211853, 0.3506191372871399, 0.3543122410774231, 0.39744752645492554, 0.4012277126312256, 0.4035184383392334, 0.40363746881484985, 0.4051682949066162, 0.4078032970428467, 0.41530823707580566], "threshold": 0.6, "query_text_results": [["设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", {"component_name": "Column", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, 0.6770206093788147], ["设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", {"component_name": "Column", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, 0.6493808627128601], ["指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", {"component_name": "Column", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, 0.6456877589225769], ["设置子组件在垂直方向上的对齐格式。\n属性名称：justifyContent\n属性参数：{'value': {\"type\":\"FlexAlign\",\"required\":true,\"description\":\"子组件在垂直方向上的对齐格式。\",\"default\":\"FlexAlign.Start\"}}\n", {"component_name": "Column", "name": "justifyContent", "source": "harmony-component-doc", "type": "attribute"}, 0.6025524735450745]]}}, {"id": "WcrnY3Y5FiRL5BhX2wu8Aw", "description": "过滤低于阈值的查询结果: 设置子组件的垂直排列", "subtasks": [], "details": {"query": "设置子组件的垂直排列", "result_ids": ["a44c0ffe-dffc-4cb3-a6c5-17b220f6ad0c", "09af9fd0-9440-4136-8bbf-9835ad3e65e8", "04d98ac5-e176-4e46-a0e0-7cf93182d0c7", "b6443713-fdd1-4b76-b02a-276d24cc6f59", "33ea25aa-cac4-4f85-b3b7-f1b9a5bac825", "91a5fea0-4a01-4fa8-ad43-db72f51f3ed5", "d82cc3ce-d0d6-419c-bf57-9ab4f36ea11d", "872aac8e-8101-46e9-90b6-fbd034359d5d", "0312e8d6-efb1-4896-8129-462ef1bc3395", "f12a099d-8fd6-4be6-b7fd-85791b7fa4e3"], "result_documents": ["设置子组件在水平方向上的对齐格式。\n属性名称：alignItems\n属性参数：{'value': {\"type\":\"HorizontalAlign\",\"required\":true,\"description\":\"子组件在水平方向上的对齐格式。\",\"default\":\"HorizontalAlign.Center\"}}\n", "设置子组件在垂直方向上的对齐格式。\n属性名称：justifyContent\n属性参数：{'value': {\"type\":\"FlexAlign\",\"required\":true,\"description\":\"子组件在垂直方向上的对齐格式。\",\"default\":\"FlexAlign.Start\"}}\n", "设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n", "子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", "设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n", "绝对定位，确定子组件相对父组件的位置。\n属性名称：position\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"绝对定位，确定子组件相对父组件的位置。当父容器为Row/Column/Flex时，设置position的子组件不占位。Position类型基于父组件左上角确定位置;Edges类型基于父组件四边确定位置，top/left/right/bottom分别为组件各边距离父组件相应边的边距，通过边距来确定组件相对于父组件的位置;LocalizedEdges类型基于父组件四边确定位置，支持镜像模式。适用于置顶显示、悬浮按钮等组件在父容器中位置固定的场景。不支持在宽高为零的布局容器上设置。当父容器为RelativeContainer, 且子组件设置了alignRules属性, 则子组件的position属性不生效。\",\"default\":null}}\n", "设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n", "对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n"], "result_metadatas": [{"component_name": "Column", "name": "alignItems", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "justifyContent", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "align", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignRules", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "direction", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "position", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "flexBasis", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Column", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.2751392126083374, 0.2793181538581848, 0.3582552671432495, 0.36125779151916504, 0.3644333481788635, 0.36688536405563354, 0.3722842335700989, 0.37816470861434937, 0.3807613253593445, 0.381248414516449], "threshold": 0.6, "query_text_results": [["设置子组件在水平方向上的对齐格式。\n属性名称：alignItems\n属性参数：{'value': {\"type\":\"HorizontalAlign\",\"required\":true,\"description\":\"子组件在水平方向上的对齐格式。\",\"default\":\"HorizontalAlign.Center\"}}\n", {"component_name": "Column", "name": "alignItems", "source": "harmony-component-doc", "type": "attribute"}, 0.7248607873916626], ["设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", {"component_name": "Column", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, 0.638742208480835], ["子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n", {"component_name": "Column", "name": "alignSelf", "source": "harmony-component-doc", "type": "attribute"}, 0.6331146359443665], ["绝对定位，确定子组件相对父组件的位置。\n属性名称：position\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"绝对定位，确定子组件相对父组件的位置。当父容器为Row/Column/Flex时，设置position的子组件不占位。Position类型基于父组件左上角确定位置;Edges类型基于父组件四边确定位置，top/left/right/bottom分别为组件各边距离父组件相应边的边距，通过边距来确定组件相对于父组件的位置;LocalizedEdges类型基于父组件四边确定位置，支持镜像模式。适用于置顶显示、悬浮按钮等组件在父容器中位置固定的场景。不支持在宽高为零的布局容器上设置。当父容器为RelativeContainer, 且子组件设置了alignRules属性, 则子组件的position属性不生效。\",\"default\":null}}\n", {"component_name": "Column", "name": "position", "source": "harmony-component-doc", "type": "attribute"}, 0.6218352913856506], ["设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n", {"component_name": "Column", "name": "flexBasis", "source": "harmony-component-doc", "type": "attribute"}, 0.6192386746406555], ["对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", {"component_name": "Column", "name": "layoutWeight", "source": "harmony-component-doc", "type": "attribute"}, 0.618751585483551]]}}], "details": null}, {"id": "QTcN4jfK52HsmcKSs97Niq", "description": "过滤低于阈值的查询结果", "subtasks": [{"id": "KrBpZSuw9HRqBKYGkHrYGD", "description": "过滤低于阈值的查询结果: 设置文本的标题", "subtasks": [], "details": {"query": "设置文本的标题", "result_ids": ["6f72f2b5-8af2-4583-9413-44e7d271080c", "5c4c808a-59df-40bd-aa6e-4830f51b5fe4", "6be53b16-d33e-4360-a82a-69054e0ff19a", "2118e3cb-ff25-44e4-8f0b-e51f59a2c412", "31c5a7b7-60c3-4649-8644-b0a2fc095b6f", "ef12c73a-8411-4320-a5ea-0d39e643de12", "ff90f708-e4a0-4ddd-9766-66cebd6d085b", "a319a79d-bc52-4839-b6ae-cded4e3702e9", "83aa933b-cac2-47db-b828-510d20ee52b7", "4f7dd024-b71b-4c3d-88a7-e2a6339c8e5c"], "result_documents": ["设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n", "设置选中区域。选中区域高亮且显示手柄和文本选择菜单。\n属性名称：selection\n属性参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":-1}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":-1}}\n", "设置文本的行间距，设置值不大于0时，取默认值0。\n属性名称：lineSpacing\n属性参数：{'value': {\"type\":\"LengthMetrics\",\"required\":true,\"description\":\"文本的行间距。\",\"default\":null}}\n", "设置文本字符间距。设置该值为百分比时，按默认值显示。设置该值为0时，按默认值显示。\n属性名称：letterSpacing\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"文本字符间距。\",\"default\":null}}\n", "设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小。\n属性名称：lineHeight\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本行高，为number类型时单位为fp。\",\"default\":null}}\n", "设置文本大小写。\n属性名称：textCase\n属性参数：{'value': {\"type\":\"TextCase\",\"required\":true,\"description\":\"文本大小写。\",\"default\":\"TextCase.Normal\"}}\n", "设置文本自适应高度的方式。\n属性名称：heightAdaptivePolicy\n属性参数：{'value': {\"type\":\"TextHeightAdaptivePolicy\",\"required\":true,\"description\":\"文本自适应高度的方式。\",\"default\":null}}\n", "文本选择的位置发生变化时，触发该回调。\n事件名称：onTextSelectionChange\n事件参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":null}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":null}}\n事件返回值：None\n", "设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", "设置使能文本识别。\n属性名称：enableDataDetector\n属性参数：{'enable': {\"type\":\"boolean\",\"required\":true,\"description\":\"使能文本识别。\",\"default\":false}}\n"], "result_metadatas": [{"component_name": "Text", "name": "textAlign", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "selection", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "lineSpacing", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "letterSpacing", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "lineHeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textCase", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "heightAdaptivePolicy", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "onTextSelectionChange", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "enableDataDetector", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.39904022216796875, 0.41140037775039673, 0.4118152856826782, 0.41793322563171387, 0.4242016673088074, 0.43079787492752075, 0.4360361099243164, 0.43629932403564453, 0.4385308623313904, 0.4387114644050598], "threshold": 0.6, "query_text_results": [["设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n", {"component_name": "Text", "name": "textAlign", "source": "harmony-component-doc", "type": "attribute"}, 0.6009597778320312]]}}, {"id": "cZDFnnNwiE6HVypaxyxwus", "description": "过滤低于阈值的查询结果: 设置文本的摘要", "subtasks": [], "details": {"query": "设置文本的摘要", "result_ids": ["6f72f2b5-8af2-4583-9413-44e7d271080c", "4b0a480c-d137-4596-a2b4-457b1f4fb17a", "95d6034b-0f1e-4b0c-9cde-a1202e601b71", "5c4c808a-59df-40bd-aa6e-4830f51b5fe4", "83aa933b-cac2-47db-b828-510d20ee52b7", "6be53b16-d33e-4360-a82a-69054e0ff19a", "31c5a7b7-60c3-4649-8644-b0a2fc095b6f", "08f20e06-6d11-42e4-8ba9-01faac89ff08", "e6b91b12-1b67-439a-aa91-85c9ceb56095", "94ed9170-77a3-4809-a47a-4d7dc3d72e1e"], "result_documents": ["设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n", "设置文本超长时的显示方式。\n属性名称：textOverflow\n属性参数：{'value': {\"type\":{\"overflow\":\"TextOverflow\"},\"required\":true,\"description\":\"文本超长时的显示方式。\",\"default\":{\"overflow\":\"TextOverflow.Clip\"}}}\n", "设置文本的字体粗细，设置过大可能会在不同字体下有截断。\n属性名称：fontWeight\n属性参数：{'value': {\"type\":[\"number\",\"FontWeight\",\"string\"],\"required\":true,\"description\":\"文本的字体粗细，number类型取值[100, 900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如\\\"400\\\"，以及\\\"bold\\\"、\\\"bolder\\\"、\\\"lighter\\\"、\\\"regular\\\"、\\\"medium\\\"，分别对应FontWeight中相应的枚举值。默认值：FontWeight.Normal\",\"default\":\"FontWeight.Normal\"}}\n", "设置选中区域。选中区域高亮且显示手柄和文本选择菜单。\n属性名称：selection\n属性参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":-1}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":-1}}\n", "设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", "设置文本的行间距，设置值不大于0时，取默认值0。\n属性名称：lineSpacing\n属性参数：{'value': {\"type\":\"LengthMetrics\",\"required\":true,\"description\":\"文本的行间距。\",\"default\":null}}\n", "设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小。\n属性名称：lineHeight\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本行高，为number类型时单位为fp。\",\"default\":null}}\n", "设置组件是否支持文本可复制粘贴。\n属性名称：copyOption\n属性参数：{'value': {\"type\":\"CopyOptions\",\"required\":true,\"description\":\"组件是否支持文本可复制粘贴。\",\"default\":\"CopyOptions.None\"}}\n", "设置省略位置。\n属性名称：ellipsisMode\n属性参数：{'value': {\"type\":\"EllipsisMode\",\"required\":true,\"description\":\"省略位置。\",\"default\":\"EllipsisMode.END\"}}\n", "设置文本的最大行数。\n属性名称：maxLines\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"文本的最大行数。\",\"default\":null}}\n"], "result_metadatas": [{"component_name": "Text", "name": "textAlign", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textOverflow", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "fontWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "selection", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "lineSpacing", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "lineHeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "copyOption", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "ellipsisMode", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "maxLines", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.4226257801055908, 0.4339914321899414, 0.4369875192642212, 0.44675999879837036, 0.45055055618286133, 0.4514079689979553, 0.45571303367614746, 0.4584107995033264, 0.46092283725738525, 0.4631319046020508], "threshold": 0.6, "query_text_results": []}}, {"id": "id93ibz7KdutV7L53skEDS", "description": "过滤低于阈值的查询结果: 设置文本的颜色", "subtasks": [], "details": {"query": "设置文本的颜色", "result_ids": ["5b01f32f-e789-47af-86a4-df5a864c92c4", "8f8332f1-4022-4fdd-8c82-0fe34be3bdf4", "5c4c808a-59df-40bd-aa6e-4830f51b5fe4", "83aa933b-cac2-47db-b828-510d20ee52b7", "6f72f2b5-8af2-4583-9413-44e7d271080c", "b4fe00f3-edcd-4a70-ae27-61c7a375df32", "ef12c73a-8411-4320-a5ea-0d39e643de12", "2118e3cb-ff25-44e4-8f0b-e51f59a2c412", "c0819d7b-8892-4469-9667-9b6b04a8ece6", "4f7dd024-b71b-4c3d-88a7-e2a6339c8e5c"], "result_documents": ["设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n", "设置字体颜色。\n属性名称：fontColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":true,\"description\":\"字体颜色。\",\"default\":null}}\n", "设置选中区域。选中区域高亮且显示手柄和文本选择菜单。\n属性名称：selection\n属性参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":-1}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":-1}}\n", "设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", "设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n", "设置文字阴影效果。\n属性名称：textShadow\n属性参数：{'value': {\"type\":[\"ShadowOptions\",\"Array<ShadowOptions>\"],\"required\":true,\"description\":\"文字阴影效果。\",\"default\":null}}\n", "设置文本大小写。\n属性名称：textCase\n属性参数：{'value': {\"type\":\"TextCase\",\"required\":true,\"description\":\"文本大小写。\",\"default\":\"TextCase.Normal\"}}\n", "设置文本字符间距。设置该值为百分比时，按默认值显示。设置该值为0时，按默认值显示。\n属性名称：letterSpacing\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"文本字符间距。\",\"default\":null}}\n", "设置文字特性效果，比如数字等宽的特性。\n属性名称：fontFeature\n属性参数：{'value': {\"type\":\"string\",\"required\":true,\"description\":\"文字特性效果。\",\"default\":null}}\n", "设置使能文本识别。\n属性名称：enableDataDetector\n属性参数：{'enable': {\"type\":\"boolean\",\"required\":true,\"description\":\"使能文本识别。\",\"default\":false}}\n"], "result_metadatas": [{"component_name": "Text", "name": "decoration", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "fontColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "selection", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textAlign", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textShadow", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textCase", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "letterSpacing", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "fontFeature", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "enableDataDetector", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.28547990322113037, 0.2985798120498657, 0.36309266090393066, 0.3712409734725952, 0.38452833890914917, 0.38597506284713745, 0.38729697465896606, 0.3875335454940796, 0.38833117485046387, 0.3897336721420288], "threshold": 0.6, "query_text_results": [["设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n", {"component_name": "Text", "name": "decoration", "source": "harmony-component-doc", "type": "attribute"}, 0.7145200967788696], ["设置字体颜色。\n属性名称：fontColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":true,\"description\":\"字体颜色。\",\"default\":null}}\n", {"component_name": "Text", "name": "fontColor", "source": "harmony-component-doc", "type": "attribute"}, 0.7014201879501343], ["设置选中区域。选中区域高亮且显示手柄和文本选择菜单。\n属性名称：selection\n属性参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":-1}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":-1}}\n", {"component_name": "Text", "name": "selection", "source": "harmony-component-doc", "type": "attribute"}, 0.6369073390960693], ["设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", {"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, 0.6287590265274048], ["设置文字阴影效果。\n属性名称：textShadow\n属性参数：{'value': {\"type\":[\"ShadowOptions\",\"Array<ShadowOptions>\"],\"required\":true,\"description\":\"文字阴影效果。\",\"default\":null}}\n", {"component_name": "Text", "name": "textShadow", "source": "harmony-component-doc", "type": "attribute"}, 0.6140249371528625], ["设置文本大小写。\n属性名称：textCase\n属性参数：{'value': {\"type\":\"TextCase\",\"required\":true,\"description\":\"文本大小写。\",\"default\":\"TextCase.Normal\"}}\n", {"component_name": "Text", "name": "textCase", "source": "harmony-component-doc", "type": "attribute"}, 0.6127030253410339], ["设置文本字符间距。设置该值为百分比时，按默认值显示。设置该值为0时，按默认值显示。\n属性名称：letterSpacing\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"文本字符间距。\",\"default\":null}}\n", {"component_name": "Text", "name": "letterSpacing", "source": "harmony-component-doc", "type": "attribute"}, 0.6124664545059204], ["设置文字特性效果，比如数字等宽的特性。\n属性名称：fontFeature\n属性参数：{'value': {\"type\":\"string\",\"required\":true,\"description\":\"文字特性效果。\",\"default\":null}}\n", {"component_name": "Text", "name": "fontFeature", "source": "harmony-component-doc", "type": "attribute"}, 0.6116688251495361], ["设置使能文本识别。\n属性名称：enableDataDetector\n属性参数：{'enable': {\"type\":\"boolean\",\"required\":true,\"description\":\"使能文本识别。\",\"default\":false}}\n", {"component_name": "Text", "name": "enableDataDetector", "source": "harmony-component-doc", "type": "attribute"}, 0.6102663278579712]]}}, {"id": "7qqQjWuNF2ZN4Bgr9G7QBj", "description": "过滤低于阈值的查询结果: 设置文本的字体大小", "subtasks": [], "details": {"query": "设置文本的字体大小", "result_ids": ["45373205-4066-4c33-9afc-35117484cdff", "95d6034b-0f1e-4b0c-9cde-a1202e601b71", "ef12c73a-8411-4320-a5ea-0d39e643de12", "d16166ab-76f1-41d1-8747-acff1641b70e", "31c5a7b7-60c3-4649-8644-b0a2fc095b6f", "83aa933b-cac2-47db-b828-510d20ee52b7", "7d244f16-d5b4-423b-bdc7-c31d40bd72b3", "2118e3cb-ff25-44e4-8f0b-e51f59a2c412", "94ed9170-77a3-4809-a47a-4d7dc3d72e1e", "6be53b16-d33e-4360-a82a-69054e0ff19a"], "result_documents": ["设置字体大小。\n属性名称：fontSize\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"字体大小。fontSize为number类型时，使用fp单位。字体默认大小16fp。不支持设置百分比字符串。\",\"default\":\"16fp\"}}\n", "设置文本的字体粗细，设置过大可能会在不同字体下有截断。\n属性名称：fontWeight\n属性参数：{'value': {\"type\":[\"number\",\"FontWeight\",\"string\"],\"required\":true,\"description\":\"文本的字体粗细，number类型取值[100, 900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如\\\"400\\\"，以及\\\"bold\\\"、\\\"bolder\\\"、\\\"lighter\\\"、\\\"regular\\\"、\\\"medium\\\"，分别对应FontWeight中相应的枚举值。默认值：FontWeight.Normal\",\"default\":\"FontWeight.Normal\"}}\n", "设置文本大小写。\n属性名称：textCase\n属性参数：{'value': {\"type\":\"TextCase\",\"required\":true,\"description\":\"文本大小写。\",\"default\":\"TextCase.Normal\"}}\n", "设置文本最大显示字号。\n属性名称：maxFontSize\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本最大显示字号。\",\"default\":null}}\n", "设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小。\n属性名称：lineHeight\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本行高，为number类型时单位为fp。\",\"default\":null}}\n", "设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n", "设置文本最小显示字号。\n属性名称：minFontSize\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本最小显示字号。\",\"default\":null}}\n", "设置文本字符间距。设置该值为百分比时，按默认值显示。设置该值为0时，按默认值显示。\n属性名称：letterSpacing\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"文本字符间距。\",\"default\":null}}\n", "设置文本的最大行数。\n属性名称：maxLines\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"文本的最大行数。\",\"default\":null}}\n", "设置文本的行间距，设置值不大于0时，取默认值0。\n属性名称：lineSpacing\n属性参数：{'value': {\"type\":\"LengthMetrics\",\"required\":true,\"description\":\"文本的行间距。\",\"default\":null}}\n"], "result_metadatas": [{"component_name": "Text", "name": "fontSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "fontWeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "textCase", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "maxFontSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "lineHeight", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "font", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "minFontSize", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "letterSpacing", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "maxLines", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Text", "name": "lineSpacing", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.25978827476501465, 0.2653372883796692, 0.27123844623565674, 0.28062164783477783, 0.2823374271392822, 0.30967462062835693, 0.31139373779296875, 0.31304144859313965, 0.3282283544540405, 0.3293919563293457], "threshold": 0.6, "query_text_results": [["设置字体大小。\n属性名称：fontSize\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"字体大小。fontSize为number类型时，使用fp单位。字体默认大小16fp。不支持设置百分比字符串。\",\"default\":\"16fp\"}}\n", {"component_name": "Text", "name": "fontSize", "source": "harmony-component-doc", "type": "attribute"}, 0.7402117252349854], ["设置文本的字体粗细，设置过大可能会在不同字体下有截断。\n属性名称：fontWeight\n属性参数：{'value': {\"type\":[\"number\",\"FontWeight\",\"string\"],\"required\":true,\"description\":\"文本的字体粗细，number类型取值[100, 900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如\\\"400\\\"，以及\\\"bold\\\"、\\\"bolder\\\"、\\\"lighter\\\"、\\\"regular\\\"、\\\"medium\\\"，分别对应FontWeight中相应的枚举值。默认值：FontWeight.Normal\",\"default\":\"FontWeight.Normal\"}}\n", {"component_name": "Text", "name": "fontWeight", "source": "harmony-component-doc", "type": "attribute"}, 0.7346627116203308], ["设置文本最大显示字号。\n属性名称：maxFontSize\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本最大显示字号。\",\"default\":null}}\n", {"component_name": "Text", "name": "maxFontSize", "source": "harmony-component-doc", "type": "attribute"}, 0.7193783521652222], ["设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小。\n属性名称：lineHeight\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本行高，为number类型时单位为fp。\",\"default\":null}}\n", {"component_name": "Text", "name": "lineHeight", "source": "harmony-component-doc", "type": "attribute"}, 0.7176625728607178], ["设置文本最小显示字号。\n属性名称：minFontSize\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本最小显示字号。\",\"default\":null}}\n", {"component_name": "Text", "name": "minFontSize", "source": "harmony-component-doc", "type": "attribute"}, 0.6886062622070312], ["设置文本的最大行数。\n属性名称：maxLines\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"文本的最大行数。\",\"default\":null}}\n", {"component_name": "Text", "name": "maxLines", "source": "harmony-component-doc", "type": "attribute"}, 0.6717716455459595], ["设置文本的行间距，设置值不大于0时，取默认值0。\n属性名称：lineSpacing\n属性参数：{'value': {\"type\":\"LengthMetrics\",\"required\":true,\"description\":\"文本的行间距。\",\"default\":null}}\n", {"component_name": "Text", "name": "lineSpacing", "source": "harmony-component-doc", "type": "attribute"}, 0.6706080436706543]]}}], "details": null}, {"id": "75LQcrG4hkgCngnCbaRFQd", "description": "过滤低于阈值的查询结果", "subtasks": [{"id": "Px4sEVZFV36SzBbTRMiJK6", "description": "过滤低于阈值的查询结果: 设置切换开关的默认状态", "subtasks": [], "details": {"query": "设置切换开关的默认状态", "result_ids": ["7ad882d8-2c7f-4099-9aa1-8e7f991c7b12", "e6ae83b2-3ab4-4805-bac6-9108b858fd2d", "a4f6c35e-d771-4737-ad38-30b603bf500a", "6932be74-e77d-48c3-9ffd-198b12860300", "4b5a7105-3bb5-45f4-a069-ff2125441923", "36c201d0-8da5-4728-ac7f-87e9008b0807", "71cdcde6-ef46-4a00-8017-47a19f6d534c", "4d5e8c81-d97e-4edd-a18d-09752d142c6d", "086fcc37-1338-44fa-8606-1768a37bc243", "e6b32d76-9a38-4e8e-9ca9-e908dfde8283"], "result_documents": ["开关状态切换时触发该事件。\n事件名称：onChange\n事件参数：{'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"为true时，代表状态从关切换为开。false时，代表状态从开切换为关。\",\"default\":null}}\n事件返回值：None\n", "设置Switch类型的样式。仅对type为ToggleType.Switch生效。\n属性名称：switchStyle\n属性参数：{'value': {\"type\":\"SwitchStyle\",\"required\":false,\"description\":\"Switch类型的样式配置。\",\"default\":null}}\n", "设置组件打开状态的背景颜色。\n属性名称：selectedColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"组件打开状态的背景颜色。\",\"default\":null}}\n", "设置Switch类型的圆形滑块颜色。仅对type为ToggleType.Switch生效。\n属性名称：switchPointColor\n属性参数：{'color': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"Switch类型的圆形滑块颜色。\",\"default\":\"#ffffffff\"}}\n", "设置字体样式。\n属性名称：fontStyle\n属性参数：{'value': {\"type\":\"FontStyle\",\"required\":true,\"description\":\"字体样式。默认值：FontStyle.Normal\",\"default\":\"FontStyle.Normal\"}}\n", "设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n", "设置子元素在位置定位时的锚点。\n属性名称：markAnchor\n属性参数：{'value': {\"type\":[\"Position\",\"LocalizedPosition\"],\"required\":true,\"description\":\"设置子元素在位置定位时的锚点，从position或offset的位置上，进一步偏移。设置.position({x: value1, y: value2}).markAnchor({x: value3, y: value4})，效果等于设置.position({x: value1 - value3, y: value2 - value4})，offset同理。单独使用markAnchor，设置.markAnchor({x: value1, y: value2})，效果等于设置.offset({x: -value1, y: -value2})。\",\"default\":null}}\n", "设置字体列表。\n属性名称：fontFamily\n属性参数：{'value': {\"type\":[\"string\",\"Resource\"],\"required\":true,\"description\":\"字体列表。默认字体'HarmonyOS Sans'。应用当前支持'HarmonyOS Sans'字体和注册自定义字体。卡片当前仅支持'HarmonyOS Sans'字体。\",\"default\":\"HarmonyOS Sans\"}}\n", "设置内边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：padding\n属性参数：{'value': {\"type\":[\"Padding\",\"Length\",\"LocalizedPadding\"],\"required\":true,\"description\":\"设置组件的内边距。参数为Length类型时，四个方向内边距同时生效。默认值：0。单位：vp。padding设置百分比时，上下左右内边距均以父容器的width作为基础值。\",\"default\":null}}\n", "设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n"], "result_metadatas": [{"component_name": "Toggle", "name": "onChange", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Toggle", "name": "switchStyle", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "selectedColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "switchPointColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "fontStyle", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "displayPriority", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "markAnchor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "fontFamily", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "padding", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "decoration", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.34575605392456055, 0.42625290155410767, 0.4443098306655884, 0.4546644687652588, 0.4893808364868164, 0.492093563079834, 0.506781816482544, 0.5111658573150635, 0.5145333409309387, 0.5169000625610352], "threshold": 0.6, "query_text_results": [["开关状态切换时触发该事件。\n事件名称：onChange\n事件参数：{'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"为true时，代表状态从关切换为开。false时，代表状态从开切换为关。\",\"default\":null}}\n事件返回值：None\n", {"component_name": "Toggle", "name": "onChange", "source": "harmony-component-doc", "type": "event"}, 0.6542439460754395]]}}, {"id": "ga433VpibWi53RZDXR9r4B", "description": "过滤低于阈值的查询结果: 设置切换开关的标题", "subtasks": [], "details": {"query": "设置切换开关的标题", "result_ids": ["7ad882d8-2c7f-4099-9aa1-8e7f991c7b12", "e6ae83b2-3ab4-4805-bac6-9108b858fd2d", "fc2bbfe8-4704-41e2-870e-89873c88ef92", "71cdcde6-ef46-4a00-8017-47a19f6d534c", "6932be74-e77d-48c3-9ffd-198b12860300", "a4f6c35e-d771-4737-ad38-30b603bf500a", "21225eba-5d30-401a-a73e-7dd13ed72200", "c7150ed5-d990-4553-9795-cd5e694ce7c8", "e6b32d76-9a38-4e8e-9ca9-e908dfde8283", "55c63c10-be2d-41f5-a2e1-3517d66a03fa"], "result_documents": ["开关状态切换时触发该事件。\n事件名称：onChange\n事件参数：{'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"为true时，代表状态从关切换为开。false时，代表状态从开切换为关。\",\"default\":null}}\n事件返回值：None\n", "设置Switch类型的样式。仅对type为ToggleType.Switch生效。\n属性名称：switchStyle\n属性参数：{'value': {\"type\":\"SwitchStyle\",\"required\":false,\"description\":\"Switch类型的样式配置。\",\"default\":null}}\n", "定制Toggle内容区的方法。\n属性名称：contentModifier\n属性参数：{'modifier': {\"type\":\"ContentModifier<ToggleConfiguration>\",\"required\":false,\"description\":\"定制Toggle内容区的方法。\",\"default\":null}}\n", "设置子元素在位置定位时的锚点。\n属性名称：markAnchor\n属性参数：{'value': {\"type\":[\"Position\",\"LocalizedPosition\"],\"required\":true,\"description\":\"设置子元素在位置定位时的锚点，从position或offset的位置上，进一步偏移。设置.position({x: value1, y: value2}).markAnchor({x: value3, y: value4})，效果等于设置.position({x: value1 - value3, y: value2 - value4})，offset同理。单独使用markAnchor，设置.markAnchor({x: value1, y: value2})，效果等于设置.offset({x: -value1, y: -value2})。\",\"default\":null}}\n", "设置Switch类型的圆形滑块颜色。仅对type为ToggleType.Switch生效。\n属性名称：switchPointColor\n属性参数：{'color': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"Switch类型的圆形滑块颜色。\",\"default\":\"#ffffffff\"}}\n", "设置组件打开状态的背景颜色。\n属性名称：selectedColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"组件打开状态的背景颜色。\",\"default\":null}}\n", "设置高宽尺寸。从API version 10开始，该接口支持calc计算特性。\n属性名称：size\n属性参数：{'value': {\"type\":\"SizeOptions\",\"required\":true,\"description\":\"要设置的高宽尺寸。\",\"default\":null}}\n", "设置外边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：margin\n属性参数：{'value': {\"type\":[\"Margin\",\"Length\",\"LocalizedMargin\"],\"required\":true,\"description\":\"设置组件的外边距。参数为Length类型时，四个方向外边距同时生效。默认值：0。单位：vp。margin设置百分比时，上下左右外边距均以父容器的width作为基础值。\",\"default\":null}}\n", "设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n", "设置字体颜色。\n属性名称：fontColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":true,\"description\":\"字体颜色。\",\"default\":null}}\n"], "result_metadatas": [{"component_name": "Toggle", "name": "onChange", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Toggle", "name": "switchStyle", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "contentModifier", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "markAnchor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "switchPointColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "selectedColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "size", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "margin", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "decoration", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "fontColor", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.3826490640640259, 0.47321683168411255, 0.4856557250022888, 0.4949445128440857, 0.4994558095932007, 0.5128286480903625, 0.5268855690956116, 0.5346777439117432, 0.5366531610488892, 0.5393694639205933], "threshold": 0.6, "query_text_results": []}}, {"id": "D2dBWrQTkFPACtLERHQBnL", "description": "过滤低于阈值的查询结果: 设置切换开关的摘要", "subtasks": [], "details": {"query": "设置切换开关的摘要", "result_ids": ["7ad882d8-2c7f-4099-9aa1-8e7f991c7b12", "e6ae83b2-3ab4-4805-bac6-9108b858fd2d", "fc2bbfe8-4704-41e2-870e-89873c88ef92", "6932be74-e77d-48c3-9ffd-198b12860300", "a4f6c35e-d771-4737-ad38-30b603bf500a", "71cdcde6-ef46-4a00-8017-47a19f6d534c", "21225eba-5d30-401a-a73e-7dd13ed72200", "c7150ed5-d990-4553-9795-cd5e694ce7c8", "e152ce17-1d10-4604-9ed6-2ba6e7190f9a", "20130348-957f-430d-8e9d-08970dbbe99d"], "result_documents": ["开关状态切换时触发该事件。\n事件名称：onChange\n事件参数：{'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"为true时，代表状态从关切换为开。false时，代表状态从开切换为关。\",\"default\":null}}\n事件返回值：None\n", "设置Switch类型的样式。仅对type为ToggleType.Switch生效。\n属性名称：switchStyle\n属性参数：{'value': {\"type\":\"SwitchStyle\",\"required\":false,\"description\":\"Switch类型的样式配置。\",\"default\":null}}\n", "定制Toggle内容区的方法。\n属性名称：contentModifier\n属性参数：{'modifier': {\"type\":\"ContentModifier<ToggleConfiguration>\",\"required\":false,\"description\":\"定制Toggle内容区的方法。\",\"default\":null}}\n", "设置Switch类型的圆形滑块颜色。仅对type为ToggleType.Switch生效。\n属性名称：switchPointColor\n属性参数：{'color': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"Switch类型的圆形滑块颜色。\",\"default\":\"#ffffffff\"}}\n", "设置组件打开状态的背景颜色。\n属性名称：selectedColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"组件打开状态的背景颜色。\",\"default\":null}}\n", "设置子元素在位置定位时的锚点。\n属性名称：markAnchor\n属性参数：{'value': {\"type\":[\"Position\",\"LocalizedPosition\"],\"required\":true,\"description\":\"设置子元素在位置定位时的锚点，从position或offset的位置上，进一步偏移。设置.position({x: value1, y: value2}).markAnchor({x: value3, y: value4})，效果等于设置.position({x: value1 - value3, y: value2 - value4})，offset同理。单独使用markAnchor，设置.markAnchor({x: value1, y: value2})，效果等于设置.offset({x: -value1, y: -value2})。\",\"default\":null}}\n", "设置高宽尺寸。从API version 10开始，该接口支持calc计算特性。\n属性名称：size\n属性参数：{'value': {\"type\":\"SizeOptions\",\"required\":true,\"description\":\"要设置的高宽尺寸。\",\"default\":null}}\n", "设置外边距属性。从API version 10开始，该接口支持calc计算特性。\n属性名称：margin\n属性参数：{'value': {\"type\":[\"Margin\",\"Length\",\"LocalizedMargin\"],\"required\":true,\"description\":\"设置组件的外边距。参数为Length类型时，四个方向外边距同时生效。默认值：0。单位：vp。margin设置百分比时，上下左右外边距均以父容器的width作为基础值。\",\"default\":null}}\n", "设置组件自身的宽度，缺省时使用元素自身内容需要的宽度。若子组件的宽大于父组件的宽，则会画出父组件的范围。从API version 10开始，该接口支持calc计算特性。\n属性名称：width\n属性参数：{'value': {\"type\":\"Length\",\"required\":true,\"description\":\"要设置的组件宽度。单位：vp\",\"default\":null}}\n", "设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n"], "result_metadatas": [{"component_name": "Toggle", "name": "onChange", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Toggle", "name": "switchStyle", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "contentModifier", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "switchPointColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "selectedColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "markAnchor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "size", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "margin", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "width", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "flexBasis", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.3768976330757141, 0.4735267758369446, 0.48655831813812256, 0.49741655588150024, 0.5167808532714844, 0.5172432065010071, 0.5332143306732178, 0.5421266555786133, 0.5476061105728149, 0.5490317940711975], "threshold": 0.6, "query_text_results": []}}, {"id": "HXJLPZtrFTMCk6QNDtfVWo", "description": "过滤低于阈值的查询结果: 设置切换开关的样式", "subtasks": [], "details": {"query": "设置切换开关的样式", "result_ids": ["e6ae83b2-3ab4-4805-bac6-9108b858fd2d", "7ad882d8-2c7f-4099-9aa1-8e7f991c7b12", "6932be74-e77d-48c3-9ffd-198b12860300", "a4f6c35e-d771-4737-ad38-30b603bf500a", "e6b32d76-9a38-4e8e-9ca9-e908dfde8283", "4b5a7105-3bb5-45f4-a069-ff2125441923", "fc2bbfe8-4704-41e2-870e-89873c88ef92", "21225eba-5d30-401a-a73e-7dd13ed72200", "d25287a6-57e2-4f9b-baf9-a4bf9302afcd", "55c63c10-be2d-41f5-a2e1-3517d66a03fa"], "result_documents": ["设置Switch类型的样式。仅对type为ToggleType.Switch生效。\n属性名称：switchStyle\n属性参数：{'value': {\"type\":\"SwitchStyle\",\"required\":false,\"description\":\"Switch类型的样式配置。\",\"default\":null}}\n", "开关状态切换时触发该事件。\n事件名称：onChange\n事件参数：{'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"为true时，代表状态从关切换为开。false时，代表状态从开切换为关。\",\"default\":null}}\n事件返回值：None\n", "设置Switch类型的圆形滑块颜色。仅对type为ToggleType.Switch生效。\n属性名称：switchPointColor\n属性参数：{'color': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"Switch类型的圆形滑块颜色。\",\"default\":\"#ffffffff\"}}\n", "设置组件打开状态的背景颜色。\n属性名称：selectedColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"组件打开状态的背景颜色。\",\"default\":null}}\n", "设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n", "设置字体样式。\n属性名称：fontStyle\n属性参数：{'value': {\"type\":\"FontStyle\",\"required\":true,\"description\":\"字体样式。默认值：FontStyle.Normal\",\"default\":\"FontStyle.Normal\"}}\n", "定制Toggle内容区的方法。\n属性名称：contentModifier\n属性参数：{'modifier': {\"type\":\"ContentModifier<ToggleConfiguration>\",\"required\":false,\"description\":\"定制Toggle内容区的方法。\",\"default\":null}}\n", "设置高宽尺寸。从API version 10开始，该接口支持calc计算特性。\n属性名称：size\n属性参数：{'value': {\"type\":\"SizeOptions\",\"required\":true,\"description\":\"要设置的高宽尺寸。\",\"default\":null}}\n", "指定以该组件为链头所构成的链的参数，仅当父容器为RelativeContainer时生效。\n属性名称：chainMode\n属性参数：{'direction': {\"type\":\"Axis\",\"required\":true,\"description\":\"链的方向。\",\"default\":null}, 'style': {\"type\":\"ChainStyle\",\"required\":true,\"description\":\"链的样式。\",\"default\":null}}\n", "设置字体颜色。\n属性名称：fontColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":true,\"description\":\"字体颜色。\",\"default\":null}}\n"], "result_metadatas": [{"component_name": "Toggle", "name": "switchStyle", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "onChange", "source": "harmony-component-doc", "type": "event"}, {"component_name": "Toggle", "name": "switchPointColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "selectedColor", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "decoration", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "fontStyle", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "contentModifier", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "size", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "chainMode", "source": "harmony-component-doc", "type": "attribute"}, {"component_name": "Toggle", "name": "fontColor", "source": "harmony-component-doc", "type": "attribute"}], "result_distances": [0.34324079751968384, 0.36976122856140137, 0.39382755756378174, 0.42250508069992065, 0.42551863193511963, 0.42708998918533325, 0.46040260791778564, 0.46214741468429565, 0.4625072479248047, 0.46743476390838623], "threshold": 0.6, "query_text_results": [["设置Switch类型的样式。仅对type为ToggleType.Switch生效。\n属性名称：switchStyle\n属性参数：{'value': {\"type\":\"SwitchStyle\",\"required\":false,\"description\":\"Switch类型的样式配置。\",\"default\":null}}\n", {"component_name": "Toggle", "name": "switchStyle", "source": "harmony-component-doc", "type": "attribute"}, 0.6567592024803162], ["设置Switch类型的圆形滑块颜色。仅对type为ToggleType.Switch生效。\n属性名称：switchPointColor\n属性参数：{'color': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"Switch类型的圆形滑块颜色。\",\"default\":\"#ffffffff\"}}\n", {"component_name": "Toggle", "name": "switchPointColor", "source": "harmony-component-doc", "type": "attribute"}, 0.6061724424362183]]}}], "details": null}], "details": null}, {"id": "LBMUTWxfn9avMimwc3Dc82", "description": "生成组件文档", "subtasks": [], "details": {"component_documents": ["# Column\n接口描述：Column(value?: {space?: string | number})\n接口参数：{'space': {\"type\":[\"string\",\"number\"],\"required\":false,\"description\":\"纵向布局元素垂直方向间距。从API version 9开始，space为负数或者justifyContent设置为FlexAlign.SpaceBetween、FlexAlign.SpaceAround、FlexAlign.SpaceEvenly时不生效。\",\"default\":0}}\n设置容器元素内主轴方向上的布局。\n属性名称：direction\n属性参数：{'value': {\"type\":\"Direction\",\"required\":true,\"description\":\"设置容器元素内主轴方向上的布局。属性配置为auto的时候，按照系统语言方向进行布局。该属性在Column组件上不生效。\",\"default\":\"Direction.Auto\"}}\n设置容器元素绘制区域内的子元素的对齐方式。\n属性名称：align\n属性参数：{'value': {\"type\":\"Alignment\",\"required\":true,\"description\":\"设置容器元素绘制区域内的子元素的对齐方式。只在Stack、Button、Marquee、StepperItem、text、TextArea、TextInput、FolderStack中生效，其中和文本相关的组件Marquee、text、TextArea、TextInput的align结果参考textAlign。不支持textAlign属性的组件则无法设置水平方向的文字对齐。\",\"default\":\"Alignment.Center\"}}\n指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。\n属性名称：alignRules\n属性参数：{'value': {\"type\":\"AlignRuleOption\",\"required\":true,\"description\":\"指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效。该方法水平方向上以start和end分别替代原方法的left和right，以便在RTL模式下能镜像显示，建议使用该方法指定设置在相对容器中子组件的对齐规则。\",\"default\":null}}\n设置子组件在垂直方向上的对齐格式。\n属性名称：justifyContent\n属性参数：{'value': {\"type\":\"FlexAlign\",\"required\":true,\"description\":\"子组件在垂直方向上的对齐格式。\",\"default\":\"FlexAlign.Start\"}}\n设置子组件在水平方向上的对齐格式。\n属性名称：alignItems\n属性参数：{'value': {\"type\":\"HorizontalAlign\",\"required\":true,\"description\":\"子组件在水平方向上的对齐格式。\",\"default\":\"HorizontalAlign.Center\"}}\n设置当前组件在布局容器中显示的优先级。仅在Row/Column/Flex(单行)容器组件中生效。\n属性名称：displayPriority\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"设置当前组件在布局容器中显示的优先级。默认值：1。小数点后的数字不作优先级区分，即区间为[x, x + 1)内的数字视为相同优先级。例如：1.0与1.9为同一优先级。子组件的displayPriority均为1时，优先级没有区别。当子组件的displayPriority大于1时，若父容器空间不足，隐藏低优先级节点。\",\"default\":null}}\n子组件在父容器交叉轴的对齐格式。\n属性名称：alignSelf\n属性参数：{'value': {\"type\":\"ItemAlign\",\"required\":true,\"description\":\"子组件在父容器交叉轴的对齐格式，会覆盖Flex、Column、Row、GridRow布局容器中的alignItems设置。\",\"default\":\"ItemAlign.Auto\"}}\n绝对定位，确定子组件相对父组件的位置。\n属性名称：position\n属性参数：{'value': {\"type\":[\"Position\",\"Edges\",\"LocalizedEdges\"],\"required\":true,\"description\":\"绝对定位，确定子组件相对父组件的位置。当父容器为Row/Column/Flex时，设置position的子组件不占位。Position类型基于父组件左上角确定位置;Edges类型基于父组件四边确定位置，top/left/right/bottom分别为组件各边距离父组件相应边的边距，通过边距来确定组件相对于父组件的位置;LocalizedEdges类型基于父组件四边确定位置，支持镜像模式。适用于置顶显示、悬浮按钮等组件在父容器中位置固定的场景。不支持在宽高为零的布局容器上设置。当父容器为RelativeContainer, 且子组件设置了alignRules属性, 则子组件的position属性不生效。\",\"default\":null}}\n设置组件的基准尺寸。\n属性名称：flexBasis\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"设置组件在父容器主轴方向上的基准尺寸。不支持百分比设置。\",\"default\":\"auto\"}}\n对子组件进行重新布局。\n属性名称：layoutWeight\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"父容器尺寸确定时，设置了layoutWeight属性的子元素与兄弟元素占主轴尺寸按照权重进行分配，忽略元素本身尺寸设置，表示自适应占满剩余空间。默认值：0。仅在Row/Column/Flex布局中生效。可选值为大于等于0的数字，或者可以转换为数字的字符串。\",\"default\":null}}\n", "# Text\n接口描述：Text组件的接口定义。\n接口参数：{'Text': {\"type\":[\"string\",\"Resource\"],\"required\":false,\"description\":\"文本内容。包含子组件Span且未设置属性字符串时不生效，显示Span内容，并且此时text组件的样式不生效。\",\"default\":\" \"}, 'value': {\"type\":\"TextOptions\",\"required\":false,\"description\":\"文本组件初始化选项。\",\"default\":null}}\n设置文本段落在水平方向的对齐方式。\n属性名称：textAlign\n属性参数：{'value': {\"type\":\"TextAlign\",\"required\":true,\"description\":\"文本段落在水平方向的对齐方式。\",\"default\":\"TextAlign.Start\"}}\n设置文本装饰线样式及其颜色。\n属性名称：decoration\n属性参数：{'value': {\"type\":\"DecorationStyleInterface\",\"required\":true,\"description\":\"文本装饰线样式对象。默认值：{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } 说明：style参数不支持卡片能力。\",\"default\":\"{ type: TextDecorationType.None, color: Color.Black, style: TextDecorationStyle.SOLID } \"}}\n设置字体颜色。\n属性名称：fontColor\n属性参数：{'value': {\"type\":\"ResourceColor\",\"required\":true,\"description\":\"字体颜色。\",\"default\":null}}\n设置选中区域。选中区域高亮且显示手柄和文本选择菜单。\n属性名称：selection\n属性参数：{'selectionStart': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的起始位置。\",\"default\":-1}, 'selectionEnd': {\"type\":\"number\",\"required\":true,\"description\":\"所选文本的结束位置。\",\"default\":-1}}\n设置文本样式。包括字体大小、字体粗细、字体族和字体风格。\n属性名称：font\n属性参数：{'value': {\"type\":\"Font\",\"required\":true,\"description\":\"文本样式。\",\"default\":null}}\n设置文字阴影效果。\n属性名称：textShadow\n属性参数：{'value': {\"type\":[\"ShadowOptions\",\"Array<ShadowOptions>\"],\"required\":true,\"description\":\"文字阴影效果。\",\"default\":null}}\n设置文本大小写。\n属性名称：textCase\n属性参数：{'value': {\"type\":\"TextCase\",\"required\":true,\"description\":\"文本大小写。\",\"default\":\"TextCase.Normal\"}}\n设置文本字符间距。设置该值为百分比时，按默认值显示。设置该值为0时，按默认值显示。\n属性名称：letterSpacing\n属性参数：{'value': {\"type\":[\"number\",\"string\"],\"required\":true,\"description\":\"文本字符间距。\",\"default\":null}}\n设置文字特性效果，比如数字等宽的特性。\n属性名称：fontFeature\n属性参数：{'value': {\"type\":\"string\",\"required\":true,\"description\":\"文字特性效果。\",\"default\":null}}\n设置使能文本识别。\n属性名称：enableDataDetector\n属性参数：{'enable': {\"type\":\"boolean\",\"required\":true,\"description\":\"使能文本识别。\",\"default\":false}}\n设置字体大小。\n属性名称：fontSize\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"字体大小。fontSize为number类型时，使用fp单位。字体默认大小16fp。不支持设置百分比字符串。\",\"default\":\"16fp\"}}\n设置文本的字体粗细，设置过大可能会在不同字体下有截断。\n属性名称：fontWeight\n属性参数：{'value': {\"type\":[\"number\",\"FontWeight\",\"string\"],\"required\":true,\"description\":\"文本的字体粗细，number类型取值[100, 900]，取值间隔为100，默认为400，取值越大，字体越粗。string类型仅支持number类型取值的字符串形式，例如\\\"400\\\"，以及\\\"bold\\\"、\\\"bolder\\\"、\\\"lighter\\\"、\\\"regular\\\"、\\\"medium\\\"，分别对应FontWeight中相应的枚举值。默认值：FontWeight.Normal\",\"default\":\"FontWeight.Normal\"}}\n设置文本最大显示字号。\n属性名称：maxFontSize\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本最大显示字号。\",\"default\":null}}\n设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小。\n属性名称：lineHeight\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本行高，为number类型时单位为fp。\",\"default\":null}}\n设置文本最小显示字号。\n属性名称：minFontSize\n属性参数：{'value': {\"type\":[\"number\",\"string\",\"Resource\"],\"required\":true,\"description\":\"文本最小显示字号。\",\"default\":null}}\n设置文本的最大行数。\n属性名称：maxLines\n属性参数：{'value': {\"type\":\"number\",\"required\":true,\"description\":\"文本的最大行数。\",\"default\":null}}\n设置文本的行间距，设置值不大于0时，取默认值0。\n属性名称：lineSpacing\n属性参数：{'value': {\"type\":\"LengthMetrics\",\"required\":true,\"description\":\"文本的行间距。\",\"default\":null}}\n示例：该组件通过Column布局实现了一个展示文本处理效果的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个文本展示区域和一组按钮。每个文本展示区域的文本以不同的省略号模式和断词模式进行展示，按钮用于切换这些模式。\n\n文本展示区域的样式包括字体大小、边框、行高、最大行数、宽度等属性，支持不同的样式展示。按钮的样式包括背景颜色、边框圆角（或半径）、宽度和高度等属性，支持不同的样式展示。按钮组之间通过Row组件进行分隔。\n\n按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。整个布局通过Column布局保证文本展示区域和按钮在垂直方向上有序排列，确保界面整洁美观。\n@Entry\n@Component\nstruct TextExample4 {\n  @State text: string =\n    'The text component is used to display a piece of textual information.Support universal attributes and universal text attributes.'\n  @State ellipsisModeIndex: number = 0;\n  @State ellipsisMode: EllipsisMode[] = [EllipsisMode.START, EllipsisMode.CENTER, EllipsisMode.END]\n  @State ellipsisModeStr: string[] = ['START', 'CENTER', 'END']\n  @State wordBreakIndex: number = 0;\n  @State wordBreak: WordBreak[] = [WordBreak.NORMAL, WordBreak.BREAK_ALL, WordBreak.BREAK_WORD]\n  @State wordBreakStr: string[] = ['NORMAL', 'BREAK_ALL', 'BREAK_WORD']\n  @State textClip: boolean = false\n\n  build() {\n    Column({ space: 10 }) {\n      // 第一个文本展示区域，展示省略号模式的效果\n      Text(this.text)\n        .fontSize(16) // 设置字体大小为16\n        .border({ width: 1 }) // 设置边框宽度为1\n        .lineHeight(20) // 设置行高为20\n        .maxLines(1) // 设置最大行数为1\n        .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n        .ellipsisMode(this.ellipsisMode[this.ellipsisModeIndex]) // 设置省略号模式\n        .width(300) // 设置宽度为300\n        .margin({ left: 20, top: 20 }) // 设置左边距和上边距为20\n\n      // 按钮区域，用于切换省略号模式\n      Row() {\n        Button('更改省略号位置：' + this.ellipsisModeStr[this.ellipsisModeIndex]).onClick(() => {\n          this.ellipsisModeIndex++\n          if (this.ellipsisModeIndex > (this.ellipsisModeStr.length - 1)) {\n            this.ellipsisModeIndex = 0\n          }\n        })\n      }\n\n      // 第二个文本展示区域，展示断词模式的效果\n      Text('This is set wordBreak to WordBreak text Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu.')\n        .fontSize(12) // 设置字体大小为12\n        .border({ width: 1 }) // 设置边框宽度为1\n        .wordBreak(WordBreak.NORMAL) // 设置断词模式为NORMAL\n        .lineHeight(20) // 设置行高为20\n        .maxLines(2) // 设置最大行数为2\n        .clip(this.textClip) // 设置是否裁剪文本\n        .width(260) // 设置宽度为260\n\n      // 按钮区域，用于切换裁剪模式\n      Row() {\n        Button('切换clip：' + this.textClip).onClick(() => {\n          this.textClip = !this.textClip\n        })\n      }\n\n      // 第三个文本展示区域，展示断词模式的效果\n      Text(this.text)\n        .fontSize(12) // 设置字体大小为12\n        .border({ width: 1 }) // 设置边框宽度为1\n        .maxLines(2) // 设置最大行数为2\n        .textOverflow({ overflow: TextOverflow.Ellipsis }) // 设置文本溢出时显示省略号\n        .wordBreak(this.wordBreak[this.wordBreakIndex]) // 设置断词模式\n        .lineHeight(20) // 设置行高为20\n        .width(260) // 设置宽度为260\n\n      // 按钮区域，用于切换断词模式\n      Row() {\n        Button('更改wordBreak模式：' + this.wordBreakStr[this.wordBreakIndex]).onClick(() => {\n          this.wordBreakIndex++\n          if (this.wordBreakIndex > (this.wordBreakStr.length - 1)) {\n            this.wordBreakIndex = 0\n          }\n        })\n      }\n    }\n  }\n}\n\n示例：该组件展示了一个文本组件（Text）及其相关信息的界面。布局宽度占据整个屏幕，高度根据内容自适应。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组文本或按钮。每个部分的文本以垂直布局方式排列，文本之间的间距均匀分布，且对齐方式为居中对齐。\n\n文本组件的样式包括字体大小、颜色、边框宽度等属性，支持不同的样式展示。按钮的功能包括点击事件和状态效果，用户可以通过点击按钮触发相应操作，按钮也可以在启用或禁用状态下进行展示。\n\n整个布局通过 Column 布局保证文本和按钮在垂直方向上有序排列，确保界面整洁美观。\n@Entry\n@Component\nstruct TextExample9 {\n  // 定义状态变量，用于存储文本组件的行数、字形位置信息和行度量信息\n  @State lineCount: string = \"\"\n  @State glyphPositionAtCoordinate: string = \"\"\n  @State lineMetrics: string = \"\"\n\n  // 创建一个 TextController 实例，用于控制文本组件\n  controller: TextController = new TextController()\n\n  // 定义文本内容\n  @State textStr: string = 'Hello World! 您好，世界！'\n\n  build() {\n    Scroll() {\n      Column() {\n        // 显示标题文本，字体大小为9，颜色为浅灰色，宽度为90%，内边距为10\n        Text('Text组件getLayoutManager接口获取段落相对组件的信息')\n          .fontSize(9)\n          .fontColor(0xCCCCCC)\n          .width('90%')\n          .padding(10)\n\n        // 显示文本内容，字体大小为25，边框宽度为1，当文本区域发生变化时获取行数\n        Text(this.textStr, { controller: this.controller })\n          .fontSize(25)\n          .borderWidth(1)\n          .onAreaChange(() => {\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            this.lineCount = \"LineCount: \" + layoutManager.getLineCount()\n          })\n\n        // 显示行数标题，字体大小为9，颜色为浅灰色，宽度为90%，内边距为10\n        Text('LineCount').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 显示行数信息\n        Text(this.lineCount)\n\n        // 显示字形位置标题，字体大小为9，颜色为浅灰色，宽度为90%，内边距为10\n        Text('GlyphPositionAtCoordinate').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 显示按钮，点击按钮时获取相对组件坐标[150,50]的字形信息\n        Button(\"相对组件坐标[150,50]字形信息\")\n          .onClick(() => {\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            let position: PositionWithAffinity = layoutManager.getGlyphPositionAtCoordinate(150, 50)\n            this.glyphPositionAtCoordinate =\n              \"相对组件坐标[150,50] glyphPositionAtCoordinate position: \" + position.position + \" affinity: \" +\n              position.affinity\n          })\n          .margin({ bottom: 20, top: 10 })\n\n        // 显示字形位置信息\n        Text(this.glyphPositionAtCoordinate)\n\n        // 显示行度量标题，字体大小为9，颜色为浅灰色，宽度为90%，内边距为10\n        Text('LineMetrics').fontSize(9).fontColor(0xCCCCCC).width('90%').padding(10)\n\n        // 显示按钮，点击按钮时获取首行行信息、文本样式信息、以及字体属性信息\n        Button(\"首行行信息、文本样式信息、以及字体属性信息\")\n          .onClick(() => {\n            let layoutManager: LayoutManager = this.controller.getLayoutManager()\n            let lineMetrics: LineMetrics = layoutManager.getLineMetrics(0)\n            this.lineMetrics = \"lineMetrics is \" + JSON.stringify(lineMetrics) + '\\\\n\\\\n'\n            let runMetrics = lineMetrics.runMetrics\n            runMetrics.forEach((value, key) => {\n              this.lineMetrics += \"runMetrics key is \" + key + \" \" + JSON.stringify(value) + \"\\\\n\\\\n\"\n            });\n          })\n          .margin({ bottom: 20, top: 10 })\n\n        // 显示行度量信息\n        Text(this.lineMetrics)\n      }\n      .margin({ top: 100, left: 8, right: 8 })\n    }\n  }\n}\n\n", "# Toggle\n接口描述：Toggle(options: { type: ToggleType, isOn?: boolean })\n接口参数：{'type': {\"type\":\"ToggleType\",\"required\":false,\"description\":\"开关的样式。\",\"default\":null}, 'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"开关是否打开，true：打开，false：关闭。\",\"default\":false}}\n开关状态切换时触发该事件。\n事件名称：onChange\n事件参数：{'isOn': {\"type\":\"boolean\",\"required\":false,\"description\":\"为true时，代表状态从关切换为开。false时，代表状态从开切换为关。\",\"default\":null}}\n事件返回值：None\n设置Switch类型的样式。仅对type为ToggleType.Switch生效。\n属性名称：switchStyle\n属性参数：{'value': {\"type\":\"SwitchStyle\",\"required\":false,\"description\":\"Switch类型的样式配置。\",\"default\":null}}\n设置Switch类型的圆形滑块颜色。仅对type为ToggleType.Switch生效。\n属性名称：switchPointColor\n属性参数：{'color': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"Switch类型的圆形滑块颜色。\",\"default\":\"#ffffffff\"}}\n示例：该组件通过 Column 布局实现了一个展示多种类型切换组件（如开关、复选框、按钮）及其状态效果的界面。布局宽度占据整个屏幕，内边距为左右 24vp、顶部 24vp。组件的垂直方向上被分为多个部分，每个部分包含一个标题和一组切换组件。每个切换组件组的组件以水平布局方式排列，组件之间的间距均匀分布，且对齐方式为居中对齐。\n切换组件的样式包括背景颜色、选中颜色、大小等属性，支持不同的样式展示。切换组件组之间通过 Column 组件进行分隔。切换组件的功能包括状态变化事件，用户可以通过操作切换组件触发相应操作，切换组件也可以在启用或禁用状态下进行展示。\n整个布局通过 Column 布局保证切换组件在垂直方向上有序排列，确保界面整洁美观。\n@Entry\n@Component\nstruct ToggleExample {\n  build() {\n    Column({ space: 10 }) { // 使用 Column 布局，设置组件之间的间距为 10vp\n      Text('type: Switch').fontSize(12).fontColor(0xcccccc).width('90%') // 显示标题文本，字体大小为 12vp，颜色为灰色，宽度为 90%\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) { // 使用 Flex 布局，水平方向上均匀分布组件，垂直方向上居中对齐\n        Toggle({ type: ToggleType.Switch, isOn: false }) // 创建一个开关类型的切换组件，初始状态为关闭\n          .selectedColor('#007DFF') // 设置选中状态的颜色为蓝色\n          .switchPointColor('#FFFFFF') // 设置开关滑块的颜色为白色\n          .onChange((isOn: boolean) => { // 监听状态变化事件\n            console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n          })\n\n        Toggle({ type: ToggleType.Switch, isOn: true }) // 创建一个开关类型的切换组件，初始状态为开启\n          .selectedColor('#007DFF') // 设置选中状态的颜色为蓝色\n          .switchPointColor('#FFFFFF') // 设置开关滑块的颜色为白色\n          .onChange((isOn: boolean) => { // 监听状态变化事件\n            console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n          })\n      }\n\n      Text('type: Checkbox').fontSize(12).fontColor(0xcccccc).width('90%') // 显示标题文本，字体大小为 12vp，颜色为灰色，宽度为 90%\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) { // 使用 Flex 布局，水平方向上均匀分布组件，垂直方向上居中对齐\n        Toggle({ type: ToggleType.Checkbox, isOn: false }) // 创建一个复选框类型的切换组件，初始状态为关闭\n          .size({ width: 20, height: 20 }) // 设置复选框的大小为 20vp x 20vp\n          .selectedColor('#007DFF') // 设置选中状态的颜色为蓝色\n          .onChange((isOn: boolean) => { // 监听状态变化事件\n            console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n          })\n\n        Toggle({ type: ToggleType.Checkbox, isOn: true }) // 创建一个复选框类型的切换组件，初始状态为开启\n          .size({ width: 20, height: 20 }) // 设置复选框的大小为 20vp x 20vp\n          .selectedColor('#007DFF') // 设置选中状态的颜色为蓝色\n          .onChange((isOn: boolean) => { // 监听状态变化事件\n            console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n          })\n      }\n\n      Text('type: Button').fontSize(12).fontColor(0xcccccc).width('90%') // 显示标题文本，字体大小为 12vp，颜色为灰色，宽度为 90%\n      Flex({ justifyContent: FlexAlign.SpaceEvenly, alignItems: ItemAlign.Center }) { // 使用 Flex 布局，水平方向上均匀分布组件，垂直方向上居中对齐\n        Toggle({ type: ToggleType.Button, isOn: false }) { // 创建一个按钮类型的切换组件，初始状态为关闭\n          Text('status button').fontColor('#182431').fontSize(12) // 按钮内的文本，字体颜色为深色，字体大小为 12vp\n        }.width(106) // 设置按钮的宽度为 106vp\n        .selectedColor('rgba(0,125,255,0.20)') // 设置选中状态的颜色为半透明蓝色\n        .onChange((isOn: boolean) => { // 监听状态变化事件\n          console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n        })\n\n        Toggle({ type: ToggleType.Button, isOn: true }) { // 创建一个按钮类型的切换组件，初始状态为开启\n          Text('status button').fontColor('#182431').fontSize(12) // 按钮内的文本，字体颜色为深色，字体大小为 12vp\n        }.width(106) // 设置按钮的宽度为 106vp\n        .selectedColor('rgba(0,125,255,0.20)') // 设置选中状态的颜色为半透明蓝色\n        .onChange((isOn: boolean) => { // 监听状态变化事件\n          console.info('Component status:' + isOn) // 输出当前组件状态到控制台\n        })\n      }\n    }.width('100%').padding(24) // 设置 Column 的宽度为 100%，内边距为 24vp\n  }\n}\n\n"], "related_types": {"Position": {"description": "位置类型，用于表示一个坐标点。", "type": "object", "properties": {"x": {"type": "Length", "required": false, "description": "x轴坐标，作为返回值时，类型为number，单位vp。", "enum": null, "enumDescriptions": null, "default": null}, "y": {"type": "Length", "required": false, "description": "y轴坐标，作为返回值时，类型为number，单位vp。", "enum": null, "enumDescriptions": null, "default": null}}, "examples": null}, "Length": {"description": "长度类型，用于描述尺寸单位。\n* string：需要显式指定像素单位，如'10px'，或百分比字符串，如'100%'。\n* number：默认单位为vp。\n* Resource：资源引用类型，引入系统或应用资源中的尺寸。", "type": ["string", "number", "Resource"], "enum": null, "enumDescriptions": null, "examples": null}, "Resource": {"description": "资源引用类型，用于设置组件属性的值。可以通过$r或者$rawfile创建Resource类型对象，不可以修改Resource中的各属性的值。", "type": "Resource", "enum": null, "enumDescriptions": null, "examples": ["```ets\n// belonging：系统资源或者应用资源，相应的取值为'sys'和'app'；\n// type：资源类型，支持'boolean'、'color'、'float'、'intarray'、'integer'、'pattern'、'plural'、'strarray'、'string'、'media'；\n// name：资源名称，在资源定义时确定。\n$r('belonging.type.name')\n```", "```ets\n// filename：工程中resources/rawfile目录下的文件名称。\n$rawfile('filename')\n```"]}, "Direction": {"description": "布局方向。", "type": "enum", "enum": ["Ltr", "Rtl", "Auto"], "enumDescriptions": {"Ltr": "元素从左到右布局。", "Rtl": "元素从右到左布局。", "Auto": "使用系统默认布局方向。"}, "examples": null}, "LocalizedEdges": {"description": "位置类型，表示相对四边的偏移量。同时设置top和bottom，仅top生效；同时设置start和end，仅start生效。", "type": "object", "properties": {"top": {"type": "LengthMetrics", "required": false, "description": "相对顶边的偏移量。", "enum": null, "enumDescriptions": null, "default": null}, "bottom": {"type": "LengthMetrics", "required": false, "description": "相对底边的偏移量。", "enum": null, "enumDescriptions": null, "default": null}, "start": {"type": "LengthMetrics", "required": false, "description": "LTR模式时相对左边的偏移量，RTL模式时相对右边的偏移量。", "enum": null, "enumDescriptions": null, "default": null}, "end": {"type": "LengthMetrics", "required": false, "description": "LTR模式时相对右边的偏移量，RTL模式时相对左边的偏移量。", "enum": null, "enumDescriptions": null, "default": null}}, "examples": null}, "LengthMetrics": {"description": "用于设置长度属性，当长度单位为PERCENT时，值为1表示100%。", "type": "object", "properties": {"value": {"type": "number", "required": false, "description": "长度属性的值。", "enum": null, "enumDescriptions": null, "default": null}, "unit": {"type": "LengthUnit", "required": false, "description": "长度属性的单位，默认为vp。", "enum": null, "enumDescriptions": null, "default": null}}, "examples": null}, "LengthUnit": {"description": "长度属性单位枚举。", "type": "enum", "enum": ["PX", "VP", "FP", "PERCENT", "LPX"], "enumDescriptions": {"PX": "长度类型，用于描述以px像素单位为单位的长度。", "VP": "长度类型，用于描述以vp逻辑像素为单位的长度。", "FP": "长度类型，用于描述以fp字体像素为单位的长度。", "PERCENT": "长度类型，用于描述百分比长度。", "LPX": "长度类型，用于描述以lpx逻辑像素为单位的长度。"}, "examples": null}, "Edges": {"description": "位置类型，表示相对四边的偏移量。同时设置top和bottom，仅top生效；同时设置left和right，仅left生效。", "type": "object", "properties": {"top": {"type": "Dimension", "required": false, "description": "相对顶边的偏移量", "enum": null, "enumDescriptions": null, "default": null}, "left": {"type": "Dimension", "required": false, "description": "相对左边的偏移量", "enum": null, "enumDescriptions": null, "default": null}, "right": {"type": "Dimension", "required": false, "description": "相对右边的偏移量", "enum": null, "enumDescriptions": null, "default": null}, "bottom": {"type": "Dimension", "required": false, "description": "相对底边的偏移量", "enum": null, "enumDescriptions": null, "default": null}}, "examples": null}, "Dimension": {"description": "长度类型，用于描述尺寸单位。", "type": "enum", "enum": ["PX", "VP", "FP", "LPX", "PERCENT", "Resource"], "enumDescriptions": {"PX": "需要指定以px像素单位，如'10px'。", "VP": "需要指定数字或vp像素单位，如10或'10vp'。", "FP": "需要指定以fp像素单位，如'10fp'。", "LPX": "需要指定以lpx像素单位，如'10lpx'。", "PERCENT": "需要指定以%像素单位，如'10%'。", "Resource": "资源引用类型，引入系统资源或者应用资源中的尺寸。"}, "examples": null}, "TextOptions": {"description": "Text初始化参数。", "type": "object", "properties": {"controller": {"type": "TextController", "required": true, "description": "文本控制器。", "enum": null, "enumDescriptions": null, "default": null}}, "examples": null}, "TextController": {"description": "Text组件的控制器。", "type": "object", "properties": {"controller": {"type": "TextController", "required": true, "description": "导入对象", "enum": null, "enumDescriptions": null, "default": null}}, "examples": null}, "Font": {"description": "设置文本样式。", "type": "object", "properties": {"size": {"type": "Length", "required": false, "description": "设置文本尺寸，Length为number类型时，使用fp单位。不支持设置百分比字符串。", "enum": null, "enumDescriptions": null, "default": 16.0}, "weight": {"type": ["FontWeight", "number", "string"], "required": false, "description": "设置文本的字体粗细，number类型取值[100, 900]，取值间隔为100，取值越大，字体越粗。", "enum": null, "enumDescriptions": null, "default": "400 | FontWeight.Normal"}, "family": {"type": ["string", "Resource"], "required": false, "description": "设置文本的字体列表。使用多个字体，使用','进行分割，优先级按顺序生效。例如：'Arial, HarmonyOS Sans'。", "enum": null, "enumDescriptions": null, "default": null}, "style": {"type": "FontStyle", "required": false, "description": "设置文本的字体样式。", "enum": null, "enumDescriptions": null, "default": "FontStyle.Normal"}}, "examples": null}, "ResourceColor": {"description": "颜色类型，用于描述资源颜色类型。\n* string：rgb或者argb格式颜色。示例：'#ffffff', '#ff000000', 'rgb(255, 100, 255)', 'rgba(255, 100, 255, 0.5)'。\n* Resource：资源引用类型，引入系统资源或者应用资源中的颜色。\n* Color: 颜色枚举值。\n* number: HEX格式颜色，支持rgb或者argb。示例：0xffffff，0xffff0000。number无法识别传入位数，格式选择依据值的大小，例如0x00ffffff作rgb格式解析", "type": ["string", "Resource", "Color", "number"], "enum": null, "enumDescriptions": null, "examples": null}, "SwitchStyle": {"description": "从API version 12开始，该接口支持在元服务中使用。", "type": "object", "properties": {"pointRadius": {"type": ["number", "Resource"], "required": false, "description": "设置Switch类型的圆形滑块半径。不支持百分比，设定值小于0时按照默认算法设置，设定值大于等于0时按照设定值设置。未设定此属性时，圆形滑块半径根据默认算法设置。默认算法：（组件高度（单位：vp） / 2） - （2vp * 组件高度（单位：vp） / 20vp）。", "enum": null, "enumDescriptions": null, "default": null}, "unselectedColor": {"type": "ResourceColor", "required": false, "description": "设置Switch类型关闭状态的背景颜色。", "enum": null, "enumDescriptions": null, "default": "0x337F7F7F"}, "pointColor": {"type": "ResourceColor", "required": false, "description": "设置Switch类型的圆形滑块颜色。", "enum": null, "enumDescriptions": null, "default": "#FFFFFFFF"}, "trackBorderRadius": {"type": ["number", "Resource"], "required": false, "description": "设置Switch类型的滑轨的圆角。不支持百分比，设定值小于0时按照默认算法设置，设定值大于组件高度一半时按照组件高度一半设置，其他场合按照设定值设置。未设定此属性时，滑轨圆角根据默认算法设置。默认算法：组件高度（单位：vp） / 2。", "enum": null, "enumDescriptions": null, "default": null}}, "examples": null}, "ToggleType": {"description": "该枚举类定义了不同类型的切换控件样式。", "type": "enum", "enum": ["Checkbox", "Button", "Switch"], "enumDescriptions": {"Checkbox": "提供单选框样式。从API version 11开始，Checkbox默认样式由圆角方形变为圆形。通用属性margin的默认值为：{top: '14px', right: '14px', bottom: '14px', left: '14px'}。默认尺寸为:{width:'20vp', height:'20vp'}。", "Button": "提供状态按钮样式，如果子组件有文本设置，则相应的文本内容会显示在按钮内部。默认尺寸为:高为28vp，宽无默认值。", "Switch": "提供开关样式。通用属性margin默认值为：{top: '6px', right: '14px', bottom: '6px', left: '14px'}。默认尺寸为:{width:'36vp', height:'20vp'}。"}, "examples": null}}}}, {"id": "YTj2i3ByqSwacxZCrskoX3", "description": "生成类型文档", "subtasks": [], "details": {"type_documents": ["类型名：Position\n类型描述：位置类型，用于表示一个坐标点。\n参数：{'x': {\"type\":\"Length\",\"required\":false,\"description\":\"x轴坐标，作为返回值时，类型为number，单位vp。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'y': {\"type\":\"Length\",\"required\":false,\"description\":\"y轴坐标，作为返回值时，类型为number，单位vp。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}}\n", "类型名：Length\n类型描述：长度类型，用于描述尺寸单位。\n* string：需要显式指定像素单位，如'10px'，或百分比字符串，如'100%'。\n* number：默认单位为vp。\n* Resource：资源引用类型，引入系统或应用资源中的尺寸。\n类型：['string', 'number', 'Resource']\n", "类型名：Resource\n类型描述：资源引用类型，用于设置组件属性的值。可以通过$r或者$rawfile创建Resource类型对象，不可以修改Resource中的各属性的值。\n类型：Resource\n类型Resource示例：\n```ets\n// belonging：系统资源或者应用资源，相应的取值为'sys'和'app'；\n// type：资源类型，支持'boolean'、'color'、'float'、'intarray'、'integer'、'pattern'、'plural'、'strarray'、'string'、'media'；\n// name：资源名称，在资源定义时确定。\n$r('belonging.type.name')\n```\n类型Resource示例：\n```ets\n// filename：工程中resources/rawfile目录下的文件名称。\n$rawfile('filename')\n```\n", "枚举类型名：Direction\n枚举类型描述：布局方向。\n枚举值：['Ltr', 'Rtl', 'Auto']\n枚举值描述：\n* Ltr: 元素从左到右布局。\n* Rtl: 元素从右到左布局。\n* Auto: 使用系统默认布局方向。\n\n", "类型名：LocalizedEdges\n类型描述：位置类型，表示相对四边的偏移量。同时设置top和bottom，仅top生效；同时设置start和end，仅start生效。\n参数：{'top': {\"type\":\"LengthMetrics\",\"required\":false,\"description\":\"相对顶边的偏移量。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'bottom': {\"type\":\"LengthMetrics\",\"required\":false,\"description\":\"相对底边的偏移量。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'start': {\"type\":\"LengthMetrics\",\"required\":false,\"description\":\"LTR模式时相对左边的偏移量，RTL模式时相对右边的偏移量。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'end': {\"type\":\"LengthMetrics\",\"required\":false,\"description\":\"LTR模式时相对右边的偏移量，RTL模式时相对左边的偏移量。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}}\n", "类型名：LengthMetrics\n类型描述：用于设置长度属性，当长度单位为PERCENT时，值为1表示100%。\n参数：{'value': {\"type\":\"number\",\"required\":false,\"description\":\"长度属性的值。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'unit': {\"type\":\"LengthUnit\",\"required\":false,\"description\":\"长度属性的单位，默认为vp。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}}\n", "枚举类型名：LengthUnit\n枚举类型描述：长度属性单位枚举。\n枚举值：['PX', 'VP', 'FP', 'PERCENT', 'LPX']\n枚举值描述：\n* PX: 长度类型，用于描述以px像素单位为单位的长度。\n* VP: 长度类型，用于描述以vp逻辑像素为单位的长度。\n* FP: 长度类型，用于描述以fp字体像素为单位的长度。\n* PERCENT: 长度类型，用于描述百分比长度。\n* LPX: 长度类型，用于描述以lpx逻辑像素为单位的长度。\n\n", "类型名：Edges\n类型描述：位置类型，表示相对四边的偏移量。同时设置top和bottom，仅top生效；同时设置left和right，仅left生效。\n参数：{'top': {\"type\":\"Dimension\",\"required\":false,\"description\":\"相对顶边的偏移量\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'left': {\"type\":\"Dimension\",\"required\":false,\"description\":\"相对左边的偏移量\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'right': {\"type\":\"Dimension\",\"required\":false,\"description\":\"相对右边的偏移量\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'bottom': {\"type\":\"Dimension\",\"required\":false,\"description\":\"相对底边的偏移量\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}}\n", "枚举类型名：Dimension\n枚举类型描述：长度类型，用于描述尺寸单位。\n枚举值：['PX', 'VP', 'FP', 'LPX', 'PERCENT', 'Resource']\n枚举值描述：\n* PX: 需要指定以px像素单位，如'10px'。\n* VP: 需要指定数字或vp像素单位，如10或'10vp'。\n* FP: 需要指定以fp像素单位，如'10fp'。\n* LPX: 需要指定以lpx像素单位，如'10lpx'。\n* PERCENT: 需要指定以%像素单位，如'10%'。\n* Resource: 资源引用类型，引入系统资源或者应用资源中的尺寸。\n\n", "类型名：TextOptions\n类型描述：Text初始化参数。\n参数：{'controller': {\"type\":\"TextController\",\"required\":true,\"description\":\"文本控制器。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}}\n", "类型名：TextController\n类型描述：Text组件的控制器。\n参数：{'controller': {\"type\":\"TextController\",\"required\":true,\"description\":\"导入对象\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}}\n", "类型名：Font\n类型描述：设置文本样式。\n参数：{'size': {\"type\":\"Length\",\"required\":false,\"description\":\"设置文本尺寸，Length为number类型时，使用fp单位。不支持设置百分比字符串。\",\"enum\":null,\"enumDescriptions\":null,\"default\":16.0}, 'weight': {\"type\":[\"FontWeight\",\"number\",\"string\"],\"required\":false,\"description\":\"设置文本的字体粗细，number类型取值[100, 900]，取值间隔为100，取值越大，字体越粗。\",\"enum\":null,\"enumDescriptions\":null,\"default\":\"400 | FontWeight.Normal\"}, 'family': {\"type\":[\"string\",\"Resource\"],\"required\":false,\"description\":\"设置文本的字体列表。使用多个字体，使用','进行分割，优先级按顺序生效。例如：'Arial, HarmonyOS Sans'。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'style': {\"type\":\"FontStyle\",\"required\":false,\"description\":\"设置文本的字体样式。\",\"enum\":null,\"enumDescriptions\":null,\"default\":\"FontStyle.Normal\"}}\n", "类型名：ResourceColor\n类型描述：颜色类型，用于描述资源颜色类型。\n* string：rgb或者argb格式颜色。示例：'#ffffff', '#ff000000', 'rgb(255, 100, 255)', 'rgba(255, 100, 255, 0.5)'。\n* Resource：资源引用类型，引入系统资源或者应用资源中的颜色。\n* Color: 颜色枚举值。\n* number: HEX格式颜色，支持rgb或者argb。示例：0xffffff，0xffff0000。number无法识别传入位数，格式选择依据值的大小，例如0x00ffffff作rgb格式解析\n类型：['string', 'Resource', 'Color', 'number']\n", "类型名：SwitchStyle\n类型描述：从API version 12开始，该接口支持在元服务中使用。\n参数：{'pointRadius': {\"type\":[\"number\",\"Resource\"],\"required\":false,\"description\":\"设置Switch类型的圆形滑块半径。不支持百分比，设定值小于0时按照默认算法设置，设定值大于等于0时按照设定值设置。未设定此属性时，圆形滑块半径根据默认算法设置。默认算法：（组件高度（单位：vp） / 2） - （2vp * 组件高度（单位：vp） / 20vp）。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}, 'unselectedColor': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"设置Switch类型关闭状态的背景颜色。\",\"enum\":null,\"enumDescriptions\":null,\"default\":\"0x337F7F7F\"}, 'pointColor': {\"type\":\"ResourceColor\",\"required\":false,\"description\":\"设置Switch类型的圆形滑块颜色。\",\"enum\":null,\"enumDescriptions\":null,\"default\":\"#FFFFFFFF\"}, 'trackBorderRadius': {\"type\":[\"number\",\"Resource\"],\"required\":false,\"description\":\"设置Switch类型的滑轨的圆角。不支持百分比，设定值小于0时按照默认算法设置，设定值大于组件高度一半时按照组件高度一半设置，其他场合按照设定值设置。未设定此属性时，滑轨圆角根据默认算法设置。默认算法：组件高度（单位：vp） / 2。\",\"enum\":null,\"enumDescriptions\":null,\"default\":null}}\n", "枚举类型名：ToggleType\n枚举类型描述：该枚举类定义了不同类型的切换控件样式。\n枚举值：['Checkbox', 'Button', 'Switch']\n枚举值描述：\n* Checkbox: 提供单选框样式。从API version 11开始，Checkbox默认样式由圆角方形变为圆形。通用属性margin的默认值为：{top: '14px', right: '14px', bottom: '14px', left: '14px'}。默认尺寸为:{width:'20vp', height:'20vp'}。\n* Button: 提供状态按钮样式，如果子组件有文本设置，则相应的文本内容会显示在按钮内部。默认尺寸为:高为28vp，宽无默认值。\n* Switch: 提供开关样式。通用属性margin默认值为：{top: '6px', right: '14px', bottom: '6px', left: '14px'}。默认尺寸为:{width:'36vp', height:'20vp'}。\n\n"]}}], "details": {"android_component": {"name": ["androidx.preference.PreferenceScreen", "androidx.preference.Preference", "androidx.preference.SwitchPreferenceCompat"], "content": "<androidx.preference.PreferenceScreen\n    xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <androidx.preference.Preference\n        android:key=\"tutorial_display_key\"\n        android:summary=\"@string/show_tutorial_settings_summary\"\n        android:title=\"@string/show_tutorial_settings_title\" />\n\n    <androidx.preference.SwitchPreferenceCompat\n        android:defaultValue=\"true\"\n        android:key=\"pref_new_book_notification\"\n        android:summary=\"@string/settings_new_book_notifications_summary\"\n        android:title=\"@string/settings_new_book_notifications\" />\n</androidx.preference.PreferenceScreen>", "layout_description": "一个偏好设置屏幕容器，宽度占满父容器，高度自适应。\n- 偏好设置项，宽度占满父容器，高度自适应，标题引用资源app.string.show_tutorial_settings_title，摘要引用资源app.string.show_tutorial_settings_summary。\n- 切换偏好设置项，宽度占满父容器，高度自适应，默认值为true，标题引用资源app.string.settings_new_book_notifications，摘要引用资源app.string.settings_new_book_notifications_summary。", "function_description": "实现了一个偏好设置屏幕，包含两个偏好设置项。第一个偏好设置项显示标题为app.string.show_tutorial_settings_title，摘要为app.string.show_tutorial_settings_summary。第二个偏好设置项是一个切换开关，默认状态为开启，显示标题为app.string.settings_new_book_notifications，摘要为app.string.settings_new_book_notifications_summary。"}}}, {"id": "8or3KHwv6L8T7pAe2Qy7VK", "description": "后处理鸿蒙组件代码", "subtasks": [], "details": {"harmony_component_code": "Column() {\n  Text($r('app.string.show_tutorial_settings_title'))\n    .width('100%')\n    .height('auto')\n    .fontSize(20)\n    .margin({ bottom: '8vp' })\n  Text($r('app.string.show_tutorial_settings_summary'))\n    .width('100%')\n    .height('auto')\n    .fontSize(16)\n    .margin({ bottom: '8vp' })\n  Toggle()\n    .width('100%')\n    .height('auto')\n    .selected(true)\n    .onChange((isOn: boolean) => {\n      console.info(`Toggle is ${isOn ? 'on' : 'off'}`);\n    })\n  Text($r('app.string.settings_new_book_notifications'))\n    .width('100%')\n    .height('auto')\n    .fontSize(20)\n    .margin({ bottom: '8vp' })\n  Text($r('app.string.settings_new_book_notifications_summary'))\n    .width('100%')\n    .height('auto')\n    .fontSize(16)\n}\n.width('100%')\n.height('auto')"}}], "details": null}], "details": {"breakdown_android_layout": {"tasks": [{"description": "转译Preference组件，包括其标题和摘要，并保持布局和样式尽可能一致。", "done": false, "component": {"name": ["androidx.preference.Preference"], "content": "<androidx.preference.Preference\n    android:key=\"tutorial_display_key\"\n    android:summary=\"@string/show_tutorial_settings_summary\"\n    android:title=\"@string/show_tutorial_settings_title\" />"}}, {"description": "转译SwitchPreferenceCompat组件，包括其默认值、标题和摘要，并保持布局和样式尽可能一致。", "done": false, "component": {"name": ["androidx.preference.SwitchPreferenceCompat"], "content": "<androidx.preference.SwitchPreferenceCompat\n    android:defaultValue=\"true\"\n    android:key=\"pref_new_book_notification\"\n    android:summary=\"@string/settings_new_book_notifications_summary\"\n    android:title=\"@string/settings_new_book_notifications\" />"}}, {"description": "将PreferenceScreen容器与其内部的所有Preference组件一起转译，确保布局和功能的一致性。", "done": false, "component": {"name": ["androidx.preference.PreferenceScreen", "androidx.preference.Preference", "androidx.preference.SwitchPreferenceCompat"], "content": "<androidx.preference.PreferenceScreen\n    xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <androidx.preference.Preference\n        android:key=\"tutorial_display_key\"\n        android:summary=\"@string/show_tutorial_settings_summary\"\n        android:title=\"@string/show_tutorial_settings_title\" />\n\n    <androidx.preference.SwitchPreferenceCompat\n        android:defaultValue=\"true\"\n        android:key=\"pref_new_book_notification\"\n        android:summary=\"@string/settings_new_book_notifications_summary\"\n        android:title=\"@string/settings_new_book_notifications\" />\n</androidx.preference.PreferenceScreen>"}}]}, "translated_android_components": [{"description": "转译Preference组件，包括其标题和摘要，并保持布局和样式尽可能一致。", "source_component": "androidx.preference.Preference", "source_component_code": "<androidx.preference.Preference\n    android:key=\"tutorial_display_key\"\n    android:summary=\"@string/show_tutorial_settings_summary\"\n    android:title=\"@string/show_tutorial_settings_title\" />", "source_component_description": "偏好设置项，宽度占满父容器，高度自适应，标题引用资源app.string.show_tutorial_settings_title，摘要引用资源app.string.show_tutorial_settings_summary。", "target_component": ["Text"], "target_component_code": "Column() {\n  Text($r('app.string.show_tutorial_settings_title'))\n    .fontSize(20)\n    .fontWeight(FontWeight.Bold)\n    .width('100%')\n    .height('auto')\n  Text($r('app.string.show_tutorial_settings_summary'))\n    .fontSize(16)\n    .width('100%')\n    .height('auto')\n}", "target_component_description": "偏好设置项，宽度占满父容器，高度自适应，标题引用资源app.string.show_tutorial_settings_title，摘要引用资源app.string.show_tutorial_settings_summary。", "explanation": "根据安卓组件描述，Preference组件需要显示标题和摘要。在鸿蒙ArkUI中，使用Column组件作为容器，包含两个Text组件分别用于显示标题和摘要。标题和摘要的宽度设置为'100%'以占满父容器，高度设置为'auto'以自适应内容。标题的文本通过$r('app.string.show_tutorial_settings_title')引用资源，摘要的文本通过$r('app.string.show_tutorial_settings_summary')引用资源。标题的文本大小设置为20，字体加粗；摘要的文本大小设置为16。"}, {"description": "转译SwitchPreferenceCompat组件，包括其默认值、标题和摘要，并保持布局和样式尽可能一致。", "source_component": "androidx.preference.SwitchPreferenceCompat", "source_component_code": "<androidx.preference.SwitchPreferenceCompat\n    android:defaultValue=\"true\"\n    android:key=\"pref_new_book_notification\"\n    android:summary=\"@string/settings_new_book_notifications_summary\"\n    android:title=\"@string/settings_new_book_notifications\" />", "source_component_description": "开关偏好设置组件，默认值为true，键为pref_new_book_notification，摘要引用资源app.string.settings_new_book_notifications_summary，标题引用资源app.string.settings_new_book_notifications。", "target_component": ["Toggle", "Text"], "target_component_code": "Column() {\n  Toggle()\n    .selectedColor($r('app.color.colorAccent'))\n    .onChange((isOn: boolean) => {\n      this.isNotificationOn = isOn;\n    })\n  Text($r('app.string.settings_new_book_notifications'))\n    .fontSize(18)\n    .margin({ top: 8 })\n  Text($r('app.string.settings_new_book_notifications_summary'))\n    .fontSize(14)\n    .margin({ top: 8 })\n}\n.width('100%')", "target_component_description": "开关偏好设置组件，默认值为true，键为pref_new_book_notification，摘要引用资源app.string.settings_new_book_notifications_summary，标题引用资源app.string.settings_new_book_notifications。", "explanation": "1. 使用Toggle组件来实现开关功能，通过selectedColor属性设置开关的颜色。\n2. 使用Text组件来显示标题和摘要文本，分别引用资源app.string.settings_new_book_notifications和app.string.settings_new_book_notifications_summary。\n3. 通过设置Toggle和Text的属性来实现与安卓组件相同的功能和样式，例如使用fontSize设置字体大小，使用margin设置间距。\n4. 使用Column组件来包裹Toggle和Text组件，确保布局和样式的一致性。\n5. 通过width('100%')设置Column组件的宽度为父组件的宽度，确保布局的完整性。"}, {"description": "将PreferenceScreen容器与其内部的所有Preference组件一起转译，确保布局和功能的一致性。", "source_component": "androidx.preference.PreferenceScreen", "source_component_code": "<androidx.preference.PreferenceScreen\n    xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <androidx.preference.Preference\n        android:key=\"tutorial_display_key\"\n        android:summary=\"@string/show_tutorial_settings_summary\"\n        android:title=\"@string/show_tutorial_settings_title\" />\n\n    <androidx.preference.SwitchPreferenceCompat\n        android:defaultValue=\"true\"\n        android:key=\"pref_new_book_notification\"\n        android:summary=\"@string/settings_new_book_notifications_summary\"\n        android:title=\"@string/settings_new_book_notifications\" />\n</androidx.preference.PreferenceScreen>", "source_component_description": "一个偏好设置屏幕容器，宽度占满父容器，高度自适应。\n- 偏好设置项，宽度占满父容器，高度自适应，标题引用资源app.string.show_tutorial_settings_title，摘要引用资源app.string.show_tutorial_settings_summary。\n- 切换偏好设置项，宽度占满父容器，高度自适应，默认值为true，标题引用资源app.string.settings_new_book_notifications，摘要引用资源app.string.settings_new_book_notifications_summary。", "target_component": ["Column", "Text", "Toggle"], "target_component_code": "Column() {\n  Text($r('app.string.show_tutorial_settings_title'))\n    .width('100%')\n    .height('auto')\n    .fontSize(20)\n    .margin({ bottom: '8vp' })\n  Text($r('app.string.show_tutorial_settings_summary'))\n    .width('100%')\n    .height('auto')\n    .fontSize(16)\n    .margin({ bottom: '8vp' })\n  Toggle()\n    .width('100%')\n    .height('auto')\n    .selected(true)\n    .onChange((isOn: boolean) => {\n      console.info(`Toggle is ${isOn ? 'on' : 'off'}`);\n    })\n  Text($r('app.string.settings_new_book_notifications'))\n    .width('100%')\n    .height('auto')\n    .fontSize(20)\n    .margin({ bottom: '8vp' })\n  Text($r('app.string.settings_new_book_notifications_summary'))\n    .width('100%')\n    .height('auto')\n    .fontSize(16)\n}\n.width('100%')\n.height('auto')", "target_component_description": "一个偏好设置屏幕容器，宽度占满父容器，高度自适应。\n- 偏好设置项，宽度占满父容器，高度自适应，标题引用资源app.string.show_tutorial_settings_title，摘要引用资源app.string.show_tutorial_settings_summary。\n- 切换偏好设置项，宽度占满父容器，高度自适应，默认值为true，标题引用资源app.string.settings_new_book_notifications，摘要引用资源app.string.settings_new_book_notifications_summary。", "explanation": "1. 使用Column组件作为容器，实现垂直布局。\n2. 第一个Preference组件使用两个Text组件分别显示标题和摘要，宽度占满父容器，高度自适应。\n3. 第二个SwitchPreferenceCompat组件使用Toggle组件实现切换开关功能，默认状态为开启，宽度占满父容器，高度自适应。\n4. 为每个Text组件设置合适的字体大小和间距，确保布局和样式与安卓组件一致。\n5. 使用$r('app.string.xxx')引用资源，确保字符串内容正确。\n6. 为Toggle组件添加onChange事件，模拟切换开关的行为。"}]}}, "assemble_harmony_layout": "为了将已经完成的转译任务结果合并为一个整体的ArkUI布局文件，我们需要确保所有组件按照正确的层次结构无缝连接，并且保持原始安卓页面的语义和结构一致性。以下是合并后的ArkUI布局文件：\n\n```ets\n@Entry\n@Component\nstruct SettingsScreen {\n  @State isNotificationOn: boolean = true;\n\n  build() {\n    Column() {\n      // Preference组件\n      Column() {\n        Text($r('app.string.show_tutorial_settings_title'))\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n          .width('100%')\n          .height('auto')\n          .margin({ bottom: '8vp' })\n        Text($r('app.string.show_tutorial_settings_summary'))\n          .fontSize(16)\n          .width('100%')\n          .height('auto')\n          .margin({ bottom: '8vp' })\n      }\n      .width('100%')\n\n      // SwitchPreferenceCompat组件\n      Column() {\n        Toggle()\n          .selectedColor($r('app.color.colorAccent'))\n          .selected(this.isNotificationOn)\n          .onChange((isOn: boolean) => {\n            this.isNotificationOn = isOn;\n          })\n          .width('100%')\n          .height('auto')\n          .margin({ bottom: '8vp' })\n        Text($r('app.string.settings_new_book_notifications'))\n          .fontSize(18)\n          .margin({ top: 8, bottom: '8vp' })\n          .width('100%')\n          .height('auto')\n        Text($r('app.string.settings_new_book_notifications_summary'))\n          .fontSize(14)\n          .margin({ top: 8 })\n          .width('100%')\n          .height('auto')\n      }\n      .width('100%')\n    }\n    .width('100%')\n    .height('auto')\n  }\n}\n```\n\n### 合并过程说明：\n1. **Preference组件**：\n   - 将标题和摘要的`Text`组件放在一个`Column`中，确保宽度占满父容器，高度自适应。\n   - 添加了`margin`属性以保持布局的一致性。\n\n2. **SwitchPreferenceCompat组件**：\n   - 将`Toggle`组件和标题、摘要的`Text`组件放在一个`Column`中，确保宽度占满父容器，高度自适应。\n   - 使用`@State`变量`isNotificationOn`来管理`Toggle`的状态，并添加了`onChange`事件处理函数。\n   - 添加了`margin`属性以保持布局的一致性。\n\n3. **整体布局**：\n   - 将两个`Column`组件放在一个顶层的`Column`中，确保整体布局的层次结构正确。\n   - 设置了顶层`Column`的宽度为`100%`，高度自适应，以确保布局的一致性。\n\n通过这种方式，我们确保了所有组件按照正确的层次结构无缝连接，并且保持了原始安卓页面的语义和结构一致性。所有UI元素、属性、样式都完整的包含在最终的ArkUI布局文件中，确保最终输出与原始安卓页面保持一致，并具有同样的功能和表现。", "time": 126.74896621704102}